/*
Unobtrusive JavaScript
https://github.com/rails/rails/blob/master/actionview/app/assets/javascripts
Released under the MIT license
 */


(function() {
  var context = this;

  (function() {
    (function() {
      this.Rails = {
        linkClickSelector: 'a[data-confirm], a[data-method], a[data-remote]:not([disabled]), a[data-disable-with], a[data-disable]',
        buttonClickSelector: {
          selector: 'button[data-remote]:not([form]), button[data-confirm]:not([form])',
          exclude: 'form button'
        },
        inputChangeSelector: 'select[data-remote], input[data-remote], textarea[data-remote]',
        formSubmitSelector: 'form',
        formInputClickSelector: 'form input[type=submit], form input[type=image], form button[type=submit], form button:not([type]), input[type=submit][form], input[type=image][form], button[type=submit][form], button[form]:not([type])',
        formDisableSelector: 'input[data-disable-with]:enabled, button[data-disable-with]:enabled, textarea[data-disable-with]:enabled, input[data-disable]:enabled, button[data-disable]:enabled, textarea[data-disable]:enabled',
        formEnableSelector: 'input[data-disable-with]:disabled, button[data-disable-with]:disabled, textarea[data-disable-with]:disabled, input[data-disable]:disabled, button[data-disable]:disabled, textarea[data-disable]:disabled',
        fileInputSelector: 'input[name][type=file]:not([disabled])',
        linkDisableSelector: 'a[data-disable-with], a[data-disable]',
        buttonDisableSelector: 'button[data-remote][data-disable-with], button[data-remote][data-disable]'
      };

    }).call(this);
  }).call(context);

  var Rails = context.Rails;

  (function() {
    (function() {
      var nonce;

      nonce = null;

      Rails.loadCSPNonce = function() {
        var ref;
        return nonce = (ref = document.querySelector("meta[name=csp-nonce]")) != null ? ref.content : void 0;
      };

      Rails.cspNonce = function() {
        return nonce != null ? nonce : Rails.loadCSPNonce();
      };

    }).call(this);
    (function() {
      var expando, m;

      m = Element.prototype.matches || Element.prototype.matchesSelector || Element.prototype.mozMatchesSelector || Element.prototype.msMatchesSelector || Element.prototype.oMatchesSelector || Element.prototype.webkitMatchesSelector;

      Rails.matches = function(element, selector) {
        if (selector.exclude != null) {
          return m.call(element, selector.selector) && !m.call(element, selector.exclude);
        } else {
          return m.call(element, selector);
        }
      };

      expando = '_ujsData';

      Rails.getData = function(element, key) {
        var ref;
        return (ref = element[expando]) != null ? ref[key] : void 0;
      };

      Rails.setData = function(element, key, value) {
        if (element[expando] == null) {
          element[expando] = {};
        }
        return element[expando][key] = value;
      };

      Rails.$ = function(selector) {
        return Array.prototype.slice.call(document.querySelectorAll(selector));
      };

    }).call(this);
    (function() {
      var $, csrfParam, csrfToken;

      $ = Rails.$;

      csrfToken = Rails.csrfToken = function() {
        var meta;
        meta = document.querySelector('meta[name=csrf-token]');
        return meta && meta.content;
      };

      csrfParam = Rails.csrfParam = function() {
        var meta;
        meta = document.querySelector('meta[name=csrf-param]');
        return meta && meta.content;
      };

      Rails.CSRFProtection = function(xhr) {
        var token;
        token = csrfToken();
        if (token != null) {
          return xhr.setRequestHeader('X-CSRF-Token', token);
        }
      };

      Rails.refreshCSRFTokens = function() {
        var param, token;
        token = csrfToken();
        param = csrfParam();
        if ((token != null) && (param != null)) {
          return $('form input[name="' + param + '"]').forEach(function(input) {
            return input.value = token;
          });
        }
      };

    }).call(this);
    (function() {
      var CustomEvent, fire, matches, preventDefault;

      matches = Rails.matches;

      CustomEvent = window.CustomEvent;

      if (typeof CustomEvent !== 'function') {
        CustomEvent = function(event, params) {
          var evt;
          evt = document.createEvent('CustomEvent');
          evt.initCustomEvent(event, params.bubbles, params.cancelable, params.detail);
          return evt;
        };
        CustomEvent.prototype = window.Event.prototype;
        preventDefault = CustomEvent.prototype.preventDefault;
        CustomEvent.prototype.preventDefault = function() {
          var result;
          result = preventDefault.call(this);
          if (this.cancelable && !this.defaultPrevented) {
            Object.defineProperty(this, 'defaultPrevented', {
              get: function() {
                return true;
              }
            });
          }
          return result;
        };
      }

      fire = Rails.fire = function(obj, name, data) {
        var event;
        event = new CustomEvent(name, {
          bubbles: true,
          cancelable: true,
          detail: data
        });
        obj.dispatchEvent(event);
        return !event.defaultPrevented;
      };

      Rails.stopEverything = function(e) {
        fire(e.target, 'ujs:everythingStopped');
        e.preventDefault();
        e.stopPropagation();
        return e.stopImmediatePropagation();
      };

      Rails.delegate = function(element, selector, eventType, handler) {
        return element.addEventListener(eventType, function(e) {
          var target;
          target = e.target;
          while (!(!(target instanceof Element) || matches(target, selector))) {
            target = target.parentNode;
          }
          if (target instanceof Element && handler.call(target, e) === false) {
            e.preventDefault();
            return e.stopPropagation();
          }
        });
      };

    }).call(this);
    (function() {
      var AcceptHeaders, CSRFProtection, createXHR, cspNonce, fire, prepareOptions, processResponse;

      cspNonce = Rails.cspNonce, CSRFProtection = Rails.CSRFProtection, fire = Rails.fire;

      AcceptHeaders = {
        '*': '*/*',
        text: 'text/plain',
        html: 'text/html',
        xml: 'application/xml, text/xml',
        json: 'application/json, text/javascript',
        script: 'text/javascript, application/javascript, application/ecmascript, application/x-ecmascript'
      };

      Rails.ajax = function(options) {
        var xhr;
        options = prepareOptions(options);
        xhr = createXHR(options, function() {
          var ref, response;
          response = processResponse((ref = xhr.response) != null ? ref : xhr.responseText, xhr.getResponseHeader('Content-Type'));
          if (Math.floor(xhr.status / 100) === 2) {
            if (typeof options.success === "function") {
              options.success(response, xhr.statusText, xhr);
            }
          } else {
            if (typeof options.error === "function") {
              options.error(response, xhr.statusText, xhr);
            }
          }
          return typeof options.complete === "function" ? options.complete(xhr, xhr.statusText) : void 0;
        });
        if ((options.beforeSend != null) && !options.beforeSend(xhr, options)) {
          return false;
        }
        if (xhr.readyState === XMLHttpRequest.OPENED) {
          return xhr.send(options.data);
        }
      };

      prepareOptions = function(options) {
        options.url = options.url || location.href;
        options.type = options.type.toUpperCase();
        if (options.type === 'GET' && options.data) {
          if (options.url.indexOf('?') < 0) {
            options.url += '?' + options.data;
          } else {
            options.url += '&' + options.data;
          }
        }
        if (AcceptHeaders[options.dataType] == null) {
          options.dataType = '*';
        }
        options.accept = AcceptHeaders[options.dataType];
        if (options.dataType !== '*') {
          options.accept += ', */*; q=0.01';
        }
        return options;
      };

      createXHR = function(options, done) {
        var xhr;
        xhr = new XMLHttpRequest();
        xhr.open(options.type, options.url, true);
        xhr.setRequestHeader('Accept', options.accept);
        if (typeof options.data === 'string') {
          xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded; charset=UTF-8');
        }
        if (!options.crossDomain) {
          xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');
        }
        CSRFProtection(xhr);
        xhr.withCredentials = !!options.withCredentials;
        xhr.onreadystatechange = function() {
          if (xhr.readyState === XMLHttpRequest.DONE) {
            return done(xhr);
          }
        };
        return xhr;
      };

      processResponse = function(response, type) {
        var parser, script;
        if (typeof response === 'string' && typeof type === 'string') {
          if (type.match(/\bjson\b/)) {
            try {
              response = JSON.parse(response);
            } catch (error) {}
          } else if (type.match(/\b(?:java|ecma)script\b/)) {
            script = document.createElement('script');
            script.setAttribute('nonce', cspNonce());
            script.text = response;
            document.head.appendChild(script).parentNode.removeChild(script);
          } else if (type.match(/\b(xml|html|svg)\b/)) {
            parser = new DOMParser();
            type = type.replace(/;.+/, '');
            try {
              response = parser.parseFromString(response, type);
            } catch (error) {}
          }
        }
        return response;
      };

      Rails.href = function(element) {
        return element.href;
      };

      Rails.isCrossDomain = function(url) {
        var e, originAnchor, urlAnchor;
        originAnchor = document.createElement('a');
        originAnchor.href = location.href;
        urlAnchor = document.createElement('a');
        try {
          urlAnchor.href = url;
          return !(((!urlAnchor.protocol || urlAnchor.protocol === ':') && !urlAnchor.host) || (originAnchor.protocol + '//' + originAnchor.host === urlAnchor.protocol + '//' + urlAnchor.host));
        } catch (error) {
          e = error;
          return true;
        }
      };

    }).call(this);
    (function() {
      var matches, toArray;

      matches = Rails.matches;

      toArray = function(e) {
        return Array.prototype.slice.call(e);
      };

      Rails.serializeElement = function(element, additionalParam) {
        var inputs, params;
        inputs = [element];
        if (matches(element, 'form')) {
          inputs = toArray(element.elements);
        }
        params = [];
        inputs.forEach(function(input) {
          if (!input.name || input.disabled) {
            return;
          }
          if (matches(input, 'select')) {
            return toArray(input.options).forEach(function(option) {
              if (option.selected) {
                return params.push({
                  name: input.name,
                  value: option.value
                });
              }
            });
          } else if (input.checked || ['radio', 'checkbox', 'submit'].indexOf(input.type) === -1) {
            return params.push({
              name: input.name,
              value: input.value
            });
          }
        });
        if (additionalParam) {
          params.push(additionalParam);
        }
        return params.map(function(param) {
          if (param.name != null) {
            return (encodeURIComponent(param.name)) + "=" + (encodeURIComponent(param.value));
          } else {
            return param;
          }
        }).join('&');
      };

      Rails.formElements = function(form, selector) {
        if (matches(form, 'form')) {
          return toArray(form.elements).filter(function(el) {
            return matches(el, selector);
          });
        } else {
          return toArray(form.querySelectorAll(selector));
        }
      };

    }).call(this);
    (function() {
      var allowAction, fire, stopEverything;

      fire = Rails.fire, stopEverything = Rails.stopEverything;

      Rails.handleConfirm = function(e) {
        if (!allowAction(this)) {
          return stopEverything(e);
        }
      };

      allowAction = function(element) {
        var answer, callback, message;
        message = element.getAttribute('data-confirm');
        if (!message) {
          return true;
        }
        answer = false;
        if (fire(element, 'confirm')) {
          try {
            answer = confirm(message);
          } catch (error) {}
          callback = fire(element, 'confirm:complete', [answer]);
        }
        return answer && callback;
      };

    }).call(this);
    (function() {
      var disableFormElement, disableFormElements, disableLinkElement, enableFormElement, enableFormElements, enableLinkElement, formElements, getData, matches, setData, stopEverything;

      matches = Rails.matches, getData = Rails.getData, setData = Rails.setData, stopEverything = Rails.stopEverything, formElements = Rails.formElements;

      Rails.handleDisabledElement = function(e) {
        var element;
        element = this;
        if (element.disabled) {
          return stopEverything(e);
        }
      };

      Rails.enableElement = function(e) {
        var element;
        element = e instanceof Event ? e.target : e;
        if (matches(element, Rails.linkDisableSelector)) {
          return enableLinkElement(element);
        } else if (matches(element, Rails.buttonDisableSelector) || matches(element, Rails.formEnableSelector)) {
          return enableFormElement(element);
        } else if (matches(element, Rails.formSubmitSelector)) {
          return enableFormElements(element);
        }
      };

      Rails.disableElement = function(e) {
        var element;
        element = e instanceof Event ? e.target : e;
        if (matches(element, Rails.linkDisableSelector)) {
          return disableLinkElement(element);
        } else if (matches(element, Rails.buttonDisableSelector) || matches(element, Rails.formDisableSelector)) {
          return disableFormElement(element);
        } else if (matches(element, Rails.formSubmitSelector)) {
          return disableFormElements(element);
        }
      };

      disableLinkElement = function(element) {
        var replacement;
        replacement = element.getAttribute('data-disable-with');
        if (replacement != null) {
          setData(element, 'ujs:enable-with', element.innerHTML);
          element.innerHTML = replacement;
        }
        element.addEventListener('click', stopEverything);
        return setData(element, 'ujs:disabled', true);
      };

      enableLinkElement = function(element) {
        var originalText;
        originalText = getData(element, 'ujs:enable-with');
        if (originalText != null) {
          element.innerHTML = originalText;
          setData(element, 'ujs:enable-with', null);
        }
        element.removeEventListener('click', stopEverything);
        return setData(element, 'ujs:disabled', null);
      };

      disableFormElements = function(form) {
        return formElements(form, Rails.formDisableSelector).forEach(disableFormElement);
      };

      disableFormElement = function(element) {
        var replacement;
        replacement = element.getAttribute('data-disable-with');
        if (replacement != null) {
          if (matches(element, 'button')) {
            setData(element, 'ujs:enable-with', element.innerHTML);
            element.innerHTML = replacement;
          } else {
            setData(element, 'ujs:enable-with', element.value);
            element.value = replacement;
          }
        }
        element.disabled = true;
        return setData(element, 'ujs:disabled', true);
      };

      enableFormElements = function(form) {
        return formElements(form, Rails.formEnableSelector).forEach(enableFormElement);
      };

      enableFormElement = function(element) {
        var originalText;
        originalText = getData(element, 'ujs:enable-with');
        if (originalText != null) {
          if (matches(element, 'button')) {
            element.innerHTML = originalText;
          } else {
            element.value = originalText;
          }
          setData(element, 'ujs:enable-with', null);
        }
        element.disabled = false;
        return setData(element, 'ujs:disabled', null);
      };

    }).call(this);
    (function() {
      var stopEverything;

      stopEverything = Rails.stopEverything;

      Rails.handleMethod = function(e) {
        var csrfParam, csrfToken, form, formContent, href, link, method;
        link = this;
        method = link.getAttribute('data-method');
        if (!method) {
          return;
        }
        href = Rails.href(link);
        csrfToken = Rails.csrfToken();
        csrfParam = Rails.csrfParam();
        form = document.createElement('form');
        formContent = "<input name='_method' value='" + method + "' type='hidden' />";
        if ((csrfParam != null) && (csrfToken != null) && !Rails.isCrossDomain(href)) {
          formContent += "<input name='" + csrfParam + "' value='" + csrfToken + "' type='hidden' />";
        }
        formContent += '<input type="submit" />';
        form.method = 'post';
        form.action = href;
        form.target = link.target;
        form.innerHTML = formContent;
        form.style.display = 'none';
        document.body.appendChild(form);
        form.querySelector('[type="submit"]').click();
        return stopEverything(e);
      };

    }).call(this);
    (function() {
      var ajax, fire, getData, isCrossDomain, isRemote, matches, serializeElement, setData, stopEverything,
        slice = [].slice;

      matches = Rails.matches, getData = Rails.getData, setData = Rails.setData, fire = Rails.fire, stopEverything = Rails.stopEverything, ajax = Rails.ajax, isCrossDomain = Rails.isCrossDomain, serializeElement = Rails.serializeElement;

      isRemote = function(element) {
        var value;
        value = element.getAttribute('data-remote');
        return (value != null) && value !== 'false';
      };

      Rails.handleRemote = function(e) {
        var button, data, dataType, element, method, url, withCredentials;
        element = this;
        if (!isRemote(element)) {
          return true;
        }
        if (!fire(element, 'ajax:before')) {
          fire(element, 'ajax:stopped');
          return false;
        }
        withCredentials = element.getAttribute('data-with-credentials');
        dataType = element.getAttribute('data-type') || 'script';
        if (matches(element, Rails.formSubmitSelector)) {
          button = getData(element, 'ujs:submit-button');
          method = getData(element, 'ujs:submit-button-formmethod') || element.method;
          url = getData(element, 'ujs:submit-button-formaction') || element.getAttribute('action') || location.href;
          if (method.toUpperCase() === 'GET') {
            url = url.replace(/\?.*$/, '');
          }
          if (element.enctype === 'multipart/form-data') {
            data = new FormData(element);
            if (button != null) {
              data.append(button.name, button.value);
            }
          } else {
            data = serializeElement(element, button);
          }
          setData(element, 'ujs:submit-button', null);
          setData(element, 'ujs:submit-button-formmethod', null);
          setData(element, 'ujs:submit-button-formaction', null);
        } else if (matches(element, Rails.buttonClickSelector) || matches(element, Rails.inputChangeSelector)) {
          method = element.getAttribute('data-method');
          url = element.getAttribute('data-url');
          data = serializeElement(element, element.getAttribute('data-params'));
        } else {
          method = element.getAttribute('data-method');
          url = Rails.href(element);
          data = element.getAttribute('data-params');
        }
        ajax({
          type: method || 'GET',
          url: url,
          data: data,
          dataType: dataType,
          beforeSend: function(xhr, options) {
            if (fire(element, 'ajax:beforeSend', [xhr, options])) {
              return fire(element, 'ajax:send', [xhr]);
            } else {
              fire(element, 'ajax:stopped');
              return false;
            }
          },
          success: function() {
            var args;
            args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
            return fire(element, 'ajax:success', args);
          },
          error: function() {
            var args;
            args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
            return fire(element, 'ajax:error', args);
          },
          complete: function() {
            var args;
            args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
            return fire(element, 'ajax:complete', args);
          },
          crossDomain: isCrossDomain(url),
          withCredentials: (withCredentials != null) && withCredentials !== 'false'
        });
        return stopEverything(e);
      };

      Rails.formSubmitButtonClick = function(e) {
        var button, form;
        button = this;
        form = button.form;
        if (!form) {
          return;
        }
        if (button.name) {
          setData(form, 'ujs:submit-button', {
            name: button.name,
            value: button.value
          });
        }
        setData(form, 'ujs:formnovalidate-button', button.formNoValidate);
        setData(form, 'ujs:submit-button-formaction', button.getAttribute('formaction'));
        return setData(form, 'ujs:submit-button-formmethod', button.getAttribute('formmethod'));
      };

      Rails.preventInsignificantClick = function(e) {
        var data, insignificantMetaClick, link, metaClick, method, primaryMouseKey;
        link = this;
        method = (link.getAttribute('data-method') || 'GET').toUpperCase();
        data = link.getAttribute('data-params');
        metaClick = e.metaKey || e.ctrlKey;
        insignificantMetaClick = metaClick && method === 'GET' && !data;
        primaryMouseKey = e.button === 0;
        if (!primaryMouseKey || insignificantMetaClick) {
          return e.stopImmediatePropagation();
        }
      };

    }).call(this);
    (function() {
      var $, CSRFProtection, delegate, disableElement, enableElement, fire, formSubmitButtonClick, getData, handleConfirm, handleDisabledElement, handleMethod, handleRemote, loadCSPNonce, preventInsignificantClick, refreshCSRFTokens;

      fire = Rails.fire, delegate = Rails.delegate, getData = Rails.getData, $ = Rails.$, refreshCSRFTokens = Rails.refreshCSRFTokens, CSRFProtection = Rails.CSRFProtection, loadCSPNonce = Rails.loadCSPNonce, enableElement = Rails.enableElement, disableElement = Rails.disableElement, handleDisabledElement = Rails.handleDisabledElement, handleConfirm = Rails.handleConfirm, preventInsignificantClick = Rails.preventInsignificantClick, handleRemote = Rails.handleRemote, formSubmitButtonClick = Rails.formSubmitButtonClick, handleMethod = Rails.handleMethod;

      if ((typeof jQuery !== "undefined" && jQuery !== null) && (jQuery.ajax != null)) {
        if (jQuery.rails) {
          throw new Error('If you load both jquery_ujs and rails-ujs, use rails-ujs only.');
        }
        jQuery.rails = Rails;
        jQuery.ajaxPrefilter(function(options, originalOptions, xhr) {
          if (!options.crossDomain) {
            return CSRFProtection(xhr);
          }
        });
      }

      Rails.start = function() {
        if (window._rails_loaded) {
          throw new Error('rails-ujs has already been loaded!');
        }
        window.addEventListener('pageshow', function() {
          $(Rails.formEnableSelector).forEach(function(el) {
            if (getData(el, 'ujs:disabled')) {
              return enableElement(el);
            }
          });
          return $(Rails.linkDisableSelector).forEach(function(el) {
            if (getData(el, 'ujs:disabled')) {
              return enableElement(el);
            }
          });
        });
        delegate(document, Rails.linkDisableSelector, 'ajax:complete', enableElement);
        delegate(document, Rails.linkDisableSelector, 'ajax:stopped', enableElement);
        delegate(document, Rails.buttonDisableSelector, 'ajax:complete', enableElement);
        delegate(document, Rails.buttonDisableSelector, 'ajax:stopped', enableElement);
        delegate(document, Rails.linkClickSelector, 'click', preventInsignificantClick);
        delegate(document, Rails.linkClickSelector, 'click', handleDisabledElement);
        delegate(document, Rails.linkClickSelector, 'click', handleConfirm);
        delegate(document, Rails.linkClickSelector, 'click', disableElement);
        delegate(document, Rails.linkClickSelector, 'click', handleRemote);
        delegate(document, Rails.linkClickSelector, 'click', handleMethod);
        delegate(document, Rails.buttonClickSelector, 'click', preventInsignificantClick);
        delegate(document, Rails.buttonClickSelector, 'click', handleDisabledElement);
        delegate(document, Rails.buttonClickSelector, 'click', handleConfirm);
        delegate(document, Rails.buttonClickSelector, 'click', disableElement);
        delegate(document, Rails.buttonClickSelector, 'click', handleRemote);
        delegate(document, Rails.inputChangeSelector, 'change', handleDisabledElement);
        delegate(document, Rails.inputChangeSelector, 'change', handleConfirm);
        delegate(document, Rails.inputChangeSelector, 'change', handleRemote);
        delegate(document, Rails.formSubmitSelector, 'submit', handleDisabledElement);
        delegate(document, Rails.formSubmitSelector, 'submit', handleConfirm);
        delegate(document, Rails.formSubmitSelector, 'submit', handleRemote);
        delegate(document, Rails.formSubmitSelector, 'submit', function(e) {
          return setTimeout((function() {
            return disableElement(e);
          }), 13);
        });
        delegate(document, Rails.formSubmitSelector, 'ajax:send', disableElement);
        delegate(document, Rails.formSubmitSelector, 'ajax:complete', enableElement);
        delegate(document, Rails.formInputClickSelector, 'click', preventInsignificantClick);
        delegate(document, Rails.formInputClickSelector, 'click', handleDisabledElement);
        delegate(document, Rails.formInputClickSelector, 'click', handleConfirm);
        delegate(document, Rails.formInputClickSelector, 'click', formSubmitButtonClick);
        document.addEventListener('DOMContentLoaded', refreshCSRFTokens);
        document.addEventListener('DOMContentLoaded', loadCSPNonce);
        return window._rails_loaded = true;
      };

      if (window.Rails === Rails && fire(document, 'rails:attachBindings')) {
        Rails.start();
      }

    }).call(this);
  }).call(this);

  if (typeof module === "object" && module.exports) {
    module.exports = Rails;
  } else if (typeof define === "function" && define.amd) {
    define(Rails);
  }
}).call(this);
(function(global, factory) {
  typeof exports === "object" && typeof module !== "undefined" ? factory(exports) : typeof define === "function" && define.amd ? define([ "exports" ], factory) : factory(global.ActiveStorage = {});
})(this, function(exports) {
  "use strict";
  function createCommonjsModule(fn, module) {
    return module = {
      exports: {}
    }, fn(module, module.exports), module.exports;
  }
  var sparkMd5 = createCommonjsModule(function(module, exports) {
    (function(factory) {
      {
        module.exports = factory();
      }
    })(function(undefined) {
      var hex_chr = [ "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "a", "b", "c", "d", "e", "f" ];
      function md5cycle(x, k) {
        var a = x[0], b = x[1], c = x[2], d = x[3];
        a += (b & c | ~b & d) + k[0] - 680876936 | 0;
        a = (a << 7 | a >>> 25) + b | 0;
        d += (a & b | ~a & c) + k[1] - 389564586 | 0;
        d = (d << 12 | d >>> 20) + a | 0;
        c += (d & a | ~d & b) + k[2] + 606105819 | 0;
        c = (c << 17 | c >>> 15) + d | 0;
        b += (c & d | ~c & a) + k[3] - 1044525330 | 0;
        b = (b << 22 | b >>> 10) + c | 0;
        a += (b & c | ~b & d) + k[4] - 176418897 | 0;
        a = (a << 7 | a >>> 25) + b | 0;
        d += (a & b | ~a & c) + k[5] + 1200080426 | 0;
        d = (d << 12 | d >>> 20) + a | 0;
        c += (d & a | ~d & b) + k[6] - 1473231341 | 0;
        c = (c << 17 | c >>> 15) + d | 0;
        b += (c & d | ~c & a) + k[7] - 45705983 | 0;
        b = (b << 22 | b >>> 10) + c | 0;
        a += (b & c | ~b & d) + k[8] + 1770035416 | 0;
        a = (a << 7 | a >>> 25) + b | 0;
        d += (a & b | ~a & c) + k[9] - 1958414417 | 0;
        d = (d << 12 | d >>> 20) + a | 0;
        c += (d & a | ~d & b) + k[10] - 42063 | 0;
        c = (c << 17 | c >>> 15) + d | 0;
        b += (c & d | ~c & a) + k[11] - 1990404162 | 0;
        b = (b << 22 | b >>> 10) + c | 0;
        a += (b & c | ~b & d) + k[12] + 1804603682 | 0;
        a = (a << 7 | a >>> 25) + b | 0;
        d += (a & b | ~a & c) + k[13] - 40341101 | 0;
        d = (d << 12 | d >>> 20) + a | 0;
        c += (d & a | ~d & b) + k[14] - 1502002290 | 0;
        c = (c << 17 | c >>> 15) + d | 0;
        b += (c & d | ~c & a) + k[15] + 1236535329 | 0;
        b = (b << 22 | b >>> 10) + c | 0;
        a += (b & d | c & ~d) + k[1] - 165796510 | 0;
        a = (a << 5 | a >>> 27) + b | 0;
        d += (a & c | b & ~c) + k[6] - 1069501632 | 0;
        d = (d << 9 | d >>> 23) + a | 0;
        c += (d & b | a & ~b) + k[11] + 643717713 | 0;
        c = (c << 14 | c >>> 18) + d | 0;
        b += (c & a | d & ~a) + k[0] - 373897302 | 0;
        b = (b << 20 | b >>> 12) + c | 0;
        a += (b & d | c & ~d) + k[5] - 701558691 | 0;
        a = (a << 5 | a >>> 27) + b | 0;
        d += (a & c | b & ~c) + k[10] + 38016083 | 0;
        d = (d << 9 | d >>> 23) + a | 0;
        c += (d & b | a & ~b) + k[15] - 660478335 | 0;
        c = (c << 14 | c >>> 18) + d | 0;
        b += (c & a | d & ~a) + k[4] - 405537848 | 0;
        b = (b << 20 | b >>> 12) + c | 0;
        a += (b & d | c & ~d) + k[9] + 568446438 | 0;
        a = (a << 5 | a >>> 27) + b | 0;
        d += (a & c | b & ~c) + k[14] - 1019803690 | 0;
        d = (d << 9 | d >>> 23) + a | 0;
        c += (d & b | a & ~b) + k[3] - 187363961 | 0;
        c = (c << 14 | c >>> 18) + d | 0;
        b += (c & a | d & ~a) + k[8] + 1163531501 | 0;
        b = (b << 20 | b >>> 12) + c | 0;
        a += (b & d | c & ~d) + k[13] - 1444681467 | 0;
        a = (a << 5 | a >>> 27) + b | 0;
        d += (a & c | b & ~c) + k[2] - 51403784 | 0;
        d = (d << 9 | d >>> 23) + a | 0;
        c += (d & b | a & ~b) + k[7] + 1735328473 | 0;
        c = (c << 14 | c >>> 18) + d | 0;
        b += (c & a | d & ~a) + k[12] - 1926607734 | 0;
        b = (b << 20 | b >>> 12) + c | 0;
        a += (b ^ c ^ d) + k[5] - 378558 | 0;
        a = (a << 4 | a >>> 28) + b | 0;
        d += (a ^ b ^ c) + k[8] - 2022574463 | 0;
        d = (d << 11 | d >>> 21) + a | 0;
        c += (d ^ a ^ b) + k[11] + 1839030562 | 0;
        c = (c << 16 | c >>> 16) + d | 0;
        b += (c ^ d ^ a) + k[14] - 35309556 | 0;
        b = (b << 23 | b >>> 9) + c | 0;
        a += (b ^ c ^ d) + k[1] - 1530992060 | 0;
        a = (a << 4 | a >>> 28) + b | 0;
        d += (a ^ b ^ c) + k[4] + 1272893353 | 0;
        d = (d << 11 | d >>> 21) + a | 0;
        c += (d ^ a ^ b) + k[7] - 155497632 | 0;
        c = (c << 16 | c >>> 16) + d | 0;
        b += (c ^ d ^ a) + k[10] - 1094730640 | 0;
        b = (b << 23 | b >>> 9) + c | 0;
        a += (b ^ c ^ d) + k[13] + 681279174 | 0;
        a = (a << 4 | a >>> 28) + b | 0;
        d += (a ^ b ^ c) + k[0] - 358537222 | 0;
        d = (d << 11 | d >>> 21) + a | 0;
        c += (d ^ a ^ b) + k[3] - 722521979 | 0;
        c = (c << 16 | c >>> 16) + d | 0;
        b += (c ^ d ^ a) + k[6] + 76029189 | 0;
        b = (b << 23 | b >>> 9) + c | 0;
        a += (b ^ c ^ d) + k[9] - 640364487 | 0;
        a = (a << 4 | a >>> 28) + b | 0;
        d += (a ^ b ^ c) + k[12] - 421815835 | 0;
        d = (d << 11 | d >>> 21) + a | 0;
        c += (d ^ a ^ b) + k[15] + 530742520 | 0;
        c = (c << 16 | c >>> 16) + d | 0;
        b += (c ^ d ^ a) + k[2] - 995338651 | 0;
        b = (b << 23 | b >>> 9) + c | 0;
        a += (c ^ (b | ~d)) + k[0] - 198630844 | 0;
        a = (a << 6 | a >>> 26) + b | 0;
        d += (b ^ (a | ~c)) + k[7] + 1126891415 | 0;
        d = (d << 10 | d >>> 22) + a | 0;
        c += (a ^ (d | ~b)) + k[14] - 1416354905 | 0;
        c = (c << 15 | c >>> 17) + d | 0;
        b += (d ^ (c | ~a)) + k[5] - 57434055 | 0;
        b = (b << 21 | b >>> 11) + c | 0;
        a += (c ^ (b | ~d)) + k[12] + 1700485571 | 0;
        a = (a << 6 | a >>> 26) + b | 0;
        d += (b ^ (a | ~c)) + k[3] - 1894986606 | 0;
        d = (d << 10 | d >>> 22) + a | 0;
        c += (a ^ (d | ~b)) + k[10] - 1051523 | 0;
        c = (c << 15 | c >>> 17) + d | 0;
        b += (d ^ (c | ~a)) + k[1] - 2054922799 | 0;
        b = (b << 21 | b >>> 11) + c | 0;
        a += (c ^ (b | ~d)) + k[8] + 1873313359 | 0;
        a = (a << 6 | a >>> 26) + b | 0;
        d += (b ^ (a | ~c)) + k[15] - 30611744 | 0;
        d = (d << 10 | d >>> 22) + a | 0;
        c += (a ^ (d | ~b)) + k[6] - 1560198380 | 0;
        c = (c << 15 | c >>> 17) + d | 0;
        b += (d ^ (c | ~a)) + k[13] + 1309151649 | 0;
        b = (b << 21 | b >>> 11) + c | 0;
        a += (c ^ (b | ~d)) + k[4] - 145523070 | 0;
        a = (a << 6 | a >>> 26) + b | 0;
        d += (b ^ (a | ~c)) + k[11] - 1120210379 | 0;
        d = (d << 10 | d >>> 22) + a | 0;
        c += (a ^ (d | ~b)) + k[2] + 718787259 | 0;
        c = (c << 15 | c >>> 17) + d | 0;
        b += (d ^ (c | ~a)) + k[9] - 343485551 | 0;
        b = (b << 21 | b >>> 11) + c | 0;
        x[0] = a + x[0] | 0;
        x[1] = b + x[1] | 0;
        x[2] = c + x[2] | 0;
        x[3] = d + x[3] | 0;
      }
      function md5blk(s) {
        var md5blks = [], i;
        for (i = 0; i < 64; i += 4) {
          md5blks[i >> 2] = s.charCodeAt(i) + (s.charCodeAt(i + 1) << 8) + (s.charCodeAt(i + 2) << 16) + (s.charCodeAt(i + 3) << 24);
        }
        return md5blks;
      }
      function md5blk_array(a) {
        var md5blks = [], i;
        for (i = 0; i < 64; i += 4) {
          md5blks[i >> 2] = a[i] + (a[i + 1] << 8) + (a[i + 2] << 16) + (a[i + 3] << 24);
        }
        return md5blks;
      }
      function md51(s) {
        var n = s.length, state = [ 1732584193, -271733879, -1732584194, 271733878 ], i, length, tail, tmp, lo, hi;
        for (i = 64; i <= n; i += 64) {
          md5cycle(state, md5blk(s.substring(i - 64, i)));
        }
        s = s.substring(i - 64);
        length = s.length;
        tail = [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ];
        for (i = 0; i < length; i += 1) {
          tail[i >> 2] |= s.charCodeAt(i) << (i % 4 << 3);
        }
        tail[i >> 2] |= 128 << (i % 4 << 3);
        if (i > 55) {
          md5cycle(state, tail);
          for (i = 0; i < 16; i += 1) {
            tail[i] = 0;
          }
        }
        tmp = n * 8;
        tmp = tmp.toString(16).match(/(.*?)(.{0,8})$/);
        lo = parseInt(tmp[2], 16);
        hi = parseInt(tmp[1], 16) || 0;
        tail[14] = lo;
        tail[15] = hi;
        md5cycle(state, tail);
        return state;
      }
      function md51_array(a) {
        var n = a.length, state = [ 1732584193, -271733879, -1732584194, 271733878 ], i, length, tail, tmp, lo, hi;
        for (i = 64; i <= n; i += 64) {
          md5cycle(state, md5blk_array(a.subarray(i - 64, i)));
        }
        a = i - 64 < n ? a.subarray(i - 64) : new Uint8Array(0);
        length = a.length;
        tail = [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ];
        for (i = 0; i < length; i += 1) {
          tail[i >> 2] |= a[i] << (i % 4 << 3);
        }
        tail[i >> 2] |= 128 << (i % 4 << 3);
        if (i > 55) {
          md5cycle(state, tail);
          for (i = 0; i < 16; i += 1) {
            tail[i] = 0;
          }
        }
        tmp = n * 8;
        tmp = tmp.toString(16).match(/(.*?)(.{0,8})$/);
        lo = parseInt(tmp[2], 16);
        hi = parseInt(tmp[1], 16) || 0;
        tail[14] = lo;
        tail[15] = hi;
        md5cycle(state, tail);
        return state;
      }
      function rhex(n) {
        var s = "", j;
        for (j = 0; j < 4; j += 1) {
          s += hex_chr[n >> j * 8 + 4 & 15] + hex_chr[n >> j * 8 & 15];
        }
        return s;
      }
      function hex(x) {
        var i;
        for (i = 0; i < x.length; i += 1) {
          x[i] = rhex(x[i]);
        }
        return x.join("");
      }
      if (hex(md51("hello")) !== "5d41402abc4b2a76b9719d911017c592") ;
      if (typeof ArrayBuffer !== "undefined" && !ArrayBuffer.prototype.slice) {
        (function() {
          function clamp(val, length) {
            val = val | 0 || 0;
            if (val < 0) {
              return Math.max(val + length, 0);
            }
            return Math.min(val, length);
          }
          ArrayBuffer.prototype.slice = function(from, to) {
            var length = this.byteLength, begin = clamp(from, length), end = length, num, target, targetArray, sourceArray;
            if (to !== undefined) {
              end = clamp(to, length);
            }
            if (begin > end) {
              return new ArrayBuffer(0);
            }
            num = end - begin;
            target = new ArrayBuffer(num);
            targetArray = new Uint8Array(target);
            sourceArray = new Uint8Array(this, begin, num);
            targetArray.set(sourceArray);
            return target;
          };
        })();
      }
      function toUtf8(str) {
        if (/[\u0080-\uFFFF]/.test(str)) {
          str = unescape(encodeURIComponent(str));
        }
        return str;
      }
      function utf8Str2ArrayBuffer(str, returnUInt8Array) {
        var length = str.length, buff = new ArrayBuffer(length), arr = new Uint8Array(buff), i;
        for (i = 0; i < length; i += 1) {
          arr[i] = str.charCodeAt(i);
        }
        return returnUInt8Array ? arr : buff;
      }
      function arrayBuffer2Utf8Str(buff) {
        return String.fromCharCode.apply(null, new Uint8Array(buff));
      }
      function concatenateArrayBuffers(first, second, returnUInt8Array) {
        var result = new Uint8Array(first.byteLength + second.byteLength);
        result.set(new Uint8Array(first));
        result.set(new Uint8Array(second), first.byteLength);
        return returnUInt8Array ? result : result.buffer;
      }
      function hexToBinaryString(hex) {
        var bytes = [], length = hex.length, x;
        for (x = 0; x < length - 1; x += 2) {
          bytes.push(parseInt(hex.substr(x, 2), 16));
        }
        return String.fromCharCode.apply(String, bytes);
      }
      function SparkMD5() {
        this.reset();
      }
      SparkMD5.prototype.append = function(str) {
        this.appendBinary(toUtf8(str));
        return this;
      };
      SparkMD5.prototype.appendBinary = function(contents) {
        this._buff += contents;
        this._length += contents.length;
        var length = this._buff.length, i;
        for (i = 64; i <= length; i += 64) {
          md5cycle(this._hash, md5blk(this._buff.substring(i - 64, i)));
        }
        this._buff = this._buff.substring(i - 64);
        return this;
      };
      SparkMD5.prototype.end = function(raw) {
        var buff = this._buff, length = buff.length, i, tail = [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ], ret;
        for (i = 0; i < length; i += 1) {
          tail[i >> 2] |= buff.charCodeAt(i) << (i % 4 << 3);
        }
        this._finish(tail, length);
        ret = hex(this._hash);
        if (raw) {
          ret = hexToBinaryString(ret);
        }
        this.reset();
        return ret;
      };
      SparkMD5.prototype.reset = function() {
        this._buff = "";
        this._length = 0;
        this._hash = [ 1732584193, -271733879, -1732584194, 271733878 ];
        return this;
      };
      SparkMD5.prototype.getState = function() {
        return {
          buff: this._buff,
          length: this._length,
          hash: this._hash
        };
      };
      SparkMD5.prototype.setState = function(state) {
        this._buff = state.buff;
        this._length = state.length;
        this._hash = state.hash;
        return this;
      };
      SparkMD5.prototype.destroy = function() {
        delete this._hash;
        delete this._buff;
        delete this._length;
      };
      SparkMD5.prototype._finish = function(tail, length) {
        var i = length, tmp, lo, hi;
        tail[i >> 2] |= 128 << (i % 4 << 3);
        if (i > 55) {
          md5cycle(this._hash, tail);
          for (i = 0; i < 16; i += 1) {
            tail[i] = 0;
          }
        }
        tmp = this._length * 8;
        tmp = tmp.toString(16).match(/(.*?)(.{0,8})$/);
        lo = parseInt(tmp[2], 16);
        hi = parseInt(tmp[1], 16) || 0;
        tail[14] = lo;
        tail[15] = hi;
        md5cycle(this._hash, tail);
      };
      SparkMD5.hash = function(str, raw) {
        return SparkMD5.hashBinary(toUtf8(str), raw);
      };
      SparkMD5.hashBinary = function(content, raw) {
        var hash = md51(content), ret = hex(hash);
        return raw ? hexToBinaryString(ret) : ret;
      };
      SparkMD5.ArrayBuffer = function() {
        this.reset();
      };
      SparkMD5.ArrayBuffer.prototype.append = function(arr) {
        var buff = concatenateArrayBuffers(this._buff.buffer, arr, true), length = buff.length, i;
        this._length += arr.byteLength;
        for (i = 64; i <= length; i += 64) {
          md5cycle(this._hash, md5blk_array(buff.subarray(i - 64, i)));
        }
        this._buff = i - 64 < length ? new Uint8Array(buff.buffer.slice(i - 64)) : new Uint8Array(0);
        return this;
      };
      SparkMD5.ArrayBuffer.prototype.end = function(raw) {
        var buff = this._buff, length = buff.length, tail = [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ], i, ret;
        for (i = 0; i < length; i += 1) {
          tail[i >> 2] |= buff[i] << (i % 4 << 3);
        }
        this._finish(tail, length);
        ret = hex(this._hash);
        if (raw) {
          ret = hexToBinaryString(ret);
        }
        this.reset();
        return ret;
      };
      SparkMD5.ArrayBuffer.prototype.reset = function() {
        this._buff = new Uint8Array(0);
        this._length = 0;
        this._hash = [ 1732584193, -271733879, -1732584194, 271733878 ];
        return this;
      };
      SparkMD5.ArrayBuffer.prototype.getState = function() {
        var state = SparkMD5.prototype.getState.call(this);
        state.buff = arrayBuffer2Utf8Str(state.buff);
        return state;
      };
      SparkMD5.ArrayBuffer.prototype.setState = function(state) {
        state.buff = utf8Str2ArrayBuffer(state.buff, true);
        return SparkMD5.prototype.setState.call(this, state);
      };
      SparkMD5.ArrayBuffer.prototype.destroy = SparkMD5.prototype.destroy;
      SparkMD5.ArrayBuffer.prototype._finish = SparkMD5.prototype._finish;
      SparkMD5.ArrayBuffer.hash = function(arr, raw) {
        var hash = md51_array(new Uint8Array(arr)), ret = hex(hash);
        return raw ? hexToBinaryString(ret) : ret;
      };
      return SparkMD5;
    });
  });
  var classCallCheck = function(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  };
  var createClass = function() {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    return function(Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();
  var fileSlice = File.prototype.slice || File.prototype.mozSlice || File.prototype.webkitSlice;
  var FileChecksum = function() {
    createClass(FileChecksum, null, [ {
      key: "create",
      value: function create(file, callback) {
        var instance = new FileChecksum(file);
        instance.create(callback);
      }
    } ]);
    function FileChecksum(file) {
      classCallCheck(this, FileChecksum);
      this.file = file;
      this.chunkSize = 2097152;
      this.chunkCount = Math.ceil(this.file.size / this.chunkSize);
      this.chunkIndex = 0;
    }
    createClass(FileChecksum, [ {
      key: "create",
      value: function create(callback) {
        var _this = this;
        this.callback = callback;
        this.md5Buffer = new sparkMd5.ArrayBuffer();
        this.fileReader = new FileReader();
        this.fileReader.addEventListener("load", function(event) {
          return _this.fileReaderDidLoad(event);
        });
        this.fileReader.addEventListener("error", function(event) {
          return _this.fileReaderDidError(event);
        });
        this.readNextChunk();
      }
    }, {
      key: "fileReaderDidLoad",
      value: function fileReaderDidLoad(event) {
        this.md5Buffer.append(event.target.result);
        if (!this.readNextChunk()) {
          var binaryDigest = this.md5Buffer.end(true);
          var base64digest = btoa(binaryDigest);
          this.callback(null, base64digest);
        }
      }
    }, {
      key: "fileReaderDidError",
      value: function fileReaderDidError(event) {
        this.callback("Error reading " + this.file.name);
      }
    }, {
      key: "readNextChunk",
      value: function readNextChunk() {
        if (this.chunkIndex < this.chunkCount || this.chunkIndex == 0 && this.chunkCount == 0) {
          var start = this.chunkIndex * this.chunkSize;
          var end = Math.min(start + this.chunkSize, this.file.size);
          var bytes = fileSlice.call(this.file, start, end);
          this.fileReader.readAsArrayBuffer(bytes);
          this.chunkIndex++;
          return true;
        } else {
          return false;
        }
      }
    } ]);
    return FileChecksum;
  }();
  function getMetaValue(name) {
    var element = findElement(document.head, 'meta[name="' + name + '"]');
    if (element) {
      return element.getAttribute("content");
    }
  }
  function findElements(root, selector) {
    if (typeof root == "string") {
      selector = root;
      root = document;
    }
    var elements = root.querySelectorAll(selector);
    return toArray$1(elements);
  }
  function findElement(root, selector) {
    if (typeof root == "string") {
      selector = root;
      root = document;
    }
    return root.querySelector(selector);
  }
  function dispatchEvent(element, type) {
    var eventInit = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    var disabled = element.disabled;
    var bubbles = eventInit.bubbles, cancelable = eventInit.cancelable, detail = eventInit.detail;
    var event = document.createEvent("Event");
    event.initEvent(type, bubbles || true, cancelable || true);
    event.detail = detail || {};
    try {
      element.disabled = false;
      element.dispatchEvent(event);
    } finally {
      element.disabled = disabled;
    }
    return event;
  }
  function toArray$1(value) {
    if (Array.isArray(value)) {
      return value;
    } else if (Array.from) {
      return Array.from(value);
    } else {
      return [].slice.call(value);
    }
  }
  var BlobRecord = function() {
    function BlobRecord(file, checksum, url) {
      var _this = this;
      classCallCheck(this, BlobRecord);
      this.file = file;
      this.attributes = {
        filename: file.name,
        content_type: file.type,
        byte_size: file.size,
        checksum: checksum
      };
      this.xhr = new XMLHttpRequest();
      this.xhr.open("POST", url, true);
      this.xhr.responseType = "json";
      this.xhr.setRequestHeader("Content-Type", "application/json");
      this.xhr.setRequestHeader("Accept", "application/json");
      this.xhr.setRequestHeader("X-Requested-With", "XMLHttpRequest");
      this.xhr.setRequestHeader("X-CSRF-Token", getMetaValue("csrf-token"));
      this.xhr.addEventListener("load", function(event) {
        return _this.requestDidLoad(event);
      });
      this.xhr.addEventListener("error", function(event) {
        return _this.requestDidError(event);
      });
    }
    createClass(BlobRecord, [ {
      key: "create",
      value: function create(callback) {
        this.callback = callback;
        this.xhr.send(JSON.stringify({
          blob: this.attributes
        }));
      }
    }, {
      key: "requestDidLoad",
      value: function requestDidLoad(event) {
        if (this.status >= 200 && this.status < 300) {
          var response = this.response;
          var direct_upload = response.direct_upload;
          delete response.direct_upload;
          this.attributes = response;
          this.directUploadData = direct_upload;
          this.callback(null, this.toJSON());
        } else {
          this.requestDidError(event);
        }
      }
    }, {
      key: "requestDidError",
      value: function requestDidError(event) {
        this.callback('Error creating Blob for "' + this.file.name + '". Status: ' + this.status);
      }
    }, {
      key: "toJSON",
      value: function toJSON() {
        var result = {};
        for (var key in this.attributes) {
          result[key] = this.attributes[key];
        }
        return result;
      }
    }, {
      key: "status",
      get: function get$$1() {
        return this.xhr.status;
      }
    }, {
      key: "response",
      get: function get$$1() {
        var _xhr = this.xhr, responseType = _xhr.responseType, response = _xhr.response;
        if (responseType == "json") {
          return response;
        } else {
          return JSON.parse(response);
        }
      }
    } ]);
    return BlobRecord;
  }();
  var BlobUpload = function() {
    function BlobUpload(blob) {
      var _this = this;
      classCallCheck(this, BlobUpload);
      this.blob = blob;
      this.file = blob.file;
      var _blob$directUploadDat = blob.directUploadData, url = _blob$directUploadDat.url, headers = _blob$directUploadDat.headers;
      this.xhr = new XMLHttpRequest();
      this.xhr.open("PUT", url, true);
      this.xhr.responseType = "text";
      for (var key in headers) {
        this.xhr.setRequestHeader(key, headers[key]);
      }
      this.xhr.addEventListener("load", function(event) {
        return _this.requestDidLoad(event);
      });
      this.xhr.addEventListener("error", function(event) {
        return _this.requestDidError(event);
      });
    }
    createClass(BlobUpload, [ {
      key: "create",
      value: function create(callback) {
        this.callback = callback;
        this.xhr.send(this.file.slice());
      }
    }, {
      key: "requestDidLoad",
      value: function requestDidLoad(event) {
        var _xhr = this.xhr, status = _xhr.status, response = _xhr.response;
        if (status >= 200 && status < 300) {
          this.callback(null, response);
        } else {
          this.requestDidError(event);
        }
      }
    }, {
      key: "requestDidError",
      value: function requestDidError(event) {
        this.callback('Error storing "' + this.file.name + '". Status: ' + this.xhr.status);
      }
    } ]);
    return BlobUpload;
  }();
  var id = 0;
  var DirectUpload = function() {
    function DirectUpload(file, url, delegate) {
      classCallCheck(this, DirectUpload);
      this.id = ++id;
      this.file = file;
      this.url = url;
      this.delegate = delegate;
    }
    createClass(DirectUpload, [ {
      key: "create",
      value: function create(callback) {
        var _this = this;
        FileChecksum.create(this.file, function(error, checksum) {
          if (error) {
            callback(error);
            return;
          }
          var blob = new BlobRecord(_this.file, checksum, _this.url);
          notify(_this.delegate, "directUploadWillCreateBlobWithXHR", blob.xhr);
          blob.create(function(error) {
            if (error) {
              callback(error);
            } else {
              var upload = new BlobUpload(blob);
              notify(_this.delegate, "directUploadWillStoreFileWithXHR", upload.xhr);
              upload.create(function(error) {
                if (error) {
                  callback(error);
                } else {
                  callback(null, blob.toJSON());
                }
              });
            }
          });
        });
      }
    } ]);
    return DirectUpload;
  }();
  function notify(object, methodName) {
    if (object && typeof object[methodName] == "function") {
      for (var _len = arguments.length, messages = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
        messages[_key - 2] = arguments[_key];
      }
      return object[methodName].apply(object, messages);
    }
  }
  var DirectUploadController = function() {
    function DirectUploadController(input, file) {
      classCallCheck(this, DirectUploadController);
      this.input = input;
      this.file = file;
      this.directUpload = new DirectUpload(this.file, this.url, this);
      this.dispatch("initialize");
    }
    createClass(DirectUploadController, [ {
      key: "start",
      value: function start(callback) {
        var _this = this;
        var hiddenInput = document.createElement("input");
        hiddenInput.type = "hidden";
        hiddenInput.name = this.input.name;
        this.input.insertAdjacentElement("beforebegin", hiddenInput);
        this.dispatch("start");
        this.directUpload.create(function(error, attributes) {
          if (error) {
            hiddenInput.parentNode.removeChild(hiddenInput);
            _this.dispatchError(error);
          } else {
            hiddenInput.value = attributes.signed_id;
          }
          _this.dispatch("end");
          callback(error);
        });
      }
    }, {
      key: "uploadRequestDidProgress",
      value: function uploadRequestDidProgress(event) {
        var progress = event.loaded / event.total * 100;
        if (progress) {
          this.dispatch("progress", {
            progress: progress
          });
        }
      }
    }, {
      key: "dispatch",
      value: function dispatch(name) {
        var detail = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        detail.file = this.file;
        detail.id = this.directUpload.id;
        return dispatchEvent(this.input, "direct-upload:" + name, {
          detail: detail
        });
      }
    }, {
      key: "dispatchError",
      value: function dispatchError(error) {
        var event = this.dispatch("error", {
          error: error
        });
        if (!event.defaultPrevented) {
          alert(error);
        }
      }
    }, {
      key: "directUploadWillCreateBlobWithXHR",
      value: function directUploadWillCreateBlobWithXHR(xhr) {
        this.dispatch("before-blob-request", {
          xhr: xhr
        });
      }
    }, {
      key: "directUploadWillStoreFileWithXHR",
      value: function directUploadWillStoreFileWithXHR(xhr) {
        var _this2 = this;
        this.dispatch("before-storage-request", {
          xhr: xhr
        });
        xhr.upload.addEventListener("progress", function(event) {
          return _this2.uploadRequestDidProgress(event);
        });
      }
    }, {
      key: "url",
      get: function get$$1() {
        return this.input.getAttribute("data-direct-upload-url");
      }
    } ]);
    return DirectUploadController;
  }();
  var inputSelector = "input[type=file][data-direct-upload-url]:not([disabled])";
  var DirectUploadsController = function() {
    function DirectUploadsController(form) {
      classCallCheck(this, DirectUploadsController);
      this.form = form;
      this.inputs = findElements(form, inputSelector).filter(function(input) {
        return input.files.length;
      });
    }
    createClass(DirectUploadsController, [ {
      key: "start",
      value: function start(callback) {
        var _this = this;
        var controllers = this.createDirectUploadControllers();
        var startNextController = function startNextController() {
          var controller = controllers.shift();
          if (controller) {
            controller.start(function(error) {
              if (error) {
                callback(error);
                _this.dispatch("end");
              } else {
                startNextController();
              }
            });
          } else {
            callback();
            _this.dispatch("end");
          }
        };
        this.dispatch("start");
        startNextController();
      }
    }, {
      key: "createDirectUploadControllers",
      value: function createDirectUploadControllers() {
        var controllers = [];
        this.inputs.forEach(function(input) {
          toArray$1(input.files).forEach(function(file) {
            var controller = new DirectUploadController(input, file);
            controllers.push(controller);
          });
        });
        return controllers;
      }
    }, {
      key: "dispatch",
      value: function dispatch(name) {
        var detail = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        return dispatchEvent(this.form, "direct-uploads:" + name, {
          detail: detail
        });
      }
    } ]);
    return DirectUploadsController;
  }();
  var processingAttribute = "data-direct-uploads-processing";
  var submitButtonsByForm = new WeakMap();
  var started = false;
  function start() {
    if (!started) {
      started = true;
      document.addEventListener("click", didClick, true);
      document.addEventListener("submit", didSubmitForm);
      document.addEventListener("ajax:before", didSubmitRemoteElement);
    }
  }
  function didClick(event) {
    var target = event.target;
    if ((target.tagName == "INPUT" || target.tagName == "BUTTON") && target.type == "submit" && target.form) {
      submitButtonsByForm.set(target.form, target);
    }
  }
  function didSubmitForm(event) {
    handleFormSubmissionEvent(event);
  }
  function didSubmitRemoteElement(event) {
    if (event.target.tagName == "FORM") {
      handleFormSubmissionEvent(event);
    }
  }
  function handleFormSubmissionEvent(event) {
    var form = event.target;
    if (form.hasAttribute(processingAttribute)) {
      event.preventDefault();
      return;
    }
    var controller = new DirectUploadsController(form);
    var inputs = controller.inputs;
    if (inputs.length) {
      event.preventDefault();
      form.setAttribute(processingAttribute, "");
      inputs.forEach(disable);
      controller.start(function(error) {
        form.removeAttribute(processingAttribute);
        if (error) {
          inputs.forEach(enable);
        } else {
          submitForm(form);
        }
      });
    }
  }
  function submitForm(form) {
    var button = submitButtonsByForm.get(form) || findElement(form, "input[type=submit], button[type=submit]");
    if (button) {
      var _button = button, disabled = _button.disabled;
      button.disabled = false;
      button.focus();
      button.click();
      button.disabled = disabled;
    } else {
      button = document.createElement("input");
      button.type = "submit";
      button.style.display = "none";
      form.appendChild(button);
      button.click();
      form.removeChild(button);
    }
    submitButtonsByForm.delete(form);
  }
  function disable(input) {
    input.disabled = true;
  }
  function enable(input) {
    input.disabled = false;
  }
  function autostart() {
    if (window.ActiveStorage) {
      start();
    }
  }
  setTimeout(autostart, 1);
  exports.start = start;
  exports.DirectUpload = DirectUpload;
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
});
/*!
 * jQuery JavaScript Library v1.12.4
 * http://jquery.com/
 *
 * Includes Sizzle.js
 * http://sizzlejs.com/
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2016-05-20T17:17Z
 */


(function( global, factory ) {

	if ( typeof module === "object" && typeof module.exports === "object" ) {
		// For CommonJS and CommonJS-like environments where a proper `window`
		// is present, execute the factory and get jQuery.
		// For environments that do not have a `window` with a `document`
		// (such as Node.js), expose a factory as module.exports.
		// This accentuates the need for the creation of a real `window`.
		// e.g. var jQuery = require("jquery")(window);
		// See ticket #14549 for more info.
		module.exports = global.document ?
			factory( global, true ) :
			function( w ) {
				if ( !w.document ) {
					throw new Error( "jQuery requires a window with a document" );
				}
				return factory( w );
			};
	} else {
		factory( global );
	}

// Pass this if window is not defined yet
}(typeof window !== "undefined" ? window : this, function( window, noGlobal ) {

// Support: Firefox 18+
// Can't be in strict mode, several libs including ASP.NET trace
// the stack via arguments.caller.callee and Firefox dies if
// you try to trace through "use strict" call chains. (#13335)
//"use strict";
var deletedIds = [];

var document = window.document;

var slice = deletedIds.slice;

var concat = deletedIds.concat;

var push = deletedIds.push;

var indexOf = deletedIds.indexOf;

var class2type = {};

var toString = class2type.toString;

var hasOwn = class2type.hasOwnProperty;

var support = {};



var
	version = "1.12.4",

	// Define a local copy of jQuery
	jQuery = function( selector, context ) {

		// The jQuery object is actually just the init constructor 'enhanced'
		// Need init if jQuery is called (just allow error to be thrown if not included)
		return new jQuery.fn.init( selector, context );
	},

	// Support: Android<4.1, IE<9
	// Make sure we trim BOM and NBSP
	rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,

	// Matches dashed string for camelizing
	rmsPrefix = /^-ms-/,
	rdashAlpha = /-([\da-z])/gi,

	// Used by jQuery.camelCase as callback to replace()
	fcamelCase = function( all, letter ) {
		return letter.toUpperCase();
	};

jQuery.fn = jQuery.prototype = {

	// The current version of jQuery being used
	jquery: version,

	constructor: jQuery,

	// Start with an empty selector
	selector: "",

	// The default length of a jQuery object is 0
	length: 0,

	toArray: function() {
		return slice.call( this );
	},

	// Get the Nth element in the matched element set OR
	// Get the whole matched element set as a clean array
	get: function( num ) {
		return num != null ?

			// Return just the one element from the set
			( num < 0 ? this[ num + this.length ] : this[ num ] ) :

			// Return all the elements in a clean array
			slice.call( this );
	},

	// Take an array of elements and push it onto the stack
	// (returning the new matched element set)
	pushStack: function( elems ) {

		// Build a new jQuery matched element set
		var ret = jQuery.merge( this.constructor(), elems );

		// Add the old object onto the stack (as a reference)
		ret.prevObject = this;
		ret.context = this.context;

		// Return the newly-formed element set
		return ret;
	},

	// Execute a callback for every element in the matched set.
	each: function( callback ) {
		return jQuery.each( this, callback );
	},

	map: function( callback ) {
		return this.pushStack( jQuery.map( this, function( elem, i ) {
			return callback.call( elem, i, elem );
		} ) );
	},

	slice: function() {
		return this.pushStack( slice.apply( this, arguments ) );
	},

	first: function() {
		return this.eq( 0 );
	},

	last: function() {
		return this.eq( -1 );
	},

	eq: function( i ) {
		var len = this.length,
			j = +i + ( i < 0 ? len : 0 );
		return this.pushStack( j >= 0 && j < len ? [ this[ j ] ] : [] );
	},

	end: function() {
		return this.prevObject || this.constructor();
	},

	// For internal use only.
	// Behaves like an Array's method, not like a jQuery method.
	push: push,
	sort: deletedIds.sort,
	splice: deletedIds.splice
};

jQuery.extend = jQuery.fn.extend = function() {
	var src, copyIsArray, copy, name, options, clone,
		target = arguments[ 0 ] || {},
		i = 1,
		length = arguments.length,
		deep = false;

	// Handle a deep copy situation
	if ( typeof target === "boolean" ) {
		deep = target;

		// skip the boolean and the target
		target = arguments[ i ] || {};
		i++;
	}

	// Handle case when target is a string or something (possible in deep copy)
	if ( typeof target !== "object" && !jQuery.isFunction( target ) ) {
		target = {};
	}

	// extend jQuery itself if only one argument is passed
	if ( i === length ) {
		target = this;
		i--;
	}

	for ( ; i < length; i++ ) {

		// Only deal with non-null/undefined values
		if ( ( options = arguments[ i ] ) != null ) {

			// Extend the base object
			for ( name in options ) {
				src = target[ name ];
				copy = options[ name ];

				// Prevent never-ending loop
				if ( target === copy ) {
					continue;
				}

				// Recurse if we're merging plain objects or arrays
				if ( deep && copy && ( jQuery.isPlainObject( copy ) ||
					( copyIsArray = jQuery.isArray( copy ) ) ) ) {

					if ( copyIsArray ) {
						copyIsArray = false;
						clone = src && jQuery.isArray( src ) ? src : [];

					} else {
						clone = src && jQuery.isPlainObject( src ) ? src : {};
					}

					// Never move original objects, clone them
					target[ name ] = jQuery.extend( deep, clone, copy );

				// Don't bring in undefined values
				} else if ( copy !== undefined ) {
					target[ name ] = copy;
				}
			}
		}
	}

	// Return the modified object
	return target;
};

jQuery.extend( {

	// Unique for each copy of jQuery on the page
	expando: "jQuery" + ( version + Math.random() ).replace( /\D/g, "" ),

	// Assume jQuery is ready without the ready module
	isReady: true,

	error: function( msg ) {
		throw new Error( msg );
	},

	noop: function() {},

	// See test/unit/core.js for details concerning isFunction.
	// Since version 1.3, DOM methods and functions like alert
	// aren't supported. They return false on IE (#2968).
	isFunction: function( obj ) {
		return jQuery.type( obj ) === "function";
	},

	isArray: Array.isArray || function( obj ) {
		return jQuery.type( obj ) === "array";
	},

	isWindow: function( obj ) {
		/* jshint eqeqeq: false */
		return obj != null && obj == obj.window;
	},

	isNumeric: function( obj ) {

		// parseFloat NaNs numeric-cast false positives (null|true|false|"")
		// ...but misinterprets leading-number strings, particularly hex literals ("0x...")
		// subtraction forces infinities to NaN
		// adding 1 corrects loss of precision from parseFloat (#15100)
		var realStringObj = obj && obj.toString();
		return !jQuery.isArray( obj ) && ( realStringObj - parseFloat( realStringObj ) + 1 ) >= 0;
	},

	isEmptyObject: function( obj ) {
		var name;
		for ( name in obj ) {
			return false;
		}
		return true;
	},

	isPlainObject: function( obj ) {
		var key;

		// Must be an Object.
		// Because of IE, we also have to check the presence of the constructor property.
		// Make sure that DOM nodes and window objects don't pass through, as well
		if ( !obj || jQuery.type( obj ) !== "object" || obj.nodeType || jQuery.isWindow( obj ) ) {
			return false;
		}

		try {

			// Not own constructor property must be Object
			if ( obj.constructor &&
				!hasOwn.call( obj, "constructor" ) &&
				!hasOwn.call( obj.constructor.prototype, "isPrototypeOf" ) ) {
				return false;
			}
		} catch ( e ) {

			// IE8,9 Will throw exceptions on certain host objects #9897
			return false;
		}

		// Support: IE<9
		// Handle iteration over inherited properties before own properties.
		if ( !support.ownFirst ) {
			for ( key in obj ) {
				return hasOwn.call( obj, key );
			}
		}

		// Own properties are enumerated firstly, so to speed up,
		// if last one is own, then all properties are own.
		for ( key in obj ) {}

		return key === undefined || hasOwn.call( obj, key );
	},

	type: function( obj ) {
		if ( obj == null ) {
			return obj + "";
		}
		return typeof obj === "object" || typeof obj === "function" ?
			class2type[ toString.call( obj ) ] || "object" :
			typeof obj;
	},

	// Workarounds based on findings by Jim Driscoll
	// http://weblogs.java.net/blog/driscoll/archive/2009/09/08/eval-javascript-global-context
	globalEval: function( data ) {
		if ( data && jQuery.trim( data ) ) {

			// We use execScript on Internet Explorer
			// We use an anonymous function so that context is window
			// rather than jQuery in Firefox
			( window.execScript || function( data ) {
				window[ "eval" ].call( window, data ); // jscs:ignore requireDotNotation
			} )( data );
		}
	},

	// Convert dashed to camelCase; used by the css and data modules
	// Microsoft forgot to hump their vendor prefix (#9572)
	camelCase: function( string ) {
		return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
	},

	nodeName: function( elem, name ) {
		return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
	},

	each: function( obj, callback ) {
		var length, i = 0;

		if ( isArrayLike( obj ) ) {
			length = obj.length;
			for ( ; i < length; i++ ) {
				if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
					break;
				}
			}
		} else {
			for ( i in obj ) {
				if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
					break;
				}
			}
		}

		return obj;
	},

	// Support: Android<4.1, IE<9
	trim: function( text ) {
		return text == null ?
			"" :
			( text + "" ).replace( rtrim, "" );
	},

	// results is for internal usage only
	makeArray: function( arr, results ) {
		var ret = results || [];

		if ( arr != null ) {
			if ( isArrayLike( Object( arr ) ) ) {
				jQuery.merge( ret,
					typeof arr === "string" ?
					[ arr ] : arr
				);
			} else {
				push.call( ret, arr );
			}
		}

		return ret;
	},

	inArray: function( elem, arr, i ) {
		var len;

		if ( arr ) {
			if ( indexOf ) {
				return indexOf.call( arr, elem, i );
			}

			len = arr.length;
			i = i ? i < 0 ? Math.max( 0, len + i ) : i : 0;

			for ( ; i < len; i++ ) {

				// Skip accessing in sparse arrays
				if ( i in arr && arr[ i ] === elem ) {
					return i;
				}
			}
		}

		return -1;
	},

	merge: function( first, second ) {
		var len = +second.length,
			j = 0,
			i = first.length;

		while ( j < len ) {
			first[ i++ ] = second[ j++ ];
		}

		// Support: IE<9
		// Workaround casting of .length to NaN on otherwise arraylike objects (e.g., NodeLists)
		if ( len !== len ) {
			while ( second[ j ] !== undefined ) {
				first[ i++ ] = second[ j++ ];
			}
		}

		first.length = i;

		return first;
	},

	grep: function( elems, callback, invert ) {
		var callbackInverse,
			matches = [],
			i = 0,
			length = elems.length,
			callbackExpect = !invert;

		// Go through the array, only saving the items
		// that pass the validator function
		for ( ; i < length; i++ ) {
			callbackInverse = !callback( elems[ i ], i );
			if ( callbackInverse !== callbackExpect ) {
				matches.push( elems[ i ] );
			}
		}

		return matches;
	},

	// arg is for internal usage only
	map: function( elems, callback, arg ) {
		var length, value,
			i = 0,
			ret = [];

		// Go through the array, translating each of the items to their new values
		if ( isArrayLike( elems ) ) {
			length = elems.length;
			for ( ; i < length; i++ ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}

		// Go through every key on the object,
		} else {
			for ( i in elems ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}
		}

		// Flatten any nested arrays
		return concat.apply( [], ret );
	},

	// A global GUID counter for objects
	guid: 1,

	// Bind a function to a context, optionally partially applying any
	// arguments.
	proxy: function( fn, context ) {
		var args, proxy, tmp;

		if ( typeof context === "string" ) {
			tmp = fn[ context ];
			context = fn;
			fn = tmp;
		}

		// Quick check to determine if target is callable, in the spec
		// this throws a TypeError, but we will just return undefined.
		if ( !jQuery.isFunction( fn ) ) {
			return undefined;
		}

		// Simulated bind
		args = slice.call( arguments, 2 );
		proxy = function() {
			return fn.apply( context || this, args.concat( slice.call( arguments ) ) );
		};

		// Set the guid of unique handler to the same of original handler, so it can be removed
		proxy.guid = fn.guid = fn.guid || jQuery.guid++;

		return proxy;
	},

	now: function() {
		return +( new Date() );
	},

	// jQuery.support is not used in Core but other projects attach their
	// properties to it so it needs to exist.
	support: support
} );

// JSHint would error on this code due to the Symbol not being defined in ES5.
// Defining this global in .jshintrc would create a danger of using the global
// unguarded in another place, it seems safer to just disable JSHint for these
// three lines.
/* jshint ignore: start */
if ( typeof Symbol === "function" ) {
	jQuery.fn[ Symbol.iterator ] = deletedIds[ Symbol.iterator ];
}
/* jshint ignore: end */

// Populate the class2type map
jQuery.each( "Boolean Number String Function Array Date RegExp Object Error Symbol".split( " " ),
function( i, name ) {
	class2type[ "[object " + name + "]" ] = name.toLowerCase();
} );

function isArrayLike( obj ) {

	// Support: iOS 8.2 (not reproducible in simulator)
	// `in` check used to prevent JIT error (gh-2145)
	// hasOwn isn't used here due to false negatives
	// regarding Nodelist length in IE
	var length = !!obj && "length" in obj && obj.length,
		type = jQuery.type( obj );

	if ( type === "function" || jQuery.isWindow( obj ) ) {
		return false;
	}

	return type === "array" || length === 0 ||
		typeof length === "number" && length > 0 && ( length - 1 ) in obj;
}
var Sizzle =
/*!
 * Sizzle CSS Selector Engine v2.2.1
 * http://sizzlejs.com/
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2015-10-17
 */
(function( window ) {

var i,
	support,
	Expr,
	getText,
	isXML,
	tokenize,
	compile,
	select,
	outermostContext,
	sortInput,
	hasDuplicate,

	// Local document vars
	setDocument,
	document,
	docElem,
	documentIsHTML,
	rbuggyQSA,
	rbuggyMatches,
	matches,
	contains,

	// Instance-specific data
	expando = "sizzle" + 1 * new Date(),
	preferredDoc = window.document,
	dirruns = 0,
	done = 0,
	classCache = createCache(),
	tokenCache = createCache(),
	compilerCache = createCache(),
	sortOrder = function( a, b ) {
		if ( a === b ) {
			hasDuplicate = true;
		}
		return 0;
	},

	// General-purpose constants
	MAX_NEGATIVE = 1 << 31,

	// Instance methods
	hasOwn = ({}).hasOwnProperty,
	arr = [],
	pop = arr.pop,
	push_native = arr.push,
	push = arr.push,
	slice = arr.slice,
	// Use a stripped-down indexOf as it's faster than native
	// http://jsperf.com/thor-indexof-vs-for/5
	indexOf = function( list, elem ) {
		var i = 0,
			len = list.length;
		for ( ; i < len; i++ ) {
			if ( list[i] === elem ) {
				return i;
			}
		}
		return -1;
	},

	booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",

	// Regular expressions

	// http://www.w3.org/TR/css3-selectors/#whitespace
	whitespace = "[\\x20\\t\\r\\n\\f]",

	// http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
	identifier = "(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",

	// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
	attributes = "\\[" + whitespace + "*(" + identifier + ")(?:" + whitespace +
		// Operator (capture 2)
		"*([*^$|!~]?=)" + whitespace +
		// "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"
		"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace +
		"*\\]",

	pseudos = ":(" + identifier + ")(?:\\((" +
		// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
		// 1. quoted (capture 3; capture 4 or capture 5)
		"('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +
		// 2. simple (capture 6)
		"((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +
		// 3. anything else (capture 2)
		".*" +
		")\\)|)",

	// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
	rwhitespace = new RegExp( whitespace + "+", "g" ),
	rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g" ),

	rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
	rcombinators = new RegExp( "^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*" ),

	rattributeQuotes = new RegExp( "=" + whitespace + "*([^\\]'\"]*?)" + whitespace + "*\\]", "g" ),

	rpseudo = new RegExp( pseudos ),
	ridentifier = new RegExp( "^" + identifier + "$" ),

	matchExpr = {
		"ID": new RegExp( "^#(" + identifier + ")" ),
		"CLASS": new RegExp( "^\\.(" + identifier + ")" ),
		"TAG": new RegExp( "^(" + identifier + "|[*])" ),
		"ATTR": new RegExp( "^" + attributes ),
		"PSEUDO": new RegExp( "^" + pseudos ),
		"CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace +
			"*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +
			"*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
		"bool": new RegExp( "^(?:" + booleans + ")$", "i" ),
		// For use in libraries implementing .is()
		// We use this for POS matching in `select`
		"needsContext": new RegExp( "^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" +
			whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )
	},

	rinputs = /^(?:input|select|textarea|button)$/i,
	rheader = /^h\d$/i,

	rnative = /^[^{]+\{\s*\[native \w/,

	// Easily-parseable/retrievable ID or TAG or CLASS selectors
	rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,

	rsibling = /[+~]/,
	rescape = /'|\\/g,

	// CSS escapes http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
	runescape = new RegExp( "\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig" ),
	funescape = function( _, escaped, escapedWhitespace ) {
		var high = "0x" + escaped - 0x10000;
		// NaN means non-codepoint
		// Support: Firefox<24
		// Workaround erroneous numeric interpretation of +"0x"
		return high !== high || escapedWhitespace ?
			escaped :
			high < 0 ?
				// BMP codepoint
				String.fromCharCode( high + 0x10000 ) :
				// Supplemental Plane codepoint (surrogate pair)
				String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
	},

	// Used for iframes
	// See setDocument()
	// Removing the function wrapper causes a "Permission Denied"
	// error in IE
	unloadHandler = function() {
		setDocument();
	};

// Optimize for push.apply( _, NodeList )
try {
	push.apply(
		(arr = slice.call( preferredDoc.childNodes )),
		preferredDoc.childNodes
	);
	// Support: Android<4.0
	// Detect silently failing push.apply
	arr[ preferredDoc.childNodes.length ].nodeType;
} catch ( e ) {
	push = { apply: arr.length ?

		// Leverage slice if possible
		function( target, els ) {
			push_native.apply( target, slice.call(els) );
		} :

		// Support: IE<9
		// Otherwise append directly
		function( target, els ) {
			var j = target.length,
				i = 0;
			// Can't trust NodeList.length
			while ( (target[j++] = els[i++]) ) {}
			target.length = j - 1;
		}
	};
}

function Sizzle( selector, context, results, seed ) {
	var m, i, elem, nid, nidselect, match, groups, newSelector,
		newContext = context && context.ownerDocument,

		// nodeType defaults to 9, since context defaults to document
		nodeType = context ? context.nodeType : 9;

	results = results || [];

	// Return early from calls with invalid selector or context
	if ( typeof selector !== "string" || !selector ||
		nodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {

		return results;
	}

	// Try to shortcut find operations (as opposed to filters) in HTML documents
	if ( !seed ) {

		if ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {
			setDocument( context );
		}
		context = context || document;

		if ( documentIsHTML ) {

			// If the selector is sufficiently simple, try using a "get*By*" DOM method
			// (excepting DocumentFragment context, where the methods don't exist)
			if ( nodeType !== 11 && (match = rquickExpr.exec( selector )) ) {

				// ID selector
				if ( (m = match[1]) ) {

					// Document context
					if ( nodeType === 9 ) {
						if ( (elem = context.getElementById( m )) ) {

							// Support: IE, Opera, Webkit
							// TODO: identify versions
							// getElementById can match elements by name instead of ID
							if ( elem.id === m ) {
								results.push( elem );
								return results;
							}
						} else {
							return results;
						}

					// Element context
					} else {

						// Support: IE, Opera, Webkit
						// TODO: identify versions
						// getElementById can match elements by name instead of ID
						if ( newContext && (elem = newContext.getElementById( m )) &&
							contains( context, elem ) &&
							elem.id === m ) {

							results.push( elem );
							return results;
						}
					}

				// Type selector
				} else if ( match[2] ) {
					push.apply( results, context.getElementsByTagName( selector ) );
					return results;

				// Class selector
				} else if ( (m = match[3]) && support.getElementsByClassName &&
					context.getElementsByClassName ) {

					push.apply( results, context.getElementsByClassName( m ) );
					return results;
				}
			}

			// Take advantage of querySelectorAll
			if ( support.qsa &&
				!compilerCache[ selector + " " ] &&
				(!rbuggyQSA || !rbuggyQSA.test( selector )) ) {

				if ( nodeType !== 1 ) {
					newContext = context;
					newSelector = selector;

				// qSA looks outside Element context, which is not what we want
				// Thanks to Andrew Dupont for this workaround technique
				// Support: IE <=8
				// Exclude object elements
				} else if ( context.nodeName.toLowerCase() !== "object" ) {

					// Capture the context ID, setting it first if necessary
					if ( (nid = context.getAttribute( "id" )) ) {
						nid = nid.replace( rescape, "\\$&" );
					} else {
						context.setAttribute( "id", (nid = expando) );
					}

					// Prefix every selector in the list
					groups = tokenize( selector );
					i = groups.length;
					nidselect = ridentifier.test( nid ) ? "#" + nid : "[id='" + nid + "']";
					while ( i-- ) {
						groups[i] = nidselect + " " + toSelector( groups[i] );
					}
					newSelector = groups.join( "," );

					// Expand context for sibling selectors
					newContext = rsibling.test( selector ) && testContext( context.parentNode ) ||
						context;
				}

				if ( newSelector ) {
					try {
						push.apply( results,
							newContext.querySelectorAll( newSelector )
						);
						return results;
					} catch ( qsaError ) {
					} finally {
						if ( nid === expando ) {
							context.removeAttribute( "id" );
						}
					}
				}
			}
		}
	}

	// All others
	return select( selector.replace( rtrim, "$1" ), context, results, seed );
}

/**
 * Create key-value caches of limited size
 * @returns {function(string, object)} Returns the Object data after storing it on itself with
 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
 *	deleting the oldest entry
 */
function createCache() {
	var keys = [];

	function cache( key, value ) {
		// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
		if ( keys.push( key + " " ) > Expr.cacheLength ) {
			// Only keep the most recent entries
			delete cache[ keys.shift() ];
		}
		return (cache[ key + " " ] = value);
	}
	return cache;
}

/**
 * Mark a function for special use by Sizzle
 * @param {Function} fn The function to mark
 */
function markFunction( fn ) {
	fn[ expando ] = true;
	return fn;
}

/**
 * Support testing using an element
 * @param {Function} fn Passed the created div and expects a boolean result
 */
function assert( fn ) {
	var div = document.createElement("div");

	try {
		return !!fn( div );
	} catch (e) {
		return false;
	} finally {
		// Remove from its parent by default
		if ( div.parentNode ) {
			div.parentNode.removeChild( div );
		}
		// release memory in IE
		div = null;
	}
}

/**
 * Adds the same handler for all of the specified attrs
 * @param {String} attrs Pipe-separated list of attributes
 * @param {Function} handler The method that will be applied
 */
function addHandle( attrs, handler ) {
	var arr = attrs.split("|"),
		i = arr.length;

	while ( i-- ) {
		Expr.attrHandle[ arr[i] ] = handler;
	}
}

/**
 * Checks document order of two siblings
 * @param {Element} a
 * @param {Element} b
 * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
 */
function siblingCheck( a, b ) {
	var cur = b && a,
		diff = cur && a.nodeType === 1 && b.nodeType === 1 &&
			( ~b.sourceIndex || MAX_NEGATIVE ) -
			( ~a.sourceIndex || MAX_NEGATIVE );

	// Use IE sourceIndex if available on both nodes
	if ( diff ) {
		return diff;
	}

	// Check if b follows a
	if ( cur ) {
		while ( (cur = cur.nextSibling) ) {
			if ( cur === b ) {
				return -1;
			}
		}
	}

	return a ? 1 : -1;
}

/**
 * Returns a function to use in pseudos for input types
 * @param {String} type
 */
function createInputPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return name === "input" && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for buttons
 * @param {String} type
 */
function createButtonPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return (name === "input" || name === "button") && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for positionals
 * @param {Function} fn
 */
function createPositionalPseudo( fn ) {
	return markFunction(function( argument ) {
		argument = +argument;
		return markFunction(function( seed, matches ) {
			var j,
				matchIndexes = fn( [], seed.length, argument ),
				i = matchIndexes.length;

			// Match elements found at the specified indexes
			while ( i-- ) {
				if ( seed[ (j = matchIndexes[i]) ] ) {
					seed[j] = !(matches[j] = seed[j]);
				}
			}
		});
	});
}

/**
 * Checks a node for validity as a Sizzle context
 * @param {Element|Object=} context
 * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
 */
function testContext( context ) {
	return context && typeof context.getElementsByTagName !== "undefined" && context;
}

// Expose support vars for convenience
support = Sizzle.support = {};

/**
 * Detects XML nodes
 * @param {Element|Object} elem An element or a document
 * @returns {Boolean} True iff elem is a non-HTML XML node
 */
isXML = Sizzle.isXML = function( elem ) {
	// documentElement is verified for cases where it doesn't yet exist
	// (such as loading iframes in IE - #4833)
	var documentElement = elem && (elem.ownerDocument || elem).documentElement;
	return documentElement ? documentElement.nodeName !== "HTML" : false;
};

/**
 * Sets document-related variables once based on the current document
 * @param {Element|Object} [doc] An element or document object to use to set the document
 * @returns {Object} Returns the current document
 */
setDocument = Sizzle.setDocument = function( node ) {
	var hasCompare, parent,
		doc = node ? node.ownerDocument || node : preferredDoc;

	// Return early if doc is invalid or already selected
	if ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {
		return document;
	}

	// Update global variables
	document = doc;
	docElem = document.documentElement;
	documentIsHTML = !isXML( document );

	// Support: IE 9-11, Edge
	// Accessing iframe documents after unload throws "permission denied" errors (jQuery #13936)
	if ( (parent = document.defaultView) && parent.top !== parent ) {
		// Support: IE 11
		if ( parent.addEventListener ) {
			parent.addEventListener( "unload", unloadHandler, false );

		// Support: IE 9 - 10 only
		} else if ( parent.attachEvent ) {
			parent.attachEvent( "onunload", unloadHandler );
		}
	}

	/* Attributes
	---------------------------------------------------------------------- */

	// Support: IE<8
	// Verify that getAttribute really returns attributes and not properties
	// (excepting IE8 booleans)
	support.attributes = assert(function( div ) {
		div.className = "i";
		return !div.getAttribute("className");
	});

	/* getElement(s)By*
	---------------------------------------------------------------------- */

	// Check if getElementsByTagName("*") returns only elements
	support.getElementsByTagName = assert(function( div ) {
		div.appendChild( document.createComment("") );
		return !div.getElementsByTagName("*").length;
	});

	// Support: IE<9
	support.getElementsByClassName = rnative.test( document.getElementsByClassName );

	// Support: IE<10
	// Check if getElementById returns elements by name
	// The broken getElementById methods don't pick up programatically-set names,
	// so use a roundabout getElementsByName test
	support.getById = assert(function( div ) {
		docElem.appendChild( div ).id = expando;
		return !document.getElementsByName || !document.getElementsByName( expando ).length;
	});

	// ID find and filter
	if ( support.getById ) {
		Expr.find["ID"] = function( id, context ) {
			if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
				var m = context.getElementById( id );
				return m ? [ m ] : [];
			}
		};
		Expr.filter["ID"] = function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				return elem.getAttribute("id") === attrId;
			};
		};
	} else {
		// Support: IE6/7
		// getElementById is not reliable as a find shortcut
		delete Expr.find["ID"];

		Expr.filter["ID"] =  function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				var node = typeof elem.getAttributeNode !== "undefined" &&
					elem.getAttributeNode("id");
				return node && node.value === attrId;
			};
		};
	}

	// Tag
	Expr.find["TAG"] = support.getElementsByTagName ?
		function( tag, context ) {
			if ( typeof context.getElementsByTagName !== "undefined" ) {
				return context.getElementsByTagName( tag );

			// DocumentFragment nodes don't have gEBTN
			} else if ( support.qsa ) {
				return context.querySelectorAll( tag );
			}
		} :

		function( tag, context ) {
			var elem,
				tmp = [],
				i = 0,
				// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
				results = context.getElementsByTagName( tag );

			// Filter out possible comments
			if ( tag === "*" ) {
				while ( (elem = results[i++]) ) {
					if ( elem.nodeType === 1 ) {
						tmp.push( elem );
					}
				}

				return tmp;
			}
			return results;
		};

	// Class
	Expr.find["CLASS"] = support.getElementsByClassName && function( className, context ) {
		if ( typeof context.getElementsByClassName !== "undefined" && documentIsHTML ) {
			return context.getElementsByClassName( className );
		}
	};

	/* QSA/matchesSelector
	---------------------------------------------------------------------- */

	// QSA and matchesSelector support

	// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
	rbuggyMatches = [];

	// qSa(:focus) reports false when true (Chrome 21)
	// We allow this because of a bug in IE8/9 that throws an error
	// whenever `document.activeElement` is accessed on an iframe
	// So, we allow :focus to pass through QSA all the time to avoid the IE error
	// See http://bugs.jquery.com/ticket/13378
	rbuggyQSA = [];

	if ( (support.qsa = rnative.test( document.querySelectorAll )) ) {
		// Build QSA regex
		// Regex strategy adopted from Diego Perini
		assert(function( div ) {
			// Select is set to empty string on purpose
			// This is to test IE's treatment of not explicitly
			// setting a boolean content attribute,
			// since its presence should be enough
			// http://bugs.jquery.com/ticket/12359
			docElem.appendChild( div ).innerHTML = "<a id='" + expando + "'></a>" +
				"<select id='" + expando + "-\r\\' msallowcapture=''>" +
				"<option selected=''></option></select>";

			// Support: IE8, Opera 11-12.16
			// Nothing should be selected when empty strings follow ^= or $= or *=
			// The test attribute must be unknown in Opera but "safe" for WinRT
			// http://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
			if ( div.querySelectorAll("[msallowcapture^='']").length ) {
				rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:''|\"\")" );
			}

			// Support: IE8
			// Boolean attributes and "value" are not treated correctly
			if ( !div.querySelectorAll("[selected]").length ) {
				rbuggyQSA.push( "\\[" + whitespace + "*(?:value|" + booleans + ")" );
			}

			// Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+
			if ( !div.querySelectorAll( "[id~=" + expando + "-]" ).length ) {
				rbuggyQSA.push("~=");
			}

			// Webkit/Opera - :checked should return selected option elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			// IE8 throws error here and will not see later tests
			if ( !div.querySelectorAll(":checked").length ) {
				rbuggyQSA.push(":checked");
			}

			// Support: Safari 8+, iOS 8+
			// https://bugs.webkit.org/show_bug.cgi?id=136851
			// In-page `selector#id sibing-combinator selector` fails
			if ( !div.querySelectorAll( "a#" + expando + "+*" ).length ) {
				rbuggyQSA.push(".#.+[+~]");
			}
		});

		assert(function( div ) {
			// Support: Windows 8 Native Apps
			// The type and name attributes are restricted during .innerHTML assignment
			var input = document.createElement("input");
			input.setAttribute( "type", "hidden" );
			div.appendChild( input ).setAttribute( "name", "D" );

			// Support: IE8
			// Enforce case-sensitivity of name attribute
			if ( div.querySelectorAll("[name=d]").length ) {
				rbuggyQSA.push( "name" + whitespace + "*[*^$|!~]?=" );
			}

			// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
			// IE8 throws error here and will not see later tests
			if ( !div.querySelectorAll(":enabled").length ) {
				rbuggyQSA.push( ":enabled", ":disabled" );
			}

			// Opera 10-11 does not throw on post-comma invalid pseudos
			div.querySelectorAll("*,:x");
			rbuggyQSA.push(",.*:");
		});
	}

	if ( (support.matchesSelector = rnative.test( (matches = docElem.matches ||
		docElem.webkitMatchesSelector ||
		docElem.mozMatchesSelector ||
		docElem.oMatchesSelector ||
		docElem.msMatchesSelector) )) ) {

		assert(function( div ) {
			// Check to see if it's possible to do matchesSelector
			// on a disconnected node (IE 9)
			support.disconnectedMatch = matches.call( div, "div" );

			// This should fail with an exception
			// Gecko does not error, returns false instead
			matches.call( div, "[s!='']:x" );
			rbuggyMatches.push( "!=", pseudos );
		});
	}

	rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join("|") );
	rbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join("|") );

	/* Contains
	---------------------------------------------------------------------- */
	hasCompare = rnative.test( docElem.compareDocumentPosition );

	// Element contains another
	// Purposefully self-exclusive
	// As in, an element does not contain itself
	contains = hasCompare || rnative.test( docElem.contains ) ?
		function( a, b ) {
			var adown = a.nodeType === 9 ? a.documentElement : a,
				bup = b && b.parentNode;
			return a === bup || !!( bup && bup.nodeType === 1 && (
				adown.contains ?
					adown.contains( bup ) :
					a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
			));
		} :
		function( a, b ) {
			if ( b ) {
				while ( (b = b.parentNode) ) {
					if ( b === a ) {
						return true;
					}
				}
			}
			return false;
		};

	/* Sorting
	---------------------------------------------------------------------- */

	// Document order sorting
	sortOrder = hasCompare ?
	function( a, b ) {

		// Flag for duplicate removal
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		// Sort on method existence if only one input has compareDocumentPosition
		var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
		if ( compare ) {
			return compare;
		}

		// Calculate position if both inputs belong to the same document
		compare = ( a.ownerDocument || a ) === ( b.ownerDocument || b ) ?
			a.compareDocumentPosition( b ) :

			// Otherwise we know they are disconnected
			1;

		// Disconnected nodes
		if ( compare & 1 ||
			(!support.sortDetached && b.compareDocumentPosition( a ) === compare) ) {

			// Choose the first element that is related to our preferred document
			if ( a === document || a.ownerDocument === preferredDoc && contains(preferredDoc, a) ) {
				return -1;
			}
			if ( b === document || b.ownerDocument === preferredDoc && contains(preferredDoc, b) ) {
				return 1;
			}

			// Maintain original order
			return sortInput ?
				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
				0;
		}

		return compare & 4 ? -1 : 1;
	} :
	function( a, b ) {
		// Exit early if the nodes are identical
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		var cur,
			i = 0,
			aup = a.parentNode,
			bup = b.parentNode,
			ap = [ a ],
			bp = [ b ];

		// Parentless nodes are either documents or disconnected
		if ( !aup || !bup ) {
			return a === document ? -1 :
				b === document ? 1 :
				aup ? -1 :
				bup ? 1 :
				sortInput ?
				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
				0;

		// If the nodes are siblings, we can do a quick check
		} else if ( aup === bup ) {
			return siblingCheck( a, b );
		}

		// Otherwise we need full lists of their ancestors for comparison
		cur = a;
		while ( (cur = cur.parentNode) ) {
			ap.unshift( cur );
		}
		cur = b;
		while ( (cur = cur.parentNode) ) {
			bp.unshift( cur );
		}

		// Walk down the tree looking for a discrepancy
		while ( ap[i] === bp[i] ) {
			i++;
		}

		return i ?
			// Do a sibling check if the nodes have a common ancestor
			siblingCheck( ap[i], bp[i] ) :

			// Otherwise nodes in our document sort first
			ap[i] === preferredDoc ? -1 :
			bp[i] === preferredDoc ? 1 :
			0;
	};

	return document;
};

Sizzle.matches = function( expr, elements ) {
	return Sizzle( expr, null, null, elements );
};

Sizzle.matchesSelector = function( elem, expr ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	// Make sure that attribute selectors are quoted
	expr = expr.replace( rattributeQuotes, "='$1']" );

	if ( support.matchesSelector && documentIsHTML &&
		!compilerCache[ expr + " " ] &&
		( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&
		( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {

		try {
			var ret = matches.call( elem, expr );

			// IE 9's matchesSelector returns false on disconnected nodes
			if ( ret || support.disconnectedMatch ||
					// As well, disconnected nodes are said to be in a document
					// fragment in IE 9
					elem.document && elem.document.nodeType !== 11 ) {
				return ret;
			}
		} catch (e) {}
	}

	return Sizzle( expr, document, null, [ elem ] ).length > 0;
};

Sizzle.contains = function( context, elem ) {
	// Set document vars if needed
	if ( ( context.ownerDocument || context ) !== document ) {
		setDocument( context );
	}
	return contains( context, elem );
};

Sizzle.attr = function( elem, name ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	var fn = Expr.attrHandle[ name.toLowerCase() ],
		// Don't get fooled by Object.prototype properties (jQuery #13807)
		val = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?
			fn( elem, name, !documentIsHTML ) :
			undefined;

	return val !== undefined ?
		val :
		support.attributes || !documentIsHTML ?
			elem.getAttribute( name ) :
			(val = elem.getAttributeNode(name)) && val.specified ?
				val.value :
				null;
};

Sizzle.error = function( msg ) {
	throw new Error( "Syntax error, unrecognized expression: " + msg );
};

/**
 * Document sorting and removing duplicates
 * @param {ArrayLike} results
 */
Sizzle.uniqueSort = function( results ) {
	var elem,
		duplicates = [],
		j = 0,
		i = 0;

	// Unless we *know* we can detect duplicates, assume their presence
	hasDuplicate = !support.detectDuplicates;
	sortInput = !support.sortStable && results.slice( 0 );
	results.sort( sortOrder );

	if ( hasDuplicate ) {
		while ( (elem = results[i++]) ) {
			if ( elem === results[ i ] ) {
				j = duplicates.push( i );
			}
		}
		while ( j-- ) {
			results.splice( duplicates[ j ], 1 );
		}
	}

	// Clear input after sorting to release objects
	// See https://github.com/jquery/sizzle/pull/225
	sortInput = null;

	return results;
};

/**
 * Utility function for retrieving the text value of an array of DOM nodes
 * @param {Array|Element} elem
 */
getText = Sizzle.getText = function( elem ) {
	var node,
		ret = "",
		i = 0,
		nodeType = elem.nodeType;

	if ( !nodeType ) {
		// If no nodeType, this is expected to be an array
		while ( (node = elem[i++]) ) {
			// Do not traverse comment nodes
			ret += getText( node );
		}
	} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {
		// Use textContent for elements
		// innerText usage removed for consistency of new lines (jQuery #11153)
		if ( typeof elem.textContent === "string" ) {
			return elem.textContent;
		} else {
			// Traverse its children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				ret += getText( elem );
			}
		}
	} else if ( nodeType === 3 || nodeType === 4 ) {
		return elem.nodeValue;
	}
	// Do not include comment or processing instruction nodes

	return ret;
};

Expr = Sizzle.selectors = {

	// Can be adjusted by the user
	cacheLength: 50,

	createPseudo: markFunction,

	match: matchExpr,

	attrHandle: {},

	find: {},

	relative: {
		">": { dir: "parentNode", first: true },
		" ": { dir: "parentNode" },
		"+": { dir: "previousSibling", first: true },
		"~": { dir: "previousSibling" }
	},

	preFilter: {
		"ATTR": function( match ) {
			match[1] = match[1].replace( runescape, funescape );

			// Move the given value to match[3] whether quoted or unquoted
			match[3] = ( match[3] || match[4] || match[5] || "" ).replace( runescape, funescape );

			if ( match[2] === "~=" ) {
				match[3] = " " + match[3] + " ";
			}

			return match.slice( 0, 4 );
		},

		"CHILD": function( match ) {
			/* matches from matchExpr["CHILD"]
				1 type (only|nth|...)
				2 what (child|of-type)
				3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
				4 xn-component of xn+y argument ([+-]?\d*n|)
				5 sign of xn-component
				6 x of xn-component
				7 sign of y-component
				8 y of y-component
			*/
			match[1] = match[1].toLowerCase();

			if ( match[1].slice( 0, 3 ) === "nth" ) {
				// nth-* requires argument
				if ( !match[3] ) {
					Sizzle.error( match[0] );
				}

				// numeric x and y parameters for Expr.filter.CHILD
				// remember that false/true cast respectively to 0/1
				match[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === "even" || match[3] === "odd" ) );
				match[5] = +( ( match[7] + match[8] ) || match[3] === "odd" );

			// other types prohibit arguments
			} else if ( match[3] ) {
				Sizzle.error( match[0] );
			}

			return match;
		},

		"PSEUDO": function( match ) {
			var excess,
				unquoted = !match[6] && match[2];

			if ( matchExpr["CHILD"].test( match[0] ) ) {
				return null;
			}

			// Accept quoted arguments as-is
			if ( match[3] ) {
				match[2] = match[4] || match[5] || "";

			// Strip excess characters from unquoted arguments
			} else if ( unquoted && rpseudo.test( unquoted ) &&
				// Get excess from tokenize (recursively)
				(excess = tokenize( unquoted, true )) &&
				// advance to the next closing parenthesis
				(excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length) ) {

				// excess is a negative index
				match[0] = match[0].slice( 0, excess );
				match[2] = unquoted.slice( 0, excess );
			}

			// Return only captures needed by the pseudo filter method (type and argument)
			return match.slice( 0, 3 );
		}
	},

	filter: {

		"TAG": function( nodeNameSelector ) {
			var nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();
			return nodeNameSelector === "*" ?
				function() { return true; } :
				function( elem ) {
					return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
				};
		},

		"CLASS": function( className ) {
			var pattern = classCache[ className + " " ];

			return pattern ||
				(pattern = new RegExp( "(^|" + whitespace + ")" + className + "(" + whitespace + "|$)" )) &&
				classCache( className, function( elem ) {
					return pattern.test( typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "" );
				});
		},

		"ATTR": function( name, operator, check ) {
			return function( elem ) {
				var result = Sizzle.attr( elem, name );

				if ( result == null ) {
					return operator === "!=";
				}
				if ( !operator ) {
					return true;
				}

				result += "";

				return operator === "=" ? result === check :
					operator === "!=" ? result !== check :
					operator === "^=" ? check && result.indexOf( check ) === 0 :
					operator === "*=" ? check && result.indexOf( check ) > -1 :
					operator === "$=" ? check && result.slice( -check.length ) === check :
					operator === "~=" ? ( " " + result.replace( rwhitespace, " " ) + " " ).indexOf( check ) > -1 :
					operator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :
					false;
			};
		},

		"CHILD": function( type, what, argument, first, last ) {
			var simple = type.slice( 0, 3 ) !== "nth",
				forward = type.slice( -4 ) !== "last",
				ofType = what === "of-type";

			return first === 1 && last === 0 ?

				// Shortcut for :nth-*(n)
				function( elem ) {
					return !!elem.parentNode;
				} :

				function( elem, context, xml ) {
					var cache, uniqueCache, outerCache, node, nodeIndex, start,
						dir = simple !== forward ? "nextSibling" : "previousSibling",
						parent = elem.parentNode,
						name = ofType && elem.nodeName.toLowerCase(),
						useCache = !xml && !ofType,
						diff = false;

					if ( parent ) {

						// :(first|last|only)-(child|of-type)
						if ( simple ) {
							while ( dir ) {
								node = elem;
								while ( (node = node[ dir ]) ) {
									if ( ofType ?
										node.nodeName.toLowerCase() === name :
										node.nodeType === 1 ) {

										return false;
									}
								}
								// Reverse direction for :only-* (if we haven't yet done so)
								start = dir = type === "only" && !start && "nextSibling";
							}
							return true;
						}

						start = [ forward ? parent.firstChild : parent.lastChild ];

						// non-xml :nth-child(...) stores cache data on `parent`
						if ( forward && useCache ) {

							// Seek `elem` from a previously-cached index

							// ...in a gzip-friendly way
							node = parent;
							outerCache = node[ expando ] || (node[ expando ] = {});

							// Support: IE <9 only
							// Defend against cloned attroperties (jQuery gh-1709)
							uniqueCache = outerCache[ node.uniqueID ] ||
								(outerCache[ node.uniqueID ] = {});

							cache = uniqueCache[ type ] || [];
							nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
							diff = nodeIndex && cache[ 2 ];
							node = nodeIndex && parent.childNodes[ nodeIndex ];

							while ( (node = ++nodeIndex && node && node[ dir ] ||

								// Fallback to seeking `elem` from the start
								(diff = nodeIndex = 0) || start.pop()) ) {

								// When found, cache indexes on `parent` and break
								if ( node.nodeType === 1 && ++diff && node === elem ) {
									uniqueCache[ type ] = [ dirruns, nodeIndex, diff ];
									break;
								}
							}

						} else {
							// Use previously-cached element index if available
							if ( useCache ) {
								// ...in a gzip-friendly way
								node = elem;
								outerCache = node[ expando ] || (node[ expando ] = {});

								// Support: IE <9 only
								// Defend against cloned attroperties (jQuery gh-1709)
								uniqueCache = outerCache[ node.uniqueID ] ||
									(outerCache[ node.uniqueID ] = {});

								cache = uniqueCache[ type ] || [];
								nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
								diff = nodeIndex;
							}

							// xml :nth-child(...)
							// or :nth-last-child(...) or :nth(-last)?-of-type(...)
							if ( diff === false ) {
								// Use the same loop as above to seek `elem` from the start
								while ( (node = ++nodeIndex && node && node[ dir ] ||
									(diff = nodeIndex = 0) || start.pop()) ) {

									if ( ( ofType ?
										node.nodeName.toLowerCase() === name :
										node.nodeType === 1 ) &&
										++diff ) {

										// Cache the index of each encountered element
										if ( useCache ) {
											outerCache = node[ expando ] || (node[ expando ] = {});

											// Support: IE <9 only
											// Defend against cloned attroperties (jQuery gh-1709)
											uniqueCache = outerCache[ node.uniqueID ] ||
												(outerCache[ node.uniqueID ] = {});

											uniqueCache[ type ] = [ dirruns, diff ];
										}

										if ( node === elem ) {
											break;
										}
									}
								}
							}
						}

						// Incorporate the offset, then check against cycle size
						diff -= last;
						return diff === first || ( diff % first === 0 && diff / first >= 0 );
					}
				};
		},

		"PSEUDO": function( pseudo, argument ) {
			// pseudo-class names are case-insensitive
			// http://www.w3.org/TR/selectors/#pseudo-classes
			// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
			// Remember that setFilters inherits from pseudos
			var args,
				fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
					Sizzle.error( "unsupported pseudo: " + pseudo );

			// The user may use createPseudo to indicate that
			// arguments are needed to create the filter function
			// just as Sizzle does
			if ( fn[ expando ] ) {
				return fn( argument );
			}

			// But maintain support for old signatures
			if ( fn.length > 1 ) {
				args = [ pseudo, pseudo, "", argument ];
				return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
					markFunction(function( seed, matches ) {
						var idx,
							matched = fn( seed, argument ),
							i = matched.length;
						while ( i-- ) {
							idx = indexOf( seed, matched[i] );
							seed[ idx ] = !( matches[ idx ] = matched[i] );
						}
					}) :
					function( elem ) {
						return fn( elem, 0, args );
					};
			}

			return fn;
		}
	},

	pseudos: {
		// Potentially complex pseudos
		"not": markFunction(function( selector ) {
			// Trim the selector passed to compile
			// to avoid treating leading and trailing
			// spaces as combinators
			var input = [],
				results = [],
				matcher = compile( selector.replace( rtrim, "$1" ) );

			return matcher[ expando ] ?
				markFunction(function( seed, matches, context, xml ) {
					var elem,
						unmatched = matcher( seed, null, xml, [] ),
						i = seed.length;

					// Match elements unmatched by `matcher`
					while ( i-- ) {
						if ( (elem = unmatched[i]) ) {
							seed[i] = !(matches[i] = elem);
						}
					}
				}) :
				function( elem, context, xml ) {
					input[0] = elem;
					matcher( input, null, xml, results );
					// Don't keep the element (issue #299)
					input[0] = null;
					return !results.pop();
				};
		}),

		"has": markFunction(function( selector ) {
			return function( elem ) {
				return Sizzle( selector, elem ).length > 0;
			};
		}),

		"contains": markFunction(function( text ) {
			text = text.replace( runescape, funescape );
			return function( elem ) {
				return ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) > -1;
			};
		}),

		// "Whether an element is represented by a :lang() selector
		// is based solely on the element's language value
		// being equal to the identifier C,
		// or beginning with the identifier C immediately followed by "-".
		// The matching of C against the element's language value is performed case-insensitively.
		// The identifier C does not have to be a valid language name."
		// http://www.w3.org/TR/selectors/#lang-pseudo
		"lang": markFunction( function( lang ) {
			// lang value must be a valid identifier
			if ( !ridentifier.test(lang || "") ) {
				Sizzle.error( "unsupported lang: " + lang );
			}
			lang = lang.replace( runescape, funescape ).toLowerCase();
			return function( elem ) {
				var elemLang;
				do {
					if ( (elemLang = documentIsHTML ?
						elem.lang :
						elem.getAttribute("xml:lang") || elem.getAttribute("lang")) ) {

						elemLang = elemLang.toLowerCase();
						return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;
					}
				} while ( (elem = elem.parentNode) && elem.nodeType === 1 );
				return false;
			};
		}),

		// Miscellaneous
		"target": function( elem ) {
			var hash = window.location && window.location.hash;
			return hash && hash.slice( 1 ) === elem.id;
		},

		"root": function( elem ) {
			return elem === docElem;
		},

		"focus": function( elem ) {
			return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
		},

		// Boolean properties
		"enabled": function( elem ) {
			return elem.disabled === false;
		},

		"disabled": function( elem ) {
			return elem.disabled === true;
		},

		"checked": function( elem ) {
			// In CSS3, :checked should return both checked and selected elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			var nodeName = elem.nodeName.toLowerCase();
			return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);
		},

		"selected": function( elem ) {
			// Accessing this property makes selected-by-default
			// options in Safari work properly
			if ( elem.parentNode ) {
				elem.parentNode.selectedIndex;
			}

			return elem.selected === true;
		},

		// Contents
		"empty": function( elem ) {
			// http://www.w3.org/TR/selectors/#empty-pseudo
			// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
			//   but not by others (comment: 8; processing instruction: 7; etc.)
			// nodeType < 6 works because attributes (2) do not appear as children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				if ( elem.nodeType < 6 ) {
					return false;
				}
			}
			return true;
		},

		"parent": function( elem ) {
			return !Expr.pseudos["empty"]( elem );
		},

		// Element/input types
		"header": function( elem ) {
			return rheader.test( elem.nodeName );
		},

		"input": function( elem ) {
			return rinputs.test( elem.nodeName );
		},

		"button": function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return name === "input" && elem.type === "button" || name === "button";
		},

		"text": function( elem ) {
			var attr;
			return elem.nodeName.toLowerCase() === "input" &&
				elem.type === "text" &&

				// Support: IE<8
				// New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
				( (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text" );
		},

		// Position-in-collection
		"first": createPositionalPseudo(function() {
			return [ 0 ];
		}),

		"last": createPositionalPseudo(function( matchIndexes, length ) {
			return [ length - 1 ];
		}),

		"eq": createPositionalPseudo(function( matchIndexes, length, argument ) {
			return [ argument < 0 ? argument + length : argument ];
		}),

		"even": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 0;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"odd": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 1;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"lt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; --i >= 0; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"gt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; ++i < length; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		})
	}
};

Expr.pseudos["nth"] = Expr.pseudos["eq"];

// Add button/input type pseudos
for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
	Expr.pseudos[ i ] = createInputPseudo( i );
}
for ( i in { submit: true, reset: true } ) {
	Expr.pseudos[ i ] = createButtonPseudo( i );
}

// Easy API for creating new setFilters
function setFilters() {}
setFilters.prototype = Expr.filters = Expr.pseudos;
Expr.setFilters = new setFilters();

tokenize = Sizzle.tokenize = function( selector, parseOnly ) {
	var matched, match, tokens, type,
		soFar, groups, preFilters,
		cached = tokenCache[ selector + " " ];

	if ( cached ) {
		return parseOnly ? 0 : cached.slice( 0 );
	}

	soFar = selector;
	groups = [];
	preFilters = Expr.preFilter;

	while ( soFar ) {

		// Comma and first run
		if ( !matched || (match = rcomma.exec( soFar )) ) {
			if ( match ) {
				// Don't consume trailing commas as valid
				soFar = soFar.slice( match[0].length ) || soFar;
			}
			groups.push( (tokens = []) );
		}

		matched = false;

		// Combinators
		if ( (match = rcombinators.exec( soFar )) ) {
			matched = match.shift();
			tokens.push({
				value: matched,
				// Cast descendant combinators to space
				type: match[0].replace( rtrim, " " )
			});
			soFar = soFar.slice( matched.length );
		}

		// Filters
		for ( type in Expr.filter ) {
			if ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||
				(match = preFilters[ type ]( match ))) ) {
				matched = match.shift();
				tokens.push({
					value: matched,
					type: type,
					matches: match
				});
				soFar = soFar.slice( matched.length );
			}
		}

		if ( !matched ) {
			break;
		}
	}

	// Return the length of the invalid excess
	// if we're just parsing
	// Otherwise, throw an error or return tokens
	return parseOnly ?
		soFar.length :
		soFar ?
			Sizzle.error( selector ) :
			// Cache the tokens
			tokenCache( selector, groups ).slice( 0 );
};

function toSelector( tokens ) {
	var i = 0,
		len = tokens.length,
		selector = "";
	for ( ; i < len; i++ ) {
		selector += tokens[i].value;
	}
	return selector;
}

function addCombinator( matcher, combinator, base ) {
	var dir = combinator.dir,
		checkNonElements = base && dir === "parentNode",
		doneName = done++;

	return combinator.first ?
		// Check against closest ancestor/preceding element
		function( elem, context, xml ) {
			while ( (elem = elem[ dir ]) ) {
				if ( elem.nodeType === 1 || checkNonElements ) {
					return matcher( elem, context, xml );
				}
			}
		} :

		// Check against all ancestor/preceding elements
		function( elem, context, xml ) {
			var oldCache, uniqueCache, outerCache,
				newCache = [ dirruns, doneName ];

			// We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching
			if ( xml ) {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						if ( matcher( elem, context, xml ) ) {
							return true;
						}
					}
				}
			} else {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						outerCache = elem[ expando ] || (elem[ expando ] = {});

						// Support: IE <9 only
						// Defend against cloned attroperties (jQuery gh-1709)
						uniqueCache = outerCache[ elem.uniqueID ] || (outerCache[ elem.uniqueID ] = {});

						if ( (oldCache = uniqueCache[ dir ]) &&
							oldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {

							// Assign to newCache so results back-propagate to previous elements
							return (newCache[ 2 ] = oldCache[ 2 ]);
						} else {
							// Reuse newcache so results back-propagate to previous elements
							uniqueCache[ dir ] = newCache;

							// A match means we're done; a fail means we have to keep checking
							if ( (newCache[ 2 ] = matcher( elem, context, xml )) ) {
								return true;
							}
						}
					}
				}
			}
		};
}

function elementMatcher( matchers ) {
	return matchers.length > 1 ?
		function( elem, context, xml ) {
			var i = matchers.length;
			while ( i-- ) {
				if ( !matchers[i]( elem, context, xml ) ) {
					return false;
				}
			}
			return true;
		} :
		matchers[0];
}

function multipleContexts( selector, contexts, results ) {
	var i = 0,
		len = contexts.length;
	for ( ; i < len; i++ ) {
		Sizzle( selector, contexts[i], results );
	}
	return results;
}

function condense( unmatched, map, filter, context, xml ) {
	var elem,
		newUnmatched = [],
		i = 0,
		len = unmatched.length,
		mapped = map != null;

	for ( ; i < len; i++ ) {
		if ( (elem = unmatched[i]) ) {
			if ( !filter || filter( elem, context, xml ) ) {
				newUnmatched.push( elem );
				if ( mapped ) {
					map.push( i );
				}
			}
		}
	}

	return newUnmatched;
}

function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
	if ( postFilter && !postFilter[ expando ] ) {
		postFilter = setMatcher( postFilter );
	}
	if ( postFinder && !postFinder[ expando ] ) {
		postFinder = setMatcher( postFinder, postSelector );
	}
	return markFunction(function( seed, results, context, xml ) {
		var temp, i, elem,
			preMap = [],
			postMap = [],
			preexisting = results.length,

			// Get initial elements from seed or context
			elems = seed || multipleContexts( selector || "*", context.nodeType ? [ context ] : context, [] ),

			// Prefilter to get matcher input, preserving a map for seed-results synchronization
			matcherIn = preFilter && ( seed || !selector ) ?
				condense( elems, preMap, preFilter, context, xml ) :
				elems,

			matcherOut = matcher ?
				// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
				postFinder || ( seed ? preFilter : preexisting || postFilter ) ?

					// ...intermediate processing is necessary
					[] :

					// ...otherwise use results directly
					results :
				matcherIn;

		// Find primary matches
		if ( matcher ) {
			matcher( matcherIn, matcherOut, context, xml );
		}

		// Apply postFilter
		if ( postFilter ) {
			temp = condense( matcherOut, postMap );
			postFilter( temp, [], context, xml );

			// Un-match failing elements by moving them back to matcherIn
			i = temp.length;
			while ( i-- ) {
				if ( (elem = temp[i]) ) {
					matcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);
				}
			}
		}

		if ( seed ) {
			if ( postFinder || preFilter ) {
				if ( postFinder ) {
					// Get the final matcherOut by condensing this intermediate into postFinder contexts
					temp = [];
					i = matcherOut.length;
					while ( i-- ) {
						if ( (elem = matcherOut[i]) ) {
							// Restore matcherIn since elem is not yet a final match
							temp.push( (matcherIn[i] = elem) );
						}
					}
					postFinder( null, (matcherOut = []), temp, xml );
				}

				// Move matched elements from seed to results to keep them synchronized
				i = matcherOut.length;
				while ( i-- ) {
					if ( (elem = matcherOut[i]) &&
						(temp = postFinder ? indexOf( seed, elem ) : preMap[i]) > -1 ) {

						seed[temp] = !(results[temp] = elem);
					}
				}
			}

		// Add elements to results, through postFinder if defined
		} else {
			matcherOut = condense(
				matcherOut === results ?
					matcherOut.splice( preexisting, matcherOut.length ) :
					matcherOut
			);
			if ( postFinder ) {
				postFinder( null, results, matcherOut, xml );
			} else {
				push.apply( results, matcherOut );
			}
		}
	});
}

function matcherFromTokens( tokens ) {
	var checkContext, matcher, j,
		len = tokens.length,
		leadingRelative = Expr.relative[ tokens[0].type ],
		implicitRelative = leadingRelative || Expr.relative[" "],
		i = leadingRelative ? 1 : 0,

		// The foundational matcher ensures that elements are reachable from top-level context(s)
		matchContext = addCombinator( function( elem ) {
			return elem === checkContext;
		}, implicitRelative, true ),
		matchAnyContext = addCombinator( function( elem ) {
			return indexOf( checkContext, elem ) > -1;
		}, implicitRelative, true ),
		matchers = [ function( elem, context, xml ) {
			var ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (
				(checkContext = context).nodeType ?
					matchContext( elem, context, xml ) :
					matchAnyContext( elem, context, xml ) );
			// Avoid hanging onto element (issue #299)
			checkContext = null;
			return ret;
		} ];

	for ( ; i < len; i++ ) {
		if ( (matcher = Expr.relative[ tokens[i].type ]) ) {
			matchers = [ addCombinator(elementMatcher( matchers ), matcher) ];
		} else {
			matcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );

			// Return special upon seeing a positional matcher
			if ( matcher[ expando ] ) {
				// Find the next relative operator (if any) for proper handling
				j = ++i;
				for ( ; j < len; j++ ) {
					if ( Expr.relative[ tokens[j].type ] ) {
						break;
					}
				}
				return setMatcher(
					i > 1 && elementMatcher( matchers ),
					i > 1 && toSelector(
						// If the preceding token was a descendant combinator, insert an implicit any-element `*`
						tokens.slice( 0, i - 1 ).concat({ value: tokens[ i - 2 ].type === " " ? "*" : "" })
					).replace( rtrim, "$1" ),
					matcher,
					i < j && matcherFromTokens( tokens.slice( i, j ) ),
					j < len && matcherFromTokens( (tokens = tokens.slice( j )) ),
					j < len && toSelector( tokens )
				);
			}
			matchers.push( matcher );
		}
	}

	return elementMatcher( matchers );
}

function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
	var bySet = setMatchers.length > 0,
		byElement = elementMatchers.length > 0,
		superMatcher = function( seed, context, xml, results, outermost ) {
			var elem, j, matcher,
				matchedCount = 0,
				i = "0",
				unmatched = seed && [],
				setMatched = [],
				contextBackup = outermostContext,
				// We must always have either seed elements or outermost context
				elems = seed || byElement && Expr.find["TAG"]( "*", outermost ),
				// Use integer dirruns iff this is the outermost matcher
				dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1),
				len = elems.length;

			if ( outermost ) {
				outermostContext = context === document || context || outermost;
			}

			// Add elements passing elementMatchers directly to results
			// Support: IE<9, Safari
			// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
			for ( ; i !== len && (elem = elems[i]) != null; i++ ) {
				if ( byElement && elem ) {
					j = 0;
					if ( !context && elem.ownerDocument !== document ) {
						setDocument( elem );
						xml = !documentIsHTML;
					}
					while ( (matcher = elementMatchers[j++]) ) {
						if ( matcher( elem, context || document, xml) ) {
							results.push( elem );
							break;
						}
					}
					if ( outermost ) {
						dirruns = dirrunsUnique;
					}
				}

				// Track unmatched elements for set filters
				if ( bySet ) {
					// They will have gone through all possible matchers
					if ( (elem = !matcher && elem) ) {
						matchedCount--;
					}

					// Lengthen the array for every element, matched or not
					if ( seed ) {
						unmatched.push( elem );
					}
				}
			}

			// `i` is now the count of elements visited above, and adding it to `matchedCount`
			// makes the latter nonnegative.
			matchedCount += i;

			// Apply set filters to unmatched elements
			// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`
			// equals `i`), unless we didn't visit _any_ elements in the above loop because we have
			// no element matchers and no seed.
			// Incrementing an initially-string "0" `i` allows `i` to remain a string only in that
			// case, which will result in a "00" `matchedCount` that differs from `i` but is also
			// numerically zero.
			if ( bySet && i !== matchedCount ) {
				j = 0;
				while ( (matcher = setMatchers[j++]) ) {
					matcher( unmatched, setMatched, context, xml );
				}

				if ( seed ) {
					// Reintegrate element matches to eliminate the need for sorting
					if ( matchedCount > 0 ) {
						while ( i-- ) {
							if ( !(unmatched[i] || setMatched[i]) ) {
								setMatched[i] = pop.call( results );
							}
						}
					}

					// Discard index placeholder values to get only actual matches
					setMatched = condense( setMatched );
				}

				// Add matches to results
				push.apply( results, setMatched );

				// Seedless set matches succeeding multiple successful matchers stipulate sorting
				if ( outermost && !seed && setMatched.length > 0 &&
					( matchedCount + setMatchers.length ) > 1 ) {

					Sizzle.uniqueSort( results );
				}
			}

			// Override manipulation of globals by nested matchers
			if ( outermost ) {
				dirruns = dirrunsUnique;
				outermostContext = contextBackup;
			}

			return unmatched;
		};

	return bySet ?
		markFunction( superMatcher ) :
		superMatcher;
}

compile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {
	var i,
		setMatchers = [],
		elementMatchers = [],
		cached = compilerCache[ selector + " " ];

	if ( !cached ) {
		// Generate a function of recursive functions that can be used to check each element
		if ( !match ) {
			match = tokenize( selector );
		}
		i = match.length;
		while ( i-- ) {
			cached = matcherFromTokens( match[i] );
			if ( cached[ expando ] ) {
				setMatchers.push( cached );
			} else {
				elementMatchers.push( cached );
			}
		}

		// Cache the compiled function
		cached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );

		// Save selector and tokenization
		cached.selector = selector;
	}
	return cached;
};

/**
 * A low-level selection function that works with Sizzle's compiled
 *  selector functions
 * @param {String|Function} selector A selector or a pre-compiled
 *  selector function built with Sizzle.compile
 * @param {Element} context
 * @param {Array} [results]
 * @param {Array} [seed] A set of elements to match against
 */
select = Sizzle.select = function( selector, context, results, seed ) {
	var i, tokens, token, type, find,
		compiled = typeof selector === "function" && selector,
		match = !seed && tokenize( (selector = compiled.selector || selector) );

	results = results || [];

	// Try to minimize operations if there is only one selector in the list and no seed
	// (the latter of which guarantees us context)
	if ( match.length === 1 ) {

		// Reduce context if the leading compound selector is an ID
		tokens = match[0] = match[0].slice( 0 );
		if ( tokens.length > 2 && (token = tokens[0]).type === "ID" &&
				support.getById && context.nodeType === 9 && documentIsHTML &&
				Expr.relative[ tokens[1].type ] ) {

			context = ( Expr.find["ID"]( token.matches[0].replace(runescape, funescape), context ) || [] )[0];
			if ( !context ) {
				return results;

			// Precompiled matchers will still verify ancestry, so step up a level
			} else if ( compiled ) {
				context = context.parentNode;
			}

			selector = selector.slice( tokens.shift().value.length );
		}

		// Fetch a seed set for right-to-left matching
		i = matchExpr["needsContext"].test( selector ) ? 0 : tokens.length;
		while ( i-- ) {
			token = tokens[i];

			// Abort if we hit a combinator
			if ( Expr.relative[ (type = token.type) ] ) {
				break;
			}
			if ( (find = Expr.find[ type ]) ) {
				// Search, expanding context for leading sibling combinators
				if ( (seed = find(
					token.matches[0].replace( runescape, funescape ),
					rsibling.test( tokens[0].type ) && testContext( context.parentNode ) || context
				)) ) {

					// If seed is empty or no tokens remain, we can return early
					tokens.splice( i, 1 );
					selector = seed.length && toSelector( tokens );
					if ( !selector ) {
						push.apply( results, seed );
						return results;
					}

					break;
				}
			}
		}
	}

	// Compile and execute a filtering function if one is not provided
	// Provide `match` to avoid retokenization if we modified the selector above
	( compiled || compile( selector, match ) )(
		seed,
		context,
		!documentIsHTML,
		results,
		!context || rsibling.test( selector ) && testContext( context.parentNode ) || context
	);
	return results;
};

// One-time assignments

// Sort stability
support.sortStable = expando.split("").sort( sortOrder ).join("") === expando;

// Support: Chrome 14-35+
// Always assume duplicates if they aren't passed to the comparison function
support.detectDuplicates = !!hasDuplicate;

// Initialize against the default document
setDocument();

// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
// Detached nodes confoundingly follow *each other*
support.sortDetached = assert(function( div1 ) {
	// Should return 1, but returns 4 (following)
	return div1.compareDocumentPosition( document.createElement("div") ) & 1;
});

// Support: IE<8
// Prevent attribute/property "interpolation"
// http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
if ( !assert(function( div ) {
	div.innerHTML = "<a href='#'></a>";
	return div.firstChild.getAttribute("href") === "#" ;
}) ) {
	addHandle( "type|href|height|width", function( elem, name, isXML ) {
		if ( !isXML ) {
			return elem.getAttribute( name, name.toLowerCase() === "type" ? 1 : 2 );
		}
	});
}

// Support: IE<9
// Use defaultValue in place of getAttribute("value")
if ( !support.attributes || !assert(function( div ) {
	div.innerHTML = "<input/>";
	div.firstChild.setAttribute( "value", "" );
	return div.firstChild.getAttribute( "value" ) === "";
}) ) {
	addHandle( "value", function( elem, name, isXML ) {
		if ( !isXML && elem.nodeName.toLowerCase() === "input" ) {
			return elem.defaultValue;
		}
	});
}

// Support: IE<9
// Use getAttributeNode to fetch booleans when getAttribute lies
if ( !assert(function( div ) {
	return div.getAttribute("disabled") == null;
}) ) {
	addHandle( booleans, function( elem, name, isXML ) {
		var val;
		if ( !isXML ) {
			return elem[ name ] === true ? name.toLowerCase() :
					(val = elem.getAttributeNode( name )) && val.specified ?
					val.value :
				null;
		}
	});
}

return Sizzle;

})( window );



jQuery.find = Sizzle;
jQuery.expr = Sizzle.selectors;
jQuery.expr[ ":" ] = jQuery.expr.pseudos;
jQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;
jQuery.text = Sizzle.getText;
jQuery.isXMLDoc = Sizzle.isXML;
jQuery.contains = Sizzle.contains;



var dir = function( elem, dir, until ) {
	var matched = [],
		truncate = until !== undefined;

	while ( ( elem = elem[ dir ] ) && elem.nodeType !== 9 ) {
		if ( elem.nodeType === 1 ) {
			if ( truncate && jQuery( elem ).is( until ) ) {
				break;
			}
			matched.push( elem );
		}
	}
	return matched;
};


var siblings = function( n, elem ) {
	var matched = [];

	for ( ; n; n = n.nextSibling ) {
		if ( n.nodeType === 1 && n !== elem ) {
			matched.push( n );
		}
	}

	return matched;
};


var rneedsContext = jQuery.expr.match.needsContext;

var rsingleTag = ( /^<([\w-]+)\s*\/?>(?:<\/\1>|)$/ );



var risSimple = /^.[^:#\[\.,]*$/;

// Implement the identical functionality for filter and not
function winnow( elements, qualifier, not ) {
	if ( jQuery.isFunction( qualifier ) ) {
		return jQuery.grep( elements, function( elem, i ) {
			/* jshint -W018 */
			return !!qualifier.call( elem, i, elem ) !== not;
		} );

	}

	if ( qualifier.nodeType ) {
		return jQuery.grep( elements, function( elem ) {
			return ( elem === qualifier ) !== not;
		} );

	}

	if ( typeof qualifier === "string" ) {
		if ( risSimple.test( qualifier ) ) {
			return jQuery.filter( qualifier, elements, not );
		}

		qualifier = jQuery.filter( qualifier, elements );
	}

	return jQuery.grep( elements, function( elem ) {
		return ( jQuery.inArray( elem, qualifier ) > -1 ) !== not;
	} );
}

jQuery.filter = function( expr, elems, not ) {
	var elem = elems[ 0 ];

	if ( not ) {
		expr = ":not(" + expr + ")";
	}

	return elems.length === 1 && elem.nodeType === 1 ?
		jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [] :
		jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {
			return elem.nodeType === 1;
		} ) );
};

jQuery.fn.extend( {
	find: function( selector ) {
		var i,
			ret = [],
			self = this,
			len = self.length;

		if ( typeof selector !== "string" ) {
			return this.pushStack( jQuery( selector ).filter( function() {
				for ( i = 0; i < len; i++ ) {
					if ( jQuery.contains( self[ i ], this ) ) {
						return true;
					}
				}
			} ) );
		}

		for ( i = 0; i < len; i++ ) {
			jQuery.find( selector, self[ i ], ret );
		}

		// Needed because $( selector, context ) becomes $( context ).find( selector )
		ret = this.pushStack( len > 1 ? jQuery.unique( ret ) : ret );
		ret.selector = this.selector ? this.selector + " " + selector : selector;
		return ret;
	},
	filter: function( selector ) {
		return this.pushStack( winnow( this, selector || [], false ) );
	},
	not: function( selector ) {
		return this.pushStack( winnow( this, selector || [], true ) );
	},
	is: function( selector ) {
		return !!winnow(
			this,

			// If this is a positional/relative selector, check membership in the returned set
			// so $("p:first").is("p:last") won't return true for a doc with two "p".
			typeof selector === "string" && rneedsContext.test( selector ) ?
				jQuery( selector ) :
				selector || [],
			false
		).length;
	}
} );


// Initialize a jQuery object


// A central reference to the root jQuery(document)
var rootjQuery,

	// A simple way to check for HTML strings
	// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
	// Strict HTML recognition (#11290: must start with <)
	rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,

	init = jQuery.fn.init = function( selector, context, root ) {
		var match, elem;

		// HANDLE: $(""), $(null), $(undefined), $(false)
		if ( !selector ) {
			return this;
		}

		// init accepts an alternate rootjQuery
		// so migrate can support jQuery.sub (gh-2101)
		root = root || rootjQuery;

		// Handle HTML strings
		if ( typeof selector === "string" ) {
			if ( selector.charAt( 0 ) === "<" &&
				selector.charAt( selector.length - 1 ) === ">" &&
				selector.length >= 3 ) {

				// Assume that strings that start and end with <> are HTML and skip the regex check
				match = [ null, selector, null ];

			} else {
				match = rquickExpr.exec( selector );
			}

			// Match html or make sure no context is specified for #id
			if ( match && ( match[ 1 ] || !context ) ) {

				// HANDLE: $(html) -> $(array)
				if ( match[ 1 ] ) {
					context = context instanceof jQuery ? context[ 0 ] : context;

					// scripts is true for back-compat
					// Intentionally let the error be thrown if parseHTML is not present
					jQuery.merge( this, jQuery.parseHTML(
						match[ 1 ],
						context && context.nodeType ? context.ownerDocument || context : document,
						true
					) );

					// HANDLE: $(html, props)
					if ( rsingleTag.test( match[ 1 ] ) && jQuery.isPlainObject( context ) ) {
						for ( match in context ) {

							// Properties of context are called as methods if possible
							if ( jQuery.isFunction( this[ match ] ) ) {
								this[ match ]( context[ match ] );

							// ...and otherwise set as attributes
							} else {
								this.attr( match, context[ match ] );
							}
						}
					}

					return this;

				// HANDLE: $(#id)
				} else {
					elem = document.getElementById( match[ 2 ] );

					// Check parentNode to catch when Blackberry 4.6 returns
					// nodes that are no longer in the document #6963
					if ( elem && elem.parentNode ) {

						// Handle the case where IE and Opera return items
						// by name instead of ID
						if ( elem.id !== match[ 2 ] ) {
							return rootjQuery.find( selector );
						}

						// Otherwise, we inject the element directly into the jQuery object
						this.length = 1;
						this[ 0 ] = elem;
					}

					this.context = document;
					this.selector = selector;
					return this;
				}

			// HANDLE: $(expr, $(...))
			} else if ( !context || context.jquery ) {
				return ( context || root ).find( selector );

			// HANDLE: $(expr, context)
			// (which is just equivalent to: $(context).find(expr)
			} else {
				return this.constructor( context ).find( selector );
			}

		// HANDLE: $(DOMElement)
		} else if ( selector.nodeType ) {
			this.context = this[ 0 ] = selector;
			this.length = 1;
			return this;

		// HANDLE: $(function)
		// Shortcut for document ready
		} else if ( jQuery.isFunction( selector ) ) {
			return typeof root.ready !== "undefined" ?
				root.ready( selector ) :

				// Execute immediately if ready is not present
				selector( jQuery );
		}

		if ( selector.selector !== undefined ) {
			this.selector = selector.selector;
			this.context = selector.context;
		}

		return jQuery.makeArray( selector, this );
	};

// Give the init function the jQuery prototype for later instantiation
init.prototype = jQuery.fn;

// Initialize central reference
rootjQuery = jQuery( document );


var rparentsprev = /^(?:parents|prev(?:Until|All))/,

	// methods guaranteed to produce a unique set when starting from a unique set
	guaranteedUnique = {
		children: true,
		contents: true,
		next: true,
		prev: true
	};

jQuery.fn.extend( {
	has: function( target ) {
		var i,
			targets = jQuery( target, this ),
			len = targets.length;

		return this.filter( function() {
			for ( i = 0; i < len; i++ ) {
				if ( jQuery.contains( this, targets[ i ] ) ) {
					return true;
				}
			}
		} );
	},

	closest: function( selectors, context ) {
		var cur,
			i = 0,
			l = this.length,
			matched = [],
			pos = rneedsContext.test( selectors ) || typeof selectors !== "string" ?
				jQuery( selectors, context || this.context ) :
				0;

		for ( ; i < l; i++ ) {
			for ( cur = this[ i ]; cur && cur !== context; cur = cur.parentNode ) {

				// Always skip document fragments
				if ( cur.nodeType < 11 && ( pos ?
					pos.index( cur ) > -1 :

					// Don't pass non-elements to Sizzle
					cur.nodeType === 1 &&
						jQuery.find.matchesSelector( cur, selectors ) ) ) {

					matched.push( cur );
					break;
				}
			}
		}

		return this.pushStack( matched.length > 1 ? jQuery.uniqueSort( matched ) : matched );
	},

	// Determine the position of an element within
	// the matched set of elements
	index: function( elem ) {

		// No argument, return index in parent
		if ( !elem ) {
			return ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;
		}

		// index in selector
		if ( typeof elem === "string" ) {
			return jQuery.inArray( this[ 0 ], jQuery( elem ) );
		}

		// Locate the position of the desired element
		return jQuery.inArray(

			// If it receives a jQuery object, the first element is used
			elem.jquery ? elem[ 0 ] : elem, this );
	},

	add: function( selector, context ) {
		return this.pushStack(
			jQuery.uniqueSort(
				jQuery.merge( this.get(), jQuery( selector, context ) )
			)
		);
	},

	addBack: function( selector ) {
		return this.add( selector == null ?
			this.prevObject : this.prevObject.filter( selector )
		);
	}
} );

function sibling( cur, dir ) {
	do {
		cur = cur[ dir ];
	} while ( cur && cur.nodeType !== 1 );

	return cur;
}

jQuery.each( {
	parent: function( elem ) {
		var parent = elem.parentNode;
		return parent && parent.nodeType !== 11 ? parent : null;
	},
	parents: function( elem ) {
		return dir( elem, "parentNode" );
	},
	parentsUntil: function( elem, i, until ) {
		return dir( elem, "parentNode", until );
	},
	next: function( elem ) {
		return sibling( elem, "nextSibling" );
	},
	prev: function( elem ) {
		return sibling( elem, "previousSibling" );
	},
	nextAll: function( elem ) {
		return dir( elem, "nextSibling" );
	},
	prevAll: function( elem ) {
		return dir( elem, "previousSibling" );
	},
	nextUntil: function( elem, i, until ) {
		return dir( elem, "nextSibling", until );
	},
	prevUntil: function( elem, i, until ) {
		return dir( elem, "previousSibling", until );
	},
	siblings: function( elem ) {
		return siblings( ( elem.parentNode || {} ).firstChild, elem );
	},
	children: function( elem ) {
		return siblings( elem.firstChild );
	},
	contents: function( elem ) {
		return jQuery.nodeName( elem, "iframe" ) ?
			elem.contentDocument || elem.contentWindow.document :
			jQuery.merge( [], elem.childNodes );
	}
}, function( name, fn ) {
	jQuery.fn[ name ] = function( until, selector ) {
		var ret = jQuery.map( this, fn, until );

		if ( name.slice( -5 ) !== "Until" ) {
			selector = until;
		}

		if ( selector && typeof selector === "string" ) {
			ret = jQuery.filter( selector, ret );
		}

		if ( this.length > 1 ) {

			// Remove duplicates
			if ( !guaranteedUnique[ name ] ) {
				ret = jQuery.uniqueSort( ret );
			}

			// Reverse order for parents* and prev-derivatives
			if ( rparentsprev.test( name ) ) {
				ret = ret.reverse();
			}
		}

		return this.pushStack( ret );
	};
} );
var rnotwhite = ( /\S+/g );



// Convert String-formatted options into Object-formatted ones
function createOptions( options ) {
	var object = {};
	jQuery.each( options.match( rnotwhite ) || [], function( _, flag ) {
		object[ flag ] = true;
	} );
	return object;
}

/*
 * Create a callback list using the following parameters:
 *
 *	options: an optional list of space-separated options that will change how
 *			the callback list behaves or a more traditional option object
 *
 * By default a callback list will act like an event callback list and can be
 * "fired" multiple times.
 *
 * Possible options:
 *
 *	once:			will ensure the callback list can only be fired once (like a Deferred)
 *
 *	memory:			will keep track of previous values and will call any callback added
 *					after the list has been fired right away with the latest "memorized"
 *					values (like a Deferred)
 *
 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
 *
 *	stopOnFalse:	interrupt callings when a callback returns false
 *
 */
jQuery.Callbacks = function( options ) {

	// Convert options from String-formatted to Object-formatted if needed
	// (we check in cache first)
	options = typeof options === "string" ?
		createOptions( options ) :
		jQuery.extend( {}, options );

	var // Flag to know if list is currently firing
		firing,

		// Last fire value for non-forgettable lists
		memory,

		// Flag to know if list was already fired
		fired,

		// Flag to prevent firing
		locked,

		// Actual callback list
		list = [],

		// Queue of execution data for repeatable lists
		queue = [],

		// Index of currently firing callback (modified by add/remove as needed)
		firingIndex = -1,

		// Fire callbacks
		fire = function() {

			// Enforce single-firing
			locked = options.once;

			// Execute callbacks for all pending executions,
			// respecting firingIndex overrides and runtime changes
			fired = firing = true;
			for ( ; queue.length; firingIndex = -1 ) {
				memory = queue.shift();
				while ( ++firingIndex < list.length ) {

					// Run callback and check for early termination
					if ( list[ firingIndex ].apply( memory[ 0 ], memory[ 1 ] ) === false &&
						options.stopOnFalse ) {

						// Jump to end and forget the data so .add doesn't re-fire
						firingIndex = list.length;
						memory = false;
					}
				}
			}

			// Forget the data if we're done with it
			if ( !options.memory ) {
				memory = false;
			}

			firing = false;

			// Clean up if we're done firing for good
			if ( locked ) {

				// Keep an empty list if we have data for future add calls
				if ( memory ) {
					list = [];

				// Otherwise, this object is spent
				} else {
					list = "";
				}
			}
		},

		// Actual Callbacks object
		self = {

			// Add a callback or a collection of callbacks to the list
			add: function() {
				if ( list ) {

					// If we have memory from a past run, we should fire after adding
					if ( memory && !firing ) {
						firingIndex = list.length - 1;
						queue.push( memory );
					}

					( function add( args ) {
						jQuery.each( args, function( _, arg ) {
							if ( jQuery.isFunction( arg ) ) {
								if ( !options.unique || !self.has( arg ) ) {
									list.push( arg );
								}
							} else if ( arg && arg.length && jQuery.type( arg ) !== "string" ) {

								// Inspect recursively
								add( arg );
							}
						} );
					} )( arguments );

					if ( memory && !firing ) {
						fire();
					}
				}
				return this;
			},

			// Remove a callback from the list
			remove: function() {
				jQuery.each( arguments, function( _, arg ) {
					var index;
					while ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {
						list.splice( index, 1 );

						// Handle firing indexes
						if ( index <= firingIndex ) {
							firingIndex--;
						}
					}
				} );
				return this;
			},

			// Check if a given callback is in the list.
			// If no argument is given, return whether or not list has callbacks attached.
			has: function( fn ) {
				return fn ?
					jQuery.inArray( fn, list ) > -1 :
					list.length > 0;
			},

			// Remove all callbacks from the list
			empty: function() {
				if ( list ) {
					list = [];
				}
				return this;
			},

			// Disable .fire and .add
			// Abort any current/pending executions
			// Clear all callbacks and values
			disable: function() {
				locked = queue = [];
				list = memory = "";
				return this;
			},
			disabled: function() {
				return !list;
			},

			// Disable .fire
			// Also disable .add unless we have memory (since it would have no effect)
			// Abort any pending executions
			lock: function() {
				locked = true;
				if ( !memory ) {
					self.disable();
				}
				return this;
			},
			locked: function() {
				return !!locked;
			},

			// Call all callbacks with the given context and arguments
			fireWith: function( context, args ) {
				if ( !locked ) {
					args = args || [];
					args = [ context, args.slice ? args.slice() : args ];
					queue.push( args );
					if ( !firing ) {
						fire();
					}
				}
				return this;
			},

			// Call all the callbacks with the given arguments
			fire: function() {
				self.fireWith( this, arguments );
				return this;
			},

			// To know if the callbacks have already been called at least once
			fired: function() {
				return !!fired;
			}
		};

	return self;
};


jQuery.extend( {

	Deferred: function( func ) {
		var tuples = [

				// action, add listener, listener list, final state
				[ "resolve", "done", jQuery.Callbacks( "once memory" ), "resolved" ],
				[ "reject", "fail", jQuery.Callbacks( "once memory" ), "rejected" ],
				[ "notify", "progress", jQuery.Callbacks( "memory" ) ]
			],
			state = "pending",
			promise = {
				state: function() {
					return state;
				},
				always: function() {
					deferred.done( arguments ).fail( arguments );
					return this;
				},
				then: function( /* fnDone, fnFail, fnProgress */ ) {
					var fns = arguments;
					return jQuery.Deferred( function( newDefer ) {
						jQuery.each( tuples, function( i, tuple ) {
							var fn = jQuery.isFunction( fns[ i ] ) && fns[ i ];

							// deferred[ done | fail | progress ] for forwarding actions to newDefer
							deferred[ tuple[ 1 ] ]( function() {
								var returned = fn && fn.apply( this, arguments );
								if ( returned && jQuery.isFunction( returned.promise ) ) {
									returned.promise()
										.progress( newDefer.notify )
										.done( newDefer.resolve )
										.fail( newDefer.reject );
								} else {
									newDefer[ tuple[ 0 ] + "With" ](
										this === promise ? newDefer.promise() : this,
										fn ? [ returned ] : arguments
									);
								}
							} );
						} );
						fns = null;
					} ).promise();
				},

				// Get a promise for this deferred
				// If obj is provided, the promise aspect is added to the object
				promise: function( obj ) {
					return obj != null ? jQuery.extend( obj, promise ) : promise;
				}
			},
			deferred = {};

		// Keep pipe for back-compat
		promise.pipe = promise.then;

		// Add list-specific methods
		jQuery.each( tuples, function( i, tuple ) {
			var list = tuple[ 2 ],
				stateString = tuple[ 3 ];

			// promise[ done | fail | progress ] = list.add
			promise[ tuple[ 1 ] ] = list.add;

			// Handle state
			if ( stateString ) {
				list.add( function() {

					// state = [ resolved | rejected ]
					state = stateString;

				// [ reject_list | resolve_list ].disable; progress_list.lock
				}, tuples[ i ^ 1 ][ 2 ].disable, tuples[ 2 ][ 2 ].lock );
			}

			// deferred[ resolve | reject | notify ]
			deferred[ tuple[ 0 ] ] = function() {
				deferred[ tuple[ 0 ] + "With" ]( this === deferred ? promise : this, arguments );
				return this;
			};
			deferred[ tuple[ 0 ] + "With" ] = list.fireWith;
		} );

		// Make the deferred a promise
		promise.promise( deferred );

		// Call given func if any
		if ( func ) {
			func.call( deferred, deferred );
		}

		// All done!
		return deferred;
	},

	// Deferred helper
	when: function( subordinate /* , ..., subordinateN */ ) {
		var i = 0,
			resolveValues = slice.call( arguments ),
			length = resolveValues.length,

			// the count of uncompleted subordinates
			remaining = length !== 1 ||
				( subordinate && jQuery.isFunction( subordinate.promise ) ) ? length : 0,

			// the master Deferred.
			// If resolveValues consist of only a single Deferred, just use that.
			deferred = remaining === 1 ? subordinate : jQuery.Deferred(),

			// Update function for both resolve and progress values
			updateFunc = function( i, contexts, values ) {
				return function( value ) {
					contexts[ i ] = this;
					values[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;
					if ( values === progressValues ) {
						deferred.notifyWith( contexts, values );

					} else if ( !( --remaining ) ) {
						deferred.resolveWith( contexts, values );
					}
				};
			},

			progressValues, progressContexts, resolveContexts;

		// add listeners to Deferred subordinates; treat others as resolved
		if ( length > 1 ) {
			progressValues = new Array( length );
			progressContexts = new Array( length );
			resolveContexts = new Array( length );
			for ( ; i < length; i++ ) {
				if ( resolveValues[ i ] && jQuery.isFunction( resolveValues[ i ].promise ) ) {
					resolveValues[ i ].promise()
						.progress( updateFunc( i, progressContexts, progressValues ) )
						.done( updateFunc( i, resolveContexts, resolveValues ) )
						.fail( deferred.reject );
				} else {
					--remaining;
				}
			}
		}

		// if we're not waiting on anything, resolve the master
		if ( !remaining ) {
			deferred.resolveWith( resolveContexts, resolveValues );
		}

		return deferred.promise();
	}
} );


// The deferred used on DOM ready
var readyList;

jQuery.fn.ready = function( fn ) {

	// Add the callback
	jQuery.ready.promise().done( fn );

	return this;
};

jQuery.extend( {

	// Is the DOM ready to be used? Set to true once it occurs.
	isReady: false,

	// A counter to track how many items to wait for before
	// the ready event fires. See #6781
	readyWait: 1,

	// Hold (or release) the ready event
	holdReady: function( hold ) {
		if ( hold ) {
			jQuery.readyWait++;
		} else {
			jQuery.ready( true );
		}
	},

	// Handle when the DOM is ready
	ready: function( wait ) {

		// Abort if there are pending holds or we're already ready
		if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {
			return;
		}

		// Remember that the DOM is ready
		jQuery.isReady = true;

		// If a normal DOM Ready event fired, decrement, and wait if need be
		if ( wait !== true && --jQuery.readyWait > 0 ) {
			return;
		}

		// If there are functions bound, to execute
		readyList.resolveWith( document, [ jQuery ] );

		// Trigger any bound ready events
		if ( jQuery.fn.triggerHandler ) {
			jQuery( document ).triggerHandler( "ready" );
			jQuery( document ).off( "ready" );
		}
	}
} );

/**
 * Clean-up method for dom ready events
 */
function detach() {
	if ( document.addEventListener ) {
		document.removeEventListener( "DOMContentLoaded", completed );
		window.removeEventListener( "load", completed );

	} else {
		document.detachEvent( "onreadystatechange", completed );
		window.detachEvent( "onload", completed );
	}
}

/**
 * The ready event handler and self cleanup method
 */
function completed() {

	// readyState === "complete" is good enough for us to call the dom ready in oldIE
	if ( document.addEventListener ||
		window.event.type === "load" ||
		document.readyState === "complete" ) {

		detach();
		jQuery.ready();
	}
}

jQuery.ready.promise = function( obj ) {
	if ( !readyList ) {

		readyList = jQuery.Deferred();

		// Catch cases where $(document).ready() is called
		// after the browser event has already occurred.
		// Support: IE6-10
		// Older IE sometimes signals "interactive" too soon
		if ( document.readyState === "complete" ||
			( document.readyState !== "loading" && !document.documentElement.doScroll ) ) {

			// Handle it asynchronously to allow scripts the opportunity to delay ready
			window.setTimeout( jQuery.ready );

		// Standards-based browsers support DOMContentLoaded
		} else if ( document.addEventListener ) {

			// Use the handy event callback
			document.addEventListener( "DOMContentLoaded", completed );

			// A fallback to window.onload, that will always work
			window.addEventListener( "load", completed );

		// If IE event model is used
		} else {

			// Ensure firing before onload, maybe late but safe also for iframes
			document.attachEvent( "onreadystatechange", completed );

			// A fallback to window.onload, that will always work
			window.attachEvent( "onload", completed );

			// If IE and not a frame
			// continually check to see if the document is ready
			var top = false;

			try {
				top = window.frameElement == null && document.documentElement;
			} catch ( e ) {}

			if ( top && top.doScroll ) {
				( function doScrollCheck() {
					if ( !jQuery.isReady ) {

						try {

							// Use the trick by Diego Perini
							// http://javascript.nwbox.com/IEContentLoaded/
							top.doScroll( "left" );
						} catch ( e ) {
							return window.setTimeout( doScrollCheck, 50 );
						}

						// detach all dom ready events
						detach();

						// and execute any waiting functions
						jQuery.ready();
					}
				} )();
			}
		}
	}
	return readyList.promise( obj );
};

// Kick off the DOM ready check even if the user does not
jQuery.ready.promise();




// Support: IE<9
// Iteration over object's inherited properties before its own
var i;
for ( i in jQuery( support ) ) {
	break;
}
support.ownFirst = i === "0";

// Note: most support tests are defined in their respective modules.
// false until the test is run
support.inlineBlockNeedsLayout = false;

// Execute ASAP in case we need to set body.style.zoom
jQuery( function() {

	// Minified: var a,b,c,d
	var val, div, body, container;

	body = document.getElementsByTagName( "body" )[ 0 ];
	if ( !body || !body.style ) {

		// Return for frameset docs that don't have a body
		return;
	}

	// Setup
	div = document.createElement( "div" );
	container = document.createElement( "div" );
	container.style.cssText = "position:absolute;border:0;width:0;height:0;top:0;left:-9999px";
	body.appendChild( container ).appendChild( div );

	if ( typeof div.style.zoom !== "undefined" ) {

		// Support: IE<8
		// Check if natively block-level elements act like inline-block
		// elements when setting their display to 'inline' and giving
		// them layout
		div.style.cssText = "display:inline;margin:0;border:0;padding:1px;width:1px;zoom:1";

		support.inlineBlockNeedsLayout = val = div.offsetWidth === 3;
		if ( val ) {

			// Prevent IE 6 from affecting layout for positioned elements #11048
			// Prevent IE from shrinking the body in IE 7 mode #12869
			// Support: IE<8
			body.style.zoom = 1;
		}
	}

	body.removeChild( container );
} );


( function() {
	var div = document.createElement( "div" );

	// Support: IE<9
	support.deleteExpando = true;
	try {
		delete div.test;
	} catch ( e ) {
		support.deleteExpando = false;
	}

	// Null elements to avoid leaks in IE.
	div = null;
} )();
var acceptData = function( elem ) {
	var noData = jQuery.noData[ ( elem.nodeName + " " ).toLowerCase() ],
		nodeType = +elem.nodeType || 1;

	// Do not set data on non-element DOM nodes because it will not be cleared (#8335).
	return nodeType !== 1 && nodeType !== 9 ?
		false :

		// Nodes accept data unless otherwise specified; rejection can be conditional
		!noData || noData !== true && elem.getAttribute( "classid" ) === noData;
};




var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
	rmultiDash = /([A-Z])/g;

function dataAttr( elem, key, data ) {

	// If nothing was found internally, try to fetch any
	// data from the HTML5 data-* attribute
	if ( data === undefined && elem.nodeType === 1 ) {

		var name = "data-" + key.replace( rmultiDash, "-$1" ).toLowerCase();

		data = elem.getAttribute( name );

		if ( typeof data === "string" ) {
			try {
				data = data === "true" ? true :
					data === "false" ? false :
					data === "null" ? null :

					// Only convert to a number if it doesn't change the string
					+data + "" === data ? +data :
					rbrace.test( data ) ? jQuery.parseJSON( data ) :
					data;
			} catch ( e ) {}

			// Make sure we set the data so it isn't changed later
			jQuery.data( elem, key, data );

		} else {
			data = undefined;
		}
	}

	return data;
}

// checks a cache object for emptiness
function isEmptyDataObject( obj ) {
	var name;
	for ( name in obj ) {

		// if the public data object is empty, the private is still empty
		if ( name === "data" && jQuery.isEmptyObject( obj[ name ] ) ) {
			continue;
		}
		if ( name !== "toJSON" ) {
			return false;
		}
	}

	return true;
}

function internalData( elem, name, data, pvt /* Internal Use Only */ ) {
	if ( !acceptData( elem ) ) {
		return;
	}

	var ret, thisCache,
		internalKey = jQuery.expando,

		// We have to handle DOM nodes and JS objects differently because IE6-7
		// can't GC object references properly across the DOM-JS boundary
		isNode = elem.nodeType,

		// Only DOM nodes need the global jQuery cache; JS object data is
		// attached directly to the object so GC can occur automatically
		cache = isNode ? jQuery.cache : elem,

		// Only defining an ID for JS objects if its cache already exists allows
		// the code to shortcut on the same path as a DOM node with no cache
		id = isNode ? elem[ internalKey ] : elem[ internalKey ] && internalKey;

	// Avoid doing any more work than we need to when trying to get data on an
	// object that has no data at all
	if ( ( !id || !cache[ id ] || ( !pvt && !cache[ id ].data ) ) &&
		data === undefined && typeof name === "string" ) {
		return;
	}

	if ( !id ) {

		// Only DOM nodes need a new unique ID for each element since their data
		// ends up in the global cache
		if ( isNode ) {
			id = elem[ internalKey ] = deletedIds.pop() || jQuery.guid++;
		} else {
			id = internalKey;
		}
	}

	if ( !cache[ id ] ) {

		// Avoid exposing jQuery metadata on plain JS objects when the object
		// is serialized using JSON.stringify
		cache[ id ] = isNode ? {} : { toJSON: jQuery.noop };
	}

	// An object can be passed to jQuery.data instead of a key/value pair; this gets
	// shallow copied over onto the existing cache
	if ( typeof name === "object" || typeof name === "function" ) {
		if ( pvt ) {
			cache[ id ] = jQuery.extend( cache[ id ], name );
		} else {
			cache[ id ].data = jQuery.extend( cache[ id ].data, name );
		}
	}

	thisCache = cache[ id ];

	// jQuery data() is stored in a separate object inside the object's internal data
	// cache in order to avoid key collisions between internal data and user-defined
	// data.
	if ( !pvt ) {
		if ( !thisCache.data ) {
			thisCache.data = {};
		}

		thisCache = thisCache.data;
	}

	if ( data !== undefined ) {
		thisCache[ jQuery.camelCase( name ) ] = data;
	}

	// Check for both converted-to-camel and non-converted data property names
	// If a data property was specified
	if ( typeof name === "string" ) {

		// First Try to find as-is property data
		ret = thisCache[ name ];

		// Test for null|undefined property data
		if ( ret == null ) {

			// Try to find the camelCased property
			ret = thisCache[ jQuery.camelCase( name ) ];
		}
	} else {
		ret = thisCache;
	}

	return ret;
}

function internalRemoveData( elem, name, pvt ) {
	if ( !acceptData( elem ) ) {
		return;
	}

	var thisCache, i,
		isNode = elem.nodeType,

		// See jQuery.data for more information
		cache = isNode ? jQuery.cache : elem,
		id = isNode ? elem[ jQuery.expando ] : jQuery.expando;

	// If there is already no cache entry for this object, there is no
	// purpose in continuing
	if ( !cache[ id ] ) {
		return;
	}

	if ( name ) {

		thisCache = pvt ? cache[ id ] : cache[ id ].data;

		if ( thisCache ) {

			// Support array or space separated string names for data keys
			if ( !jQuery.isArray( name ) ) {

				// try the string as a key before any manipulation
				if ( name in thisCache ) {
					name = [ name ];
				} else {

					// split the camel cased version by spaces unless a key with the spaces exists
					name = jQuery.camelCase( name );
					if ( name in thisCache ) {
						name = [ name ];
					} else {
						name = name.split( " " );
					}
				}
			} else {

				// If "name" is an array of keys...
				// When data is initially created, via ("key", "val") signature,
				// keys will be converted to camelCase.
				// Since there is no way to tell _how_ a key was added, remove
				// both plain key and camelCase key. #12786
				// This will only penalize the array argument path.
				name = name.concat( jQuery.map( name, jQuery.camelCase ) );
			}

			i = name.length;
			while ( i-- ) {
				delete thisCache[ name[ i ] ];
			}

			// If there is no data left in the cache, we want to continue
			// and let the cache object itself get destroyed
			if ( pvt ? !isEmptyDataObject( thisCache ) : !jQuery.isEmptyObject( thisCache ) ) {
				return;
			}
		}
	}

	// See jQuery.data for more information
	if ( !pvt ) {
		delete cache[ id ].data;

		// Don't destroy the parent cache unless the internal data object
		// had been the only thing left in it
		if ( !isEmptyDataObject( cache[ id ] ) ) {
			return;
		}
	}

	// Destroy the cache
	if ( isNode ) {
		jQuery.cleanData( [ elem ], true );

	// Use delete when supported for expandos or `cache` is not a window per isWindow (#10080)
	/* jshint eqeqeq: false */
	} else if ( support.deleteExpando || cache != cache.window ) {
		/* jshint eqeqeq: true */
		delete cache[ id ];

	// When all else fails, undefined
	} else {
		cache[ id ] = undefined;
	}
}

jQuery.extend( {
	cache: {},

	// The following elements (space-suffixed to avoid Object.prototype collisions)
	// throw uncatchable exceptions if you attempt to set expando properties
	noData: {
		"applet ": true,
		"embed ": true,

		// ...but Flash objects (which have this classid) *can* handle expandos
		"object ": "clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"
	},

	hasData: function( elem ) {
		elem = elem.nodeType ? jQuery.cache[ elem[ jQuery.expando ] ] : elem[ jQuery.expando ];
		return !!elem && !isEmptyDataObject( elem );
	},

	data: function( elem, name, data ) {
		return internalData( elem, name, data );
	},

	removeData: function( elem, name ) {
		return internalRemoveData( elem, name );
	},

	// For internal use only.
	_data: function( elem, name, data ) {
		return internalData( elem, name, data, true );
	},

	_removeData: function( elem, name ) {
		return internalRemoveData( elem, name, true );
	}
} );

jQuery.fn.extend( {
	data: function( key, value ) {
		var i, name, data,
			elem = this[ 0 ],
			attrs = elem && elem.attributes;

		// Special expections of .data basically thwart jQuery.access,
		// so implement the relevant behavior ourselves

		// Gets all values
		if ( key === undefined ) {
			if ( this.length ) {
				data = jQuery.data( elem );

				if ( elem.nodeType === 1 && !jQuery._data( elem, "parsedAttrs" ) ) {
					i = attrs.length;
					while ( i-- ) {

						// Support: IE11+
						// The attrs elements can be null (#14894)
						if ( attrs[ i ] ) {
							name = attrs[ i ].name;
							if ( name.indexOf( "data-" ) === 0 ) {
								name = jQuery.camelCase( name.slice( 5 ) );
								dataAttr( elem, name, data[ name ] );
							}
						}
					}
					jQuery._data( elem, "parsedAttrs", true );
				}
			}

			return data;
		}

		// Sets multiple values
		if ( typeof key === "object" ) {
			return this.each( function() {
				jQuery.data( this, key );
			} );
		}

		return arguments.length > 1 ?

			// Sets one value
			this.each( function() {
				jQuery.data( this, key, value );
			} ) :

			// Gets one value
			// Try to fetch any internally stored data first
			elem ? dataAttr( elem, key, jQuery.data( elem, key ) ) : undefined;
	},

	removeData: function( key ) {
		return this.each( function() {
			jQuery.removeData( this, key );
		} );
	}
} );


jQuery.extend( {
	queue: function( elem, type, data ) {
		var queue;

		if ( elem ) {
			type = ( type || "fx" ) + "queue";
			queue = jQuery._data( elem, type );

			// Speed up dequeue by getting out quickly if this is just a lookup
			if ( data ) {
				if ( !queue || jQuery.isArray( data ) ) {
					queue = jQuery._data( elem, type, jQuery.makeArray( data ) );
				} else {
					queue.push( data );
				}
			}
			return queue || [];
		}
	},

	dequeue: function( elem, type ) {
		type = type || "fx";

		var queue = jQuery.queue( elem, type ),
			startLength = queue.length,
			fn = queue.shift(),
			hooks = jQuery._queueHooks( elem, type ),
			next = function() {
				jQuery.dequeue( elem, type );
			};

		// If the fx queue is dequeued, always remove the progress sentinel
		if ( fn === "inprogress" ) {
			fn = queue.shift();
			startLength--;
		}

		if ( fn ) {

			// Add a progress sentinel to prevent the fx queue from being
			// automatically dequeued
			if ( type === "fx" ) {
				queue.unshift( "inprogress" );
			}

			// clear up the last queue stop function
			delete hooks.stop;
			fn.call( elem, next, hooks );
		}

		if ( !startLength && hooks ) {
			hooks.empty.fire();
		}
	},

	// not intended for public consumption - generates a queueHooks object,
	// or returns the current one
	_queueHooks: function( elem, type ) {
		var key = type + "queueHooks";
		return jQuery._data( elem, key ) || jQuery._data( elem, key, {
			empty: jQuery.Callbacks( "once memory" ).add( function() {
				jQuery._removeData( elem, type + "queue" );
				jQuery._removeData( elem, key );
			} )
		} );
	}
} );

jQuery.fn.extend( {
	queue: function( type, data ) {
		var setter = 2;

		if ( typeof type !== "string" ) {
			data = type;
			type = "fx";
			setter--;
		}

		if ( arguments.length < setter ) {
			return jQuery.queue( this[ 0 ], type );
		}

		return data === undefined ?
			this :
			this.each( function() {
				var queue = jQuery.queue( this, type, data );

				// ensure a hooks for this queue
				jQuery._queueHooks( this, type );

				if ( type === "fx" && queue[ 0 ] !== "inprogress" ) {
					jQuery.dequeue( this, type );
				}
			} );
	},
	dequeue: function( type ) {
		return this.each( function() {
			jQuery.dequeue( this, type );
		} );
	},
	clearQueue: function( type ) {
		return this.queue( type || "fx", [] );
	},

	// Get a promise resolved when queues of a certain type
	// are emptied (fx is the type by default)
	promise: function( type, obj ) {
		var tmp,
			count = 1,
			defer = jQuery.Deferred(),
			elements = this,
			i = this.length,
			resolve = function() {
				if ( !( --count ) ) {
					defer.resolveWith( elements, [ elements ] );
				}
			};

		if ( typeof type !== "string" ) {
			obj = type;
			type = undefined;
		}
		type = type || "fx";

		while ( i-- ) {
			tmp = jQuery._data( elements[ i ], type + "queueHooks" );
			if ( tmp && tmp.empty ) {
				count++;
				tmp.empty.add( resolve );
			}
		}
		resolve();
		return defer.promise( obj );
	}
} );


( function() {
	var shrinkWrapBlocksVal;

	support.shrinkWrapBlocks = function() {
		if ( shrinkWrapBlocksVal != null ) {
			return shrinkWrapBlocksVal;
		}

		// Will be changed later if needed.
		shrinkWrapBlocksVal = false;

		// Minified: var b,c,d
		var div, body, container;

		body = document.getElementsByTagName( "body" )[ 0 ];
		if ( !body || !body.style ) {

			// Test fired too early or in an unsupported environment, exit.
			return;
		}

		// Setup
		div = document.createElement( "div" );
		container = document.createElement( "div" );
		container.style.cssText = "position:absolute;border:0;width:0;height:0;top:0;left:-9999px";
		body.appendChild( container ).appendChild( div );

		// Support: IE6
		// Check if elements with layout shrink-wrap their children
		if ( typeof div.style.zoom !== "undefined" ) {

			// Reset CSS: box-sizing; display; margin; border
			div.style.cssText =

				// Support: Firefox<29, Android 2.3
				// Vendor-prefix box-sizing
				"-webkit-box-sizing:content-box;-moz-box-sizing:content-box;" +
				"box-sizing:content-box;display:block;margin:0;border:0;" +
				"padding:1px;width:1px;zoom:1";
			div.appendChild( document.createElement( "div" ) ).style.width = "5px";
			shrinkWrapBlocksVal = div.offsetWidth !== 3;
		}

		body.removeChild( container );

		return shrinkWrapBlocksVal;
	};

} )();
var pnum = ( /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/ ).source;

var rcssNum = new RegExp( "^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i" );


var cssExpand = [ "Top", "Right", "Bottom", "Left" ];

var isHidden = function( elem, el ) {

		// isHidden might be called from jQuery#filter function;
		// in that case, element will be second argument
		elem = el || elem;
		return jQuery.css( elem, "display" ) === "none" ||
			!jQuery.contains( elem.ownerDocument, elem );
	};



function adjustCSS( elem, prop, valueParts, tween ) {
	var adjusted,
		scale = 1,
		maxIterations = 20,
		currentValue = tween ?
			function() { return tween.cur(); } :
			function() { return jQuery.css( elem, prop, "" ); },
		initial = currentValue(),
		unit = valueParts && valueParts[ 3 ] || ( jQuery.cssNumber[ prop ] ? "" : "px" ),

		// Starting value computation is required for potential unit mismatches
		initialInUnit = ( jQuery.cssNumber[ prop ] || unit !== "px" && +initial ) &&
			rcssNum.exec( jQuery.css( elem, prop ) );

	if ( initialInUnit && initialInUnit[ 3 ] !== unit ) {

		// Trust units reported by jQuery.css
		unit = unit || initialInUnit[ 3 ];

		// Make sure we update the tween properties later on
		valueParts = valueParts || [];

		// Iteratively approximate from a nonzero starting point
		initialInUnit = +initial || 1;

		do {

			// If previous iteration zeroed out, double until we get *something*.
			// Use string for doubling so we don't accidentally see scale as unchanged below
			scale = scale || ".5";

			// Adjust and apply
			initialInUnit = initialInUnit / scale;
			jQuery.style( elem, prop, initialInUnit + unit );

		// Update scale, tolerating zero or NaN from tween.cur()
		// Break the loop if scale is unchanged or perfect, or if we've just had enough.
		} while (
			scale !== ( scale = currentValue() / initial ) && scale !== 1 && --maxIterations
		);
	}

	if ( valueParts ) {
		initialInUnit = +initialInUnit || +initial || 0;

		// Apply relative offset (+=/-=) if specified
		adjusted = valueParts[ 1 ] ?
			initialInUnit + ( valueParts[ 1 ] + 1 ) * valueParts[ 2 ] :
			+valueParts[ 2 ];
		if ( tween ) {
			tween.unit = unit;
			tween.start = initialInUnit;
			tween.end = adjusted;
		}
	}
	return adjusted;
}


// Multifunctional method to get and set values of a collection
// The value/s can optionally be executed if it's a function
var access = function( elems, fn, key, value, chainable, emptyGet, raw ) {
	var i = 0,
		length = elems.length,
		bulk = key == null;

	// Sets many values
	if ( jQuery.type( key ) === "object" ) {
		chainable = true;
		for ( i in key ) {
			access( elems, fn, i, key[ i ], true, emptyGet, raw );
		}

	// Sets one value
	} else if ( value !== undefined ) {
		chainable = true;

		if ( !jQuery.isFunction( value ) ) {
			raw = true;
		}

		if ( bulk ) {

			// Bulk operations run against the entire set
			if ( raw ) {
				fn.call( elems, value );
				fn = null;

			// ...except when executing function values
			} else {
				bulk = fn;
				fn = function( elem, key, value ) {
					return bulk.call( jQuery( elem ), value );
				};
			}
		}

		if ( fn ) {
			for ( ; i < length; i++ ) {
				fn(
					elems[ i ],
					key,
					raw ? value : value.call( elems[ i ], i, fn( elems[ i ], key ) )
				);
			}
		}
	}

	return chainable ?
		elems :

		// Gets
		bulk ?
			fn.call( elems ) :
			length ? fn( elems[ 0 ], key ) : emptyGet;
};
var rcheckableType = ( /^(?:checkbox|radio)$/i );

var rtagName = ( /<([\w:-]+)/ );

var rscriptType = ( /^$|\/(?:java|ecma)script/i );

var rleadingWhitespace = ( /^\s+/ );

var nodeNames = "abbr|article|aside|audio|bdi|canvas|data|datalist|" +
		"details|dialog|figcaption|figure|footer|header|hgroup|main|" +
		"mark|meter|nav|output|picture|progress|section|summary|template|time|video";



function createSafeFragment( document ) {
	var list = nodeNames.split( "|" ),
		safeFrag = document.createDocumentFragment();

	if ( safeFrag.createElement ) {
		while ( list.length ) {
			safeFrag.createElement(
				list.pop()
			);
		}
	}
	return safeFrag;
}


( function() {
	var div = document.createElement( "div" ),
		fragment = document.createDocumentFragment(),
		input = document.createElement( "input" );

	// Setup
	div.innerHTML = "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>";

	// IE strips leading whitespace when .innerHTML is used
	support.leadingWhitespace = div.firstChild.nodeType === 3;

	// Make sure that tbody elements aren't automatically inserted
	// IE will insert them into empty tables
	support.tbody = !div.getElementsByTagName( "tbody" ).length;

	// Make sure that link elements get serialized correctly by innerHTML
	// This requires a wrapper element in IE
	support.htmlSerialize = !!div.getElementsByTagName( "link" ).length;

	// Makes sure cloning an html5 element does not cause problems
	// Where outerHTML is undefined, this still works
	support.html5Clone =
		document.createElement( "nav" ).cloneNode( true ).outerHTML !== "<:nav></:nav>";

	// Check if a disconnected checkbox will retain its checked
	// value of true after appended to the DOM (IE6/7)
	input.type = "checkbox";
	input.checked = true;
	fragment.appendChild( input );
	support.appendChecked = input.checked;

	// Make sure textarea (and checkbox) defaultValue is properly cloned
	// Support: IE6-IE11+
	div.innerHTML = "<textarea>x</textarea>";
	support.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;

	// #11217 - WebKit loses check when the name is after the checked attribute
	fragment.appendChild( div );

	// Support: Windows Web Apps (WWA)
	// `name` and `type` must use .setAttribute for WWA (#14901)
	input = document.createElement( "input" );
	input.setAttribute( "type", "radio" );
	input.setAttribute( "checked", "checked" );
	input.setAttribute( "name", "t" );

	div.appendChild( input );

	// Support: Safari 5.1, iOS 5.1, Android 4.x, Android 2.3
	// old WebKit doesn't clone checked state correctly in fragments
	support.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;

	// Support: IE<9
	// Cloned elements keep attachEvent handlers, we use addEventListener on IE9+
	support.noCloneEvent = !!div.addEventListener;

	// Support: IE<9
	// Since attributes and properties are the same in IE,
	// cleanData must set properties to undefined rather than use removeAttribute
	div[ jQuery.expando ] = 1;
	support.attributes = !div.getAttribute( jQuery.expando );
} )();


// We have to close these tags to support XHTML (#13200)
var wrapMap = {
	option: [ 1, "<select multiple='multiple'>", "</select>" ],
	legend: [ 1, "<fieldset>", "</fieldset>" ],
	area: [ 1, "<map>", "</map>" ],

	// Support: IE8
	param: [ 1, "<object>", "</object>" ],
	thead: [ 1, "<table>", "</table>" ],
	tr: [ 2, "<table><tbody>", "</tbody></table>" ],
	col: [ 2, "<table><tbody></tbody><colgroup>", "</colgroup></table>" ],
	td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],

	// IE6-8 can't serialize link, script, style, or any html5 (NoScope) tags,
	// unless wrapped in a div with non-breaking characters in front of it.
	_default: support.htmlSerialize ? [ 0, "", "" ] : [ 1, "X<div>", "</div>" ]
};

// Support: IE8-IE9
wrapMap.optgroup = wrapMap.option;

wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
wrapMap.th = wrapMap.td;


function getAll( context, tag ) {
	var elems, elem,
		i = 0,
		found = typeof context.getElementsByTagName !== "undefined" ?
			context.getElementsByTagName( tag || "*" ) :
			typeof context.querySelectorAll !== "undefined" ?
				context.querySelectorAll( tag || "*" ) :
				undefined;

	if ( !found ) {
		for ( found = [], elems = context.childNodes || context;
			( elem = elems[ i ] ) != null;
			i++
		) {
			if ( !tag || jQuery.nodeName( elem, tag ) ) {
				found.push( elem );
			} else {
				jQuery.merge( found, getAll( elem, tag ) );
			}
		}
	}

	return tag === undefined || tag && jQuery.nodeName( context, tag ) ?
		jQuery.merge( [ context ], found ) :
		found;
}


// Mark scripts as having already been evaluated
function setGlobalEval( elems, refElements ) {
	var elem,
		i = 0;
	for ( ; ( elem = elems[ i ] ) != null; i++ ) {
		jQuery._data(
			elem,
			"globalEval",
			!refElements || jQuery._data( refElements[ i ], "globalEval" )
		);
	}
}


var rhtml = /<|&#?\w+;/,
	rtbody = /<tbody/i;

function fixDefaultChecked( elem ) {
	if ( rcheckableType.test( elem.type ) ) {
		elem.defaultChecked = elem.checked;
	}
}

function buildFragment( elems, context, scripts, selection, ignored ) {
	var j, elem, contains,
		tmp, tag, tbody, wrap,
		l = elems.length,

		// Ensure a safe fragment
		safe = createSafeFragment( context ),

		nodes = [],
		i = 0;

	for ( ; i < l; i++ ) {
		elem = elems[ i ];

		if ( elem || elem === 0 ) {

			// Add nodes directly
			if ( jQuery.type( elem ) === "object" ) {
				jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );

			// Convert non-html into a text node
			} else if ( !rhtml.test( elem ) ) {
				nodes.push( context.createTextNode( elem ) );

			// Convert html into DOM nodes
			} else {
				tmp = tmp || safe.appendChild( context.createElement( "div" ) );

				// Deserialize a standard representation
				tag = ( rtagName.exec( elem ) || [ "", "" ] )[ 1 ].toLowerCase();
				wrap = wrapMap[ tag ] || wrapMap._default;

				tmp.innerHTML = wrap[ 1 ] + jQuery.htmlPrefilter( elem ) + wrap[ 2 ];

				// Descend through wrappers to the right content
				j = wrap[ 0 ];
				while ( j-- ) {
					tmp = tmp.lastChild;
				}

				// Manually add leading whitespace removed by IE
				if ( !support.leadingWhitespace && rleadingWhitespace.test( elem ) ) {
					nodes.push( context.createTextNode( rleadingWhitespace.exec( elem )[ 0 ] ) );
				}

				// Remove IE's autoinserted <tbody> from table fragments
				if ( !support.tbody ) {

					// String was a <table>, *may* have spurious <tbody>
					elem = tag === "table" && !rtbody.test( elem ) ?
						tmp.firstChild :

						// String was a bare <thead> or <tfoot>
						wrap[ 1 ] === "<table>" && !rtbody.test( elem ) ?
							tmp :
							0;

					j = elem && elem.childNodes.length;
					while ( j-- ) {
						if ( jQuery.nodeName( ( tbody = elem.childNodes[ j ] ), "tbody" ) &&
							!tbody.childNodes.length ) {

							elem.removeChild( tbody );
						}
					}
				}

				jQuery.merge( nodes, tmp.childNodes );

				// Fix #12392 for WebKit and IE > 9
				tmp.textContent = "";

				// Fix #12392 for oldIE
				while ( tmp.firstChild ) {
					tmp.removeChild( tmp.firstChild );
				}

				// Remember the top-level container for proper cleanup
				tmp = safe.lastChild;
			}
		}
	}

	// Fix #11356: Clear elements from fragment
	if ( tmp ) {
		safe.removeChild( tmp );
	}

	// Reset defaultChecked for any radios and checkboxes
	// about to be appended to the DOM in IE 6/7 (#8060)
	if ( !support.appendChecked ) {
		jQuery.grep( getAll( nodes, "input" ), fixDefaultChecked );
	}

	i = 0;
	while ( ( elem = nodes[ i++ ] ) ) {

		// Skip elements already in the context collection (trac-4087)
		if ( selection && jQuery.inArray( elem, selection ) > -1 ) {
			if ( ignored ) {
				ignored.push( elem );
			}

			continue;
		}

		contains = jQuery.contains( elem.ownerDocument, elem );

		// Append to fragment
		tmp = getAll( safe.appendChild( elem ), "script" );

		// Preserve script evaluation history
		if ( contains ) {
			setGlobalEval( tmp );
		}

		// Capture executables
		if ( scripts ) {
			j = 0;
			while ( ( elem = tmp[ j++ ] ) ) {
				if ( rscriptType.test( elem.type || "" ) ) {
					scripts.push( elem );
				}
			}
		}
	}

	tmp = null;

	return safe;
}


( function() {
	var i, eventName,
		div = document.createElement( "div" );

	// Support: IE<9 (lack submit/change bubble), Firefox (lack focus(in | out) events)
	for ( i in { submit: true, change: true, focusin: true } ) {
		eventName = "on" + i;

		if ( !( support[ i ] = eventName in window ) ) {

			// Beware of CSP restrictions (https://developer.mozilla.org/en/Security/CSP)
			div.setAttribute( eventName, "t" );
			support[ i ] = div.attributes[ eventName ].expando === false;
		}
	}

	// Null elements to avoid leaks in IE.
	div = null;
} )();


var rformElems = /^(?:input|select|textarea)$/i,
	rkeyEvent = /^key/,
	rmouseEvent = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,
	rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
	rtypenamespace = /^([^.]*)(?:\.(.+)|)/;

function returnTrue() {
	return true;
}

function returnFalse() {
	return false;
}

// Support: IE9
// See #13393 for more info
function safeActiveElement() {
	try {
		return document.activeElement;
	} catch ( err ) { }
}

function on( elem, types, selector, data, fn, one ) {
	var origFn, type;

	// Types can be a map of types/handlers
	if ( typeof types === "object" ) {

		// ( types-Object, selector, data )
		if ( typeof selector !== "string" ) {

			// ( types-Object, data )
			data = data || selector;
			selector = undefined;
		}
		for ( type in types ) {
			on( elem, type, selector, data, types[ type ], one );
		}
		return elem;
	}

	if ( data == null && fn == null ) {

		// ( types, fn )
		fn = selector;
		data = selector = undefined;
	} else if ( fn == null ) {
		if ( typeof selector === "string" ) {

			// ( types, selector, fn )
			fn = data;
			data = undefined;
		} else {

			// ( types, data, fn )
			fn = data;
			data = selector;
			selector = undefined;
		}
	}
	if ( fn === false ) {
		fn = returnFalse;
	} else if ( !fn ) {
		return elem;
	}

	if ( one === 1 ) {
		origFn = fn;
		fn = function( event ) {

			// Can use an empty set, since event contains the info
			jQuery().off( event );
			return origFn.apply( this, arguments );
		};

		// Use same guid so caller can remove using origFn
		fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
	}
	return elem.each( function() {
		jQuery.event.add( this, types, fn, data, selector );
	} );
}

/*
 * Helper functions for managing events -- not part of the public interface.
 * Props to Dean Edwards' addEvent library for many of the ideas.
 */
jQuery.event = {

	global: {},

	add: function( elem, types, handler, data, selector ) {
		var tmp, events, t, handleObjIn,
			special, eventHandle, handleObj,
			handlers, type, namespaces, origType,
			elemData = jQuery._data( elem );

		// Don't attach events to noData or text/comment nodes (but allow plain objects)
		if ( !elemData ) {
			return;
		}

		// Caller can pass in an object of custom data in lieu of the handler
		if ( handler.handler ) {
			handleObjIn = handler;
			handler = handleObjIn.handler;
			selector = handleObjIn.selector;
		}

		// Make sure that the handler has a unique ID, used to find/remove it later
		if ( !handler.guid ) {
			handler.guid = jQuery.guid++;
		}

		// Init the element's event structure and main handler, if this is the first
		if ( !( events = elemData.events ) ) {
			events = elemData.events = {};
		}
		if ( !( eventHandle = elemData.handle ) ) {
			eventHandle = elemData.handle = function( e ) {

				// Discard the second event of a jQuery.event.trigger() and
				// when an event is called after a page has unloaded
				return typeof jQuery !== "undefined" &&
					( !e || jQuery.event.triggered !== e.type ) ?
					jQuery.event.dispatch.apply( eventHandle.elem, arguments ) :
					undefined;
			};

			// Add elem as a property of the handle fn to prevent a memory leak
			// with IE non-native events
			eventHandle.elem = elem;
		}

		// Handle multiple events separated by a space
		types = ( types || "" ).match( rnotwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[ t ] ) || [];
			type = origType = tmp[ 1 ];
			namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

			// There *must* be a type, no attaching namespace-only handlers
			if ( !type ) {
				continue;
			}

			// If event changes its type, use the special event handlers for the changed type
			special = jQuery.event.special[ type ] || {};

			// If selector defined, determine special event api type, otherwise given type
			type = ( selector ? special.delegateType : special.bindType ) || type;

			// Update special based on newly reset type
			special = jQuery.event.special[ type ] || {};

			// handleObj is passed to all event handlers
			handleObj = jQuery.extend( {
				type: type,
				origType: origType,
				data: data,
				handler: handler,
				guid: handler.guid,
				selector: selector,
				needsContext: selector && jQuery.expr.match.needsContext.test( selector ),
				namespace: namespaces.join( "." )
			}, handleObjIn );

			// Init the event handler queue if we're the first
			if ( !( handlers = events[ type ] ) ) {
				handlers = events[ type ] = [];
				handlers.delegateCount = 0;

				// Only use addEventListener/attachEvent if the special events handler returns false
				if ( !special.setup ||
					special.setup.call( elem, data, namespaces, eventHandle ) === false ) {

					// Bind the global event handler to the element
					if ( elem.addEventListener ) {
						elem.addEventListener( type, eventHandle, false );

					} else if ( elem.attachEvent ) {
						elem.attachEvent( "on" + type, eventHandle );
					}
				}
			}

			if ( special.add ) {
				special.add.call( elem, handleObj );

				if ( !handleObj.handler.guid ) {
					handleObj.handler.guid = handler.guid;
				}
			}

			// Add to the element's handler list, delegates in front
			if ( selector ) {
				handlers.splice( handlers.delegateCount++, 0, handleObj );
			} else {
				handlers.push( handleObj );
			}

			// Keep track of which events have ever been used, for event optimization
			jQuery.event.global[ type ] = true;
		}

		// Nullify elem to prevent memory leaks in IE
		elem = null;
	},

	// Detach an event or set of events from an element
	remove: function( elem, types, handler, selector, mappedTypes ) {
		var j, handleObj, tmp,
			origCount, t, events,
			special, handlers, type,
			namespaces, origType,
			elemData = jQuery.hasData( elem ) && jQuery._data( elem );

		if ( !elemData || !( events = elemData.events ) ) {
			return;
		}

		// Once for each type.namespace in types; type may be omitted
		types = ( types || "" ).match( rnotwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[ t ] ) || [];
			type = origType = tmp[ 1 ];
			namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

			// Unbind all events (on this namespace, if provided) for the element
			if ( !type ) {
				for ( type in events ) {
					jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
				}
				continue;
			}

			special = jQuery.event.special[ type ] || {};
			type = ( selector ? special.delegateType : special.bindType ) || type;
			handlers = events[ type ] || [];
			tmp = tmp[ 2 ] &&
				new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" );

			// Remove matching events
			origCount = j = handlers.length;
			while ( j-- ) {
				handleObj = handlers[ j ];

				if ( ( mappedTypes || origType === handleObj.origType ) &&
					( !handler || handler.guid === handleObj.guid ) &&
					( !tmp || tmp.test( handleObj.namespace ) ) &&
					( !selector || selector === handleObj.selector ||
						selector === "**" && handleObj.selector ) ) {
					handlers.splice( j, 1 );

					if ( handleObj.selector ) {
						handlers.delegateCount--;
					}
					if ( special.remove ) {
						special.remove.call( elem, handleObj );
					}
				}
			}

			// Remove generic event handler if we removed something and no more handlers exist
			// (avoids potential for endless recursion during removal of special event handlers)
			if ( origCount && !handlers.length ) {
				if ( !special.teardown ||
					special.teardown.call( elem, namespaces, elemData.handle ) === false ) {

					jQuery.removeEvent( elem, type, elemData.handle );
				}

				delete events[ type ];
			}
		}

		// Remove the expando if it's no longer used
		if ( jQuery.isEmptyObject( events ) ) {
			delete elemData.handle;

			// removeData also checks for emptiness and clears the expando if empty
			// so use it instead of delete
			jQuery._removeData( elem, "events" );
		}
	},

	trigger: function( event, data, elem, onlyHandlers ) {
		var handle, ontype, cur,
			bubbleType, special, tmp, i,
			eventPath = [ elem || document ],
			type = hasOwn.call( event, "type" ) ? event.type : event,
			namespaces = hasOwn.call( event, "namespace" ) ? event.namespace.split( "." ) : [];

		cur = tmp = elem = elem || document;

		// Don't do events on text and comment nodes
		if ( elem.nodeType === 3 || elem.nodeType === 8 ) {
			return;
		}

		// focus/blur morphs to focusin/out; ensure we're not firing them right now
		if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
			return;
		}

		if ( type.indexOf( "." ) > -1 ) {

			// Namespaced trigger; create a regexp to match event type in handle()
			namespaces = type.split( "." );
			type = namespaces.shift();
			namespaces.sort();
		}
		ontype = type.indexOf( ":" ) < 0 && "on" + type;

		// Caller can pass in a jQuery.Event object, Object, or just an event type string
		event = event[ jQuery.expando ] ?
			event :
			new jQuery.Event( type, typeof event === "object" && event );

		// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
		event.isTrigger = onlyHandlers ? 2 : 3;
		event.namespace = namespaces.join( "." );
		event.rnamespace = event.namespace ?
			new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" ) :
			null;

		// Clean up the event in case it is being reused
		event.result = undefined;
		if ( !event.target ) {
			event.target = elem;
		}

		// Clone any incoming data and prepend the event, creating the handler arg list
		data = data == null ?
			[ event ] :
			jQuery.makeArray( data, [ event ] );

		// Allow special events to draw outside the lines
		special = jQuery.event.special[ type ] || {};
		if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {
			return;
		}

		// Determine event propagation path in advance, per W3C events spec (#9951)
		// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
		if ( !onlyHandlers && !special.noBubble && !jQuery.isWindow( elem ) ) {

			bubbleType = special.delegateType || type;
			if ( !rfocusMorph.test( bubbleType + type ) ) {
				cur = cur.parentNode;
			}
			for ( ; cur; cur = cur.parentNode ) {
				eventPath.push( cur );
				tmp = cur;
			}

			// Only add window if we got to document (e.g., not plain obj or detached DOM)
			if ( tmp === ( elem.ownerDocument || document ) ) {
				eventPath.push( tmp.defaultView || tmp.parentWindow || window );
			}
		}

		// Fire handlers on the event path
		i = 0;
		while ( ( cur = eventPath[ i++ ] ) && !event.isPropagationStopped() ) {

			event.type = i > 1 ?
				bubbleType :
				special.bindType || type;

			// jQuery handler
			handle = ( jQuery._data( cur, "events" ) || {} )[ event.type ] &&
				jQuery._data( cur, "handle" );

			if ( handle ) {
				handle.apply( cur, data );
			}

			// Native handler
			handle = ontype && cur[ ontype ];
			if ( handle && handle.apply && acceptData( cur ) ) {
				event.result = handle.apply( cur, data );
				if ( event.result === false ) {
					event.preventDefault();
				}
			}
		}
		event.type = type;

		// If nobody prevented the default action, do it now
		if ( !onlyHandlers && !event.isDefaultPrevented() ) {

			if (
				( !special._default ||
				 special._default.apply( eventPath.pop(), data ) === false
				) && acceptData( elem )
			) {

				// Call a native DOM method on the target with the same name name as the event.
				// Can't use an .isFunction() check here because IE6/7 fails that test.
				// Don't do default actions on window, that's where global variables be (#6170)
				if ( ontype && elem[ type ] && !jQuery.isWindow( elem ) ) {

					// Don't re-trigger an onFOO event when we call its FOO() method
					tmp = elem[ ontype ];

					if ( tmp ) {
						elem[ ontype ] = null;
					}

					// Prevent re-triggering of the same event, since we already bubbled it above
					jQuery.event.triggered = type;
					try {
						elem[ type ]();
					} catch ( e ) {

						// IE<9 dies on focus/blur to hidden element (#1486,#12518)
						// only reproducible on winXP IE8 native, not IE9 in IE8 mode
					}
					jQuery.event.triggered = undefined;

					if ( tmp ) {
						elem[ ontype ] = tmp;
					}
				}
			}
		}

		return event.result;
	},

	dispatch: function( event ) {

		// Make a writable jQuery.Event from the native event object
		event = jQuery.event.fix( event );

		var i, j, ret, matched, handleObj,
			handlerQueue = [],
			args = slice.call( arguments ),
			handlers = ( jQuery._data( this, "events" ) || {} )[ event.type ] || [],
			special = jQuery.event.special[ event.type ] || {};

		// Use the fix-ed jQuery.Event rather than the (read-only) native event
		args[ 0 ] = event;
		event.delegateTarget = this;

		// Call the preDispatch hook for the mapped type, and let it bail if desired
		if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
			return;
		}

		// Determine handlers
		handlerQueue = jQuery.event.handlers.call( this, event, handlers );

		// Run delegates first; they may want to stop propagation beneath us
		i = 0;
		while ( ( matched = handlerQueue[ i++ ] ) && !event.isPropagationStopped() ) {
			event.currentTarget = matched.elem;

			j = 0;
			while ( ( handleObj = matched.handlers[ j++ ] ) &&
				!event.isImmediatePropagationStopped() ) {

				// Triggered event must either 1) have no namespace, or 2) have namespace(s)
				// a subset or equal to those in the bound event (both can have no namespace).
				if ( !event.rnamespace || event.rnamespace.test( handleObj.namespace ) ) {

					event.handleObj = handleObj;
					event.data = handleObj.data;

					ret = ( ( jQuery.event.special[ handleObj.origType ] || {} ).handle ||
						handleObj.handler ).apply( matched.elem, args );

					if ( ret !== undefined ) {
						if ( ( event.result = ret ) === false ) {
							event.preventDefault();
							event.stopPropagation();
						}
					}
				}
			}
		}

		// Call the postDispatch hook for the mapped type
		if ( special.postDispatch ) {
			special.postDispatch.call( this, event );
		}

		return event.result;
	},

	handlers: function( event, handlers ) {
		var i, matches, sel, handleObj,
			handlerQueue = [],
			delegateCount = handlers.delegateCount,
			cur = event.target;

		// Support (at least): Chrome, IE9
		// Find delegate handlers
		// Black-hole SVG <use> instance trees (#13180)
		//
		// Support: Firefox<=42+
		// Avoid non-left-click in FF but don't block IE radio events (#3861, gh-2343)
		if ( delegateCount && cur.nodeType &&
			( event.type !== "click" || isNaN( event.button ) || event.button < 1 ) ) {

			/* jshint eqeqeq: false */
			for ( ; cur != this; cur = cur.parentNode || this ) {
				/* jshint eqeqeq: true */

				// Don't check non-elements (#13208)
				// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
				if ( cur.nodeType === 1 && ( cur.disabled !== true || event.type !== "click" ) ) {
					matches = [];
					for ( i = 0; i < delegateCount; i++ ) {
						handleObj = handlers[ i ];

						// Don't conflict with Object.prototype properties (#13203)
						sel = handleObj.selector + " ";

						if ( matches[ sel ] === undefined ) {
							matches[ sel ] = handleObj.needsContext ?
								jQuery( sel, this ).index( cur ) > -1 :
								jQuery.find( sel, this, null, [ cur ] ).length;
						}
						if ( matches[ sel ] ) {
							matches.push( handleObj );
						}
					}
					if ( matches.length ) {
						handlerQueue.push( { elem: cur, handlers: matches } );
					}
				}
			}
		}

		// Add the remaining (directly-bound) handlers
		if ( delegateCount < handlers.length ) {
			handlerQueue.push( { elem: this, handlers: handlers.slice( delegateCount ) } );
		}

		return handlerQueue;
	},

	fix: function( event ) {
		if ( event[ jQuery.expando ] ) {
			return event;
		}

		// Create a writable copy of the event object and normalize some properties
		var i, prop, copy,
			type = event.type,
			originalEvent = event,
			fixHook = this.fixHooks[ type ];

		if ( !fixHook ) {
			this.fixHooks[ type ] = fixHook =
				rmouseEvent.test( type ) ? this.mouseHooks :
				rkeyEvent.test( type ) ? this.keyHooks :
				{};
		}
		copy = fixHook.props ? this.props.concat( fixHook.props ) : this.props;

		event = new jQuery.Event( originalEvent );

		i = copy.length;
		while ( i-- ) {
			prop = copy[ i ];
			event[ prop ] = originalEvent[ prop ];
		}

		// Support: IE<9
		// Fix target property (#1925)
		if ( !event.target ) {
			event.target = originalEvent.srcElement || document;
		}

		// Support: Safari 6-8+
		// Target should not be a text node (#504, #13143)
		if ( event.target.nodeType === 3 ) {
			event.target = event.target.parentNode;
		}

		// Support: IE<9
		// For mouse/key events, metaKey==false if it's undefined (#3368, #11328)
		event.metaKey = !!event.metaKey;

		return fixHook.filter ? fixHook.filter( event, originalEvent ) : event;
	},

	// Includes some event props shared by KeyEvent and MouseEvent
	props: ( "altKey bubbles cancelable ctrlKey currentTarget detail eventPhase " +
		"metaKey relatedTarget shiftKey target timeStamp view which" ).split( " " ),

	fixHooks: {},

	keyHooks: {
		props: "char charCode key keyCode".split( " " ),
		filter: function( event, original ) {

			// Add which for key events
			if ( event.which == null ) {
				event.which = original.charCode != null ? original.charCode : original.keyCode;
			}

			return event;
		}
	},

	mouseHooks: {
		props: ( "button buttons clientX clientY fromElement offsetX offsetY " +
			"pageX pageY screenX screenY toElement" ).split( " " ),
		filter: function( event, original ) {
			var body, eventDoc, doc,
				button = original.button,
				fromElement = original.fromElement;

			// Calculate pageX/Y if missing and clientX/Y available
			if ( event.pageX == null && original.clientX != null ) {
				eventDoc = event.target.ownerDocument || document;
				doc = eventDoc.documentElement;
				body = eventDoc.body;

				event.pageX = original.clientX +
					( doc && doc.scrollLeft || body && body.scrollLeft || 0 ) -
					( doc && doc.clientLeft || body && body.clientLeft || 0 );
				event.pageY = original.clientY +
					( doc && doc.scrollTop  || body && body.scrollTop  || 0 ) -
					( doc && doc.clientTop  || body && body.clientTop  || 0 );
			}

			// Add relatedTarget, if necessary
			if ( !event.relatedTarget && fromElement ) {
				event.relatedTarget = fromElement === event.target ?
					original.toElement :
					fromElement;
			}

			// Add which for click: 1 === left; 2 === middle; 3 === right
			// Note: button is not normalized, so don't use it
			if ( !event.which && button !== undefined ) {
				event.which = ( button & 1 ? 1 : ( button & 2 ? 3 : ( button & 4 ? 2 : 0 ) ) );
			}

			return event;
		}
	},

	special: {
		load: {

			// Prevent triggered image.load events from bubbling to window.load
			noBubble: true
		},
		focus: {

			// Fire native event if possible so blur/focus sequence is correct
			trigger: function() {
				if ( this !== safeActiveElement() && this.focus ) {
					try {
						this.focus();
						return false;
					} catch ( e ) {

						// Support: IE<9
						// If we error on focus to hidden element (#1486, #12518),
						// let .trigger() run the handlers
					}
				}
			},
			delegateType: "focusin"
		},
		blur: {
			trigger: function() {
				if ( this === safeActiveElement() && this.blur ) {
					this.blur();
					return false;
				}
			},
			delegateType: "focusout"
		},
		click: {

			// For checkbox, fire native event so checked state will be right
			trigger: function() {
				if ( jQuery.nodeName( this, "input" ) && this.type === "checkbox" && this.click ) {
					this.click();
					return false;
				}
			},

			// For cross-browser consistency, don't fire native .click() on links
			_default: function( event ) {
				return jQuery.nodeName( event.target, "a" );
			}
		},

		beforeunload: {
			postDispatch: function( event ) {

				// Support: Firefox 20+
				// Firefox doesn't alert if the returnValue field is not set.
				if ( event.result !== undefined && event.originalEvent ) {
					event.originalEvent.returnValue = event.result;
				}
			}
		}
	},

	// Piggyback on a donor event to simulate a different one
	simulate: function( type, elem, event ) {
		var e = jQuery.extend(
			new jQuery.Event(),
			event,
			{
				type: type,
				isSimulated: true

				// Previously, `originalEvent: {}` was set here, so stopPropagation call
				// would not be triggered on donor event, since in our own
				// jQuery.event.stopPropagation function we had a check for existence of
				// originalEvent.stopPropagation method, so, consequently it would be a noop.
				//
				// Guard for simulated events was moved to jQuery.event.stopPropagation function
				// since `originalEvent` should point to the original event for the
				// constancy with other events and for more focused logic
			}
		);

		jQuery.event.trigger( e, null, elem );

		if ( e.isDefaultPrevented() ) {
			event.preventDefault();
		}
	}
};

jQuery.removeEvent = document.removeEventListener ?
	function( elem, type, handle ) {

		// This "if" is needed for plain objects
		if ( elem.removeEventListener ) {
			elem.removeEventListener( type, handle );
		}
	} :
	function( elem, type, handle ) {
		var name = "on" + type;

		if ( elem.detachEvent ) {

			// #8545, #7054, preventing memory leaks for custom events in IE6-8
			// detachEvent needed property on element, by name of that event,
			// to properly expose it to GC
			if ( typeof elem[ name ] === "undefined" ) {
				elem[ name ] = null;
			}

			elem.detachEvent( name, handle );
		}
	};

jQuery.Event = function( src, props ) {

	// Allow instantiation without the 'new' keyword
	if ( !( this instanceof jQuery.Event ) ) {
		return new jQuery.Event( src, props );
	}

	// Event object
	if ( src && src.type ) {
		this.originalEvent = src;
		this.type = src.type;

		// Events bubbling up the document may have been marked as prevented
		// by a handler lower down the tree; reflect the correct value.
		this.isDefaultPrevented = src.defaultPrevented ||
				src.defaultPrevented === undefined &&

				// Support: IE < 9, Android < 4.0
				src.returnValue === false ?
			returnTrue :
			returnFalse;

	// Event type
	} else {
		this.type = src;
	}

	// Put explicitly provided properties onto the event object
	if ( props ) {
		jQuery.extend( this, props );
	}

	// Create a timestamp if incoming event doesn't have one
	this.timeStamp = src && src.timeStamp || jQuery.now();

	// Mark it as fixed
	this[ jQuery.expando ] = true;
};

// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
// http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
jQuery.Event.prototype = {
	constructor: jQuery.Event,
	isDefaultPrevented: returnFalse,
	isPropagationStopped: returnFalse,
	isImmediatePropagationStopped: returnFalse,

	preventDefault: function() {
		var e = this.originalEvent;

		this.isDefaultPrevented = returnTrue;
		if ( !e ) {
			return;
		}

		// If preventDefault exists, run it on the original event
		if ( e.preventDefault ) {
			e.preventDefault();

		// Support: IE
		// Otherwise set the returnValue property of the original event to false
		} else {
			e.returnValue = false;
		}
	},
	stopPropagation: function() {
		var e = this.originalEvent;

		this.isPropagationStopped = returnTrue;

		if ( !e || this.isSimulated ) {
			return;
		}

		// If stopPropagation exists, run it on the original event
		if ( e.stopPropagation ) {
			e.stopPropagation();
		}

		// Support: IE
		// Set the cancelBubble property of the original event to true
		e.cancelBubble = true;
	},
	stopImmediatePropagation: function() {
		var e = this.originalEvent;

		this.isImmediatePropagationStopped = returnTrue;

		if ( e && e.stopImmediatePropagation ) {
			e.stopImmediatePropagation();
		}

		this.stopPropagation();
	}
};

// Create mouseenter/leave events using mouseover/out and event-time checks
// so that event delegation works in jQuery.
// Do the same for pointerenter/pointerleave and pointerover/pointerout
//
// Support: Safari 7 only
// Safari sends mouseenter too often; see:
// https://code.google.com/p/chromium/issues/detail?id=470258
// for the description of the bug (it existed in older Chrome versions as well).
jQuery.each( {
	mouseenter: "mouseover",
	mouseleave: "mouseout",
	pointerenter: "pointerover",
	pointerleave: "pointerout"
}, function( orig, fix ) {
	jQuery.event.special[ orig ] = {
		delegateType: fix,
		bindType: fix,

		handle: function( event ) {
			var ret,
				target = this,
				related = event.relatedTarget,
				handleObj = event.handleObj;

			// For mouseenter/leave call the handler if related is outside the target.
			// NB: No relatedTarget if the mouse left/entered the browser window
			if ( !related || ( related !== target && !jQuery.contains( target, related ) ) ) {
				event.type = handleObj.origType;
				ret = handleObj.handler.apply( this, arguments );
				event.type = fix;
			}
			return ret;
		}
	};
} );

// IE submit delegation
if ( !support.submit ) {

	jQuery.event.special.submit = {
		setup: function() {

			// Only need this for delegated form submit events
			if ( jQuery.nodeName( this, "form" ) ) {
				return false;
			}

			// Lazy-add a submit handler when a descendant form may potentially be submitted
			jQuery.event.add( this, "click._submit keypress._submit", function( e ) {

				// Node name check avoids a VML-related crash in IE (#9807)
				var elem = e.target,
					form = jQuery.nodeName( elem, "input" ) || jQuery.nodeName( elem, "button" ) ?

						// Support: IE <=8
						// We use jQuery.prop instead of elem.form
						// to allow fixing the IE8 delegated submit issue (gh-2332)
						// by 3rd party polyfills/workarounds.
						jQuery.prop( elem, "form" ) :
						undefined;

				if ( form && !jQuery._data( form, "submit" ) ) {
					jQuery.event.add( form, "submit._submit", function( event ) {
						event._submitBubble = true;
					} );
					jQuery._data( form, "submit", true );
				}
			} );

			// return undefined since we don't need an event listener
		},

		postDispatch: function( event ) {

			// If form was submitted by the user, bubble the event up the tree
			if ( event._submitBubble ) {
				delete event._submitBubble;
				if ( this.parentNode && !event.isTrigger ) {
					jQuery.event.simulate( "submit", this.parentNode, event );
				}
			}
		},

		teardown: function() {

			// Only need this for delegated form submit events
			if ( jQuery.nodeName( this, "form" ) ) {
				return false;
			}

			// Remove delegated handlers; cleanData eventually reaps submit handlers attached above
			jQuery.event.remove( this, "._submit" );
		}
	};
}

// IE change delegation and checkbox/radio fix
if ( !support.change ) {

	jQuery.event.special.change = {

		setup: function() {

			if ( rformElems.test( this.nodeName ) ) {

				// IE doesn't fire change on a check/radio until blur; trigger it on click
				// after a propertychange. Eat the blur-change in special.change.handle.
				// This still fires onchange a second time for check/radio after blur.
				if ( this.type === "checkbox" || this.type === "radio" ) {
					jQuery.event.add( this, "propertychange._change", function( event ) {
						if ( event.originalEvent.propertyName === "checked" ) {
							this._justChanged = true;
						}
					} );
					jQuery.event.add( this, "click._change", function( event ) {
						if ( this._justChanged && !event.isTrigger ) {
							this._justChanged = false;
						}

						// Allow triggered, simulated change events (#11500)
						jQuery.event.simulate( "change", this, event );
					} );
				}
				return false;
			}

			// Delegated event; lazy-add a change handler on descendant inputs
			jQuery.event.add( this, "beforeactivate._change", function( e ) {
				var elem = e.target;

				if ( rformElems.test( elem.nodeName ) && !jQuery._data( elem, "change" ) ) {
					jQuery.event.add( elem, "change._change", function( event ) {
						if ( this.parentNode && !event.isSimulated && !event.isTrigger ) {
							jQuery.event.simulate( "change", this.parentNode, event );
						}
					} );
					jQuery._data( elem, "change", true );
				}
			} );
		},

		handle: function( event ) {
			var elem = event.target;

			// Swallow native change events from checkbox/radio, we already triggered them above
			if ( this !== elem || event.isSimulated || event.isTrigger ||
				( elem.type !== "radio" && elem.type !== "checkbox" ) ) {

				return event.handleObj.handler.apply( this, arguments );
			}
		},

		teardown: function() {
			jQuery.event.remove( this, "._change" );

			return !rformElems.test( this.nodeName );
		}
	};
}

// Support: Firefox
// Firefox doesn't have focus(in | out) events
// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787
//
// Support: Chrome, Safari
// focus(in | out) events fire after focus & blur events,
// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order
// Related ticket - https://code.google.com/p/chromium/issues/detail?id=449857
if ( !support.focusin ) {
	jQuery.each( { focus: "focusin", blur: "focusout" }, function( orig, fix ) {

		// Attach a single capturing handler on the document while someone wants focusin/focusout
		var handler = function( event ) {
			jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ) );
		};

		jQuery.event.special[ fix ] = {
			setup: function() {
				var doc = this.ownerDocument || this,
					attaches = jQuery._data( doc, fix );

				if ( !attaches ) {
					doc.addEventListener( orig, handler, true );
				}
				jQuery._data( doc, fix, ( attaches || 0 ) + 1 );
			},
			teardown: function() {
				var doc = this.ownerDocument || this,
					attaches = jQuery._data( doc, fix ) - 1;

				if ( !attaches ) {
					doc.removeEventListener( orig, handler, true );
					jQuery._removeData( doc, fix );
				} else {
					jQuery._data( doc, fix, attaches );
				}
			}
		};
	} );
}

jQuery.fn.extend( {

	on: function( types, selector, data, fn ) {
		return on( this, types, selector, data, fn );
	},
	one: function( types, selector, data, fn ) {
		return on( this, types, selector, data, fn, 1 );
	},
	off: function( types, selector, fn ) {
		var handleObj, type;
		if ( types && types.preventDefault && types.handleObj ) {

			// ( event )  dispatched jQuery.Event
			handleObj = types.handleObj;
			jQuery( types.delegateTarget ).off(
				handleObj.namespace ?
					handleObj.origType + "." + handleObj.namespace :
					handleObj.origType,
				handleObj.selector,
				handleObj.handler
			);
			return this;
		}
		if ( typeof types === "object" ) {

			// ( types-object [, selector] )
			for ( type in types ) {
				this.off( type, selector, types[ type ] );
			}
			return this;
		}
		if ( selector === false || typeof selector === "function" ) {

			// ( types [, fn] )
			fn = selector;
			selector = undefined;
		}
		if ( fn === false ) {
			fn = returnFalse;
		}
		return this.each( function() {
			jQuery.event.remove( this, types, fn, selector );
		} );
	},

	trigger: function( type, data ) {
		return this.each( function() {
			jQuery.event.trigger( type, data, this );
		} );
	},
	triggerHandler: function( type, data ) {
		var elem = this[ 0 ];
		if ( elem ) {
			return jQuery.event.trigger( type, data, elem, true );
		}
	}
} );


var rinlinejQuery = / jQuery\d+="(?:null|\d+)"/g,
	rnoshimcache = new RegExp( "<(?:" + nodeNames + ")[\\s/>]", "i" ),
	rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:-]+)[^>]*)\/>/gi,

	// Support: IE 10-11, Edge 10240+
	// In IE/Edge using regex groups here causes severe slowdowns.
	// See https://connect.microsoft.com/IE/feedback/details/1736512/
	rnoInnerhtml = /<script|<style|<link/i,

	// checked="checked" or checked
	rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
	rscriptTypeMasked = /^true\/(.*)/,
	rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,
	safeFragment = createSafeFragment( document ),
	fragmentDiv = safeFragment.appendChild( document.createElement( "div" ) );

// Support: IE<8
// Manipulating tables requires a tbody
function manipulationTarget( elem, content ) {
	return jQuery.nodeName( elem, "table" ) &&
		jQuery.nodeName( content.nodeType !== 11 ? content : content.firstChild, "tr" ) ?

		elem.getElementsByTagName( "tbody" )[ 0 ] ||
			elem.appendChild( elem.ownerDocument.createElement( "tbody" ) ) :
		elem;
}

// Replace/restore the type attribute of script elements for safe DOM manipulation
function disableScript( elem ) {
	elem.type = ( jQuery.find.attr( elem, "type" ) !== null ) + "/" + elem.type;
	return elem;
}
function restoreScript( elem ) {
	var match = rscriptTypeMasked.exec( elem.type );
	if ( match ) {
		elem.type = match[ 1 ];
	} else {
		elem.removeAttribute( "type" );
	}
	return elem;
}

function cloneCopyEvent( src, dest ) {
	if ( dest.nodeType !== 1 || !jQuery.hasData( src ) ) {
		return;
	}

	var type, i, l,
		oldData = jQuery._data( src ),
		curData = jQuery._data( dest, oldData ),
		events = oldData.events;

	if ( events ) {
		delete curData.handle;
		curData.events = {};

		for ( type in events ) {
			for ( i = 0, l = events[ type ].length; i < l; i++ ) {
				jQuery.event.add( dest, type, events[ type ][ i ] );
			}
		}
	}

	// make the cloned public data object a copy from the original
	if ( curData.data ) {
		curData.data = jQuery.extend( {}, curData.data );
	}
}

function fixCloneNodeIssues( src, dest ) {
	var nodeName, e, data;

	// We do not need to do anything for non-Elements
	if ( dest.nodeType !== 1 ) {
		return;
	}

	nodeName = dest.nodeName.toLowerCase();

	// IE6-8 copies events bound via attachEvent when using cloneNode.
	if ( !support.noCloneEvent && dest[ jQuery.expando ] ) {
		data = jQuery._data( dest );

		for ( e in data.events ) {
			jQuery.removeEvent( dest, e, data.handle );
		}

		// Event data gets referenced instead of copied if the expando gets copied too
		dest.removeAttribute( jQuery.expando );
	}

	// IE blanks contents when cloning scripts, and tries to evaluate newly-set text
	if ( nodeName === "script" && dest.text !== src.text ) {
		disableScript( dest ).text = src.text;
		restoreScript( dest );

	// IE6-10 improperly clones children of object elements using classid.
	// IE10 throws NoModificationAllowedError if parent is null, #12132.
	} else if ( nodeName === "object" ) {
		if ( dest.parentNode ) {
			dest.outerHTML = src.outerHTML;
		}

		// This path appears unavoidable for IE9. When cloning an object
		// element in IE9, the outerHTML strategy above is not sufficient.
		// If the src has innerHTML and the destination does not,
		// copy the src.innerHTML into the dest.innerHTML. #10324
		if ( support.html5Clone && ( src.innerHTML && !jQuery.trim( dest.innerHTML ) ) ) {
			dest.innerHTML = src.innerHTML;
		}

	} else if ( nodeName === "input" && rcheckableType.test( src.type ) ) {

		// IE6-8 fails to persist the checked state of a cloned checkbox
		// or radio button. Worse, IE6-7 fail to give the cloned element
		// a checked appearance if the defaultChecked value isn't also set

		dest.defaultChecked = dest.checked = src.checked;

		// IE6-7 get confused and end up setting the value of a cloned
		// checkbox/radio button to an empty string instead of "on"
		if ( dest.value !== src.value ) {
			dest.value = src.value;
		}

	// IE6-8 fails to return the selected option to the default selected
	// state when cloning options
	} else if ( nodeName === "option" ) {
		dest.defaultSelected = dest.selected = src.defaultSelected;

	// IE6-8 fails to set the defaultValue to the correct value when
	// cloning other types of input fields
	} else if ( nodeName === "input" || nodeName === "textarea" ) {
		dest.defaultValue = src.defaultValue;
	}
}

function domManip( collection, args, callback, ignored ) {

	// Flatten any nested arrays
	args = concat.apply( [], args );

	var first, node, hasScripts,
		scripts, doc, fragment,
		i = 0,
		l = collection.length,
		iNoClone = l - 1,
		value = args[ 0 ],
		isFunction = jQuery.isFunction( value );

	// We can't cloneNode fragments that contain checked, in WebKit
	if ( isFunction ||
			( l > 1 && typeof value === "string" &&
				!support.checkClone && rchecked.test( value ) ) ) {
		return collection.each( function( index ) {
			var self = collection.eq( index );
			if ( isFunction ) {
				args[ 0 ] = value.call( this, index, self.html() );
			}
			domManip( self, args, callback, ignored );
		} );
	}

	if ( l ) {
		fragment = buildFragment( args, collection[ 0 ].ownerDocument, false, collection, ignored );
		first = fragment.firstChild;

		if ( fragment.childNodes.length === 1 ) {
			fragment = first;
		}

		// Require either new content or an interest in ignored elements to invoke the callback
		if ( first || ignored ) {
			scripts = jQuery.map( getAll( fragment, "script" ), disableScript );
			hasScripts = scripts.length;

			// Use the original fragment for the last item
			// instead of the first because it can end up
			// being emptied incorrectly in certain situations (#8070).
			for ( ; i < l; i++ ) {
				node = fragment;

				if ( i !== iNoClone ) {
					node = jQuery.clone( node, true, true );

					// Keep references to cloned scripts for later restoration
					if ( hasScripts ) {

						// Support: Android<4.1, PhantomJS<2
						// push.apply(_, arraylike) throws on ancient WebKit
						jQuery.merge( scripts, getAll( node, "script" ) );
					}
				}

				callback.call( collection[ i ], node, i );
			}

			if ( hasScripts ) {
				doc = scripts[ scripts.length - 1 ].ownerDocument;

				// Reenable scripts
				jQuery.map( scripts, restoreScript );

				// Evaluate executable scripts on first document insertion
				for ( i = 0; i < hasScripts; i++ ) {
					node = scripts[ i ];
					if ( rscriptType.test( node.type || "" ) &&
						!jQuery._data( node, "globalEval" ) &&
						jQuery.contains( doc, node ) ) {

						if ( node.src ) {

							// Optional AJAX dependency, but won't run scripts if not present
							if ( jQuery._evalUrl ) {
								jQuery._evalUrl( node.src );
							}
						} else {
							jQuery.globalEval(
								( node.text || node.textContent || node.innerHTML || "" )
									.replace( rcleanScript, "" )
							);
						}
					}
				}
			}

			// Fix #11809: Avoid leaking memory
			fragment = first = null;
		}
	}

	return collection;
}

function remove( elem, selector, keepData ) {
	var node,
		elems = selector ? jQuery.filter( selector, elem ) : elem,
		i = 0;

	for ( ; ( node = elems[ i ] ) != null; i++ ) {

		if ( !keepData && node.nodeType === 1 ) {
			jQuery.cleanData( getAll( node ) );
		}

		if ( node.parentNode ) {
			if ( keepData && jQuery.contains( node.ownerDocument, node ) ) {
				setGlobalEval( getAll( node, "script" ) );
			}
			node.parentNode.removeChild( node );
		}
	}

	return elem;
}

jQuery.extend( {
	htmlPrefilter: function( html ) {
		return html.replace( rxhtmlTag, "<$1></$2>" );
	},

	clone: function( elem, dataAndEvents, deepDataAndEvents ) {
		var destElements, node, clone, i, srcElements,
			inPage = jQuery.contains( elem.ownerDocument, elem );

		if ( support.html5Clone || jQuery.isXMLDoc( elem ) ||
			!rnoshimcache.test( "<" + elem.nodeName + ">" ) ) {

			clone = elem.cloneNode( true );

		// IE<=8 does not properly clone detached, unknown element nodes
		} else {
			fragmentDiv.innerHTML = elem.outerHTML;
			fragmentDiv.removeChild( clone = fragmentDiv.firstChild );
		}

		if ( ( !support.noCloneEvent || !support.noCloneChecked ) &&
				( elem.nodeType === 1 || elem.nodeType === 11 ) && !jQuery.isXMLDoc( elem ) ) {

			// We eschew Sizzle here for performance reasons: http://jsperf.com/getall-vs-sizzle/2
			destElements = getAll( clone );
			srcElements = getAll( elem );

			// Fix all IE cloning issues
			for ( i = 0; ( node = srcElements[ i ] ) != null; ++i ) {

				// Ensure that the destination node is not null; Fixes #9587
				if ( destElements[ i ] ) {
					fixCloneNodeIssues( node, destElements[ i ] );
				}
			}
		}

		// Copy the events from the original to the clone
		if ( dataAndEvents ) {
			if ( deepDataAndEvents ) {
				srcElements = srcElements || getAll( elem );
				destElements = destElements || getAll( clone );

				for ( i = 0; ( node = srcElements[ i ] ) != null; i++ ) {
					cloneCopyEvent( node, destElements[ i ] );
				}
			} else {
				cloneCopyEvent( elem, clone );
			}
		}

		// Preserve script evaluation history
		destElements = getAll( clone, "script" );
		if ( destElements.length > 0 ) {
			setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );
		}

		destElements = srcElements = node = null;

		// Return the cloned set
		return clone;
	},

	cleanData: function( elems, /* internal */ forceAcceptData ) {
		var elem, type, id, data,
			i = 0,
			internalKey = jQuery.expando,
			cache = jQuery.cache,
			attributes = support.attributes,
			special = jQuery.event.special;

		for ( ; ( elem = elems[ i ] ) != null; i++ ) {
			if ( forceAcceptData || acceptData( elem ) ) {

				id = elem[ internalKey ];
				data = id && cache[ id ];

				if ( data ) {
					if ( data.events ) {
						for ( type in data.events ) {
							if ( special[ type ] ) {
								jQuery.event.remove( elem, type );

							// This is a shortcut to avoid jQuery.event.remove's overhead
							} else {
								jQuery.removeEvent( elem, type, data.handle );
							}
						}
					}

					// Remove cache only if it was not already removed by jQuery.event.remove
					if ( cache[ id ] ) {

						delete cache[ id ];

						// Support: IE<9
						// IE does not allow us to delete expando properties from nodes
						// IE creates expando attributes along with the property
						// IE does not have a removeAttribute function on Document nodes
						if ( !attributes && typeof elem.removeAttribute !== "undefined" ) {
							elem.removeAttribute( internalKey );

						// Webkit & Blink performance suffers when deleting properties
						// from DOM nodes, so set to undefined instead
						// https://code.google.com/p/chromium/issues/detail?id=378607
						} else {
							elem[ internalKey ] = undefined;
						}

						deletedIds.push( id );
					}
				}
			}
		}
	}
} );

jQuery.fn.extend( {

	// Keep domManip exposed until 3.0 (gh-2225)
	domManip: domManip,

	detach: function( selector ) {
		return remove( this, selector, true );
	},

	remove: function( selector ) {
		return remove( this, selector );
	},

	text: function( value ) {
		return access( this, function( value ) {
			return value === undefined ?
				jQuery.text( this ) :
				this.empty().append(
					( this[ 0 ] && this[ 0 ].ownerDocument || document ).createTextNode( value )
				);
		}, null, value, arguments.length );
	},

	append: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.appendChild( elem );
			}
		} );
	},

	prepend: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.insertBefore( elem, target.firstChild );
			}
		} );
	},

	before: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this );
			}
		} );
	},

	after: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this.nextSibling );
			}
		} );
	},

	empty: function() {
		var elem,
			i = 0;

		for ( ; ( elem = this[ i ] ) != null; i++ ) {

			// Remove element nodes and prevent memory leaks
			if ( elem.nodeType === 1 ) {
				jQuery.cleanData( getAll( elem, false ) );
			}

			// Remove any remaining nodes
			while ( elem.firstChild ) {
				elem.removeChild( elem.firstChild );
			}

			// If this is a select, ensure that it displays empty (#12336)
			// Support: IE<9
			if ( elem.options && jQuery.nodeName( elem, "select" ) ) {
				elem.options.length = 0;
			}
		}

		return this;
	},

	clone: function( dataAndEvents, deepDataAndEvents ) {
		dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
		deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

		return this.map( function() {
			return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
		} );
	},

	html: function( value ) {
		return access( this, function( value ) {
			var elem = this[ 0 ] || {},
				i = 0,
				l = this.length;

			if ( value === undefined ) {
				return elem.nodeType === 1 ?
					elem.innerHTML.replace( rinlinejQuery, "" ) :
					undefined;
			}

			// See if we can take a shortcut and just use innerHTML
			if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
				( support.htmlSerialize || !rnoshimcache.test( value )  ) &&
				( support.leadingWhitespace || !rleadingWhitespace.test( value ) ) &&
				!wrapMap[ ( rtagName.exec( value ) || [ "", "" ] )[ 1 ].toLowerCase() ] ) {

				value = jQuery.htmlPrefilter( value );

				try {
					for ( ; i < l; i++ ) {

						// Remove element nodes and prevent memory leaks
						elem = this[ i ] || {};
						if ( elem.nodeType === 1 ) {
							jQuery.cleanData( getAll( elem, false ) );
							elem.innerHTML = value;
						}
					}

					elem = 0;

				// If using innerHTML throws an exception, use the fallback method
				} catch ( e ) {}
			}

			if ( elem ) {
				this.empty().append( value );
			}
		}, null, value, arguments.length );
	},

	replaceWith: function() {
		var ignored = [];

		// Make the changes, replacing each non-ignored context element with the new content
		return domManip( this, arguments, function( elem ) {
			var parent = this.parentNode;

			if ( jQuery.inArray( this, ignored ) < 0 ) {
				jQuery.cleanData( getAll( this ) );
				if ( parent ) {
					parent.replaceChild( elem, this );
				}
			}

		// Force callback invocation
		}, ignored );
	}
} );

jQuery.each( {
	appendTo: "append",
	prependTo: "prepend",
	insertBefore: "before",
	insertAfter: "after",
	replaceAll: "replaceWith"
}, function( name, original ) {
	jQuery.fn[ name ] = function( selector ) {
		var elems,
			i = 0,
			ret = [],
			insert = jQuery( selector ),
			last = insert.length - 1;

		for ( ; i <= last; i++ ) {
			elems = i === last ? this : this.clone( true );
			jQuery( insert[ i ] )[ original ]( elems );

			// Modern browsers can apply jQuery collections as arrays, but oldIE needs a .get()
			push.apply( ret, elems.get() );
		}

		return this.pushStack( ret );
	};
} );


var iframe,
	elemdisplay = {

		// Support: Firefox
		// We have to pre-define these values for FF (#10227)
		HTML: "block",
		BODY: "block"
	};

/**
 * Retrieve the actual display of a element
 * @param {String} name nodeName of the element
 * @param {Object} doc Document object
 */

// Called only from within defaultDisplay
function actualDisplay( name, doc ) {
	var elem = jQuery( doc.createElement( name ) ).appendTo( doc.body ),

		display = jQuery.css( elem[ 0 ], "display" );

	// We don't have any data stored on the element,
	// so use "detach" method as fast way to get rid of the element
	elem.detach();

	return display;
}

/**
 * Try to determine the default display value of an element
 * @param {String} nodeName
 */
function defaultDisplay( nodeName ) {
	var doc = document,
		display = elemdisplay[ nodeName ];

	if ( !display ) {
		display = actualDisplay( nodeName, doc );

		// If the simple way fails, read from inside an iframe
		if ( display === "none" || !display ) {

			// Use the already-created iframe if possible
			iframe = ( iframe || jQuery( "<iframe frameborder='0' width='0' height='0'/>" ) )
				.appendTo( doc.documentElement );

			// Always write a new HTML skeleton so Webkit and Firefox don't choke on reuse
			doc = ( iframe[ 0 ].contentWindow || iframe[ 0 ].contentDocument ).document;

			// Support: IE
			doc.write();
			doc.close();

			display = actualDisplay( nodeName, doc );
			iframe.detach();
		}

		// Store the correct default display
		elemdisplay[ nodeName ] = display;
	}

	return display;
}
var rmargin = ( /^margin/ );

var rnumnonpx = new RegExp( "^(" + pnum + ")(?!px)[a-z%]+$", "i" );

var swap = function( elem, options, callback, args ) {
	var ret, name,
		old = {};

	// Remember the old values, and insert the new ones
	for ( name in options ) {
		old[ name ] = elem.style[ name ];
		elem.style[ name ] = options[ name ];
	}

	ret = callback.apply( elem, args || [] );

	// Revert the old values
	for ( name in options ) {
		elem.style[ name ] = old[ name ];
	}

	return ret;
};


var documentElement = document.documentElement;



( function() {
	var pixelPositionVal, pixelMarginRightVal, boxSizingReliableVal,
		reliableHiddenOffsetsVal, reliableMarginRightVal, reliableMarginLeftVal,
		container = document.createElement( "div" ),
		div = document.createElement( "div" );

	// Finish early in limited (non-browser) environments
	if ( !div.style ) {
		return;
	}

	div.style.cssText = "float:left;opacity:.5";

	// Support: IE<9
	// Make sure that element opacity exists (as opposed to filter)
	support.opacity = div.style.opacity === "0.5";

	// Verify style float existence
	// (IE uses styleFloat instead of cssFloat)
	support.cssFloat = !!div.style.cssFloat;

	div.style.backgroundClip = "content-box";
	div.cloneNode( true ).style.backgroundClip = "";
	support.clearCloneStyle = div.style.backgroundClip === "content-box";

	container = document.createElement( "div" );
	container.style.cssText = "border:0;width:8px;height:0;top:0;left:-9999px;" +
		"padding:0;margin-top:1px;position:absolute";
	div.innerHTML = "";
	container.appendChild( div );

	// Support: Firefox<29, Android 2.3
	// Vendor-prefix box-sizing
	support.boxSizing = div.style.boxSizing === "" || div.style.MozBoxSizing === "" ||
		div.style.WebkitBoxSizing === "";

	jQuery.extend( support, {
		reliableHiddenOffsets: function() {
			if ( pixelPositionVal == null ) {
				computeStyleTests();
			}
			return reliableHiddenOffsetsVal;
		},

		boxSizingReliable: function() {

			// We're checking for pixelPositionVal here instead of boxSizingReliableVal
			// since that compresses better and they're computed together anyway.
			if ( pixelPositionVal == null ) {
				computeStyleTests();
			}
			return boxSizingReliableVal;
		},

		pixelMarginRight: function() {

			// Support: Android 4.0-4.3
			if ( pixelPositionVal == null ) {
				computeStyleTests();
			}
			return pixelMarginRightVal;
		},

		pixelPosition: function() {
			if ( pixelPositionVal == null ) {
				computeStyleTests();
			}
			return pixelPositionVal;
		},

		reliableMarginRight: function() {

			// Support: Android 2.3
			if ( pixelPositionVal == null ) {
				computeStyleTests();
			}
			return reliableMarginRightVal;
		},

		reliableMarginLeft: function() {

			// Support: IE <=8 only, Android 4.0 - 4.3 only, Firefox <=3 - 37
			if ( pixelPositionVal == null ) {
				computeStyleTests();
			}
			return reliableMarginLeftVal;
		}
	} );

	function computeStyleTests() {
		var contents, divStyle,
			documentElement = document.documentElement;

		// Setup
		documentElement.appendChild( container );

		div.style.cssText =

			// Support: Android 2.3
			// Vendor-prefix box-sizing
			"-webkit-box-sizing:border-box;box-sizing:border-box;" +
			"position:relative;display:block;" +
			"margin:auto;border:1px;padding:1px;" +
			"top:1%;width:50%";

		// Support: IE<9
		// Assume reasonable values in the absence of getComputedStyle
		pixelPositionVal = boxSizingReliableVal = reliableMarginLeftVal = false;
		pixelMarginRightVal = reliableMarginRightVal = true;

		// Check for getComputedStyle so that this code is not run in IE<9.
		if ( window.getComputedStyle ) {
			divStyle = window.getComputedStyle( div );
			pixelPositionVal = ( divStyle || {} ).top !== "1%";
			reliableMarginLeftVal = ( divStyle || {} ).marginLeft === "2px";
			boxSizingReliableVal = ( divStyle || { width: "4px" } ).width === "4px";

			// Support: Android 4.0 - 4.3 only
			// Some styles come back with percentage values, even though they shouldn't
			div.style.marginRight = "50%";
			pixelMarginRightVal = ( divStyle || { marginRight: "4px" } ).marginRight === "4px";

			// Support: Android 2.3 only
			// Div with explicit width and no margin-right incorrectly
			// gets computed margin-right based on width of container (#3333)
			// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
			contents = div.appendChild( document.createElement( "div" ) );

			// Reset CSS: box-sizing; display; margin; border; padding
			contents.style.cssText = div.style.cssText =

				// Support: Android 2.3
				// Vendor-prefix box-sizing
				"-webkit-box-sizing:content-box;-moz-box-sizing:content-box;" +
				"box-sizing:content-box;display:block;margin:0;border:0;padding:0";
			contents.style.marginRight = contents.style.width = "0";
			div.style.width = "1px";

			reliableMarginRightVal =
				!parseFloat( ( window.getComputedStyle( contents ) || {} ).marginRight );

			div.removeChild( contents );
		}

		// Support: IE6-8
		// First check that getClientRects works as expected
		// Check if table cells still have offsetWidth/Height when they are set
		// to display:none and there are still other visible table cells in a
		// table row; if so, offsetWidth/Height are not reliable for use when
		// determining if an element has been hidden directly using
		// display:none (it is still safe to use offsets if a parent element is
		// hidden; don safety goggles and see bug #4512 for more information).
		div.style.display = "none";
		reliableHiddenOffsetsVal = div.getClientRects().length === 0;
		if ( reliableHiddenOffsetsVal ) {
			div.style.display = "";
			div.innerHTML = "<table><tr><td></td><td>t</td></tr></table>";
			div.childNodes[ 0 ].style.borderCollapse = "separate";
			contents = div.getElementsByTagName( "td" );
			contents[ 0 ].style.cssText = "margin:0;border:0;padding:0;display:none";
			reliableHiddenOffsetsVal = contents[ 0 ].offsetHeight === 0;
			if ( reliableHiddenOffsetsVal ) {
				contents[ 0 ].style.display = "";
				contents[ 1 ].style.display = "none";
				reliableHiddenOffsetsVal = contents[ 0 ].offsetHeight === 0;
			}
		}

		// Teardown
		documentElement.removeChild( container );
	}

} )();


var getStyles, curCSS,
	rposition = /^(top|right|bottom|left)$/;

if ( window.getComputedStyle ) {
	getStyles = function( elem ) {

		// Support: IE<=11+, Firefox<=30+ (#15098, #14150)
		// IE throws on elements created in popups
		// FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
		var view = elem.ownerDocument.defaultView;

		if ( !view || !view.opener ) {
			view = window;
		}

		return view.getComputedStyle( elem );
	};

	curCSS = function( elem, name, computed ) {
		var width, minWidth, maxWidth, ret,
			style = elem.style;

		computed = computed || getStyles( elem );

		// getPropertyValue is only needed for .css('filter') in IE9, see #12537
		ret = computed ? computed.getPropertyValue( name ) || computed[ name ] : undefined;

		// Support: Opera 12.1x only
		// Fall back to style even without computed
		// computed is undefined for elems on document fragments
		if ( ( ret === "" || ret === undefined ) && !jQuery.contains( elem.ownerDocument, elem ) ) {
			ret = jQuery.style( elem, name );
		}

		if ( computed ) {

			// A tribute to the "awesome hack by Dean Edwards"
			// Chrome < 17 and Safari 5.0 uses "computed value"
			// instead of "used value" for margin-right
			// Safari 5.1.7 (at least) returns percentage for a larger set of values,
			// but width seems to be reliably pixels
			// this is against the CSSOM draft spec:
			// http://dev.w3.org/csswg/cssom/#resolved-values
			if ( !support.pixelMarginRight() && rnumnonpx.test( ret ) && rmargin.test( name ) ) {

				// Remember the original values
				width = style.width;
				minWidth = style.minWidth;
				maxWidth = style.maxWidth;

				// Put in the new values to get a computed value out
				style.minWidth = style.maxWidth = style.width = ret;
				ret = computed.width;

				// Revert the changed values
				style.width = width;
				style.minWidth = minWidth;
				style.maxWidth = maxWidth;
			}
		}

		// Support: IE
		// IE returns zIndex value as an integer.
		return ret === undefined ?
			ret :
			ret + "";
	};
} else if ( documentElement.currentStyle ) {
	getStyles = function( elem ) {
		return elem.currentStyle;
	};

	curCSS = function( elem, name, computed ) {
		var left, rs, rsLeft, ret,
			style = elem.style;

		computed = computed || getStyles( elem );
		ret = computed ? computed[ name ] : undefined;

		// Avoid setting ret to empty string here
		// so we don't default to auto
		if ( ret == null && style && style[ name ] ) {
			ret = style[ name ];
		}

		// From the awesome hack by Dean Edwards
		// http://erik.eae.net/archives/2007/07/27/18.54.15/#comment-102291

		// If we're not dealing with a regular pixel number
		// but a number that has a weird ending, we need to convert it to pixels
		// but not position css attributes, as those are
		// proportional to the parent element instead
		// and we can't measure the parent instead because it
		// might trigger a "stacking dolls" problem
		if ( rnumnonpx.test( ret ) && !rposition.test( name ) ) {

			// Remember the original values
			left = style.left;
			rs = elem.runtimeStyle;
			rsLeft = rs && rs.left;

			// Put in the new values to get a computed value out
			if ( rsLeft ) {
				rs.left = elem.currentStyle.left;
			}
			style.left = name === "fontSize" ? "1em" : ret;
			ret = style.pixelLeft + "px";

			// Revert the changed values
			style.left = left;
			if ( rsLeft ) {
				rs.left = rsLeft;
			}
		}

		// Support: IE
		// IE returns zIndex value as an integer.
		return ret === undefined ?
			ret :
			ret + "" || "auto";
	};
}




function addGetHookIf( conditionFn, hookFn ) {

	// Define the hook, we'll check on the first run if it's really needed.
	return {
		get: function() {
			if ( conditionFn() ) {

				// Hook not needed (or it's not possible to use it due
				// to missing dependency), remove it.
				delete this.get;
				return;
			}

			// Hook needed; redefine it so that the support test is not executed again.
			return ( this.get = hookFn ).apply( this, arguments );
		}
	};
}


var

		ralpha = /alpha\([^)]*\)/i,
	ropacity = /opacity\s*=\s*([^)]*)/i,

	// swappable if display is none or starts with table except
	// "table", "table-cell", or "table-caption"
	// see here for display values:
	// https://developer.mozilla.org/en-US/docs/CSS/display
	rdisplayswap = /^(none|table(?!-c[ea]).+)/,
	rnumsplit = new RegExp( "^(" + pnum + ")(.*)$", "i" ),

	cssShow = { position: "absolute", visibility: "hidden", display: "block" },
	cssNormalTransform = {
		letterSpacing: "0",
		fontWeight: "400"
	},

	cssPrefixes = [ "Webkit", "O", "Moz", "ms" ],
	emptyStyle = document.createElement( "div" ).style;


// return a css property mapped to a potentially vendor prefixed property
function vendorPropName( name ) {

	// shortcut for names that are not vendor prefixed
	if ( name in emptyStyle ) {
		return name;
	}

	// check for vendor prefixed names
	var capName = name.charAt( 0 ).toUpperCase() + name.slice( 1 ),
		i = cssPrefixes.length;

	while ( i-- ) {
		name = cssPrefixes[ i ] + capName;
		if ( name in emptyStyle ) {
			return name;
		}
	}
}

function showHide( elements, show ) {
	var display, elem, hidden,
		values = [],
		index = 0,
		length = elements.length;

	for ( ; index < length; index++ ) {
		elem = elements[ index ];
		if ( !elem.style ) {
			continue;
		}

		values[ index ] = jQuery._data( elem, "olddisplay" );
		display = elem.style.display;
		if ( show ) {

			// Reset the inline display of this element to learn if it is
			// being hidden by cascaded rules or not
			if ( !values[ index ] && display === "none" ) {
				elem.style.display = "";
			}

			// Set elements which have been overridden with display: none
			// in a stylesheet to whatever the default browser style is
			// for such an element
			if ( elem.style.display === "" && isHidden( elem ) ) {
				values[ index ] =
					jQuery._data( elem, "olddisplay", defaultDisplay( elem.nodeName ) );
			}
		} else {
			hidden = isHidden( elem );

			if ( display && display !== "none" || !hidden ) {
				jQuery._data(
					elem,
					"olddisplay",
					hidden ? display : jQuery.css( elem, "display" )
				);
			}
		}
	}

	// Set the display of most of the elements in a second loop
	// to avoid the constant reflow
	for ( index = 0; index < length; index++ ) {
		elem = elements[ index ];
		if ( !elem.style ) {
			continue;
		}
		if ( !show || elem.style.display === "none" || elem.style.display === "" ) {
			elem.style.display = show ? values[ index ] || "" : "none";
		}
	}

	return elements;
}

function setPositiveNumber( elem, value, subtract ) {
	var matches = rnumsplit.exec( value );
	return matches ?

		// Guard against undefined "subtract", e.g., when used as in cssHooks
		Math.max( 0, matches[ 1 ] - ( subtract || 0 ) ) + ( matches[ 2 ] || "px" ) :
		value;
}

function augmentWidthOrHeight( elem, name, extra, isBorderBox, styles ) {
	var i = extra === ( isBorderBox ? "border" : "content" ) ?

		// If we already have the right measurement, avoid augmentation
		4 :

		// Otherwise initialize for horizontal or vertical properties
		name === "width" ? 1 : 0,

		val = 0;

	for ( ; i < 4; i += 2 ) {

		// both box models exclude margin, so add it if we want it
		if ( extra === "margin" ) {
			val += jQuery.css( elem, extra + cssExpand[ i ], true, styles );
		}

		if ( isBorderBox ) {

			// border-box includes padding, so remove it if we want content
			if ( extra === "content" ) {
				val -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
			}

			// at this point, extra isn't border nor margin, so remove border
			if ( extra !== "margin" ) {
				val -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		} else {

			// at this point, extra isn't content, so add padding
			val += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );

			// at this point, extra isn't content nor padding, so add border
			if ( extra !== "padding" ) {
				val += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		}
	}

	return val;
}

function getWidthOrHeight( elem, name, extra ) {

	// Start with offset property, which is equivalent to the border-box value
	var valueIsBorderBox = true,
		val = name === "width" ? elem.offsetWidth : elem.offsetHeight,
		styles = getStyles( elem ),
		isBorderBox = support.boxSizing &&
			jQuery.css( elem, "boxSizing", false, styles ) === "border-box";

	// some non-html elements return undefined for offsetWidth, so check for null/undefined
	// svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285
	// MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668
	if ( val <= 0 || val == null ) {

		// Fall back to computed then uncomputed css if necessary
		val = curCSS( elem, name, styles );
		if ( val < 0 || val == null ) {
			val = elem.style[ name ];
		}

		// Computed unit is not pixels. Stop here and return.
		if ( rnumnonpx.test( val ) ) {
			return val;
		}

		// we need the check for style in case a browser which returns unreliable values
		// for getComputedStyle silently falls back to the reliable elem.style
		valueIsBorderBox = isBorderBox &&
			( support.boxSizingReliable() || val === elem.style[ name ] );

		// Normalize "", auto, and prepare for extra
		val = parseFloat( val ) || 0;
	}

	// use the active box-sizing model to add/subtract irrelevant styles
	return ( val +
		augmentWidthOrHeight(
			elem,
			name,
			extra || ( isBorderBox ? "border" : "content" ),
			valueIsBorderBox,
			styles
		)
	) + "px";
}

jQuery.extend( {

	// Add in style property hooks for overriding the default
	// behavior of getting and setting a style property
	cssHooks: {
		opacity: {
			get: function( elem, computed ) {
				if ( computed ) {

					// We should always get a number back from opacity
					var ret = curCSS( elem, "opacity" );
					return ret === "" ? "1" : ret;
				}
			}
		}
	},

	// Don't automatically add "px" to these possibly-unitless properties
	cssNumber: {
		"animationIterationCount": true,
		"columnCount": true,
		"fillOpacity": true,
		"flexGrow": true,
		"flexShrink": true,
		"fontWeight": true,
		"lineHeight": true,
		"opacity": true,
		"order": true,
		"orphans": true,
		"widows": true,
		"zIndex": true,
		"zoom": true
	},

	// Add in properties whose names you wish to fix before
	// setting or getting the value
	cssProps: {

		// normalize float css property
		"float": support.cssFloat ? "cssFloat" : "styleFloat"
	},

	// Get and set the style property on a DOM Node
	style: function( elem, name, value, extra ) {

		// Don't set styles on text and comment nodes
		if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
			return;
		}

		// Make sure that we're working with the right name
		var ret, type, hooks,
			origName = jQuery.camelCase( name ),
			style = elem.style;

		name = jQuery.cssProps[ origName ] ||
			( jQuery.cssProps[ origName ] = vendorPropName( origName ) || origName );

		// gets hook for the prefixed version
		// followed by the unprefixed version
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// Check if we're setting a value
		if ( value !== undefined ) {
			type = typeof value;

			// Convert "+=" or "-=" to relative numbers (#7345)
			if ( type === "string" && ( ret = rcssNum.exec( value ) ) && ret[ 1 ] ) {
				value = adjustCSS( elem, name, ret );

				// Fixes bug #9237
				type = "number";
			}

			// Make sure that null and NaN values aren't set. See: #7116
			if ( value == null || value !== value ) {
				return;
			}

			// If a number was passed in, add the unit (except for certain CSS properties)
			if ( type === "number" ) {
				value += ret && ret[ 3 ] || ( jQuery.cssNumber[ origName ] ? "" : "px" );
			}

			// Fixes #8908, it can be done more correctly by specifing setters in cssHooks,
			// but it would mean to define eight
			// (for every problematic property) identical functions
			if ( !support.clearCloneStyle && value === "" && name.indexOf( "background" ) === 0 ) {
				style[ name ] = "inherit";
			}

			// If a hook was provided, use that value, otherwise just set the specified value
			if ( !hooks || !( "set" in hooks ) ||
				( value = hooks.set( elem, value, extra ) ) !== undefined ) {

				// Support: IE
				// Swallow errors from 'invalid' CSS values (#5509)
				try {
					style[ name ] = value;
				} catch ( e ) {}
			}

		} else {

			// If a hook was provided get the non-computed value from there
			if ( hooks && "get" in hooks &&
				( ret = hooks.get( elem, false, extra ) ) !== undefined ) {

				return ret;
			}

			// Otherwise just get the value from the style object
			return style[ name ];
		}
	},

	css: function( elem, name, extra, styles ) {
		var num, val, hooks,
			origName = jQuery.camelCase( name );

		// Make sure that we're working with the right name
		name = jQuery.cssProps[ origName ] ||
			( jQuery.cssProps[ origName ] = vendorPropName( origName ) || origName );

		// gets hook for the prefixed version
		// followed by the unprefixed version
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// If a hook was provided get the computed value from there
		if ( hooks && "get" in hooks ) {
			val = hooks.get( elem, true, extra );
		}

		// Otherwise, if a way to get the computed value exists, use that
		if ( val === undefined ) {
			val = curCSS( elem, name, styles );
		}

		//convert "normal" to computed value
		if ( val === "normal" && name in cssNormalTransform ) {
			val = cssNormalTransform[ name ];
		}

		// Return, converting to number if forced or a qualifier was provided and val looks numeric
		if ( extra === "" || extra ) {
			num = parseFloat( val );
			return extra === true || isFinite( num ) ? num || 0 : val;
		}
		return val;
	}
} );

jQuery.each( [ "height", "width" ], function( i, name ) {
	jQuery.cssHooks[ name ] = {
		get: function( elem, computed, extra ) {
			if ( computed ) {

				// certain elements can have dimension info if we invisibly show them
				// however, it must have a current display style that would benefit from this
				return rdisplayswap.test( jQuery.css( elem, "display" ) ) &&
					elem.offsetWidth === 0 ?
						swap( elem, cssShow, function() {
							return getWidthOrHeight( elem, name, extra );
						} ) :
						getWidthOrHeight( elem, name, extra );
			}
		},

		set: function( elem, value, extra ) {
			var styles = extra && getStyles( elem );
			return setPositiveNumber( elem, value, extra ?
				augmentWidthOrHeight(
					elem,
					name,
					extra,
					support.boxSizing &&
						jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
					styles
				) : 0
			);
		}
	};
} );

if ( !support.opacity ) {
	jQuery.cssHooks.opacity = {
		get: function( elem, computed ) {

			// IE uses filters for opacity
			return ropacity.test( ( computed && elem.currentStyle ?
				elem.currentStyle.filter :
				elem.style.filter ) || "" ) ?
					( 0.01 * parseFloat( RegExp.$1 ) ) + "" :
					computed ? "1" : "";
		},

		set: function( elem, value ) {
			var style = elem.style,
				currentStyle = elem.currentStyle,
				opacity = jQuery.isNumeric( value ) ? "alpha(opacity=" + value * 100 + ")" : "",
				filter = currentStyle && currentStyle.filter || style.filter || "";

			// IE has trouble with opacity if it does not have layout
			// Force it by setting the zoom level
			style.zoom = 1;

			// if setting opacity to 1, and no other filters exist -
			// attempt to remove filter attribute #6652
			// if value === "", then remove inline opacity #12685
			if ( ( value >= 1 || value === "" ) &&
					jQuery.trim( filter.replace( ralpha, "" ) ) === "" &&
					style.removeAttribute ) {

				// Setting style.filter to null, "" & " " still leave "filter:" in the cssText
				// if "filter:" is present at all, clearType is disabled, we want to avoid this
				// style.removeAttribute is IE Only, but so apparently is this code path...
				style.removeAttribute( "filter" );

				// if there is no filter style applied in a css rule
				// or unset inline opacity, we are done
				if ( value === "" || currentStyle && !currentStyle.filter ) {
					return;
				}
			}

			// otherwise, set new filter values
			style.filter = ralpha.test( filter ) ?
				filter.replace( ralpha, opacity ) :
				filter + " " + opacity;
		}
	};
}

jQuery.cssHooks.marginRight = addGetHookIf( support.reliableMarginRight,
	function( elem, computed ) {
		if ( computed ) {
			return swap( elem, { "display": "inline-block" },
				curCSS, [ elem, "marginRight" ] );
		}
	}
);

jQuery.cssHooks.marginLeft = addGetHookIf( support.reliableMarginLeft,
	function( elem, computed ) {
		if ( computed ) {
			return (
				parseFloat( curCSS( elem, "marginLeft" ) ) ||

				// Support: IE<=11+
				// Running getBoundingClientRect on a disconnected node in IE throws an error
				// Support: IE8 only
				// getClientRects() errors on disconnected elems
				( jQuery.contains( elem.ownerDocument, elem ) ?
					elem.getBoundingClientRect().left -
						swap( elem, { marginLeft: 0 }, function() {
							return elem.getBoundingClientRect().left;
						} ) :
					0
				)
			) + "px";
		}
	}
);

// These hooks are used by animate to expand properties
jQuery.each( {
	margin: "",
	padding: "",
	border: "Width"
}, function( prefix, suffix ) {
	jQuery.cssHooks[ prefix + suffix ] = {
		expand: function( value ) {
			var i = 0,
				expanded = {},

				// assumes a single number if not a string
				parts = typeof value === "string" ? value.split( " " ) : [ value ];

			for ( ; i < 4; i++ ) {
				expanded[ prefix + cssExpand[ i ] + suffix ] =
					parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
			}

			return expanded;
		}
	};

	if ( !rmargin.test( prefix ) ) {
		jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
	}
} );

jQuery.fn.extend( {
	css: function( name, value ) {
		return access( this, function( elem, name, value ) {
			var styles, len,
				map = {},
				i = 0;

			if ( jQuery.isArray( name ) ) {
				styles = getStyles( elem );
				len = name.length;

				for ( ; i < len; i++ ) {
					map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );
				}

				return map;
			}

			return value !== undefined ?
				jQuery.style( elem, name, value ) :
				jQuery.css( elem, name );
		}, name, value, arguments.length > 1 );
	},
	show: function() {
		return showHide( this, true );
	},
	hide: function() {
		return showHide( this );
	},
	toggle: function( state ) {
		if ( typeof state === "boolean" ) {
			return state ? this.show() : this.hide();
		}

		return this.each( function() {
			if ( isHidden( this ) ) {
				jQuery( this ).show();
			} else {
				jQuery( this ).hide();
			}
		} );
	}
} );


function Tween( elem, options, prop, end, easing ) {
	return new Tween.prototype.init( elem, options, prop, end, easing );
}
jQuery.Tween = Tween;

Tween.prototype = {
	constructor: Tween,
	init: function( elem, options, prop, end, easing, unit ) {
		this.elem = elem;
		this.prop = prop;
		this.easing = easing || jQuery.easing._default;
		this.options = options;
		this.start = this.now = this.cur();
		this.end = end;
		this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );
	},
	cur: function() {
		var hooks = Tween.propHooks[ this.prop ];

		return hooks && hooks.get ?
			hooks.get( this ) :
			Tween.propHooks._default.get( this );
	},
	run: function( percent ) {
		var eased,
			hooks = Tween.propHooks[ this.prop ];

		if ( this.options.duration ) {
			this.pos = eased = jQuery.easing[ this.easing ](
				percent, this.options.duration * percent, 0, 1, this.options.duration
			);
		} else {
			this.pos = eased = percent;
		}
		this.now = ( this.end - this.start ) * eased + this.start;

		if ( this.options.step ) {
			this.options.step.call( this.elem, this.now, this );
		}

		if ( hooks && hooks.set ) {
			hooks.set( this );
		} else {
			Tween.propHooks._default.set( this );
		}
		return this;
	}
};

Tween.prototype.init.prototype = Tween.prototype;

Tween.propHooks = {
	_default: {
		get: function( tween ) {
			var result;

			// Use a property on the element directly when it is not a DOM element,
			// or when there is no matching style property that exists.
			if ( tween.elem.nodeType !== 1 ||
				tween.elem[ tween.prop ] != null && tween.elem.style[ tween.prop ] == null ) {
				return tween.elem[ tween.prop ];
			}

			// passing an empty string as a 3rd parameter to .css will automatically
			// attempt a parseFloat and fallback to a string if the parse fails
			// so, simple values such as "10px" are parsed to Float.
			// complex values such as "rotate(1rad)" are returned as is.
			result = jQuery.css( tween.elem, tween.prop, "" );

			// Empty strings, null, undefined and "auto" are converted to 0.
			return !result || result === "auto" ? 0 : result;
		},
		set: function( tween ) {

			// use step hook for back compat - use cssHook if its there - use .style if its
			// available and use plain properties where available
			if ( jQuery.fx.step[ tween.prop ] ) {
				jQuery.fx.step[ tween.prop ]( tween );
			} else if ( tween.elem.nodeType === 1 &&
				( tween.elem.style[ jQuery.cssProps[ tween.prop ] ] != null ||
					jQuery.cssHooks[ tween.prop ] ) ) {
				jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );
			} else {
				tween.elem[ tween.prop ] = tween.now;
			}
		}
	}
};

// Support: IE <=9
// Panic based approach to setting things on disconnected nodes

Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
	set: function( tween ) {
		if ( tween.elem.nodeType && tween.elem.parentNode ) {
			tween.elem[ tween.prop ] = tween.now;
		}
	}
};

jQuery.easing = {
	linear: function( p ) {
		return p;
	},
	swing: function( p ) {
		return 0.5 - Math.cos( p * Math.PI ) / 2;
	},
	_default: "swing"
};

jQuery.fx = Tween.prototype.init;

// Back Compat <1.8 extension point
jQuery.fx.step = {};




var
	fxNow, timerId,
	rfxtypes = /^(?:toggle|show|hide)$/,
	rrun = /queueHooks$/;

// Animations created synchronously will run synchronously
function createFxNow() {
	window.setTimeout( function() {
		fxNow = undefined;
	} );
	return ( fxNow = jQuery.now() );
}

// Generate parameters to create a standard animation
function genFx( type, includeWidth ) {
	var which,
		attrs = { height: type },
		i = 0;

	// if we include width, step value is 1 to do all cssExpand values,
	// if we don't include width, step value is 2 to skip over Left and Right
	includeWidth = includeWidth ? 1 : 0;
	for ( ; i < 4 ; i += 2 - includeWidth ) {
		which = cssExpand[ i ];
		attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
	}

	if ( includeWidth ) {
		attrs.opacity = attrs.width = type;
	}

	return attrs;
}

function createTween( value, prop, animation ) {
	var tween,
		collection = ( Animation.tweeners[ prop ] || [] ).concat( Animation.tweeners[ "*" ] ),
		index = 0,
		length = collection.length;
	for ( ; index < length; index++ ) {
		if ( ( tween = collection[ index ].call( animation, prop, value ) ) ) {

			// we're done with this property
			return tween;
		}
	}
}

function defaultPrefilter( elem, props, opts ) {
	/* jshint validthis: true */
	var prop, value, toggle, tween, hooks, oldfire, display, checkDisplay,
		anim = this,
		orig = {},
		style = elem.style,
		hidden = elem.nodeType && isHidden( elem ),
		dataShow = jQuery._data( elem, "fxshow" );

	// handle queue: false promises
	if ( !opts.queue ) {
		hooks = jQuery._queueHooks( elem, "fx" );
		if ( hooks.unqueued == null ) {
			hooks.unqueued = 0;
			oldfire = hooks.empty.fire;
			hooks.empty.fire = function() {
				if ( !hooks.unqueued ) {
					oldfire();
				}
			};
		}
		hooks.unqueued++;

		anim.always( function() {

			// doing this makes sure that the complete handler will be called
			// before this completes
			anim.always( function() {
				hooks.unqueued--;
				if ( !jQuery.queue( elem, "fx" ).length ) {
					hooks.empty.fire();
				}
			} );
		} );
	}

	// height/width overflow pass
	if ( elem.nodeType === 1 && ( "height" in props || "width" in props ) ) {

		// Make sure that nothing sneaks out
		// Record all 3 overflow attributes because IE does not
		// change the overflow attribute when overflowX and
		// overflowY are set to the same value
		opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];

		// Set display property to inline-block for height/width
		// animations on inline elements that are having width/height animated
		display = jQuery.css( elem, "display" );

		// Test default display if display is currently "none"
		checkDisplay = display === "none" ?
			jQuery._data( elem, "olddisplay" ) || defaultDisplay( elem.nodeName ) : display;

		if ( checkDisplay === "inline" && jQuery.css( elem, "float" ) === "none" ) {

			// inline-level elements accept inline-block;
			// block-level elements need to be inline with layout
			if ( !support.inlineBlockNeedsLayout || defaultDisplay( elem.nodeName ) === "inline" ) {
				style.display = "inline-block";
			} else {
				style.zoom = 1;
			}
		}
	}

	if ( opts.overflow ) {
		style.overflow = "hidden";
		if ( !support.shrinkWrapBlocks() ) {
			anim.always( function() {
				style.overflow = opts.overflow[ 0 ];
				style.overflowX = opts.overflow[ 1 ];
				style.overflowY = opts.overflow[ 2 ];
			} );
		}
	}

	// show/hide pass
	for ( prop in props ) {
		value = props[ prop ];
		if ( rfxtypes.exec( value ) ) {
			delete props[ prop ];
			toggle = toggle || value === "toggle";
			if ( value === ( hidden ? "hide" : "show" ) ) {

				// If there is dataShow left over from a stopped hide or show
				// and we are going to proceed with show, we should pretend to be hidden
				if ( value === "show" && dataShow && dataShow[ prop ] !== undefined ) {
					hidden = true;
				} else {
					continue;
				}
			}
			orig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );

		// Any non-fx value stops us from restoring the original display value
		} else {
			display = undefined;
		}
	}

	if ( !jQuery.isEmptyObject( orig ) ) {
		if ( dataShow ) {
			if ( "hidden" in dataShow ) {
				hidden = dataShow.hidden;
			}
		} else {
			dataShow = jQuery._data( elem, "fxshow", {} );
		}

		// store state if its toggle - enables .stop().toggle() to "reverse"
		if ( toggle ) {
			dataShow.hidden = !hidden;
		}
		if ( hidden ) {
			jQuery( elem ).show();
		} else {
			anim.done( function() {
				jQuery( elem ).hide();
			} );
		}
		anim.done( function() {
			var prop;
			jQuery._removeData( elem, "fxshow" );
			for ( prop in orig ) {
				jQuery.style( elem, prop, orig[ prop ] );
			}
		} );
		for ( prop in orig ) {
			tween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );

			if ( !( prop in dataShow ) ) {
				dataShow[ prop ] = tween.start;
				if ( hidden ) {
					tween.end = tween.start;
					tween.start = prop === "width" || prop === "height" ? 1 : 0;
				}
			}
		}

	// If this is a noop like .hide().hide(), restore an overwritten display value
	} else if ( ( display === "none" ? defaultDisplay( elem.nodeName ) : display ) === "inline" ) {
		style.display = display;
	}
}

function propFilter( props, specialEasing ) {
	var index, name, easing, value, hooks;

	// camelCase, specialEasing and expand cssHook pass
	for ( index in props ) {
		name = jQuery.camelCase( index );
		easing = specialEasing[ name ];
		value = props[ index ];
		if ( jQuery.isArray( value ) ) {
			easing = value[ 1 ];
			value = props[ index ] = value[ 0 ];
		}

		if ( index !== name ) {
			props[ name ] = value;
			delete props[ index ];
		}

		hooks = jQuery.cssHooks[ name ];
		if ( hooks && "expand" in hooks ) {
			value = hooks.expand( value );
			delete props[ name ];

			// not quite $.extend, this wont overwrite keys already present.
			// also - reusing 'index' from above because we have the correct "name"
			for ( index in value ) {
				if ( !( index in props ) ) {
					props[ index ] = value[ index ];
					specialEasing[ index ] = easing;
				}
			}
		} else {
			specialEasing[ name ] = easing;
		}
	}
}

function Animation( elem, properties, options ) {
	var result,
		stopped,
		index = 0,
		length = Animation.prefilters.length,
		deferred = jQuery.Deferred().always( function() {

			// don't match elem in the :animated selector
			delete tick.elem;
		} ),
		tick = function() {
			if ( stopped ) {
				return false;
			}
			var currentTime = fxNow || createFxNow(),
				remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),

				// Support: Android 2.3
				// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)
				temp = remaining / animation.duration || 0,
				percent = 1 - temp,
				index = 0,
				length = animation.tweens.length;

			for ( ; index < length ; index++ ) {
				animation.tweens[ index ].run( percent );
			}

			deferred.notifyWith( elem, [ animation, percent, remaining ] );

			if ( percent < 1 && length ) {
				return remaining;
			} else {
				deferred.resolveWith( elem, [ animation ] );
				return false;
			}
		},
		animation = deferred.promise( {
			elem: elem,
			props: jQuery.extend( {}, properties ),
			opts: jQuery.extend( true, {
				specialEasing: {},
				easing: jQuery.easing._default
			}, options ),
			originalProperties: properties,
			originalOptions: options,
			startTime: fxNow || createFxNow(),
			duration: options.duration,
			tweens: [],
			createTween: function( prop, end ) {
				var tween = jQuery.Tween( elem, animation.opts, prop, end,
						animation.opts.specialEasing[ prop ] || animation.opts.easing );
				animation.tweens.push( tween );
				return tween;
			},
			stop: function( gotoEnd ) {
				var index = 0,

					// if we are going to the end, we want to run all the tweens
					// otherwise we skip this part
					length = gotoEnd ? animation.tweens.length : 0;
				if ( stopped ) {
					return this;
				}
				stopped = true;
				for ( ; index < length ; index++ ) {
					animation.tweens[ index ].run( 1 );
				}

				// resolve when we played the last frame
				// otherwise, reject
				if ( gotoEnd ) {
					deferred.notifyWith( elem, [ animation, 1, 0 ] );
					deferred.resolveWith( elem, [ animation, gotoEnd ] );
				} else {
					deferred.rejectWith( elem, [ animation, gotoEnd ] );
				}
				return this;
			}
		} ),
		props = animation.props;

	propFilter( props, animation.opts.specialEasing );

	for ( ; index < length ; index++ ) {
		result = Animation.prefilters[ index ].call( animation, elem, props, animation.opts );
		if ( result ) {
			if ( jQuery.isFunction( result.stop ) ) {
				jQuery._queueHooks( animation.elem, animation.opts.queue ).stop =
					jQuery.proxy( result.stop, result );
			}
			return result;
		}
	}

	jQuery.map( props, createTween, animation );

	if ( jQuery.isFunction( animation.opts.start ) ) {
		animation.opts.start.call( elem, animation );
	}

	jQuery.fx.timer(
		jQuery.extend( tick, {
			elem: elem,
			anim: animation,
			queue: animation.opts.queue
		} )
	);

	// attach callbacks from options
	return animation.progress( animation.opts.progress )
		.done( animation.opts.done, animation.opts.complete )
		.fail( animation.opts.fail )
		.always( animation.opts.always );
}

jQuery.Animation = jQuery.extend( Animation, {

	tweeners: {
		"*": [ function( prop, value ) {
			var tween = this.createTween( prop, value );
			adjustCSS( tween.elem, prop, rcssNum.exec( value ), tween );
			return tween;
		} ]
	},

	tweener: function( props, callback ) {
		if ( jQuery.isFunction( props ) ) {
			callback = props;
			props = [ "*" ];
		} else {
			props = props.match( rnotwhite );
		}

		var prop,
			index = 0,
			length = props.length;

		for ( ; index < length ; index++ ) {
			prop = props[ index ];
			Animation.tweeners[ prop ] = Animation.tweeners[ prop ] || [];
			Animation.tweeners[ prop ].unshift( callback );
		}
	},

	prefilters: [ defaultPrefilter ],

	prefilter: function( callback, prepend ) {
		if ( prepend ) {
			Animation.prefilters.unshift( callback );
		} else {
			Animation.prefilters.push( callback );
		}
	}
} );

jQuery.speed = function( speed, easing, fn ) {
	var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
		complete: fn || !fn && easing ||
			jQuery.isFunction( speed ) && speed,
		duration: speed,
		easing: fn && easing || easing && !jQuery.isFunction( easing ) && easing
	};

	opt.duration = jQuery.fx.off ? 0 : typeof opt.duration === "number" ? opt.duration :
		opt.duration in jQuery.fx.speeds ?
			jQuery.fx.speeds[ opt.duration ] : jQuery.fx.speeds._default;

	// normalize opt.queue - true/undefined/null -> "fx"
	if ( opt.queue == null || opt.queue === true ) {
		opt.queue = "fx";
	}

	// Queueing
	opt.old = opt.complete;

	opt.complete = function() {
		if ( jQuery.isFunction( opt.old ) ) {
			opt.old.call( this );
		}

		if ( opt.queue ) {
			jQuery.dequeue( this, opt.queue );
		}
	};

	return opt;
};

jQuery.fn.extend( {
	fadeTo: function( speed, to, easing, callback ) {

		// show any hidden elements after setting opacity to 0
		return this.filter( isHidden ).css( "opacity", 0 ).show()

			// animate to the value specified
			.end().animate( { opacity: to }, speed, easing, callback );
	},
	animate: function( prop, speed, easing, callback ) {
		var empty = jQuery.isEmptyObject( prop ),
			optall = jQuery.speed( speed, easing, callback ),
			doAnimation = function() {

				// Operate on a copy of prop so per-property easing won't be lost
				var anim = Animation( this, jQuery.extend( {}, prop ), optall );

				// Empty animations, or finishing resolves immediately
				if ( empty || jQuery._data( this, "finish" ) ) {
					anim.stop( true );
				}
			};
			doAnimation.finish = doAnimation;

		return empty || optall.queue === false ?
			this.each( doAnimation ) :
			this.queue( optall.queue, doAnimation );
	},
	stop: function( type, clearQueue, gotoEnd ) {
		var stopQueue = function( hooks ) {
			var stop = hooks.stop;
			delete hooks.stop;
			stop( gotoEnd );
		};

		if ( typeof type !== "string" ) {
			gotoEnd = clearQueue;
			clearQueue = type;
			type = undefined;
		}
		if ( clearQueue && type !== false ) {
			this.queue( type || "fx", [] );
		}

		return this.each( function() {
			var dequeue = true,
				index = type != null && type + "queueHooks",
				timers = jQuery.timers,
				data = jQuery._data( this );

			if ( index ) {
				if ( data[ index ] && data[ index ].stop ) {
					stopQueue( data[ index ] );
				}
			} else {
				for ( index in data ) {
					if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {
						stopQueue( data[ index ] );
					}
				}
			}

			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this &&
					( type == null || timers[ index ].queue === type ) ) {

					timers[ index ].anim.stop( gotoEnd );
					dequeue = false;
					timers.splice( index, 1 );
				}
			}

			// start the next in the queue if the last step wasn't forced
			// timers currently will call their complete callbacks, which will dequeue
			// but only if they were gotoEnd
			if ( dequeue || !gotoEnd ) {
				jQuery.dequeue( this, type );
			}
		} );
	},
	finish: function( type ) {
		if ( type !== false ) {
			type = type || "fx";
		}
		return this.each( function() {
			var index,
				data = jQuery._data( this ),
				queue = data[ type + "queue" ],
				hooks = data[ type + "queueHooks" ],
				timers = jQuery.timers,
				length = queue ? queue.length : 0;

			// enable finishing flag on private data
			data.finish = true;

			// empty the queue first
			jQuery.queue( this, type, [] );

			if ( hooks && hooks.stop ) {
				hooks.stop.call( this, true );
			}

			// look for any active animations, and finish them
			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this && timers[ index ].queue === type ) {
					timers[ index ].anim.stop( true );
					timers.splice( index, 1 );
				}
			}

			// look for any animations in the old queue and finish them
			for ( index = 0; index < length; index++ ) {
				if ( queue[ index ] && queue[ index ].finish ) {
					queue[ index ].finish.call( this );
				}
			}

			// turn off finishing flag
			delete data.finish;
		} );
	}
} );

jQuery.each( [ "toggle", "show", "hide" ], function( i, name ) {
	var cssFn = jQuery.fn[ name ];
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return speed == null || typeof speed === "boolean" ?
			cssFn.apply( this, arguments ) :
			this.animate( genFx( name, true ), speed, easing, callback );
	};
} );

// Generate shortcuts for custom animations
jQuery.each( {
	slideDown: genFx( "show" ),
	slideUp: genFx( "hide" ),
	slideToggle: genFx( "toggle" ),
	fadeIn: { opacity: "show" },
	fadeOut: { opacity: "hide" },
	fadeToggle: { opacity: "toggle" }
}, function( name, props ) {
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return this.animate( props, speed, easing, callback );
	};
} );

jQuery.timers = [];
jQuery.fx.tick = function() {
	var timer,
		timers = jQuery.timers,
		i = 0;

	fxNow = jQuery.now();

	for ( ; i < timers.length; i++ ) {
		timer = timers[ i ];

		// Checks the timer has not already been removed
		if ( !timer() && timers[ i ] === timer ) {
			timers.splice( i--, 1 );
		}
	}

	if ( !timers.length ) {
		jQuery.fx.stop();
	}
	fxNow = undefined;
};

jQuery.fx.timer = function( timer ) {
	jQuery.timers.push( timer );
	if ( timer() ) {
		jQuery.fx.start();
	} else {
		jQuery.timers.pop();
	}
};

jQuery.fx.interval = 13;

jQuery.fx.start = function() {
	if ( !timerId ) {
		timerId = window.setInterval( jQuery.fx.tick, jQuery.fx.interval );
	}
};

jQuery.fx.stop = function() {
	window.clearInterval( timerId );
	timerId = null;
};

jQuery.fx.speeds = {
	slow: 600,
	fast: 200,

	// Default speed
	_default: 400
};


// Based off of the plugin by Clint Helfers, with permission.
// http://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/
jQuery.fn.delay = function( time, type ) {
	time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
	type = type || "fx";

	return this.queue( type, function( next, hooks ) {
		var timeout = window.setTimeout( next, time );
		hooks.stop = function() {
			window.clearTimeout( timeout );
		};
	} );
};


( function() {
	var a,
		input = document.createElement( "input" ),
		div = document.createElement( "div" ),
		select = document.createElement( "select" ),
		opt = select.appendChild( document.createElement( "option" ) );

	// Setup
	div = document.createElement( "div" );
	div.setAttribute( "className", "t" );
	div.innerHTML = "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>";
	a = div.getElementsByTagName( "a" )[ 0 ];

	// Support: Windows Web Apps (WWA)
	// `type` must use .setAttribute for WWA (#14901)
	input.setAttribute( "type", "checkbox" );
	div.appendChild( input );

	a = div.getElementsByTagName( "a" )[ 0 ];

	// First batch of tests.
	a.style.cssText = "top:1px";

	// Test setAttribute on camelCase class.
	// If it works, we need attrFixes when doing get/setAttribute (ie6/7)
	support.getSetAttribute = div.className !== "t";

	// Get the style information from getAttribute
	// (IE uses .cssText instead)
	support.style = /top/.test( a.getAttribute( "style" ) );

	// Make sure that URLs aren't manipulated
	// (IE normalizes it by default)
	support.hrefNormalized = a.getAttribute( "href" ) === "/a";

	// Check the default checkbox/radio value ("" on WebKit; "on" elsewhere)
	support.checkOn = !!input.value;

	// Make sure that a selected-by-default option has a working selected property.
	// (WebKit defaults to false instead of true, IE too, if it's in an optgroup)
	support.optSelected = opt.selected;

	// Tests for enctype support on a form (#6743)
	support.enctype = !!document.createElement( "form" ).enctype;

	// Make sure that the options inside disabled selects aren't marked as disabled
	// (WebKit marks them as disabled)
	select.disabled = true;
	support.optDisabled = !opt.disabled;

	// Support: IE8 only
	// Check if we can trust getAttribute("value")
	input = document.createElement( "input" );
	input.setAttribute( "value", "" );
	support.input = input.getAttribute( "value" ) === "";

	// Check if an input maintains its value after becoming a radio
	input.value = "t";
	input.setAttribute( "type", "radio" );
	support.radioValue = input.value === "t";
} )();


var rreturn = /\r/g,
	rspaces = /[\x20\t\r\n\f]+/g;

jQuery.fn.extend( {
	val: function( value ) {
		var hooks, ret, isFunction,
			elem = this[ 0 ];

		if ( !arguments.length ) {
			if ( elem ) {
				hooks = jQuery.valHooks[ elem.type ] ||
					jQuery.valHooks[ elem.nodeName.toLowerCase() ];

				if (
					hooks &&
					"get" in hooks &&
					( ret = hooks.get( elem, "value" ) ) !== undefined
				) {
					return ret;
				}

				ret = elem.value;

				return typeof ret === "string" ?

					// handle most common string cases
					ret.replace( rreturn, "" ) :

					// handle cases where value is null/undef or number
					ret == null ? "" : ret;
			}

			return;
		}

		isFunction = jQuery.isFunction( value );

		return this.each( function( i ) {
			var val;

			if ( this.nodeType !== 1 ) {
				return;
			}

			if ( isFunction ) {
				val = value.call( this, i, jQuery( this ).val() );
			} else {
				val = value;
			}

			// Treat null/undefined as ""; convert numbers to string
			if ( val == null ) {
				val = "";
			} else if ( typeof val === "number" ) {
				val += "";
			} else if ( jQuery.isArray( val ) ) {
				val = jQuery.map( val, function( value ) {
					return value == null ? "" : value + "";
				} );
			}

			hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];

			// If set returns undefined, fall back to normal setting
			if ( !hooks || !( "set" in hooks ) || hooks.set( this, val, "value" ) === undefined ) {
				this.value = val;
			}
		} );
	}
} );

jQuery.extend( {
	valHooks: {
		option: {
			get: function( elem ) {
				var val = jQuery.find.attr( elem, "value" );
				return val != null ?
					val :

					// Support: IE10-11+
					// option.text throws exceptions (#14686, #14858)
					// Strip and collapse whitespace
					// https://html.spec.whatwg.org/#strip-and-collapse-whitespace
					jQuery.trim( jQuery.text( elem ) ).replace( rspaces, " " );
			}
		},
		select: {
			get: function( elem ) {
				var value, option,
					options = elem.options,
					index = elem.selectedIndex,
					one = elem.type === "select-one" || index < 0,
					values = one ? null : [],
					max = one ? index + 1 : options.length,
					i = index < 0 ?
						max :
						one ? index : 0;

				// Loop through all the selected options
				for ( ; i < max; i++ ) {
					option = options[ i ];

					// oldIE doesn't update selected after form reset (#2551)
					if ( ( option.selected || i === index ) &&

							// Don't return options that are disabled or in a disabled optgroup
							( support.optDisabled ?
								!option.disabled :
								option.getAttribute( "disabled" ) === null ) &&
							( !option.parentNode.disabled ||
								!jQuery.nodeName( option.parentNode, "optgroup" ) ) ) {

						// Get the specific value for the option
						value = jQuery( option ).val();

						// We don't need an array for one selects
						if ( one ) {
							return value;
						}

						// Multi-Selects return an array
						values.push( value );
					}
				}

				return values;
			},

			set: function( elem, value ) {
				var optionSet, option,
					options = elem.options,
					values = jQuery.makeArray( value ),
					i = options.length;

				while ( i-- ) {
					option = options[ i ];

					if ( jQuery.inArray( jQuery.valHooks.option.get( option ), values ) > -1 ) {

						// Support: IE6
						// When new option element is added to select box we need to
						// force reflow of newly added node in order to workaround delay
						// of initialization properties
						try {
							option.selected = optionSet = true;

						} catch ( _ ) {

							// Will be executed only in IE6
							option.scrollHeight;
						}

					} else {
						option.selected = false;
					}
				}

				// Force browsers to behave consistently when non-matching value is set
				if ( !optionSet ) {
					elem.selectedIndex = -1;
				}

				return options;
			}
		}
	}
} );

// Radios and checkboxes getter/setter
jQuery.each( [ "radio", "checkbox" ], function() {
	jQuery.valHooks[ this ] = {
		set: function( elem, value ) {
			if ( jQuery.isArray( value ) ) {
				return ( elem.checked = jQuery.inArray( jQuery( elem ).val(), value ) > -1 );
			}
		}
	};
	if ( !support.checkOn ) {
		jQuery.valHooks[ this ].get = function( elem ) {
			return elem.getAttribute( "value" ) === null ? "on" : elem.value;
		};
	}
} );




var nodeHook, boolHook,
	attrHandle = jQuery.expr.attrHandle,
	ruseDefault = /^(?:checked|selected)$/i,
	getSetAttribute = support.getSetAttribute,
	getSetInput = support.input;

jQuery.fn.extend( {
	attr: function( name, value ) {
		return access( this, jQuery.attr, name, value, arguments.length > 1 );
	},

	removeAttr: function( name ) {
		return this.each( function() {
			jQuery.removeAttr( this, name );
		} );
	}
} );

jQuery.extend( {
	attr: function( elem, name, value ) {
		var ret, hooks,
			nType = elem.nodeType;

		// Don't get/set attributes on text, comment and attribute nodes
		if ( nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		// Fallback to prop when attributes are not supported
		if ( typeof elem.getAttribute === "undefined" ) {
			return jQuery.prop( elem, name, value );
		}

		// All attributes are lowercase
		// Grab necessary hook if one is defined
		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {
			name = name.toLowerCase();
			hooks = jQuery.attrHooks[ name ] ||
				( jQuery.expr.match.bool.test( name ) ? boolHook : nodeHook );
		}

		if ( value !== undefined ) {
			if ( value === null ) {
				jQuery.removeAttr( elem, name );
				return;
			}

			if ( hooks && "set" in hooks &&
				( ret = hooks.set( elem, value, name ) ) !== undefined ) {
				return ret;
			}

			elem.setAttribute( name, value + "" );
			return value;
		}

		if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
			return ret;
		}

		ret = jQuery.find.attr( elem, name );

		// Non-existent attributes return null, we normalize to undefined
		return ret == null ? undefined : ret;
	},

	attrHooks: {
		type: {
			set: function( elem, value ) {
				if ( !support.radioValue && value === "radio" &&
					jQuery.nodeName( elem, "input" ) ) {

					// Setting the type on a radio button after the value resets the value in IE8-9
					// Reset value to default in case type is set after value during creation
					var val = elem.value;
					elem.setAttribute( "type", value );
					if ( val ) {
						elem.value = val;
					}
					return value;
				}
			}
		}
	},

	removeAttr: function( elem, value ) {
		var name, propName,
			i = 0,
			attrNames = value && value.match( rnotwhite );

		if ( attrNames && elem.nodeType === 1 ) {
			while ( ( name = attrNames[ i++ ] ) ) {
				propName = jQuery.propFix[ name ] || name;

				// Boolean attributes get special treatment (#10870)
				if ( jQuery.expr.match.bool.test( name ) ) {

					// Set corresponding property to false
					if ( getSetInput && getSetAttribute || !ruseDefault.test( name ) ) {
						elem[ propName ] = false;

					// Support: IE<9
					// Also clear defaultChecked/defaultSelected (if appropriate)
					} else {
						elem[ jQuery.camelCase( "default-" + name ) ] =
							elem[ propName ] = false;
					}

				// See #9699 for explanation of this approach (setting first, then removal)
				} else {
					jQuery.attr( elem, name, "" );
				}

				elem.removeAttribute( getSetAttribute ? name : propName );
			}
		}
	}
} );

// Hooks for boolean attributes
boolHook = {
	set: function( elem, value, name ) {
		if ( value === false ) {

			// Remove boolean attributes when set to false
			jQuery.removeAttr( elem, name );
		} else if ( getSetInput && getSetAttribute || !ruseDefault.test( name ) ) {

			// IE<8 needs the *property* name
			elem.setAttribute( !getSetAttribute && jQuery.propFix[ name ] || name, name );

		} else {

			// Support: IE<9
			// Use defaultChecked and defaultSelected for oldIE
			elem[ jQuery.camelCase( "default-" + name ) ] = elem[ name ] = true;
		}
		return name;
	}
};

jQuery.each( jQuery.expr.match.bool.source.match( /\w+/g ), function( i, name ) {
	var getter = attrHandle[ name ] || jQuery.find.attr;

	if ( getSetInput && getSetAttribute || !ruseDefault.test( name ) ) {
		attrHandle[ name ] = function( elem, name, isXML ) {
			var ret, handle;
			if ( !isXML ) {

				// Avoid an infinite loop by temporarily removing this function from the getter
				handle = attrHandle[ name ];
				attrHandle[ name ] = ret;
				ret = getter( elem, name, isXML ) != null ?
					name.toLowerCase() :
					null;
				attrHandle[ name ] = handle;
			}
			return ret;
		};
	} else {
		attrHandle[ name ] = function( elem, name, isXML ) {
			if ( !isXML ) {
				return elem[ jQuery.camelCase( "default-" + name ) ] ?
					name.toLowerCase() :
					null;
			}
		};
	}
} );

// fix oldIE attroperties
if ( !getSetInput || !getSetAttribute ) {
	jQuery.attrHooks.value = {
		set: function( elem, value, name ) {
			if ( jQuery.nodeName( elem, "input" ) ) {

				// Does not return so that setAttribute is also used
				elem.defaultValue = value;
			} else {

				// Use nodeHook if defined (#1954); otherwise setAttribute is fine
				return nodeHook && nodeHook.set( elem, value, name );
			}
		}
	};
}

// IE6/7 do not support getting/setting some attributes with get/setAttribute
if ( !getSetAttribute ) {

	// Use this for any attribute in IE6/7
	// This fixes almost every IE6/7 issue
	nodeHook = {
		set: function( elem, value, name ) {

			// Set the existing or create a new attribute node
			var ret = elem.getAttributeNode( name );
			if ( !ret ) {
				elem.setAttributeNode(
					( ret = elem.ownerDocument.createAttribute( name ) )
				);
			}

			ret.value = value += "";

			// Break association with cloned elements by also using setAttribute (#9646)
			if ( name === "value" || value === elem.getAttribute( name ) ) {
				return value;
			}
		}
	};

	// Some attributes are constructed with empty-string values when not defined
	attrHandle.id = attrHandle.name = attrHandle.coords =
		function( elem, name, isXML ) {
			var ret;
			if ( !isXML ) {
				return ( ret = elem.getAttributeNode( name ) ) && ret.value !== "" ?
					ret.value :
					null;
			}
		};

	// Fixing value retrieval on a button requires this module
	jQuery.valHooks.button = {
		get: function( elem, name ) {
			var ret = elem.getAttributeNode( name );
			if ( ret && ret.specified ) {
				return ret.value;
			}
		},
		set: nodeHook.set
	};

	// Set contenteditable to false on removals(#10429)
	// Setting to empty string throws an error as an invalid value
	jQuery.attrHooks.contenteditable = {
		set: function( elem, value, name ) {
			nodeHook.set( elem, value === "" ? false : value, name );
		}
	};

	// Set width and height to auto instead of 0 on empty string( Bug #8150 )
	// This is for removals
	jQuery.each( [ "width", "height" ], function( i, name ) {
		jQuery.attrHooks[ name ] = {
			set: function( elem, value ) {
				if ( value === "" ) {
					elem.setAttribute( name, "auto" );
					return value;
				}
			}
		};
	} );
}

if ( !support.style ) {
	jQuery.attrHooks.style = {
		get: function( elem ) {

			// Return undefined in the case of empty string
			// Note: IE uppercases css property names, but if we were to .toLowerCase()
			// .cssText, that would destroy case sensitivity in URL's, like in "background"
			return elem.style.cssText || undefined;
		},
		set: function( elem, value ) {
			return ( elem.style.cssText = value + "" );
		}
	};
}




var rfocusable = /^(?:input|select|textarea|button|object)$/i,
	rclickable = /^(?:a|area)$/i;

jQuery.fn.extend( {
	prop: function( name, value ) {
		return access( this, jQuery.prop, name, value, arguments.length > 1 );
	},

	removeProp: function( name ) {
		name = jQuery.propFix[ name ] || name;
		return this.each( function() {

			// try/catch handles cases where IE balks (such as removing a property on window)
			try {
				this[ name ] = undefined;
				delete this[ name ];
			} catch ( e ) {}
		} );
	}
} );

jQuery.extend( {
	prop: function( elem, name, value ) {
		var ret, hooks,
			nType = elem.nodeType;

		// Don't get/set properties on text, comment and attribute nodes
		if ( nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {

			// Fix name and attach hooks
			name = jQuery.propFix[ name ] || name;
			hooks = jQuery.propHooks[ name ];
		}

		if ( value !== undefined ) {
			if ( hooks && "set" in hooks &&
				( ret = hooks.set( elem, value, name ) ) !== undefined ) {
				return ret;
			}

			return ( elem[ name ] = value );
		}

		if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
			return ret;
		}

		return elem[ name ];
	},

	propHooks: {
		tabIndex: {
			get: function( elem ) {

				// elem.tabIndex doesn't always return the
				// correct value when it hasn't been explicitly set
				// http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
				// Use proper attribute retrieval(#12072)
				var tabindex = jQuery.find.attr( elem, "tabindex" );

				return tabindex ?
					parseInt( tabindex, 10 ) :
					rfocusable.test( elem.nodeName ) ||
						rclickable.test( elem.nodeName ) && elem.href ?
							0 :
							-1;
			}
		}
	},

	propFix: {
		"for": "htmlFor",
		"class": "className"
	}
} );

// Some attributes require a special call on IE
// http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
if ( !support.hrefNormalized ) {

	// href/src property should get the full normalized URL (#10299/#12915)
	jQuery.each( [ "href", "src" ], function( i, name ) {
		jQuery.propHooks[ name ] = {
			get: function( elem ) {
				return elem.getAttribute( name, 4 );
			}
		};
	} );
}

// Support: Safari, IE9+
// Accessing the selectedIndex property
// forces the browser to respect setting selected
// on the option
// The getter ensures a default option is selected
// when in an optgroup
if ( !support.optSelected ) {
	jQuery.propHooks.selected = {
		get: function( elem ) {
			var parent = elem.parentNode;

			if ( parent ) {
				parent.selectedIndex;

				// Make sure that it also works with optgroups, see #5701
				if ( parent.parentNode ) {
					parent.parentNode.selectedIndex;
				}
			}
			return null;
		},
		set: function( elem ) {
			var parent = elem.parentNode;
			if ( parent ) {
				parent.selectedIndex;

				if ( parent.parentNode ) {
					parent.parentNode.selectedIndex;
				}
			}
		}
	};
}

jQuery.each( [
	"tabIndex",
	"readOnly",
	"maxLength",
	"cellSpacing",
	"cellPadding",
	"rowSpan",
	"colSpan",
	"useMap",
	"frameBorder",
	"contentEditable"
], function() {
	jQuery.propFix[ this.toLowerCase() ] = this;
} );

// IE6/7 call enctype encoding
if ( !support.enctype ) {
	jQuery.propFix.enctype = "encoding";
}




var rclass = /[\t\r\n\f]/g;

function getClass( elem ) {
	return jQuery.attr( elem, "class" ) || "";
}

jQuery.fn.extend( {
	addClass: function( value ) {
		var classes, elem, cur, curValue, clazz, j, finalValue,
			i = 0;

		if ( jQuery.isFunction( value ) ) {
			return this.each( function( j ) {
				jQuery( this ).addClass( value.call( this, j, getClass( this ) ) );
			} );
		}

		if ( typeof value === "string" && value ) {
			classes = value.match( rnotwhite ) || [];

			while ( ( elem = this[ i++ ] ) ) {
				curValue = getClass( elem );
				cur = elem.nodeType === 1 &&
					( " " + curValue + " " ).replace( rclass, " " );

				if ( cur ) {
					j = 0;
					while ( ( clazz = classes[ j++ ] ) ) {
						if ( cur.indexOf( " " + clazz + " " ) < 0 ) {
							cur += clazz + " ";
						}
					}

					// only assign if different to avoid unneeded rendering.
					finalValue = jQuery.trim( cur );
					if ( curValue !== finalValue ) {
						jQuery.attr( elem, "class", finalValue );
					}
				}
			}
		}

		return this;
	},

	removeClass: function( value ) {
		var classes, elem, cur, curValue, clazz, j, finalValue,
			i = 0;

		if ( jQuery.isFunction( value ) ) {
			return this.each( function( j ) {
				jQuery( this ).removeClass( value.call( this, j, getClass( this ) ) );
			} );
		}

		if ( !arguments.length ) {
			return this.attr( "class", "" );
		}

		if ( typeof value === "string" && value ) {
			classes = value.match( rnotwhite ) || [];

			while ( ( elem = this[ i++ ] ) ) {
				curValue = getClass( elem );

				// This expression is here for better compressibility (see addClass)
				cur = elem.nodeType === 1 &&
					( " " + curValue + " " ).replace( rclass, " " );

				if ( cur ) {
					j = 0;
					while ( ( clazz = classes[ j++ ] ) ) {

						// Remove *all* instances
						while ( cur.indexOf( " " + clazz + " " ) > -1 ) {
							cur = cur.replace( " " + clazz + " ", " " );
						}
					}

					// Only assign if different to avoid unneeded rendering.
					finalValue = jQuery.trim( cur );
					if ( curValue !== finalValue ) {
						jQuery.attr( elem, "class", finalValue );
					}
				}
			}
		}

		return this;
	},

	toggleClass: function( value, stateVal ) {
		var type = typeof value;

		if ( typeof stateVal === "boolean" && type === "string" ) {
			return stateVal ? this.addClass( value ) : this.removeClass( value );
		}

		if ( jQuery.isFunction( value ) ) {
			return this.each( function( i ) {
				jQuery( this ).toggleClass(
					value.call( this, i, getClass( this ), stateVal ),
					stateVal
				);
			} );
		}

		return this.each( function() {
			var className, i, self, classNames;

			if ( type === "string" ) {

				// Toggle individual class names
				i = 0;
				self = jQuery( this );
				classNames = value.match( rnotwhite ) || [];

				while ( ( className = classNames[ i++ ] ) ) {

					// Check each className given, space separated list
					if ( self.hasClass( className ) ) {
						self.removeClass( className );
					} else {
						self.addClass( className );
					}
				}

			// Toggle whole class name
			} else if ( value === undefined || type === "boolean" ) {
				className = getClass( this );
				if ( className ) {

					// store className if set
					jQuery._data( this, "__className__", className );
				}

				// If the element has a class name or if we're passed "false",
				// then remove the whole classname (if there was one, the above saved it).
				// Otherwise bring back whatever was previously saved (if anything),
				// falling back to the empty string if nothing was stored.
				jQuery.attr( this, "class",
					className || value === false ?
					"" :
					jQuery._data( this, "__className__" ) || ""
				);
			}
		} );
	},

	hasClass: function( selector ) {
		var className, elem,
			i = 0;

		className = " " + selector + " ";
		while ( ( elem = this[ i++ ] ) ) {
			if ( elem.nodeType === 1 &&
				( " " + getClass( elem ) + " " ).replace( rclass, " " )
					.indexOf( className ) > -1
			) {
				return true;
			}
		}

		return false;
	}
} );




// Return jQuery for attributes-only inclusion


jQuery.each( ( "blur focus focusin focusout load resize scroll unload click dblclick " +
	"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
	"change select submit keydown keypress keyup error contextmenu" ).split( " " ),
	function( i, name ) {

	// Handle event binding
	jQuery.fn[ name ] = function( data, fn ) {
		return arguments.length > 0 ?
			this.on( name, null, data, fn ) :
			this.trigger( name );
	};
} );

jQuery.fn.extend( {
	hover: function( fnOver, fnOut ) {
		return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
	}
} );


var location = window.location;

var nonce = jQuery.now();

var rquery = ( /\?/ );



var rvalidtokens = /(,)|(\[|{)|(}|])|"(?:[^"\\\r\n]|\\["\\\/bfnrt]|\\u[\da-fA-F]{4})*"\s*:?|true|false|null|-?(?!0\d)\d+(?:\.\d+|)(?:[eE][+-]?\d+|)/g;

jQuery.parseJSON = function( data ) {

	// Attempt to parse using the native JSON parser first
	if ( window.JSON && window.JSON.parse ) {

		// Support: Android 2.3
		// Workaround failure to string-cast null input
		return window.JSON.parse( data + "" );
	}

	var requireNonComma,
		depth = null,
		str = jQuery.trim( data + "" );

	// Guard against invalid (and possibly dangerous) input by ensuring that nothing remains
	// after removing valid tokens
	return str && !jQuery.trim( str.replace( rvalidtokens, function( token, comma, open, close ) {

		// Force termination if we see a misplaced comma
		if ( requireNonComma && comma ) {
			depth = 0;
		}

		// Perform no more replacements after returning to outermost depth
		if ( depth === 0 ) {
			return token;
		}

		// Commas must not follow "[", "{", or ","
		requireNonComma = open || comma;

		// Determine new depth
		// array/object open ("[" or "{"): depth += true - false (increment)
		// array/object close ("]" or "}"): depth += false - true (decrement)
		// other cases ("," or primitive): depth += true - true (numeric cast)
		depth += !close - !open;

		// Remove this token
		return "";
	} ) ) ?
		( Function( "return " + str ) )() :
		jQuery.error( "Invalid JSON: " + data );
};


// Cross-browser xml parsing
jQuery.parseXML = function( data ) {
	var xml, tmp;
	if ( !data || typeof data !== "string" ) {
		return null;
	}
	try {
		if ( window.DOMParser ) { // Standard
			tmp = new window.DOMParser();
			xml = tmp.parseFromString( data, "text/xml" );
		} else { // IE
			xml = new window.ActiveXObject( "Microsoft.XMLDOM" );
			xml.async = "false";
			xml.loadXML( data );
		}
	} catch ( e ) {
		xml = undefined;
	}
	if ( !xml || !xml.documentElement || xml.getElementsByTagName( "parsererror" ).length ) {
		jQuery.error( "Invalid XML: " + data );
	}
	return xml;
};


var
	rhash = /#.*$/,
	rts = /([?&])_=[^&]*/,

	// IE leaves an \r character at EOL
	rheaders = /^(.*?):[ \t]*([^\r\n]*)\r?$/mg,

	// #7653, #8125, #8152: local protocol detection
	rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
	rnoContent = /^(?:GET|HEAD)$/,
	rprotocol = /^\/\//,
	rurl = /^([\w.+-]+:)(?:\/\/(?:[^\/?#]*@|)([^\/?#:]*)(?::(\d+)|)|)/,

	/* Prefilters
	 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
	 * 2) These are called:
	 *    - BEFORE asking for a transport
	 *    - AFTER param serialization (s.data is a string if s.processData is true)
	 * 3) key is the dataType
	 * 4) the catchall symbol "*" can be used
	 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
	 */
	prefilters = {},

	/* Transports bindings
	 * 1) key is the dataType
	 * 2) the catchall symbol "*" can be used
	 * 3) selection will start with transport dataType and THEN go to "*" if needed
	 */
	transports = {},

	// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
	allTypes = "*/".concat( "*" ),

	// Document location
	ajaxLocation = location.href,

	// Segment location into parts
	ajaxLocParts = rurl.exec( ajaxLocation.toLowerCase() ) || [];

// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
function addToPrefiltersOrTransports( structure ) {

	// dataTypeExpression is optional and defaults to "*"
	return function( dataTypeExpression, func ) {

		if ( typeof dataTypeExpression !== "string" ) {
			func = dataTypeExpression;
			dataTypeExpression = "*";
		}

		var dataType,
			i = 0,
			dataTypes = dataTypeExpression.toLowerCase().match( rnotwhite ) || [];

		if ( jQuery.isFunction( func ) ) {

			// For each dataType in the dataTypeExpression
			while ( ( dataType = dataTypes[ i++ ] ) ) {

				// Prepend if requested
				if ( dataType.charAt( 0 ) === "+" ) {
					dataType = dataType.slice( 1 ) || "*";
					( structure[ dataType ] = structure[ dataType ] || [] ).unshift( func );

				// Otherwise append
				} else {
					( structure[ dataType ] = structure[ dataType ] || [] ).push( func );
				}
			}
		}
	};
}

// Base inspection function for prefilters and transports
function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {

	var inspected = {},
		seekingTransport = ( structure === transports );

	function inspect( dataType ) {
		var selected;
		inspected[ dataType ] = true;
		jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {
			var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );
			if ( typeof dataTypeOrTransport === "string" &&
				!seekingTransport && !inspected[ dataTypeOrTransport ] ) {

				options.dataTypes.unshift( dataTypeOrTransport );
				inspect( dataTypeOrTransport );
				return false;
			} else if ( seekingTransport ) {
				return !( selected = dataTypeOrTransport );
			}
		} );
		return selected;
	}

	return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );
}

// A special extend for ajax options
// that takes "flat" options (not to be deep extended)
// Fixes #9887
function ajaxExtend( target, src ) {
	var deep, key,
		flatOptions = jQuery.ajaxSettings.flatOptions || {};

	for ( key in src ) {
		if ( src[ key ] !== undefined ) {
			( flatOptions[ key ] ? target : ( deep || ( deep = {} ) ) )[ key ] = src[ key ];
		}
	}
	if ( deep ) {
		jQuery.extend( true, target, deep );
	}

	return target;
}

/* Handles responses to an ajax request:
 * - finds the right dataType (mediates between content-type and expected dataType)
 * - returns the corresponding response
 */
function ajaxHandleResponses( s, jqXHR, responses ) {
	var firstDataType, ct, finalDataType, type,
		contents = s.contents,
		dataTypes = s.dataTypes;

	// Remove auto dataType and get content-type in the process
	while ( dataTypes[ 0 ] === "*" ) {
		dataTypes.shift();
		if ( ct === undefined ) {
			ct = s.mimeType || jqXHR.getResponseHeader( "Content-Type" );
		}
	}

	// Check if we're dealing with a known content-type
	if ( ct ) {
		for ( type in contents ) {
			if ( contents[ type ] && contents[ type ].test( ct ) ) {
				dataTypes.unshift( type );
				break;
			}
		}
	}

	// Check to see if we have a response for the expected dataType
	if ( dataTypes[ 0 ] in responses ) {
		finalDataType = dataTypes[ 0 ];
	} else {

		// Try convertible dataTypes
		for ( type in responses ) {
			if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[ 0 ] ] ) {
				finalDataType = type;
				break;
			}
			if ( !firstDataType ) {
				firstDataType = type;
			}
		}

		// Or just use first one
		finalDataType = finalDataType || firstDataType;
	}

	// If we found a dataType
	// We add the dataType to the list if needed
	// and return the corresponding response
	if ( finalDataType ) {
		if ( finalDataType !== dataTypes[ 0 ] ) {
			dataTypes.unshift( finalDataType );
		}
		return responses[ finalDataType ];
	}
}

/* Chain conversions given the request and the original response
 * Also sets the responseXXX fields on the jqXHR instance
 */
function ajaxConvert( s, response, jqXHR, isSuccess ) {
	var conv2, current, conv, tmp, prev,
		converters = {},

		// Work with a copy of dataTypes in case we need to modify it for conversion
		dataTypes = s.dataTypes.slice();

	// Create converters map with lowercased keys
	if ( dataTypes[ 1 ] ) {
		for ( conv in s.converters ) {
			converters[ conv.toLowerCase() ] = s.converters[ conv ];
		}
	}

	current = dataTypes.shift();

	// Convert to each sequential dataType
	while ( current ) {

		if ( s.responseFields[ current ] ) {
			jqXHR[ s.responseFields[ current ] ] = response;
		}

		// Apply the dataFilter if provided
		if ( !prev && isSuccess && s.dataFilter ) {
			response = s.dataFilter( response, s.dataType );
		}

		prev = current;
		current = dataTypes.shift();

		if ( current ) {

			// There's only work to do if current dataType is non-auto
			if ( current === "*" ) {

				current = prev;

			// Convert response if prev dataType is non-auto and differs from current
			} else if ( prev !== "*" && prev !== current ) {

				// Seek a direct converter
				conv = converters[ prev + " " + current ] || converters[ "* " + current ];

				// If none found, seek a pair
				if ( !conv ) {
					for ( conv2 in converters ) {

						// If conv2 outputs current
						tmp = conv2.split( " " );
						if ( tmp[ 1 ] === current ) {

							// If prev can be converted to accepted input
							conv = converters[ prev + " " + tmp[ 0 ] ] ||
								converters[ "* " + tmp[ 0 ] ];
							if ( conv ) {

								// Condense equivalence converters
								if ( conv === true ) {
									conv = converters[ conv2 ];

								// Otherwise, insert the intermediate dataType
								} else if ( converters[ conv2 ] !== true ) {
									current = tmp[ 0 ];
									dataTypes.unshift( tmp[ 1 ] );
								}
								break;
							}
						}
					}
				}

				// Apply converter (if not an equivalence)
				if ( conv !== true ) {

					// Unless errors are allowed to bubble, catch and return them
					if ( conv && s[ "throws" ] ) { // jscs:ignore requireDotNotation
						response = conv( response );
					} else {
						try {
							response = conv( response );
						} catch ( e ) {
							return {
								state: "parsererror",
								error: conv ? e : "No conversion from " + prev + " to " + current
							};
						}
					}
				}
			}
		}
	}

	return { state: "success", data: response };
}

jQuery.extend( {

	// Counter for holding the number of active queries
	active: 0,

	// Last-Modified header cache for next request
	lastModified: {},
	etag: {},

	ajaxSettings: {
		url: ajaxLocation,
		type: "GET",
		isLocal: rlocalProtocol.test( ajaxLocParts[ 1 ] ),
		global: true,
		processData: true,
		async: true,
		contentType: "application/x-www-form-urlencoded; charset=UTF-8",
		/*
		timeout: 0,
		data: null,
		dataType: null,
		username: null,
		password: null,
		cache: null,
		throws: false,
		traditional: false,
		headers: {},
		*/

		accepts: {
			"*": allTypes,
			text: "text/plain",
			html: "text/html",
			xml: "application/xml, text/xml",
			json: "application/json, text/javascript"
		},

		contents: {
			xml: /\bxml\b/,
			html: /\bhtml/,
			json: /\bjson\b/
		},

		responseFields: {
			xml: "responseXML",
			text: "responseText",
			json: "responseJSON"
		},

		// Data converters
		// Keys separate source (or catchall "*") and destination types with a single space
		converters: {

			// Convert anything to text
			"* text": String,

			// Text to html (true = no transformation)
			"text html": true,

			// Evaluate text as a json expression
			"text json": jQuery.parseJSON,

			// Parse text as xml
			"text xml": jQuery.parseXML
		},

		// For options that shouldn't be deep extended:
		// you can add your own custom options here if
		// and when you create one that shouldn't be
		// deep extended (see ajaxExtend)
		flatOptions: {
			url: true,
			context: true
		}
	},

	// Creates a full fledged settings object into target
	// with both ajaxSettings and settings fields.
	// If target is omitted, writes into ajaxSettings.
	ajaxSetup: function( target, settings ) {
		return settings ?

			// Building a settings object
			ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :

			// Extending ajaxSettings
			ajaxExtend( jQuery.ajaxSettings, target );
	},

	ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
	ajaxTransport: addToPrefiltersOrTransports( transports ),

	// Main method
	ajax: function( url, options ) {

		// If url is an object, simulate pre-1.5 signature
		if ( typeof url === "object" ) {
			options = url;
			url = undefined;
		}

		// Force options to be an object
		options = options || {};

		var

			// Cross-domain detection vars
			parts,

			// Loop variable
			i,

			// URL without anti-cache param
			cacheURL,

			// Response headers as string
			responseHeadersString,

			// timeout handle
			timeoutTimer,

			// To know if global events are to be dispatched
			fireGlobals,

			transport,

			// Response headers
			responseHeaders,

			// Create the final options object
			s = jQuery.ajaxSetup( {}, options ),

			// Callbacks context
			callbackContext = s.context || s,

			// Context for global events is callbackContext if it is a DOM node or jQuery collection
			globalEventContext = s.context &&
				( callbackContext.nodeType || callbackContext.jquery ) ?
					jQuery( callbackContext ) :
					jQuery.event,

			// Deferreds
			deferred = jQuery.Deferred(),
			completeDeferred = jQuery.Callbacks( "once memory" ),

			// Status-dependent callbacks
			statusCode = s.statusCode || {},

			// Headers (they are sent all at once)
			requestHeaders = {},
			requestHeadersNames = {},

			// The jqXHR state
			state = 0,

			// Default abort message
			strAbort = "canceled",

			// Fake xhr
			jqXHR = {
				readyState: 0,

				// Builds headers hashtable if needed
				getResponseHeader: function( key ) {
					var match;
					if ( state === 2 ) {
						if ( !responseHeaders ) {
							responseHeaders = {};
							while ( ( match = rheaders.exec( responseHeadersString ) ) ) {
								responseHeaders[ match[ 1 ].toLowerCase() ] = match[ 2 ];
							}
						}
						match = responseHeaders[ key.toLowerCase() ];
					}
					return match == null ? null : match;
				},

				// Raw string
				getAllResponseHeaders: function() {
					return state === 2 ? responseHeadersString : null;
				},

				// Caches the header
				setRequestHeader: function( name, value ) {
					var lname = name.toLowerCase();
					if ( !state ) {
						name = requestHeadersNames[ lname ] = requestHeadersNames[ lname ] || name;
						requestHeaders[ name ] = value;
					}
					return this;
				},

				// Overrides response content-type header
				overrideMimeType: function( type ) {
					if ( !state ) {
						s.mimeType = type;
					}
					return this;
				},

				// Status-dependent callbacks
				statusCode: function( map ) {
					var code;
					if ( map ) {
						if ( state < 2 ) {
							for ( code in map ) {

								// Lazy-add the new callback in a way that preserves old ones
								statusCode[ code ] = [ statusCode[ code ], map[ code ] ];
							}
						} else {

							// Execute the appropriate callbacks
							jqXHR.always( map[ jqXHR.status ] );
						}
					}
					return this;
				},

				// Cancel the request
				abort: function( statusText ) {
					var finalText = statusText || strAbort;
					if ( transport ) {
						transport.abort( finalText );
					}
					done( 0, finalText );
					return this;
				}
			};

		// Attach deferreds
		deferred.promise( jqXHR ).complete = completeDeferred.add;
		jqXHR.success = jqXHR.done;
		jqXHR.error = jqXHR.fail;

		// Remove hash character (#7531: and string promotion)
		// Add protocol if not provided (#5866: IE7 issue with protocol-less urls)
		// Handle falsy url in the settings object (#10093: consistency with old signature)
		// We also use the url parameter if available
		s.url = ( ( url || s.url || ajaxLocation ) + "" )
			.replace( rhash, "" )
			.replace( rprotocol, ajaxLocParts[ 1 ] + "//" );

		// Alias method option to type as per ticket #12004
		s.type = options.method || options.type || s.method || s.type;

		// Extract dataTypes list
		s.dataTypes = jQuery.trim( s.dataType || "*" ).toLowerCase().match( rnotwhite ) || [ "" ];

		// A cross-domain request is in order when we have a protocol:host:port mismatch
		if ( s.crossDomain == null ) {
			parts = rurl.exec( s.url.toLowerCase() );
			s.crossDomain = !!( parts &&
				( parts[ 1 ] !== ajaxLocParts[ 1 ] || parts[ 2 ] !== ajaxLocParts[ 2 ] ||
					( parts[ 3 ] || ( parts[ 1 ] === "http:" ? "80" : "443" ) ) !==
						( ajaxLocParts[ 3 ] || ( ajaxLocParts[ 1 ] === "http:" ? "80" : "443" ) ) )
			);
		}

		// Convert data if not already a string
		if ( s.data && s.processData && typeof s.data !== "string" ) {
			s.data = jQuery.param( s.data, s.traditional );
		}

		// Apply prefilters
		inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );

		// If request was aborted inside a prefilter, stop there
		if ( state === 2 ) {
			return jqXHR;
		}

		// We can fire global events as of now if asked to
		// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)
		fireGlobals = jQuery.event && s.global;

		// Watch for a new set of requests
		if ( fireGlobals && jQuery.active++ === 0 ) {
			jQuery.event.trigger( "ajaxStart" );
		}

		// Uppercase the type
		s.type = s.type.toUpperCase();

		// Determine if request has content
		s.hasContent = !rnoContent.test( s.type );

		// Save the URL in case we're toying with the If-Modified-Since
		// and/or If-None-Match header later on
		cacheURL = s.url;

		// More options handling for requests with no content
		if ( !s.hasContent ) {

			// If data is available, append data to url
			if ( s.data ) {
				cacheURL = ( s.url += ( rquery.test( cacheURL ) ? "&" : "?" ) + s.data );

				// #9682: remove data so that it's not used in an eventual retry
				delete s.data;
			}

			// Add anti-cache in url if needed
			if ( s.cache === false ) {
				s.url = rts.test( cacheURL ) ?

					// If there is already a '_' parameter, set its value
					cacheURL.replace( rts, "$1_=" + nonce++ ) :

					// Otherwise add one to the end
					cacheURL + ( rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + nonce++;
			}
		}

		// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
		if ( s.ifModified ) {
			if ( jQuery.lastModified[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );
			}
			if ( jQuery.etag[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );
			}
		}

		// Set the correct header, if data is being sent
		if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
			jqXHR.setRequestHeader( "Content-Type", s.contentType );
		}

		// Set the Accepts header for the server, depending on the dataType
		jqXHR.setRequestHeader(
			"Accept",
			s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[ 0 ] ] ?
				s.accepts[ s.dataTypes[ 0 ] ] +
					( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
				s.accepts[ "*" ]
		);

		// Check for headers option
		for ( i in s.headers ) {
			jqXHR.setRequestHeader( i, s.headers[ i ] );
		}

		// Allow custom headers/mimetypes and early abort
		if ( s.beforeSend &&
			( s.beforeSend.call( callbackContext, jqXHR, s ) === false || state === 2 ) ) {

			// Abort if not done already and return
			return jqXHR.abort();
		}

		// aborting is no longer a cancellation
		strAbort = "abort";

		// Install callbacks on deferreds
		for ( i in { success: 1, error: 1, complete: 1 } ) {
			jqXHR[ i ]( s[ i ] );
		}

		// Get transport
		transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );

		// If no transport, we auto-abort
		if ( !transport ) {
			done( -1, "No Transport" );
		} else {
			jqXHR.readyState = 1;

			// Send global event
			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
			}

			// If request was aborted inside ajaxSend, stop there
			if ( state === 2 ) {
				return jqXHR;
			}

			// Timeout
			if ( s.async && s.timeout > 0 ) {
				timeoutTimer = window.setTimeout( function() {
					jqXHR.abort( "timeout" );
				}, s.timeout );
			}

			try {
				state = 1;
				transport.send( requestHeaders, done );
			} catch ( e ) {

				// Propagate exception as error if not done
				if ( state < 2 ) {
					done( -1, e );

				// Simply rethrow otherwise
				} else {
					throw e;
				}
			}
		}

		// Callback for when everything is done
		function done( status, nativeStatusText, responses, headers ) {
			var isSuccess, success, error, response, modified,
				statusText = nativeStatusText;

			// Called once
			if ( state === 2 ) {
				return;
			}

			// State is "done" now
			state = 2;

			// Clear timeout if it exists
			if ( timeoutTimer ) {
				window.clearTimeout( timeoutTimer );
			}

			// Dereference transport for early garbage collection
			// (no matter how long the jqXHR object will be used)
			transport = undefined;

			// Cache response headers
			responseHeadersString = headers || "";

			// Set readyState
			jqXHR.readyState = status > 0 ? 4 : 0;

			// Determine if successful
			isSuccess = status >= 200 && status < 300 || status === 304;

			// Get response data
			if ( responses ) {
				response = ajaxHandleResponses( s, jqXHR, responses );
			}

			// Convert no matter what (that way responseXXX fields are always set)
			response = ajaxConvert( s, response, jqXHR, isSuccess );

			// If successful, handle type chaining
			if ( isSuccess ) {

				// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
				if ( s.ifModified ) {
					modified = jqXHR.getResponseHeader( "Last-Modified" );
					if ( modified ) {
						jQuery.lastModified[ cacheURL ] = modified;
					}
					modified = jqXHR.getResponseHeader( "etag" );
					if ( modified ) {
						jQuery.etag[ cacheURL ] = modified;
					}
				}

				// if no content
				if ( status === 204 || s.type === "HEAD" ) {
					statusText = "nocontent";

				// if not modified
				} else if ( status === 304 ) {
					statusText = "notmodified";

				// If we have data, let's convert it
				} else {
					statusText = response.state;
					success = response.data;
					error = response.error;
					isSuccess = !error;
				}
			} else {

				// We extract error from statusText
				// then normalize statusText and status for non-aborts
				error = statusText;
				if ( status || !statusText ) {
					statusText = "error";
					if ( status < 0 ) {
						status = 0;
					}
				}
			}

			// Set data for the fake xhr object
			jqXHR.status = status;
			jqXHR.statusText = ( nativeStatusText || statusText ) + "";

			// Success/Error
			if ( isSuccess ) {
				deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
			} else {
				deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
			}

			// Status-dependent callbacks
			jqXHR.statusCode( statusCode );
			statusCode = undefined;

			if ( fireGlobals ) {
				globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",
					[ jqXHR, s, isSuccess ? success : error ] );
			}

			// Complete
			completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );

			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );

				// Handle the global AJAX counter
				if ( !( --jQuery.active ) ) {
					jQuery.event.trigger( "ajaxStop" );
				}
			}
		}

		return jqXHR;
	},

	getJSON: function( url, data, callback ) {
		return jQuery.get( url, data, callback, "json" );
	},

	getScript: function( url, callback ) {
		return jQuery.get( url, undefined, callback, "script" );
	}
} );

jQuery.each( [ "get", "post" ], function( i, method ) {
	jQuery[ method ] = function( url, data, callback, type ) {

		// shift arguments if data argument was omitted
		if ( jQuery.isFunction( data ) ) {
			type = type || callback;
			callback = data;
			data = undefined;
		}

		// The url can be an options object (which then must have .url)
		return jQuery.ajax( jQuery.extend( {
			url: url,
			type: method,
			dataType: type,
			data: data,
			success: callback
		}, jQuery.isPlainObject( url ) && url ) );
	};
} );


jQuery._evalUrl = function( url ) {
	return jQuery.ajax( {
		url: url,

		// Make this explicit, since user can override this through ajaxSetup (#11264)
		type: "GET",
		dataType: "script",
		cache: true,
		async: false,
		global: false,
		"throws": true
	} );
};


jQuery.fn.extend( {
	wrapAll: function( html ) {
		if ( jQuery.isFunction( html ) ) {
			return this.each( function( i ) {
				jQuery( this ).wrapAll( html.call( this, i ) );
			} );
		}

		if ( this[ 0 ] ) {

			// The elements to wrap the target around
			var wrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );

			if ( this[ 0 ].parentNode ) {
				wrap.insertBefore( this[ 0 ] );
			}

			wrap.map( function() {
				var elem = this;

				while ( elem.firstChild && elem.firstChild.nodeType === 1 ) {
					elem = elem.firstChild;
				}

				return elem;
			} ).append( this );
		}

		return this;
	},

	wrapInner: function( html ) {
		if ( jQuery.isFunction( html ) ) {
			return this.each( function( i ) {
				jQuery( this ).wrapInner( html.call( this, i ) );
			} );
		}

		return this.each( function() {
			var self = jQuery( this ),
				contents = self.contents();

			if ( contents.length ) {
				contents.wrapAll( html );

			} else {
				self.append( html );
			}
		} );
	},

	wrap: function( html ) {
		var isFunction = jQuery.isFunction( html );

		return this.each( function( i ) {
			jQuery( this ).wrapAll( isFunction ? html.call( this, i ) : html );
		} );
	},

	unwrap: function() {
		return this.parent().each( function() {
			if ( !jQuery.nodeName( this, "body" ) ) {
				jQuery( this ).replaceWith( this.childNodes );
			}
		} ).end();
	}
} );


function getDisplay( elem ) {
	return elem.style && elem.style.display || jQuery.css( elem, "display" );
}

function filterHidden( elem ) {

	// Disconnected elements are considered hidden
	if ( !jQuery.contains( elem.ownerDocument || document, elem ) ) {
		return true;
	}
	while ( elem && elem.nodeType === 1 ) {
		if ( getDisplay( elem ) === "none" || elem.type === "hidden" ) {
			return true;
		}
		elem = elem.parentNode;
	}
	return false;
}

jQuery.expr.filters.hidden = function( elem ) {

	// Support: Opera <= 12.12
	// Opera reports offsetWidths and offsetHeights less than zero on some elements
	return support.reliableHiddenOffsets() ?
		( elem.offsetWidth <= 0 && elem.offsetHeight <= 0 &&
			!elem.getClientRects().length ) :
			filterHidden( elem );
};

jQuery.expr.filters.visible = function( elem ) {
	return !jQuery.expr.filters.hidden( elem );
};




var r20 = /%20/g,
	rbracket = /\[\]$/,
	rCRLF = /\r?\n/g,
	rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
	rsubmittable = /^(?:input|select|textarea|keygen)/i;

function buildParams( prefix, obj, traditional, add ) {
	var name;

	if ( jQuery.isArray( obj ) ) {

		// Serialize array item.
		jQuery.each( obj, function( i, v ) {
			if ( traditional || rbracket.test( prefix ) ) {

				// Treat each array item as a scalar.
				add( prefix, v );

			} else {

				// Item is non-scalar (array or object), encode its numeric index.
				buildParams(
					prefix + "[" + ( typeof v === "object" && v != null ? i : "" ) + "]",
					v,
					traditional,
					add
				);
			}
		} );

	} else if ( !traditional && jQuery.type( obj ) === "object" ) {

		// Serialize object item.
		for ( name in obj ) {
			buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
		}

	} else {

		// Serialize scalar item.
		add( prefix, obj );
	}
}

// Serialize an array of form elements or a set of
// key/values into a query string
jQuery.param = function( a, traditional ) {
	var prefix,
		s = [],
		add = function( key, value ) {

			// If value is a function, invoke it and return its value
			value = jQuery.isFunction( value ) ? value() : ( value == null ? "" : value );
			s[ s.length ] = encodeURIComponent( key ) + "=" + encodeURIComponent( value );
		};

	// Set traditional to true for jQuery <= 1.3.2 behavior.
	if ( traditional === undefined ) {
		traditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional;
	}

	// If an array was passed in, assume that it is an array of form elements.
	if ( jQuery.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {

		// Serialize the form elements
		jQuery.each( a, function() {
			add( this.name, this.value );
		} );

	} else {

		// If traditional, encode the "old" way (the way 1.3.2 or older
		// did it), otherwise encode params recursively.
		for ( prefix in a ) {
			buildParams( prefix, a[ prefix ], traditional, add );
		}
	}

	// Return the resulting serialization
	return s.join( "&" ).replace( r20, "+" );
};

jQuery.fn.extend( {
	serialize: function() {
		return jQuery.param( this.serializeArray() );
	},
	serializeArray: function() {
		return this.map( function() {

			// Can add propHook for "elements" to filter or add form elements
			var elements = jQuery.prop( this, "elements" );
			return elements ? jQuery.makeArray( elements ) : this;
		} )
		.filter( function() {
			var type = this.type;

			// Use .is(":disabled") so that fieldset[disabled] works
			return this.name && !jQuery( this ).is( ":disabled" ) &&
				rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&
				( this.checked || !rcheckableType.test( type ) );
		} )
		.map( function( i, elem ) {
			var val = jQuery( this ).val();

			return val == null ?
				null :
				jQuery.isArray( val ) ?
					jQuery.map( val, function( val ) {
						return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
					} ) :
					{ name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
		} ).get();
	}
} );


// Create the request object
// (This is still attached to ajaxSettings for backward compatibility)
jQuery.ajaxSettings.xhr = window.ActiveXObject !== undefined ?

	// Support: IE6-IE8
	function() {

		// XHR cannot access local files, always use ActiveX for that case
		if ( this.isLocal ) {
			return createActiveXHR();
		}

		// Support: IE 9-11
		// IE seems to error on cross-domain PATCH requests when ActiveX XHR
		// is used. In IE 9+ always use the native XHR.
		// Note: this condition won't catch Edge as it doesn't define
		// document.documentMode but it also doesn't support ActiveX so it won't
		// reach this code.
		if ( document.documentMode > 8 ) {
			return createStandardXHR();
		}

		// Support: IE<9
		// oldIE XHR does not support non-RFC2616 methods (#13240)
		// See http://msdn.microsoft.com/en-us/library/ie/ms536648(v=vs.85).aspx
		// and http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html#sec9
		// Although this check for six methods instead of eight
		// since IE also does not support "trace" and "connect"
		return /^(get|post|head|put|delete|options)$/i.test( this.type ) &&
			createStandardXHR() || createActiveXHR();
	} :

	// For all other browsers, use the standard XMLHttpRequest object
	createStandardXHR;

var xhrId = 0,
	xhrCallbacks = {},
	xhrSupported = jQuery.ajaxSettings.xhr();

// Support: IE<10
// Open requests must be manually aborted on unload (#5280)
// See https://support.microsoft.com/kb/2856746 for more info
if ( window.attachEvent ) {
	window.attachEvent( "onunload", function() {
		for ( var key in xhrCallbacks ) {
			xhrCallbacks[ key ]( undefined, true );
		}
	} );
}

// Determine support properties
support.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );
xhrSupported = support.ajax = !!xhrSupported;

// Create transport if the browser can provide an xhr
if ( xhrSupported ) {

	jQuery.ajaxTransport( function( options ) {

		// Cross domain only allowed if supported through XMLHttpRequest
		if ( !options.crossDomain || support.cors ) {

			var callback;

			return {
				send: function( headers, complete ) {
					var i,
						xhr = options.xhr(),
						id = ++xhrId;

					// Open the socket
					xhr.open(
						options.type,
						options.url,
						options.async,
						options.username,
						options.password
					);

					// Apply custom fields if provided
					if ( options.xhrFields ) {
						for ( i in options.xhrFields ) {
							xhr[ i ] = options.xhrFields[ i ];
						}
					}

					// Override mime type if needed
					if ( options.mimeType && xhr.overrideMimeType ) {
						xhr.overrideMimeType( options.mimeType );
					}

					// X-Requested-With header
					// For cross-domain requests, seeing as conditions for a preflight are
					// akin to a jigsaw puzzle, we simply never set it to be sure.
					// (it can always be set on a per-request basis or even using ajaxSetup)
					// For same-domain requests, won't change header if already provided.
					if ( !options.crossDomain && !headers[ "X-Requested-With" ] ) {
						headers[ "X-Requested-With" ] = "XMLHttpRequest";
					}

					// Set headers
					for ( i in headers ) {

						// Support: IE<9
						// IE's ActiveXObject throws a 'Type Mismatch' exception when setting
						// request header to a null-value.
						//
						// To keep consistent with other XHR implementations, cast the value
						// to string and ignore `undefined`.
						if ( headers[ i ] !== undefined ) {
							xhr.setRequestHeader( i, headers[ i ] + "" );
						}
					}

					// Do send the request
					// This may raise an exception which is actually
					// handled in jQuery.ajax (so no try/catch here)
					xhr.send( ( options.hasContent && options.data ) || null );

					// Listener
					callback = function( _, isAbort ) {
						var status, statusText, responses;

						// Was never called and is aborted or complete
						if ( callback && ( isAbort || xhr.readyState === 4 ) ) {

							// Clean up
							delete xhrCallbacks[ id ];
							callback = undefined;
							xhr.onreadystatechange = jQuery.noop;

							// Abort manually if needed
							if ( isAbort ) {
								if ( xhr.readyState !== 4 ) {
									xhr.abort();
								}
							} else {
								responses = {};
								status = xhr.status;

								// Support: IE<10
								// Accessing binary-data responseText throws an exception
								// (#11426)
								if ( typeof xhr.responseText === "string" ) {
									responses.text = xhr.responseText;
								}

								// Firefox throws an exception when accessing
								// statusText for faulty cross-domain requests
								try {
									statusText = xhr.statusText;
								} catch ( e ) {

									// We normalize with Webkit giving an empty statusText
									statusText = "";
								}

								// Filter status for non standard behaviors

								// If the request is local and we have data: assume a success
								// (success with no data won't get notified, that's the best we
								// can do given current implementations)
								if ( !status && options.isLocal && !options.crossDomain ) {
									status = responses.text ? 200 : 404;

								// IE - #1450: sometimes returns 1223 when it should be 204
								} else if ( status === 1223 ) {
									status = 204;
								}
							}
						}

						// Call complete if needed
						if ( responses ) {
							complete( status, statusText, responses, xhr.getAllResponseHeaders() );
						}
					};

					// Do send the request
					// `xhr.send` may raise an exception, but it will be
					// handled in jQuery.ajax (so no try/catch here)
					if ( !options.async ) {

						// If we're in sync mode we fire the callback
						callback();
					} else if ( xhr.readyState === 4 ) {

						// (IE6 & IE7) if it's in cache and has been
						// retrieved directly we need to fire the callback
						window.setTimeout( callback );
					} else {

						// Register the callback, but delay it in case `xhr.send` throws
						// Add to the list of active xhr callbacks
						xhr.onreadystatechange = xhrCallbacks[ id ] = callback;
					}
				},

				abort: function() {
					if ( callback ) {
						callback( undefined, true );
					}
				}
			};
		}
	} );
}

// Functions to create xhrs
function createStandardXHR() {
	try {
		return new window.XMLHttpRequest();
	} catch ( e ) {}
}

function createActiveXHR() {
	try {
		return new window.ActiveXObject( "Microsoft.XMLHTTP" );
	} catch ( e ) {}
}




// Install script dataType
jQuery.ajaxSetup( {
	accepts: {
		script: "text/javascript, application/javascript, " +
			"application/ecmascript, application/x-ecmascript"
	},
	contents: {
		script: /\b(?:java|ecma)script\b/
	},
	converters: {
		"text script": function( text ) {
			jQuery.globalEval( text );
			return text;
		}
	}
} );

// Handle cache's special case and global
jQuery.ajaxPrefilter( "script", function( s ) {
	if ( s.cache === undefined ) {
		s.cache = false;
	}
	if ( s.crossDomain ) {
		s.type = "GET";
		s.global = false;
	}
} );

// Bind script tag hack transport
jQuery.ajaxTransport( "script", function( s ) {

	// This transport only deals with cross domain requests
	if ( s.crossDomain ) {

		var script,
			head = document.head || jQuery( "head" )[ 0 ] || document.documentElement;

		return {

			send: function( _, callback ) {

				script = document.createElement( "script" );

				script.async = true;

				if ( s.scriptCharset ) {
					script.charset = s.scriptCharset;
				}

				script.src = s.url;

				// Attach handlers for all browsers
				script.onload = script.onreadystatechange = function( _, isAbort ) {

					if ( isAbort || !script.readyState || /loaded|complete/.test( script.readyState ) ) {

						// Handle memory leak in IE
						script.onload = script.onreadystatechange = null;

						// Remove the script
						if ( script.parentNode ) {
							script.parentNode.removeChild( script );
						}

						// Dereference the script
						script = null;

						// Callback if not abort
						if ( !isAbort ) {
							callback( 200, "success" );
						}
					}
				};

				// Circumvent IE6 bugs with base elements (#2709 and #4378) by prepending
				// Use native DOM manipulation to avoid our domManip AJAX trickery
				head.insertBefore( script, head.firstChild );
			},

			abort: function() {
				if ( script ) {
					script.onload( undefined, true );
				}
			}
		};
	}
} );




var oldCallbacks = [],
	rjsonp = /(=)\?(?=&|$)|\?\?/;

// Default jsonp settings
jQuery.ajaxSetup( {
	jsonp: "callback",
	jsonpCallback: function() {
		var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( nonce++ ) );
		this[ callback ] = true;
		return callback;
	}
} );

// Detect, normalize options and install callbacks for jsonp requests
jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {

	var callbackName, overwritten, responseContainer,
		jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?
			"url" :
			typeof s.data === "string" &&
				( s.contentType || "" )
					.indexOf( "application/x-www-form-urlencoded" ) === 0 &&
				rjsonp.test( s.data ) && "data"
		);

	// Handle iff the expected data type is "jsonp" or we have a parameter to set
	if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {

		// Get callback name, remembering preexisting value associated with it
		callbackName = s.jsonpCallback = jQuery.isFunction( s.jsonpCallback ) ?
			s.jsonpCallback() :
			s.jsonpCallback;

		// Insert callback into url or form data
		if ( jsonProp ) {
			s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );
		} else if ( s.jsonp !== false ) {
			s.url += ( rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
		}

		// Use data converter to retrieve json after script execution
		s.converters[ "script json" ] = function() {
			if ( !responseContainer ) {
				jQuery.error( callbackName + " was not called" );
			}
			return responseContainer[ 0 ];
		};

		// force json dataType
		s.dataTypes[ 0 ] = "json";

		// Install callback
		overwritten = window[ callbackName ];
		window[ callbackName ] = function() {
			responseContainer = arguments;
		};

		// Clean-up function (fires after converters)
		jqXHR.always( function() {

			// If previous value didn't exist - remove it
			if ( overwritten === undefined ) {
				jQuery( window ).removeProp( callbackName );

			// Otherwise restore preexisting value
			} else {
				window[ callbackName ] = overwritten;
			}

			// Save back as free
			if ( s[ callbackName ] ) {

				// make sure that re-using the options doesn't screw things around
				s.jsonpCallback = originalSettings.jsonpCallback;

				// save the callback name for future use
				oldCallbacks.push( callbackName );
			}

			// Call if it was a function and we have a response
			if ( responseContainer && jQuery.isFunction( overwritten ) ) {
				overwritten( responseContainer[ 0 ] );
			}

			responseContainer = overwritten = undefined;
		} );

		// Delegate to script
		return "script";
	}
} );




// data: string of html
// context (optional): If specified, the fragment will be created in this context,
// defaults to document
// keepScripts (optional): If true, will include scripts passed in the html string
jQuery.parseHTML = function( data, context, keepScripts ) {
	if ( !data || typeof data !== "string" ) {
		return null;
	}
	if ( typeof context === "boolean" ) {
		keepScripts = context;
		context = false;
	}
	context = context || document;

	var parsed = rsingleTag.exec( data ),
		scripts = !keepScripts && [];

	// Single tag
	if ( parsed ) {
		return [ context.createElement( parsed[ 1 ] ) ];
	}

	parsed = buildFragment( [ data ], context, scripts );

	if ( scripts && scripts.length ) {
		jQuery( scripts ).remove();
	}

	return jQuery.merge( [], parsed.childNodes );
};


// Keep a copy of the old load method
var _load = jQuery.fn.load;

/**
 * Load a url into a page
 */
jQuery.fn.load = function( url, params, callback ) {
	if ( typeof url !== "string" && _load ) {
		return _load.apply( this, arguments );
	}

	var selector, type, response,
		self = this,
		off = url.indexOf( " " );

	if ( off > -1 ) {
		selector = jQuery.trim( url.slice( off, url.length ) );
		url = url.slice( 0, off );
	}

	// If it's a function
	if ( jQuery.isFunction( params ) ) {

		// We assume that it's the callback
		callback = params;
		params = undefined;

	// Otherwise, build a param string
	} else if ( params && typeof params === "object" ) {
		type = "POST";
	}

	// If we have elements to modify, make the request
	if ( self.length > 0 ) {
		jQuery.ajax( {
			url: url,

			// If "type" variable is undefined, then "GET" method will be used.
			// Make value of this field explicit since
			// user can override it through ajaxSetup method
			type: type || "GET",
			dataType: "html",
			data: params
		} ).done( function( responseText ) {

			// Save response for use in complete callback
			response = arguments;

			self.html( selector ?

				// If a selector was specified, locate the right elements in a dummy div
				// Exclude scripts to avoid IE 'Permission Denied' errors
				jQuery( "<div>" ).append( jQuery.parseHTML( responseText ) ).find( selector ) :

				// Otherwise use the full result
				responseText );

		// If the request succeeds, this function gets "data", "status", "jqXHR"
		// but they are ignored because response was set above.
		// If it fails, this function gets "jqXHR", "status", "error"
		} ).always( callback && function( jqXHR, status ) {
			self.each( function() {
				callback.apply( this, response || [ jqXHR.responseText, status, jqXHR ] );
			} );
		} );
	}

	return this;
};




// Attach a bunch of functions for handling common AJAX events
jQuery.each( [
	"ajaxStart",
	"ajaxStop",
	"ajaxComplete",
	"ajaxError",
	"ajaxSuccess",
	"ajaxSend"
], function( i, type ) {
	jQuery.fn[ type ] = function( fn ) {
		return this.on( type, fn );
	};
} );




jQuery.expr.filters.animated = function( elem ) {
	return jQuery.grep( jQuery.timers, function( fn ) {
		return elem === fn.elem;
	} ).length;
};





/**
 * Gets a window from an element
 */
function getWindow( elem ) {
	return jQuery.isWindow( elem ) ?
		elem :
		elem.nodeType === 9 ?
			elem.defaultView || elem.parentWindow :
			false;
}

jQuery.offset = {
	setOffset: function( elem, options, i ) {
		var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,
			position = jQuery.css( elem, "position" ),
			curElem = jQuery( elem ),
			props = {};

		// set position first, in-case top/left are set even on static elem
		if ( position === "static" ) {
			elem.style.position = "relative";
		}

		curOffset = curElem.offset();
		curCSSTop = jQuery.css( elem, "top" );
		curCSSLeft = jQuery.css( elem, "left" );
		calculatePosition = ( position === "absolute" || position === "fixed" ) &&
			jQuery.inArray( "auto", [ curCSSTop, curCSSLeft ] ) > -1;

		// need to be able to calculate position if either top or left
		// is auto and position is either absolute or fixed
		if ( calculatePosition ) {
			curPosition = curElem.position();
			curTop = curPosition.top;
			curLeft = curPosition.left;
		} else {
			curTop = parseFloat( curCSSTop ) || 0;
			curLeft = parseFloat( curCSSLeft ) || 0;
		}

		if ( jQuery.isFunction( options ) ) {

			// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)
			options = options.call( elem, i, jQuery.extend( {}, curOffset ) );
		}

		if ( options.top != null ) {
			props.top = ( options.top - curOffset.top ) + curTop;
		}
		if ( options.left != null ) {
			props.left = ( options.left - curOffset.left ) + curLeft;
		}

		if ( "using" in options ) {
			options.using.call( elem, props );
		} else {
			curElem.css( props );
		}
	}
};

jQuery.fn.extend( {
	offset: function( options ) {
		if ( arguments.length ) {
			return options === undefined ?
				this :
				this.each( function( i ) {
					jQuery.offset.setOffset( this, options, i );
				} );
		}

		var docElem, win,
			box = { top: 0, left: 0 },
			elem = this[ 0 ],
			doc = elem && elem.ownerDocument;

		if ( !doc ) {
			return;
		}

		docElem = doc.documentElement;

		// Make sure it's not a disconnected DOM node
		if ( !jQuery.contains( docElem, elem ) ) {
			return box;
		}

		// If we don't have gBCR, just use 0,0 rather than error
		// BlackBerry 5, iOS 3 (original iPhone)
		if ( typeof elem.getBoundingClientRect !== "undefined" ) {
			box = elem.getBoundingClientRect();
		}
		win = getWindow( doc );
		return {
			top: box.top  + ( win.pageYOffset || docElem.scrollTop )  - ( docElem.clientTop  || 0 ),
			left: box.left + ( win.pageXOffset || docElem.scrollLeft ) - ( docElem.clientLeft || 0 )
		};
	},

	position: function() {
		if ( !this[ 0 ] ) {
			return;
		}

		var offsetParent, offset,
			parentOffset = { top: 0, left: 0 },
			elem = this[ 0 ];

		// Fixed elements are offset from window (parentOffset = {top:0, left: 0},
		// because it is its only offset parent
		if ( jQuery.css( elem, "position" ) === "fixed" ) {

			// we assume that getBoundingClientRect is available when computed position is fixed
			offset = elem.getBoundingClientRect();
		} else {

			// Get *real* offsetParent
			offsetParent = this.offsetParent();

			// Get correct offsets
			offset = this.offset();
			if ( !jQuery.nodeName( offsetParent[ 0 ], "html" ) ) {
				parentOffset = offsetParent.offset();
			}

			// Add offsetParent borders
			parentOffset.top  += jQuery.css( offsetParent[ 0 ], "borderTopWidth", true );
			parentOffset.left += jQuery.css( offsetParent[ 0 ], "borderLeftWidth", true );
		}

		// Subtract parent offsets and element margins
		// note: when an element has margin: auto the offsetLeft and marginLeft
		// are the same in Safari causing offset.left to incorrectly be 0
		return {
			top:  offset.top  - parentOffset.top - jQuery.css( elem, "marginTop", true ),
			left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true )
		};
	},

	offsetParent: function() {
		return this.map( function() {
			var offsetParent = this.offsetParent;

			while ( offsetParent && ( !jQuery.nodeName( offsetParent, "html" ) &&
				jQuery.css( offsetParent, "position" ) === "static" ) ) {
				offsetParent = offsetParent.offsetParent;
			}
			return offsetParent || documentElement;
		} );
	}
} );

// Create scrollLeft and scrollTop methods
jQuery.each( { scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function( method, prop ) {
	var top = /Y/.test( prop );

	jQuery.fn[ method ] = function( val ) {
		return access( this, function( elem, method, val ) {
			var win = getWindow( elem );

			if ( val === undefined ) {
				return win ? ( prop in win ) ? win[ prop ] :
					win.document.documentElement[ method ] :
					elem[ method ];
			}

			if ( win ) {
				win.scrollTo(
					!top ? val : jQuery( win ).scrollLeft(),
					top ? val : jQuery( win ).scrollTop()
				);

			} else {
				elem[ method ] = val;
			}
		}, method, val, arguments.length, null );
	};
} );

// Support: Safari<7-8+, Chrome<37-44+
// Add the top/left cssHooks using jQuery.fn.position
// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
// getComputedStyle returns percent when specified for top/left/bottom/right
// rather than make the css module depend on the offset module, we just check for it here
jQuery.each( [ "top", "left" ], function( i, prop ) {
	jQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,
		function( elem, computed ) {
			if ( computed ) {
				computed = curCSS( elem, prop );

				// if curCSS returns percentage, fallback to offset
				return rnumnonpx.test( computed ) ?
					jQuery( elem ).position()[ prop ] + "px" :
					computed;
			}
		}
	);
} );


// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
	jQuery.each( { padding: "inner" + name, content: type, "": "outer" + name },
	function( defaultExtra, funcName ) {

		// margin is only for outerHeight, outerWidth
		jQuery.fn[ funcName ] = function( margin, value ) {
			var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
				extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );

			return access( this, function( elem, type, value ) {
				var doc;

				if ( jQuery.isWindow( elem ) ) {

					// As of 5/8/2012 this will yield incorrect results for Mobile Safari, but there
					// isn't a whole lot we can do. See pull request at this URL for discussion:
					// https://github.com/jquery/jquery/pull/764
					return elem.document.documentElement[ "client" + name ];
				}

				// Get document width or height
				if ( elem.nodeType === 9 ) {
					doc = elem.documentElement;

					// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
					// whichever is greatest
					// unfortunately, this causes bug #3838 in IE6/8 only,
					// but there is currently no good, small way to fix it.
					return Math.max(
						elem.body[ "scroll" + name ], doc[ "scroll" + name ],
						elem.body[ "offset" + name ], doc[ "offset" + name ],
						doc[ "client" + name ]
					);
				}

				return value === undefined ?

					// Get width or height on the element, requesting but not forcing parseFloat
					jQuery.css( elem, type, extra ) :

					// Set width or height on the element
					jQuery.style( elem, type, value, extra );
			}, type, chainable ? margin : undefined, chainable, null );
		};
	} );
} );


jQuery.fn.extend( {

	bind: function( types, data, fn ) {
		return this.on( types, null, data, fn );
	},
	unbind: function( types, fn ) {
		return this.off( types, null, fn );
	},

	delegate: function( selector, types, data, fn ) {
		return this.on( types, selector, data, fn );
	},
	undelegate: function( selector, types, fn ) {

		// ( namespace ) or ( selector, types [, fn] )
		return arguments.length === 1 ?
			this.off( selector, "**" ) :
			this.off( types, selector || "**", fn );
	}
} );

// The number of elements contained in the matched element set
jQuery.fn.size = function() {
	return this.length;
};

jQuery.fn.andSelf = jQuery.fn.addBack;




// Register as a named AMD module, since jQuery can be concatenated with other
// files that may use define, but not via a proper concatenation script that
// understands anonymous AMD modules. A named AMD is safest and most robust
// way to register. Lowercase jquery is used because AMD module names are
// derived from file names, and jQuery is normally delivered in a lowercase
// file name. Do this after creating the global so that if an AMD module wants
// to call noConflict to hide this version of jQuery, it will work.

// Note that for maximum portability, libraries that are not jQuery should
// declare themselves as anonymous modules, and avoid setting a global if an
// AMD loader is present. jQuery is a special case. For more information, see
// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon

if ( typeof define === "function" && define.amd ) {
	define( "jquery", [], function() {
		return jQuery;
	} );
}



var

	// Map over jQuery in case of overwrite
	_jQuery = window.jQuery,

	// Map over the $ in case of overwrite
	_$ = window.$;

jQuery.noConflict = function( deep ) {
	if ( window.$ === jQuery ) {
		window.$ = _$;
	}

	if ( deep && window.jQuery === jQuery ) {
		window.jQuery = _jQuery;
	}

	return jQuery;
};

// Expose jQuery and $ identifiers, even in
// AMD (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
// and CommonJS for browser emulators (#13566)
if ( !noGlobal ) {
	window.jQuery = window.$ = jQuery;
}

return jQuery;
}));
(function($, undefined) {

/**
 * Unobtrusive scripting adapter for jQuery
 * https://github.com/rails/jquery-ujs
 *
 * Requires jQuery 1.8.0 or later.
 *
 * Released under the MIT license
 *
 */

  // Cut down on the number of issues from people inadvertently including jquery_ujs twice
  // by detecting and raising an error when it happens.
  'use strict';

  if ( $.rails !== undefined ) {
    $.error('jquery-ujs has already been loaded!');
  }

  // Shorthand to make it a little easier to call public rails functions from within rails.js
  var rails;
  var $document = $(document);

  $.rails = rails = {
    // Link elements bound by jquery-ujs
    linkClickSelector: 'a[data-confirm], a[data-method], a[data-remote]:not([disabled]), a[data-disable-with], a[data-disable]',

    // Button elements bound by jquery-ujs
    buttonClickSelector: 'button[data-remote]:not([form]):not(form button), button[data-confirm]:not([form]):not(form button)',

    // Select elements bound by jquery-ujs
    inputChangeSelector: 'select[data-remote], input[data-remote], textarea[data-remote]',

    // Form elements bound by jquery-ujs
    formSubmitSelector: 'form',

    // Form input elements bound by jquery-ujs
    formInputClickSelector: 'form input[type=submit], form input[type=image], form button[type=submit], form button:not([type]), input[type=submit][form], input[type=image][form], button[type=submit][form], button[form]:not([type])',

    // Form input elements disabled during form submission
    disableSelector: 'input[data-disable-with]:enabled, button[data-disable-with]:enabled, textarea[data-disable-with]:enabled, input[data-disable]:enabled, button[data-disable]:enabled, textarea[data-disable]:enabled',

    // Form input elements re-enabled after form submission
    enableSelector: 'input[data-disable-with]:disabled, button[data-disable-with]:disabled, textarea[data-disable-with]:disabled, input[data-disable]:disabled, button[data-disable]:disabled, textarea[data-disable]:disabled',

    // Form required input elements
    requiredInputSelector: 'input[name][required]:not([disabled]), textarea[name][required]:not([disabled])',

    // Form file input elements
    fileInputSelector: 'input[name][type=file]:not([disabled])',

    // Link onClick disable selector with possible reenable after remote submission
    linkDisableSelector: 'a[data-disable-with], a[data-disable]',

    // Button onClick disable selector with possible reenable after remote submission
    buttonDisableSelector: 'button[data-remote][data-disable-with], button[data-remote][data-disable]',

    // Up-to-date Cross-Site Request Forgery token
    csrfToken: function() {
     return $('meta[name=csrf-token]').attr('content');
    },

    // URL param that must contain the CSRF token
    csrfParam: function() {
     return $('meta[name=csrf-param]').attr('content');
    },

    // Make sure that every Ajax request sends the CSRF token
    CSRFProtection: function(xhr) {
      var token = rails.csrfToken();
      if (token) xhr.setRequestHeader('X-CSRF-Token', token);
    },

    // Make sure that all forms have actual up-to-date tokens (cached forms contain old ones)
    refreshCSRFTokens: function(){
      $('form input[name="' + rails.csrfParam() + '"]').val(rails.csrfToken());
    },

    // Triggers an event on an element and returns false if the event result is false
    fire: function(obj, name, data) {
      var event = $.Event(name);
      obj.trigger(event, data);
      return event.result !== false;
    },

    // Default confirm dialog, may be overridden with custom confirm dialog in $.rails.confirm
    confirm: function(message) {
      return confirm(message);
    },

    // Default ajax function, may be overridden with custom function in $.rails.ajax
    ajax: function(options) {
      return $.ajax(options);
    },

    // Default way to get an element's href. May be overridden at $.rails.href.
    href: function(element) {
      return element[0].href;
    },

    // Checks "data-remote" if true to handle the request through a XHR request.
    isRemote: function(element) {
      return element.data('remote') !== undefined && element.data('remote') !== false;
    },

    // Submits "remote" forms and links with ajax
    handleRemote: function(element) {
      var method, url, data, withCredentials, dataType, options;

      if (rails.fire(element, 'ajax:before')) {
        withCredentials = element.data('with-credentials') || null;
        dataType = element.data('type') || ($.ajaxSettings && $.ajaxSettings.dataType);

        if (element.is('form')) {
          method = element.data('ujs:submit-button-formmethod') || element.attr('method');
          url = element.data('ujs:submit-button-formaction') || element.attr('action');
          data = $(element[0]).serializeArray();
          // memoized value from clicked submit button
          var button = element.data('ujs:submit-button');
          if (button) {
            data.push(button);
            element.data('ujs:submit-button', null);
          }
          element.data('ujs:submit-button-formmethod', null);
          element.data('ujs:submit-button-formaction', null);
        } else if (element.is(rails.inputChangeSelector)) {
          method = element.data('method');
          url = element.data('url');
          data = element.serialize();
          if (element.data('params')) data = data + '&' + element.data('params');
        } else if (element.is(rails.buttonClickSelector)) {
          method = element.data('method') || 'get';
          url = element.data('url');
          data = element.serialize();
          if (element.data('params')) data = data + '&' + element.data('params');
        } else {
          method = element.data('method');
          url = rails.href(element);
          data = element.data('params') || null;
        }

        options = {
          type: method || 'GET', data: data, dataType: dataType,
          // stopping the "ajax:beforeSend" event will cancel the ajax request
          beforeSend: function(xhr, settings) {
            if (settings.dataType === undefined) {
              xhr.setRequestHeader('accept', '*/*;q=0.5, ' + settings.accepts.script);
            }
            if (rails.fire(element, 'ajax:beforeSend', [xhr, settings])) {
              element.trigger('ajax:send', xhr);
            } else {
              return false;
            }
          },
          success: function(data, status, xhr) {
            element.trigger('ajax:success', [data, status, xhr]);
          },
          complete: function(xhr, status) {
            element.trigger('ajax:complete', [xhr, status]);
          },
          error: function(xhr, status, error) {
            element.trigger('ajax:error', [xhr, status, error]);
          },
          crossDomain: rails.isCrossDomain(url)
        };

        // There is no withCredentials for IE6-8 when
        // "Enable native XMLHTTP support" is disabled
        if (withCredentials) {
          options.xhrFields = {
            withCredentials: withCredentials
          };
        }

        // Only pass url to `ajax` options if not blank
        if (url) { options.url = url; }

        return rails.ajax(options);
      } else {
        return false;
      }
    },

    // Determines if the request is a cross domain request.
    isCrossDomain: function(url) {
      var originAnchor = document.createElement('a');
      originAnchor.href = location.href;
      var urlAnchor = document.createElement('a');

      try {
        urlAnchor.href = url;
        // This is a workaround to a IE bug.
        urlAnchor.href = urlAnchor.href;

        // If URL protocol is false or is a string containing a single colon
        // *and* host are false, assume it is not a cross-domain request
        // (should only be the case for IE7 and IE compatibility mode).
        // Otherwise, evaluate protocol and host of the URL against the origin
        // protocol and host.
        return !(((!urlAnchor.protocol || urlAnchor.protocol === ':') && !urlAnchor.host) ||
          (originAnchor.protocol + '//' + originAnchor.host ===
            urlAnchor.protocol + '//' + urlAnchor.host));
      } catch (e) {
        // If there is an error parsing the URL, assume it is crossDomain.
        return true;
      }
    },

    // Handles "data-method" on links such as:
    // <a href="/users/5" data-method="delete" rel="nofollow" data-confirm="Are you sure?">Delete</a>
    handleMethod: function(link) {
      var href = rails.href(link),
        method = link.data('method'),
        target = link.attr('target'),
        csrfToken = rails.csrfToken(),
        csrfParam = rails.csrfParam(),
        form = $('<form method="post" action="' + href + '"></form>'),
        metadataInput = '<input name="_method" value="' + method + '" type="hidden" />';

      if (csrfParam !== undefined && csrfToken !== undefined && !rails.isCrossDomain(href)) {
        metadataInput += '<input name="' + csrfParam + '" value="' + csrfToken + '" type="hidden" />';
      }

      if (target) { form.attr('target', target); }

      form.hide().append(metadataInput).appendTo('body');
      form.submit();
    },

    // Helper function that returns form elements that match the specified CSS selector
    // If form is actually a "form" element this will return associated elements outside the from that have
    // the html form attribute set
    formElements: function(form, selector) {
      return form.is('form') ? $(form[0].elements).filter(selector) : form.find(selector);
    },

    /* Disables form elements:
      - Caches element value in 'ujs:enable-with' data store
      - Replaces element text with value of 'data-disable-with' attribute
      - Sets disabled property to true
    */
    disableFormElements: function(form) {
      rails.formElements(form, rails.disableSelector).each(function() {
        rails.disableFormElement($(this));
      });
    },

    disableFormElement: function(element) {
      var method, replacement;

      method = element.is('button') ? 'html' : 'val';
      replacement = element.data('disable-with');

      if (replacement !== undefined) {
        element.data('ujs:enable-with', element[method]());
        element[method](replacement);
      }

      element.prop('disabled', true);
      element.data('ujs:disabled', true);
    },

    /* Re-enables disabled form elements:
      - Replaces element text with cached value from 'ujs:enable-with' data store (created in `disableFormElements`)
      - Sets disabled property to false
    */
    enableFormElements: function(form) {
      rails.formElements(form, rails.enableSelector).each(function() {
        rails.enableFormElement($(this));
      });
    },

    enableFormElement: function(element) {
      var method = element.is('button') ? 'html' : 'val';
      if (element.data('ujs:enable-with') !== undefined) {
        element[method](element.data('ujs:enable-with'));
        element.removeData('ujs:enable-with'); // clean up cache
      }
      element.prop('disabled', false);
      element.removeData('ujs:disabled');
    },

   /* For 'data-confirm' attribute:
      - Fires `confirm` event
      - Shows the confirmation dialog
      - Fires the `confirm:complete` event

      Returns `true` if no function stops the chain and user chose yes; `false` otherwise.
      Attaching a handler to the element's `confirm` event that returns a `falsy` value cancels the confirmation dialog.
      Attaching a handler to the element's `confirm:complete` event that returns a `falsy` value makes this function
      return false. The `confirm:complete` event is fired whether or not the user answered true or false to the dialog.
   */
    allowAction: function(element) {
      var message = element.data('confirm'),
          answer = false, callback;
      if (!message) { return true; }

      if (rails.fire(element, 'confirm')) {
        try {
          answer = rails.confirm(message);
        } catch (e) {
          (console.error || console.log).call(console, e.stack || e);
        }
        callback = rails.fire(element, 'confirm:complete', [answer]);
      }
      return answer && callback;
    },

    // Helper function which checks for blank inputs in a form that match the specified CSS selector
    blankInputs: function(form, specifiedSelector, nonBlank) {
      var foundInputs = $(),
        input,
        valueToCheck,
        radiosForNameWithNoneSelected,
        radioName,
        selector = specifiedSelector || 'input,textarea',
        requiredInputs = form.find(selector),
        checkedRadioButtonNames = {};

      requiredInputs.each(function() {
        input = $(this);
        if (input.is('input[type=radio]')) {

          // Don't count unchecked required radio as blank if other radio with same name is checked,
          // regardless of whether same-name radio input has required attribute or not. The spec
          // states https://www.w3.org/TR/html5/forms.html#the-required-attribute
          radioName = input.attr('name');

          // Skip if we've already seen the radio with this name.
          if (!checkedRadioButtonNames[radioName]) {

            // If none checked
            if (form.find('input[type=radio]:checked[name="' + radioName + '"]').length === 0) {
              radiosForNameWithNoneSelected = form.find(
                'input[type=radio][name="' + radioName + '"]');
              foundInputs = foundInputs.add(radiosForNameWithNoneSelected);
            }

            // We only need to check each name once.
            checkedRadioButtonNames[radioName] = radioName;
          }
        } else {
          valueToCheck = input.is('input[type=checkbox],input[type=radio]') ? input.is(':checked') : !!input.val();
          if (valueToCheck === nonBlank) {
            foundInputs = foundInputs.add(input);
          }
        }
      });
      return foundInputs.length ? foundInputs : false;
    },

    // Helper function which checks for non-blank inputs in a form that match the specified CSS selector
    nonBlankInputs: function(form, specifiedSelector) {
      return rails.blankInputs(form, specifiedSelector, true); // true specifies nonBlank
    },

    // Helper function, needed to provide consistent behavior in IE
    stopEverything: function(e) {
      $(e.target).trigger('ujs:everythingStopped');
      e.stopImmediatePropagation();
      return false;
    },

    //  Replace element's html with the 'data-disable-with' after storing original html
    //  and prevent clicking on it
    disableElement: function(element) {
      var replacement = element.data('disable-with');

      if (replacement !== undefined) {
        element.data('ujs:enable-with', element.html()); // store enabled state
        element.html(replacement);
      }

      element.bind('click.railsDisable', function(e) { // prevent further clicking
        return rails.stopEverything(e);
      });
      element.data('ujs:disabled', true);
    },

    // Restore element to its original state which was disabled by 'disableElement' above
    enableElement: function(element) {
      if (element.data('ujs:enable-with') !== undefined) {
        element.html(element.data('ujs:enable-with')); // set to old enabled state
        element.removeData('ujs:enable-with'); // clean up cache
      }
      element.unbind('click.railsDisable'); // enable element
      element.removeData('ujs:disabled');
    }
  };

  if (rails.fire($document, 'rails:attachBindings')) {

    $.ajaxPrefilter(function(options, originalOptions, xhr){ if ( !options.crossDomain ) { rails.CSRFProtection(xhr); }});

    // This event works the same as the load event, except that it fires every
    // time the page is loaded.
    //
    // See https://github.com/rails/jquery-ujs/issues/357
    // See https://developer.mozilla.org/en-US/docs/Using_Firefox_1.5_caching
    $(window).on('pageshow.rails', function () {
      $($.rails.enableSelector).each(function () {
        var element = $(this);

        if (element.data('ujs:disabled')) {
          $.rails.enableFormElement(element);
        }
      });

      $($.rails.linkDisableSelector).each(function () {
        var element = $(this);

        if (element.data('ujs:disabled')) {
          $.rails.enableElement(element);
        }
      });
    });

    $document.on('ajax:complete', rails.linkDisableSelector, function() {
        rails.enableElement($(this));
    });

    $document.on('ajax:complete', rails.buttonDisableSelector, function() {
        rails.enableFormElement($(this));
    });

    $document.on('click.rails', rails.linkClickSelector, function(e) {
      var link = $(this), method = link.data('method'), data = link.data('params'), metaClick = e.metaKey || e.ctrlKey;
      if (!rails.allowAction(link)) return rails.stopEverything(e);

      if (!metaClick && link.is(rails.linkDisableSelector)) rails.disableElement(link);

      if (rails.isRemote(link)) {
        if (metaClick && (!method || method === 'GET') && !data) { return true; }

        var handleRemote = rails.handleRemote(link);
        // Response from rails.handleRemote() will either be false or a deferred object promise.
        if (handleRemote === false) {
          rails.enableElement(link);
        } else {
          handleRemote.fail( function() { rails.enableElement(link); } );
        }
        return false;

      } else if (method) {
        rails.handleMethod(link);
        return false;
      }
    });

    $document.on('click.rails', rails.buttonClickSelector, function(e) {
      var button = $(this);

      if (!rails.allowAction(button) || !rails.isRemote(button)) return rails.stopEverything(e);

      if (button.is(rails.buttonDisableSelector)) rails.disableFormElement(button);

      var handleRemote = rails.handleRemote(button);
      // Response from rails.handleRemote() will either be false or a deferred object promise.
      if (handleRemote === false) {
        rails.enableFormElement(button);
      } else {
        handleRemote.fail( function() { rails.enableFormElement(button); } );
      }
      return false;
    });

    $document.on('change.rails', rails.inputChangeSelector, function(e) {
      var link = $(this);
      if (!rails.allowAction(link) || !rails.isRemote(link)) return rails.stopEverything(e);

      rails.handleRemote(link);
      return false;
    });

    $document.on('submit.rails', rails.formSubmitSelector, function(e) {
      var form = $(this),
        remote = rails.isRemote(form),
        blankRequiredInputs,
        nonBlankFileInputs;

      if (!rails.allowAction(form)) return rails.stopEverything(e);

      // Skip other logic when required values are missing or file upload is present
      if (form.attr('novalidate') === undefined) {
        if (form.data('ujs:formnovalidate-button') === undefined) {
          blankRequiredInputs = rails.blankInputs(form, rails.requiredInputSelector, false);
          if (blankRequiredInputs && rails.fire(form, 'ajax:aborted:required', [blankRequiredInputs])) {
            return rails.stopEverything(e);
          }
        } else {
          // Clear the formnovalidate in case the next button click is not on a formnovalidate button
          // Not strictly necessary to do here, since it is also reset on each button click, but just to be certain
          form.data('ujs:formnovalidate-button', undefined);
        }
      }

      if (remote) {
        nonBlankFileInputs = rails.nonBlankInputs(form, rails.fileInputSelector);
        if (nonBlankFileInputs) {
          // Slight timeout so that the submit button gets properly serialized
          // (make it easy for event handler to serialize form without disabled values)
          setTimeout(function(){ rails.disableFormElements(form); }, 13);
          var aborted = rails.fire(form, 'ajax:aborted:file', [nonBlankFileInputs]);

          // Re-enable form elements if event bindings return false (canceling normal form submission)
          if (!aborted) { setTimeout(function(){ rails.enableFormElements(form); }, 13); }

          return aborted;
        }

        rails.handleRemote(form);
        return false;

      } else {
        // Slight timeout so that the submit button gets properly serialized
        setTimeout(function(){ rails.disableFormElements(form); }, 13);
      }
    });

    $document.on('click.rails', rails.formInputClickSelector, function(event) {
      var button = $(this);

      if (!rails.allowAction(button)) return rails.stopEverything(event);

      // Register the pressed submit button
      var name = button.attr('name'),
        data = name ? {name:name, value:button.val()} : null;

      var form = button.closest('form');
      if (form.length === 0) {
        form = $('#' + button.attr('form'));
      }
      form.data('ujs:submit-button', data);

      // Save attributes from button
      form.data('ujs:formnovalidate-button', button.attr('formnovalidate'));
      form.data('ujs:submit-button-formaction', button.attr('formaction'));
      form.data('ujs:submit-button-formmethod', button.attr('formmethod'));
    });

    $document.on('ajax:send.rails', rails.formSubmitSelector, function(event) {
      if (this === event.target) rails.disableFormElements($(this));
    });

    $document.on('ajax:complete.rails', rails.formSubmitSelector, function(event) {
      if (this === event.target) rails.enableFormElements($(this));
    });

    $(function(){
      rails.refreshCSRFTokens();
    });
  }

})( jQuery );
!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=122)}([function(e,t,n){"use strict";e.exports=n(46)},function(e,t,n){e.exports=n(118)()},function(e,t,n){"use strict";e.exports=function(e,t,n,r,o,a,i,u){if(!e){var l;if(void 0===t)l=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var c=[n,r,o,a,i,u],s=0;(l=new Error(t.replace(/%s/g,function(){return c[s++]}))).name="Invariant Violation"}throw l.framesToPop=1,l}}},function(e,t,n){(function(e,r){var o;
/**
 * @license
 * Lodash <https://lodash.com/>
 * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */(function(){var a,i=200,u="Unsupported core-js use. Try https://npms.io/search?q=ponyfill.",l="Expected a function",c="__lodash_hash_undefined__",s=500,f="__lodash_placeholder__",p=1,d=2,h=4,m=1,v=2,y=1,g=2,b=4,E=8,w=16,_=32,x=64,k=128,S=256,N=512,O=30,T="...",C=800,P=16,j=1,R=2,I=1/0,A=9007199254740991,U=17976931348623157e292,M=NaN,z=4294967295,D=z-1,L=z>>>1,F=[["ary",k],["bind",y],["bindKey",g],["curry",E],["curryRight",w],["flip",N],["partial",_],["partialRight",x],["rearg",S]],W="[object Arguments]",B="[object Array]",$="[object AsyncFunction]",V="[object Boolean]",q="[object Date]",H="[object DOMException]",K="[object Error]",Q="[object Function]",G="[object GeneratorFunction]",Y="[object Map]",Z="[object Number]",X="[object Null]",J="[object Object]",ee="[object Proxy]",te="[object RegExp]",ne="[object Set]",re="[object String]",oe="[object Symbol]",ae="[object Undefined]",ie="[object WeakMap]",ue="[object WeakSet]",le="[object ArrayBuffer]",ce="[object DataView]",se="[object Float32Array]",fe="[object Float64Array]",pe="[object Int8Array]",de="[object Int16Array]",he="[object Int32Array]",me="[object Uint8Array]",ve="[object Uint8ClampedArray]",ye="[object Uint16Array]",ge="[object Uint32Array]",be=/\b__p \+= '';/g,Ee=/\b(__p \+=) '' \+/g,we=/(__e\(.*?\)|\b__t\)) \+\n'';/g,_e=/&(?:amp|lt|gt|quot|#39);/g,xe=/[&<>"']/g,ke=RegExp(_e.source),Se=RegExp(xe.source),Ne=/<%-([\s\S]+?)%>/g,Oe=/<%([\s\S]+?)%>/g,Te=/<%=([\s\S]+?)%>/g,Ce=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,Pe=/^\w*$/,je=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,Re=/[\\^$.*+?()[\]{}|]/g,Ie=RegExp(Re.source),Ae=/^\s+|\s+$/g,Ue=/^\s+/,Me=/\s+$/,ze=/\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,De=/\{\n\/\* \[wrapped with (.+)\] \*/,Le=/,? & /,Fe=/[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g,We=/\\(\\)?/g,Be=/\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g,$e=/\w*$/,Ve=/^[-+]0x[0-9a-f]+$/i,qe=/^0b[01]+$/i,He=/^\[object .+?Constructor\]$/,Ke=/^0o[0-7]+$/i,Qe=/^(?:0|[1-9]\d*)$/,Ge=/[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g,Ye=/($^)/,Ze=/['\n\r\u2028\u2029\\]/g,Xe="\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff",Je="\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000",et="[\\ud800-\\udfff]",tt="["+Je+"]",nt="["+Xe+"]",rt="\\d+",ot="[\\u2700-\\u27bf]",at="[a-z\\xdf-\\xf6\\xf8-\\xff]",it="[^\\ud800-\\udfff"+Je+rt+"\\u2700-\\u27bfa-z\\xdf-\\xf6\\xf8-\\xffA-Z\\xc0-\\xd6\\xd8-\\xde]",ut="\\ud83c[\\udffb-\\udfff]",lt="[^\\ud800-\\udfff]",ct="(?:\\ud83c[\\udde6-\\uddff]){2}",st="[\\ud800-\\udbff][\\udc00-\\udfff]",ft="[A-Z\\xc0-\\xd6\\xd8-\\xde]",pt="(?:"+at+"|"+it+")",dt="(?:"+ft+"|"+it+")",ht="(?:"+nt+"|"+ut+")"+"?",mt="[\\ufe0e\\ufe0f]?"+ht+("(?:\\u200d(?:"+[lt,ct,st].join("|")+")[\\ufe0e\\ufe0f]?"+ht+")*"),vt="(?:"+[ot,ct,st].join("|")+")"+mt,yt="(?:"+[lt+nt+"?",nt,ct,st,et].join("|")+")",gt=RegExp("['’]","g"),bt=RegExp(nt,"g"),Et=RegExp(ut+"(?="+ut+")|"+yt+mt,"g"),wt=RegExp([ft+"?"+at+"+(?:['’](?:d|ll|m|re|s|t|ve))?(?="+[tt,ft,"$"].join("|")+")",dt+"+(?:['’](?:D|LL|M|RE|S|T|VE))?(?="+[tt,ft+pt,"$"].join("|")+")",ft+"?"+pt+"+(?:['’](?:d|ll|m|re|s|t|ve))?",ft+"+(?:['’](?:D|LL|M|RE|S|T|VE))?","\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])","\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])",rt,vt].join("|"),"g"),_t=RegExp("[\\u200d\\ud800-\\udfff"+Xe+"\\ufe0e\\ufe0f]"),xt=/[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/,kt=["Array","Buffer","DataView","Date","Error","Float32Array","Float64Array","Function","Int8Array","Int16Array","Int32Array","Map","Math","Object","Promise","RegExp","Set","String","Symbol","TypeError","Uint8Array","Uint8ClampedArray","Uint16Array","Uint32Array","WeakMap","_","clearTimeout","isFinite","parseInt","setTimeout"],St=-1,Nt={};Nt[se]=Nt[fe]=Nt[pe]=Nt[de]=Nt[he]=Nt[me]=Nt[ve]=Nt[ye]=Nt[ge]=!0,Nt[W]=Nt[B]=Nt[le]=Nt[V]=Nt[ce]=Nt[q]=Nt[K]=Nt[Q]=Nt[Y]=Nt[Z]=Nt[J]=Nt[te]=Nt[ne]=Nt[re]=Nt[ie]=!1;var Ot={};Ot[W]=Ot[B]=Ot[le]=Ot[ce]=Ot[V]=Ot[q]=Ot[se]=Ot[fe]=Ot[pe]=Ot[de]=Ot[he]=Ot[Y]=Ot[Z]=Ot[J]=Ot[te]=Ot[ne]=Ot[re]=Ot[oe]=Ot[me]=Ot[ve]=Ot[ye]=Ot[ge]=!0,Ot[K]=Ot[Q]=Ot[ie]=!1;var Tt={"\\":"\\","'":"'","\n":"n","\r":"r","\u2028":"u2028","\u2029":"u2029"},Ct=parseFloat,Pt=parseInt,jt="object"==typeof e&&e&&e.Object===Object&&e,Rt="object"==typeof self&&self&&self.Object===Object&&self,It=jt||Rt||Function("return this")(),At=t&&!t.nodeType&&t,Ut=At&&"object"==typeof r&&r&&!r.nodeType&&r,Mt=Ut&&Ut.exports===At,zt=Mt&&jt.process,Dt=function(){try{var e=Ut&&Ut.require&&Ut.require("util").types;return e||zt&&zt.binding&&zt.binding("util")}catch(e){}}(),Lt=Dt&&Dt.isArrayBuffer,Ft=Dt&&Dt.isDate,Wt=Dt&&Dt.isMap,Bt=Dt&&Dt.isRegExp,$t=Dt&&Dt.isSet,Vt=Dt&&Dt.isTypedArray;function qt(e,t,n){switch(n.length){case 0:return e.call(t);case 1:return e.call(t,n[0]);case 2:return e.call(t,n[0],n[1]);case 3:return e.call(t,n[0],n[1],n[2])}return e.apply(t,n)}function Ht(e,t,n,r){for(var o=-1,a=null==e?0:e.length;++o<a;){var i=e[o];t(r,i,n(i),e)}return r}function Kt(e,t){for(var n=-1,r=null==e?0:e.length;++n<r&&!1!==t(e[n],n,e););return e}function Qt(e,t){for(var n=null==e?0:e.length;n--&&!1!==t(e[n],n,e););return e}function Gt(e,t){for(var n=-1,r=null==e?0:e.length;++n<r;)if(!t(e[n],n,e))return!1;return!0}function Yt(e,t){for(var n=-1,r=null==e?0:e.length,o=0,a=[];++n<r;){var i=e[n];t(i,n,e)&&(a[o++]=i)}return a}function Zt(e,t){return!!(null==e?0:e.length)&&ln(e,t,0)>-1}function Xt(e,t,n){for(var r=-1,o=null==e?0:e.length;++r<o;)if(n(t,e[r]))return!0;return!1}function Jt(e,t){for(var n=-1,r=null==e?0:e.length,o=Array(r);++n<r;)o[n]=t(e[n],n,e);return o}function en(e,t){for(var n=-1,r=t.length,o=e.length;++n<r;)e[o+n]=t[n];return e}function tn(e,t,n,r){var o=-1,a=null==e?0:e.length;for(r&&a&&(n=e[++o]);++o<a;)n=t(n,e[o],o,e);return n}function nn(e,t,n,r){var o=null==e?0:e.length;for(r&&o&&(n=e[--o]);o--;)n=t(n,e[o],o,e);return n}function rn(e,t){for(var n=-1,r=null==e?0:e.length;++n<r;)if(t(e[n],n,e))return!0;return!1}var on=pn("length");function an(e,t,n){var r;return n(e,function(e,n,o){if(t(e,n,o))return r=n,!1}),r}function un(e,t,n,r){for(var o=e.length,a=n+(r?1:-1);r?a--:++a<o;)if(t(e[a],a,e))return a;return-1}function ln(e,t,n){return t==t?function(e,t,n){var r=n-1,o=e.length;for(;++r<o;)if(e[r]===t)return r;return-1}(e,t,n):un(e,sn,n)}function cn(e,t,n,r){for(var o=n-1,a=e.length;++o<a;)if(r(e[o],t))return o;return-1}function sn(e){return e!=e}function fn(e,t){var n=null==e?0:e.length;return n?mn(e,t)/n:M}function pn(e){return function(t){return null==t?a:t[e]}}function dn(e){return function(t){return null==e?a:e[t]}}function hn(e,t,n,r,o){return o(e,function(e,o,a){n=r?(r=!1,e):t(n,e,o,a)}),n}function mn(e,t){for(var n,r=-1,o=e.length;++r<o;){var i=t(e[r]);i!==a&&(n=n===a?i:n+i)}return n}function vn(e,t){for(var n=-1,r=Array(e);++n<e;)r[n]=t(n);return r}function yn(e){return function(t){return e(t)}}function gn(e,t){return Jt(t,function(t){return e[t]})}function bn(e,t){return e.has(t)}function En(e,t){for(var n=-1,r=e.length;++n<r&&ln(t,e[n],0)>-1;);return n}function wn(e,t){for(var n=e.length;n--&&ln(t,e[n],0)>-1;);return n}var _n=dn({"À":"A","Á":"A","Â":"A","Ã":"A","Ä":"A","Å":"A","à":"a","á":"a","â":"a","ã":"a","ä":"a","å":"a","Ç":"C","ç":"c","Ð":"D","ð":"d","È":"E","É":"E","Ê":"E","Ë":"E","è":"e","é":"e","ê":"e","ë":"e","Ì":"I","Í":"I","Î":"I","Ï":"I","ì":"i","í":"i","î":"i","ï":"i","Ñ":"N","ñ":"n","Ò":"O","Ó":"O","Ô":"O","Õ":"O","Ö":"O","Ø":"O","ò":"o","ó":"o","ô":"o","õ":"o","ö":"o","ø":"o","Ù":"U","Ú":"U","Û":"U","Ü":"U","ù":"u","ú":"u","û":"u","ü":"u","Ý":"Y","ý":"y","ÿ":"y","Æ":"Ae","æ":"ae","Þ":"Th","þ":"th","ß":"ss","Ā":"A","Ă":"A","Ą":"A","ā":"a","ă":"a","ą":"a","Ć":"C","Ĉ":"C","Ċ":"C","Č":"C","ć":"c","ĉ":"c","ċ":"c","č":"c","Ď":"D","Đ":"D","ď":"d","đ":"d","Ē":"E","Ĕ":"E","Ė":"E","Ę":"E","Ě":"E","ē":"e","ĕ":"e","ė":"e","ę":"e","ě":"e","Ĝ":"G","Ğ":"G","Ġ":"G","Ģ":"G","ĝ":"g","ğ":"g","ġ":"g","ģ":"g","Ĥ":"H","Ħ":"H","ĥ":"h","ħ":"h","Ĩ":"I","Ī":"I","Ĭ":"I","Į":"I","İ":"I","ĩ":"i","ī":"i","ĭ":"i","į":"i","ı":"i","Ĵ":"J","ĵ":"j","Ķ":"K","ķ":"k","ĸ":"k","Ĺ":"L","Ļ":"L","Ľ":"L","Ŀ":"L","Ł":"L","ĺ":"l","ļ":"l","ľ":"l","ŀ":"l","ł":"l","Ń":"N","Ņ":"N","Ň":"N","Ŋ":"N","ń":"n","ņ":"n","ň":"n","ŋ":"n","Ō":"O","Ŏ":"O","Ő":"O","ō":"o","ŏ":"o","ő":"o","Ŕ":"R","Ŗ":"R","Ř":"R","ŕ":"r","ŗ":"r","ř":"r","Ś":"S","Ŝ":"S","Ş":"S","Š":"S","ś":"s","ŝ":"s","ş":"s","š":"s","Ţ":"T","Ť":"T","Ŧ":"T","ţ":"t","ť":"t","ŧ":"t","Ũ":"U","Ū":"U","Ŭ":"U","Ů":"U","Ű":"U","Ų":"U","ũ":"u","ū":"u","ŭ":"u","ů":"u","ű":"u","ų":"u","Ŵ":"W","ŵ":"w","Ŷ":"Y","ŷ":"y","Ÿ":"Y","Ź":"Z","Ż":"Z","Ž":"Z","ź":"z","ż":"z","ž":"z","Ĳ":"IJ","ĳ":"ij","Œ":"Oe","œ":"oe","ŉ":"'n","ſ":"s"}),xn=dn({"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;"});function kn(e){return"\\"+Tt[e]}function Sn(e){return _t.test(e)}function Nn(e){var t=-1,n=Array(e.size);return e.forEach(function(e,r){n[++t]=[r,e]}),n}function On(e,t){return function(n){return e(t(n))}}function Tn(e,t){for(var n=-1,r=e.length,o=0,a=[];++n<r;){var i=e[n];i!==t&&i!==f||(e[n]=f,a[o++]=n)}return a}function Cn(e){var t=-1,n=Array(e.size);return e.forEach(function(e){n[++t]=e}),n}function Pn(e){var t=-1,n=Array(e.size);return e.forEach(function(e){n[++t]=[e,e]}),n}function jn(e){return Sn(e)?function(e){var t=Et.lastIndex=0;for(;Et.test(e);)++t;return t}(e):on(e)}function Rn(e){return Sn(e)?function(e){return e.match(Et)||[]}(e):function(e){return e.split("")}(e)}var In=dn({"&amp;":"&","&lt;":"<","&gt;":">","&quot;":'"',"&#39;":"'"});var An=function e(t){var n,r=(t=null==t?It:An.defaults(It.Object(),t,An.pick(It,kt))).Array,o=t.Date,Xe=t.Error,Je=t.Function,et=t.Math,tt=t.Object,nt=t.RegExp,rt=t.String,ot=t.TypeError,at=r.prototype,it=Je.prototype,ut=tt.prototype,lt=t["__core-js_shared__"],ct=it.toString,st=ut.hasOwnProperty,ft=0,pt=(n=/[^.]+$/.exec(lt&&lt.keys&&lt.keys.IE_PROTO||""))?"Symbol(src)_1."+n:"",dt=ut.toString,ht=ct.call(tt),mt=It._,vt=nt("^"+ct.call(st).replace(Re,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),yt=Mt?t.Buffer:a,Et=t.Symbol,_t=t.Uint8Array,Tt=yt?yt.allocUnsafe:a,jt=On(tt.getPrototypeOf,tt),Rt=tt.create,At=ut.propertyIsEnumerable,Ut=at.splice,zt=Et?Et.isConcatSpreadable:a,Dt=Et?Et.iterator:a,on=Et?Et.toStringTag:a,dn=function(){try{var e=La(tt,"defineProperty");return e({},"",{}),e}catch(e){}}(),Un=t.clearTimeout!==It.clearTimeout&&t.clearTimeout,Mn=o&&o.now!==It.Date.now&&o.now,zn=t.setTimeout!==It.setTimeout&&t.setTimeout,Dn=et.ceil,Ln=et.floor,Fn=tt.getOwnPropertySymbols,Wn=yt?yt.isBuffer:a,Bn=t.isFinite,$n=at.join,Vn=On(tt.keys,tt),qn=et.max,Hn=et.min,Kn=o.now,Qn=t.parseInt,Gn=et.random,Yn=at.reverse,Zn=La(t,"DataView"),Xn=La(t,"Map"),Jn=La(t,"Promise"),er=La(t,"Set"),tr=La(t,"WeakMap"),nr=La(tt,"create"),rr=tr&&new tr,or={},ar=fi(Zn),ir=fi(Xn),ur=fi(Jn),lr=fi(er),cr=fi(tr),sr=Et?Et.prototype:a,fr=sr?sr.valueOf:a,pr=sr?sr.toString:a;function dr(e){if(Tu(e)&&!yu(e)&&!(e instanceof yr)){if(e instanceof vr)return e;if(st.call(e,"__wrapped__"))return pi(e)}return new vr(e)}var hr=function(){function e(){}return function(t){if(!Ou(t))return{};if(Rt)return Rt(t);e.prototype=t;var n=new e;return e.prototype=a,n}}();function mr(){}function vr(e,t){this.__wrapped__=e,this.__actions__=[],this.__chain__=!!t,this.__index__=0,this.__values__=a}function yr(e){this.__wrapped__=e,this.__actions__=[],this.__dir__=1,this.__filtered__=!1,this.__iteratees__=[],this.__takeCount__=z,this.__views__=[]}function gr(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}function br(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}function Er(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}function wr(e){var t=-1,n=null==e?0:e.length;for(this.__data__=new Er;++t<n;)this.add(e[t])}function _r(e){var t=this.__data__=new br(e);this.size=t.size}function xr(e,t){var n=yu(e),r=!n&&vu(e),o=!n&&!r&&wu(e),a=!n&&!r&&!o&&Mu(e),i=n||r||o||a,u=i?vn(e.length,rt):[],l=u.length;for(var c in e)!t&&!st.call(e,c)||i&&("length"==c||o&&("offset"==c||"parent"==c)||a&&("buffer"==c||"byteLength"==c||"byteOffset"==c)||Ha(c,l))||u.push(c);return u}function kr(e){var t=e.length;return t?e[_o(0,t-1)]:a}function Sr(e,t){return li(ra(e),Ar(t,0,e.length))}function Nr(e){return li(ra(e))}function Or(e,t,n){(n===a||du(e[t],n))&&(n!==a||t in e)||Rr(e,t,n)}function Tr(e,t,n){var r=e[t];st.call(e,t)&&du(r,n)&&(n!==a||t in e)||Rr(e,t,n)}function Cr(e,t){for(var n=e.length;n--;)if(du(e[n][0],t))return n;return-1}function Pr(e,t,n,r){return Lr(e,function(e,o,a){t(r,e,n(e),a)}),r}function jr(e,t){return e&&oa(t,ol(t),e)}function Rr(e,t,n){"__proto__"==t&&dn?dn(e,t,{configurable:!0,enumerable:!0,value:n,writable:!0}):e[t]=n}function Ir(e,t){for(var n=-1,o=t.length,i=r(o),u=null==e;++n<o;)i[n]=u?a:Ju(e,t[n]);return i}function Ar(e,t,n){return e==e&&(n!==a&&(e=e<=n?e:n),t!==a&&(e=e>=t?e:t)),e}function Ur(e,t,n,r,o,i){var u,l=t&p,c=t&d,s=t&h;if(n&&(u=o?n(e,r,o,i):n(e)),u!==a)return u;if(!Ou(e))return e;var f=yu(e);if(f){if(u=function(e){var t=e.length,n=new e.constructor(t);t&&"string"==typeof e[0]&&st.call(e,"index")&&(n.index=e.index,n.input=e.input);return n}(e),!l)return ra(e,u)}else{var m=Ba(e),v=m==Q||m==G;if(wu(e))return Zo(e,l);if(m==J||m==W||v&&!o){if(u=c||v?{}:Va(e),!l)return c?function(e,t){return oa(e,Wa(e),t)}(e,function(e,t){return e&&oa(t,al(t),e)}(u,e)):function(e,t){return oa(e,Fa(e),t)}(e,jr(u,e))}else{if(!Ot[m])return o?e:{};u=function(e,t,n){var r=e.constructor;switch(t){case le:return Xo(e);case V:case q:return new r(+e);case ce:return function(e,t){var n=t?Xo(e.buffer):e.buffer;return new e.constructor(n,e.byteOffset,e.byteLength)}(e,n);case se:case fe:case pe:case de:case he:case me:case ve:case ye:case ge:return Jo(e,n);case Y:return new r;case Z:case re:return new r(e);case te:return function(e){var t=new e.constructor(e.source,$e.exec(e));return t.lastIndex=e.lastIndex,t}(e);case ne:return new r;case oe:return o=e,fr?tt(fr.call(o)):{}}var o}(e,m,l)}}i||(i=new _r);var y=i.get(e);if(y)return y;i.set(e,u),Iu(e)?e.forEach(function(r){u.add(Ur(r,t,n,r,e,i))}):Cu(e)&&e.forEach(function(r,o){u.set(o,Ur(r,t,n,o,e,i))});var g=f?a:(s?c?Ra:ja:c?al:ol)(e);return Kt(g||e,function(r,o){g&&(r=e[o=r]),Tr(u,o,Ur(r,t,n,o,e,i))}),u}function Mr(e,t,n){var r=n.length;if(null==e)return!r;for(e=tt(e);r--;){var o=n[r],i=t[o],u=e[o];if(u===a&&!(o in e)||!i(u))return!1}return!0}function zr(e,t,n){if("function"!=typeof e)throw new ot(l);return oi(function(){e.apply(a,n)},t)}function Dr(e,t,n,r){var o=-1,a=Zt,u=!0,l=e.length,c=[],s=t.length;if(!l)return c;n&&(t=Jt(t,yn(n))),r?(a=Xt,u=!1):t.length>=i&&(a=bn,u=!1,t=new wr(t));e:for(;++o<l;){var f=e[o],p=null==n?f:n(f);if(f=r||0!==f?f:0,u&&p==p){for(var d=s;d--;)if(t[d]===p)continue e;c.push(f)}else a(t,p,r)||c.push(f)}return c}dr.templateSettings={escape:Ne,evaluate:Oe,interpolate:Te,variable:"",imports:{_:dr}},dr.prototype=mr.prototype,dr.prototype.constructor=dr,vr.prototype=hr(mr.prototype),vr.prototype.constructor=vr,yr.prototype=hr(mr.prototype),yr.prototype.constructor=yr,gr.prototype.clear=function(){this.__data__=nr?nr(null):{},this.size=0},gr.prototype.delete=function(e){var t=this.has(e)&&delete this.__data__[e];return this.size-=t?1:0,t},gr.prototype.get=function(e){var t=this.__data__;if(nr){var n=t[e];return n===c?a:n}return st.call(t,e)?t[e]:a},gr.prototype.has=function(e){var t=this.__data__;return nr?t[e]!==a:st.call(t,e)},gr.prototype.set=function(e,t){var n=this.__data__;return this.size+=this.has(e)?0:1,n[e]=nr&&t===a?c:t,this},br.prototype.clear=function(){this.__data__=[],this.size=0},br.prototype.delete=function(e){var t=this.__data__,n=Cr(t,e);return!(n<0)&&(n==t.length-1?t.pop():Ut.call(t,n,1),--this.size,!0)},br.prototype.get=function(e){var t=this.__data__,n=Cr(t,e);return n<0?a:t[n][1]},br.prototype.has=function(e){return Cr(this.__data__,e)>-1},br.prototype.set=function(e,t){var n=this.__data__,r=Cr(n,e);return r<0?(++this.size,n.push([e,t])):n[r][1]=t,this},Er.prototype.clear=function(){this.size=0,this.__data__={hash:new gr,map:new(Xn||br),string:new gr}},Er.prototype.delete=function(e){var t=za(this,e).delete(e);return this.size-=t?1:0,t},Er.prototype.get=function(e){return za(this,e).get(e)},Er.prototype.has=function(e){return za(this,e).has(e)},Er.prototype.set=function(e,t){var n=za(this,e),r=n.size;return n.set(e,t),this.size+=n.size==r?0:1,this},wr.prototype.add=wr.prototype.push=function(e){return this.__data__.set(e,c),this},wr.prototype.has=function(e){return this.__data__.has(e)},_r.prototype.clear=function(){this.__data__=new br,this.size=0},_r.prototype.delete=function(e){var t=this.__data__,n=t.delete(e);return this.size=t.size,n},_r.prototype.get=function(e){return this.__data__.get(e)},_r.prototype.has=function(e){return this.__data__.has(e)},_r.prototype.set=function(e,t){var n=this.__data__;if(n instanceof br){var r=n.__data__;if(!Xn||r.length<i-1)return r.push([e,t]),this.size=++n.size,this;n=this.__data__=new Er(r)}return n.set(e,t),this.size=n.size,this};var Lr=ua(Kr),Fr=ua(Qr,!0);function Wr(e,t){var n=!0;return Lr(e,function(e,r,o){return n=!!t(e,r,o)}),n}function Br(e,t,n){for(var r=-1,o=e.length;++r<o;){var i=e[r],u=t(i);if(null!=u&&(l===a?u==u&&!Uu(u):n(u,l)))var l=u,c=i}return c}function $r(e,t){var n=[];return Lr(e,function(e,r,o){t(e,r,o)&&n.push(e)}),n}function Vr(e,t,n,r,o){var a=-1,i=e.length;for(n||(n=qa),o||(o=[]);++a<i;){var u=e[a];t>0&&n(u)?t>1?Vr(u,t-1,n,r,o):en(o,u):r||(o[o.length]=u)}return o}var qr=la(),Hr=la(!0);function Kr(e,t){return e&&qr(e,t,ol)}function Qr(e,t){return e&&Hr(e,t,ol)}function Gr(e,t){return Yt(t,function(t){return ku(e[t])})}function Yr(e,t){for(var n=0,r=(t=Ko(t,e)).length;null!=e&&n<r;)e=e[si(t[n++])];return n&&n==r?e:a}function Zr(e,t,n){var r=t(e);return yu(e)?r:en(r,n(e))}function Xr(e){return null==e?e===a?ae:X:on&&on in tt(e)?function(e){var t=st.call(e,on),n=e[on];try{e[on]=a;var r=!0}catch(e){}var o=dt.call(e);r&&(t?e[on]=n:delete e[on]);return o}(e):function(e){return dt.call(e)}(e)}function Jr(e,t){return e>t}function eo(e,t){return null!=e&&st.call(e,t)}function to(e,t){return null!=e&&t in tt(e)}function no(e,t,n){for(var o=n?Xt:Zt,i=e[0].length,u=e.length,l=u,c=r(u),s=1/0,f=[];l--;){var p=e[l];l&&t&&(p=Jt(p,yn(t))),s=Hn(p.length,s),c[l]=!n&&(t||i>=120&&p.length>=120)?new wr(l&&p):a}p=e[0];var d=-1,h=c[0];e:for(;++d<i&&f.length<s;){var m=p[d],v=t?t(m):m;if(m=n||0!==m?m:0,!(h?bn(h,v):o(f,v,n))){for(l=u;--l;){var y=c[l];if(!(y?bn(y,v):o(e[l],v,n)))continue e}h&&h.push(v),f.push(m)}}return f}function ro(e,t,n){var r=null==(e=ti(e,t=Ko(t,e)))?e:e[si(xi(t))];return null==r?a:qt(r,e,n)}function oo(e){return Tu(e)&&Xr(e)==W}function ao(e,t,n,r,o){return e===t||(null==e||null==t||!Tu(e)&&!Tu(t)?e!=e&&t!=t:function(e,t,n,r,o,i){var u=yu(e),l=yu(t),c=u?B:Ba(e),s=l?B:Ba(t),f=(c=c==W?J:c)==J,p=(s=s==W?J:s)==J,d=c==s;if(d&&wu(e)){if(!wu(t))return!1;u=!0,f=!1}if(d&&!f)return i||(i=new _r),u||Mu(e)?Ca(e,t,n,r,o,i):function(e,t,n,r,o,a,i){switch(n){case ce:if(e.byteLength!=t.byteLength||e.byteOffset!=t.byteOffset)return!1;e=e.buffer,t=t.buffer;case le:return!(e.byteLength!=t.byteLength||!a(new _t(e),new _t(t)));case V:case q:case Z:return du(+e,+t);case K:return e.name==t.name&&e.message==t.message;case te:case re:return e==t+"";case Y:var u=Nn;case ne:var l=r&m;if(u||(u=Cn),e.size!=t.size&&!l)return!1;var c=i.get(e);if(c)return c==t;r|=v,i.set(e,t);var s=Ca(u(e),u(t),r,o,a,i);return i.delete(e),s;case oe:if(fr)return fr.call(e)==fr.call(t)}return!1}(e,t,c,n,r,o,i);if(!(n&m)){var h=f&&st.call(e,"__wrapped__"),y=p&&st.call(t,"__wrapped__");if(h||y){var g=h?e.value():e,b=y?t.value():t;return i||(i=new _r),o(g,b,n,r,i)}}if(!d)return!1;return i||(i=new _r),function(e,t,n,r,o,i){var u=n&m,l=ja(e),c=l.length,s=ja(t).length;if(c!=s&&!u)return!1;var f=c;for(;f--;){var p=l[f];if(!(u?p in t:st.call(t,p)))return!1}var d=i.get(e);if(d&&i.get(t))return d==t;var h=!0;i.set(e,t),i.set(t,e);var v=u;for(;++f<c;){p=l[f];var y=e[p],g=t[p];if(r)var b=u?r(g,y,p,t,e,i):r(y,g,p,e,t,i);if(!(b===a?y===g||o(y,g,n,r,i):b)){h=!1;break}v||(v="constructor"==p)}if(h&&!v){var E=e.constructor,w=t.constructor;E!=w&&"constructor"in e&&"constructor"in t&&!("function"==typeof E&&E instanceof E&&"function"==typeof w&&w instanceof w)&&(h=!1)}return i.delete(e),i.delete(t),h}(e,t,n,r,o,i)}(e,t,n,r,ao,o))}function io(e,t,n,r){var o=n.length,i=o,u=!r;if(null==e)return!i;for(e=tt(e);o--;){var l=n[o];if(u&&l[2]?l[1]!==e[l[0]]:!(l[0]in e))return!1}for(;++o<i;){var c=(l=n[o])[0],s=e[c],f=l[1];if(u&&l[2]){if(s===a&&!(c in e))return!1}else{var p=new _r;if(r)var d=r(s,f,c,e,t,p);if(!(d===a?ao(f,s,m|v,r,p):d))return!1}}return!0}function uo(e){return!(!Ou(e)||(t=e,pt&&pt in t))&&(ku(e)?vt:He).test(fi(e));var t}function lo(e){return"function"==typeof e?e:null==e?Pl:"object"==typeof e?yu(e)?mo(e[0],e[1]):ho(e):Ll(e)}function co(e){if(!Za(e))return Vn(e);var t=[];for(var n in tt(e))st.call(e,n)&&"constructor"!=n&&t.push(n);return t}function so(e){if(!Ou(e))return function(e){var t=[];if(null!=e)for(var n in tt(e))t.push(n);return t}(e);var t=Za(e),n=[];for(var r in e)("constructor"!=r||!t&&st.call(e,r))&&n.push(r);return n}function fo(e,t){return e<t}function po(e,t){var n=-1,o=bu(e)?r(e.length):[];return Lr(e,function(e,r,a){o[++n]=t(e,r,a)}),o}function ho(e){var t=Da(e);return 1==t.length&&t[0][2]?Ja(t[0][0],t[0][1]):function(n){return n===e||io(n,e,t)}}function mo(e,t){return Qa(e)&&Xa(t)?Ja(si(e),t):function(n){var r=Ju(n,e);return r===a&&r===t?el(n,e):ao(t,r,m|v)}}function vo(e,t,n,r,o){e!==t&&qr(t,function(i,u){if(o||(o=new _r),Ou(i))!function(e,t,n,r,o,i,u){var l=ni(e,n),c=ni(t,n),s=u.get(c);if(s)return void Or(e,n,s);var f=i?i(l,c,n+"",e,t,u):a,p=f===a;if(p){var d=yu(c),h=!d&&wu(c),m=!d&&!h&&Mu(c);f=c,d||h||m?yu(l)?f=l:Eu(l)?f=ra(l):h?(p=!1,f=Zo(c,!0)):m?(p=!1,f=Jo(c,!0)):f=[]:ju(c)||vu(c)?(f=l,vu(l)?f=Vu(l):Ou(l)&&!ku(l)||(f=Va(c))):p=!1}p&&(u.set(c,f),o(f,c,r,i,u),u.delete(c));Or(e,n,f)}(e,t,u,n,vo,r,o);else{var l=r?r(ni(e,u),i,u+"",e,t,o):a;l===a&&(l=i),Or(e,u,l)}},al)}function yo(e,t){var n=e.length;if(n)return Ha(t+=t<0?n:0,n)?e[t]:a}function go(e,t,n){var r=-1;return t=Jt(t.length?t:[Pl],yn(Ma())),function(e,t){var n=e.length;for(e.sort(t);n--;)e[n]=e[n].value;return e}(po(e,function(e,n,o){return{criteria:Jt(t,function(t){return t(e)}),index:++r,value:e}}),function(e,t){return function(e,t,n){var r=-1,o=e.criteria,a=t.criteria,i=o.length,u=n.length;for(;++r<i;){var l=ea(o[r],a[r]);if(l){if(r>=u)return l;var c=n[r];return l*("desc"==c?-1:1)}}return e.index-t.index}(e,t,n)})}function bo(e,t,n){for(var r=-1,o=t.length,a={};++r<o;){var i=t[r],u=Yr(e,i);n(u,i)&&Oo(a,Ko(i,e),u)}return a}function Eo(e,t,n,r){var o=r?cn:ln,a=-1,i=t.length,u=e;for(e===t&&(t=ra(t)),n&&(u=Jt(e,yn(n)));++a<i;)for(var l=0,c=t[a],s=n?n(c):c;(l=o(u,s,l,r))>-1;)u!==e&&Ut.call(u,l,1),Ut.call(e,l,1);return e}function wo(e,t){for(var n=e?t.length:0,r=n-1;n--;){var o=t[n];if(n==r||o!==a){var a=o;Ha(o)?Ut.call(e,o,1):Lo(e,o)}}return e}function _o(e,t){return e+Ln(Gn()*(t-e+1))}function xo(e,t){var n="";if(!e||t<1||t>A)return n;do{t%2&&(n+=e),(t=Ln(t/2))&&(e+=e)}while(t);return n}function ko(e,t){return ai(ei(e,t,Pl),e+"")}function So(e){return kr(dl(e))}function No(e,t){var n=dl(e);return li(n,Ar(t,0,n.length))}function Oo(e,t,n,r){if(!Ou(e))return e;for(var o=-1,i=(t=Ko(t,e)).length,u=i-1,l=e;null!=l&&++o<i;){var c=si(t[o]),s=n;if(o!=u){var f=l[c];(s=r?r(f,c,l):a)===a&&(s=Ou(f)?f:Ha(t[o+1])?[]:{})}Tr(l,c,s),l=l[c]}return e}var To=rr?function(e,t){return rr.set(e,t),e}:Pl,Co=dn?function(e,t){return dn(e,"toString",{configurable:!0,enumerable:!1,value:Ol(t),writable:!0})}:Pl;function Po(e){return li(dl(e))}function jo(e,t,n){var o=-1,a=e.length;t<0&&(t=-t>a?0:a+t),(n=n>a?a:n)<0&&(n+=a),a=t>n?0:n-t>>>0,t>>>=0;for(var i=r(a);++o<a;)i[o]=e[o+t];return i}function Ro(e,t){var n;return Lr(e,function(e,r,o){return!(n=t(e,r,o))}),!!n}function Io(e,t,n){var r=0,o=null==e?r:e.length;if("number"==typeof t&&t==t&&o<=L){for(;r<o;){var a=r+o>>>1,i=e[a];null!==i&&!Uu(i)&&(n?i<=t:i<t)?r=a+1:o=a}return o}return Ao(e,t,Pl,n)}function Ao(e,t,n,r){t=n(t);for(var o=0,i=null==e?0:e.length,u=t!=t,l=null===t,c=Uu(t),s=t===a;o<i;){var f=Ln((o+i)/2),p=n(e[f]),d=p!==a,h=null===p,m=p==p,v=Uu(p);if(u)var y=r||m;else y=s?m&&(r||d):l?m&&d&&(r||!h):c?m&&d&&!h&&(r||!v):!h&&!v&&(r?p<=t:p<t);y?o=f+1:i=f}return Hn(i,D)}function Uo(e,t){for(var n=-1,r=e.length,o=0,a=[];++n<r;){var i=e[n],u=t?t(i):i;if(!n||!du(u,l)){var l=u;a[o++]=0===i?0:i}}return a}function Mo(e){return"number"==typeof e?e:Uu(e)?M:+e}function zo(e){if("string"==typeof e)return e;if(yu(e))return Jt(e,zo)+"";if(Uu(e))return pr?pr.call(e):"";var t=e+"";return"0"==t&&1/e==-I?"-0":t}function Do(e,t,n){var r=-1,o=Zt,a=e.length,u=!0,l=[],c=l;if(n)u=!1,o=Xt;else if(a>=i){var s=t?null:xa(e);if(s)return Cn(s);u=!1,o=bn,c=new wr}else c=t?[]:l;e:for(;++r<a;){var f=e[r],p=t?t(f):f;if(f=n||0!==f?f:0,u&&p==p){for(var d=c.length;d--;)if(c[d]===p)continue e;t&&c.push(p),l.push(f)}else o(c,p,n)||(c!==l&&c.push(p),l.push(f))}return l}function Lo(e,t){return null==(e=ti(e,t=Ko(t,e)))||delete e[si(xi(t))]}function Fo(e,t,n,r){return Oo(e,t,n(Yr(e,t)),r)}function Wo(e,t,n,r){for(var o=e.length,a=r?o:-1;(r?a--:++a<o)&&t(e[a],a,e););return n?jo(e,r?0:a,r?a+1:o):jo(e,r?a+1:0,r?o:a)}function Bo(e,t){var n=e;return n instanceof yr&&(n=n.value()),tn(t,function(e,t){return t.func.apply(t.thisArg,en([e],t.args))},n)}function $o(e,t,n){var o=e.length;if(o<2)return o?Do(e[0]):[];for(var a=-1,i=r(o);++a<o;)for(var u=e[a],l=-1;++l<o;)l!=a&&(i[a]=Dr(i[a]||u,e[l],t,n));return Do(Vr(i,1),t,n)}function Vo(e,t,n){for(var r=-1,o=e.length,i=t.length,u={};++r<o;){var l=r<i?t[r]:a;n(u,e[r],l)}return u}function qo(e){return Eu(e)?e:[]}function Ho(e){return"function"==typeof e?e:Pl}function Ko(e,t){return yu(e)?e:Qa(e,t)?[e]:ci(qu(e))}var Qo=ko;function Go(e,t,n){var r=e.length;return n=n===a?r:n,!t&&n>=r?e:jo(e,t,n)}var Yo=Un||function(e){return It.clearTimeout(e)};function Zo(e,t){if(t)return e.slice();var n=e.length,r=Tt?Tt(n):new e.constructor(n);return e.copy(r),r}function Xo(e){var t=new e.constructor(e.byteLength);return new _t(t).set(new _t(e)),t}function Jo(e,t){var n=t?Xo(e.buffer):e.buffer;return new e.constructor(n,e.byteOffset,e.length)}function ea(e,t){if(e!==t){var n=e!==a,r=null===e,o=e==e,i=Uu(e),u=t!==a,l=null===t,c=t==t,s=Uu(t);if(!l&&!s&&!i&&e>t||i&&u&&c&&!l&&!s||r&&u&&c||!n&&c||!o)return 1;if(!r&&!i&&!s&&e<t||s&&n&&o&&!r&&!i||l&&n&&o||!u&&o||!c)return-1}return 0}function ta(e,t,n,o){for(var a=-1,i=e.length,u=n.length,l=-1,c=t.length,s=qn(i-u,0),f=r(c+s),p=!o;++l<c;)f[l]=t[l];for(;++a<u;)(p||a<i)&&(f[n[a]]=e[a]);for(;s--;)f[l++]=e[a++];return f}function na(e,t,n,o){for(var a=-1,i=e.length,u=-1,l=n.length,c=-1,s=t.length,f=qn(i-l,0),p=r(f+s),d=!o;++a<f;)p[a]=e[a];for(var h=a;++c<s;)p[h+c]=t[c];for(;++u<l;)(d||a<i)&&(p[h+n[u]]=e[a++]);return p}function ra(e,t){var n=-1,o=e.length;for(t||(t=r(o));++n<o;)t[n]=e[n];return t}function oa(e,t,n,r){var o=!n;n||(n={});for(var i=-1,u=t.length;++i<u;){var l=t[i],c=r?r(n[l],e[l],l,n,e):a;c===a&&(c=e[l]),o?Rr(n,l,c):Tr(n,l,c)}return n}function aa(e,t){return function(n,r){var o=yu(n)?Ht:Pr,a=t?t():{};return o(n,e,Ma(r,2),a)}}function ia(e){return ko(function(t,n){var r=-1,o=n.length,i=o>1?n[o-1]:a,u=o>2?n[2]:a;for(i=e.length>3&&"function"==typeof i?(o--,i):a,u&&Ka(n[0],n[1],u)&&(i=o<3?a:i,o=1),t=tt(t);++r<o;){var l=n[r];l&&e(t,l,r,i)}return t})}function ua(e,t){return function(n,r){if(null==n)return n;if(!bu(n))return e(n,r);for(var o=n.length,a=t?o:-1,i=tt(n);(t?a--:++a<o)&&!1!==r(i[a],a,i););return n}}function la(e){return function(t,n,r){for(var o=-1,a=tt(t),i=r(t),u=i.length;u--;){var l=i[e?u:++o];if(!1===n(a[l],l,a))break}return t}}function ca(e){return function(t){var n=Sn(t=qu(t))?Rn(t):a,r=n?n[0]:t.charAt(0),o=n?Go(n,1).join(""):t.slice(1);return r[e]()+o}}function sa(e){return function(t){return tn(kl(vl(t).replace(gt,"")),e,"")}}function fa(e){return function(){var t=arguments;switch(t.length){case 0:return new e;case 1:return new e(t[0]);case 2:return new e(t[0],t[1]);case 3:return new e(t[0],t[1],t[2]);case 4:return new e(t[0],t[1],t[2],t[3]);case 5:return new e(t[0],t[1],t[2],t[3],t[4]);case 6:return new e(t[0],t[1],t[2],t[3],t[4],t[5]);case 7:return new e(t[0],t[1],t[2],t[3],t[4],t[5],t[6])}var n=hr(e.prototype),r=e.apply(n,t);return Ou(r)?r:n}}function pa(e){return function(t,n,r){var o=tt(t);if(!bu(t)){var i=Ma(n,3);t=ol(t),n=function(e){return i(o[e],e,o)}}var u=e(t,n,r);return u>-1?o[i?t[u]:u]:a}}function da(e){return Pa(function(t){var n=t.length,r=n,o=vr.prototype.thru;for(e&&t.reverse();r--;){var i=t[r];if("function"!=typeof i)throw new ot(l);if(o&&!u&&"wrapper"==Aa(i))var u=new vr([],!0)}for(r=u?r:n;++r<n;){var c=Aa(i=t[r]),s="wrapper"==c?Ia(i):a;u=s&&Ga(s[0])&&s[1]==(k|E|_|S)&&!s[4].length&&1==s[9]?u[Aa(s[0])].apply(u,s[3]):1==i.length&&Ga(i)?u[c]():u.thru(i)}return function(){var e=arguments,r=e[0];if(u&&1==e.length&&yu(r))return u.plant(r).value();for(var o=0,a=n?t[o].apply(this,e):r;++o<n;)a=t[o].call(this,a);return a}})}function ha(e,t,n,o,i,u,l,c,s,f){var p=t&k,d=t&y,h=t&g,m=t&(E|w),v=t&N,b=h?a:fa(e);return function y(){for(var g=arguments.length,E=r(g),w=g;w--;)E[w]=arguments[w];if(m)var _=Ua(y),x=function(e,t){for(var n=e.length,r=0;n--;)e[n]===t&&++r;return r}(E,_);if(o&&(E=ta(E,o,i,m)),u&&(E=na(E,u,l,m)),g-=x,m&&g<f){var k=Tn(E,_);return wa(e,t,ha,y.placeholder,n,E,k,c,s,f-g)}var S=d?n:this,N=h?S[e]:e;return g=E.length,c?E=function(e,t){for(var n=e.length,r=Hn(t.length,n),o=ra(e);r--;){var i=t[r];e[r]=Ha(i,n)?o[i]:a}return e}(E,c):v&&g>1&&E.reverse(),p&&s<g&&(E.length=s),this&&this!==It&&this instanceof y&&(N=b||fa(N)),N.apply(S,E)}}function ma(e,t){return function(n,r){return function(e,t,n,r){return Kr(e,function(e,o,a){t(r,n(e),o,a)}),r}(n,e,t(r),{})}}function va(e,t){return function(n,r){var o;if(n===a&&r===a)return t;if(n!==a&&(o=n),r!==a){if(o===a)return r;"string"==typeof n||"string"==typeof r?(n=zo(n),r=zo(r)):(n=Mo(n),r=Mo(r)),o=e(n,r)}return o}}function ya(e){return Pa(function(t){return t=Jt(t,yn(Ma())),ko(function(n){var r=this;return e(t,function(e){return qt(e,r,n)})})})}function ga(e,t){var n=(t=t===a?" ":zo(t)).length;if(n<2)return n?xo(t,e):t;var r=xo(t,Dn(e/jn(t)));return Sn(t)?Go(Rn(r),0,e).join(""):r.slice(0,e)}function ba(e){return function(t,n,o){return o&&"number"!=typeof o&&Ka(t,n,o)&&(n=o=a),t=Fu(t),n===a?(n=t,t=0):n=Fu(n),function(e,t,n,o){for(var a=-1,i=qn(Dn((t-e)/(n||1)),0),u=r(i);i--;)u[o?i:++a]=e,e+=n;return u}(t,n,o=o===a?t<n?1:-1:Fu(o),e)}}function Ea(e){return function(t,n){return"string"==typeof t&&"string"==typeof n||(t=$u(t),n=$u(n)),e(t,n)}}function wa(e,t,n,r,o,i,u,l,c,s){var f=t&E;t|=f?_:x,(t&=~(f?x:_))&b||(t&=~(y|g));var p=[e,t,o,f?i:a,f?u:a,f?a:i,f?a:u,l,c,s],d=n.apply(a,p);return Ga(e)&&ri(d,p),d.placeholder=r,ii(d,e,t)}function _a(e){var t=et[e];return function(e,n){if(e=$u(e),(n=null==n?0:Hn(Wu(n),292))&&Bn(e)){var r=(qu(e)+"e").split("e");return+((r=(qu(t(r[0]+"e"+(+r[1]+n)))+"e").split("e"))[0]+"e"+(+r[1]-n))}return t(e)}}var xa=er&&1/Cn(new er([,-0]))[1]==I?function(e){return new er(e)}:Ul;function ka(e){return function(t){var n=Ba(t);return n==Y?Nn(t):n==ne?Pn(t):function(e,t){return Jt(t,function(t){return[t,e[t]]})}(t,e(t))}}function Sa(e,t,n,o,i,u,c,s){var p=t&g;if(!p&&"function"!=typeof e)throw new ot(l);var d=o?o.length:0;if(d||(t&=~(_|x),o=i=a),c=c===a?c:qn(Wu(c),0),s=s===a?s:Wu(s),d-=i?i.length:0,t&x){var h=o,m=i;o=i=a}var v=p?a:Ia(e),N=[e,t,n,o,i,h,m,u,c,s];if(v&&function(e,t){var n=e[1],r=t[1],o=n|r,a=o<(y|g|k),i=r==k&&n==E||r==k&&n==S&&e[7].length<=t[8]||r==(k|S)&&t[7].length<=t[8]&&n==E;if(!a&&!i)return e;r&y&&(e[2]=t[2],o|=n&y?0:b);var u=t[3];if(u){var l=e[3];e[3]=l?ta(l,u,t[4]):u,e[4]=l?Tn(e[3],f):t[4]}(u=t[5])&&(l=e[5],e[5]=l?na(l,u,t[6]):u,e[6]=l?Tn(e[5],f):t[6]);(u=t[7])&&(e[7]=u);r&k&&(e[8]=null==e[8]?t[8]:Hn(e[8],t[8]));null==e[9]&&(e[9]=t[9]);e[0]=t[0],e[1]=o}(N,v),e=N[0],t=N[1],n=N[2],o=N[3],i=N[4],!(s=N[9]=N[9]===a?p?0:e.length:qn(N[9]-d,0))&&t&(E|w)&&(t&=~(E|w)),t&&t!=y)O=t==E||t==w?function(e,t,n){var o=fa(e);return function i(){for(var u=arguments.length,l=r(u),c=u,s=Ua(i);c--;)l[c]=arguments[c];var f=u<3&&l[0]!==s&&l[u-1]!==s?[]:Tn(l,s);return(u-=f.length)<n?wa(e,t,ha,i.placeholder,a,l,f,a,a,n-u):qt(this&&this!==It&&this instanceof i?o:e,this,l)}}(e,t,s):t!=_&&t!=(y|_)||i.length?ha.apply(a,N):function(e,t,n,o){var a=t&y,i=fa(e);return function t(){for(var u=-1,l=arguments.length,c=-1,s=o.length,f=r(s+l),p=this&&this!==It&&this instanceof t?i:e;++c<s;)f[c]=o[c];for(;l--;)f[c++]=arguments[++u];return qt(p,a?n:this,f)}}(e,t,n,o);else var O=function(e,t,n){var r=t&y,o=fa(e);return function t(){return(this&&this!==It&&this instanceof t?o:e).apply(r?n:this,arguments)}}(e,t,n);return ii((v?To:ri)(O,N),e,t)}function Na(e,t,n,r){return e===a||du(e,ut[n])&&!st.call(r,n)?t:e}function Oa(e,t,n,r,o,i){return Ou(e)&&Ou(t)&&(i.set(t,e),vo(e,t,a,Oa,i),i.delete(t)),e}function Ta(e){return ju(e)?a:e}function Ca(e,t,n,r,o,i){var u=n&m,l=e.length,c=t.length;if(l!=c&&!(u&&c>l))return!1;var s=i.get(e);if(s&&i.get(t))return s==t;var f=-1,p=!0,d=n&v?new wr:a;for(i.set(e,t),i.set(t,e);++f<l;){var h=e[f],y=t[f];if(r)var g=u?r(y,h,f,t,e,i):r(h,y,f,e,t,i);if(g!==a){if(g)continue;p=!1;break}if(d){if(!rn(t,function(e,t){if(!bn(d,t)&&(h===e||o(h,e,n,r,i)))return d.push(t)})){p=!1;break}}else if(h!==y&&!o(h,y,n,r,i)){p=!1;break}}return i.delete(e),i.delete(t),p}function Pa(e){return ai(ei(e,a,gi),e+"")}function ja(e){return Zr(e,ol,Fa)}function Ra(e){return Zr(e,al,Wa)}var Ia=rr?function(e){return rr.get(e)}:Ul;function Aa(e){for(var t=e.name+"",n=or[t],r=st.call(or,t)?n.length:0;r--;){var o=n[r],a=o.func;if(null==a||a==e)return o.name}return t}function Ua(e){return(st.call(dr,"placeholder")?dr:e).placeholder}function Ma(){var e=dr.iteratee||jl;return e=e===jl?lo:e,arguments.length?e(arguments[0],arguments[1]):e}function za(e,t){var n,r,o=e.__data__;return("string"==(r=typeof(n=t))||"number"==r||"symbol"==r||"boolean"==r?"__proto__"!==n:null===n)?o["string"==typeof t?"string":"hash"]:o.map}function Da(e){for(var t=ol(e),n=t.length;n--;){var r=t[n],o=e[r];t[n]=[r,o,Xa(o)]}return t}function La(e,t){var n=function(e,t){return null==e?a:e[t]}(e,t);return uo(n)?n:a}var Fa=Fn?function(e){return null==e?[]:(e=tt(e),Yt(Fn(e),function(t){return At.call(e,t)}))}:Bl,Wa=Fn?function(e){for(var t=[];e;)en(t,Fa(e)),e=jt(e);return t}:Bl,Ba=Xr;function $a(e,t,n){for(var r=-1,o=(t=Ko(t,e)).length,a=!1;++r<o;){var i=si(t[r]);if(!(a=null!=e&&n(e,i)))break;e=e[i]}return a||++r!=o?a:!!(o=null==e?0:e.length)&&Nu(o)&&Ha(i,o)&&(yu(e)||vu(e))}function Va(e){return"function"!=typeof e.constructor||Za(e)?{}:hr(jt(e))}function qa(e){return yu(e)||vu(e)||!!(zt&&e&&e[zt])}function Ha(e,t){var n=typeof e;return!!(t=null==t?A:t)&&("number"==n||"symbol"!=n&&Qe.test(e))&&e>-1&&e%1==0&&e<t}function Ka(e,t,n){if(!Ou(n))return!1;var r=typeof t;return!!("number"==r?bu(n)&&Ha(t,n.length):"string"==r&&t in n)&&du(n[t],e)}function Qa(e,t){if(yu(e))return!1;var n=typeof e;return!("number"!=n&&"symbol"!=n&&"boolean"!=n&&null!=e&&!Uu(e))||(Pe.test(e)||!Ce.test(e)||null!=t&&e in tt(t))}function Ga(e){var t=Aa(e),n=dr[t];if("function"!=typeof n||!(t in yr.prototype))return!1;if(e===n)return!0;var r=Ia(n);return!!r&&e===r[0]}(Zn&&Ba(new Zn(new ArrayBuffer(1)))!=ce||Xn&&Ba(new Xn)!=Y||Jn&&"[object Promise]"!=Ba(Jn.resolve())||er&&Ba(new er)!=ne||tr&&Ba(new tr)!=ie)&&(Ba=function(e){var t=Xr(e),n=t==J?e.constructor:a,r=n?fi(n):"";if(r)switch(r){case ar:return ce;case ir:return Y;case ur:return"[object Promise]";case lr:return ne;case cr:return ie}return t});var Ya=lt?ku:$l;function Za(e){var t=e&&e.constructor;return e===("function"==typeof t&&t.prototype||ut)}function Xa(e){return e==e&&!Ou(e)}function Ja(e,t){return function(n){return null!=n&&(n[e]===t&&(t!==a||e in tt(n)))}}function ei(e,t,n){return t=qn(t===a?e.length-1:t,0),function(){for(var o=arguments,a=-1,i=qn(o.length-t,0),u=r(i);++a<i;)u[a]=o[t+a];a=-1;for(var l=r(t+1);++a<t;)l[a]=o[a];return l[t]=n(u),qt(e,this,l)}}function ti(e,t){return t.length<2?e:Yr(e,jo(t,0,-1))}function ni(e,t){if(("constructor"!==t||"function"!=typeof e[t])&&"__proto__"!=t)return e[t]}var ri=ui(To),oi=zn||function(e,t){return It.setTimeout(e,t)},ai=ui(Co);function ii(e,t,n){var r=t+"";return ai(e,function(e,t){var n=t.length;if(!n)return e;var r=n-1;return t[r]=(n>1?"& ":"")+t[r],t=t.join(n>2?", ":" "),e.replace(ze,"{\n/* [wrapped with "+t+"] */\n")}(r,function(e,t){return Kt(F,function(n){var r="_."+n[0];t&n[1]&&!Zt(e,r)&&e.push(r)}),e.sort()}(function(e){var t=e.match(De);return t?t[1].split(Le):[]}(r),n)))}function ui(e){var t=0,n=0;return function(){var r=Kn(),o=P-(r-n);if(n=r,o>0){if(++t>=C)return arguments[0]}else t=0;return e.apply(a,arguments)}}function li(e,t){var n=-1,r=e.length,o=r-1;for(t=t===a?r:t;++n<t;){var i=_o(n,o),u=e[i];e[i]=e[n],e[n]=u}return e.length=t,e}var ci=function(e){var t=uu(e,function(e){return n.size===s&&n.clear(),e}),n=t.cache;return t}(function(e){var t=[];return 46===e.charCodeAt(0)&&t.push(""),e.replace(je,function(e,n,r,o){t.push(r?o.replace(We,"$1"):n||e)}),t});function si(e){if("string"==typeof e||Uu(e))return e;var t=e+"";return"0"==t&&1/e==-I?"-0":t}function fi(e){if(null!=e){try{return ct.call(e)}catch(e){}try{return e+""}catch(e){}}return""}function pi(e){if(e instanceof yr)return e.clone();var t=new vr(e.__wrapped__,e.__chain__);return t.__actions__=ra(e.__actions__),t.__index__=e.__index__,t.__values__=e.__values__,t}var di=ko(function(e,t){return Eu(e)?Dr(e,Vr(t,1,Eu,!0)):[]}),hi=ko(function(e,t){var n=xi(t);return Eu(n)&&(n=a),Eu(e)?Dr(e,Vr(t,1,Eu,!0),Ma(n,2)):[]}),mi=ko(function(e,t){var n=xi(t);return Eu(n)&&(n=a),Eu(e)?Dr(e,Vr(t,1,Eu,!0),a,n):[]});function vi(e,t,n){var r=null==e?0:e.length;if(!r)return-1;var o=null==n?0:Wu(n);return o<0&&(o=qn(r+o,0)),un(e,Ma(t,3),o)}function yi(e,t,n){var r=null==e?0:e.length;if(!r)return-1;var o=r-1;return n!==a&&(o=Wu(n),o=n<0?qn(r+o,0):Hn(o,r-1)),un(e,Ma(t,3),o,!0)}function gi(e){return(null==e?0:e.length)?Vr(e,1):[]}function bi(e){return e&&e.length?e[0]:a}var Ei=ko(function(e){var t=Jt(e,qo);return t.length&&t[0]===e[0]?no(t):[]}),wi=ko(function(e){var t=xi(e),n=Jt(e,qo);return t===xi(n)?t=a:n.pop(),n.length&&n[0]===e[0]?no(n,Ma(t,2)):[]}),_i=ko(function(e){var t=xi(e),n=Jt(e,qo);return(t="function"==typeof t?t:a)&&n.pop(),n.length&&n[0]===e[0]?no(n,a,t):[]});function xi(e){var t=null==e?0:e.length;return t?e[t-1]:a}var ki=ko(Si);function Si(e,t){return e&&e.length&&t&&t.length?Eo(e,t):e}var Ni=Pa(function(e,t){var n=null==e?0:e.length,r=Ir(e,t);return wo(e,Jt(t,function(e){return Ha(e,n)?+e:e}).sort(ea)),r});function Oi(e){return null==e?e:Yn.call(e)}var Ti=ko(function(e){return Do(Vr(e,1,Eu,!0))}),Ci=ko(function(e){var t=xi(e);return Eu(t)&&(t=a),Do(Vr(e,1,Eu,!0),Ma(t,2))}),Pi=ko(function(e){var t=xi(e);return t="function"==typeof t?t:a,Do(Vr(e,1,Eu,!0),a,t)});function ji(e){if(!e||!e.length)return[];var t=0;return e=Yt(e,function(e){if(Eu(e))return t=qn(e.length,t),!0}),vn(t,function(t){return Jt(e,pn(t))})}function Ri(e,t){if(!e||!e.length)return[];var n=ji(e);return null==t?n:Jt(n,function(e){return qt(t,a,e)})}var Ii=ko(function(e,t){return Eu(e)?Dr(e,t):[]}),Ai=ko(function(e){return $o(Yt(e,Eu))}),Ui=ko(function(e){var t=xi(e);return Eu(t)&&(t=a),$o(Yt(e,Eu),Ma(t,2))}),Mi=ko(function(e){var t=xi(e);return t="function"==typeof t?t:a,$o(Yt(e,Eu),a,t)}),zi=ko(ji);var Di=ko(function(e){var t=e.length,n=t>1?e[t-1]:a;return n="function"==typeof n?(e.pop(),n):a,Ri(e,n)});function Li(e){var t=dr(e);return t.__chain__=!0,t}function Fi(e,t){return t(e)}var Wi=Pa(function(e){var t=e.length,n=t?e[0]:0,r=this.__wrapped__,o=function(t){return Ir(t,e)};return!(t>1||this.__actions__.length)&&r instanceof yr&&Ha(n)?((r=r.slice(n,+n+(t?1:0))).__actions__.push({func:Fi,args:[o],thisArg:a}),new vr(r,this.__chain__).thru(function(e){return t&&!e.length&&e.push(a),e})):this.thru(o)});var Bi=aa(function(e,t,n){st.call(e,n)?++e[n]:Rr(e,n,1)});var $i=pa(vi),Vi=pa(yi);function qi(e,t){return(yu(e)?Kt:Lr)(e,Ma(t,3))}function Hi(e,t){return(yu(e)?Qt:Fr)(e,Ma(t,3))}var Ki=aa(function(e,t,n){st.call(e,n)?e[n].push(t):Rr(e,n,[t])});var Qi=ko(function(e,t,n){var o=-1,a="function"==typeof t,i=bu(e)?r(e.length):[];return Lr(e,function(e){i[++o]=a?qt(t,e,n):ro(e,t,n)}),i}),Gi=aa(function(e,t,n){Rr(e,n,t)});function Yi(e,t){return(yu(e)?Jt:po)(e,Ma(t,3))}var Zi=aa(function(e,t,n){e[n?0:1].push(t)},function(){return[[],[]]});var Xi=ko(function(e,t){if(null==e)return[];var n=t.length;return n>1&&Ka(e,t[0],t[1])?t=[]:n>2&&Ka(t[0],t[1],t[2])&&(t=[t[0]]),go(e,Vr(t,1),[])}),Ji=Mn||function(){return It.Date.now()};function eu(e,t,n){return t=n?a:t,t=e&&null==t?e.length:t,Sa(e,k,a,a,a,a,t)}function tu(e,t){var n;if("function"!=typeof t)throw new ot(l);return e=Wu(e),function(){return--e>0&&(n=t.apply(this,arguments)),e<=1&&(t=a),n}}var nu=ko(function(e,t,n){var r=y;if(n.length){var o=Tn(n,Ua(nu));r|=_}return Sa(e,r,t,n,o)}),ru=ko(function(e,t,n){var r=y|g;if(n.length){var o=Tn(n,Ua(ru));r|=_}return Sa(t,r,e,n,o)});function ou(e,t,n){var r,o,i,u,c,s,f=0,p=!1,d=!1,h=!0;if("function"!=typeof e)throw new ot(l);function m(t){var n=r,i=o;return r=o=a,f=t,u=e.apply(i,n)}function v(e){var n=e-s;return s===a||n>=t||n<0||d&&e-f>=i}function y(){var e=Ji();if(v(e))return g(e);c=oi(y,function(e){var n=t-(e-s);return d?Hn(n,i-(e-f)):n}(e))}function g(e){return c=a,h&&r?m(e):(r=o=a,u)}function b(){var e=Ji(),n=v(e);if(r=arguments,o=this,s=e,n){if(c===a)return function(e){return f=e,c=oi(y,t),p?m(e):u}(s);if(d)return Yo(c),c=oi(y,t),m(s)}return c===a&&(c=oi(y,t)),u}return t=$u(t)||0,Ou(n)&&(p=!!n.leading,i=(d="maxWait"in n)?qn($u(n.maxWait)||0,t):i,h="trailing"in n?!!n.trailing:h),b.cancel=function(){c!==a&&Yo(c),f=0,r=s=o=c=a},b.flush=function(){return c===a?u:g(Ji())},b}var au=ko(function(e,t){return zr(e,1,t)}),iu=ko(function(e,t,n){return zr(e,$u(t)||0,n)});function uu(e,t){if("function"!=typeof e||null!=t&&"function"!=typeof t)throw new ot(l);var n=function(){var r=arguments,o=t?t.apply(this,r):r[0],a=n.cache;if(a.has(o))return a.get(o);var i=e.apply(this,r);return n.cache=a.set(o,i)||a,i};return n.cache=new(uu.Cache||Er),n}function lu(e){if("function"!=typeof e)throw new ot(l);return function(){var t=arguments;switch(t.length){case 0:return!e.call(this);case 1:return!e.call(this,t[0]);case 2:return!e.call(this,t[0],t[1]);case 3:return!e.call(this,t[0],t[1],t[2])}return!e.apply(this,t)}}uu.Cache=Er;var cu=Qo(function(e,t){var n=(t=1==t.length&&yu(t[0])?Jt(t[0],yn(Ma())):Jt(Vr(t,1),yn(Ma()))).length;return ko(function(r){for(var o=-1,a=Hn(r.length,n);++o<a;)r[o]=t[o].call(this,r[o]);return qt(e,this,r)})}),su=ko(function(e,t){var n=Tn(t,Ua(su));return Sa(e,_,a,t,n)}),fu=ko(function(e,t){var n=Tn(t,Ua(fu));return Sa(e,x,a,t,n)}),pu=Pa(function(e,t){return Sa(e,S,a,a,a,t)});function du(e,t){return e===t||e!=e&&t!=t}var hu=Ea(Jr),mu=Ea(function(e,t){return e>=t}),vu=oo(function(){return arguments}())?oo:function(e){return Tu(e)&&st.call(e,"callee")&&!At.call(e,"callee")},yu=r.isArray,gu=Lt?yn(Lt):function(e){return Tu(e)&&Xr(e)==le};function bu(e){return null!=e&&Nu(e.length)&&!ku(e)}function Eu(e){return Tu(e)&&bu(e)}var wu=Wn||$l,_u=Ft?yn(Ft):function(e){return Tu(e)&&Xr(e)==q};function xu(e){if(!Tu(e))return!1;var t=Xr(e);return t==K||t==H||"string"==typeof e.message&&"string"==typeof e.name&&!ju(e)}function ku(e){if(!Ou(e))return!1;var t=Xr(e);return t==Q||t==G||t==$||t==ee}function Su(e){return"number"==typeof e&&e==Wu(e)}function Nu(e){return"number"==typeof e&&e>-1&&e%1==0&&e<=A}function Ou(e){var t=typeof e;return null!=e&&("object"==t||"function"==t)}function Tu(e){return null!=e&&"object"==typeof e}var Cu=Wt?yn(Wt):function(e){return Tu(e)&&Ba(e)==Y};function Pu(e){return"number"==typeof e||Tu(e)&&Xr(e)==Z}function ju(e){if(!Tu(e)||Xr(e)!=J)return!1;var t=jt(e);if(null===t)return!0;var n=st.call(t,"constructor")&&t.constructor;return"function"==typeof n&&n instanceof n&&ct.call(n)==ht}var Ru=Bt?yn(Bt):function(e){return Tu(e)&&Xr(e)==te};var Iu=$t?yn($t):function(e){return Tu(e)&&Ba(e)==ne};function Au(e){return"string"==typeof e||!yu(e)&&Tu(e)&&Xr(e)==re}function Uu(e){return"symbol"==typeof e||Tu(e)&&Xr(e)==oe}var Mu=Vt?yn(Vt):function(e){return Tu(e)&&Nu(e.length)&&!!Nt[Xr(e)]};var zu=Ea(fo),Du=Ea(function(e,t){return e<=t});function Lu(e){if(!e)return[];if(bu(e))return Au(e)?Rn(e):ra(e);if(Dt&&e[Dt])return function(e){for(var t,n=[];!(t=e.next()).done;)n.push(t.value);return n}(e[Dt]());var t=Ba(e);return(t==Y?Nn:t==ne?Cn:dl)(e)}function Fu(e){return e?(e=$u(e))===I||e===-I?(e<0?-1:1)*U:e==e?e:0:0===e?e:0}function Wu(e){var t=Fu(e),n=t%1;return t==t?n?t-n:t:0}function Bu(e){return e?Ar(Wu(e),0,z):0}function $u(e){if("number"==typeof e)return e;if(Uu(e))return M;if(Ou(e)){var t="function"==typeof e.valueOf?e.valueOf():e;e=Ou(t)?t+"":t}if("string"!=typeof e)return 0===e?e:+e;e=e.replace(Ae,"");var n=qe.test(e);return n||Ke.test(e)?Pt(e.slice(2),n?2:8):Ve.test(e)?M:+e}function Vu(e){return oa(e,al(e))}function qu(e){return null==e?"":zo(e)}var Hu=ia(function(e,t){if(Za(t)||bu(t))oa(t,ol(t),e);else for(var n in t)st.call(t,n)&&Tr(e,n,t[n])}),Ku=ia(function(e,t){oa(t,al(t),e)}),Qu=ia(function(e,t,n,r){oa(t,al(t),e,r)}),Gu=ia(function(e,t,n,r){oa(t,ol(t),e,r)}),Yu=Pa(Ir);var Zu=ko(function(e,t){e=tt(e);var n=-1,r=t.length,o=r>2?t[2]:a;for(o&&Ka(t[0],t[1],o)&&(r=1);++n<r;)for(var i=t[n],u=al(i),l=-1,c=u.length;++l<c;){var s=u[l],f=e[s];(f===a||du(f,ut[s])&&!st.call(e,s))&&(e[s]=i[s])}return e}),Xu=ko(function(e){return e.push(a,Oa),qt(ul,a,e)});function Ju(e,t,n){var r=null==e?a:Yr(e,t);return r===a?n:r}function el(e,t){return null!=e&&$a(e,t,to)}var tl=ma(function(e,t,n){null!=t&&"function"!=typeof t.toString&&(t=dt.call(t)),e[t]=n},Ol(Pl)),nl=ma(function(e,t,n){null!=t&&"function"!=typeof t.toString&&(t=dt.call(t)),st.call(e,t)?e[t].push(n):e[t]=[n]},Ma),rl=ko(ro);function ol(e){return bu(e)?xr(e):co(e)}function al(e){return bu(e)?xr(e,!0):so(e)}var il=ia(function(e,t,n){vo(e,t,n)}),ul=ia(function(e,t,n,r){vo(e,t,n,r)}),ll=Pa(function(e,t){var n={};if(null==e)return n;var r=!1;t=Jt(t,function(t){return t=Ko(t,e),r||(r=t.length>1),t}),oa(e,Ra(e),n),r&&(n=Ur(n,p|d|h,Ta));for(var o=t.length;o--;)Lo(n,t[o]);return n});var cl=Pa(function(e,t){return null==e?{}:function(e,t){return bo(e,t,function(t,n){return el(e,n)})}(e,t)});function sl(e,t){if(null==e)return{};var n=Jt(Ra(e),function(e){return[e]});return t=Ma(t),bo(e,n,function(e,n){return t(e,n[0])})}var fl=ka(ol),pl=ka(al);function dl(e){return null==e?[]:gn(e,ol(e))}var hl=sa(function(e,t,n){return t=t.toLowerCase(),e+(n?ml(t):t)});function ml(e){return xl(qu(e).toLowerCase())}function vl(e){return(e=qu(e))&&e.replace(Ge,_n).replace(bt,"")}var yl=sa(function(e,t,n){return e+(n?"-":"")+t.toLowerCase()}),gl=sa(function(e,t,n){return e+(n?" ":"")+t.toLowerCase()}),bl=ca("toLowerCase");var El=sa(function(e,t,n){return e+(n?"_":"")+t.toLowerCase()});var wl=sa(function(e,t,n){return e+(n?" ":"")+xl(t)});var _l=sa(function(e,t,n){return e+(n?" ":"")+t.toUpperCase()}),xl=ca("toUpperCase");function kl(e,t,n){return e=qu(e),(t=n?a:t)===a?function(e){return xt.test(e)}(e)?function(e){return e.match(wt)||[]}(e):function(e){return e.match(Fe)||[]}(e):e.match(t)||[]}var Sl=ko(function(e,t){try{return qt(e,a,t)}catch(e){return xu(e)?e:new Xe(e)}}),Nl=Pa(function(e,t){return Kt(t,function(t){t=si(t),Rr(e,t,nu(e[t],e))}),e});function Ol(e){return function(){return e}}var Tl=da(),Cl=da(!0);function Pl(e){return e}function jl(e){return lo("function"==typeof e?e:Ur(e,p))}var Rl=ko(function(e,t){return function(n){return ro(n,e,t)}}),Il=ko(function(e,t){return function(n){return ro(e,n,t)}});function Al(e,t,n){var r=ol(t),o=Gr(t,r);null!=n||Ou(t)&&(o.length||!r.length)||(n=t,t=e,e=this,o=Gr(t,ol(t)));var a=!(Ou(n)&&"chain"in n&&!n.chain),i=ku(e);return Kt(o,function(n){var r=t[n];e[n]=r,i&&(e.prototype[n]=function(){var t=this.__chain__;if(a||t){var n=e(this.__wrapped__),o=n.__actions__=ra(this.__actions__);return o.push({func:r,args:arguments,thisArg:e}),n.__chain__=t,n}return r.apply(e,en([this.value()],arguments))})}),e}function Ul(){}var Ml=ya(Jt),zl=ya(Gt),Dl=ya(rn);function Ll(e){return Qa(e)?pn(si(e)):function(e){return function(t){return Yr(t,e)}}(e)}var Fl=ba(),Wl=ba(!0);function Bl(){return[]}function $l(){return!1}var Vl=va(function(e,t){return e+t},0),ql=_a("ceil"),Hl=va(function(e,t){return e/t},1),Kl=_a("floor");var Ql,Gl=va(function(e,t){return e*t},1),Yl=_a("round"),Zl=va(function(e,t){return e-t},0);return dr.after=function(e,t){if("function"!=typeof t)throw new ot(l);return e=Wu(e),function(){if(--e<1)return t.apply(this,arguments)}},dr.ary=eu,dr.assign=Hu,dr.assignIn=Ku,dr.assignInWith=Qu,dr.assignWith=Gu,dr.at=Yu,dr.before=tu,dr.bind=nu,dr.bindAll=Nl,dr.bindKey=ru,dr.castArray=function(){if(!arguments.length)return[];var e=arguments[0];return yu(e)?e:[e]},dr.chain=Li,dr.chunk=function(e,t,n){t=(n?Ka(e,t,n):t===a)?1:qn(Wu(t),0);var o=null==e?0:e.length;if(!o||t<1)return[];for(var i=0,u=0,l=r(Dn(o/t));i<o;)l[u++]=jo(e,i,i+=t);return l},dr.compact=function(e){for(var t=-1,n=null==e?0:e.length,r=0,o=[];++t<n;){var a=e[t];a&&(o[r++]=a)}return o},dr.concat=function(){var e=arguments.length;if(!e)return[];for(var t=r(e-1),n=arguments[0],o=e;o--;)t[o-1]=arguments[o];return en(yu(n)?ra(n):[n],Vr(t,1))},dr.cond=function(e){var t=null==e?0:e.length,n=Ma();return e=t?Jt(e,function(e){if("function"!=typeof e[1])throw new ot(l);return[n(e[0]),e[1]]}):[],ko(function(n){for(var r=-1;++r<t;){var o=e[r];if(qt(o[0],this,n))return qt(o[1],this,n)}})},dr.conforms=function(e){return function(e){var t=ol(e);return function(n){return Mr(n,e,t)}}(Ur(e,p))},dr.constant=Ol,dr.countBy=Bi,dr.create=function(e,t){var n=hr(e);return null==t?n:jr(n,t)},dr.curry=function e(t,n,r){var o=Sa(t,E,a,a,a,a,a,n=r?a:n);return o.placeholder=e.placeholder,o},dr.curryRight=function e(t,n,r){var o=Sa(t,w,a,a,a,a,a,n=r?a:n);return o.placeholder=e.placeholder,o},dr.debounce=ou,dr.defaults=Zu,dr.defaultsDeep=Xu,dr.defer=au,dr.delay=iu,dr.difference=di,dr.differenceBy=hi,dr.differenceWith=mi,dr.drop=function(e,t,n){var r=null==e?0:e.length;return r?jo(e,(t=n||t===a?1:Wu(t))<0?0:t,r):[]},dr.dropRight=function(e,t,n){var r=null==e?0:e.length;return r?jo(e,0,(t=r-(t=n||t===a?1:Wu(t)))<0?0:t):[]},dr.dropRightWhile=function(e,t){return e&&e.length?Wo(e,Ma(t,3),!0,!0):[]},dr.dropWhile=function(e,t){return e&&e.length?Wo(e,Ma(t,3),!0):[]},dr.fill=function(e,t,n,r){var o=null==e?0:e.length;return o?(n&&"number"!=typeof n&&Ka(e,t,n)&&(n=0,r=o),function(e,t,n,r){var o=e.length;for((n=Wu(n))<0&&(n=-n>o?0:o+n),(r=r===a||r>o?o:Wu(r))<0&&(r+=o),r=n>r?0:Bu(r);n<r;)e[n++]=t;return e}(e,t,n,r)):[]},dr.filter=function(e,t){return(yu(e)?Yt:$r)(e,Ma(t,3))},dr.flatMap=function(e,t){return Vr(Yi(e,t),1)},dr.flatMapDeep=function(e,t){return Vr(Yi(e,t),I)},dr.flatMapDepth=function(e,t,n){return n=n===a?1:Wu(n),Vr(Yi(e,t),n)},dr.flatten=gi,dr.flattenDeep=function(e){return(null==e?0:e.length)?Vr(e,I):[]},dr.flattenDepth=function(e,t){return(null==e?0:e.length)?Vr(e,t=t===a?1:Wu(t)):[]},dr.flip=function(e){return Sa(e,N)},dr.flow=Tl,dr.flowRight=Cl,dr.fromPairs=function(e){for(var t=-1,n=null==e?0:e.length,r={};++t<n;){var o=e[t];r[o[0]]=o[1]}return r},dr.functions=function(e){return null==e?[]:Gr(e,ol(e))},dr.functionsIn=function(e){return null==e?[]:Gr(e,al(e))},dr.groupBy=Ki,dr.initial=function(e){return(null==e?0:e.length)?jo(e,0,-1):[]},dr.intersection=Ei,dr.intersectionBy=wi,dr.intersectionWith=_i,dr.invert=tl,dr.invertBy=nl,dr.invokeMap=Qi,dr.iteratee=jl,dr.keyBy=Gi,dr.keys=ol,dr.keysIn=al,dr.map=Yi,dr.mapKeys=function(e,t){var n={};return t=Ma(t,3),Kr(e,function(e,r,o){Rr(n,t(e,r,o),e)}),n},dr.mapValues=function(e,t){var n={};return t=Ma(t,3),Kr(e,function(e,r,o){Rr(n,r,t(e,r,o))}),n},dr.matches=function(e){return ho(Ur(e,p))},dr.matchesProperty=function(e,t){return mo(e,Ur(t,p))},dr.memoize=uu,dr.merge=il,dr.mergeWith=ul,dr.method=Rl,dr.methodOf=Il,dr.mixin=Al,dr.negate=lu,dr.nthArg=function(e){return e=Wu(e),ko(function(t){return yo(t,e)})},dr.omit=ll,dr.omitBy=function(e,t){return sl(e,lu(Ma(t)))},dr.once=function(e){return tu(2,e)},dr.orderBy=function(e,t,n,r){return null==e?[]:(yu(t)||(t=null==t?[]:[t]),yu(n=r?a:n)||(n=null==n?[]:[n]),go(e,t,n))},dr.over=Ml,dr.overArgs=cu,dr.overEvery=zl,dr.overSome=Dl,dr.partial=su,dr.partialRight=fu,dr.partition=Zi,dr.pick=cl,dr.pickBy=sl,dr.property=Ll,dr.propertyOf=function(e){return function(t){return null==e?a:Yr(e,t)}},dr.pull=ki,dr.pullAll=Si,dr.pullAllBy=function(e,t,n){return e&&e.length&&t&&t.length?Eo(e,t,Ma(n,2)):e},dr.pullAllWith=function(e,t,n){return e&&e.length&&t&&t.length?Eo(e,t,a,n):e},dr.pullAt=Ni,dr.range=Fl,dr.rangeRight=Wl,dr.rearg=pu,dr.reject=function(e,t){return(yu(e)?Yt:$r)(e,lu(Ma(t,3)))},dr.remove=function(e,t){var n=[];if(!e||!e.length)return n;var r=-1,o=[],a=e.length;for(t=Ma(t,3);++r<a;){var i=e[r];t(i,r,e)&&(n.push(i),o.push(r))}return wo(e,o),n},dr.rest=function(e,t){if("function"!=typeof e)throw new ot(l);return ko(e,t=t===a?t:Wu(t))},dr.reverse=Oi,dr.sampleSize=function(e,t,n){return t=(n?Ka(e,t,n):t===a)?1:Wu(t),(yu(e)?Sr:No)(e,t)},dr.set=function(e,t,n){return null==e?e:Oo(e,t,n)},dr.setWith=function(e,t,n,r){return r="function"==typeof r?r:a,null==e?e:Oo(e,t,n,r)},dr.shuffle=function(e){return(yu(e)?Nr:Po)(e)},dr.slice=function(e,t,n){var r=null==e?0:e.length;return r?(n&&"number"!=typeof n&&Ka(e,t,n)?(t=0,n=r):(t=null==t?0:Wu(t),n=n===a?r:Wu(n)),jo(e,t,n)):[]},dr.sortBy=Xi,dr.sortedUniq=function(e){return e&&e.length?Uo(e):[]},dr.sortedUniqBy=function(e,t){return e&&e.length?Uo(e,Ma(t,2)):[]},dr.split=function(e,t,n){return n&&"number"!=typeof n&&Ka(e,t,n)&&(t=n=a),(n=n===a?z:n>>>0)?(e=qu(e))&&("string"==typeof t||null!=t&&!Ru(t))&&!(t=zo(t))&&Sn(e)?Go(Rn(e),0,n):e.split(t,n):[]},dr.spread=function(e,t){if("function"!=typeof e)throw new ot(l);return t=null==t?0:qn(Wu(t),0),ko(function(n){var r=n[t],o=Go(n,0,t);return r&&en(o,r),qt(e,this,o)})},dr.tail=function(e){var t=null==e?0:e.length;return t?jo(e,1,t):[]},dr.take=function(e,t,n){return e&&e.length?jo(e,0,(t=n||t===a?1:Wu(t))<0?0:t):[]},dr.takeRight=function(e,t,n){var r=null==e?0:e.length;return r?jo(e,(t=r-(t=n||t===a?1:Wu(t)))<0?0:t,r):[]},dr.takeRightWhile=function(e,t){return e&&e.length?Wo(e,Ma(t,3),!1,!0):[]},dr.takeWhile=function(e,t){return e&&e.length?Wo(e,Ma(t,3)):[]},dr.tap=function(e,t){return t(e),e},dr.throttle=function(e,t,n){var r=!0,o=!0;if("function"!=typeof e)throw new ot(l);return Ou(n)&&(r="leading"in n?!!n.leading:r,o="trailing"in n?!!n.trailing:o),ou(e,t,{leading:r,maxWait:t,trailing:o})},dr.thru=Fi,dr.toArray=Lu,dr.toPairs=fl,dr.toPairsIn=pl,dr.toPath=function(e){return yu(e)?Jt(e,si):Uu(e)?[e]:ra(ci(qu(e)))},dr.toPlainObject=Vu,dr.transform=function(e,t,n){var r=yu(e),o=r||wu(e)||Mu(e);if(t=Ma(t,4),null==n){var a=e&&e.constructor;n=o?r?new a:[]:Ou(e)&&ku(a)?hr(jt(e)):{}}return(o?Kt:Kr)(e,function(e,r,o){return t(n,e,r,o)}),n},dr.unary=function(e){return eu(e,1)},dr.union=Ti,dr.unionBy=Ci,dr.unionWith=Pi,dr.uniq=function(e){return e&&e.length?Do(e):[]},dr.uniqBy=function(e,t){return e&&e.length?Do(e,Ma(t,2)):[]},dr.uniqWith=function(e,t){return t="function"==typeof t?t:a,e&&e.length?Do(e,a,t):[]},dr.unset=function(e,t){return null==e||Lo(e,t)},dr.unzip=ji,dr.unzipWith=Ri,dr.update=function(e,t,n){return null==e?e:Fo(e,t,Ho(n))},dr.updateWith=function(e,t,n,r){return r="function"==typeof r?r:a,null==e?e:Fo(e,t,Ho(n),r)},dr.values=dl,dr.valuesIn=function(e){return null==e?[]:gn(e,al(e))},dr.without=Ii,dr.words=kl,dr.wrap=function(e,t){return su(Ho(t),e)},dr.xor=Ai,dr.xorBy=Ui,dr.xorWith=Mi,dr.zip=zi,dr.zipObject=function(e,t){return Vo(e||[],t||[],Tr)},dr.zipObjectDeep=function(e,t){return Vo(e||[],t||[],Oo)},dr.zipWith=Di,dr.entries=fl,dr.entriesIn=pl,dr.extend=Ku,dr.extendWith=Qu,Al(dr,dr),dr.add=Vl,dr.attempt=Sl,dr.camelCase=hl,dr.capitalize=ml,dr.ceil=ql,dr.clamp=function(e,t,n){return n===a&&(n=t,t=a),n!==a&&(n=(n=$u(n))==n?n:0),t!==a&&(t=(t=$u(t))==t?t:0),Ar($u(e),t,n)},dr.clone=function(e){return Ur(e,h)},dr.cloneDeep=function(e){return Ur(e,p|h)},dr.cloneDeepWith=function(e,t){return Ur(e,p|h,t="function"==typeof t?t:a)},dr.cloneWith=function(e,t){return Ur(e,h,t="function"==typeof t?t:a)},dr.conformsTo=function(e,t){return null==t||Mr(e,t,ol(t))},dr.deburr=vl,dr.defaultTo=function(e,t){return null==e||e!=e?t:e},dr.divide=Hl,dr.endsWith=function(e,t,n){e=qu(e),t=zo(t);var r=e.length,o=n=n===a?r:Ar(Wu(n),0,r);return(n-=t.length)>=0&&e.slice(n,o)==t},dr.eq=du,dr.escape=function(e){return(e=qu(e))&&Se.test(e)?e.replace(xe,xn):e},dr.escapeRegExp=function(e){return(e=qu(e))&&Ie.test(e)?e.replace(Re,"\\$&"):e},dr.every=function(e,t,n){var r=yu(e)?Gt:Wr;return n&&Ka(e,t,n)&&(t=a),r(e,Ma(t,3))},dr.find=$i,dr.findIndex=vi,dr.findKey=function(e,t){return an(e,Ma(t,3),Kr)},dr.findLast=Vi,dr.findLastIndex=yi,dr.findLastKey=function(e,t){return an(e,Ma(t,3),Qr)},dr.floor=Kl,dr.forEach=qi,dr.forEachRight=Hi,dr.forIn=function(e,t){return null==e?e:qr(e,Ma(t,3),al)},dr.forInRight=function(e,t){return null==e?e:Hr(e,Ma(t,3),al)},dr.forOwn=function(e,t){return e&&Kr(e,Ma(t,3))},dr.forOwnRight=function(e,t){return e&&Qr(e,Ma(t,3))},dr.get=Ju,dr.gt=hu,dr.gte=mu,dr.has=function(e,t){return null!=e&&$a(e,t,eo)},dr.hasIn=el,dr.head=bi,dr.identity=Pl,dr.includes=function(e,t,n,r){e=bu(e)?e:dl(e),n=n&&!r?Wu(n):0;var o=e.length;return n<0&&(n=qn(o+n,0)),Au(e)?n<=o&&e.indexOf(t,n)>-1:!!o&&ln(e,t,n)>-1},dr.indexOf=function(e,t,n){var r=null==e?0:e.length;if(!r)return-1;var o=null==n?0:Wu(n);return o<0&&(o=qn(r+o,0)),ln(e,t,o)},dr.inRange=function(e,t,n){return t=Fu(t),n===a?(n=t,t=0):n=Fu(n),function(e,t,n){return e>=Hn(t,n)&&e<qn(t,n)}(e=$u(e),t,n)},dr.invoke=rl,dr.isArguments=vu,dr.isArray=yu,dr.isArrayBuffer=gu,dr.isArrayLike=bu,dr.isArrayLikeObject=Eu,dr.isBoolean=function(e){return!0===e||!1===e||Tu(e)&&Xr(e)==V},dr.isBuffer=wu,dr.isDate=_u,dr.isElement=function(e){return Tu(e)&&1===e.nodeType&&!ju(e)},dr.isEmpty=function(e){if(null==e)return!0;if(bu(e)&&(yu(e)||"string"==typeof e||"function"==typeof e.splice||wu(e)||Mu(e)||vu(e)))return!e.length;var t=Ba(e);if(t==Y||t==ne)return!e.size;if(Za(e))return!co(e).length;for(var n in e)if(st.call(e,n))return!1;return!0},dr.isEqual=function(e,t){return ao(e,t)},dr.isEqualWith=function(e,t,n){var r=(n="function"==typeof n?n:a)?n(e,t):a;return r===a?ao(e,t,a,n):!!r},dr.isError=xu,dr.isFinite=function(e){return"number"==typeof e&&Bn(e)},dr.isFunction=ku,dr.isInteger=Su,dr.isLength=Nu,dr.isMap=Cu,dr.isMatch=function(e,t){return e===t||io(e,t,Da(t))},dr.isMatchWith=function(e,t,n){return n="function"==typeof n?n:a,io(e,t,Da(t),n)},dr.isNaN=function(e){return Pu(e)&&e!=+e},dr.isNative=function(e){if(Ya(e))throw new Xe(u);return uo(e)},dr.isNil=function(e){return null==e},dr.isNull=function(e){return null===e},dr.isNumber=Pu,dr.isObject=Ou,dr.isObjectLike=Tu,dr.isPlainObject=ju,dr.isRegExp=Ru,dr.isSafeInteger=function(e){return Su(e)&&e>=-A&&e<=A},dr.isSet=Iu,dr.isString=Au,dr.isSymbol=Uu,dr.isTypedArray=Mu,dr.isUndefined=function(e){return e===a},dr.isWeakMap=function(e){return Tu(e)&&Ba(e)==ie},dr.isWeakSet=function(e){return Tu(e)&&Xr(e)==ue},dr.join=function(e,t){return null==e?"":$n.call(e,t)},dr.kebabCase=yl,dr.last=xi,dr.lastIndexOf=function(e,t,n){var r=null==e?0:e.length;if(!r)return-1;var o=r;return n!==a&&(o=(o=Wu(n))<0?qn(r+o,0):Hn(o,r-1)),t==t?function(e,t,n){for(var r=n+1;r--;)if(e[r]===t)return r;return r}(e,t,o):un(e,sn,o,!0)},dr.lowerCase=gl,dr.lowerFirst=bl,dr.lt=zu,dr.lte=Du,dr.max=function(e){return e&&e.length?Br(e,Pl,Jr):a},dr.maxBy=function(e,t){return e&&e.length?Br(e,Ma(t,2),Jr):a},dr.mean=function(e){return fn(e,Pl)},dr.meanBy=function(e,t){return fn(e,Ma(t,2))},dr.min=function(e){return e&&e.length?Br(e,Pl,fo):a},dr.minBy=function(e,t){return e&&e.length?Br(e,Ma(t,2),fo):a},dr.stubArray=Bl,dr.stubFalse=$l,dr.stubObject=function(){return{}},dr.stubString=function(){return""},dr.stubTrue=function(){return!0},dr.multiply=Gl,dr.nth=function(e,t){return e&&e.length?yo(e,Wu(t)):a},dr.noConflict=function(){return It._===this&&(It._=mt),this},dr.noop=Ul,dr.now=Ji,dr.pad=function(e,t,n){e=qu(e);var r=(t=Wu(t))?jn(e):0;if(!t||r>=t)return e;var o=(t-r)/2;return ga(Ln(o),n)+e+ga(Dn(o),n)},dr.padEnd=function(e,t,n){e=qu(e);var r=(t=Wu(t))?jn(e):0;return t&&r<t?e+ga(t-r,n):e},dr.padStart=function(e,t,n){e=qu(e);var r=(t=Wu(t))?jn(e):0;return t&&r<t?ga(t-r,n)+e:e},dr.parseInt=function(e,t,n){return n||null==t?t=0:t&&(t=+t),Qn(qu(e).replace(Ue,""),t||0)},dr.random=function(e,t,n){if(n&&"boolean"!=typeof n&&Ka(e,t,n)&&(t=n=a),n===a&&("boolean"==typeof t?(n=t,t=a):"boolean"==typeof e&&(n=e,e=a)),e===a&&t===a?(e=0,t=1):(e=Fu(e),t===a?(t=e,e=0):t=Fu(t)),e>t){var r=e;e=t,t=r}if(n||e%1||t%1){var o=Gn();return Hn(e+o*(t-e+Ct("1e-"+((o+"").length-1))),t)}return _o(e,t)},dr.reduce=function(e,t,n){var r=yu(e)?tn:hn,o=arguments.length<3;return r(e,Ma(t,4),n,o,Lr)},dr.reduceRight=function(e,t,n){var r=yu(e)?nn:hn,o=arguments.length<3;return r(e,Ma(t,4),n,o,Fr)},dr.repeat=function(e,t,n){return t=(n?Ka(e,t,n):t===a)?1:Wu(t),xo(qu(e),t)},dr.replace=function(){var e=arguments,t=qu(e[0]);return e.length<3?t:t.replace(e[1],e[2])},dr.result=function(e,t,n){var r=-1,o=(t=Ko(t,e)).length;for(o||(o=1,e=a);++r<o;){var i=null==e?a:e[si(t[r])];i===a&&(r=o,i=n),e=ku(i)?i.call(e):i}return e},dr.round=Yl,dr.runInContext=e,dr.sample=function(e){return(yu(e)?kr:So)(e)},dr.size=function(e){if(null==e)return 0;if(bu(e))return Au(e)?jn(e):e.length;var t=Ba(e);return t==Y||t==ne?e.size:co(e).length},dr.snakeCase=El,dr.some=function(e,t,n){var r=yu(e)?rn:Ro;return n&&Ka(e,t,n)&&(t=a),r(e,Ma(t,3))},dr.sortedIndex=function(e,t){return Io(e,t)},dr.sortedIndexBy=function(e,t,n){return Ao(e,t,Ma(n,2))},dr.sortedIndexOf=function(e,t){var n=null==e?0:e.length;if(n){var r=Io(e,t);if(r<n&&du(e[r],t))return r}return-1},dr.sortedLastIndex=function(e,t){return Io(e,t,!0)},dr.sortedLastIndexBy=function(e,t,n){return Ao(e,t,Ma(n,2),!0)},dr.sortedLastIndexOf=function(e,t){if(null==e?0:e.length){var n=Io(e,t,!0)-1;if(du(e[n],t))return n}return-1},dr.startCase=wl,dr.startsWith=function(e,t,n){return e=qu(e),n=null==n?0:Ar(Wu(n),0,e.length),t=zo(t),e.slice(n,n+t.length)==t},dr.subtract=Zl,dr.sum=function(e){return e&&e.length?mn(e,Pl):0},dr.sumBy=function(e,t){return e&&e.length?mn(e,Ma(t,2)):0},dr.template=function(e,t,n){var r=dr.templateSettings;n&&Ka(e,t,n)&&(t=a),e=qu(e),t=Qu({},t,r,Na);var o,i,u=Qu({},t.imports,r.imports,Na),l=ol(u),c=gn(u,l),s=0,f=t.interpolate||Ye,p="__p += '",d=nt((t.escape||Ye).source+"|"+f.source+"|"+(f===Te?Be:Ye).source+"|"+(t.evaluate||Ye).source+"|$","g"),h="//# sourceURL="+(st.call(t,"sourceURL")?(t.sourceURL+"").replace(/[\r\n]/g," "):"lodash.templateSources["+ ++St+"]")+"\n";e.replace(d,function(t,n,r,a,u,l){return r||(r=a),p+=e.slice(s,l).replace(Ze,kn),n&&(o=!0,p+="' +\n__e("+n+") +\n'"),u&&(i=!0,p+="';\n"+u+";\n__p += '"),r&&(p+="' +\n((__t = ("+r+")) == null ? '' : __t) +\n'"),s=l+t.length,t}),p+="';\n";var m=st.call(t,"variable")&&t.variable;m||(p="with (obj) {\n"+p+"\n}\n"),p=(i?p.replace(be,""):p).replace(Ee,"$1").replace(we,"$1;"),p="function("+(m||"obj")+") {\n"+(m?"":"obj || (obj = {});\n")+"var __t, __p = ''"+(o?", __e = _.escape":"")+(i?", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n":";\n")+p+"return __p\n}";var v=Sl(function(){return Je(l,h+"return "+p).apply(a,c)});if(v.source=p,xu(v))throw v;return v},dr.times=function(e,t){if((e=Wu(e))<1||e>A)return[];var n=z,r=Hn(e,z);t=Ma(t),e-=z;for(var o=vn(r,t);++n<e;)t(n);return o},dr.toFinite=Fu,dr.toInteger=Wu,dr.toLength=Bu,dr.toLower=function(e){return qu(e).toLowerCase()},dr.toNumber=$u,dr.toSafeInteger=function(e){return e?Ar(Wu(e),-A,A):0===e?e:0},dr.toString=qu,dr.toUpper=function(e){return qu(e).toUpperCase()},dr.trim=function(e,t,n){if((e=qu(e))&&(n||t===a))return e.replace(Ae,"");if(!e||!(t=zo(t)))return e;var r=Rn(e),o=Rn(t);return Go(r,En(r,o),wn(r,o)+1).join("")},dr.trimEnd=function(e,t,n){if((e=qu(e))&&(n||t===a))return e.replace(Me,"");if(!e||!(t=zo(t)))return e;var r=Rn(e);return Go(r,0,wn(r,Rn(t))+1).join("")},dr.trimStart=function(e,t,n){if((e=qu(e))&&(n||t===a))return e.replace(Ue,"");if(!e||!(t=zo(t)))return e;var r=Rn(e);return Go(r,En(r,Rn(t))).join("")},dr.truncate=function(e,t){var n=O,r=T;if(Ou(t)){var o="separator"in t?t.separator:o;n="length"in t?Wu(t.length):n,r="omission"in t?zo(t.omission):r}var i=(e=qu(e)).length;if(Sn(e)){var u=Rn(e);i=u.length}if(n>=i)return e;var l=n-jn(r);if(l<1)return r;var c=u?Go(u,0,l).join(""):e.slice(0,l);if(o===a)return c+r;if(u&&(l+=c.length-l),Ru(o)){if(e.slice(l).search(o)){var s,f=c;for(o.global||(o=nt(o.source,qu($e.exec(o))+"g")),o.lastIndex=0;s=o.exec(f);)var p=s.index;c=c.slice(0,p===a?l:p)}}else if(e.indexOf(zo(o),l)!=l){var d=c.lastIndexOf(o);d>-1&&(c=c.slice(0,d))}return c+r},dr.unescape=function(e){return(e=qu(e))&&ke.test(e)?e.replace(_e,In):e},dr.uniqueId=function(e){var t=++ft;return qu(e)+t},dr.upperCase=_l,dr.upperFirst=xl,dr.each=qi,dr.eachRight=Hi,dr.first=bi,Al(dr,(Ql={},Kr(dr,function(e,t){st.call(dr.prototype,t)||(Ql[t]=e)}),Ql),{chain:!1}),dr.VERSION="4.17.15",Kt(["bind","bindKey","curry","curryRight","partial","partialRight"],function(e){dr[e].placeholder=dr}),Kt(["drop","take"],function(e,t){yr.prototype[e]=function(n){n=n===a?1:qn(Wu(n),0);var r=this.__filtered__&&!t?new yr(this):this.clone();return r.__filtered__?r.__takeCount__=Hn(n,r.__takeCount__):r.__views__.push({size:Hn(n,z),type:e+(r.__dir__<0?"Right":"")}),r},yr.prototype[e+"Right"]=function(t){return this.reverse()[e](t).reverse()}}),Kt(["filter","map","takeWhile"],function(e,t){var n=t+1,r=n==j||3==n;yr.prototype[e]=function(e){var t=this.clone();return t.__iteratees__.push({iteratee:Ma(e,3),type:n}),t.__filtered__=t.__filtered__||r,t}}),Kt(["head","last"],function(e,t){var n="take"+(t?"Right":"");yr.prototype[e]=function(){return this[n](1).value()[0]}}),Kt(["initial","tail"],function(e,t){var n="drop"+(t?"":"Right");yr.prototype[e]=function(){return this.__filtered__?new yr(this):this[n](1)}}),yr.prototype.compact=function(){return this.filter(Pl)},yr.prototype.find=function(e){return this.filter(e).head()},yr.prototype.findLast=function(e){return this.reverse().find(e)},yr.prototype.invokeMap=ko(function(e,t){return"function"==typeof e?new yr(this):this.map(function(n){return ro(n,e,t)})}),yr.prototype.reject=function(e){return this.filter(lu(Ma(e)))},yr.prototype.slice=function(e,t){e=Wu(e);var n=this;return n.__filtered__&&(e>0||t<0)?new yr(n):(e<0?n=n.takeRight(-e):e&&(n=n.drop(e)),t!==a&&(n=(t=Wu(t))<0?n.dropRight(-t):n.take(t-e)),n)},yr.prototype.takeRightWhile=function(e){return this.reverse().takeWhile(e).reverse()},yr.prototype.toArray=function(){return this.take(z)},Kr(yr.prototype,function(e,t){var n=/^(?:filter|find|map|reject)|While$/.test(t),r=/^(?:head|last)$/.test(t),o=dr[r?"take"+("last"==t?"Right":""):t],i=r||/^find/.test(t);o&&(dr.prototype[t]=function(){var t=this.__wrapped__,u=r?[1]:arguments,l=t instanceof yr,c=u[0],s=l||yu(t),f=function(e){var t=o.apply(dr,en([e],u));return r&&p?t[0]:t};s&&n&&"function"==typeof c&&1!=c.length&&(l=s=!1);var p=this.__chain__,d=!!this.__actions__.length,h=i&&!p,m=l&&!d;if(!i&&s){t=m?t:new yr(this);var v=e.apply(t,u);return v.__actions__.push({func:Fi,args:[f],thisArg:a}),new vr(v,p)}return h&&m?e.apply(this,u):(v=this.thru(f),h?r?v.value()[0]:v.value():v)})}),Kt(["pop","push","shift","sort","splice","unshift"],function(e){var t=at[e],n=/^(?:push|sort|unshift)$/.test(e)?"tap":"thru",r=/^(?:pop|shift)$/.test(e);dr.prototype[e]=function(){var e=arguments;if(r&&!this.__chain__){var o=this.value();return t.apply(yu(o)?o:[],e)}return this[n](function(n){return t.apply(yu(n)?n:[],e)})}}),Kr(yr.prototype,function(e,t){var n=dr[t];if(n){var r=n.name+"";st.call(or,r)||(or[r]=[]),or[r].push({name:t,func:n})}}),or[ha(a,g).name]=[{name:"wrapper",func:a}],yr.prototype.clone=function(){var e=new yr(this.__wrapped__);return e.__actions__=ra(this.__actions__),e.__dir__=this.__dir__,e.__filtered__=this.__filtered__,e.__iteratees__=ra(this.__iteratees__),e.__takeCount__=this.__takeCount__,e.__views__=ra(this.__views__),e},yr.prototype.reverse=function(){if(this.__filtered__){var e=new yr(this);e.__dir__=-1,e.__filtered__=!0}else(e=this.clone()).__dir__*=-1;return e},yr.prototype.value=function(){var e=this.__wrapped__.value(),t=this.__dir__,n=yu(e),r=t<0,o=n?e.length:0,a=function(e,t,n){var r=-1,o=n.length;for(;++r<o;){var a=n[r],i=a.size;switch(a.type){case"drop":e+=i;break;case"dropRight":t-=i;break;case"take":t=Hn(t,e+i);break;case"takeRight":e=qn(e,t-i)}}return{start:e,end:t}}(0,o,this.__views__),i=a.start,u=a.end,l=u-i,c=r?u:i-1,s=this.__iteratees__,f=s.length,p=0,d=Hn(l,this.__takeCount__);if(!n||!r&&o==l&&d==l)return Bo(e,this.__actions__);var h=[];e:for(;l--&&p<d;){for(var m=-1,v=e[c+=t];++m<f;){var y=s[m],g=y.iteratee,b=y.type,E=g(v);if(b==R)v=E;else if(!E){if(b==j)continue e;break e}}h[p++]=v}return h},dr.prototype.at=Wi,dr.prototype.chain=function(){return Li(this)},dr.prototype.commit=function(){return new vr(this.value(),this.__chain__)},dr.prototype.next=function(){this.__values__===a&&(this.__values__=Lu(this.value()));var e=this.__index__>=this.__values__.length;return{done:e,value:e?a:this.__values__[this.__index__++]}},dr.prototype.plant=function(e){for(var t,n=this;n instanceof mr;){var r=pi(n);r.__index__=0,r.__values__=a,t?o.__wrapped__=r:t=r;var o=r;n=n.__wrapped__}return o.__wrapped__=e,t},dr.prototype.reverse=function(){var e=this.__wrapped__;if(e instanceof yr){var t=e;return this.__actions__.length&&(t=new yr(this)),(t=t.reverse()).__actions__.push({func:Fi,args:[Oi],thisArg:a}),new vr(t,this.__chain__)}return this.thru(Oi)},dr.prototype.toJSON=dr.prototype.valueOf=dr.prototype.value=function(){return Bo(this.__wrapped__,this.__actions__)},dr.prototype.first=dr.prototype.head,Dt&&(dr.prototype[Dt]=function(){return this}),dr}();It._=An,(o=function(){return An}.call(t,n,t,r))===a||(r.exports=o)}).call(this)}).call(this,n(6),n(15)(e))},function(e,t){e.exports=function(e){var t=typeof e;return null!=e&&("object"==t||"function"==t)}},function(e,t,n){var r=n(29),o="object"==typeof self&&self&&self.Object===Object&&self,a=r||o||Function("return this")();e.exports=a},function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t){e.exports=function(e){return null!=e&&"object"==typeof e}},function(e,t,n){"use strict";var r=n(17),o={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},a={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},i={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},u={};function l(e){return r.isMemo(e)?i:u[e.$$typeof]||o}u[r.ForwardRef]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0};var c=Object.defineProperty,s=Object.getOwnPropertyNames,f=Object.getOwnPropertySymbols,p=Object.getOwnPropertyDescriptor,d=Object.getPrototypeOf,h=Object.prototype;e.exports=function e(t,n,r){if("string"!=typeof n){if(h){var o=d(n);o&&o!==h&&e(t,o,r)}var i=s(n);f&&(i=i.concat(f(n)));for(var u=l(t),m=l(n),v=0;v<i.length;++v){var y=i[v];if(!(a[y]||r&&r[y]||m&&m[y]||u&&u[y])){var g=p(n,y);try{c(t,y,g)}catch(e){}}}return t}return t}},function(e,t,n){var r=n(53),o=n(54),a=n(55),i=n(56),u=n(57);function l(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}l.prototype.clear=r,l.prototype.delete=o,l.prototype.get=a,l.prototype.has=i,l.prototype.set=u,e.exports=l},function(e,t,n){var r=n(11);e.exports=function(e,t){for(var n=e.length;n--;)if(r(e[n][0],t))return n;return-1}},function(e,t){e.exports=function(e,t){return e===t||e!=e&&t!=t}},function(e,t,n){var r=n(28),o=n(64),a=n(65),i="[object Null]",u="[object Undefined]",l=r?r.toStringTag:void 0;e.exports=function(e){return null==e?void 0===e?u:i:l&&l in Object(e)?o(e):a(e)}},function(e,t,n){var r=n(19)(Object,"create");e.exports=r},function(e,t,n){var r=n(79);e.exports=function(e,t){var n=e.__data__;return r(t)?n["string"==typeof t?"string":"hash"]:n.map}},function(e,t){e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),e.webpackPolyfill=1),e}},function(e,t,n){"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(47)},function(e,t,n){"use strict";e.exports=n(120)},,function(e,t,n){var r=n(63),o=n(69);e.exports=function(e,t){var n=o(e,t);return r(n)?n:void 0}},function(e,t,n){var r=n(12),o=n(4),a="[object AsyncFunction]",i="[object Function]",u="[object GeneratorFunction]",l="[object Proxy]";e.exports=function(e){if(!o(e))return!1;var t=r(e);return t==i||t==u||t==a||t==l}},function(e,t,n){var r=n(31);e.exports=function(e,t,n){"__proto__"==t&&r?r(e,t,{configurable:!0,enumerable:!0,value:n,writable:!0}):e[t]=n}},function(e,t,n){var r=n(20),o=n(36);e.exports=function(e){return null!=e&&o(e.length)&&!r(e)}},function(e,t,n){"use strict";(function(e,r){var o,a=n(44);o="undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==e?e:r;var i=Object(a.a)(o);t.a=i}).call(this,n(6),n(117)(e))},function(e,t){e.exports=function(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,e.__proto__=t}},function(e,t,n){var r=n(121);e.exports=d,e.exports.parse=a,e.exports.compile=function(e,t){return u(a(e,t))},e.exports.tokensToFunction=u,e.exports.tokensToRegExp=p;var o=new RegExp(["(\\\\.)","([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))"].join("|"),"g");function a(e,t){for(var n,r=[],a=0,i=0,u="",s=t&&t.delimiter||"/";null!=(n=o.exec(e));){var f=n[0],p=n[1],d=n.index;if(u+=e.slice(i,d),i=d+f.length,p)u+=p[1];else{var h=e[i],m=n[2],v=n[3],y=n[4],g=n[5],b=n[6],E=n[7];u&&(r.push(u),u="");var w=null!=m&&null!=h&&h!==m,_="+"===b||"*"===b,x="?"===b||"*"===b,k=n[2]||s,S=y||g;r.push({name:v||a++,prefix:m||"",delimiter:k,optional:x,repeat:_,partial:w,asterisk:!!E,pattern:S?c(S):E?".*":"[^"+l(k)+"]+?"})}}return i<e.length&&(u+=e.substr(i)),u&&r.push(u),r}function i(e){return encodeURI(e).replace(/[\/?#]/g,function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()})}function u(e){for(var t=new Array(e.length),n=0;n<e.length;n++)"object"==typeof e[n]&&(t[n]=new RegExp("^(?:"+e[n].pattern+")$"));return function(n,o){for(var a="",u=n||{},l=(o||{}).pretty?i:encodeURIComponent,c=0;c<e.length;c++){var s=e[c];if("string"!=typeof s){var f,p=u[s.name];if(null==p){if(s.optional){s.partial&&(a+=s.prefix);continue}throw new TypeError('Expected "'+s.name+'" to be defined')}if(r(p)){if(!s.repeat)throw new TypeError('Expected "'+s.name+'" to not repeat, but received `'+JSON.stringify(p)+"`");if(0===p.length){if(s.optional)continue;throw new TypeError('Expected "'+s.name+'" to not be empty')}for(var d=0;d<p.length;d++){if(f=l(p[d]),!t[c].test(f))throw new TypeError('Expected all "'+s.name+'" to match "'+s.pattern+'", but received `'+JSON.stringify(f)+"`");a+=(0===d?s.prefix:s.delimiter)+f}}else{if(f=s.asterisk?encodeURI(p).replace(/[?#]/g,function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()}):l(p),!t[c].test(f))throw new TypeError('Expected "'+s.name+'" to match "'+s.pattern+'", but received "'+f+'"');a+=s.prefix+f}}else a+=s}return a}}function l(e){return e.replace(/([.+*?=^!:${}()[\]|\/\\])/g,"\\$1")}function c(e){return e.replace(/([=!:$\/()])/g,"\\$1")}function s(e,t){return e.keys=t,e}function f(e){return e.sensitive?"":"i"}function p(e,t,n){r(t)||(n=t||n,t=[]);for(var o=(n=n||{}).strict,a=!1!==n.end,i="",u=0;u<e.length;u++){var c=e[u];if("string"==typeof c)i+=l(c);else{var p=l(c.prefix),d="(?:"+c.pattern+")";t.push(c),c.repeat&&(d+="(?:"+p+d+")*"),i+=d=c.optional?c.partial?p+"("+d+")?":"(?:"+p+"("+d+"))?":p+"("+d+")"}}var h=l(n.delimiter||"/"),m=i.slice(-h.length)===h;return o||(i=(m?i.slice(0,-h.length):i)+"(?:"+h+"(?=$))?"),i+=a?"$":o&&m?"":"(?="+h+"|$)",s(new RegExp("^"+i,f(n)),t)}function d(e,t,n){return r(t)||(n=t||n,t=[]),n=n||{},e instanceof RegExp?function(e,t){var n=e.source.match(/\((?!\?)/g);if(n)for(var r=0;r<n.length;r++)t.push({name:r,prefix:null,delimiter:null,optional:!1,repeat:!1,partial:!1,asterisk:!1,pattern:null});return s(e,t)}(e,t):r(e)?function(e,t,n){for(var r=[],o=0;o<e.length;o++)r.push(d(e[o],t,n).source);return s(new RegExp("(?:"+r.join("|")+")",f(n)),t)}(e,t,n):function(e,t,n){return p(a(e,n),t,n)}(e,t,n)}},function(e,t,n){"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/var r=Object.getOwnPropertySymbols,o=Object.prototype.hasOwnProperty,a=Object.prototype.propertyIsEnumerable;function i(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map(function(e){return t[e]}).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach(function(e){r[e]=e}),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,t){for(var n,u,l=i(e),c=1;c<arguments.length;c++){for(var s in n=Object(arguments[c]))o.call(n,s)&&(l[s]=n[s]);if(r){u=r(n);for(var f=0;f<u.length;f++)a.call(n,u[f])&&(l[u[f]]=n[u[f]])}}return l}},function(e,t,n){var r=n(19)(n(5),"Map");e.exports=r},function(e,t,n){var r=n(5).Symbol;e.exports=r},function(e,t,n){(function(t){var n="object"==typeof t&&t&&t.Object===Object&&t;e.exports=n}).call(this,n(6))},function(e,t,n){var r=n(21),o=n(11);e.exports=function(e,t,n){(void 0===n||o(e[t],n))&&(void 0!==n||t in e)||r(e,t,n)}},function(e,t,n){var r=n(19),o=function(){try{var e=r(Object,"defineProperty");return e({},"",{}),e}catch(e){}}();e.exports=o},function(e,t,n){var r=n(93)(Object.getPrototypeOf,Object);e.exports=r},function(e,t){var n=Object.prototype;e.exports=function(e){var t=e&&e.constructor;return e===("function"==typeof t&&t.prototype||n)}},function(e,t,n){var r=n(94),o=n(7),a=Object.prototype,i=a.hasOwnProperty,u=a.propertyIsEnumerable,l=r(function(){return arguments}())?r:function(e){return o(e)&&i.call(e,"callee")&&!u.call(e,"callee")};e.exports=l},function(e,t){var n=Array.isArray;e.exports=n},function(e,t){var n=9007199254740991;e.exports=function(e){return"number"==typeof e&&e>-1&&e%1==0&&e<=n}},function(e,t,n){(function(e){var r=n(5),o=n(96),a=t&&!t.nodeType&&t,i=a&&"object"==typeof e&&e&&!e.nodeType&&e,u=i&&i.exports===a?r.Buffer:void 0,l=(u?u.isBuffer:void 0)||o;e.exports=l}).call(this,n(15)(e))},function(e,t,n){var r=n(98),o=n(99),a=n(100),i=a&&a.isTypedArray,u=i?o(i):r;e.exports=u},function(e,t){e.exports=function(e,t){if(("constructor"!==t||"function"!=typeof e[t])&&"__proto__"!=t)return e[t]}},function(e,t,n){var r=n(104),o=n(106),a=n(22);e.exports=function(e){return a(e)?r(e,!0):o(e)}},function(e,t){var n=9007199254740991,r=/^(?:0|[1-9]\d*)$/;e.exports=function(e,t){var o=typeof e;return!!(t=null==t?n:t)&&("number"==o||"symbol"!=o&&r.test(e))&&e>-1&&e%1==0&&e<t}},function(e,t){e.exports=function(e){return e}},function(e,t,n){(function(e){!function(t){"use strict";function n(e,t){e.super_=t,e.prototype=Object.create(t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}})}function r(e,t){Object.defineProperty(this,"kind",{value:e,enumerable:!0}),t&&t.length&&Object.defineProperty(this,"path",{value:t,enumerable:!0})}function o(e,t,n){o.super_.call(this,"E",e),Object.defineProperty(this,"lhs",{value:t,enumerable:!0}),Object.defineProperty(this,"rhs",{value:n,enumerable:!0})}function a(e,t){a.super_.call(this,"N",e),Object.defineProperty(this,"rhs",{value:t,enumerable:!0})}function i(e,t){i.super_.call(this,"D",e),Object.defineProperty(this,"lhs",{value:t,enumerable:!0})}function u(e,t,n){u.super_.call(this,"A",e),Object.defineProperty(this,"index",{value:t,enumerable:!0}),Object.defineProperty(this,"item",{value:n,enumerable:!0})}function l(e,t,n){var r=e.slice((n||t)+1||e.length);return e.length=t<0?e.length+t:t,e.push.apply(e,r),e}function c(e){var t=void 0===e?"undefined":x(e);return"object"!==t?t:e===Math?"math":null===e?"null":Array.isArray(e)?"array":"[object Date]"===Object.prototype.toString.call(e)?"date":"function"==typeof e.toString&&/^\/.*\//.test(e.toString())?"regexp":"object"}function s(e,t,n,r,f,p,d){d=d||[];var h=(f=f||[]).slice(0);if(void 0!==p){if(r){if("function"==typeof r&&r(h,p))return;if("object"===(void 0===r?"undefined":x(r))){if(r.prefilter&&r.prefilter(h,p))return;if(r.normalize){var m=r.normalize(h,p,e,t);m&&(e=m[0],t=m[1])}}}h.push(p)}"regexp"===c(e)&&"regexp"===c(t)&&(e=e.toString(),t=t.toString());var v=void 0===e?"undefined":x(e),y=void 0===t?"undefined":x(t),g="undefined"!==v||d&&d[d.length-1].lhs&&d[d.length-1].lhs.hasOwnProperty(p),b="undefined"!==y||d&&d[d.length-1].rhs&&d[d.length-1].rhs.hasOwnProperty(p);if(!g&&b)n(new a(h,t));else if(!b&&g)n(new i(h,e));else if(c(e)!==c(t))n(new o(h,e,t));else if("date"===c(e)&&e-t!=0)n(new o(h,e,t));else if("object"===v&&null!==e&&null!==t)if(d.filter(function(t){return t.lhs===e}).length)e!==t&&n(new o(h,e,t));else{if(d.push({lhs:e,rhs:t}),Array.isArray(e)){var E;for(e.length,E=0;E<e.length;E++)E>=t.length?n(new u(h,E,new i(void 0,e[E]))):s(e[E],t[E],n,r,h,E,d);for(;E<t.length;)n(new u(h,E,new a(void 0,t[E++])))}else{var w=Object.keys(e),_=Object.keys(t);w.forEach(function(o,a){var i=_.indexOf(o);i>=0?(s(e[o],t[o],n,r,h,o,d),_=l(_,i)):s(e[o],void 0,n,r,h,o,d)}),_.forEach(function(e){s(void 0,t[e],n,r,h,e,d)})}d.length=d.length-1}else e!==t&&("number"===v&&isNaN(e)&&isNaN(t)||n(new o(h,e,t)))}function f(e,t,n,r){return r=r||[],s(e,t,function(e){e&&r.push(e)},n),r.length?r:void 0}function p(e,t,n){if(e&&t&&n&&n.kind){for(var r=e,o=-1,a=n.path?n.path.length-1:0;++o<a;)void 0===r[n.path[o]]&&(r[n.path[o]]="number"==typeof n.path[o]?[]:{}),r=r[n.path[o]];switch(n.kind){case"A":!function e(t,n,r){if(r.path&&r.path.length){var o,a=t[n],i=r.path.length-1;for(o=0;o<i;o++)a=a[r.path[o]];switch(r.kind){case"A":e(a[r.path[o]],r.index,r.item);break;case"D":delete a[r.path[o]];break;case"E":case"N":a[r.path[o]]=r.rhs}}else switch(r.kind){case"A":e(t[n],r.index,r.item);break;case"D":t=l(t,n);break;case"E":case"N":t[n]=r.rhs}return t}(n.path?r[n.path[o]]:r,n.index,n.item);break;case"D":delete r[n.path[o]];break;case"E":case"N":r[n.path[o]]=n.rhs}}}function d(e){return"color: "+N[e].color+"; font-weight: bold"}function h(e,t,n,r){var o=f(e,t);try{r?n.groupCollapsed("diff"):n.group("diff")}catch(e){n.log("diff")}o?o.forEach(function(e){var t=e.kind,r=function(e){var t=e.kind,n=e.path,r=e.lhs,o=e.rhs,a=e.index,i=e.item;switch(t){case"E":return[n.join("."),r,"→",o];case"N":return[n.join("."),o];case"D":return[n.join(".")];case"A":return[n.join(".")+"["+a+"]",i];default:return[]}}(e);n.log.apply(n,["%c "+N[t].text,d(t)].concat(k(r)))}):n.log("—— no diff ——");try{n.groupEnd()}catch(e){n.log("—— diff end —— ")}}function m(e,t,n,r){switch(void 0===e?"undefined":x(e)){case"object":return"function"==typeof e[r]?e[r].apply(e,k(n)):e[r];case"function":return e(t);default:return e}}function v(e,t){var n=t.logger,r=t.actionTransformer,o=t.titleFormatter,a=void 0===o?function(e){var t=e.timestamp,n=e.duration;return function(e,r,o){var a=["action"];return a.push("%c"+String(e.type)),t&&a.push("%c@ "+r),n&&a.push("%c(in "+o.toFixed(2)+" ms)"),a.join(" ")}}(t):o,i=t.collapsed,u=t.colors,l=t.level,c=t.diff,s=void 0===t.titleFormatter;e.forEach(function(o,f){var p=o.started,d=o.startedTime,v=o.action,y=o.prevState,g=o.error,b=o.took,E=o.nextState,_=e[f+1];_&&(E=_.prevState,b=_.started-p);var x=r(v),k="function"==typeof i?i(function(){return E},v,o):i,S=w(d),N=u.title?"color: "+u.title(x)+";":"",O=["color: gray; font-weight: lighter;"];O.push(N),t.timestamp&&O.push("color: gray; font-weight: lighter;"),t.duration&&O.push("color: gray; font-weight: lighter;");var T=a(x,S,b);try{k?u.title&&s?n.groupCollapsed.apply(n,["%c "+T].concat(O)):n.groupCollapsed(T):u.title&&s?n.group.apply(n,["%c "+T].concat(O)):n.group(T)}catch(e){n.log(T)}var C=m(l,x,[y],"prevState"),P=m(l,x,[x],"action"),j=m(l,x,[g,y],"error"),R=m(l,x,[E],"nextState");if(C)if(u.prevState){var I="color: "+u.prevState(y)+"; font-weight: bold";n[C]("%c prev state",I,y)}else n[C]("prev state",y);if(P)if(u.action){var A="color: "+u.action(x)+"; font-weight: bold";n[P]("%c action    ",A,x)}else n[P]("action    ",x);if(g&&j)if(u.error){var U="color: "+u.error(g,y)+"; font-weight: bold;";n[j]("%c error     ",U,g)}else n[j]("error     ",g);if(R)if(u.nextState){var M="color: "+u.nextState(E)+"; font-weight: bold";n[R]("%c next state",M,E)}else n[R]("next state",E);c&&h(y,E,n,k);try{n.groupEnd()}catch(e){n.log("—— log end ——")}})}function y(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=Object.assign({},O,e),n=t.logger,r=t.stateTransformer,o=t.errorTransformer,a=t.predicate,i=t.logErrors,u=t.diffPredicate;if(void 0===n)return function(){return function(e){return function(t){return e(t)}}};if(e.getState&&e.dispatch)return console.error("[redux-logger] redux-logger not installed. Make sure to pass logger instance as middleware:\n// Logger with default options\nimport { logger } from 'redux-logger'\nconst store = createStore(\n  reducer,\n  applyMiddleware(logger)\n)\n// Or you can create your own logger with custom options http://bit.ly/redux-logger-options\nimport createLogger from 'redux-logger'\nconst logger = createLogger({\n  // ...options\n});\nconst store = createStore(\n  reducer,\n  applyMiddleware(logger)\n)\n"),function(){return function(e){return function(t){return e(t)}}};var l=[];return function(e){var n=e.getState;return function(e){return function(c){if("function"==typeof a&&!a(n,c))return e(c);var s={};l.push(s),s.started=_.now(),s.startedTime=new Date,s.prevState=r(n()),s.action=c;var f=void 0;if(i)try{f=e(c)}catch(e){s.error=o(e)}else f=e(c);s.took=_.now()-s.started,s.nextState=r(n());var p=t.diff&&"function"==typeof u?u(n,c):t.diff;if(v(l,Object.assign({},t,{diff:p})),l.length=0,s.error)throw s.error;return f}}}}var g,b,E=function(e,t){return function(e,t){return new Array(t+1).join(e)}("0",t-e.toString().length)+e},w=function(e){return E(e.getHours(),2)+":"+E(e.getMinutes(),2)+":"+E(e.getSeconds(),2)+"."+E(e.getMilliseconds(),3)},_="undefined"!=typeof performance&&null!==performance&&"function"==typeof performance.now?performance:Date,x="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},k=function(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)},S=[];g="object"===(void 0===e?"undefined":x(e))&&e?e:"undefined"!=typeof window?window:{},(b=g.DeepDiff)&&S.push(function(){void 0!==b&&g.DeepDiff===f&&(g.DeepDiff=b,b=void 0)}),n(o,r),n(a,r),n(i,r),n(u,r),Object.defineProperties(f,{diff:{value:f,enumerable:!0},observableDiff:{value:s,enumerable:!0},applyDiff:{value:function(e,t,n){e&&t&&s(e,t,function(r){n&&!n(e,t,r)||p(e,t,r)})},enumerable:!0},applyChange:{value:p,enumerable:!0},revertChange:{value:function(e,t,n){if(e&&t&&n&&n.kind){var r,o,a=e;for(o=n.path.length-1,r=0;r<o;r++)void 0===a[n.path[r]]&&(a[n.path[r]]={}),a=a[n.path[r]];switch(n.kind){case"A":!function e(t,n,r){if(r.path&&r.path.length){var o,a=t[n],i=r.path.length-1;for(o=0;o<i;o++)a=a[r.path[o]];switch(r.kind){case"A":e(a[r.path[o]],r.index,r.item);break;case"D":case"E":a[r.path[o]]=r.lhs;break;case"N":delete a[r.path[o]]}}else switch(r.kind){case"A":e(t[n],r.index,r.item);break;case"D":case"E":t[n]=r.lhs;break;case"N":t=l(t,n)}return t}(a[n.path[r]],n.index,n.item);break;case"D":case"E":a[n.path[r]]=n.lhs;break;case"N":delete a[n.path[r]]}}},enumerable:!0},isConflict:{value:function(){return void 0!==b},enumerable:!0},noConflict:{value:function(){return S&&(S.forEach(function(e){e()}),S=null),f},enumerable:!0}});var N={E:{color:"#2196F3",text:"CHANGED:"},N:{color:"#4CAF50",text:"ADDED:"},D:{color:"#F44336",text:"DELETED:"},A:{color:"#2196F3",text:"ARRAY:"}},O={level:"log",logger:console,logErrors:!0,collapsed:void 0,predicate:void 0,duration:!1,timestamp:!0,stateTransformer:function(e){return e},actionTransformer:function(e){return e},errorTransformer:function(e){return e},colors:{title:function(){return"inherit"},prevState:function(){return"#9E9E9E"},action:function(){return"#03A9F4"},nextState:function(){return"#4CAF50"},error:function(){return"#F20404"}},diff:!1,diffPredicate:void 0,transformer:void 0},T=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.dispatch,n=e.getState;return"function"==typeof t||"function"==typeof n?y()({dispatch:t,getState:n}):void console.error("\n[redux-logger v3] BREAKING CHANGE\n[redux-logger v3] Since 3.0.0 redux-logger exports by default logger with default settings.\n[redux-logger v3] Change\n[redux-logger v3] import createLogger from 'redux-logger'\n[redux-logger v3] to\n[redux-logger v3] import { createLogger } from 'redux-logger'\n")};t.defaults=O,t.createLogger=y,t.logger=T,t.default=T,Object.defineProperty(t,"__esModule",{value:!0})}(t)}).call(this,n(6))},function(e,t,n){"use strict";function r(e){var t,n=e.Symbol;return"function"==typeof n?n.observable?t=n.observable:(t=n("observable"),n.observable=t):t="@@observable",t}n.d(t,"a",function(){return r})},function(e,t,n){"use strict";(function(t){var n="__global_unique_id__";e.exports=function(){return t[n]=(t[n]||0)+1}}).call(this,n(6))},function(e,t,n){"use strict";
/** @license React v16.9.0
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(26),o="function"==typeof Symbol&&Symbol.for,a=o?Symbol.for("react.element"):60103,i=o?Symbol.for("react.portal"):60106,u=o?Symbol.for("react.fragment"):60107,l=o?Symbol.for("react.strict_mode"):60108,c=o?Symbol.for("react.profiler"):60114,s=o?Symbol.for("react.provider"):60109,f=o?Symbol.for("react.context"):60110,p=o?Symbol.for("react.forward_ref"):60112,d=o?Symbol.for("react.suspense"):60113,h=o?Symbol.for("react.suspense_list"):60120,m=o?Symbol.for("react.memo"):60115,v=o?Symbol.for("react.lazy"):60116;o&&Symbol.for("react.fundamental"),o&&Symbol.for("react.responder");var y="function"==typeof Symbol&&Symbol.iterator;function g(e){for(var t=e.message,n="https://reactjs.org/docs/error-decoder.html?invariant="+t,r=1;r<arguments.length;r++)n+="&args[]="+encodeURIComponent(arguments[r]);return e.message="Minified React error #"+t+"; visit "+n+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings. ",e}var b={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},E={};function w(e,t,n){this.props=e,this.context=t,this.refs=E,this.updater=n||b}function _(){}function x(e,t,n){this.props=e,this.context=t,this.refs=E,this.updater=n||b}w.prototype.isReactComponent={},w.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw g(Error(85));this.updater.enqueueSetState(this,e,t,"setState")},w.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},_.prototype=w.prototype;var k=x.prototype=new _;k.constructor=x,r(k,w.prototype),k.isPureReactComponent=!0;var S={current:null},N={suspense:null},O={current:null},T=Object.prototype.hasOwnProperty,C={key:!0,ref:!0,__self:!0,__source:!0};function P(e,t,n){var r=void 0,o={},i=null,u=null;if(null!=t)for(r in void 0!==t.ref&&(u=t.ref),void 0!==t.key&&(i=""+t.key),t)T.call(t,r)&&!C.hasOwnProperty(r)&&(o[r]=t[r]);var l=arguments.length-2;if(1===l)o.children=n;else if(1<l){for(var c=Array(l),s=0;s<l;s++)c[s]=arguments[s+2];o.children=c}if(e&&e.defaultProps)for(r in l=e.defaultProps)void 0===o[r]&&(o[r]=l[r]);return{$$typeof:a,type:e,key:i,ref:u,props:o,_owner:O.current}}function j(e){return"object"==typeof e&&null!==e&&e.$$typeof===a}var R=/\/+/g,I=[];function A(e,t,n,r){if(I.length){var o=I.pop();return o.result=e,o.keyPrefix=t,o.func=n,o.context=r,o.count=0,o}return{result:e,keyPrefix:t,func:n,context:r,count:0}}function U(e){e.result=null,e.keyPrefix=null,e.func=null,e.context=null,e.count=0,10>I.length&&I.push(e)}function M(e,t,n){return null==e?0:function e(t,n,r,o){var u=typeof t;"undefined"!==u&&"boolean"!==u||(t=null);var l=!1;if(null===t)l=!0;else switch(u){case"string":case"number":l=!0;break;case"object":switch(t.$$typeof){case a:case i:l=!0}}if(l)return r(o,t,""===n?"."+z(t,0):n),1;if(l=0,n=""===n?".":n+":",Array.isArray(t))for(var c=0;c<t.length;c++){var s=n+z(u=t[c],c);l+=e(u,s,r,o)}else if(s=null===t||"object"!=typeof t?null:"function"==typeof(s=y&&t[y]||t["@@iterator"])?s:null,"function"==typeof s)for(t=s.call(t),c=0;!(u=t.next()).done;)l+=e(u=u.value,s=n+z(u,c++),r,o);else if("object"===u)throw r=""+t,g(Error(31),"[object Object]"===r?"object with keys {"+Object.keys(t).join(", ")+"}":r,"");return l}(e,"",t,n)}function z(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+(""+e).replace(/[=:]/g,function(e){return t[e]})}(e.key):t.toString(36)}function D(e,t){e.func.call(e.context,t,e.count++)}function L(e,t,n){var r=e.result,o=e.keyPrefix;e=e.func.call(e.context,t,e.count++),Array.isArray(e)?F(e,r,n,function(e){return e}):null!=e&&(j(e)&&(e=function(e,t){return{$$typeof:a,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(e,o+(!e.key||t&&t.key===e.key?"":(""+e.key).replace(R,"$&/")+"/")+n)),r.push(e))}function F(e,t,n,r,o){var a="";null!=n&&(a=(""+n).replace(R,"$&/")+"/"),M(e,L,t=A(t,a,r,o)),U(t)}function W(){var e=S.current;if(null===e)throw g(Error(321));return e}var B={Children:{map:function(e,t,n){if(null==e)return e;var r=[];return F(e,r,null,t,n),r},forEach:function(e,t,n){if(null==e)return e;M(e,D,t=A(null,null,t,n)),U(t)},count:function(e){return M(e,function(){return null},null)},toArray:function(e){var t=[];return F(e,t,null,function(e){return e}),t},only:function(e){if(!j(e))throw g(Error(143));return e}},createRef:function(){return{current:null}},Component:w,PureComponent:x,createContext:function(e,t){return void 0===t&&(t=null),(e={$$typeof:f,_calculateChangedBits:t,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:s,_context:e},e.Consumer=e},forwardRef:function(e){return{$$typeof:p,render:e}},lazy:function(e){return{$$typeof:v,_ctor:e,_status:-1,_result:null}},memo:function(e,t){return{$$typeof:m,type:e,compare:void 0===t?null:t}},useCallback:function(e,t){return W().useCallback(e,t)},useContext:function(e,t){return W().useContext(e,t)},useEffect:function(e,t){return W().useEffect(e,t)},useImperativeHandle:function(e,t,n){return W().useImperativeHandle(e,t,n)},useDebugValue:function(){},useLayoutEffect:function(e,t){return W().useLayoutEffect(e,t)},useMemo:function(e,t){return W().useMemo(e,t)},useReducer:function(e,t,n){return W().useReducer(e,t,n)},useRef:function(e){return W().useRef(e)},useState:function(e){return W().useState(e)},Fragment:u,Profiler:c,StrictMode:l,Suspense:d,unstable_SuspenseList:h,createElement:P,cloneElement:function(e,t,n){if(null==e)throw g(Error(267),e);var o=void 0,i=r({},e.props),u=e.key,l=e.ref,c=e._owner;if(null!=t){void 0!==t.ref&&(l=t.ref,c=O.current),void 0!==t.key&&(u=""+t.key);var s=void 0;for(o in e.type&&e.type.defaultProps&&(s=e.type.defaultProps),t)T.call(t,o)&&!C.hasOwnProperty(o)&&(i[o]=void 0===t[o]&&void 0!==s?s[o]:t[o])}if(1===(o=arguments.length-2))i.children=n;else if(1<o){s=Array(o);for(var f=0;f<o;f++)s[f]=arguments[f+2];i.children=s}return{$$typeof:a,type:e.type,key:u,ref:l,props:i,_owner:c}},createFactory:function(e){var t=P.bind(null,e);return t.type=e,t},isValidElement:j,version:"16.9.0",unstable_withSuspenseConfig:function(e,t){var n=N.suspense;N.suspense=void 0===t?null:t;try{e()}finally{N.suspense=n}},__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{ReactCurrentDispatcher:S,ReactCurrentBatchConfig:N,ReactCurrentOwner:O,IsSomeRendererActing:{current:!1},assign:r}},$={default:B},V=$&&B||$;e.exports=V.default||V},function(e,t,n){"use strict";
/** @license React v16.9.0
 * react-dom.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(0),o=n(26),a=n(48);function i(e){for(var t=e.message,n="https://reactjs.org/docs/error-decoder.html?invariant="+t,r=1;r<arguments.length;r++)n+="&args[]="+encodeURIComponent(arguments[r]);return e.message="Minified React error #"+t+"; visit "+n+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings. ",e}if(!r)throw i(Error(227));var u=null,l={};function c(){if(u)for(var e in l){var t=l[e],n=u.indexOf(e);if(!(-1<n))throw i(Error(96),e);if(!f[n]){if(!t.extractEvents)throw i(Error(97),e);for(var r in f[n]=t,n=t.eventTypes){var o=void 0,a=n[r],c=t,d=r;if(p.hasOwnProperty(d))throw i(Error(99),d);p[d]=a;var h=a.phasedRegistrationNames;if(h){for(o in h)h.hasOwnProperty(o)&&s(h[o],c,d);o=!0}else a.registrationName?(s(a.registrationName,c,d),o=!0):o=!1;if(!o)throw i(Error(98),r,e)}}}}function s(e,t,n){if(d[e])throw i(Error(100),e);d[e]=t,h[e]=t.eventTypes[n].dependencies}var f=[],p={},d={},h={};var m=!1,v=null,y=!1,g=null,b={onError:function(e){m=!0,v=e}};function E(e,t,n,r,o,a,i,u,l){m=!1,v=null,function(e,t,n,r,o,a,i,u,l){var c=Array.prototype.slice.call(arguments,3);try{t.apply(n,c)}catch(e){this.onError(e)}}.apply(b,arguments)}var w=null,_=null,x=null;function k(e,t,n){var r=e.type||"unknown-event";e.currentTarget=x(n),function(e,t,n,r,o,a,u,l,c){if(E.apply(this,arguments),m){if(!m)throw i(Error(198));var s=v;m=!1,v=null,y||(y=!0,g=s)}}(r,t,void 0,e),e.currentTarget=null}function S(e,t){if(null==t)throw i(Error(30));return null==e?t:Array.isArray(e)?Array.isArray(t)?(e.push.apply(e,t),e):(e.push(t),e):Array.isArray(t)?[e].concat(t):[e,t]}function N(e,t,n){Array.isArray(e)?e.forEach(t,n):e&&t.call(n,e)}var O=null;function T(e){if(e){var t=e._dispatchListeners,n=e._dispatchInstances;if(Array.isArray(t))for(var r=0;r<t.length&&!e.isPropagationStopped();r++)k(e,t[r],n[r]);else t&&k(e,t,n);e._dispatchListeners=null,e._dispatchInstances=null,e.isPersistent()||e.constructor.release(e)}}function C(e){if(null!==e&&(O=S(O,e)),e=O,O=null,e){if(N(e,T),O)throw i(Error(95));if(y)throw e=g,y=!1,g=null,e}}var P={injectEventPluginOrder:function(e){if(u)throw i(Error(101));u=Array.prototype.slice.call(e),c()},injectEventPluginsByName:function(e){var t,n=!1;for(t in e)if(e.hasOwnProperty(t)){var r=e[t];if(!l.hasOwnProperty(t)||l[t]!==r){if(l[t])throw i(Error(102),t);l[t]=r,n=!0}}n&&c()}};function j(e,t){var n=e.stateNode;if(!n)return null;var r=w(n);if(!r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw i(Error(231),t,typeof n);return n}var R=Math.random().toString(36).slice(2),I="__reactInternalInstance$"+R,A="__reactEventHandlers$"+R;function U(e){if(e[I])return e[I];for(;!e[I];){if(!e.parentNode)return null;e=e.parentNode}return 5===(e=e[I]).tag||6===e.tag?e:null}function M(e){return!(e=e[I])||5!==e.tag&&6!==e.tag?null:e}function z(e){if(5===e.tag||6===e.tag)return e.stateNode;throw i(Error(33))}function D(e){return e[A]||null}function L(e){do{e=e.return}while(e&&5!==e.tag);return e||null}function F(e,t,n){(t=j(e,n.dispatchConfig.phasedRegistrationNames[t]))&&(n._dispatchListeners=S(n._dispatchListeners,t),n._dispatchInstances=S(n._dispatchInstances,e))}function W(e){if(e&&e.dispatchConfig.phasedRegistrationNames){for(var t=e._targetInst,n=[];t;)n.push(t),t=L(t);for(t=n.length;0<t--;)F(n[t],"captured",e);for(t=0;t<n.length;t++)F(n[t],"bubbled",e)}}function B(e,t,n){e&&n&&n.dispatchConfig.registrationName&&(t=j(e,n.dispatchConfig.registrationName))&&(n._dispatchListeners=S(n._dispatchListeners,t),n._dispatchInstances=S(n._dispatchInstances,e))}function $(e){e&&e.dispatchConfig.registrationName&&B(e._targetInst,null,e)}function V(e){N(e,W)}var q=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement);function H(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var K={animationend:H("Animation","AnimationEnd"),animationiteration:H("Animation","AnimationIteration"),animationstart:H("Animation","AnimationStart"),transitionend:H("Transition","TransitionEnd")},Q={},G={};function Y(e){if(Q[e])return Q[e];if(!K[e])return e;var t,n=K[e];for(t in n)if(n.hasOwnProperty(t)&&t in G)return Q[e]=n[t];return e}q&&(G=document.createElement("div").style,"AnimationEvent"in window||(delete K.animationend.animation,delete K.animationiteration.animation,delete K.animationstart.animation),"TransitionEvent"in window||delete K.transitionend.transition);var Z=Y("animationend"),X=Y("animationiteration"),J=Y("animationstart"),ee=Y("transitionend"),te="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),ne=null,re=null,oe=null;function ae(){if(oe)return oe;var e,t,n=re,r=n.length,o="value"in ne?ne.value:ne.textContent,a=o.length;for(e=0;e<r&&n[e]===o[e];e++);var i=r-e;for(t=1;t<=i&&n[r-t]===o[a-t];t++);return oe=o.slice(e,1<t?1-t:void 0)}function ie(){return!0}function ue(){return!1}function le(e,t,n,r){for(var o in this.dispatchConfig=e,this._targetInst=t,this.nativeEvent=n,e=this.constructor.Interface)e.hasOwnProperty(o)&&((t=e[o])?this[o]=t(n):"target"===o?this.target=r:this[o]=n[o]);return this.isDefaultPrevented=(null!=n.defaultPrevented?n.defaultPrevented:!1===n.returnValue)?ie:ue,this.isPropagationStopped=ue,this}function ce(e,t,n,r){if(this.eventPool.length){var o=this.eventPool.pop();return this.call(o,e,t,n,r),o}return new this(e,t,n,r)}function se(e){if(!(e instanceof this))throw i(Error(279));e.destructor(),10>this.eventPool.length&&this.eventPool.push(e)}function fe(e){e.eventPool=[],e.getPooled=ce,e.release=se}o(le.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=ie)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=ie)},persist:function(){this.isPersistent=ie},isPersistent:ue,destructor:function(){var e,t=this.constructor.Interface;for(e in t)this[e]=null;this.nativeEvent=this._targetInst=this.dispatchConfig=null,this.isPropagationStopped=this.isDefaultPrevented=ue,this._dispatchInstances=this._dispatchListeners=null}}),le.Interface={type:null,target:null,currentTarget:function(){return null},eventPhase:null,bubbles:null,cancelable:null,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:null,isTrusted:null},le.extend=function(e){function t(){}function n(){return r.apply(this,arguments)}var r=this;t.prototype=r.prototype;var a=new t;return o(a,n.prototype),n.prototype=a,n.prototype.constructor=n,n.Interface=o({},r.Interface,e),n.extend=r.extend,fe(n),n},fe(le);var pe=le.extend({data:null}),de=le.extend({data:null}),he=[9,13,27,32],me=q&&"CompositionEvent"in window,ve=null;q&&"documentMode"in document&&(ve=document.documentMode);var ye=q&&"TextEvent"in window&&!ve,ge=q&&(!me||ve&&8<ve&&11>=ve),be=String.fromCharCode(32),Ee={beforeInput:{phasedRegistrationNames:{bubbled:"onBeforeInput",captured:"onBeforeInputCapture"},dependencies:["compositionend","keypress","textInput","paste"]},compositionEnd:{phasedRegistrationNames:{bubbled:"onCompositionEnd",captured:"onCompositionEndCapture"},dependencies:"blur compositionend keydown keypress keyup mousedown".split(" ")},compositionStart:{phasedRegistrationNames:{bubbled:"onCompositionStart",captured:"onCompositionStartCapture"},dependencies:"blur compositionstart keydown keypress keyup mousedown".split(" ")},compositionUpdate:{phasedRegistrationNames:{bubbled:"onCompositionUpdate",captured:"onCompositionUpdateCapture"},dependencies:"blur compositionupdate keydown keypress keyup mousedown".split(" ")}},we=!1;function _e(e,t){switch(e){case"keyup":return-1!==he.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"blur":return!0;default:return!1}}function xe(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var ke=!1;var Se={eventTypes:Ee,extractEvents:function(e,t,n,r){var o=void 0,a=void 0;if(me)e:{switch(e){case"compositionstart":o=Ee.compositionStart;break e;case"compositionend":o=Ee.compositionEnd;break e;case"compositionupdate":o=Ee.compositionUpdate;break e}o=void 0}else ke?_e(e,n)&&(o=Ee.compositionEnd):"keydown"===e&&229===n.keyCode&&(o=Ee.compositionStart);return o?(ge&&"ko"!==n.locale&&(ke||o!==Ee.compositionStart?o===Ee.compositionEnd&&ke&&(a=ae()):(re="value"in(ne=r)?ne.value:ne.textContent,ke=!0)),o=pe.getPooled(o,t,n,r),a?o.data=a:null!==(a=xe(n))&&(o.data=a),V(o),a=o):a=null,(e=ye?function(e,t){switch(e){case"compositionend":return xe(t);case"keypress":return 32!==t.which?null:(we=!0,be);case"textInput":return(e=t.data)===be&&we?null:e;default:return null}}(e,n):function(e,t){if(ke)return"compositionend"===e||!me&&_e(e,t)?(e=ae(),oe=re=ne=null,ke=!1,e):null;switch(e){case"paste":return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return ge&&"ko"!==t.locale?null:t.data;default:return null}}(e,n))?((t=de.getPooled(Ee.beforeInput,t,n,r)).data=e,V(t)):t=null,null===a?t:null===t?a:[a,t]}},Ne=null,Oe=null,Te=null;function Ce(e){if(e=_(e)){if("function"!=typeof Ne)throw i(Error(280));var t=w(e.stateNode);Ne(e.stateNode,e.type,t)}}function Pe(e){Oe?Te?Te.push(e):Te=[e]:Oe=e}function je(){if(Oe){var e=Oe,t=Te;if(Te=Oe=null,Ce(e),t)for(e=0;e<t.length;e++)Ce(t[e])}}function Re(e,t){return e(t)}function Ie(e,t,n,r){return e(t,n,r)}function Ae(){}var Ue=Re,Me=!1;function ze(){null===Oe&&null===Te||(Ae(),je())}var De={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Le(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!De[e.type]:"textarea"===t}function Fe(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}function We(e){if(!q)return!1;var t=(e="on"+e)in document;return t||((t=document.createElement("div")).setAttribute(e,"return;"),t="function"==typeof t[e]),t}function Be(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function $e(e){e._valueTracker||(e._valueTracker=function(e){var t=Be(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var o=n.get,a=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return o.call(this)},set:function(e){r=""+e,a.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function Ve(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=Be(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}var qe=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;qe.hasOwnProperty("ReactCurrentDispatcher")||(qe.ReactCurrentDispatcher={current:null}),qe.hasOwnProperty("ReactCurrentBatchConfig")||(qe.ReactCurrentBatchConfig={suspense:null});var He=/^(.*)[\\\/]/,Ke="function"==typeof Symbol&&Symbol.for,Qe=Ke?Symbol.for("react.element"):60103,Ge=Ke?Symbol.for("react.portal"):60106,Ye=Ke?Symbol.for("react.fragment"):60107,Ze=Ke?Symbol.for("react.strict_mode"):60108,Xe=Ke?Symbol.for("react.profiler"):60114,Je=Ke?Symbol.for("react.provider"):60109,et=Ke?Symbol.for("react.context"):60110,tt=Ke?Symbol.for("react.concurrent_mode"):60111,nt=Ke?Symbol.for("react.forward_ref"):60112,rt=Ke?Symbol.for("react.suspense"):60113,ot=Ke?Symbol.for("react.suspense_list"):60120,at=Ke?Symbol.for("react.memo"):60115,it=Ke?Symbol.for("react.lazy"):60116;Ke&&Symbol.for("react.fundamental"),Ke&&Symbol.for("react.responder");var ut="function"==typeof Symbol&&Symbol.iterator;function lt(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=ut&&e[ut]||e["@@iterator"])?e:null}function ct(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case Ye:return"Fragment";case Ge:return"Portal";case Xe:return"Profiler";case Ze:return"StrictMode";case rt:return"Suspense";case ot:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case et:return"Context.Consumer";case Je:return"Context.Provider";case nt:var t=e.render;return t=t.displayName||t.name||"",e.displayName||(""!==t?"ForwardRef("+t+")":"ForwardRef");case at:return ct(e.type);case it:if(e=1===e._status?e._result:null)return ct(e)}return null}function st(e){var t="";do{e:switch(e.tag){case 3:case 4:case 6:case 7:case 10:case 9:var n="";break e;default:var r=e._debugOwner,o=e._debugSource,a=ct(e.type);n=null,r&&(n=ct(r.type)),r=a,a="",o?a=" (at "+o.fileName.replace(He,"")+":"+o.lineNumber+")":n&&(a=" (created by "+n+")"),n="\n    in "+(r||"Unknown")+a}t+=n,e=e.return}while(e);return t}var ft=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,pt=Object.prototype.hasOwnProperty,dt={},ht={};function mt(e,t,n,r,o,a){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=o,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=a}var vt={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(e){vt[e]=new mt(e,0,!1,e,null,!1)}),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach(function(e){var t=e[0];vt[t]=new mt(t,1,!1,e[1],null,!1)}),["contentEditable","draggable","spellCheck","value"].forEach(function(e){vt[e]=new mt(e,2,!1,e.toLowerCase(),null,!1)}),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach(function(e){vt[e]=new mt(e,2,!1,e,null,!1)}),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(e){vt[e]=new mt(e,3,!1,e.toLowerCase(),null,!1)}),["checked","multiple","muted","selected"].forEach(function(e){vt[e]=new mt(e,3,!0,e,null,!1)}),["capture","download"].forEach(function(e){vt[e]=new mt(e,4,!1,e,null,!1)}),["cols","rows","size","span"].forEach(function(e){vt[e]=new mt(e,6,!1,e,null,!1)}),["rowSpan","start"].forEach(function(e){vt[e]=new mt(e,5,!1,e.toLowerCase(),null,!1)});var yt=/[\-:]([a-z])/g;function gt(e){return e[1].toUpperCase()}function bt(e,t,n,r){var o=vt.hasOwnProperty(t)?vt[t]:null;(null!==o?0===o.type:!r&&(2<t.length&&("o"===t[0]||"O"===t[0])&&("n"===t[1]||"N"===t[1])))||(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,o,r)&&(n=null),r||null===o?function(e){return!!pt.call(ht,e)||!pt.call(dt,e)&&(ft.test(e)?ht[e]=!0:(dt[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):o.mustUseProperty?e[o.propertyName]=null===n?3!==o.type&&"":n:(t=o.attributeName,r=o.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(o=o.type)||4===o&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}function Et(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}function wt(e,t){var n=t.checked;return o({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function _t(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=Et(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function xt(e,t){null!=(t=t.checked)&&bt(e,"checked",t,!1)}function kt(e,t){xt(e,t);var n=Et(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?Nt(e,t.type,n):t.hasOwnProperty("defaultValue")&&Nt(e,t.type,Et(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function St(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!e.defaultChecked,e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function Nt(e,t,n){"number"===t&&e.ownerDocument.activeElement===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(e){var t=e.replace(yt,gt);vt[t]=new mt(t,1,!1,e,null,!1)}),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(e){var t=e.replace(yt,gt);vt[t]=new mt(t,1,!1,e,"http://www.w3.org/1999/xlink",!1)}),["xml:base","xml:lang","xml:space"].forEach(function(e){var t=e.replace(yt,gt);vt[t]=new mt(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1)}),["tabIndex","crossOrigin"].forEach(function(e){vt[e]=new mt(e,1,!1,e.toLowerCase(),null,!1)}),vt.xlinkHref=new mt("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0),["src","href","action","formAction"].forEach(function(e){vt[e]=new mt(e,1,!1,e.toLowerCase(),null,!0)});var Ot={change:{phasedRegistrationNames:{bubbled:"onChange",captured:"onChangeCapture"},dependencies:"blur change click focus input keydown keyup selectionchange".split(" ")}};function Tt(e,t,n){return(e=le.getPooled(Ot.change,e,t,n)).type="change",Pe(n),V(e),e}var Ct=null,Pt=null;function jt(e){C(e)}function Rt(e){if(Ve(z(e)))return e}function It(e,t){if("change"===e)return t}var At=!1;function Ut(){Ct&&(Ct.detachEvent("onpropertychange",Mt),Pt=Ct=null)}function Mt(e){if("value"===e.propertyName&&Rt(Pt))if(e=Tt(Pt,e,Fe(e)),Me)C(e);else{Me=!0;try{Re(jt,e)}finally{Me=!1,ze()}}}function zt(e,t,n){"focus"===e?(Ut(),Pt=n,(Ct=t).attachEvent("onpropertychange",Mt)):"blur"===e&&Ut()}function Dt(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Rt(Pt)}function Lt(e,t){if("click"===e)return Rt(t)}function Ft(e,t){if("input"===e||"change"===e)return Rt(t)}q&&(At=We("input")&&(!document.documentMode||9<document.documentMode));var Wt={eventTypes:Ot,_isInputEventSupported:At,extractEvents:function(e,t,n,r){var o=t?z(t):window,a=void 0,i=void 0,u=o.nodeName&&o.nodeName.toLowerCase();if("select"===u||"input"===u&&"file"===o.type?a=It:Le(o)?At?a=Ft:(a=Dt,i=zt):(u=o.nodeName)&&"input"===u.toLowerCase()&&("checkbox"===o.type||"radio"===o.type)&&(a=Lt),a&&(a=a(e,t)))return Tt(a,n,r);i&&i(e,o,t),"blur"===e&&(e=o._wrapperState)&&e.controlled&&"number"===o.type&&Nt(o,"number",o.value)}},Bt=le.extend({view:null,detail:null}),$t={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Vt(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=$t[e])&&!!t[e]}function qt(){return Vt}var Ht=0,Kt=0,Qt=!1,Gt=!1,Yt=Bt.extend({screenX:null,screenY:null,clientX:null,clientY:null,pageX:null,pageY:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,getModifierState:qt,button:null,buttons:null,relatedTarget:function(e){return e.relatedTarget||(e.fromElement===e.srcElement?e.toElement:e.fromElement)},movementX:function(e){if("movementX"in e)return e.movementX;var t=Ht;return Ht=e.screenX,Qt?"mousemove"===e.type?e.screenX-t:0:(Qt=!0,0)},movementY:function(e){if("movementY"in e)return e.movementY;var t=Kt;return Kt=e.screenY,Gt?"mousemove"===e.type?e.screenY-t:0:(Gt=!0,0)}}),Zt=Yt.extend({pointerId:null,width:null,height:null,pressure:null,tangentialPressure:null,tiltX:null,tiltY:null,twist:null,pointerType:null,isPrimary:null}),Xt={mouseEnter:{registrationName:"onMouseEnter",dependencies:["mouseout","mouseover"]},mouseLeave:{registrationName:"onMouseLeave",dependencies:["mouseout","mouseover"]},pointerEnter:{registrationName:"onPointerEnter",dependencies:["pointerout","pointerover"]},pointerLeave:{registrationName:"onPointerLeave",dependencies:["pointerout","pointerover"]}},Jt={eventTypes:Xt,extractEvents:function(e,t,n,r){var o="mouseover"===e||"pointerover"===e,a="mouseout"===e||"pointerout"===e;if(o&&(n.relatedTarget||n.fromElement)||!a&&!o)return null;if(o=r.window===r?r:(o=r.ownerDocument)?o.defaultView||o.parentWindow:window,a?(a=t,t=(t=n.relatedTarget||n.toElement)?U(t):null):a=null,a===t)return null;var i=void 0,u=void 0,l=void 0,c=void 0;"mouseout"===e||"mouseover"===e?(i=Yt,u=Xt.mouseLeave,l=Xt.mouseEnter,c="mouse"):"pointerout"!==e&&"pointerover"!==e||(i=Zt,u=Xt.pointerLeave,l=Xt.pointerEnter,c="pointer");var s=null==a?o:z(a);if(o=null==t?o:z(t),(e=i.getPooled(u,a,n,r)).type=c+"leave",e.target=s,e.relatedTarget=o,(n=i.getPooled(l,t,n,r)).type=c+"enter",n.target=o,n.relatedTarget=s,r=t,a&&r)e:{for(o=r,c=0,i=t=a;i;i=L(i))c++;for(i=0,l=o;l;l=L(l))i++;for(;0<c-i;)t=L(t),c--;for(;0<i-c;)o=L(o),i--;for(;c--;){if(t===o||t===o.alternate)break e;t=L(t),o=L(o)}t=null}else t=null;for(o=t,t=[];a&&a!==o&&(null===(c=a.alternate)||c!==o);)t.push(a),a=L(a);for(a=[];r&&r!==o&&(null===(c=r.alternate)||c!==o);)a.push(r),r=L(r);for(r=0;r<t.length;r++)B(t[r],"bubbled",e);for(r=a.length;0<r--;)B(a[r],"captured",n);return[e,n]}};function en(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t}var tn=Object.prototype.hasOwnProperty;function nn(e,t){if(en(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++)if(!tn.call(t,n[r])||!en(e[n[r]],t[n[r]]))return!1;return!0}function rn(e,t){return{responder:e,props:t}}function on(e){var t=e;if(e.alternate)for(;t.return;)t=t.return;else{if(0!=(2&t.effectTag))return 1;for(;t.return;)if(0!=(2&(t=t.return).effectTag))return 1}return 3===t.tag?2:3}function an(e){if(2!==on(e))throw i(Error(188))}function un(e){if(!(e=function(e){var t=e.alternate;if(!t){if(3===(t=on(e)))throw i(Error(188));return 1===t?null:e}for(var n=e,r=t;;){var o=n.return;if(null===o)break;var a=o.alternate;if(null===a){if(null!==(r=o.return)){n=r;continue}break}if(o.child===a.child){for(a=o.child;a;){if(a===n)return an(o),e;if(a===r)return an(o),t;a=a.sibling}throw i(Error(188))}if(n.return!==r.return)n=o,r=a;else{for(var u=!1,l=o.child;l;){if(l===n){u=!0,n=o,r=a;break}if(l===r){u=!0,r=o,n=a;break}l=l.sibling}if(!u){for(l=a.child;l;){if(l===n){u=!0,n=a,r=o;break}if(l===r){u=!0,r=a,n=o;break}l=l.sibling}if(!u)throw i(Error(189))}}if(n.alternate!==r)throw i(Error(190))}if(3!==n.tag)throw i(Error(188));return n.stateNode.current===n?e:t}(e)))return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}new Map,new Map,new Set,new Map;var ln=le.extend({animationName:null,elapsedTime:null,pseudoElement:null}),cn=le.extend({clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),sn=Bt.extend({relatedTarget:null});function fn(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}for(var pn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},dn={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},hn=Bt.extend({key:function(e){if(e.key){var t=pn[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=fn(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?dn[e.keyCode]||"Unidentified":""},location:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,repeat:null,locale:null,getModifierState:qt,charCode:function(e){return"keypress"===e.type?fn(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?fn(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),mn=Yt.extend({dataTransfer:null}),vn=Bt.extend({touches:null,targetTouches:null,changedTouches:null,altKey:null,metaKey:null,ctrlKey:null,shiftKey:null,getModifierState:qt}),yn=le.extend({propertyName:null,elapsedTime:null,pseudoElement:null}),gn=Yt.extend({deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:null,deltaMode:null}),bn=[["blur","blur",0],["cancel","cancel",0],["click","click",0],["close","close",0],["contextmenu","contextMenu",0],["copy","copy",0],["cut","cut",0],["auxclick","auxClick",0],["dblclick","doubleClick",0],["dragend","dragEnd",0],["dragstart","dragStart",0],["drop","drop",0],["focus","focus",0],["input","input",0],["invalid","invalid",0],["keydown","keyDown",0],["keypress","keyPress",0],["keyup","keyUp",0],["mousedown","mouseDown",0],["mouseup","mouseUp",0],["paste","paste",0],["pause","pause",0],["play","play",0],["pointercancel","pointerCancel",0],["pointerdown","pointerDown",0],["pointerup","pointerUp",0],["ratechange","rateChange",0],["reset","reset",0],["seeked","seeked",0],["submit","submit",0],["touchcancel","touchCancel",0],["touchend","touchEnd",0],["touchstart","touchStart",0],["volumechange","volumeChange",0],["drag","drag",1],["dragenter","dragEnter",1],["dragexit","dragExit",1],["dragleave","dragLeave",1],["dragover","dragOver",1],["mousemove","mouseMove",1],["mouseout","mouseOut",1],["mouseover","mouseOver",1],["pointermove","pointerMove",1],["pointerout","pointerOut",1],["pointerover","pointerOver",1],["scroll","scroll",1],["toggle","toggle",1],["touchmove","touchMove",1],["wheel","wheel",1],["abort","abort",2],[Z,"animationEnd",2],[X,"animationIteration",2],[J,"animationStart",2],["canplay","canPlay",2],["canplaythrough","canPlayThrough",2],["durationchange","durationChange",2],["emptied","emptied",2],["encrypted","encrypted",2],["ended","ended",2],["error","error",2],["gotpointercapture","gotPointerCapture",2],["load","load",2],["loadeddata","loadedData",2],["loadedmetadata","loadedMetadata",2],["loadstart","loadStart",2],["lostpointercapture","lostPointerCapture",2],["playing","playing",2],["progress","progress",2],["seeking","seeking",2],["stalled","stalled",2],["suspend","suspend",2],["timeupdate","timeUpdate",2],[ee,"transitionEnd",2],["waiting","waiting",2]],En={},wn={},_n=0;_n<bn.length;_n++){var xn=bn[_n],kn=xn[0],Sn=xn[1],Nn=xn[2],On="on"+(Sn[0].toUpperCase()+Sn.slice(1)),Tn={phasedRegistrationNames:{bubbled:On,captured:On+"Capture"},dependencies:[kn],eventPriority:Nn};En[Sn]=Tn,wn[kn]=Tn}var Cn={eventTypes:En,getEventPriority:function(e){return void 0!==(e=wn[e])?e.eventPriority:2},extractEvents:function(e,t,n,r){var o=wn[e];if(!o)return null;switch(e){case"keypress":if(0===fn(n))return null;case"keydown":case"keyup":e=hn;break;case"blur":case"focus":e=sn;break;case"click":if(2===n.button)return null;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":e=Yt;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":e=mn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":e=vn;break;case Z:case X:case J:e=ln;break;case ee:e=yn;break;case"scroll":e=Bt;break;case"wheel":e=gn;break;case"copy":case"cut":case"paste":e=cn;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":e=Zt;break;default:e=le}return V(t=e.getPooled(o,t,n,r)),t}},Pn=Cn.getEventPriority,jn=[];function Rn(e){var t=e.targetInst,n=t;do{if(!n){e.ancestors.push(n);break}var r;for(r=n;r.return;)r=r.return;if(!(r=3!==r.tag?null:r.stateNode.containerInfo))break;e.ancestors.push(n),n=U(r)}while(n);for(n=0;n<e.ancestors.length;n++){t=e.ancestors[n];var o=Fe(e.nativeEvent);r=e.topLevelType;for(var a=e.nativeEvent,i=null,u=0;u<f.length;u++){var l=f[u];l&&(l=l.extractEvents(r,t,a,o))&&(i=S(i,l))}C(i)}}var In=!0;function An(e,t){Un(t,e,!1)}function Un(e,t,n){switch(Pn(t)){case 0:var r=function(e,t,n){Me||Ae();var r=Mn,o=Me;Me=!0;try{Ie(r,e,t,n)}finally{(Me=o)||ze()}}.bind(null,t,1);break;case 1:r=function(e,t,n){Mn(e,t,n)}.bind(null,t,1);break;default:r=Mn.bind(null,t,1)}n?e.addEventListener(t,r,!0):e.addEventListener(t,r,!1)}function Mn(e,t,n){if(In){if(null===(t=U(t=Fe(n)))||"number"!=typeof t.tag||2===on(t)||(t=null),jn.length){var r=jn.pop();r.topLevelType=e,r.nativeEvent=n,r.targetInst=t,e=r}else e={topLevelType:e,nativeEvent:n,targetInst:t,ancestors:[]};try{if(n=e,Me)Rn(n);else{Me=!0;try{Ue(Rn,n,void 0)}finally{Me=!1,ze()}}}finally{e.topLevelType=null,e.nativeEvent=null,e.targetInst=null,e.ancestors.length=0,10>jn.length&&jn.push(e)}}}var zn=new("function"==typeof WeakMap?WeakMap:Map);function Dn(e){var t=zn.get(e);return void 0===t&&(t=new Set,zn.set(e,t)),t}function Ln(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function Fn(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function Wn(e,t){var n,r=Fn(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=Fn(r)}}function Bn(){for(var e=window,t=Ln();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=Ln((e=t.contentWindow).document)}return t}function $n(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}var Vn=q&&"documentMode"in document&&11>=document.documentMode,qn={select:{phasedRegistrationNames:{bubbled:"onSelect",captured:"onSelectCapture"},dependencies:"blur contextmenu dragend focus keydown keyup mousedown mouseup selectionchange".split(" ")}},Hn=null,Kn=null,Qn=null,Gn=!1;function Yn(e,t){var n=t.window===t?t.document:9===t.nodeType?t:t.ownerDocument;return Gn||null==Hn||Hn!==Ln(n)?null:("selectionStart"in(n=Hn)&&$n(n)?n={start:n.selectionStart,end:n.selectionEnd}:n={anchorNode:(n=(n.ownerDocument&&n.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:n.anchorOffset,focusNode:n.focusNode,focusOffset:n.focusOffset},Qn&&nn(Qn,n)?null:(Qn=n,(e=le.getPooled(qn.select,Kn,e,t)).type="select",e.target=Hn,V(e),e))}var Zn={eventTypes:qn,extractEvents:function(e,t,n,r){var o,a=r.window===r?r.document:9===r.nodeType?r:r.ownerDocument;if(!(o=!a)){e:{a=Dn(a),o=h.onSelect;for(var i=0;i<o.length;i++)if(!a.has(o[i])){a=!1;break e}a=!0}o=!a}if(o)return null;switch(a=t?z(t):window,e){case"focus":(Le(a)||"true"===a.contentEditable)&&(Hn=a,Kn=t,Qn=null);break;case"blur":Qn=Kn=Hn=null;break;case"mousedown":Gn=!0;break;case"contextmenu":case"mouseup":case"dragend":return Gn=!1,Yn(n,r);case"selectionchange":if(Vn)break;case"keydown":case"keyup":return Yn(n,r)}return null}};function Xn(e,t){return e=o({children:void 0},t),(t=function(e){var t="";return r.Children.forEach(e,function(e){null!=e&&(t+=e)}),t}(t.children))&&(e.children=t),e}function Jn(e,t,n,r){if(e=e.options,t){t={};for(var o=0;o<n.length;o++)t["$"+n[o]]=!0;for(n=0;n<e.length;n++)o=t.hasOwnProperty("$"+e[n].value),e[n].selected!==o&&(e[n].selected=o),o&&r&&(e[n].defaultSelected=!0)}else{for(n=""+Et(n),t=null,o=0;o<e.length;o++){if(e[o].value===n)return e[o].selected=!0,void(r&&(e[o].defaultSelected=!0));null!==t||e[o].disabled||(t=e[o])}null!==t&&(t.selected=!0)}}function er(e,t){if(null!=t.dangerouslySetInnerHTML)throw i(Error(91));return o({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function tr(e,t){var n=t.value;if(null==n){if(n=t.defaultValue,null!=(t=t.children)){if(null!=n)throw i(Error(92));if(Array.isArray(t)){if(!(1>=t.length))throw i(Error(93));t=t[0]}n=t}null==n&&(n="")}e._wrapperState={initialValue:Et(n)}}function nr(e,t){var n=Et(t.value),r=Et(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function rr(e){var t=e.textContent;t===e._wrapperState.initialValue&&(e.value=t)}P.injectEventPluginOrder("ResponderEventPlugin SimpleEventPlugin EnterLeaveEventPlugin ChangeEventPlugin SelectEventPlugin BeforeInputEventPlugin".split(" ")),w=D,_=M,x=z,P.injectEventPluginsByName({SimpleEventPlugin:Cn,EnterLeaveEventPlugin:Jt,ChangeEventPlugin:Wt,SelectEventPlugin:Zn,BeforeInputEventPlugin:Se});var or={html:"http://www.w3.org/1999/xhtml",mathml:"http://www.w3.org/1998/Math/MathML",svg:"http://www.w3.org/2000/svg"};function ar(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function ir(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?ar(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var ur=void 0,lr=function(e){return"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(t,n,r,o){MSApp.execUnsafeLocalFunction(function(){return e(t,n)})}:e}(function(e,t){if(e.namespaceURI!==or.svg||"innerHTML"in e)e.innerHTML=t;else{for((ur=ur||document.createElement("div")).innerHTML="<svg>"+t+"</svg>",t=ur.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}});function cr(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var sr={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},fr=["Webkit","ms","Moz","O"];function pr(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||sr.hasOwnProperty(e)&&sr[e]?(""+t).trim():t+"px"}function dr(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),o=pr(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,o):e[n]=o}}Object.keys(sr).forEach(function(e){fr.forEach(function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),sr[t]=sr[e]})});var hr=o({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function mr(e,t){if(t){if(hr[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw i(Error(137),e,"");if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw i(Error(60));if(!("object"==typeof t.dangerouslySetInnerHTML&&"__html"in t.dangerouslySetInnerHTML))throw i(Error(61))}if(null!=t.style&&"object"!=typeof t.style)throw i(Error(62),"")}}function vr(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}function yr(e,t){var n=Dn(e=9===e.nodeType||11===e.nodeType?e:e.ownerDocument);t=h[t];for(var r=0;r<t.length;r++){var o=t[r];if(!n.has(o)){switch(o){case"scroll":Un(e,"scroll",!0);break;case"focus":case"blur":Un(e,"focus",!0),Un(e,"blur",!0),n.add("blur"),n.add("focus");break;case"cancel":case"close":We(o)&&Un(e,o,!0);break;case"invalid":case"submit":case"reset":break;default:-1===te.indexOf(o)&&An(o,e)}n.add(o)}}}function gr(){}var br=null,Er=null;function wr(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}function _r(e,t){return"textarea"===e||"option"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var xr="function"==typeof setTimeout?setTimeout:void 0,kr="function"==typeof clearTimeout?clearTimeout:void 0;function Sr(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break}return e}new Set;var Nr=[],Or=-1;function Tr(e){0>Or||(e.current=Nr[Or],Nr[Or]=null,Or--)}function Cr(e,t){Nr[++Or]=e.current,e.current=t}var Pr={},jr={current:Pr},Rr={current:!1},Ir=Pr;function Ar(e,t){var n=e.type.contextTypes;if(!n)return Pr;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var o,a={};for(o in n)a[o]=t[o];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=a),a}function Ur(e){return null!=(e=e.childContextTypes)}function Mr(e){Tr(Rr),Tr(jr)}function zr(e){Tr(Rr),Tr(jr)}function Dr(e,t,n){if(jr.current!==Pr)throw i(Error(168));Cr(jr,t),Cr(Rr,n)}function Lr(e,t,n){var r=e.stateNode;if(e=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var a in r=r.getChildContext())if(!(a in e))throw i(Error(108),ct(t)||"Unknown",a);return o({},n,r)}function Fr(e){var t=e.stateNode;return t=t&&t.__reactInternalMemoizedMergedChildContext||Pr,Ir=jr.current,Cr(jr,t),Cr(Rr,Rr.current),!0}function Wr(e,t,n){var r=e.stateNode;if(!r)throw i(Error(169));n?(t=Lr(e,t,Ir),r.__reactInternalMemoizedMergedChildContext=t,Tr(Rr),Tr(jr),Cr(jr,t)):Tr(Rr),Cr(Rr,n)}var Br=a.unstable_runWithPriority,$r=a.unstable_scheduleCallback,Vr=a.unstable_cancelCallback,qr=a.unstable_shouldYield,Hr=a.unstable_requestPaint,Kr=a.unstable_now,Qr=a.unstable_getCurrentPriorityLevel,Gr=a.unstable_ImmediatePriority,Yr=a.unstable_UserBlockingPriority,Zr=a.unstable_NormalPriority,Xr=a.unstable_LowPriority,Jr=a.unstable_IdlePriority,eo={},to=void 0!==Hr?Hr:function(){},no=null,ro=null,oo=!1,ao=Kr(),io=1e4>ao?Kr:function(){return Kr()-ao};function uo(){switch(Qr()){case Gr:return 99;case Yr:return 98;case Zr:return 97;case Xr:return 96;case Jr:return 95;default:throw i(Error(332))}}function lo(e){switch(e){case 99:return Gr;case 98:return Yr;case 97:return Zr;case 96:return Xr;case 95:return Jr;default:throw i(Error(332))}}function co(e,t){return e=lo(e),Br(e,t)}function so(e,t,n){return e=lo(e),$r(e,t,n)}function fo(e){return null===no?(no=[e],ro=$r(Gr,ho)):no.push(e),eo}function po(){null!==ro&&Vr(ro),ho()}function ho(){if(!oo&&null!==no){oo=!0;var e=0;try{var t=no;co(99,function(){for(;e<t.length;e++){var n=t[e];do{n=n(!0)}while(null!==n)}}),no=null}catch(t){throw null!==no&&(no=no.slice(e+1)),$r(Gr,po),t}finally{oo=!1}}}function mo(e,t){return 1073741823===t?99:1===t?95:0>=(e=10*(1073741821-t)-10*(1073741821-e))?99:250>=e?98:5250>=e?97:95}function vo(e,t){if(e&&e.defaultProps)for(var n in t=o({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}var yo={current:null},go=null,bo=null,Eo=null;function wo(){Eo=bo=go=null}function _o(e,t){var n=e.type._context;Cr(yo,n._currentValue),n._currentValue=t}function xo(e){var t=yo.current;Tr(yo),e.type._context._currentValue=t}function ko(e,t){for(;null!==e;){var n=e.alternate;if(e.childExpirationTime<t)e.childExpirationTime=t,null!==n&&n.childExpirationTime<t&&(n.childExpirationTime=t);else{if(!(null!==n&&n.childExpirationTime<t))break;n.childExpirationTime=t}e=e.return}}function So(e,t){go=e,Eo=bo=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(e.expirationTime>=t&&(li=!0),e.firstContext=null)}function No(e,t){if(Eo!==e&&!1!==t&&0!==t)if("number"==typeof t&&1073741823!==t||(Eo=e,t=1073741823),t={context:e,observedBits:t,next:null},null===bo){if(null===go)throw i(Error(308));bo=t,go.dependencies={expirationTime:0,firstContext:t,responders:null}}else bo=bo.next=t;return e._currentValue}var Oo=!1;function To(e){return{baseState:e,firstUpdate:null,lastUpdate:null,firstCapturedUpdate:null,lastCapturedUpdate:null,firstEffect:null,lastEffect:null,firstCapturedEffect:null,lastCapturedEffect:null}}function Co(e){return{baseState:e.baseState,firstUpdate:e.firstUpdate,lastUpdate:e.lastUpdate,firstCapturedUpdate:null,lastCapturedUpdate:null,firstEffect:null,lastEffect:null,firstCapturedEffect:null,lastCapturedEffect:null}}function Po(e,t){return{expirationTime:e,suspenseConfig:t,tag:0,payload:null,callback:null,next:null,nextEffect:null}}function jo(e,t){null===e.lastUpdate?e.firstUpdate=e.lastUpdate=t:(e.lastUpdate.next=t,e.lastUpdate=t)}function Ro(e,t){var n=e.alternate;if(null===n){var r=e.updateQueue,o=null;null===r&&(r=e.updateQueue=To(e.memoizedState))}else r=e.updateQueue,o=n.updateQueue,null===r?null===o?(r=e.updateQueue=To(e.memoizedState),o=n.updateQueue=To(n.memoizedState)):r=e.updateQueue=Co(o):null===o&&(o=n.updateQueue=Co(r));null===o||r===o?jo(r,t):null===r.lastUpdate||null===o.lastUpdate?(jo(r,t),jo(o,t)):(jo(r,t),o.lastUpdate=t)}function Io(e,t){var n=e.updateQueue;null===(n=null===n?e.updateQueue=To(e.memoizedState):Ao(e,n)).lastCapturedUpdate?n.firstCapturedUpdate=n.lastCapturedUpdate=t:(n.lastCapturedUpdate.next=t,n.lastCapturedUpdate=t)}function Ao(e,t){var n=e.alternate;return null!==n&&t===n.updateQueue&&(t=e.updateQueue=Co(t)),t}function Uo(e,t,n,r,a,i){switch(n.tag){case 1:return"function"==typeof(e=n.payload)?e.call(i,r,a):e;case 3:e.effectTag=-2049&e.effectTag|64;case 0:if(null==(a="function"==typeof(e=n.payload)?e.call(i,r,a):e))break;return o({},r,a);case 2:Oo=!0}return r}function Mo(e,t,n,r,o){Oo=!1;for(var a=(t=Ao(e,t)).baseState,i=null,u=0,l=t.firstUpdate,c=a;null!==l;){var s=l.expirationTime;s<o?(null===i&&(i=l,a=c),u<s&&(u=s)):(Lu(s,l.suspenseConfig),c=Uo(e,0,l,c,n,r),null!==l.callback&&(e.effectTag|=32,l.nextEffect=null,null===t.lastEffect?t.firstEffect=t.lastEffect=l:(t.lastEffect.nextEffect=l,t.lastEffect=l))),l=l.next}for(s=null,l=t.firstCapturedUpdate;null!==l;){var f=l.expirationTime;f<o?(null===s&&(s=l,null===i&&(a=c)),u<f&&(u=f)):(c=Uo(e,0,l,c,n,r),null!==l.callback&&(e.effectTag|=32,l.nextEffect=null,null===t.lastCapturedEffect?t.firstCapturedEffect=t.lastCapturedEffect=l:(t.lastCapturedEffect.nextEffect=l,t.lastCapturedEffect=l))),l=l.next}null===i&&(t.lastUpdate=null),null===s?t.lastCapturedUpdate=null:e.effectTag|=32,null===i&&null===s&&(a=c),t.baseState=a,t.firstUpdate=i,t.firstCapturedUpdate=s,e.expirationTime=u,e.memoizedState=c}function zo(e,t,n){null!==t.firstCapturedUpdate&&(null!==t.lastUpdate&&(t.lastUpdate.next=t.firstCapturedUpdate,t.lastUpdate=t.lastCapturedUpdate),t.firstCapturedUpdate=t.lastCapturedUpdate=null),Do(t.firstEffect,n),t.firstEffect=t.lastEffect=null,Do(t.firstCapturedEffect,n),t.firstCapturedEffect=t.lastCapturedEffect=null}function Do(e,t){for(;null!==e;){var n=e.callback;if(null!==n){e.callback=null;var r=t;if("function"!=typeof n)throw i(Error(191),n);n.call(r)}e=e.nextEffect}}var Lo=qe.ReactCurrentBatchConfig,Fo=(new r.Component).refs;function Wo(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:o({},t,n),e.memoizedState=n,null!==(r=e.updateQueue)&&0===e.expirationTime&&(r.baseState=n)}var Bo={isMounted:function(e){return!!(e=e._reactInternalFiber)&&2===on(e)},enqueueSetState:function(e,t,n){e=e._reactInternalFiber;var r=Nu(),o=Lo.suspense;(o=Po(r=Ou(r,e,o),o)).payload=t,null!=n&&(o.callback=n),Ro(e,o),Cu(e,r)},enqueueReplaceState:function(e,t,n){e=e._reactInternalFiber;var r=Nu(),o=Lo.suspense;(o=Po(r=Ou(r,e,o),o)).tag=1,o.payload=t,null!=n&&(o.callback=n),Ro(e,o),Cu(e,r)},enqueueForceUpdate:function(e,t){e=e._reactInternalFiber;var n=Nu(),r=Lo.suspense;(r=Po(n=Ou(n,e,r),r)).tag=2,null!=t&&(r.callback=t),Ro(e,r),Cu(e,n)}};function $o(e,t,n,r,o,a,i){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,a,i):!t.prototype||!t.prototype.isPureReactComponent||(!nn(n,r)||!nn(o,a))}function Vo(e,t,n){var r=!1,o=Pr,a=t.contextType;return"object"==typeof a&&null!==a?a=No(a):(o=Ur(t)?Ir:jr.current,a=(r=null!=(r=t.contextTypes))?Ar(e,o):Pr),t=new t(n,a),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=Bo,e.stateNode=t,t._reactInternalFiber=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=o,e.__reactInternalMemoizedMaskedChildContext=a),t}function qo(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&Bo.enqueueReplaceState(t,t.state,null)}function Ho(e,t,n,r){var o=e.stateNode;o.props=n,o.state=e.memoizedState,o.refs=Fo;var a=t.contextType;"object"==typeof a&&null!==a?o.context=No(a):(a=Ur(t)?Ir:jr.current,o.context=Ar(e,a)),null!==(a=e.updateQueue)&&(Mo(e,a,n,o,r),o.state=e.memoizedState),"function"==typeof(a=t.getDerivedStateFromProps)&&(Wo(e,t,a,n),o.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof o.getSnapshotBeforeUpdate||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||(t=o.state,"function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount(),t!==o.state&&Bo.enqueueReplaceState(o,o.state,null),null!==(a=e.updateQueue)&&(Mo(e,a,n,o,r),o.state=e.memoizedState)),"function"==typeof o.componentDidMount&&(e.effectTag|=4)}var Ko=Array.isArray;function Qo(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){n=n._owner;var r=void 0;if(n){if(1!==n.tag)throw i(Error(309));r=n.stateNode}if(!r)throw i(Error(147),e);var o=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===o?t.ref:((t=function(e){var t=r.refs;t===Fo&&(t=r.refs={}),null===e?delete t[o]:t[o]=e})._stringRef=o,t)}if("string"!=typeof e)throw i(Error(284));if(!n._owner)throw i(Error(290),e)}return e}function Go(e,t){if("textarea"!==e.type)throw i(Error(31),"[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t,"")}function Yo(e){function t(t,n){if(e){var r=t.lastEffect;null!==r?(r.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n,n.nextEffect=null,n.effectTag=8}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function o(e,t,n){return(e=Ju(e,t)).index=0,e.sibling=null,e}function a(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.effectTag=2,n):r:(t.effectTag=2,n):n}function u(t){return e&&null===t.alternate&&(t.effectTag=2),t}function l(e,t,n,r){return null===t||6!==t.tag?((t=nl(n,e.mode,r)).return=e,t):((t=o(t,n)).return=e,t)}function c(e,t,n,r){return null!==t&&t.elementType===n.type?((r=o(t,n.props)).ref=Qo(e,t,n),r.return=e,r):((r=el(n.type,n.key,n.props,null,e.mode,r)).ref=Qo(e,t,n),r.return=e,r)}function s(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=rl(n,e.mode,r)).return=e,t):((t=o(t,n.children||[])).return=e,t)}function f(e,t,n,r,a){return null===t||7!==t.tag?((t=tl(n,e.mode,r,a)).return=e,t):((t=o(t,n)).return=e,t)}function p(e,t,n){if("string"==typeof t||"number"==typeof t)return(t=nl(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case Qe:return(n=el(t.type,t.key,t.props,null,e.mode,n)).ref=Qo(e,null,t),n.return=e,n;case Ge:return(t=rl(t,e.mode,n)).return=e,t}if(Ko(t)||lt(t))return(t=tl(t,e.mode,n,null)).return=e,t;Go(e,t)}return null}function d(e,t,n,r){var o=null!==t?t.key:null;if("string"==typeof n||"number"==typeof n)return null!==o?null:l(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case Qe:return n.key===o?n.type===Ye?f(e,t,n.props.children,r,o):c(e,t,n,r):null;case Ge:return n.key===o?s(e,t,n,r):null}if(Ko(n)||lt(n))return null!==o?null:f(e,t,n,r,null);Go(e,n)}return null}function h(e,t,n,r,o){if("string"==typeof r||"number"==typeof r)return l(t,e=e.get(n)||null,""+r,o);if("object"==typeof r&&null!==r){switch(r.$$typeof){case Qe:return e=e.get(null===r.key?n:r.key)||null,r.type===Ye?f(t,e,r.props.children,o,r.key):c(t,e,r,o);case Ge:return s(t,e=e.get(null===r.key?n:r.key)||null,r,o)}if(Ko(r)||lt(r))return f(t,e=e.get(n)||null,r,o,null);Go(t,r)}return null}function m(o,i,u,l){for(var c=null,s=null,f=i,m=i=0,v=null;null!==f&&m<u.length;m++){f.index>m?(v=f,f=null):v=f.sibling;var y=d(o,f,u[m],l);if(null===y){null===f&&(f=v);break}e&&f&&null===y.alternate&&t(o,f),i=a(y,i,m),null===s?c=y:s.sibling=y,s=y,f=v}if(m===u.length)return n(o,f),c;if(null===f){for(;m<u.length;m++)null!==(f=p(o,u[m],l))&&(i=a(f,i,m),null===s?c=f:s.sibling=f,s=f);return c}for(f=r(o,f);m<u.length;m++)null!==(v=h(f,o,m,u[m],l))&&(e&&null!==v.alternate&&f.delete(null===v.key?m:v.key),i=a(v,i,m),null===s?c=v:s.sibling=v,s=v);return e&&f.forEach(function(e){return t(o,e)}),c}function v(o,u,l,c){var s=lt(l);if("function"!=typeof s)throw i(Error(150));if(null==(l=s.call(l)))throw i(Error(151));for(var f=s=null,m=u,v=u=0,y=null,g=l.next();null!==m&&!g.done;v++,g=l.next()){m.index>v?(y=m,m=null):y=m.sibling;var b=d(o,m,g.value,c);if(null===b){null===m&&(m=y);break}e&&m&&null===b.alternate&&t(o,m),u=a(b,u,v),null===f?s=b:f.sibling=b,f=b,m=y}if(g.done)return n(o,m),s;if(null===m){for(;!g.done;v++,g=l.next())null!==(g=p(o,g.value,c))&&(u=a(g,u,v),null===f?s=g:f.sibling=g,f=g);return s}for(m=r(o,m);!g.done;v++,g=l.next())null!==(g=h(m,o,v,g.value,c))&&(e&&null!==g.alternate&&m.delete(null===g.key?v:g.key),u=a(g,u,v),null===f?s=g:f.sibling=g,f=g);return e&&m.forEach(function(e){return t(o,e)}),s}return function(e,r,a,l){var c="object"==typeof a&&null!==a&&a.type===Ye&&null===a.key;c&&(a=a.props.children);var s="object"==typeof a&&null!==a;if(s)switch(a.$$typeof){case Qe:e:{for(s=a.key,c=r;null!==c;){if(c.key===s){if(7===c.tag?a.type===Ye:c.elementType===a.type){n(e,c.sibling),(r=o(c,a.type===Ye?a.props.children:a.props)).ref=Qo(e,c,a),r.return=e,e=r;break e}n(e,c);break}t(e,c),c=c.sibling}a.type===Ye?((r=tl(a.props.children,e.mode,l,a.key)).return=e,e=r):((l=el(a.type,a.key,a.props,null,e.mode,l)).ref=Qo(e,r,a),l.return=e,e=l)}return u(e);case Ge:e:{for(c=a.key;null!==r;){if(r.key===c){if(4===r.tag&&r.stateNode.containerInfo===a.containerInfo&&r.stateNode.implementation===a.implementation){n(e,r.sibling),(r=o(r,a.children||[])).return=e,e=r;break e}n(e,r);break}t(e,r),r=r.sibling}(r=rl(a,e.mode,l)).return=e,e=r}return u(e)}if("string"==typeof a||"number"==typeof a)return a=""+a,null!==r&&6===r.tag?(n(e,r.sibling),(r=o(r,a)).return=e,e=r):(n(e,r),(r=nl(a,e.mode,l)).return=e,e=r),u(e);if(Ko(a))return m(e,r,a,l);if(lt(a))return v(e,r,a,l);if(s&&Go(e,a),void 0===a&&!c)switch(e.tag){case 1:case 0:throw e=e.type,i(Error(152),e.displayName||e.name||"Component")}return n(e,r)}}var Zo=Yo(!0),Xo=Yo(!1),Jo={},ea={current:Jo},ta={current:Jo},na={current:Jo};function ra(e){if(e===Jo)throw i(Error(174));return e}function oa(e,t){Cr(na,t),Cr(ta,e),Cr(ea,Jo);var n=t.nodeType;switch(n){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:ir(null,"");break;default:t=ir(t=(n=8===n?t.parentNode:t).namespaceURI||null,n=n.tagName)}Tr(ea),Cr(ea,t)}function aa(e){Tr(ea),Tr(ta),Tr(na)}function ia(e){ra(na.current);var t=ra(ea.current),n=ir(t,e.type);t!==n&&(Cr(ta,e),Cr(ea,n))}function ua(e){ta.current===e&&(Tr(ea),Tr(ta))}var la=1,ca=1,sa=2,fa={current:0};function pa(e){for(var t=e;null!==t;){if(13===t.tag){if(null!==t.memoizedState)return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!=(64&t.effectTag))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var da=0,ha=2,ma=4,va=8,ya=16,ga=32,ba=64,Ea=128,wa=qe.ReactCurrentDispatcher,_a=0,xa=null,ka=null,Sa=null,Na=null,Oa=null,Ta=null,Ca=0,Pa=null,ja=0,Ra=!1,Ia=null,Aa=0;function Ua(){throw i(Error(321))}function Ma(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!en(e[n],t[n]))return!1;return!0}function za(e,t,n,r,o,a){if(_a=a,xa=t,Sa=null!==e?e.memoizedState:null,wa.current=null===Sa?Ya:Za,t=n(r,o),Ra){do{Ra=!1,Aa+=1,Sa=null!==e?e.memoizedState:null,Ta=Na,Pa=Oa=ka=null,wa.current=Za,t=n(r,o)}while(Ra);Ia=null,Aa=0}if(wa.current=Ga,(e=xa).memoizedState=Na,e.expirationTime=Ca,e.updateQueue=Pa,e.effectTag|=ja,e=null!==ka&&null!==ka.next,_a=0,Ta=Oa=Na=Sa=ka=xa=null,Ca=0,Pa=null,ja=0,e)throw i(Error(300));return t}function Da(){wa.current=Ga,_a=0,Ta=Oa=Na=Sa=ka=xa=null,Ca=0,Pa=null,ja=0,Ra=!1,Ia=null,Aa=0}function La(){var e={memoizedState:null,baseState:null,queue:null,baseUpdate:null,next:null};return null===Oa?Na=Oa=e:Oa=Oa.next=e,Oa}function Fa(){if(null!==Ta)Ta=(Oa=Ta).next,Sa=null!==(ka=Sa)?ka.next:null;else{if(null===Sa)throw i(Error(310));var e={memoizedState:(ka=Sa).memoizedState,baseState:ka.baseState,queue:ka.queue,baseUpdate:ka.baseUpdate,next:null};Oa=null===Oa?Na=e:Oa.next=e,Sa=ka.next}return Oa}function Wa(e,t){return"function"==typeof t?t(e):t}function Ba(e){var t=Fa(),n=t.queue;if(null===n)throw i(Error(311));if(n.lastRenderedReducer=e,0<Aa){var r=n.dispatch;if(null!==Ia){var o=Ia.get(n);if(void 0!==o){Ia.delete(n);var a=t.memoizedState;do{a=e(a,o.action),o=o.next}while(null!==o);return en(a,t.memoizedState)||(li=!0),t.memoizedState=a,t.baseUpdate===n.last&&(t.baseState=a),n.lastRenderedState=a,[a,r]}}return[t.memoizedState,r]}r=n.last;var u=t.baseUpdate;if(a=t.baseState,null!==u?(null!==r&&(r.next=null),r=u.next):r=null!==r?r.next:null,null!==r){var l=o=null,c=r,s=!1;do{var f=c.expirationTime;f<_a?(s||(s=!0,l=u,o=a),f>Ca&&(Ca=f)):(Lu(f,c.suspenseConfig),a=c.eagerReducer===e?c.eagerState:e(a,c.action)),u=c,c=c.next}while(null!==c&&c!==r);s||(l=u,o=a),en(a,t.memoizedState)||(li=!0),t.memoizedState=a,t.baseUpdate=l,t.baseState=o,n.lastRenderedState=a}return[t.memoizedState,n.dispatch]}function $a(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===Pa?(Pa={lastEffect:null}).lastEffect=e.next=e:null===(t=Pa.lastEffect)?Pa.lastEffect=e.next=e:(n=t.next,t.next=e,e.next=n,Pa.lastEffect=e),e}function Va(e,t,n,r){var o=La();ja|=e,o.memoizedState=$a(t,n,void 0,void 0===r?null:r)}function qa(e,t,n,r){var o=Fa();r=void 0===r?null:r;var a=void 0;if(null!==ka){var i=ka.memoizedState;if(a=i.destroy,null!==r&&Ma(r,i.deps))return void $a(da,n,a,r)}ja|=e,o.memoizedState=$a(t,n,a,r)}function Ha(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function Ka(){}function Qa(e,t,n){if(!(25>Aa))throw i(Error(301));var r=e.alternate;if(e===xa||null!==r&&r===xa)if(Ra=!0,e={expirationTime:_a,suspenseConfig:null,action:n,eagerReducer:null,eagerState:null,next:null},null===Ia&&(Ia=new Map),void 0===(n=Ia.get(t)))Ia.set(t,e);else{for(t=n;null!==t.next;)t=t.next;t.next=e}else{var o=Nu(),a=Lo.suspense;a={expirationTime:o=Ou(o,e,a),suspenseConfig:a,action:n,eagerReducer:null,eagerState:null,next:null};var u=t.last;if(null===u)a.next=a;else{var l=u.next;null!==l&&(a.next=l),u.next=a}if(t.last=a,0===e.expirationTime&&(null===r||0===r.expirationTime)&&null!==(r=t.lastRenderedReducer))try{var c=t.lastRenderedState,s=r(c,n);if(a.eagerReducer=r,a.eagerState=s,en(s,c))return}catch(e){}Cu(e,o)}}var Ga={readContext:No,useCallback:Ua,useContext:Ua,useEffect:Ua,useImperativeHandle:Ua,useLayoutEffect:Ua,useMemo:Ua,useReducer:Ua,useRef:Ua,useState:Ua,useDebugValue:Ua,useResponder:Ua},Ya={readContext:No,useCallback:function(e,t){return La().memoizedState=[e,void 0===t?null:t],e},useContext:No,useEffect:function(e,t){return Va(516,Ea|ba,e,t)},useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,Va(4,ma|ga,Ha.bind(null,t,e),n)},useLayoutEffect:function(e,t){return Va(4,ma|ga,e,t)},useMemo:function(e,t){var n=La();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=La();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e=(e=r.queue={last:null,dispatch:null,lastRenderedReducer:e,lastRenderedState:t}).dispatch=Qa.bind(null,xa,e),[r.memoizedState,e]},useRef:function(e){return e={current:e},La().memoizedState=e},useState:function(e){var t=La();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e=(e=t.queue={last:null,dispatch:null,lastRenderedReducer:Wa,lastRenderedState:e}).dispatch=Qa.bind(null,xa,e),[t.memoizedState,e]},useDebugValue:Ka,useResponder:rn},Za={readContext:No,useCallback:function(e,t){var n=Fa();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&Ma(t,r[1])?r[0]:(n.memoizedState=[e,t],e)},useContext:No,useEffect:function(e,t){return qa(516,Ea|ba,e,t)},useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,qa(4,ma|ga,Ha.bind(null,t,e),n)},useLayoutEffect:function(e,t){return qa(4,ma|ga,e,t)},useMemo:function(e,t){var n=Fa();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&Ma(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)},useReducer:Ba,useRef:function(){return Fa().memoizedState},useState:function(e){return Ba(Wa)},useDebugValue:Ka,useResponder:rn},Xa=null,Ja=null,ei=!1;function ti(e,t){var n=Zu(5,null,null,0);n.elementType="DELETED",n.type="DELETED",n.stateNode=t,n.return=e,n.effectTag=8,null!==e.lastEffect?(e.lastEffect.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n}function ni(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,!0);case 13:default:return!1}}function ri(e){if(ei){var t=Ja;if(t){var n=t;if(!ni(e,t)){if(!(t=Sr(n.nextSibling))||!ni(e,t))return e.effectTag|=2,ei=!1,void(Xa=e);ti(Xa,n)}Xa=e,Ja=Sr(t.firstChild)}else e.effectTag|=2,ei=!1,Xa=e}}function oi(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&18!==e.tag;)e=e.return;Xa=e}function ai(e){if(e!==Xa)return!1;if(!ei)return oi(e),ei=!0,!1;var t=e.type;if(5!==e.tag||"head"!==t&&"body"!==t&&!_r(t,e.memoizedProps))for(t=Ja;t;)ti(e,t),t=Sr(t.nextSibling);return oi(e),Ja=Xa?Sr(e.stateNode.nextSibling):null,!0}function ii(){Ja=Xa=null,ei=!1}var ui=qe.ReactCurrentOwner,li=!1;function ci(e,t,n,r){t.child=null===e?Xo(t,null,n,r):Zo(t,e.child,n,r)}function si(e,t,n,r,o){n=n.render;var a=t.ref;return So(t,o),r=za(e,t,n,r,a,o),null===e||li?(t.effectTag|=1,ci(e,t,r,o),t.child):(t.updateQueue=e.updateQueue,t.effectTag&=-517,e.expirationTime<=o&&(e.expirationTime=0),_i(e,t,o))}function fi(e,t,n,r,o,a){if(null===e){var i=n.type;return"function"!=typeof i||Xu(i)||void 0!==i.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=el(n.type,null,r,null,t.mode,a)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=i,pi(e,t,i,r,o,a))}return i=e.child,o<a&&(o=i.memoizedProps,(n=null!==(n=n.compare)?n:nn)(o,r)&&e.ref===t.ref)?_i(e,t,a):(t.effectTag|=1,(e=Ju(i,r)).ref=t.ref,e.return=t,t.child=e)}function pi(e,t,n,r,o,a){return null!==e&&nn(e.memoizedProps,r)&&e.ref===t.ref&&(li=!1,o<a)?_i(e,t,a):hi(e,t,n,r,a)}function di(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.effectTag|=128)}function hi(e,t,n,r,o){var a=Ur(n)?Ir:jr.current;return a=Ar(t,a),So(t,o),n=za(e,t,n,r,a,o),null===e||li?(t.effectTag|=1,ci(e,t,n,o),t.child):(t.updateQueue=e.updateQueue,t.effectTag&=-517,e.expirationTime<=o&&(e.expirationTime=0),_i(e,t,o))}function mi(e,t,n,r,o){if(Ur(n)){var a=!0;Fr(t)}else a=!1;if(So(t,o),null===t.stateNode)null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),Vo(t,n,r),Ho(t,n,r,o),r=!0;else if(null===e){var i=t.stateNode,u=t.memoizedProps;i.props=u;var l=i.context,c=n.contextType;"object"==typeof c&&null!==c?c=No(c):c=Ar(t,c=Ur(n)?Ir:jr.current);var s=n.getDerivedStateFromProps,f="function"==typeof s||"function"==typeof i.getSnapshotBeforeUpdate;f||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(u!==r||l!==c)&&qo(t,i,r,c),Oo=!1;var p=t.memoizedState;l=i.state=p;var d=t.updateQueue;null!==d&&(Mo(t,d,r,i,o),l=t.memoizedState),u!==r||p!==l||Rr.current||Oo?("function"==typeof s&&(Wo(t,n,s,r),l=t.memoizedState),(u=Oo||$o(t,n,u,r,p,l,c))?(f||"function"!=typeof i.UNSAFE_componentWillMount&&"function"!=typeof i.componentWillMount||("function"==typeof i.componentWillMount&&i.componentWillMount(),"function"==typeof i.UNSAFE_componentWillMount&&i.UNSAFE_componentWillMount()),"function"==typeof i.componentDidMount&&(t.effectTag|=4)):("function"==typeof i.componentDidMount&&(t.effectTag|=4),t.memoizedProps=r,t.memoizedState=l),i.props=r,i.state=l,i.context=c,r=u):("function"==typeof i.componentDidMount&&(t.effectTag|=4),r=!1)}else i=t.stateNode,u=t.memoizedProps,i.props=t.type===t.elementType?u:vo(t.type,u),l=i.context,"object"==typeof(c=n.contextType)&&null!==c?c=No(c):c=Ar(t,c=Ur(n)?Ir:jr.current),(f="function"==typeof(s=n.getDerivedStateFromProps)||"function"==typeof i.getSnapshotBeforeUpdate)||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(u!==r||l!==c)&&qo(t,i,r,c),Oo=!1,l=t.memoizedState,p=i.state=l,null!==(d=t.updateQueue)&&(Mo(t,d,r,i,o),p=t.memoizedState),u!==r||l!==p||Rr.current||Oo?("function"==typeof s&&(Wo(t,n,s,r),p=t.memoizedState),(s=Oo||$o(t,n,u,r,l,p,c))?(f||"function"!=typeof i.UNSAFE_componentWillUpdate&&"function"!=typeof i.componentWillUpdate||("function"==typeof i.componentWillUpdate&&i.componentWillUpdate(r,p,c),"function"==typeof i.UNSAFE_componentWillUpdate&&i.UNSAFE_componentWillUpdate(r,p,c)),"function"==typeof i.componentDidUpdate&&(t.effectTag|=4),"function"==typeof i.getSnapshotBeforeUpdate&&(t.effectTag|=256)):("function"!=typeof i.componentDidUpdate||u===e.memoizedProps&&l===e.memoizedState||(t.effectTag|=4),"function"!=typeof i.getSnapshotBeforeUpdate||u===e.memoizedProps&&l===e.memoizedState||(t.effectTag|=256),t.memoizedProps=r,t.memoizedState=p),i.props=r,i.state=p,i.context=c,r=s):("function"!=typeof i.componentDidUpdate||u===e.memoizedProps&&l===e.memoizedState||(t.effectTag|=4),"function"!=typeof i.getSnapshotBeforeUpdate||u===e.memoizedProps&&l===e.memoizedState||(t.effectTag|=256),r=!1);return vi(e,t,n,r,a,o)}function vi(e,t,n,r,o,a){di(e,t);var i=0!=(64&t.effectTag);if(!r&&!i)return o&&Wr(t,n,!1),_i(e,t,a);r=t.stateNode,ui.current=t;var u=i&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.effectTag|=1,null!==e&&i?(t.child=Zo(t,e.child,null,a),t.child=Zo(t,null,u,a)):ci(e,t,u,a),t.memoizedState=r.state,o&&Wr(t,n,!0),t.child}function yi(e){var t=e.stateNode;t.pendingContext?Dr(0,t.pendingContext,t.pendingContext!==t.context):t.context&&Dr(0,t.context,!1),oa(e,t.containerInfo)}var gi={};function bi(e,t,n){var r,o=t.mode,a=t.pendingProps,i=fa.current,u=null,l=!1;if((r=0!=(64&t.effectTag))||(r=0!=(i&sa)&&(null===e||null!==e.memoizedState)),r?(u=gi,l=!0,t.effectTag&=-65):null!==e&&null===e.memoizedState||void 0===a.fallback||!0===a.unstable_avoidThisFallback||(i|=ca),Cr(fa,i&=la),null===e)if(l){if(a=a.fallback,(e=tl(null,o,0,null)).return=t,0==(2&t.mode))for(l=null!==t.memoizedState?t.child.child:t.child,e.child=l;null!==l;)l.return=e,l=l.sibling;(n=tl(a,o,n,null)).return=t,e.sibling=n,o=e}else o=n=Xo(t,null,a.children,n);else{if(null!==e.memoizedState)if(o=(i=e.child).sibling,l){if(a=a.fallback,(n=Ju(i,i.pendingProps)).return=t,0==(2&t.mode)&&(l=null!==t.memoizedState?t.child.child:t.child)!==i.child)for(n.child=l;null!==l;)l.return=n,l=l.sibling;(a=Ju(o,a,o.expirationTime)).return=t,n.sibling=a,o=n,n.childExpirationTime=0,n=a}else o=n=Zo(t,i.child,a.children,n);else if(i=e.child,l){if(l=a.fallback,(a=tl(null,o,0,null)).return=t,a.child=i,null!==i&&(i.return=a),0==(2&t.mode))for(i=null!==t.memoizedState?t.child.child:t.child,a.child=i;null!==i;)i.return=a,i=i.sibling;(n=tl(l,o,n,null)).return=t,a.sibling=n,n.effectTag|=2,o=a,a.childExpirationTime=0}else n=o=Zo(t,i,a.children,n);t.stateNode=e.stateNode}return t.memoizedState=u,t.child=o,n}function Ei(e,t,n,r,o){var a=e.memoizedState;null===a?e.memoizedState={isBackwards:t,rendering:null,last:r,tail:n,tailExpiration:0,tailMode:o}:(a.isBackwards=t,a.rendering=null,a.last=r,a.tail=n,a.tailExpiration=0,a.tailMode=o)}function wi(e,t,n){var r=t.pendingProps,o=r.revealOrder,a=r.tail;if(ci(e,t,r.children,n),0!=((r=fa.current)&sa))r=r&la|sa,t.effectTag|=64;else{if(null!==e&&0!=(64&e.effectTag))e:for(e=t.child;null!==e;){if(13===e.tag){if(null!==e.memoizedState){e.expirationTime<n&&(e.expirationTime=n);var i=e.alternate;null!==i&&i.expirationTime<n&&(i.expirationTime=n),ko(e.return,n)}}else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=la}if(Cr(fa,r),0==(2&t.mode))t.memoizedState=null;else switch(o){case"forwards":for(n=t.child,o=null;null!==n;)null!==(r=n.alternate)&&null===pa(r)&&(o=n),n=n.sibling;null===(n=o)?(o=t.child,t.child=null):(o=n.sibling,n.sibling=null),Ei(t,!1,o,n,a);break;case"backwards":for(n=null,o=t.child,t.child=null;null!==o;){if(null!==(r=o.alternate)&&null===pa(r)){t.child=o;break}r=o.sibling,o.sibling=n,n=o,o=r}Ei(t,!0,n,null,a);break;case"together":Ei(t,!1,null,null,void 0);break;default:t.memoizedState=null}return t.child}function _i(e,t,n){if(null!==e&&(t.dependencies=e.dependencies),t.childExpirationTime<n)return null;if(null!==e&&t.child!==e.child)throw i(Error(153));if(null!==t.child){for(n=Ju(e=t.child,e.pendingProps,e.expirationTime),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Ju(e,e.pendingProps,e.expirationTime)).return=t;n.sibling=null}return t.child}function xi(e){e.effectTag|=4}var ki=void 0,Si=void 0,Ni=void 0,Oi=void 0;function Ti(e,t){switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function Ci(e){switch(e.tag){case 1:Ur(e.type)&&Mr();var t=e.effectTag;return 2048&t?(e.effectTag=-2049&t|64,e):null;case 3:if(aa(),zr(),0!=(64&(t=e.effectTag)))throw i(Error(285));return e.effectTag=-2049&t|64,e;case 5:return ua(e),null;case 13:return Tr(fa),2048&(t=e.effectTag)?(e.effectTag=-2049&t|64,e):null;case 18:return null;case 19:return Tr(fa),null;case 4:return aa(),null;case 10:return xo(e),null;default:return null}}function Pi(e,t){return{value:e,source:t,stack:st(t)}}ki=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(20===n.tag)e.appendChild(n.stateNode.instance);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},Si=function(){},Ni=function(e,t,n,r,a){var i=e.memoizedProps;if(i!==r){var u=t.stateNode;switch(ra(ea.current),e=null,n){case"input":i=wt(u,i),r=wt(u,r),e=[];break;case"option":i=Xn(u,i),r=Xn(u,r),e=[];break;case"select":i=o({},i,{value:void 0}),r=o({},r,{value:void 0}),e=[];break;case"textarea":i=er(u,i),r=er(u,r),e=[];break;default:"function"!=typeof i.onClick&&"function"==typeof r.onClick&&(u.onclick=gr)}mr(n,r),u=n=void 0;var l=null;for(n in i)if(!r.hasOwnProperty(n)&&i.hasOwnProperty(n)&&null!=i[n])if("style"===n){var c=i[n];for(u in c)c.hasOwnProperty(u)&&(l||(l={}),l[u]="")}else"dangerouslySetInnerHTML"!==n&&"children"!==n&&"suppressContentEditableWarning"!==n&&"suppressHydrationWarning"!==n&&"autoFocus"!==n&&(d.hasOwnProperty(n)?e||(e=[]):(e=e||[]).push(n,null));for(n in r){var s=r[n];if(c=null!=i?i[n]:void 0,r.hasOwnProperty(n)&&s!==c&&(null!=s||null!=c))if("style"===n)if(c){for(u in c)!c.hasOwnProperty(u)||s&&s.hasOwnProperty(u)||(l||(l={}),l[u]="");for(u in s)s.hasOwnProperty(u)&&c[u]!==s[u]&&(l||(l={}),l[u]=s[u])}else l||(e||(e=[]),e.push(n,l)),l=s;else"dangerouslySetInnerHTML"===n?(s=s?s.__html:void 0,c=c?c.__html:void 0,null!=s&&c!==s&&(e=e||[]).push(n,""+s)):"children"===n?c===s||"string"!=typeof s&&"number"!=typeof s||(e=e||[]).push(n,""+s):"suppressContentEditableWarning"!==n&&"suppressHydrationWarning"!==n&&(d.hasOwnProperty(n)?(null!=s&&yr(a,n),e||c===s||(e=[])):(e=e||[]).push(n,s))}l&&(e=e||[]).push("style",l),a=e,(t.updateQueue=a)&&xi(t)}},Oi=function(e,t,n,r){n!==r&&xi(t)};var ji="function"==typeof WeakSet?WeakSet:Set;function Ri(e,t){var n=t.source,r=t.stack;null===r&&null!==n&&(r=st(n)),null!==n&&ct(n.type),t=t.value,null!==e&&1===e.tag&&ct(e.type);try{console.error(t)}catch(e){setTimeout(function(){throw e})}}function Ii(e){var t=e.ref;if(null!==t)if("function"==typeof t)try{t(null)}catch(t){qu(e,t)}else t.current=null}function Ai(e,t,n){if(null!==(n=null!==(n=n.updateQueue)?n.lastEffect:null)){var r=n=n.next;do{if((r.tag&e)!==da){var o=r.destroy;r.destroy=void 0,void 0!==o&&o()}(r.tag&t)!==da&&(o=r.create,r.destroy=o()),r=r.next}while(r!==n)}}function Ui(e,t){switch("function"==typeof Gu&&Gu(e),e.tag){case 0:case 11:case 14:case 15:var n=e.updateQueue;if(null!==n&&null!==(n=n.lastEffect)){var r=n.next;co(97<t?97:t,function(){var t=r;do{var n=t.destroy;if(void 0!==n){var o=e;try{n()}catch(e){qu(o,e)}}t=t.next}while(t!==r)})}break;case 1:Ii(e),"function"==typeof(t=e.stateNode).componentWillUnmount&&function(e,t){try{t.props=e.memoizedProps,t.state=e.memoizedState,t.componentWillUnmount()}catch(t){qu(e,t)}}(e,t);break;case 5:Ii(e);break;case 4:Li(e,t)}}function Mi(e,t){for(var n=e;;)if(Ui(n,t),null!==n.child&&4!==n.tag)n.child.return=n,n=n.child;else{if(n===e)break;for(;null===n.sibling;){if(null===n.return||n.return===e)return;n=n.return}n.sibling.return=n.return,n=n.sibling}}function zi(e){return 5===e.tag||3===e.tag||4===e.tag}function Di(e){e:{for(var t=e.return;null!==t;){if(zi(t)){var n=t;break e}t=t.return}throw i(Error(160))}switch(t=n.stateNode,n.tag){case 5:var r=!1;break;case 3:case 4:t=t.containerInfo,r=!0;break;default:throw i(Error(161))}16&n.effectTag&&(cr(t,""),n.effectTag&=-17);e:t:for(n=e;;){for(;null===n.sibling;){if(null===n.return||zi(n.return)){n=null;break e}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag&&18!==n.tag;){if(2&n.effectTag)continue t;if(null===n.child||4===n.tag)continue t;n.child.return=n,n=n.child}if(!(2&n.effectTag)){n=n.stateNode;break e}}for(var o=e;;){var a=5===o.tag||6===o.tag;if(a||20===o.tag){var u=a?o.stateNode:o.stateNode.instance;if(n)if(r){var l=u;u=n,8===(a=t).nodeType?a.parentNode.insertBefore(l,u):a.insertBefore(l,u)}else t.insertBefore(u,n);else r?(8===(l=t).nodeType?(a=l.parentNode).insertBefore(u,l):(a=l).appendChild(u),null!=(l=l._reactRootContainer)||null!==a.onclick||(a.onclick=gr)):t.appendChild(u)}else if(4!==o.tag&&null!==o.child){o.child.return=o,o=o.child;continue}if(o===e)break;for(;null===o.sibling;){if(null===o.return||o.return===e)return;o=o.return}o.sibling.return=o.return,o=o.sibling}}function Li(e,t){for(var n=e,r=!1,o=void 0,a=void 0;;){if(!r){r=n.return;e:for(;;){if(null===r)throw i(Error(160));switch(o=r.stateNode,r.tag){case 5:a=!1;break e;case 3:case 4:o=o.containerInfo,a=!0;break e}r=r.return}r=!0}if(5===n.tag||6===n.tag)if(Mi(n,t),a){var u=o,l=n.stateNode;8===u.nodeType?u.parentNode.removeChild(l):u.removeChild(l)}else o.removeChild(n.stateNode);else if(20===n.tag)l=n.stateNode.instance,Mi(n,t),a?8===(u=o).nodeType?u.parentNode.removeChild(l):u.removeChild(l):o.removeChild(l);else if(4===n.tag){if(null!==n.child){o=n.stateNode.containerInfo,a=!0,n.child.return=n,n=n.child;continue}}else if(Ui(n,t),null!==n.child){n.child.return=n,n=n.child;continue}if(n===e)break;for(;null===n.sibling;){if(null===n.return||n.return===e)return;4===(n=n.return).tag&&(r=!1)}n.sibling.return=n.return,n=n.sibling}}function Fi(e,t){switch(t.tag){case 0:case 11:case 14:case 15:Ai(ma,va,t);break;case 1:break;case 5:var n=t.stateNode;if(null!=n){var r=t.memoizedProps,o=null!==e?e.memoizedProps:r;e=t.type;var a=t.updateQueue;if(t.updateQueue=null,null!==a){for(n[A]=r,"input"===e&&"radio"===r.type&&null!=r.name&&xt(n,r),vr(e,o),t=vr(e,r),o=0;o<a.length;o+=2){var u=a[o],l=a[o+1];"style"===u?dr(n,l):"dangerouslySetInnerHTML"===u?lr(n,l):"children"===u?cr(n,l):bt(n,u,l,t)}switch(e){case"input":kt(n,r);break;case"textarea":nr(n,r);break;case"select":t=n._wrapperState.wasMultiple,n._wrapperState.wasMultiple=!!r.multiple,null!=(e=r.value)?Jn(n,!!r.multiple,e,!1):t!==!!r.multiple&&(null!=r.defaultValue?Jn(n,!!r.multiple,r.defaultValue,!0):Jn(n,!!r.multiple,r.multiple?[]:"",!1))}}}break;case 6:if(null===t.stateNode)throw i(Error(162));t.stateNode.nodeValue=t.memoizedProps;break;case 3:case 12:break;case 13:if(n=t,null===t.memoizedState?r=!1:(r=!0,n=t.child,pu=io()),null!==n)e:for(e=n;;){if(5===e.tag)a=e.stateNode,r?"function"==typeof(a=a.style).setProperty?a.setProperty("display","none","important"):a.display="none":(a=e.stateNode,o=null!=(o=e.memoizedProps.style)&&o.hasOwnProperty("display")?o.display:null,a.style.display=pr("display",o));else if(6===e.tag)e.stateNode.nodeValue=r?"":e.memoizedProps;else{if(13===e.tag&&null!==e.memoizedState){(a=e.child.sibling).return=e,e=a;continue}if(null!==e.child){e.child.return=e,e=e.child;continue}}if(e===n)break e;for(;null===e.sibling;){if(null===e.return||e.return===n)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}Wi(t);break;case 19:Wi(t);break;case 17:case 20:break;default:throw i(Error(163))}}function Wi(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new ji),t.forEach(function(t){var r=function(e,t){var n=e.stateNode;null!==n&&n.delete(t),n=Nu(),t=Ou(n,e,null),n=mo(n,t),null!==(e=Pu(e,t))&&ju(e,n,t)}.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))})}}var Bi="function"==typeof WeakMap?WeakMap:Map;function $i(e,t,n){(n=Po(n,null)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){mu||(mu=!0,vu=r),Ri(e,t)},n}function Vi(e,t,n){(n=Po(n,null)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var o=t.value;n.payload=function(){return Ri(e,t),r(o)}}var a=e.stateNode;return null!==a&&"function"==typeof a.componentDidCatch&&(n.callback=function(){"function"!=typeof r&&(null===yu?yu=new Set([this]):yu.add(this),Ri(e,t));var n=t.stack;this.componentDidCatch(t.value,{componentStack:null!==n?n:""})}),n}var qi=Math.ceil,Hi=qe.ReactCurrentDispatcher,Ki=qe.ReactCurrentOwner,Qi=0,Gi=8,Yi=16,Zi=32,Xi=0,Ji=1,eu=2,tu=3,nu=4,ru=Qi,ou=null,au=null,iu=0,uu=Xi,lu=1073741823,cu=1073741823,su=null,fu=!1,pu=0,du=500,hu=null,mu=!1,vu=null,yu=null,gu=!1,bu=null,Eu=90,wu=0,_u=null,xu=0,ku=null,Su=0;function Nu(){return(ru&(Yi|Zi))!==Qi?1073741821-(io()/10|0):0!==Su?Su:Su=1073741821-(io()/10|0)}function Ou(e,t,n){if(0==(2&(t=t.mode)))return 1073741823;var r=uo();if(0==(4&t))return 99===r?1073741823:1073741822;if((ru&Yi)!==Qi)return iu;if(null!==n)e=1073741821-25*(1+((1073741821-e+(0|n.timeoutMs||5e3)/10)/25|0));else switch(r){case 99:e=1073741823;break;case 98:e=1073741821-10*(1+((1073741821-e+15)/10|0));break;case 97:case 96:e=1073741821-25*(1+((1073741821-e+500)/25|0));break;case 95:e=1;break;default:throw i(Error(326))}return null!==ou&&e===iu&&--e,e}var Tu=0;function Cu(e,t){if(50<xu)throw xu=0,ku=null,i(Error(185));if(null!==(e=Pu(e,t))){e.pingTime=0;var n=uo();if(1073741823===t)if((ru&Gi)!==Qi&&(ru&(Yi|Zi))===Qi)for(var r=Du(e,1073741823,!0);null!==r;)r=r(!0);else ju(e,99,1073741823),ru===Qi&&po();else ju(e,n,t);(4&ru)===Qi||98!==n&&99!==n||(null===_u?_u=new Map([[e,t]]):(void 0===(n=_u.get(e))||n>t)&&_u.set(e,t))}}function Pu(e,t){e.expirationTime<t&&(e.expirationTime=t);var n=e.alternate;null!==n&&n.expirationTime<t&&(n.expirationTime=t);var r=e.return,o=null;if(null===r&&3===e.tag)o=e.stateNode;else for(;null!==r;){if(n=r.alternate,r.childExpirationTime<t&&(r.childExpirationTime=t),null!==n&&n.childExpirationTime<t&&(n.childExpirationTime=t),null===r.return&&3===r.tag){o=r.stateNode;break}r=r.return}return null!==o&&(t>o.firstPendingTime&&(o.firstPendingTime=t),0===(e=o.lastPendingTime)||t<e)&&(o.lastPendingTime=t),o}function ju(e,t,n){if(e.callbackExpirationTime<n){var r=e.callbackNode;null!==r&&r!==eo&&Vr(r),e.callbackExpirationTime=n,1073741823===n?e.callbackNode=fo(Ru.bind(null,e,Du.bind(null,e,n))):(r=null,1!==n&&(r={timeout:10*(1073741821-n)-io()}),e.callbackNode=so(t,Ru.bind(null,e,Du.bind(null,e,n)),r))}}function Ru(e,t,n){var r=e.callbackNode,o=null;try{return null!==(o=t(n))?Ru.bind(null,e,o):null}finally{null===o&&r===e.callbackNode&&(e.callbackNode=null,e.callbackExpirationTime=0)}}function Iu(){(ru&(1|Yi|Zi))===Qi&&(function(){if(null!==_u){var e=_u;_u=null,e.forEach(function(e,t){fo(Du.bind(null,t,e))}),po()}}(),$u())}function Au(e,t){var n=ru;ru|=1;try{return e(t)}finally{(ru=n)===Qi&&po()}}function Uu(e,t,n,r){var o=ru;ru|=4;try{return co(98,e.bind(null,t,n,r))}finally{(ru=o)===Qi&&po()}}function Mu(e,t){var n=ru;ru&=-2,ru|=Gi;try{return e(t)}finally{(ru=n)===Qi&&po()}}function zu(e,t){e.finishedWork=null,e.finishedExpirationTime=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,kr(n)),null!==au)for(n=au.return;null!==n;){var r=n;switch(r.tag){case 1:var o=r.type.childContextTypes;null!=o&&Mr();break;case 3:aa(),zr();break;case 5:ua(r);break;case 4:aa();break;case 13:case 19:Tr(fa);break;case 10:xo(r)}n=n.return}ou=e,au=Ju(e.current,null),iu=t,uu=Xi,cu=lu=1073741823,su=null,fu=!1}function Du(e,t,n){if((ru&(Yi|Zi))!==Qi)throw i(Error(327));if(e.firstPendingTime<t)return null;if(n&&e.finishedExpirationTime===t)return Bu.bind(null,e);if($u(),e!==ou||t!==iu)zu(e,t);else if(uu===tu)if(fu)zu(e,t);else{var r=e.lastPendingTime;if(r<t)return Du.bind(null,e,r)}if(null!==au){r=ru,ru|=Yi;var o=Hi.current;if(null===o&&(o=Ga),Hi.current=Ga,n){if(1073741823!==t){var a=Nu();if(a<t)return ru=r,wo(),Hi.current=o,Du.bind(null,e,a)}}else Su=0;for(;;)try{if(n)for(;null!==au;)au=Fu(au);else for(;null!==au&&!qr();)au=Fu(au);break}catch(n){if(wo(),Da(),null===(a=au)||null===a.return)throw zu(e,t),ru=r,n;e:{var u=e,l=a.return,c=a,s=n,f=iu;if(c.effectTag|=1024,c.firstEffect=c.lastEffect=null,null!==s&&"object"==typeof s&&"function"==typeof s.then){var p=s,d=0!=(fa.current&ca);s=l;do{var h;if((h=13===s.tag)&&(null!==s.memoizedState?h=!1:h=void 0!==(h=s.memoizedProps).fallback&&(!0!==h.unstable_avoidThisFallback||!d)),h){if(null===(l=s.updateQueue)?((l=new Set).add(p),s.updateQueue=l):l.add(p),0==(2&s.mode)){s.effectTag|=64,c.effectTag&=-1957,1===c.tag&&(null===c.alternate?c.tag=17:((f=Po(1073741823,null)).tag=2,Ro(c,f))),c.expirationTime=1073741823;break e}c=u,u=f,null===(d=c.pingCache)?(d=c.pingCache=new Bi,l=new Set,d.set(p,l)):void 0===(l=d.get(p))&&(l=new Set,d.set(p,l)),l.has(u)||(l.add(u),c=Hu.bind(null,c,p,u),p.then(c,c)),s.effectTag|=2048,s.expirationTime=f;break e}s=s.return}while(null!==s);s=Error((ct(c.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display."+st(c))}uu!==nu&&(uu=Ji),s=Pi(s,c),c=l;do{switch(c.tag){case 3:c.effectTag|=2048,c.expirationTime=f,Io(c,f=$i(c,s,f));break e;case 1:if(p=s,u=c.type,l=c.stateNode,0==(64&c.effectTag)&&("function"==typeof u.getDerivedStateFromError||null!==l&&"function"==typeof l.componentDidCatch&&(null===yu||!yu.has(l)))){c.effectTag|=2048,c.expirationTime=f,Io(c,f=Vi(c,p,f));break e}}c=c.return}while(null!==c)}au=Wu(a)}if(ru=r,wo(),Hi.current=o,null!==au)return Du.bind(null,e,t)}if(e.finishedWork=e.current.alternate,e.finishedExpirationTime=t,function(e,t){var n=e.firstBatch;return!!(null!==n&&n._defer&&n._expirationTime>=t)&&(so(97,function(){return n._onComplete(),null}),!0)}(e,t))return null;switch(ou=null,uu){case Xi:throw i(Error(328));case Ji:return(r=e.lastPendingTime)<t?Du.bind(null,e,r):n?Bu.bind(null,e):(zu(e,t),fo(Du.bind(null,e,t)),null);case eu:return 1073741823===lu&&!n&&10<(n=pu+du-io())?fu?(zu(e,t),Du.bind(null,e,t)):(r=e.lastPendingTime)<t?Du.bind(null,e,r):(e.timeoutHandle=xr(Bu.bind(null,e),n),null):Bu.bind(null,e);case tu:if(!n){if(fu)return zu(e,t),Du.bind(null,e,t);if((n=e.lastPendingTime)<t)return Du.bind(null,e,n);if(1073741823!==cu?n=10*(1073741821-cu)-io():1073741823===lu?n=0:(n=10*(1073741821-lu)-5e3,0>(n=(r=io())-n)&&(n=0),(t=10*(1073741821-t)-r)<(n=(120>n?120:480>n?480:1080>n?1080:1920>n?1920:3e3>n?3e3:4320>n?4320:1960*qi(n/1960))-n)&&(n=t)),10<n)return e.timeoutHandle=xr(Bu.bind(null,e),n),null}return Bu.bind(null,e);case nu:return!n&&1073741823!==lu&&null!==su&&(r=lu,0>=(t=0|(o=su).busyMinDurationMs)?t=0:(n=0|o.busyDelayMs,t=(r=io()-(10*(1073741821-r)-(0|o.timeoutMs||5e3)))<=n?0:n+t-r),10<t)?(e.timeoutHandle=xr(Bu.bind(null,e),t),null):Bu.bind(null,e);default:throw i(Error(329))}}function Lu(e,t){e<lu&&1<e&&(lu=e),null!==t&&e<cu&&1<e&&(cu=e,su=t)}function Fu(e){var t=Ku(e.alternate,e,iu);return e.memoizedProps=e.pendingProps,null===t&&(t=Wu(e)),Ki.current=null,t}function Wu(e){au=e;do{var t=au.alternate;if(e=au.return,0==(1024&au.effectTag)){e:{var n=t,r=iu,a=(t=au).pendingProps;switch(t.tag){case 2:case 16:break;case 15:case 0:break;case 1:Ur(t.type)&&Mr();break;case 3:aa(),zr(),(r=t.stateNode).pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==n&&null!==n.child||(ai(t),t.effectTag&=-3),Si(t);break;case 5:ua(t),r=ra(na.current);var u=t.type;if(null!==n&&null!=t.stateNode)Ni(n,t,u,a,r),n.ref!==t.ref&&(t.effectTag|=128);else if(a){var l=ra(ea.current);if(ai(t)){a=void 0,u=(n=t).stateNode;var c=n.type,s=n.memoizedProps;switch(u[I]=n,u[A]=s,c){case"iframe":case"object":case"embed":An("load",u);break;case"video":case"audio":for(var f=0;f<te.length;f++)An(te[f],u);break;case"source":An("error",u);break;case"img":case"image":case"link":An("error",u),An("load",u);break;case"form":An("reset",u),An("submit",u);break;case"details":An("toggle",u);break;case"input":_t(u,s),An("invalid",u),yr(r,"onChange");break;case"select":u._wrapperState={wasMultiple:!!s.multiple},An("invalid",u),yr(r,"onChange");break;case"textarea":tr(u,s),An("invalid",u),yr(r,"onChange")}for(a in mr(c,s),f=null,s)s.hasOwnProperty(a)&&(l=s[a],"children"===a?"string"==typeof l?u.textContent!==l&&(f=["children",l]):"number"==typeof l&&u.textContent!==""+l&&(f=["children",""+l]):d.hasOwnProperty(a)&&null!=l&&yr(r,a));switch(c){case"input":$e(u),St(u,s,!0);break;case"textarea":$e(u),rr(u);break;case"select":case"option":break;default:"function"==typeof s.onClick&&(u.onclick=gr)}r=f,n.updateQueue=r,null!==r&&xi(t)}else{s=u,n=a,c=t,f=9===r.nodeType?r:r.ownerDocument,l===or.html&&(l=ar(s)),l===or.html?"script"===s?((s=f.createElement("div")).innerHTML="<script><\/script>",f=s.removeChild(s.firstChild)):"string"==typeof n.is?f=f.createElement(s,{is:n.is}):(f=f.createElement(s),"select"===s&&(s=f,n.multiple?s.multiple=!0:n.size&&(s.size=n.size))):f=f.createElementNS(l,s),(s=f)[I]=c,s[A]=n,ki(n=s,t,!1,!1),c=n;var p=r,h=vr(u,a);switch(u){case"iframe":case"object":case"embed":An("load",c),r=a;break;case"video":case"audio":for(r=0;r<te.length;r++)An(te[r],c);r=a;break;case"source":An("error",c),r=a;break;case"img":case"image":case"link":An("error",c),An("load",c),r=a;break;case"form":An("reset",c),An("submit",c),r=a;break;case"details":An("toggle",c),r=a;break;case"input":_t(c,a),r=wt(c,a),An("invalid",c),yr(p,"onChange");break;case"option":r=Xn(c,a);break;case"select":c._wrapperState={wasMultiple:!!a.multiple},r=o({},a,{value:void 0}),An("invalid",c),yr(p,"onChange");break;case"textarea":tr(c,a),r=er(c,a),An("invalid",c),yr(p,"onChange");break;default:r=a}mr(u,r),s=void 0,f=u,l=c;var m=r;for(s in m)if(m.hasOwnProperty(s)){var v=m[s];"style"===s?dr(l,v):"dangerouslySetInnerHTML"===s?null!=(v=v?v.__html:void 0)&&lr(l,v):"children"===s?"string"==typeof v?("textarea"!==f||""!==v)&&cr(l,v):"number"==typeof v&&cr(l,""+v):"suppressContentEditableWarning"!==s&&"suppressHydrationWarning"!==s&&"autoFocus"!==s&&(d.hasOwnProperty(s)?null!=v&&yr(p,s):null!=v&&bt(l,s,v,h))}switch(u){case"input":$e(c),St(c,a,!1);break;case"textarea":$e(c),rr(c);break;case"option":null!=a.value&&c.setAttribute("value",""+Et(a.value));break;case"select":r=c,c=a,r.multiple=!!c.multiple,null!=(s=c.value)?Jn(r,!!c.multiple,s,!1):null!=c.defaultValue&&Jn(r,!!c.multiple,c.defaultValue,!0);break;default:"function"==typeof r.onClick&&(c.onclick=gr)}wr(u,a)&&xi(t),t.stateNode=n}null!==t.ref&&(t.effectTag|=128)}else if(null===t.stateNode)throw i(Error(166));break;case 6:if(n&&null!=t.stateNode)Oi(n,t,n.memoizedProps,a);else{if("string"!=typeof a&&null===t.stateNode)throw i(Error(166));n=ra(na.current),ra(ea.current),ai(t)?(r=t.stateNode,n=t.memoizedProps,r[I]=t,r.nodeValue!==n&&xi(t)):(r=t,(n=(9===n.nodeType?n:n.ownerDocument).createTextNode(a))[I]=t,r.stateNode=n)}break;case 11:break;case 13:if(Tr(fa),a=t.memoizedState,0!=(64&t.effectTag)){t.expirationTime=r;break e}r=null!==a,a=!1,null===n?ai(t):(a=null!==(u=n.memoizedState),r||null===u||null!==(u=n.child.sibling)&&(null!==(c=t.firstEffect)?(t.firstEffect=u,u.nextEffect=c):(t.firstEffect=t.lastEffect=u,u.nextEffect=null),u.effectTag=8)),r&&!a&&0!=(2&t.mode)&&(null===n&&!0!==t.memoizedProps.unstable_avoidThisFallback||0!=(fa.current&ca)?uu===Xi&&(uu=eu):uu!==Xi&&uu!==eu||(uu=tu)),(r||a)&&(t.effectTag|=4);break;case 7:case 8:case 12:break;case 4:aa(),Si(t);break;case 10:xo(t);break;case 9:case 14:break;case 17:Ur(t.type)&&Mr();break;case 18:break;case 19:if(Tr(fa),null===(a=t.memoizedState))break;if(u=0!=(64&t.effectTag),null===(c=a.rendering)){if(u)Ti(a,!1);else if(uu!==Xi||null!==n&&0!=(64&n.effectTag))for(n=t.child;null!==n;){if(null!==(c=pa(n))){for(t.effectTag|=64,Ti(a,!1),null!==(n=c.updateQueue)&&(t.updateQueue=n,t.effectTag|=4),t.firstEffect=t.lastEffect=null,n=t.child;null!==n;)u=r,(a=n).effectTag&=2,a.nextEffect=null,a.firstEffect=null,a.lastEffect=null,null===(c=a.alternate)?(a.childExpirationTime=0,a.expirationTime=u,a.child=null,a.memoizedProps=null,a.memoizedState=null,a.updateQueue=null,a.dependencies=null):(a.childExpirationTime=c.childExpirationTime,a.expirationTime=c.expirationTime,a.child=c.child,a.memoizedProps=c.memoizedProps,a.memoizedState=c.memoizedState,a.updateQueue=c.updateQueue,u=c.dependencies,a.dependencies=null===u?null:{expirationTime:u.expirationTime,firstContext:u.firstContext,responders:u.responders}),n=n.sibling;Cr(fa,fa.current&la|sa),t=t.child;break e}n=n.sibling}}else{if(!u)if(null!==(n=pa(c))){if(t.effectTag|=64,u=!0,Ti(a,!0),null===a.tail&&"hidden"===a.tailMode){null!==(r=n.updateQueue)&&(t.updateQueue=r,t.effectTag|=4),null!==(t=t.lastEffect=a.lastEffect)&&(t.nextEffect=null);break}}else io()>a.tailExpiration&&1<r&&(t.effectTag|=64,u=!0,Ti(a,!1),t.expirationTime=t.childExpirationTime=r-1);a.isBackwards?(c.sibling=t.child,t.child=c):(null!==(r=a.last)?r.sibling=c:t.child=c,a.last=c)}if(null!==a.tail){0===a.tailExpiration&&(a.tailExpiration=io()+500),r=a.tail,a.rendering=r,a.tail=r.sibling,a.lastEffect=t.lastEffect,r.sibling=null,n=fa.current,Cr(fa,n=u?n&la|sa:n&la),t=r;break e}break;case 20:break;default:throw i(Error(156))}t=null}if(r=au,1===iu||1!==r.childExpirationTime){for(n=0,a=r.child;null!==a;)(u=a.expirationTime)>n&&(n=u),(c=a.childExpirationTime)>n&&(n=c),a=a.sibling;r.childExpirationTime=n}if(null!==t)return t;null!==e&&0==(1024&e.effectTag)&&(null===e.firstEffect&&(e.firstEffect=au.firstEffect),null!==au.lastEffect&&(null!==e.lastEffect&&(e.lastEffect.nextEffect=au.firstEffect),e.lastEffect=au.lastEffect),1<au.effectTag&&(null!==e.lastEffect?e.lastEffect.nextEffect=au:e.firstEffect=au,e.lastEffect=au))}else{if(null!==(t=Ci(au)))return t.effectTag&=1023,t;null!==e&&(e.firstEffect=e.lastEffect=null,e.effectTag|=1024)}if(null!==(t=au.sibling))return t;au=e}while(null!==au);return uu===Xi&&(uu=nu),null}function Bu(e){var t=uo();return co(99,function(e,t){if($u(),(ru&(Yi|Zi))!==Qi)throw i(Error(327));var n=e.finishedWork,r=e.finishedExpirationTime;if(null===n)return null;if(e.finishedWork=null,e.finishedExpirationTime=0,n===e.current)throw i(Error(177));e.callbackNode=null,e.callbackExpirationTime=0;var o=n.expirationTime,a=n.childExpirationTime;if(o=a>o?a:o,e.firstPendingTime=o,o<e.lastPendingTime&&(e.lastPendingTime=o),e===ou&&(au=ou=null,iu=0),1<n.effectTag?null!==n.lastEffect?(n.lastEffect.nextEffect=n,o=n.firstEffect):o=n:o=n.firstEffect,null!==o){a=ru,ru|=Zi,Ki.current=null,br=In;var u=Bn();if($n(u)){if("selectionStart"in u)var l={start:u.selectionStart,end:u.selectionEnd};else e:{var c=(l=(l=u.ownerDocument)&&l.defaultView||window).getSelection&&l.getSelection();if(c&&0!==c.rangeCount){l=c.anchorNode;var s=c.anchorOffset,f=c.focusNode;c=c.focusOffset;try{l.nodeType,f.nodeType}catch(e){l=null;break e}var p=0,d=-1,h=-1,m=0,v=0,y=u,g=null;t:for(;;){for(var b;y!==l||0!==s&&3!==y.nodeType||(d=p+s),y!==f||0!==c&&3!==y.nodeType||(h=p+c),3===y.nodeType&&(p+=y.nodeValue.length),null!==(b=y.firstChild);)g=y,y=b;for(;;){if(y===u)break t;if(g===l&&++m===s&&(d=p),g===f&&++v===c&&(h=p),null!==(b=y.nextSibling))break;g=(y=g).parentNode}y=b}l=-1===d||-1===h?null:{start:d,end:h}}else l=null}l=l||{start:0,end:0}}else l=null;Er={focusedElem:u,selectionRange:l},In=!1,hu=o;do{try{for(;null!==hu;){if(0!=(256&hu.effectTag)){var E=hu.alternate;switch((u=hu).tag){case 0:case 11:case 15:Ai(ha,da,u);break;case 1:if(256&u.effectTag&&null!==E){var w=E.memoizedProps,_=E.memoizedState,x=u.stateNode,k=x.getSnapshotBeforeUpdate(u.elementType===u.type?w:vo(u.type,w),_);x.__reactInternalSnapshotBeforeUpdate=k}break;case 3:case 5:case 6:case 4:case 17:break;default:throw i(Error(163))}}hu=hu.nextEffect}}catch(e){if(null===hu)throw i(Error(330));qu(hu,e),hu=hu.nextEffect}}while(null!==hu);hu=o;do{try{for(E=t;null!==hu;){var S=hu.effectTag;if(16&S&&cr(hu.stateNode,""),128&S){var N=hu.alternate;if(null!==N){var O=N.ref;null!==O&&("function"==typeof O?O(null):O.current=null)}}switch(14&S){case 2:Di(hu),hu.effectTag&=-3;break;case 6:Di(hu),hu.effectTag&=-3,Fi(hu.alternate,hu);break;case 4:Fi(hu.alternate,hu);break;case 8:Li(w=hu,E),w.return=null,w.child=null,w.memoizedState=null,w.updateQueue=null,w.dependencies=null;var T=w.alternate;null!==T&&(T.return=null,T.child=null,T.memoizedState=null,T.updateQueue=null,T.dependencies=null)}hu=hu.nextEffect}}catch(e){if(null===hu)throw i(Error(330));qu(hu,e),hu=hu.nextEffect}}while(null!==hu);if(O=Er,N=Bn(),S=O.focusedElem,E=O.selectionRange,N!==S&&S&&S.ownerDocument&&function e(t,n){return!(!t||!n)&&(t===n||(!t||3!==t.nodeType)&&(n&&3===n.nodeType?e(t,n.parentNode):"contains"in t?t.contains(n):!!t.compareDocumentPosition&&!!(16&t.compareDocumentPosition(n))))}(S.ownerDocument.documentElement,S)){null!==E&&$n(S)&&(N=E.start,void 0===(O=E.end)&&(O=N),"selectionStart"in S?(S.selectionStart=N,S.selectionEnd=Math.min(O,S.value.length)):(O=(N=S.ownerDocument||document)&&N.defaultView||window).getSelection&&(O=O.getSelection(),w=S.textContent.length,T=Math.min(E.start,w),E=void 0===E.end?T:Math.min(E.end,w),!O.extend&&T>E&&(w=E,E=T,T=w),w=Wn(S,T),_=Wn(S,E),w&&_&&(1!==O.rangeCount||O.anchorNode!==w.node||O.anchorOffset!==w.offset||O.focusNode!==_.node||O.focusOffset!==_.offset)&&((N=N.createRange()).setStart(w.node,w.offset),O.removeAllRanges(),T>E?(O.addRange(N),O.extend(_.node,_.offset)):(N.setEnd(_.node,_.offset),O.addRange(N))))),N=[];for(O=S;O=O.parentNode;)1===O.nodeType&&N.push({element:O,left:O.scrollLeft,top:O.scrollTop});for("function"==typeof S.focus&&S.focus(),S=0;S<N.length;S++)(O=N[S]).element.scrollLeft=O.left,O.element.scrollTop=O.top}Er=null,In=!!br,br=null,e.current=n,hu=o;do{try{for(S=r;null!==hu;){var C=hu.effectTag;if(36&C){var P=hu.alternate;switch(O=S,(N=hu).tag){case 0:case 11:case 15:Ai(ya,ga,N);break;case 1:var j=N.stateNode;if(4&N.effectTag)if(null===P)j.componentDidMount();else{var R=N.elementType===N.type?P.memoizedProps:vo(N.type,P.memoizedProps);j.componentDidUpdate(R,P.memoizedState,j.__reactInternalSnapshotBeforeUpdate)}var I=N.updateQueue;null!==I&&zo(0,I,j);break;case 3:var A=N.updateQueue;if(null!==A){if(T=null,null!==N.child)switch(N.child.tag){case 5:T=N.child.stateNode;break;case 1:T=N.child.stateNode}zo(0,A,T)}break;case 5:var U=N.stateNode;null===P&&4&N.effectTag&&(O=U,wr(N.type,N.memoizedProps)&&O.focus());break;case 6:case 4:case 12:break;case 13:case 19:case 17:case 20:break;default:throw i(Error(163))}}if(128&C){var M=hu.ref;if(null!==M){var z=hu.stateNode;switch(hu.tag){case 5:var D=z;break;default:D=z}"function"==typeof M?M(D):M.current=D}}512&C&&(gu=!0),hu=hu.nextEffect}}catch(e){if(null===hu)throw i(Error(330));qu(hu,e),hu=hu.nextEffect}}while(null!==hu);hu=null,to(),ru=a}else e.current=n;if(gu)gu=!1,bu=e,wu=r,Eu=t;else for(hu=o;null!==hu;)t=hu.nextEffect,hu.nextEffect=null,hu=t;if(0!==(t=e.firstPendingTime)?(C=mo(C=Nu(),t),ju(e,C,t)):yu=null,"function"==typeof Qu&&Qu(n.stateNode,r),1073741823===t?e===ku?xu++:(xu=0,ku=e):xu=0,mu)throw mu=!1,e=vu,vu=null,e;return(ru&Gi)!==Qi?null:(po(),null)}.bind(null,e,t)),null!==bu&&so(97,function(){return $u(),null}),null}function $u(){if(null===bu)return!1;var e=bu,t=wu,n=Eu;return bu=null,wu=0,Eu=90,co(97<n?97:n,function(e){if((ru&(Yi|Zi))!==Qi)throw i(Error(331));var t=ru;for(ru|=Zi,e=e.current.firstEffect;null!==e;){try{var n=e;if(0!=(512&n.effectTag))switch(n.tag){case 0:case 11:case 15:Ai(Ea,da,n),Ai(da,ba,n)}}catch(t){if(null===e)throw i(Error(330));qu(e,t)}n=e.nextEffect,e.nextEffect=null,e=n}return ru=t,po(),!0}.bind(null,e,t))}function Vu(e,t,n){Ro(e,t=$i(e,t=Pi(n,t),1073741823)),null!==(e=Pu(e,1073741823))&&ju(e,99,1073741823)}function qu(e,t){if(3===e.tag)Vu(e,e,t);else for(var n=e.return;null!==n;){if(3===n.tag){Vu(n,e,t);break}if(1===n.tag){var r=n.stateNode;if("function"==typeof n.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===yu||!yu.has(r))){Ro(n,e=Vi(n,e=Pi(t,e),1073741823)),null!==(n=Pu(n,1073741823))&&ju(n,99,1073741823);break}}n=n.return}}function Hu(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),ou===e&&iu===n?uu===tu||uu===eu&&1073741823===lu&&io()-pu<du?zu(e,iu):fu=!0:e.lastPendingTime<n||(0!==(t=e.pingTime)&&t<n||(e.pingTime=n,e.finishedExpirationTime===n&&(e.finishedExpirationTime=0,e.finishedWork=null),ju(e,t=mo(t=Nu(),n),n)))}var Ku=void 0;Ku=function(e,t,n){var r=t.expirationTime;if(null!==e){var o=t.pendingProps;if(e.memoizedProps!==o||Rr.current)li=!0;else if(r<n){switch(li=!1,t.tag){case 3:yi(t),ii();break;case 5:if(ia(t),4&t.mode&&1!==n&&o.hidden)return t.expirationTime=t.childExpirationTime=1,null;break;case 1:Ur(t.type)&&Fr(t);break;case 4:oa(t,t.stateNode.containerInfo);break;case 10:_o(t,t.memoizedProps.value);break;case 13:if(null!==t.memoizedState)return 0!==(r=t.child.childExpirationTime)&&r>=n?bi(e,t,n):(Cr(fa,fa.current&la),null!==(t=_i(e,t,n))?t.sibling:null);Cr(fa,fa.current&la);break;case 19:if(r=t.childExpirationTime>=n,0!=(64&e.effectTag)){if(r)return wi(e,t,n);t.effectTag|=64}if(null!==(o=t.memoizedState)&&(o.rendering=null,o.tail=null),Cr(fa,fa.current),!r)return null}return _i(e,t,n)}}else li=!1;switch(t.expirationTime=0,t.tag){case 2:if(r=t.type,null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),e=t.pendingProps,o=Ar(t,jr.current),So(t,n),o=za(null,t,r,e,o,n),t.effectTag|=1,"object"==typeof o&&null!==o&&"function"==typeof o.render&&void 0===o.$$typeof){if(t.tag=1,Da(),Ur(r)){var a=!0;Fr(t)}else a=!1;t.memoizedState=null!==o.state&&void 0!==o.state?o.state:null;var u=r.getDerivedStateFromProps;"function"==typeof u&&Wo(t,r,u,e),o.updater=Bo,t.stateNode=o,o._reactInternalFiber=t,Ho(t,r,e,n),t=vi(null,t,r,!0,a,n)}else t.tag=0,ci(null,t,o,n),t=t.child;return t;case 16:switch(o=t.elementType,null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),e=t.pendingProps,o=function(e){var t=e._result;switch(e._status){case 1:return t;case 2:case 0:throw t;default:switch(e._status=0,(t=(t=e._ctor)()).then(function(t){0===e._status&&(t=t.default,e._status=1,e._result=t)},function(t){0===e._status&&(e._status=2,e._result=t)}),e._status){case 1:return e._result;case 2:throw e._result}throw e._result=t,t}}(o),t.type=o,a=t.tag=function(e){if("function"==typeof e)return Xu(e)?1:0;if(null!=e){if((e=e.$$typeof)===nt)return 11;if(e===at)return 14}return 2}(o),e=vo(o,e),a){case 0:t=hi(null,t,o,e,n);break;case 1:t=mi(null,t,o,e,n);break;case 11:t=si(null,t,o,e,n);break;case 14:t=fi(null,t,o,vo(o.type,e),r,n);break;default:throw i(Error(306),o,"")}return t;case 0:return r=t.type,o=t.pendingProps,hi(e,t,r,o=t.elementType===r?o:vo(r,o),n);case 1:return r=t.type,o=t.pendingProps,mi(e,t,r,o=t.elementType===r?o:vo(r,o),n);case 3:if(yi(t),null===(r=t.updateQueue))throw i(Error(282));return o=null!==(o=t.memoizedState)?o.element:null,Mo(t,r,t.pendingProps,null,n),(r=t.memoizedState.element)===o?(ii(),t=_i(e,t,n)):(o=t.stateNode,(o=(null===e||null===e.child)&&o.hydrate)&&(Ja=Sr(t.stateNode.containerInfo.firstChild),Xa=t,o=ei=!0),o?(t.effectTag|=2,t.child=Xo(t,null,r,n)):(ci(e,t,r,n),ii()),t=t.child),t;case 5:return ia(t),null===e&&ri(t),r=t.type,o=t.pendingProps,a=null!==e?e.memoizedProps:null,u=o.children,_r(r,o)?u=null:null!==a&&_r(r,a)&&(t.effectTag|=16),di(e,t),4&t.mode&&1!==n&&o.hidden?(t.expirationTime=t.childExpirationTime=1,t=null):(ci(e,t,u,n),t=t.child),t;case 6:return null===e&&ri(t),null;case 13:return bi(e,t,n);case 4:return oa(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=Zo(t,null,r,n):ci(e,t,r,n),t.child;case 11:return r=t.type,o=t.pendingProps,si(e,t,r,o=t.elementType===r?o:vo(r,o),n);case 7:return ci(e,t,t.pendingProps,n),t.child;case 8:case 12:return ci(e,t,t.pendingProps.children,n),t.child;case 10:e:{if(r=t.type._context,o=t.pendingProps,u=t.memoizedProps,_o(t,a=o.value),null!==u){var l=u.value;if(0===(a=en(l,a)?0:0|("function"==typeof r._calculateChangedBits?r._calculateChangedBits(l,a):1073741823))){if(u.children===o.children&&!Rr.current){t=_i(e,t,n);break e}}else for(null!==(l=t.child)&&(l.return=t);null!==l;){var c=l.dependencies;if(null!==c){u=l.child;for(var s=c.firstContext;null!==s;){if(s.context===r&&0!=(s.observedBits&a)){1===l.tag&&((s=Po(n,null)).tag=2,Ro(l,s)),l.expirationTime<n&&(l.expirationTime=n),null!==(s=l.alternate)&&s.expirationTime<n&&(s.expirationTime=n),ko(l.return,n),c.expirationTime<n&&(c.expirationTime=n);break}s=s.next}}else u=10===l.tag&&l.type===t.type?null:l.child;if(null!==u)u.return=l;else for(u=l;null!==u;){if(u===t){u=null;break}if(null!==(l=u.sibling)){l.return=u.return,u=l;break}u=u.return}l=u}}ci(e,t,o.children,n),t=t.child}return t;case 9:return o=t.type,r=(a=t.pendingProps).children,So(t,n),r=r(o=No(o,a.unstable_observedBits)),t.effectTag|=1,ci(e,t,r,n),t.child;case 14:return a=vo(o=t.type,t.pendingProps),fi(e,t,o,a=vo(o.type,a),r,n);case 15:return pi(e,t,t.type,t.pendingProps,r,n);case 17:return r=t.type,o=t.pendingProps,o=t.elementType===r?o:vo(r,o),null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),t.tag=1,Ur(r)?(e=!0,Fr(t)):e=!1,So(t,n),Vo(t,r,o),Ho(t,r,o,n),vi(null,t,r,!0,e,n);case 19:return wi(e,t,n)}throw i(Error(156))};var Qu=null,Gu=null;function Yu(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.effectTag=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.childExpirationTime=this.expirationTime=0,this.alternate=null}function Zu(e,t,n,r){return new Yu(e,t,n,r)}function Xu(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Ju(e,t){var n=e.alternate;return null===n?((n=Zu(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.effectTag=0,n.nextEffect=null,n.firstEffect=null,n.lastEffect=null),n.childExpirationTime=e.childExpirationTime,n.expirationTime=e.expirationTime,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{expirationTime:t.expirationTime,firstContext:t.firstContext,responders:t.responders},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function el(e,t,n,r,o,a){var u=2;if(r=e,"function"==typeof e)Xu(e)&&(u=1);else if("string"==typeof e)u=5;else e:switch(e){case Ye:return tl(n.children,o,a,t);case tt:u=8,o|=7;break;case Ze:u=8,o|=1;break;case Xe:return(e=Zu(12,n,t,8|o)).elementType=Xe,e.type=Xe,e.expirationTime=a,e;case rt:return(e=Zu(13,n,t,o)).type=rt,e.elementType=rt,e.expirationTime=a,e;case ot:return(e=Zu(19,n,t,o)).elementType=ot,e.expirationTime=a,e;default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case Je:u=10;break e;case et:u=9;break e;case nt:u=11;break e;case at:u=14;break e;case it:u=16,r=null;break e}throw i(Error(130),null==e?e:typeof e,"")}return(t=Zu(u,n,t,o)).elementType=e,t.type=r,t.expirationTime=a,t}function tl(e,t,n,r){return(e=Zu(7,e,r,t)).expirationTime=n,e}function nl(e,t,n){return(e=Zu(6,e,null,t)).expirationTime=n,e}function rl(e,t,n){return(t=Zu(4,null!==e.children?e.children:[],e.key,t)).expirationTime=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function ol(e,t,n){this.tag=t,this.current=null,this.containerInfo=e,this.pingCache=this.pendingChildren=null,this.finishedExpirationTime=0,this.finishedWork=null,this.timeoutHandle=-1,this.pendingContext=this.context=null,this.hydrate=n,this.callbackNode=this.firstBatch=null,this.pingTime=this.lastPendingTime=this.firstPendingTime=this.callbackExpirationTime=0}function al(e,t,n){return e=new ol(e,t,n),t=Zu(3,null,null,2===t?7:1===t?3:0),e.current=t,t.stateNode=e}function il(e,t,n,r,o,a){var u=t.current;e:if(n){t:{if(2!==on(n=n._reactInternalFiber)||1!==n.tag)throw i(Error(170));var l=n;do{switch(l.tag){case 3:l=l.stateNode.context;break t;case 1:if(Ur(l.type)){l=l.stateNode.__reactInternalMemoizedMergedChildContext;break t}}l=l.return}while(null!==l);throw i(Error(171))}if(1===n.tag){var c=n.type;if(Ur(c)){n=Lr(n,c,l);break e}}n=l}else n=Pr;return null===t.context?t.context=n:t.pendingContext=n,t=a,(o=Po(r,o)).payload={element:e},null!==(t=void 0===t?null:t)&&(o.callback=t),Ro(u,o),Cu(u,r),r}function ul(e,t,n,r){var o=t.current,a=Nu(),i=Lo.suspense;return il(e,t,n,o=Ou(a,o,i),i,r)}function ll(e){if(!(e=e.current).child)return null;switch(e.child.tag){case 5:default:return e.child.stateNode}}function cl(e){var t=1073741821-25*(1+((1073741821-Nu()+500)/25|0));t<=Tu&&--t,this._expirationTime=Tu=t,this._root=e,this._callbacks=this._next=null,this._hasChildren=this._didComplete=!1,this._children=null,this._defer=!0}function sl(){this._callbacks=null,this._didCommit=!1,this._onCommit=this._onCommit.bind(this)}function fl(e,t,n){this._internalRoot=al(e,t,n)}function pl(e,t){this._internalRoot=al(e,2,t)}function dl(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function hl(e,t,n,r,o){var a=n._reactRootContainer,i=void 0;if(a){if(i=a._internalRoot,"function"==typeof o){var u=o;o=function(){var e=ll(i);u.call(e)}}ul(t,i,e,o)}else{if(a=n._reactRootContainer=function(e,t){if(t||(t=!(!(t=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==t.nodeType||!t.hasAttribute("data-reactroot"))),!t)for(var n;n=e.lastChild;)e.removeChild(n);return new fl(e,0,t)}(n,r),i=a._internalRoot,"function"==typeof o){var l=o;o=function(){var e=ll(i);l.call(e)}}Mu(function(){ul(t,i,e,o)})}return ll(i)}function ml(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!dl(t))throw i(Error(200));return function(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:Ge,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}(e,t,null,n)}Ne=function(e,t,n){switch(t){case"input":if(kt(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var o=D(r);if(!o)throw i(Error(90));Ve(r),kt(r,o)}}}break;case"textarea":nr(e,n);break;case"select":null!=(t=n.value)&&Jn(e,!!n.multiple,t,!1)}},cl.prototype.render=function(e){if(!this._defer)throw i(Error(250));this._hasChildren=!0,this._children=e;var t=this._root._internalRoot,n=this._expirationTime,r=new sl;return il(e,t,null,n,null,r._onCommit),r},cl.prototype.then=function(e){if(this._didComplete)e();else{var t=this._callbacks;null===t&&(t=this._callbacks=[]),t.push(e)}},cl.prototype.commit=function(){var e=this._root._internalRoot,t=e.firstBatch;if(!this._defer||null===t)throw i(Error(251));if(this._hasChildren){var n=this._expirationTime;if(t!==this){this._hasChildren&&(n=this._expirationTime=t._expirationTime,this.render(this._children));for(var r=null,o=t;o!==this;)r=o,o=o._next;if(null===r)throw i(Error(251));r._next=o._next,this._next=t,e.firstBatch=this}if(this._defer=!1,t=n,(ru&(Yi|Zi))!==Qi)throw i(Error(253));fo(Du.bind(null,e,t)),po(),t=this._next,this._next=null,null!==(t=e.firstBatch=t)&&t._hasChildren&&t.render(t._children)}else this._next=null,this._defer=!1},cl.prototype._onComplete=function(){if(!this._didComplete){this._didComplete=!0;var e=this._callbacks;if(null!==e)for(var t=0;t<e.length;t++)(0,e[t])()}},sl.prototype.then=function(e){if(this._didCommit)e();else{var t=this._callbacks;null===t&&(t=this._callbacks=[]),t.push(e)}},sl.prototype._onCommit=function(){if(!this._didCommit){this._didCommit=!0;var e=this._callbacks;if(null!==e)for(var t=0;t<e.length;t++){var n=e[t];if("function"!=typeof n)throw i(Error(191),n);n()}}},pl.prototype.render=fl.prototype.render=function(e,t){var n=this._internalRoot,r=new sl;return null!==(t=void 0===t?null:t)&&r.then(t),ul(e,n,null,r._onCommit),r},pl.prototype.unmount=fl.prototype.unmount=function(e){var t=this._internalRoot,n=new sl;return null!==(e=void 0===e?null:e)&&n.then(e),ul(null,t,null,n._onCommit),n},pl.prototype.createBatch=function(){var e=new cl(this),t=e._expirationTime,n=this._internalRoot,r=n.firstBatch;if(null===r)n.firstBatch=e,e._next=null;else{for(n=null;null!==r&&r._expirationTime>=t;)n=r,r=r._next;e._next=r,null!==n&&(n._next=e)}return e},Re=Au,Ie=Uu,Ae=Iu,Ue=function(e,t){var n=ru;ru|=2;try{return e(t)}finally{(ru=n)===Qi&&po()}};var vl,yl,gl={createPortal:ml,findDOMNode:function(e){if(null==e)e=null;else if(1!==e.nodeType){var t=e._reactInternalFiber;if(void 0===t){if("function"==typeof e.render)throw i(Error(188));throw i(Error(268),Object.keys(e))}e=null===(e=un(t))?null:e.stateNode}return e},hydrate:function(e,t,n){if(!dl(t))throw i(Error(200));return hl(null,e,t,!0,n)},render:function(e,t,n){if(!dl(t))throw i(Error(200));return hl(null,e,t,!1,n)},unstable_renderSubtreeIntoContainer:function(e,t,n,r){if(!dl(n))throw i(Error(200));if(null==e||void 0===e._reactInternalFiber)throw i(Error(38));return hl(e,t,n,!1,r)},unmountComponentAtNode:function(e){if(!dl(e))throw i(Error(40));return!!e._reactRootContainer&&(Mu(function(){hl(null,null,e,!1,function(){e._reactRootContainer=null})}),!0)},unstable_createPortal:function(){return ml.apply(void 0,arguments)},unstable_batchedUpdates:Au,unstable_interactiveUpdates:function(e,t,n,r){return Iu(),Uu(e,t,n,r)},unstable_discreteUpdates:Uu,unstable_flushDiscreteUpdates:Iu,flushSync:function(e,t){if((ru&(Yi|Zi))!==Qi)throw i(Error(187));var n=ru;ru|=1;try{return co(99,e.bind(null,t))}finally{ru=n,po()}},unstable_createRoot:function(e,t){if(!dl(e))throw i(Error(299),"unstable_createRoot");return new pl(e,null!=t&&!0===t.hydrate)},unstable_createSyncRoot:function(e,t){if(!dl(e))throw i(Error(299),"unstable_createRoot");return new fl(e,1,null!=t&&!0===t.hydrate)},unstable_flushControlled:function(e){var t=ru;ru|=1;try{co(99,e)}finally{(ru=t)===Qi&&po()}},__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{Events:[M,z,D,P.injectEventPluginsByName,p,V,function(e){N(e,$)},Pe,je,Mn,C,$u,{current:!1}]}};yl=(vl={findFiberByHostInstance:U,bundleType:0,version:"16.9.0",rendererPackageName:"react-dom"}).findFiberByHostInstance,function(e){if("undefined"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__)return!1;var t=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(t.isDisabled||!t.supportsFiber)return!0;try{var n=t.inject(e);Qu=function(e){try{t.onCommitFiberRoot(n,e,void 0,64==(64&e.current.effectTag))}catch(e){}},Gu=function(e){try{t.onCommitFiberUnmount(n,e)}catch(e){}}}catch(e){}}(o({},vl,{overrideHookState:null,overrideProps:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:qe.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=un(e))?null:e.stateNode},findFiberByHostInstance:function(e){return yl?yl(e):null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null}));var bl={default:gl},El=bl&&gl||bl;e.exports=El.default||El},function(e,t,n){"use strict";e.exports=n(49)},function(e,t,n){"use strict";
/** @license React v0.15.0
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */Object.defineProperty(t,"__esModule",{value:!0});var r=void 0,o=void 0,a=void 0,i=void 0,u=void 0;if(t.unstable_now=void 0,t.unstable_forceFrameRate=void 0,"undefined"==typeof window||"function"!=typeof MessageChannel){var l=null,c=null,s=function(){if(null!==l)try{var e=t.unstable_now();l(!0,e),l=null}catch(e){throw setTimeout(s,0),e}};t.unstable_now=function(){return Date.now()},r=function(e){null!==l?setTimeout(r,0,e):(l=e,setTimeout(s,0))},o=function(e,t){c=setTimeout(e,t)},a=function(){clearTimeout(c)},i=function(){return!1},u=t.unstable_forceFrameRate=function(){}}else{var f=window.performance,p=window.Date,d=window.setTimeout,h=window.clearTimeout,m=window.requestAnimationFrame,v=window.cancelAnimationFrame;"undefined"!=typeof console&&("function"!=typeof m&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills"),"function"!=typeof v&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills")),t.unstable_now="object"==typeof f&&"function"==typeof f.now?function(){return f.now()}:function(){return p.now()};var y=!1,g=null,b=-1,E=-1,w=33.33,_=-1,x=-1,k=0,S=!1;i=function(){return t.unstable_now()>=k},u=function(){},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing framerates higher than 125 fps is not unsupported"):0<e?(w=Math.floor(1e3/e),S=!0):(w=33.33,S=!1)};var N=function(){if(null!==g){var e=t.unstable_now(),n=0<k-e;try{g(n,e)||(g=null)}catch(e){throw T.postMessage(null),e}}},O=new MessageChannel,T=O.port2;O.port1.onmessage=N;var C=function(e){if(null===g)x=_=-1,y=!1;else{y=!0,m(function(e){h(b),C(e)});var n=function(){k=t.unstable_now()+w/2,N(),b=d(n,3*w)};if(b=d(n,3*w),-1!==_&&.1<e-_){var r=e-_;!S&&-1!==x&&r<w&&x<w&&(8.33>(w=r<x?x:r)&&(w=8.33)),x=r}_=e,k=e+w,T.postMessage(null)}};r=function(e){g=e,y||(y=!0,m(function(e){C(e)}))},o=function(e,n){E=d(function(){e(t.unstable_now())},n)},a=function(){h(E),E=-1}}var P=null,j=null,R=null,I=3,A=!1,U=!1,M=!1;function z(e,t){var n=e.next;if(n===e)P=null;else{e===P&&(P=n);var r=e.previous;r.next=n,n.previous=r}e.next=e.previous=null,n=e.callback,r=I;var o=R;I=e.priorityLevel,R=e;try{var a=e.expirationTime<=t;switch(I){case 1:var i=n(a);break;case 2:case 3:case 4:i=n(a);break;case 5:i=n(a)}}catch(e){throw e}finally{I=r,R=o}if("function"==typeof i)if(t=e.expirationTime,e.callback=i,null===P)P=e.next=e.previous=e;else{i=null,a=P;do{if(t<=a.expirationTime){i=a;break}a=a.next}while(a!==P);null===i?i=P:i===P&&(P=e),(t=i.previous).next=i.previous=e,e.next=i,e.previous=t}}function D(e){if(null!==j&&j.startTime<=e)do{var t=j,n=t.next;if(t===n)j=null;else{j=n;var r=t.previous;r.next=n,n.previous=r}t.next=t.previous=null,B(t,t.expirationTime)}while(null!==j&&j.startTime<=e)}function L(e){M=!1,D(e),U||(null!==P?(U=!0,r(F)):null!==j&&o(L,j.startTime-e))}function F(e,n){U=!1,M&&(M=!1,a()),D(n),A=!0;try{if(e){if(null!==P)do{z(P,n),D(n=t.unstable_now())}while(null!==P&&!i())}else for(;null!==P&&P.expirationTime<=n;)z(P,n),D(n=t.unstable_now());return null!==P||(null!==j&&o(L,j.startTime-n),!1)}finally{A=!1}}function W(e){switch(e){case 1:return-1;case 2:return 250;case 5:return 1073741823;case 4:return 1e4;default:return 5e3}}function B(e,t){if(null===P)P=e.next=e.previous=e;else{var n=null,r=P;do{if(t<r.expirationTime){n=r;break}r=r.next}while(r!==P);null===n?n=P:n===P&&(P=e),(t=n.previous).next=n.previous=e,e.next=n,e.previous=t}}var $=u;t.unstable_ImmediatePriority=1,t.unstable_UserBlockingPriority=2,t.unstable_NormalPriority=3,t.unstable_IdlePriority=5,t.unstable_LowPriority=4,t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=I;I=e;try{return t()}finally{I=n}},t.unstable_next=function(e){switch(I){case 1:case 2:case 3:var t=3;break;default:t=I}var n=I;I=t;try{return e()}finally{I=n}},t.unstable_scheduleCallback=function(e,n,i){var u=t.unstable_now();if("object"==typeof i&&null!==i){var l=i.delay;l="number"==typeof l&&0<l?u+l:u,i="number"==typeof i.timeout?i.timeout:W(e)}else i=W(e),l=u;if(e={callback:n,priorityLevel:e,startTime:l,expirationTime:i=l+i,next:null,previous:null},l>u){if(i=l,null===j)j=e.next=e.previous=e;else{n=null;var c=j;do{if(i<c.startTime){n=c;break}c=c.next}while(c!==j);null===n?n=j:n===j&&(j=e),(i=n.previous).next=n.previous=e,e.next=n,e.previous=i}null===P&&j===e&&(M?a():M=!0,o(L,l-u))}else B(e,i),U||A||(U=!0,r(F));return e},t.unstable_cancelCallback=function(e){var t=e.next;if(null!==t){if(e===t)e===P?P=null:e===j&&(j=null);else{e===P?P=t:e===j&&(j=t);var n=e.previous;n.next=t,t.previous=n}e.next=e.previous=null}},t.unstable_wrapCallback=function(e){var t=I;return function(){var n=I;I=t;try{return e.apply(this,arguments)}finally{I=n}}},t.unstable_getCurrentPriorityLevel=function(){return I},t.unstable_shouldYield=function(){var e=t.unstable_now();return D(e),null!==R&&null!==P&&P.startTime<=e&&P.expirationTime<R.expirationTime||i()},t.unstable_requestPaint=$,t.unstable_continueExecution=function(){U||A||(U=!0,r(F))},t.unstable_pauseExecution=function(){},t.unstable_getFirstCallbackNode=function(){return P}},function(e,t,n){var r=n(51),o=n(108)(function(e,t,n){r(e,t,n)});e.exports=o},function(e,t,n){var r=n(52),o=n(30),a=n(83),i=n(85),u=n(4),l=n(40),c=n(39);e.exports=function e(t,n,s,f,p){t!==n&&a(n,function(a,l){if(p||(p=new r),u(a))i(t,n,l,s,e,f,p);else{var d=f?f(c(t,l),a,l+"",t,n,p):void 0;void 0===d&&(d=a),o(t,l,d)}},l)}},function(e,t,n){var r=n(9),o=n(58),a=n(59),i=n(60),u=n(61),l=n(62);function c(e){var t=this.__data__=new r(e);this.size=t.size}c.prototype.clear=o,c.prototype.delete=a,c.prototype.get=i,c.prototype.has=u,c.prototype.set=l,e.exports=c},function(e,t){e.exports=function(){this.__data__=[],this.size=0}},function(e,t,n){var r=n(10),o=Array.prototype.splice;e.exports=function(e){var t=this.__data__,n=r(t,e);return!(n<0)&&(n==t.length-1?t.pop():o.call(t,n,1),--this.size,!0)}},function(e,t,n){var r=n(10);e.exports=function(e){var t=this.__data__,n=r(t,e);return n<0?void 0:t[n][1]}},function(e,t,n){var r=n(10);e.exports=function(e){return r(this.__data__,e)>-1}},function(e,t,n){var r=n(10);e.exports=function(e,t){var n=this.__data__,o=r(n,e);return o<0?(++this.size,n.push([e,t])):n[o][1]=t,this}},function(e,t,n){var r=n(9);e.exports=function(){this.__data__=new r,this.size=0}},function(e,t){e.exports=function(e){var t=this.__data__,n=t.delete(e);return this.size=t.size,n}},function(e,t){e.exports=function(e){return this.__data__.get(e)}},function(e,t){e.exports=function(e){return this.__data__.has(e)}},function(e,t,n){var r=n(9),o=n(27),a=n(70),i=200;e.exports=function(e,t){var n=this.__data__;if(n instanceof r){var u=n.__data__;if(!o||u.length<i-1)return u.push([e,t]),this.size=++n.size,this;n=this.__data__=new a(u)}return n.set(e,t),this.size=n.size,this}},function(e,t,n){var r=n(20),o=n(66),a=n(4),i=n(68),u=/^\[object .+?Constructor\]$/,l=Function.prototype,c=Object.prototype,s=l.toString,f=c.hasOwnProperty,p=RegExp("^"+s.call(f).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$");e.exports=function(e){return!(!a(e)||o(e))&&(r(e)?p:u).test(i(e))}},function(e,t,n){var r=n(28),o=Object.prototype,a=o.hasOwnProperty,i=o.toString,u=r?r.toStringTag:void 0;e.exports=function(e){var t=a.call(e,u),n=e[u];try{e[u]=void 0;var r=!0}catch(e){}var o=i.call(e);return r&&(t?e[u]=n:delete e[u]),o}},function(e,t){var n=Object.prototype.toString;e.exports=function(e){return n.call(e)}},function(e,t,n){var r,o=n(67),a=(r=/[^.]+$/.exec(o&&o.keys&&o.keys.IE_PROTO||""))?"Symbol(src)_1."+r:"";e.exports=function(e){return!!a&&a in e}},function(e,t,n){var r=n(5)["__core-js_shared__"];e.exports=r},function(e,t){var n=Function.prototype.toString;e.exports=function(e){if(null!=e){try{return n.call(e)}catch(e){}try{return e+""}catch(e){}}return""}},function(e,t){e.exports=function(e,t){return null==e?void 0:e[t]}},function(e,t,n){var r=n(71),o=n(78),a=n(80),i=n(81),u=n(82);function l(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}l.prototype.clear=r,l.prototype.delete=o,l.prototype.get=a,l.prototype.has=i,l.prototype.set=u,e.exports=l},function(e,t,n){var r=n(72),o=n(9),a=n(27);e.exports=function(){this.size=0,this.__data__={hash:new r,map:new(a||o),string:new r}}},function(e,t,n){var r=n(73),o=n(74),a=n(75),i=n(76),u=n(77);function l(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}l.prototype.clear=r,l.prototype.delete=o,l.prototype.get=a,l.prototype.has=i,l.prototype.set=u,e.exports=l},function(e,t,n){var r=n(13);e.exports=function(){this.__data__=r?r(null):{},this.size=0}},function(e,t){e.exports=function(e){var t=this.has(e)&&delete this.__data__[e];return this.size-=t?1:0,t}},function(e,t,n){var r=n(13),o="__lodash_hash_undefined__",a=Object.prototype.hasOwnProperty;e.exports=function(e){var t=this.__data__;if(r){var n=t[e];return n===o?void 0:n}return a.call(t,e)?t[e]:void 0}},function(e,t,n){var r=n(13),o=Object.prototype.hasOwnProperty;e.exports=function(e){var t=this.__data__;return r?void 0!==t[e]:o.call(t,e)}},function(e,t,n){var r=n(13),o="__lodash_hash_undefined__";e.exports=function(e,t){var n=this.__data__;return this.size+=this.has(e)?0:1,n[e]=r&&void 0===t?o:t,this}},function(e,t,n){var r=n(14);e.exports=function(e){var t=r(this,e).delete(e);return this.size-=t?1:0,t}},function(e,t){e.exports=function(e){var t=typeof e;return"string"==t||"number"==t||"symbol"==t||"boolean"==t?"__proto__"!==e:null===e}},function(e,t,n){var r=n(14);e.exports=function(e){return r(this,e).get(e)}},function(e,t,n){var r=n(14);e.exports=function(e){return r(this,e).has(e)}},function(e,t,n){var r=n(14);e.exports=function(e,t){var n=r(this,e),o=n.size;return n.set(e,t),this.size+=n.size==o?0:1,this}},function(e,t,n){var r=n(84)();e.exports=r},function(e,t){e.exports=function(e){return function(t,n,r){for(var o=-1,a=Object(t),i=r(t),u=i.length;u--;){var l=i[e?u:++o];if(!1===n(a[l],l,a))break}return t}}},function(e,t,n){var r=n(30),o=n(86),a=n(87),i=n(90),u=n(91),l=n(34),c=n(35),s=n(95),f=n(37),p=n(20),d=n(4),h=n(97),m=n(38),v=n(39),y=n(101);e.exports=function(e,t,n,g,b,E,w){var _=v(e,n),x=v(t,n),k=w.get(x);if(k)r(e,n,k);else{var S=E?E(_,x,n+"",e,t,w):void 0,N=void 0===S;if(N){var O=c(x),T=!O&&f(x),C=!O&&!T&&m(x);S=x,O||T||C?c(_)?S=_:s(_)?S=i(_):T?(N=!1,S=o(x,!0)):C?(N=!1,S=a(x,!0)):S=[]:h(x)||l(x)?(S=_,l(_)?S=y(_):d(_)&&!p(_)||(S=u(x))):N=!1}N&&(w.set(x,S),b(S,x,g,E,w),w.delete(x)),r(e,n,S)}}},function(e,t,n){(function(e){var r=n(5),o=t&&!t.nodeType&&t,a=o&&"object"==typeof e&&e&&!e.nodeType&&e,i=a&&a.exports===o?r.Buffer:void 0,u=i?i.allocUnsafe:void 0;e.exports=function(e,t){if(t)return e.slice();var n=e.length,r=u?u(n):new e.constructor(n);return e.copy(r),r}}).call(this,n(15)(e))},function(e,t,n){var r=n(88);e.exports=function(e,t){var n=t?r(e.buffer):e.buffer;return new e.constructor(n,e.byteOffset,e.length)}},function(e,t,n){var r=n(89);e.exports=function(e){var t=new e.constructor(e.byteLength);return new r(t).set(new r(e)),t}},function(e,t,n){var r=n(5).Uint8Array;e.exports=r},function(e,t){e.exports=function(e,t){var n=-1,r=e.length;for(t||(t=Array(r));++n<r;)t[n]=e[n];return t}},function(e,t,n){var r=n(92),o=n(32),a=n(33);e.exports=function(e){return"function"!=typeof e.constructor||a(e)?{}:r(o(e))}},function(e,t,n){var r=n(4),o=Object.create,a=function(){function e(){}return function(t){if(!r(t))return{};if(o)return o(t);e.prototype=t;var n=new e;return e.prototype=void 0,n}}();e.exports=a},function(e,t){e.exports=function(e,t){return function(n){return e(t(n))}}},function(e,t,n){var r=n(12),o=n(7),a="[object Arguments]";e.exports=function(e){return o(e)&&r(e)==a}},function(e,t,n){var r=n(22),o=n(7);e.exports=function(e){return o(e)&&r(e)}},function(e,t){e.exports=function(){return!1}},function(e,t,n){var r=n(12),o=n(32),a=n(7),i="[object Object]",u=Function.prototype,l=Object.prototype,c=u.toString,s=l.hasOwnProperty,f=c.call(Object);e.exports=function(e){if(!a(e)||r(e)!=i)return!1;var t=o(e);if(null===t)return!0;var n=s.call(t,"constructor")&&t.constructor;return"function"==typeof n&&n instanceof n&&c.call(n)==f}},function(e,t,n){var r=n(12),o=n(36),a=n(7),i={};i["[object Float32Array]"]=i["[object Float64Array]"]=i["[object Int8Array]"]=i["[object Int16Array]"]=i["[object Int32Array]"]=i["[object Uint8Array]"]=i["[object Uint8ClampedArray]"]=i["[object Uint16Array]"]=i["[object Uint32Array]"]=!0,i["[object Arguments]"]=i["[object Array]"]=i["[object ArrayBuffer]"]=i["[object Boolean]"]=i["[object DataView]"]=i["[object Date]"]=i["[object Error]"]=i["[object Function]"]=i["[object Map]"]=i["[object Number]"]=i["[object Object]"]=i["[object RegExp]"]=i["[object Set]"]=i["[object String]"]=i["[object WeakMap]"]=!1,e.exports=function(e){return a(e)&&o(e.length)&&!!i[r(e)]}},function(e,t){e.exports=function(e){return function(t){return e(t)}}},function(e,t,n){(function(e){var r=n(29),o=t&&!t.nodeType&&t,a=o&&"object"==typeof e&&e&&!e.nodeType&&e,i=a&&a.exports===o&&r.process,u=function(){try{var e=a&&a.require&&a.require("util").types;return e||i&&i.binding&&i.binding("util")}catch(e){}}();e.exports=u}).call(this,n(15)(e))},function(e,t,n){var r=n(102),o=n(40);e.exports=function(e){return r(e,o(e))}},function(e,t,n){var r=n(103),o=n(21);e.exports=function(e,t,n,a){var i=!n;n||(n={});for(var u=-1,l=t.length;++u<l;){var c=t[u],s=a?a(n[c],e[c],c,n,e):void 0;void 0===s&&(s=e[c]),i?o(n,c,s):r(n,c,s)}return n}},function(e,t,n){var r=n(21),o=n(11),a=Object.prototype.hasOwnProperty;e.exports=function(e,t,n){var i=e[t];a.call(e,t)&&o(i,n)&&(void 0!==n||t in e)||r(e,t,n)}},function(e,t,n){var r=n(105),o=n(34),a=n(35),i=n(37),u=n(41),l=n(38),c=Object.prototype.hasOwnProperty;e.exports=function(e,t){var n=a(e),s=!n&&o(e),f=!n&&!s&&i(e),p=!n&&!s&&!f&&l(e),d=n||s||f||p,h=d?r(e.length,String):[],m=h.length;for(var v in e)!t&&!c.call(e,v)||d&&("length"==v||f&&("offset"==v||"parent"==v)||p&&("buffer"==v||"byteLength"==v||"byteOffset"==v)||u(v,m))||h.push(v);return h}},function(e,t){e.exports=function(e,t){for(var n=-1,r=Array(e);++n<e;)r[n]=t(n);return r}},function(e,t,n){var r=n(4),o=n(33),a=n(107),i=Object.prototype.hasOwnProperty;e.exports=function(e){if(!r(e))return a(e);var t=o(e),n=[];for(var u in e)("constructor"!=u||!t&&i.call(e,u))&&n.push(u);return n}},function(e,t){e.exports=function(e){var t=[];if(null!=e)for(var n in Object(e))t.push(n);return t}},function(e,t,n){var r=n(109),o=n(116);e.exports=function(e){return r(function(t,n){var r=-1,a=n.length,i=a>1?n[a-1]:void 0,u=a>2?n[2]:void 0;for(i=e.length>3&&"function"==typeof i?(a--,i):void 0,u&&o(n[0],n[1],u)&&(i=a<3?void 0:i,a=1),t=Object(t);++r<a;){var l=n[r];l&&e(t,l,r,i)}return t})}},function(e,t,n){var r=n(42),o=n(110),a=n(112);e.exports=function(e,t){return a(o(e,t,r),e+"")}},function(e,t,n){var r=n(111),o=Math.max;e.exports=function(e,t,n){return t=o(void 0===t?e.length-1:t,0),function(){for(var a=arguments,i=-1,u=o(a.length-t,0),l=Array(u);++i<u;)l[i]=a[t+i];i=-1;for(var c=Array(t+1);++i<t;)c[i]=a[i];return c[t]=n(l),r(e,this,c)}}},function(e,t){e.exports=function(e,t,n){switch(n.length){case 0:return e.call(t);case 1:return e.call(t,n[0]);case 2:return e.call(t,n[0],n[1]);case 3:return e.call(t,n[0],n[1],n[2])}return e.apply(t,n)}},function(e,t,n){var r=n(113),o=n(115)(r);e.exports=o},function(e,t,n){var r=n(114),o=n(31),a=n(42),i=o?function(e,t){return o(e,"toString",{configurable:!0,enumerable:!1,value:r(t),writable:!0})}:a;e.exports=i},function(e,t){e.exports=function(e){return function(){return e}}},function(e,t){var n=800,r=16,o=Date.now;e.exports=function(e){var t=0,a=0;return function(){var i=o(),u=r-(i-a);if(a=i,u>0){if(++t>=n)return arguments[0]}else t=0;return e.apply(void 0,arguments)}}},function(e,t,n){var r=n(11),o=n(22),a=n(41),i=n(4);e.exports=function(e,t,n){if(!i(n))return!1;var u=typeof t;return!!("number"==u?o(n)&&a(t,n.length):"string"==u&&t in n)&&r(n[t],e)}},function(e,t){e.exports=function(e){if(!e.webpackPolyfill){var t=Object.create(e);t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),Object.defineProperty(t,"exports",{enumerable:!0}),t.webpackPolyfill=1}return t}},function(e,t,n){"use strict";var r=n(119);function o(){}function a(){}a.resetWarningCache=o,e.exports=function(){function e(e,t,n,o,a,i){if(i!==r){var u=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw u.name="Invariant Violation",u}}function t(){return e}e.isRequired=e;var n={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,elementType:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t,checkPropTypes:a,resetWarningCache:o};return n.PropTypes=n,n}},function(e,t,n){"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},function(e,t,n){"use strict";
/** @license React v16.9.0
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */Object.defineProperty(t,"__esModule",{value:!0});var r="function"==typeof Symbol&&Symbol.for,o=r?Symbol.for("react.element"):60103,a=r?Symbol.for("react.portal"):60106,i=r?Symbol.for("react.fragment"):60107,u=r?Symbol.for("react.strict_mode"):60108,l=r?Symbol.for("react.profiler"):60114,c=r?Symbol.for("react.provider"):60109,s=r?Symbol.for("react.context"):60110,f=r?Symbol.for("react.async_mode"):60111,p=r?Symbol.for("react.concurrent_mode"):60111,d=r?Symbol.for("react.forward_ref"):60112,h=r?Symbol.for("react.suspense"):60113,m=r?Symbol.for("react.suspense_list"):60120,v=r?Symbol.for("react.memo"):60115,y=r?Symbol.for("react.lazy"):60116,g=r?Symbol.for("react.fundamental"):60117,b=r?Symbol.for("react.responder"):60118;function E(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case o:switch(e=e.type){case f:case p:case i:case l:case u:case h:return e;default:switch(e=e&&e.$$typeof){case s:case d:case c:return e;default:return t}}case y:case v:case a:return t}}}function w(e){return E(e)===p}t.typeOf=E,t.AsyncMode=f,t.ConcurrentMode=p,t.ContextConsumer=s,t.ContextProvider=c,t.Element=o,t.ForwardRef=d,t.Fragment=i,t.Lazy=y,t.Memo=v,t.Portal=a,t.Profiler=l,t.StrictMode=u,t.Suspense=h,t.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===i||e===p||e===l||e===u||e===h||e===m||"object"==typeof e&&null!==e&&(e.$$typeof===y||e.$$typeof===v||e.$$typeof===c||e.$$typeof===s||e.$$typeof===d||e.$$typeof===g||e.$$typeof===b)},t.isAsyncMode=function(e){return w(e)||E(e)===f},t.isConcurrentMode=w,t.isContextConsumer=function(e){return E(e)===s},t.isContextProvider=function(e){return E(e)===c},t.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===o},t.isForwardRef=function(e){return E(e)===d},t.isFragment=function(e){return E(e)===i},t.isLazy=function(e){return E(e)===y},t.isMemo=function(e){return E(e)===v},t.isPortal=function(e){return E(e)===a},t.isProfiler=function(e){return E(e)===l},t.isStrictMode=function(e){return E(e)===u},t.isSuspense=function(e){return E(e)===h}},function(e,t){e.exports=Array.isArray||function(e){return"[object Array]"==Object.prototype.toString.call(e)}},function(e,t,n){"use strict";n.r(t);var r=n(0),o=n.n(r),a=n(16),i=n.n(a),u=n(23),l=function(){return Math.random().toString(36).substring(7).split("").join(".")},c={INIT:"@@redux/INIT"+l(),REPLACE:"@@redux/REPLACE"+l(),PROBE_UNKNOWN_ACTION:function(){return"@@redux/PROBE_UNKNOWN_ACTION"+l()}};function s(e){if("object"!=typeof e||null===e)return!1;for(var t=e;null!==Object.getPrototypeOf(t);)t=Object.getPrototypeOf(t);return Object.getPrototypeOf(e)===t}function f(e,t,n){var r;if("function"==typeof t&&"function"==typeof n||"function"==typeof n&&"function"==typeof arguments[3])throw new Error("It looks like you are passing several store enhancers to createStore(). This is not supported. Instead, compose them together to a single function.");if("function"==typeof t&&void 0===n&&(n=t,t=void 0),void 0!==n){if("function"!=typeof n)throw new Error("Expected the enhancer to be a function.");return n(f)(e,t)}if("function"!=typeof e)throw new Error("Expected the reducer to be a function.");var o=e,a=t,i=[],l=i,p=!1;function d(){l===i&&(l=i.slice())}function h(){if(p)throw new Error("You may not call store.getState() while the reducer is executing. The reducer has already received the state as an argument. Pass it down from the top reducer instead of reading it from the store.");return a}function m(e){if("function"!=typeof e)throw new Error("Expected the listener to be a function.");if(p)throw new Error("You may not call store.subscribe() while the reducer is executing. If you would like to be notified after the store has been updated, subscribe from a component and invoke store.getState() in the callback to access the latest state. See https://redux.js.org/api-reference/store#subscribe(listener) for more details.");var t=!0;return d(),l.push(e),function(){if(t){if(p)throw new Error("You may not unsubscribe from a store listener while the reducer is executing. See https://redux.js.org/api-reference/store#subscribe(listener) for more details.");t=!1,d();var n=l.indexOf(e);l.splice(n,1)}}}function v(e){if(!s(e))throw new Error("Actions must be plain objects. Use custom middleware for async actions.");if(void 0===e.type)throw new Error('Actions may not have an undefined "type" property. Have you misspelled a constant?');if(p)throw new Error("Reducers may not dispatch actions.");try{p=!0,a=o(a,e)}finally{p=!1}for(var t=i=l,n=0;n<t.length;n++){(0,t[n])()}return e}return v({type:c.INIT}),(r={dispatch:v,subscribe:m,getState:h,replaceReducer:function(e){if("function"!=typeof e)throw new Error("Expected the nextReducer to be a function.");o=e,v({type:c.REPLACE})}})[u.a]=function(){var e,t=m;return(e={subscribe:function(e){if("object"!=typeof e||null===e)throw new TypeError("Expected the observer to be an object.");function n(){e.next&&e.next(h())}return n(),{unsubscribe:t(n)}}})[u.a]=function(){return this},e},r}function p(e,t){var n=t&&t.type;return"Given "+(n&&'action "'+String(n)+'"'||"an action")+', reducer "'+e+'" returned undefined. To ignore an action, you must explicitly return the previous state. If you want this reducer to hold no value, you can return null instead of undefined.'}function d(e){for(var t=Object.keys(e),n={},r=0;r<t.length;r++){var o=t[r];0,"function"==typeof e[o]&&(n[o]=e[o])}var a,i=Object.keys(n);try{!function(e){Object.keys(e).forEach(function(t){var n=e[t];if(void 0===n(void 0,{type:c.INIT}))throw new Error('Reducer "'+t+"\" returned undefined during initialization. If the state passed to the reducer is undefined, you must explicitly return the initial state. The initial state may not be undefined. If you don't want to set a value for this reducer, you can use null instead of undefined.");if(void 0===n(void 0,{type:c.PROBE_UNKNOWN_ACTION()}))throw new Error('Reducer "'+t+"\" returned undefined when probed with a random type. Don't try to handle "+c.INIT+' or other actions in "redux/*" namespace. They are considered private. Instead, you must return the current state for any unknown actions, unless it is undefined, in which case you must return the initial state, regardless of the action type. The initial state may not be undefined, but can be null.')})}(n)}catch(e){a=e}return function(e,t){if(void 0===e&&(e={}),a)throw a;for(var r=!1,o={},u=0;u<i.length;u++){var l=i[u],c=n[l],s=e[l],f=c(s,t);if(void 0===f){var d=p(l,t);throw new Error(d)}o[l]=f,r=r||f!==s}return r?o:e}}function h(e,t){return function(){return t(e.apply(this,arguments))}}function m(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function v(e,t){var n=Object.keys(e);return Object.getOwnPropertySymbols&&n.push.apply(n,Object.getOwnPropertySymbols(e)),t&&(n=n.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),n}function y(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?v(n,!0).forEach(function(t){m(e,t,n[t])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):v(n).forEach(function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))})}return e}function g(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return 0===t.length?function(e){return e}:1===t.length?t[0]:t.reduce(function(e,t){return function(){return e(t.apply(void 0,arguments))}})}function b(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return function(e){return function(){var n=e.apply(void 0,arguments),r=function(){throw new Error("Dispatching while constructing your middleware is not allowed. Other middleware would not be applied to this dispatch.")},o={getState:n.getState,dispatch:function(){return r.apply(void 0,arguments)}},a=t.map(function(e){return e(o)});return y({},n,{dispatch:r=g.apply(void 0,a)(n.dispatch)})}}}var E=n(43),w=n.n(E),_=function(e){return{type:"RECEIVE_CURRENT_USER",user:e}},x=function(){return{type:"CLEAR_ERRORS"}},k=function(e){return function(t){return(n=e,$.ajax({url:"/api/session",method:"POST",data:{user:n}})).then(function(e){return t(_(e))},function(e){return t(function(e){return{type:"RECEIVE_ERRORS",errors:e}}(e.responseJSON))});var n}},S=function(){return function(e){return $.ajax({url:"/api/session",method:"DELETE"}).then(function(){return e({type:"LOGOUT_CURRENT_USER"})})}},N={currentUser:null},O=function(){return function(e){return $.ajax({method:"GET",url:"api/products/"}).then(function(t){return e(function(e){return{type:"RECEIVE_PRODUCTS",products:e}}(t))})}},T=function(e){return function(t){return function(e){return $.ajax({method:"GET",url:"api/products/".concat(e)})}(e).then(function(e){return t({type:"RECEIVE_PRODUCT",payload:e}),e})}},C=function(e){return{type:"RECEIVE_ORDER",order:e.order,orderItems:e.orderItems,products:e.products,productItems:e.productItems,users:e.users}},P=function(e){return function(t){return function(e){return $.ajax({method:"GET",url:"api/orders/".concat(e)})}(e).then(function(e){return t(C(e))})}};window.fetchOrder=P;var j=function(e){return{type:"RECEIVE_ORDER_ITEM",orderItem:e.orderItems}},R=function(e,t){return function(e){return function(e,t){return $.ajax({method:"POST",url:"api/orders/".concat(t.order_id,"/order_items"),data:{orderItem:t}})}(0,t).then(function(t){return e(j(t))})}},I=function(e,t,n){return function(t){return function(e,t,n){return $.ajax({method:"DELETE",url:"api/orders/".concat(n,"/order_items/").concat(e),orderItem:{order_id:n,id:e}})}(e,0,n).then(function(e){return t(function(e){return{type:"REMOVE_ORDER_ITEM",orderItemId:Object.keys(e.orderItems)}}(e))})}};n(50);function A(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var U=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=arguments.length>1?arguments[1]:void 0;Object.freeze(e);var n,r=Object.assign({},e);switch(t.type){case"RECEIVE_PRODUCTS":return Object.assign(r,t.products);case"RECEIVE_PRODUCT":return n=t.payload.product,Object.assign(r,A({},n.id,n));case"RECEIVE_ORDER":return Object.assign(r,t.products);default:return e}},M=function(e){return{type:"RECEIVE_PRODUCT_ITEM",productItem:e}},z=function(e){return function(t){return(n=e,$.ajax({method:"PATCH",url:"api/product_items/".concat(n.id),data:{product_item:n}})).then(function(e){return t(M(e))});var n}},D=n(3);function L(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function F(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var W=d({products:U,productItems:function(){var e,t,n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},r=arguments.length>1?arguments[1]:void 0;switch(Object.freeze(n),r.type){case"RECEIVE_PRODUCT_ITEM":return e=Object(D.merge)({},n,L({},r.productItem.id,r.productItem));case"RECEIVE_PRODUCT":return t=r.payload.product_items,Object(D.merge)({},n,t);case"RECEIVE_ORDER":return e=Object(D.merge)({},e,r.productItems);default:return n}},orders:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=arguments.length>1?arguments[1]:void 0;switch(Object.freeze(e),t.type){case"RECEIVE_ORDER":return Object(D.merge)({},e,t.order);case"RECEIVE_PRODUCT":return Object(D.merge)({},e,t.payload.orders);case"LOGOUT_CURRENT_USER":return{};default:return e}},orderItems:function(){var e,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=arguments.length>1?arguments[1]:void 0,r=Object.assign({},t);switch(Object.freeze(t),n.type){case"RECEIVE_ORDER_ITEM":return r=Object.assign(r,F({},n.orderItem.id,n.orderItem));case"REMOVE_ORDER_ITEM":return delete r[n.orderItemId],r;case"RECEIVE_ORDER":return r=Object.assign(r,n.orderItems);case"RECEIVE_PRODUCT":return e=n.payload.order_items,Object.assign(r,e);case"LOGOUT_CURRENT_USER":return{};default:return t}}}),B=function(e){return function(t){return(n=e,$.ajax({url:"/api/users",method:"POST",data:{user:n}})).then(function(e){return t(function(e){return{type:"RECEIVE_CURRENT_USER",user:e}}(e))},function(e){return t(function(e){return{type:"RECEIVE_SIGNUP_ERRORS",errors:e}}(e.responseJSON))});var n}},V=d({session:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],t=arguments.length>1?arguments[1]:void 0;switch(Object.freeze(e),t.type){case"RECEIVE_CURRENT_USER":return[];case"RECEIVE_ERRORS":return t.errors;case"CLEAR_ERRORS":return[];default:return e}},signup:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],t=arguments.length>1?arguments[1]:void 0;switch(Object.freeze(e),t.type){case"RECEIVE_CURRENT_USER":return[];case"RECEIVE_SIGNUP_ERRORS":return t.errors;default:return e}}}),q=d({entities:W,session:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:N,t=arguments.length>1?arguments[1]:void 0;switch(Object.freeze(e),t.type){case"RECEIVE_CURRENT_USER":var n=t.user;return Object.assign({},{currentUser:n});case"LOGOUT_CURRENT_USER":return N;default:return e}},errors:V}),H=function(e){var t=e.dispatch,n=e.getState;return function(e){return function(r){return"function"==typeof r?r(t,n):e(r)}}};function K(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,e.__proto__=t}var Q=n(1),G=n.n(Q),Y=o.a.createContext(null);var Z=function(e){e()},X=function(){return Z},J=null,ee={notify:function(){}};var te=function(){function e(e,t){this.store=e,this.parentSub=t,this.unsubscribe=null,this.listeners=ee,this.handleChangeWrapper=this.handleChangeWrapper.bind(this)}var t=e.prototype;return t.addNestedSub=function(e){return this.trySubscribe(),this.listeners.subscribe(e)},t.notifyNestedSubs=function(){this.listeners.notify()},t.handleChangeWrapper=function(){this.onStateChange&&this.onStateChange()},t.isSubscribed=function(){return Boolean(this.unsubscribe)},t.trySubscribe=function(){var e,t,n;this.unsubscribe||(this.unsubscribe=this.parentSub?this.parentSub.addNestedSub(this.handleChangeWrapper):this.store.subscribe(this.handleChangeWrapper),this.listeners=(e=X(),t=[],n=[],{clear:function(){n=J,t=J},notify:function(){var r=t=n;e(function(){for(var e=0;e<r.length;e++)r[e]()})},get:function(){return n},subscribe:function(e){var r=!0;return n===t&&(n=t.slice()),n.push(e),function(){r&&t!==J&&(r=!1,n===t&&(n=t.slice()),n.splice(n.indexOf(e),1))}}}))},t.tryUnsubscribe=function(){this.unsubscribe&&(this.unsubscribe(),this.unsubscribe=null,this.listeners.clear(),this.listeners=ee)},e}(),ne=function(e){function t(t){var n;n=e.call(this,t)||this;var r=t.store;n.notifySubscribers=n.notifySubscribers.bind(function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(n));var o=new te(r);return o.onStateChange=n.notifySubscribers,n.state={store:r,subscription:o},n.previousState=r.getState(),n}K(t,e);var n=t.prototype;return n.componentDidMount=function(){this._isMounted=!0,this.state.subscription.trySubscribe(),this.previousState!==this.props.store.getState()&&this.state.subscription.notifyNestedSubs()},n.componentWillUnmount=function(){this.unsubscribe&&this.unsubscribe(),this.state.subscription.tryUnsubscribe(),this._isMounted=!1},n.componentDidUpdate=function(e){if(this.props.store!==e.store){this.state.subscription.tryUnsubscribe();var t=new te(this.props.store);t.onStateChange=this.notifySubscribers,this.setState({store:this.props.store,subscription:t})}},n.notifySubscribers=function(){this.state.subscription.notifyNestedSubs()},n.render=function(){var e=this.props.context||Y;return o.a.createElement(e.Provider,{value:this.state},this.props.children)},t}(r.Component);ne.propTypes={store:G.a.shape({subscribe:G.a.func.isRequired,dispatch:G.a.func.isRequired,getState:G.a.func.isRequired}),context:G.a.object,children:G.a.any};var re=ne;function oe(){return(oe=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function ae(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}var ie=n(8),ue=n.n(ie),le=n(2),ce=n.n(le),se=n(17),fe=[],pe=[null,null];function de(e,t){var n=e[1];return[t.payload,n+1]}var he=function(){return[null,0]},me="undefined"!=typeof window&&void 0!==window.document&&void 0!==window.document.createElement?r.useLayoutEffect:r.useEffect;function ve(e,t){void 0===t&&(t={});var n=t,a=n.getDisplayName,i=void 0===a?function(e){return"ConnectAdvanced("+e+")"}:a,u=n.methodName,l=void 0===u?"connectAdvanced":u,c=n.renderCountProp,s=void 0===c?void 0:c,f=n.shouldHandleStateChanges,p=void 0===f||f,d=n.storeKey,h=void 0===d?"store":d,m=n.withRef,v=void 0!==m&&m,y=n.forwardRef,g=void 0!==y&&y,b=n.context,E=void 0===b?Y:b,w=ae(n,["getDisplayName","methodName","renderCountProp","shouldHandleStateChanges","storeKey","withRef","forwardRef","context"]);ce()(void 0===s,"renderCountProp is removed. render counting is built into the latest React Dev Tools profiling extension"),ce()(!v,"withRef is removed. To access the wrapped instance, use a ref on the connected component");ce()("store"===h,"storeKey has been removed and does not do anything. To use a custom Redux store for specific components, create a custom React context with React.createContext(), and pass the context object to React Redux's Provider and specific components like: <Provider context={MyContext}><ConnectedComponent context={MyContext} /></Provider>. You may also pass a {context : MyContext} option to connect");var _=E;return function(t){var n=t.displayName||t.name||"Component",a=i(n),u=oe({},w,{getDisplayName:i,methodName:l,renderCountProp:s,shouldHandleStateChanges:p,storeKey:h,displayName:a,wrappedComponentName:n,WrappedComponent:t}),c=w.pure;var f=c?r.useMemo:function(e){return e()};function d(n){var i=Object(r.useMemo)(function(){var e=n.forwardedRef,t=ae(n,["forwardedRef"]);return[n.context,e,t]},[n]),l=i[0],c=i[1],s=i[2],d=Object(r.useMemo)(function(){return l&&l.Consumer&&Object(se.isContextConsumer)(o.a.createElement(l.Consumer,null))?l:_},[l,_]),h=Object(r.useContext)(d),m=Boolean(n.store),v=Boolean(h)&&Boolean(h.store);ce()(m||v,'Could not find "store" in the context of "'+a+'". Either wrap the root component in a <Provider>, or pass a custom React context provider to <Provider> and the corresponding React context consumer to '+a+" in connect options.");var y=n.store||h.store,g=Object(r.useMemo)(function(){return function(t){return e(t.dispatch,u)}(y)},[y]),b=Object(r.useMemo)(function(){if(!p)return pe;var e=new te(y,m?null:h.subscription),t=e.notifyNestedSubs.bind(e);return[e,t]},[y,m,h]),E=b[0],w=b[1],x=Object(r.useMemo)(function(){return m?h:oe({},h,{subscription:E})},[m,h,E]),k=Object(r.useReducer)(de,fe,he),S=k[0][0],N=k[1];if(S&&S.error)throw S.error;var O=Object(r.useRef)(),T=Object(r.useRef)(s),C=Object(r.useRef)(),P=Object(r.useRef)(!1),j=f(function(){return C.current&&s===T.current?C.current:g(y.getState(),s)},[y,S,s]);me(function(){T.current=s,O.current=j,P.current=!1,C.current&&(C.current=null,w())}),me(function(){if(p){var e=!1,t=null,n=function(){if(!e){var n,r,o=y.getState();try{n=g(o,T.current)}catch(e){r=e,t=e}r||(t=null),n===O.current?P.current||w():(O.current=n,C.current=n,P.current=!0,N({type:"STORE_UPDATED",payload:{latestStoreState:o,error:r}}))}};E.onStateChange=n,E.trySubscribe(),n();return function(){if(e=!0,E.tryUnsubscribe(),t)throw t}}},[y,E,g]);var R=Object(r.useMemo)(function(){return o.a.createElement(t,oe({},j,{ref:c}))},[c,t,j]);return Object(r.useMemo)(function(){return p?o.a.createElement(d.Provider,{value:x},R):R},[d,R,x])}var m=c?o.a.memo(d):d;if(m.WrappedComponent=t,m.displayName=a,g){var v=o.a.forwardRef(function(e,t){return o.a.createElement(m,oe({},e,{forwardedRef:t}))});return v.displayName=a,v.WrappedComponent=t,ue()(v,t)}return ue()(m,t)}}var ye=Object.prototype.hasOwnProperty;function ge(e,t){return e===t?0!==e||0!==t||1/e==1/t:e!=e&&t!=t}function be(e,t){if(ge(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(var o=0;o<n.length;o++)if(!ye.call(t,n[o])||!ge(e[n[o]],t[n[o]]))return!1;return!0}function Ee(e){return function(t,n){var r=e(t,n);function o(){return r}return o.dependsOnOwnProps=!1,o}}function we(e){return null!==e.dependsOnOwnProps&&void 0!==e.dependsOnOwnProps?Boolean(e.dependsOnOwnProps):1!==e.length}function _e(e,t){return function(t,n){n.displayName;var r=function(e,t){return r.dependsOnOwnProps?r.mapToProps(e,t):r.mapToProps(e)};return r.dependsOnOwnProps=!0,r.mapToProps=function(t,n){r.mapToProps=e,r.dependsOnOwnProps=we(e);var o=r(t,n);return"function"==typeof o&&(r.mapToProps=o,r.dependsOnOwnProps=we(o),o=r(t,n)),o},r}}var xe=[function(e){return"function"==typeof e?_e(e):void 0},function(e){return e?void 0:Ee(function(e){return{dispatch:e}})},function(e){return e&&"object"==typeof e?Ee(function(t){return function(e,t){if("function"==typeof e)return h(e,t);if("object"!=typeof e||null===e)throw new Error("bindActionCreators expected an object or a function, instead received "+(null===e?"null":typeof e)+'. Did you write "import ActionCreators from" instead of "import * as ActionCreators from"?');var n={};for(var r in e){var o=e[r];"function"==typeof o&&(n[r]=h(o,t))}return n}(e,t)}):void 0}];var ke=[function(e){return"function"==typeof e?_e(e):void 0},function(e){return e?void 0:Ee(function(){return{}})}];function Se(e,t,n){return oe({},n,e,t)}var Ne=[function(e){return"function"==typeof e?function(e){return function(t,n){n.displayName;var r,o=n.pure,a=n.areMergedPropsEqual,i=!1;return function(t,n,u){var l=e(t,n,u);return i?o&&a(l,r)||(r=l):(i=!0,r=l),r}}}(e):void 0},function(e){return e?void 0:function(){return Se}}];function Oe(e,t,n,r){return function(o,a){return n(e(o,a),t(r,a),a)}}function Te(e,t,n,r,o){var a,i,u,l,c,s=o.areStatesEqual,f=o.areOwnPropsEqual,p=o.areStatePropsEqual,d=!1;function h(o,d){var h,m,v=!f(d,i),y=!s(o,a);return a=o,i=d,v&&y?(u=e(a,i),t.dependsOnOwnProps&&(l=t(r,i)),c=n(u,l,i)):v?(e.dependsOnOwnProps&&(u=e(a,i)),t.dependsOnOwnProps&&(l=t(r,i)),c=n(u,l,i)):y?(h=e(a,i),m=!p(h,u),u=h,m&&(c=n(u,l,i)),c):c}return function(o,s){return d?h(o,s):(u=e(a=o,i=s),l=t(r,i),c=n(u,l,i),d=!0,c)}}function Ce(e,t){var n=t.initMapStateToProps,r=t.initMapDispatchToProps,o=t.initMergeProps,a=ae(t,["initMapStateToProps","initMapDispatchToProps","initMergeProps"]),i=n(e,a),u=r(e,a),l=o(e,a);return(a.pure?Te:Oe)(i,u,l,e,a)}function Pe(e,t,n){for(var r=t.length-1;r>=0;r--){var o=t[r](e);if(o)return o}return function(t,r){throw new Error("Invalid value of type "+typeof e+" for "+n+" argument when connecting component "+r.wrappedComponentName+".")}}function je(e,t){return e===t}var Re,Ie,Ae,Ue,Me,ze,De,Le,Fe,We,Be,$e,Ve=(Ae=(Ie=void 0===Re?{}:Re).connectHOC,Ue=void 0===Ae?ve:Ae,Me=Ie.mapStateToPropsFactories,ze=void 0===Me?ke:Me,De=Ie.mapDispatchToPropsFactories,Le=void 0===De?xe:De,Fe=Ie.mergePropsFactories,We=void 0===Fe?Ne:Fe,Be=Ie.selectorFactory,$e=void 0===Be?Ce:Be,function(e,t,n,r){void 0===r&&(r={});var o=r,a=o.pure,i=void 0===a||a,u=o.areStatesEqual,l=void 0===u?je:u,c=o.areOwnPropsEqual,s=void 0===c?be:c,f=o.areStatePropsEqual,p=void 0===f?be:f,d=o.areMergedPropsEqual,h=void 0===d?be:d,m=ae(o,["pure","areStatesEqual","areOwnPropsEqual","areStatePropsEqual","areMergedPropsEqual"]),v=Pe(e,ze,"mapStateToProps"),y=Pe(t,Le,"mapDispatchToProps"),g=Pe(n,We,"mergeProps");return Ue($e,oe({methodName:"connect",getDisplayName:function(e){return"Connect("+e+")"},shouldHandleStateChanges:Boolean(e),initMapStateToProps:v,initMapDispatchToProps:y,initMergeProps:g,pure:i,areStatesEqual:l,areOwnPropsEqual:s,areStatePropsEqual:p,areMergedPropsEqual:h},m))});var qe;"undefined"!=typeof window?r.useLayoutEffect:r.useEffect;qe=a.unstable_batchedUpdates,Z=qe;var He=n(24),Ke=n.n(He),Qe=n(45),Ge=n.n(Qe),Ye=1073741823;var Ze=o.a.createContext||function(e,t){var n,o,a="__create-react-context-"+Ge()()+"__",i=function(e){function n(){var t,n,r;return(t=e.apply(this,arguments)||this).emitter=(n=t.props.value,r=[],{on:function(e){r.push(e)},off:function(e){r=r.filter(function(t){return t!==e})},get:function(){return n},set:function(e,t){n=e,r.forEach(function(e){return e(n,t)})}}),t}Ke()(n,e);var r=n.prototype;return r.getChildContext=function(){var e;return(e={})[a]=this.emitter,e},r.componentWillReceiveProps=function(e){if(this.props.value!==e.value){var n,r=this.props.value,o=e.value;((a=r)===(i=o)?0!==a||1/a==1/i:a!=a&&i!=i)?n=0:(n="function"==typeof t?t(r,o):Ye,0!==(n|=0)&&this.emitter.set(e.value,n))}var a,i},r.render=function(){return this.props.children},n}(r.Component);i.childContextTypes=((n={})[a]=G.a.object.isRequired,n);var u=function(t){function n(){var e;return(e=t.apply(this,arguments)||this).state={value:e.getValue()},e.onUpdate=function(t,n){0!=((0|e.observedBits)&n)&&e.setState({value:e.getValue()})},e}Ke()(n,t);var r=n.prototype;return r.componentWillReceiveProps=function(e){var t=e.observedBits;this.observedBits=null==t?Ye:t},r.componentDidMount=function(){this.context[a]&&this.context[a].on(this.onUpdate);var e=this.props.observedBits;this.observedBits=null==e?Ye:e},r.componentWillUnmount=function(){this.context[a]&&this.context[a].off(this.onUpdate)},r.getValue=function(){return this.context[a]?this.context[a].get():e},r.render=function(){return(e=this.props.children,Array.isArray(e)?e[0]:e)(this.state.value);var e},n}(r.Component);return u.contextTypes=((o={})[a]=G.a.object,o),{Provider:i,Consumer:u}};function Xe(e){return"/"===e.charAt(0)}function Je(e,t){for(var n=t,r=n+1,o=e.length;r<o;n+=1,r+=1)e[n]=e[r];e.pop()}var et=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",n=e&&e.split("/")||[],r=t&&t.split("/")||[],o=e&&Xe(e),a=t&&Xe(t),i=o||a;if(e&&Xe(e)?r=n:n.length&&(r.pop(),r=r.concat(n)),!r.length)return"/";var u=void 0;if(r.length){var l=r[r.length-1];u="."===l||".."===l||""===l}else u=!1;for(var c=0,s=r.length;s>=0;s--){var f=r[s];"."===f?Je(r,s):".."===f?(Je(r,s),c++):c&&(Je(r,s),c--)}if(!i)for(;c--;c)r.unshift("..");!i||""===r[0]||r[0]&&Xe(r[0])||r.unshift("");var p=r.join("/");return u&&"/"!==p.substr(-1)&&(p+="/"),p},tt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};var nt=function e(t,n){if(t===n)return!0;if(null==t||null==n)return!1;if(Array.isArray(t))return Array.isArray(n)&&t.length===n.length&&t.every(function(t,r){return e(t,n[r])});var r=void 0===t?"undefined":tt(t);if(r!==(void 0===n?"undefined":tt(n)))return!1;if("object"===r){var o=t.valueOf(),a=n.valueOf();if(o!==t||a!==n)return e(o,a);var i=Object.keys(t),u=Object.keys(n);return i.length===u.length&&i.every(function(r){return e(t[r],n[r])})}return!1},rt=!0,ot="Invariant failed";var at=function(e,t){if(!e)throw rt?new Error(ot):new Error(ot+": "+(t||""))};function it(e){return"/"===e.charAt(0)?e:"/"+e}function ut(e){return"/"===e.charAt(0)?e.substr(1):e}function lt(e,t){return function(e,t){return new RegExp("^"+t+"(\\/|\\?|#|$)","i").test(e)}(e,t)?e.substr(t.length):e}function ct(e){return"/"===e.charAt(e.length-1)?e.slice(0,-1):e}function st(e){var t=e.pathname,n=e.search,r=e.hash,o=t||"/";return n&&"?"!==n&&(o+="?"===n.charAt(0)?n:"?"+n),r&&"#"!==r&&(o+="#"===r.charAt(0)?r:"#"+r),o}function ft(e,t,n,r){var o;"string"==typeof e?(o=function(e){var t=e||"/",n="",r="",o=t.indexOf("#");-1!==o&&(r=t.substr(o),t=t.substr(0,o));var a=t.indexOf("?");return-1!==a&&(n=t.substr(a),t=t.substr(0,a)),{pathname:t,search:"?"===n?"":n,hash:"#"===r?"":r}}(e)).state=t:(void 0===(o=oe({},e)).pathname&&(o.pathname=""),o.search?"?"!==o.search.charAt(0)&&(o.search="?"+o.search):o.search="",o.hash?"#"!==o.hash.charAt(0)&&(o.hash="#"+o.hash):o.hash="",void 0!==t&&void 0===o.state&&(o.state=t));try{o.pathname=decodeURI(o.pathname)}catch(e){throw e instanceof URIError?new URIError('Pathname "'+o.pathname+'" could not be decoded. This is likely caused by an invalid percent-encoding.'):e}return n&&(o.key=n),r?o.pathname?"/"!==o.pathname.charAt(0)&&(o.pathname=et(o.pathname,r.pathname)):o.pathname=r.pathname:o.pathname||(o.pathname="/"),o}function pt(e,t){return e.pathname===t.pathname&&e.search===t.search&&e.hash===t.hash&&e.key===t.key&&nt(e.state,t.state)}function dt(){var e=null;var t=[];return{setPrompt:function(t){return e=t,function(){e===t&&(e=null)}},confirmTransitionTo:function(t,n,r,o){if(null!=e){var a="function"==typeof e?e(t,n):e;"string"==typeof a?"function"==typeof r?r(a,o):o(!0):o(!1!==a)}else o(!0)},appendListener:function(e){var n=!0;function r(){n&&e.apply(void 0,arguments)}return t.push(r),function(){n=!1,t=t.filter(function(e){return e!==r})}},notifyListeners:function(){for(var e=arguments.length,n=new Array(e),r=0;r<e;r++)n[r]=arguments[r];t.forEach(function(e){return e.apply(void 0,n)})}}}var ht=!("undefined"==typeof window||!window.document||!window.document.createElement);function mt(e,t){t(window.confirm(e))}var vt="popstate",yt="hashchange";function gt(){try{return window.history.state||{}}catch(e){return{}}}function bt(e){void 0===e&&(e={}),ht||at(!1);var t,n=window.history,r=(-1===(t=window.navigator.userAgent).indexOf("Android 2.")&&-1===t.indexOf("Android 4.0")||-1===t.indexOf("Mobile Safari")||-1!==t.indexOf("Chrome")||-1!==t.indexOf("Windows Phone"))&&window.history&&"pushState"in window.history,o=!(-1===window.navigator.userAgent.indexOf("Trident")),a=e,i=a.forceRefresh,u=void 0!==i&&i,l=a.getUserConfirmation,c=void 0===l?mt:l,s=a.keyLength,f=void 0===s?6:s,p=e.basename?ct(it(e.basename)):"";function d(e){var t=e||{},n=t.key,r=t.state,o=window.location,a=o.pathname+o.search+o.hash;return p&&(a=lt(a,p)),ft(a,r,n)}function h(){return Math.random().toString(36).substr(2,f)}var m=dt();function v(e){oe(T,e),T.length=n.length,m.notifyListeners(T.location,T.action)}function y(e){(function(e){void 0===e.state&&navigator.userAgent.indexOf("CriOS")})(e)||E(d(e.state))}function g(){E(d(gt()))}var b=!1;function E(e){if(b)b=!1,v();else{m.confirmTransitionTo(e,"POP",c,function(t){t?v({action:"POP",location:e}):function(e){var t=T.location,n=_.indexOf(t.key);-1===n&&(n=0);var r=_.indexOf(e.key);-1===r&&(r=0);var o=n-r;o&&(b=!0,k(o))}(e)})}}var w=d(gt()),_=[w.key];function x(e){return p+st(e)}function k(e){n.go(e)}var S=0;function N(e){1===(S+=e)&&1===e?(window.addEventListener(vt,y),o&&window.addEventListener(yt,g)):0===S&&(window.removeEventListener(vt,y),o&&window.removeEventListener(yt,g))}var O=!1;var T={length:n.length,action:"POP",location:w,createHref:x,push:function(e,t){var o=ft(e,t,h(),T.location);m.confirmTransitionTo(o,"PUSH",c,function(e){if(e){var t=x(o),a=o.key,i=o.state;if(r)if(n.pushState({key:a,state:i},null,t),u)window.location.href=t;else{var l=_.indexOf(T.location.key),c=_.slice(0,-1===l?0:l+1);c.push(o.key),_=c,v({action:"PUSH",location:o})}else window.location.href=t}})},replace:function(e,t){var o=ft(e,t,h(),T.location);m.confirmTransitionTo(o,"REPLACE",c,function(e){if(e){var t=x(o),a=o.key,i=o.state;if(r)if(n.replaceState({key:a,state:i},null,t),u)window.location.replace(t);else{var l=_.indexOf(T.location.key);-1!==l&&(_[l]=o.key),v({action:"REPLACE",location:o})}else window.location.replace(t)}})},go:k,goBack:function(){k(-1)},goForward:function(){k(1)},block:function(e){void 0===e&&(e=!1);var t=m.setPrompt(e);return O||(N(1),O=!0),function(){return O&&(O=!1,N(-1)),t()}},listen:function(e){var t=m.appendListener(e);return N(1),function(){N(-1),t()}}};return T}var Et="hashchange",wt={hashbang:{encodePath:function(e){return"!"===e.charAt(0)?e:"!/"+ut(e)},decodePath:function(e){return"!"===e.charAt(0)?e.substr(1):e}},noslash:{encodePath:ut,decodePath:it},slash:{encodePath:it,decodePath:it}};function _t(){var e=window.location.href,t=e.indexOf("#");return-1===t?"":e.substring(t+1)}function xt(e){var t=window.location.href.indexOf("#");window.location.replace(window.location.href.slice(0,t>=0?t:0)+"#"+e)}function kt(e){void 0===e&&(e={}),ht||at(!1);var t=window.history,n=(window.navigator.userAgent.indexOf("Firefox"),e),r=n.getUserConfirmation,o=void 0===r?mt:r,a=n.hashType,i=void 0===a?"slash":a,u=e.basename?ct(it(e.basename)):"",l=wt[i],c=l.encodePath,s=l.decodePath;function f(){var e=s(_t());return u&&(e=lt(e,u)),ft(e)}var p=dt();function d(e){oe(S,e),S.length=t.length,p.notifyListeners(S.location,S.action)}var h=!1,m=null;function v(){var e=_t(),t=c(e);if(e!==t)xt(t);else{var n=f(),r=S.location;if(!h&&pt(r,n))return;if(m===st(n))return;m=null,function(e){if(h)h=!1,d();else{p.confirmTransitionTo(e,"POP",o,function(t){t?d({action:"POP",location:e}):function(e){var t=S.location,n=E.lastIndexOf(st(t));-1===n&&(n=0);var r=E.lastIndexOf(st(e));-1===r&&(r=0);var o=n-r;o&&(h=!0,w(o))}(e)})}}(n)}}var y=_t(),g=c(y);y!==g&&xt(g);var b=f(),E=[st(b)];function w(e){t.go(e)}var _=0;function x(e){1===(_+=e)&&1===e?window.addEventListener(Et,v):0===_&&window.removeEventListener(Et,v)}var k=!1;var S={length:t.length,action:"POP",location:b,createHref:function(e){return"#"+c(u+st(e))},push:function(e,t){var n=ft(e,void 0,void 0,S.location);p.confirmTransitionTo(n,"PUSH",o,function(e){if(e){var t=st(n),r=c(u+t);if(_t()!==r){m=t,function(e){window.location.hash=e}(r);var o=E.lastIndexOf(st(S.location)),a=E.slice(0,-1===o?0:o+1);a.push(t),E=a,d({action:"PUSH",location:n})}else d()}})},replace:function(e,t){var n=ft(e,void 0,void 0,S.location);p.confirmTransitionTo(n,"REPLACE",o,function(e){if(e){var t=st(n),r=c(u+t);_t()!==r&&(m=t,xt(r));var o=E.indexOf(st(S.location));-1!==o&&(E[o]=t),d({action:"REPLACE",location:n})}})},go:w,goBack:function(){w(-1)},goForward:function(){w(1)},block:function(e){void 0===e&&(e=!1);var t=p.setPrompt(e);return k||(x(1),k=!0),function(){return k&&(k=!1,x(-1)),t()}},listen:function(e){var t=p.appendListener(e);return x(1),function(){x(-1),t()}}};return S}function St(e,t,n){return Math.min(Math.max(e,t),n)}var Nt=n(25),Ot=n.n(Nt),Tt=function(e){var t=Ze();return t.displayName=e,t}("Router"),Ct=function(e){function t(t){var n;return(n=e.call(this,t)||this).state={location:t.history.location},n._isMounted=!1,n._pendingLocation=null,t.staticContext||(n.unlisten=t.history.listen(function(e){n._isMounted?n.setState({location:e}):n._pendingLocation=e})),n}K(t,e),t.computeRootMatch=function(e){return{path:"/",url:"/",params:{},isExact:"/"===e}};var n=t.prototype;return n.componentDidMount=function(){this._isMounted=!0,this._pendingLocation&&this.setState({location:this._pendingLocation})},n.componentWillUnmount=function(){this.unlisten&&this.unlisten()},n.render=function(){return o.a.createElement(Tt.Provider,{children:this.props.children||null,value:{history:this.props.history,location:this.state.location,match:t.computeRootMatch(this.state.location.pathname),staticContext:this.props.staticContext}})},t}(o.a.Component);o.a.Component;var Pt=function(e){function t(){return e.apply(this,arguments)||this}K(t,e);var n=t.prototype;return n.componentDidMount=function(){this.props.onMount&&this.props.onMount.call(this,this)},n.componentDidUpdate=function(e){this.props.onUpdate&&this.props.onUpdate.call(this,this,e)},n.componentWillUnmount=function(){this.props.onUnmount&&this.props.onUnmount.call(this,this)},n.render=function(){return null},t}(o.a.Component);var jt={},Rt=1e4,It=0;function At(e,t){return void 0===e&&(e="/"),void 0===t&&(t={}),"/"===e?e:function(e){if(jt[e])return jt[e];var t=Ot.a.compile(e);return It<Rt&&(jt[e]=t,It++),t}(e)(t,{pretty:!0})}function Ut(e){var t=e.computedMatch,n=e.to,r=e.push,a=void 0!==r&&r;return o.a.createElement(Tt.Consumer,null,function(e){e||at(!1);var r=e.history,i=e.staticContext,u=a?r.push:r.replace,l=ft(t?"string"==typeof n?At(n,t.params):oe({},n,{pathname:At(n.pathname,t.params)}):n);return i?(u(l),null):o.a.createElement(Pt,{onMount:function(){u(l)},onUpdate:function(e,t){var n=ft(t.to);pt(n,oe({},l,{key:n.key}))||u(l)},to:n})})}var Mt={},zt=1e4,Dt=0;function Lt(e,t){void 0===t&&(t={}),"string"==typeof t&&(t={path:t});var n=t,r=n.path,o=n.exact,a=void 0!==o&&o,i=n.strict,u=void 0!==i&&i,l=n.sensitive,c=void 0!==l&&l;return[].concat(r).reduce(function(t,n){if(!n)return null;if(t)return t;var r=function(e,t){var n=""+t.end+t.strict+t.sensitive,r=Mt[n]||(Mt[n]={});if(r[e])return r[e];var o=[],a={regexp:Ot()(e,o,t),keys:o};return Dt<zt&&(r[e]=a,Dt++),a}(n,{end:a,strict:u,sensitive:c}),o=r.regexp,i=r.keys,l=o.exec(e);if(!l)return null;var s=l[0],f=l.slice(1),p=e===s;return a&&!p?null:{path:n,url:"/"===n&&""===s?"/":s,isExact:p,params:i.reduce(function(e,t,n){return e[t.name]=f[n],e},{})}},null)}var Ft=function(e){function t(){return e.apply(this,arguments)||this}return K(t,e),t.prototype.render=function(){var e=this;return o.a.createElement(Tt.Consumer,null,function(t){t||at(!1);var n=e.props.location||t.location,r=oe({},t,{location:n,match:e.props.computedMatch?e.props.computedMatch:e.props.path?Lt(n.pathname,e.props):t.match}),a=e.props,i=a.children,u=a.component,l=a.render;(Array.isArray(i)&&0===i.length&&(i=null),"function"==typeof i)&&(void 0===(i=i(r))&&(i=null));return o.a.createElement(Tt.Provider,{value:r},i&&!function(e){return 0===o.a.Children.count(e)}(i)?i:r.match?u?o.a.createElement(u,r):l?l(r):null:null)})},t}(o.a.Component);function Wt(e){return"/"===e.charAt(0)?e:"/"+e}function Bt(e,t){if(!e)return t;var n=Wt(e);return 0!==t.pathname.indexOf(n)?t:oe({},t,{pathname:t.pathname.substr(n.length)})}function $t(e){return"string"==typeof e?e:st(e)}function Vt(e){return function(){at(!1)}}function qt(){}o.a.Component;var Ht=function(e){function t(){return e.apply(this,arguments)||this}return K(t,e),t.prototype.render=function(){var e=this;return o.a.createElement(Tt.Consumer,null,function(t){t||at(!1);var n,r,a=e.props.location||t.location;return o.a.Children.forEach(e.props.children,function(e){if(null==r&&o.a.isValidElement(e)){n=e;var i=e.props.path||e.props.from;r=i?Lt(a.pathname,oe({},e.props,{path:i})):t.match}}),r?o.a.cloneElement(n,{location:a,computedMatch:r}):null})},t}(o.a.Component);function Kt(e){var t="withRouter("+(e.displayName||e.name)+")",n=function(t){var n=t.wrappedComponentRef,r=ae(t,["wrappedComponentRef"]);return o.a.createElement(Tt.Consumer,null,function(t){return t||at(!1),o.a.createElement(e,oe({},r,t,{ref:n}))})};return n.displayName=t,n.WrappedComponent=e,ue()(n,e)}o.a.Component;var Qt=function(e){function t(){for(var t,n=arguments.length,r=new Array(n),o=0;o<n;o++)r[o]=arguments[o];return(t=e.call.apply(e,[this].concat(r))||this).history=kt(t.props),t}return K(t,e),t.prototype.render=function(){return o.a.createElement(Ct,{history:this.history,children:this.props.children})},t}(o.a.Component);var Gt=function(e){function t(){return e.apply(this,arguments)||this}K(t,e);var n=t.prototype;return n.handleClick=function(e,t){try{this.props.onClick&&this.props.onClick(e)}catch(t){throw e.preventDefault(),t}e.defaultPrevented||0!==e.button||this.props.target&&"_self"!==this.props.target||function(e){return!!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)}(e)||(e.preventDefault(),(this.props.replace?t.replace:t.push)(this.props.to))},n.render=function(){var e=this,t=this.props,n=t.innerRef,r=(t.replace,t.to),a=ae(t,["innerRef","replace","to"]);return o.a.createElement(Tt.Consumer,null,function(t){t||at(!1);var i="string"==typeof r?ft(r,null,null,t.location):r,u=i?t.history.createHref(i):"";return o.a.createElement("a",oe({},a,{onClick:function(n){return e.handleClick(n,t.history)},href:u,ref:n}))})},t}(o.a.Component);var Yt=function(e){return{loggedIn:Boolean(e.session.currentUser)}},Zt=Kt(Ve(Yt)(function(e){var t=e.loggedIn,n=e.path,r=e.component;return o.a.createElement(Ft,{path:n,render:function(e){return t?o.a.createElement(Ut,{to:"/"}):o.a.createElement(r,e)}})}));Kt(Ve(Yt)(function(e){var t=e.loggedIn,n=e.path,r=e.component;return o.a.createElement(Ft,{path:n,render:function(e){return t?o.a.createElement(r,e):o.a.createElement(Ut,{to:"/login"})}})}));function Xt(e){return(Xt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Jt(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function en(e){return(en=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function tn(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function nn(e,t){return(nn=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var rn=Kt(function(e){function t(e){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),(n=function(e,t){return!t||"object"!==Xt(t)&&"function"!=typeof t?tn(e):t}(this,en(t).call(this,e))).state={email:"",password:""},n.handleSubmit=n.handleSubmit.bind(tn(n)),n}var n,r,a;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&nn(e,t)}(t,o.a.Component),n=t,(r=[{key:"handleInput",value:function(e){var t=this;return function(n){var r,o,a;t.setState((r={},o=e,a=n.target.value,o in r?Object.defineProperty(r,o,{value:a,enumerable:!0,configurable:!0,writable:!0}):r[o]=a,r))}}},{key:"handleSubmit",value:function(e){var t=this;e.preventDefault(),this.props.login({email:"demo@gmail.com",password:"password"}).then(function(){return t.props.history.push("/")})}},{key:"renderErrors",value:function(){var e=this.props.errors.map(function(e,t){return o.a.createElement("li",{className:"auth--form-error",key:t},e)});return 0===e.length?o.a.createElement("div",null):o.a.createElement("ul",{className:"auth--login--form-errors"},e)}},{key:"render",value:function(){return o.a.createElement("section",{className:"auth"},o.a.createElement("ul",{className:"auth--container"},o.a.createElement("section",{className:"auth--header"},o.a.createElement("a",{"class-name":"auth--logo",href:"#/"},o.a.createElement("img",{src:"https://66.media.tumblr.com/a1f4e385d907cf5bdc70bf919143ca2d/tumblr_pqt9m9O3uK1wyb2l8o1_100.png",height:"28",width:"95",alt:"ASOS logo"}))),o.a.createElement("section",{className:"auth--form-container"},o.a.createElement("section",{className:"auth--register"},o.a.createElement("ul",{className:"auth--register--options"},o.a.createElement("a",{href:"#/signup",className:"auth--register--not-selected-left"},"NEW TO ASOS?"),o.a.createElement("p",{className:"auth--register--selected-right"},"ALREADY REGISTERED?"))),o.a.createElement("main",{className:"auth--form--main"},o.a.createElement("h2",{className:"auth--title"},"SIGN IN WITH EMAIL"),o.a.createElement("form",{className:"auth--login-form"},this.renderErrors(),o.a.createElement("label",{className:"auth--form-label"},"EMAIL ADDRESS:",o.a.createElement("input",{className:"auth--form-input",type:"text",value:this.state.email,onChange:this.handleInput("email")})),o.a.createElement("label",{className:"auth--form-label"},"PASSWORD",o.a.createElement("input",{className:"auth--form-input-password",type:"password:",value:this.state.password,onChange:this.handleInput("password")})),o.a.createElement("button",{className:"auth--button",onClick:this.handleSubmit},"Demo"))))))}}])&&Jt(n.prototype,r),a&&Jt(n,a),t}()),on=Ve(function(e){return{errors:e.errors.session,formType:"login"}},function(e){return{login:function(t){return e(k(t))},clearErrors:function(){return e(x)}}})(rn);function an(e){return(an="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function un(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function ln(e){return(ln=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function cn(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function sn(e,t){return(sn=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var fn=Kt(function(e){function t(e){var n;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),n=function(e,t){return!t||"object"!==an(t)&&"function"!=typeof t?cn(e):t}(this,ln(t).call(this,e));var r=new Date;return n.state={email:"",password:"",first_name:"",last_name:"",date_of_birth:r,gender:"Female",country:"United States",email_lists:[]},n.handleSubmit=n.handleSubmit.bind(cn(n)),n}var n,r,a;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&sn(e,t)}(t,o.a.Component),n=t,(r=[{key:"handleInput",value:function(e){var t=this;return function(n){var r,o,a;t.setState((r={},o=e,a=n.target.value,o in r?Object.defineProperty(r,o,{value:a,enumerable:!0,configurable:!0,writable:!0}):r[o]=a,r))}}},{key:"handleSubmit",value:function(e){var t=this;e.preventDefault(),this.props.createNewUser(this.state).then(function(){return t.props.history.push("/")})}},{key:"renderErrors",value:function(e){var t=this.props.errors[e];if(void 0!==t)return t=t.map(function(e,t){return o.a.createElement("li",{className:"auth--form-error",key:t},e)}),o.a.createElement("ul",{className:"auth--form-errors"},t,o.a.createElement("div",{className:"arrow-down"}),o.a.createElement("div",{className:"arrow-down-2"}))}},{key:"render",value:function(){return o.a.createElement("section",{className:"auth"},o.a.createElement("ul",{className:"auth--container"},o.a.createElement("section",{className:"auth--header"},o.a.createElement("a",{"class-name":"auth--logo",href:"#/"},o.a.createElement("img",{src:"https://66.media.tumblr.com/a1f4e385d907cf5bdc70bf919143ca2d/tumblr_pqt9m9O3uK1wyb2l8o1_100.png",height:"28",width:"95",alt:"ASOS logo"}))),o.a.createElement("section",{className:"auth--form-container"},o.a.createElement("section",{className:"auth--register"},o.a.createElement("ul",{className:"auth--register--options"},o.a.createElement("p",{className:"auth--register--selected-left"},"NEW TO ASOS?"),o.a.createElement("a",{href:"#/login",className:"auth--register--not-selected-right"},"ALREADY REGISTERED?"))),o.a.createElement("h2",{className:"auth--title"},"SIGN UP USING YOUR EMAIL ADDRESS"),o.a.createElement("main",{className:"auth--form--main--sign-up"},o.a.createElement("form",{class:"auth--signup-form"},o.a.createElement("label",{className:"auth--form-label"},"EMAIL ADDRESS:",this.renderErrors("email"),o.a.createElement("input",{className:"auth--form-input",type:"text",value:this.state.email,onChange:this.handleInput("email")})),o.a.createElement("label",{className:"auth--form-label"},"FIRST NAME:",this.renderErrors("first_name"),o.a.createElement("input",{className:"auth--form-input",type:"text",value:this.state.first_name,onChange:this.handleInput("first_name")})),o.a.createElement("label",{className:"auth--form-label"},"LAST NAME:",this.renderErrors("last_name"),o.a.createElement("input",{className:"auth--form-input",type:"text",value:this.state.last_name,onChange:this.handleInput("last_name")})),o.a.createElement("label",{className:"auth--form-label"},"PASSWORD:",this.renderErrors("password"),o.a.createElement("input",{className:"auth--form-input-password",type:"password",value:this.state.password,onChange:this.handleInput("password")}))),o.a.createElement("button",{className:"auth--button",onClick:this.handleSubmit},"JOIN ASOS")))))}}])&&un(n.prototype,r),a&&un(n,a),t}()),pn=Ve(function(e){return{formType:"signup",errors:e.errors.signup}},function(e){return{createNewUser:function(t){return e(B(t))}}})(fn),dn=function(){return o.a.createElement("ul",{className:"footer--icon-bar"},o.a.createElement("li",{className:"footer--icon-bar--social"},o.a.createElement("img",{className:"social-icon",src:"https://66.media.tumblr.com/0b59e1312ae799a1c73deb04cc3708b8/tumblr_pqta9kzoNK1wyb2l8o1_250.png"}),o.a.createElement("img",{className:"social-icon",src:"https://66.media.tumblr.com/9796c1b33f6bd8a92b47a71f6f5a3ccb/tumblr_pqta9kzoNK1wyb2l8o2_250.png"}),o.a.createElement("img",{className:"social-icon",src:"https://66.media.tumblr.com/03f2bc232fc3ffd7da2795e049680acb/tumblr_pqta9kzoNK1wyb2l8o3_250.png"})),o.a.createElement("li",{className:"footer--icon-bar--payment"},o.a.createElement("img",{className:"payment-icon",src:"https://images.asos-media.com/navigation/visa-png",alt:"visa"}),o.a.createElement("img",{className:"payment-icon",src:"https://images.asos-media.com/navigation/mastercard-png",alt:"mastercard"}),o.a.createElement("img",{className:"payment-icon",src:"https://images.asos-media.com/navigation/pay-pal-png",alt:"paypal"}),o.a.createElement("img",{className:"payment-icon",src:"https://images.asos-media.com/navigation/american-express-png",alt:"americanexpress"}),o.a.createElement("img",{className:"payment-icon",src:"https://images.asos-media.com/navigation/visa-electron-png",alt:"visaelectron"}),o.a.createElement("img",{className:"payment-icon",src:"https://images.asos-media.com/navigation/apple-pay-png",alt:"applepay"})))};var hn=function(){return o.a.createElement("section",{className:"footer--nav-links"},o.a.createElement("ul",{className:"footer--nav-links--col"},o.a.createElement("h4",{className:"footer--nav-links--title"},"HELP AND INFORMATION"),o.a.createElement("li",{className:"footer--nav-links--item"},"Help"),o.a.createElement("li",{className:"footer--nav-links--item"},"Track Order"),o.a.createElement("li",{className:"footer--nav-links--item"},"Delivery & Returns"),o.a.createElement("li",{className:"footer--nav-links--item"},"Premier Delivery"),o.a.createElement("li",{className:"footer--nav-links--item"},"10% Student Discount")),o.a.createElement("ul",{className:"footer--nav-links--col"},o.a.createElement("h4",{className:"footer--nav-links--title"},"ABOUT ASOS"),o.a.createElement("li",{className:"footer--nav-links--item"},"About Us"),o.a.createElement("li",{className:"footer--nav-links--item"},"Careers at ASOS"),o.a.createElement("li",{className:"footer--nav-links--item"},"Corporate Responsibility"),o.a.createElement("li",{className:"footer--nav-links--item"},"Investors Site")),o.a.createElement("ul",{className:"footer--nav-links--col"},o.a.createElement("h4",{className:"footer--nav-links--title"},"MORE FROM ASOS"),o.a.createElement("li",{className:"footer--nav-links--item"},"E-gift cards"),o.a.createElement("li",{className:"footer--nav-links--item"},"Mobile and ASOS Apps"),o.a.createElement("li",{className:"footer--nav-links--item"},"ASOS Marketplace")),o.a.createElement("ul",{className:"footer--nav-links--col"},o.a.createElement("h4",{className:"footer--nav-links--title"},"SHOPPING FROM:"),o.a.createElement("li",{className:"footer--nav-links--shipping"},o.a.createElement("span",{className:"footer--nav-links--shipping-country"},"You're in"),o.a.createElement("img",(n="United States",(t="alt")in(e={className:"shipping-icon",alt:"United States",src:"https://assets.asosservices.com/storesa/images/flags/us.png"})?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e)),o.a.createElement("span",{className:"footer--nav-links--shipping-change"},"| CHANGE"))));var e,t,n},mn=function(){return o.a.createElement("section",{className:"footer--ecom"},o.a.createElement("p",{className:"footer--ecom-copy"},"© 2019 ASOS"),o.a.createElement("ul",{className:"footer--ecom--terms"},o.a.createElement("li",{className:"footer--ecom--terms-item"},"Privacy & Cookies"),o.a.createElement("li",{className:"footer--ecom--terms-item"},"Ts&Cs"),o.a.createElement("li",{className:"footer--ecom--terms-item"},"Accessibility")))},vn=function(){return o.a.createElement("div",{className:"footer"},o.a.createElement(dn,null),o.a.createElement(hn,null),o.a.createElement(mn,null))},yn=function(){return o.a.createElement("div",{className:"home--banner"},o.a.createElement("div",{className:"home--banner-bar"},o.a.createElement("p",{className:"home--banner-bar--item"},"WOMEN"),o.a.createElement("span",{className:"home--banner-bar-item"},o.a.createElement("b",{className:"home--banner-bar-item"},o.a.createElement("strong",null,"SPEND MORE. SAVE MORE.")),o.a.createElement("b",{className:"home--banner-bar-item"},o.a.createElement("strong",null,"$200 get $50, $250 get $70, $350 get $100."))),o.a.createElement("p",{className:"home--banner-bar--item"},"MEN")),o.a.createElement("a",{href:""},o.a.createElement("img",{className:"home--banner-img",alt:"",src:"https://66.media.tumblr.com/406d7ef67095e7c0f71ec731d99b220c/tumblr_pqt6uwiL6G1wyb2l8o1_1280.gif"})))},gn=function(){return o.a.createElement("section",{className:"home--feature"},o.a.createElement("a",{href:"",className:"home--feature-img"},o.a.createElement("img",{alt:"",src:"https://content.asos-media.com/-/media/homepages/ww/2019/04/29/gbl-utility-surf-hero.jpg"})),o.a.createElement("section",{className:"home--feature--buttons"},o.a.createElement("a",{href:"",className:"home--large-feature-title"},"Surfer vibes"),o.a.createElement("a",{href:"",className:"general-btn"},"SHOP NOW")),o.a.createElement("ul",{className:"home--double--feature"},o.a.createElement("li",{className:"home--double-feature--item"},o.a.createElement("a",{href:""},o.a.createElement("img",{id:"home--double-feature--item--img",alt:"",src:"https://66.media.tumblr.com/8ec52eef708032a1eeefe1c7fa67154e/tumblr_pqt7mrVxZW1wyb2l8o2_1280.jpg"})),o.a.createElement("h3",{className:"double-feature--item--title"},"Festival"),o.a.createElement("p",{className:"double-feature--item--body"},"Be centre stage"),o.a.createElement("a",{href:"",className:"general-btn"},"SHOP NOW")),o.a.createElement("li",{className:"home--double-feature--item"},o.a.createElement("a",{href:""},o.a.createElement("img",{alt:"",id:"home--double-feature--item--img",src:"https://66.media.tumblr.com/bfa10e4c7c2d6d97b0436c732cbb2c00/tumblr_pqt7mrVxZW1wyb2l8o1_540.jpg"})),o.a.createElement("h3",{className:"double-feature--item--title"},"Sandals"),o.a.createElement("p",{className:"double-feature--item--body"},"Fresh styles for warm climates"),o.a.createElement("a",{href:"",className:"general-btn"},"SHOP NOW"))),o.a.createElement("div",{className:"home--feature-banner"},o.a.createElement("a",{href:""})))},bn=function(){return o.a.createElement("section",{className:"home--style-feed"},o.a.createElement("h2",{className:"home--style-feed--title"},"STYLE FEED"),o.a.createElement("p",{className:"home--style-feed--body"},"Outfit ideas, editor picks, styling inspiration and Face + Body tips"),o.a.createElement("section",{className:"home--style-feed-carousel"},o.a.createElement("section",{className:"home--carousel-controls"},o.a.createElement("button",{className:"prev-btn"}),o.a.createElement("button",{className:"next-btn"})),o.a.createElement("ul",{className:"home--carousel-list"},o.a.createElement("li",{className:"home--style-feed-carousel--item"},o.a.createElement("a",{href:""},o.a.createElement("img",{className:"home--style-feed-carousel--img",alt:"",src:"https://66.media.tumblr.com/1befbe60f6baf4c2bcdb7b27efb4c720/tumblr_pqt6uwiL6G1wyb2l8o10_400.jpg"}),o.a.createElement("div",{className:"style-feed-carousel-content"},o.a.createElement("h3",{className:"home--style-feed-carousel--title"},"WHAT TO WEAR TO A DESTINATION WEDDING"),o.a.createElement("p",{className:"home--style-feed-carousel--body"},"Be best-dressed guest"),o.a.createElement("p",{className:"home--style-feed-carousel--date"},"April 25, 2019")))),o.a.createElement("li",{className:"home--style-feed-carousel--item"},o.a.createElement("a",{href:""},o.a.createElement("img",{className:"home--style-feed-carousel--img",alt:"",src:"https://66.media.tumblr.com/1b5f04ef58b7367ee5ba92969547e7bc/tumblr_pqt81iVKhd1wyb2l8o1_400.jpg"}),o.a.createElement("div",{className:"style-feed-carousel-content"},o.a.createElement("h3",{className:"home--style-feed-carousel--title"},"BEST OF NEW IN: PINK & PATCHWORK"),o.a.createElement("p",{className:"home--style-feed-carousel--body"},"The fashion team have spoken"),o.a.createElement("p",{className:"home--style-feed-carousel--date"},"April 27, 2019")))),o.a.createElement("li",{className:"home--style-feed-carousel--item"},o.a.createElement("a",{href:""},o.a.createElement("img",{className:"home--style-feed-carousel--img",alt:"",src:"https://66.media.tumblr.com/d3be3c801032ae3f2ff4debfde6900ff/tumblr_pqt84mKP4N1wyb2l8o1_400.jpg"}),o.a.createElement("div",{className:"style-feed-carousel-content"},o.a.createElement("h3",{className:"home--style-feed-carousel--title"},"THE ASOS + LIFE IS BEAUTIFUL COLLECTION IS HERE"),o.a.createElement("p",{className:"home--style-feed-carousel--body"},"Get festival fresh"),o.a.createElement("p",{className:"home--style-feed-carousel--date"},"April 26, 2019")))),o.a.createElement("li",{className:"home--style-feed-carousel--item"},o.a.createElement("a",{href:""},o.a.createElement("img",{className:"home--style-feed-carousel--img",alt:"",src:"https://66.media.tumblr.com/74df3ad7ab0196f75f21e44c0ade47bd/tumblr_pqt6uwiL6G1wyb2l8o8_400.jpg"}),o.a.createElement("div",{className:"style-feed-carousel-content"},o.a.createElement("h3",{className:"home--style-feed-carousel--title"},"5 OF THE MOST EXTRA ADD-ONS"),o.a.createElement("p",{className:"home--style-feed-carousel--body"},"It's all in the details"),o.a.createElement("p",{className:"home--style-feed-carousel--date"},"April 25, 2019")))),o.a.createElement("li",{className:"home--style-feed-carousel--item"},o.a.createElement("a",{href:"",className:"btn--view-all"},o.a.createElement("span",{className:"home-style-feed-carousel-view-btn"},"VIEW ALL")))),o.a.createElement("a",{href:"",className:"general-btn"},"VIEW ALL")))},En=function(){return o.a.createElement("section",{className:"home--feature"},o.a.createElement("ul",{className:"home--double--feature"},o.a.createElement("div",{className:"margin-25"},o.a.createElement("li",{className:"home--double-feature--item"},o.a.createElement("a",{href:""},o.a.createElement("img",{className:"home--double-feature--img",alt:"",src:"https://66.media.tumblr.com/89ac10d7a313e5f8b6bc3d3d6a0cbd13/tumblr_pqt6uwiL6G1wyb2l8o5_400.jpg"})),o.a.createElement("h3",{className:"home--double-feature--item-title"},"SWIM WINS"),o.a.createElement("p",{className:"home--double-feature--item-body"},"Be a one-piece wonder"),o.a.createElement("a",{href:"",className:"general-btn"},"SHOP NOW"))),o.a.createElement("div",{className:"margin-25"},o.a.createElement("li",{className:"home--double-feature--item"},o.a.createElement("a",{href:""},o.a.createElement("img",{className:"home--double-feature--img",alt:"",src:"https://66.media.tumblr.com/ba92984adf698db7d303acb9d9407542/tumblr_pqwc89O6G91wyb2l8o1_500.png"})),o.a.createElement("h3",{className:"home--double-feature--item-title"},"OCCASIONWEAR"),o.a.createElement("p",{className:"home--double-feature--item-body"},"Be iconic"),o.a.createElement("a",{href:"",className:"general-btn"},"SHOP NOW")))))},wn=function(){return o.a.createElement("section",{className:"home--category-carousel"},o.a.createElement("h2",{className:"home--category-carousel--title"},"SHOP BY CATEGORY"),o.a.createElement("section",{className:"home--carousel-controls"},o.a.createElement("button",{className:"prev-btn"}),o.a.createElement("button",{className:"next-btn"})),o.a.createElement("ul",{className:"home--carousel-list"},o.a.createElement("li",{className:"home--category-carousel--item"},o.a.createElement("a",{href:""},o.a.createElement("img",{className:"home--category-carousel--item--img",alt:"",src:"https://66.media.tumblr.com/fb98a108678d783456b8cbc0348c0218/tumblr_pqt8zg7Ptn1wyb2l8o4_250.jpg"}),o.a.createElement("p",{className:"home--category-carousel--item--title"},"DRESSES"))),o.a.createElement("li",{className:"home--category-carousel--item"},o.a.createElement("a",{href:""},o.a.createElement("img",{className:"home--category-carousel--item--img",alt:"",src:"https://66.media.tumblr.com/b6c6b2e0d89b61ba51250fb286509ddd/tumblr_pqt8zg7Ptn1wyb2l8o2_250.jpg"}),o.a.createElement("p",{className:"home--category-carousel--item--title"},"SHOES"))),o.a.createElement("li",{className:"home--category-carousel--item"},o.a.createElement("a",{href:""},o.a.createElement("img",{className:"home--category-carousel--item--img",alt:"",src:"https://66.media.tumblr.com/d371209ec9e6320a26bf35c6c5be6857/tumblr_pqt8zg7Ptn1wyb2l8o8_250.jpg"}),o.a.createElement("p",{className:"home--category-carousel--item--title"},"TOPS"))),o.a.createElement("li",{className:"home--category-carousel--item"},o.a.createElement("a",{href:""},o.a.createElement("img",{className:"home--category-carousel--item--img",alt:"",src:"https://66.media.tumblr.com/ccd7f6ebd80b76b344aa33d06264715a/tumblr_pqt8zg7Ptn1wyb2l8o9_250.jpg"}),o.a.createElement("p",{className:"home--category-carousel--item--title"},"SKIRTS"))),o.a.createElement("li",{className:"home--category-carousel--item"},o.a.createElement("a",{href:""},o.a.createElement("img",{className:"home--category-carousel--item--img",alt:"",src:"https://66.media.tumblr.com/c89d097f46189e86a0e6528c9dcc7134/tumblr_pqt8zg7Ptn1wyb2l8o5_250.jpg"}),o.a.createElement("p",{className:"home--category-carousel--item--title"},"SWIMWEAR"))),o.a.createElement("li",{className:"home--category-carousel--item"},o.a.createElement("a",{href:""},o.a.createElement("img",{className:"home--category-carousel--item--img",alt:"",src:"https://66.media.tumblr.com/059dc3f6d3e11ef4fd6638a9225b959e/tumblr_pqt8zg7Ptn1wyb2l8o6_250.jpg"}),o.a.createElement("p",{className:"home--category-carousel--item--title"},"MATERNITY"))),o.a.createElement("li",{className:"home--category-carousel--item"},o.a.createElement("a",{href:""},o.a.createElement("img",{className:"home--category-carousel--item--img",alt:"",src:"https://66.media.tumblr.com/e45cfe5f981c0e51b00c867838fd5204/tumblr_pqt8zg7Ptn1wyb2l8o7_250.jpg"}),o.a.createElement("p",{className:"home--category-carousel--item--title"},"PETITE"))),o.a.createElement("li",{className:"home--category-carousel--item"},o.a.createElement("a",{href:""},o.a.createElement("img",{className:"home--category-carousel--item--img",alt:"",src:"https://66.media.tumblr.com/d8614815c01648217286faad2aa57971/tumblr_pqt8zg7Ptn1wyb2l8o3_250.jpg"}),o.a.createElement("p",{className:"home--category-carousel--item--title"},"TALL")))),o.a.createElement("section",{className:"home--banner"},o.a.createElement("a",{href:""},o.a.createElement("img",{className:"home--banner--img",alt:"",src:"https://66.media.tumblr.com/36b2bd39dcca9dcfcea356279b12db62/tumblr_pqt9a34ys41wyb2l8o1_1280.jpg"}))))},_n=function(){return o.a.createElement("div",{className:"home"},o.a.createElement(yn,null),o.a.createElement(gn,null),o.a.createElement(bn,null),o.a.createElement(En,null),o.a.createElement(wn,null))},xn=function(){return o.a.createElement("section",{className:"ecom-bar"},o.a.createElement("ul",{className:"ecom--list"},o.a.createElement("li",{className:"ecom-list--item"},"Marketplace"),o.a.createElement("li",{className:"ecom-list--item"},"Help & FAQs"),o.a.createElement("li",{className:"ecom-list--item-img"},o.a.createElement("img",{className:"shipping--icon",src:"https://assets.asosservices.com/storesa/images/flags/us.png",alt:"United States"}))))};function kn(e){return(kn="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Sn(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Nn(e,t){return!t||"object"!==kn(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function On(e){return(On=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function Tn(e,t){return(Tn=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var Cn=function(e){function t(e){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),Nn(this,On(t).call(this,e))}var n,r,a;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Tn(e,t)}(t,o.a.Component),n=t,(r=[{key:"render",value:function(){var e=this.props.currentUser?o.a.createElement("section",{className:"account-dropdown"},o.a.createElement("ul",{className:"account-dropdown--auth"},o.a.createElement("p",{className:"account-dropdown--auth--user"},"Hello ".concat(this.props.currentUser.first_name)),o.a.createElement("button",{className:"account-dropdown--auth--logout",onClick:this.props.logout},"Log Out!")),o.a.createElement("ul",{className:"account-dropdown--options"},o.a.createElement("p",{"class-name":"account-dropdown--option"},"My Account"),o.a.createElement("a",{href:"#/orders/".concat(this.props.orders.id)},o.a.createElement("p",{"class-name":"account-dropdown--option"},"My Orders")),o.a.createElement("p",{"class-name":"account-dropdown--option"},"Returns Information"),o.a.createElement("p",{"class-name":"account-dropdown--option"},"Contact Preferences"))):o.a.createElement("section",{className:"account-dropdown"},o.a.createElement("ul",{className:"account-dropdown--auth"},o.a.createElement("p",{className:"account-dropdown--auth--auth-links"},o.a.createElement(Gt,{to:"/signup"},"Sign Up")),o.a.createElement("p",{className:"account-dropdown--auth--auth-links"},o.a.createElement(Gt,{to:"/login"},"Log In"))),o.a.createElement("ul",{className:"account-dropdown--options"},o.a.createElement("p",{className:"account-dropdown--option"},"My Account"),o.a.createElement("p",{className:"account-dropdown--option"},"My Orders"),o.a.createElement("p",{className:"account-dropdown--option"},"Returns Information"),o.a.createElement("p",{className:"account-dropdown--option"},"Contact Preferences")));return o.a.createElement("section",{className:"toolbar"},o.a.createElement("ul",{className:"toolbar--business"},o.a.createElement("a",{"class-name":"auth--logo",href:"#/"},o.a.createElement("svg",{className:"toolbar--business--logo",width:"104",height:"30",viewBox:"0 0 104 30",role:"img","aria-labelledby":"home-logo"},o.a.createElement("title",{id:"home-logo"},"ASOS logo, back to the Home Page"),o.a.createElement("path",{fill:"#FFF",fillRule:"evenodd",d:"M71.83 21.983c-1.558 1.666-3.56 2.51-5.95 2.51-2.387 0-4.39-.844-5.947-2.51-1.488-1.587-2.343-4.124-2.343-6.96 0-2.766.864-5.27 2.37-6.867 1.572-1.667 3.565-2.516 5.92-2.523 2.36.007 4.35.856 5.924 2.523 1.506 1.598 2.37 4.1 2.37 6.867 0 2.836-.855 5.373-2.343 6.96zm-20.915-6.96c0 .128.005.255.008.38-2.39-2.166-5.845-2.974-7.957-3.394-3.907-.82-6.89-1.58-6.89-4.35 0-1.96 1.757-3.38 5.132-3.14 3.085.224 4.384 2.102 4.74 3.914.05.3.19.515.53.517l5.547.05c.026 0 .048-.003.072-.004-.783 1.816-1.182 3.84-1.182 6.015zM41.48 25.19c-2.683 0-5.64-.95-6.32-4.624-.06-.35-.225-.496-.495-.503l-5.364-.07v-9.446c.71 2.768 3.04 4.684 8.09 5.816 3.38.806 9.24 1.318 9.24 4.774 0 2.408-1.78 4.11-5.15 4.054zm-26.714-.69c-4.327 0-8.29-3.394-8.29-9.47 0-4.77 2.97-9.39 8.32-9.39 2.315 0 8.188.79 8.188 9.39 0 8.62-6.132 9.47-8.218 9.47zm65.922-11.792c1.232 1.636 3.453 2.848 7.063 3.657 3.38.805 9.25 1.318 9.25 4.775 0 2.403-1.78 4.11-5.15 4.05-2.68 0-5.64-.95-6.32-4.625-.052-.35-.22-.497-.49-.504L80.06 20c.523-1.54.79-3.21.79-4.974 0-.793-.056-1.566-.16-2.317zM91.474 30c5.95 0 12.965-2.208 12.416-9.366-.606-6.355-7.244-7.964-10.562-8.625-3.907-.82-6.892-1.58-6.892-4.35 0-1.96 1.758-3.38 5.134-3.14 3.084.224 4.384 2.102 4.74 3.914.05.3.19.515.53.517l5.546.048c.422.002.554-.216.5-.516C101.8 1.874 96.246 0 91.133 0 86.03 0 79.88 1.43 79.443 7.754c-.015.246-.02.486-.02.722-.814-1.683-1.985-3.23-3.495-4.597C73.142 1.37 69.666.03 65.878 0h-.127c-1.81 0-3.58.333-5.26.99a15.26 15.26 0 0 0-4.65 2.888c-1.43 1.295-2.56 2.747-3.36 4.327C51.27 1.822 45.81 0 40.77 0 36.084 0 30.517 1.208 29.3 6.305v-5.06a.49.49 0 0 0-.49-.488h-5.224c-.27 0-.49.22-.49.49V2.61c0 .23-.155.31-.343.175-1.858-1.34-4.607-2.782-7.915-2.782-1.86 0-3.635.326-5.277.968-1.64.65-3.2 1.63-4.64 2.92C3.29 5.37 2.05 7.05 1.23 8.9.417 10.742 0 12.807 0 15.027 0 17.1.367 19.043 1.088 20.8c.722 1.756 1.82 3.382 3.267 4.83 1.446 1.45 3.063 2.553 4.804 3.276 1.74.722 3.66 1.09 5.7 1.09 3.51 0 6.15-1.493 7.88-2.85.19-.144.342-.067.342.17v1.435c0 .27.22.49.49.49H28.8c.27 0 .49-.22.49-.49v-4.83C31.766 29.7 38.04 30 41.113 30c5.137 0 11.06-1.647 12.234-6.7.55.818 1.192 1.597 1.924 2.33 2.8 2.807 6.47 4.316 10.62 4.362h.17c1.97 0 3.87-.377 5.648-1.12a14.82 14.82 0 0 0 4.79-3.242 15.25 15.25 0 0 0 2.594-3.43c1.86 7.438 9.035 7.8 12.387 7.8z"}))),o.a.createElement("li",{className:"toolbar--busienss--item"},"WOMEN"),o.a.createElement("li",{className:"toolbar--busienss--item"},"MEN")),o.a.createElement("form",{className:"toolbar--search"}),o.a.createElement("ul",{className:"toolbar--profile"},o.a.createElement("li",{className:"toolbar--profile--icons"},o.a.createElement("button",{className:"toolbar--profile--icons--icon",onClick:this.showMenu},o.a.createElement("i",{className:"fa fa-user",id:"account-dropdown-button"})),o.a.createElement("i",{className:"fa fa-heart","aria-hidden":"true"}),o.a.createElement("i",{className:"fa fa-shopping-bag","aria-hidden":"true"}),o.a.createElement("p",null,this.props.orderItems.length)),e))}}])&&Sn(n.prototype,r),a&&Sn(n,a),t}(),Pn=Ve(function(e){return{currentUser:e.session.currentUser,orders:e.entities.orders,orderItems:e.entities.orderItems}},function(e){return{logout:function(){return e(S())}}})(Cn),jn=function(){return o.a.createElement("section",{className:"category-bar"},o.a.createElement("ul",{className:"category-bar--options"},o.a.createElement("a",{"class-name":"",href:"#/products"},o.a.createElement("li",{className:"category-bar--option"},"New In")),o.a.createElement("a",{"class-name":"",href:"#/products"},o.a.createElement("li",{className:"category-bar--option"},"Clothing")),o.a.createElement("li",{className:"category-bar--option"},"Shoes"),o.a.createElement("li",{className:"category-bar--option"},"Accessories"),o.a.createElement("li",{className:"category-bar--option"},"Activewear"),o.a.createElement("li",{className:"category-bar--option"},"Beauty"),o.a.createElement("li",{className:"category-bar--option"},"Brands"),o.a.createElement("li",{className:"category-bar--feature"},o.a.createElement("p",null,"Outlet")),o.a.createElement("li",{className:"category-bar--option"},"Marketplace"),o.a.createElement("li",{className:"category-bar--option"},"Inspiration")))},Rn=Ve(function(e){return{currentUser:e.session.currentUser}},function(e){return{logout:function(){return e(S())}}})(function(){return o.a.createElement("section",{className:"nav-bar"},o.a.createElement(xn,null),o.a.createElement(Pn,null),o.a.createElement(jn,null))}),In=function(e){var t=e.product,n=new Intl.NumberFormat("en-US",{style:"currency",currency:"USD",minimumFractionDigits:2});return o.a.createElement(Gt,{to:"/products/".concat(t.id)},o.a.createElement("li",{className:"listings--product"},o.a.createElement("img",{className:"listings--product-img",src:t.photoUrls[0],alt:""}),o.a.createElement("p",{className:"listings--product-title"},t.title),o.a.createElement("p",{className:"listings--product-price"},n.format(t.price))))};function An(e){return(An="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Un(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Mn(e,t){return!t||"object"!==An(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function zn(e){return(zn=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function Dn(e,t){return(Dn=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var Ln=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),Mn(this,zn(t).apply(this,arguments))}var n,r,a;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Dn(e,t)}(t,o.a.Component),n=t,(r=[{key:"componentDidMount",value:function(){this.props.requestProducts()}},{key:"render",value:function(){var e=this.props.products.map(function(e){return o.a.createElement(In,{key:e.id,product:e})});return o.a.createElement("section",{className:"listings"},o.a.createElement("section",{className:"listings--category-banner"},o.a.createElement("h2",{className:"listings--category-banner--text"},"breadcrumb last item")),o.a.createElement("section",{className:"listings--wrapper"},o.a.createElement("section",{className:"listings--filters-wrapper"},o.a.createElement("ul",{className:"listings--filters"},o.a.createElement("ul",{className:"listings--filter--item"},o.a.createElement("li",{className:"listings--filters--item--options"})))),o.a.createElement("section",{className:"listings--wrapper--grid-wrapper"},o.a.createElement("section",{className:"listings--count"},o.a.createElement("h3",null,"this is a style count holder")),o.a.createElement("ul",{className:"listings--products"},e),o.a.createElement("section",{className:"listings--viewed"},o.a.createElement("h3",null,"this is a viewed count holder")),o.a.createElement("section",{className:"listings--load-more"},o.a.createElement("h3",null,"load more")))))}}])&&Un(n.prototype,r),a&&Un(n,a),t}(),Fn=Ve(function(e){var t=e.entities;return{products:Object.values(t.products)}},function(e){return{requestProducts:function(){return e(O())}}})(Ln),Wn=function(e){for(var t=e.entities,n=Object.values(t.productItems),r={},o=0;o<n.length;o++){var a=n["".concat(o)].size;void 0===r["".concat(o)]&&(r["".concat(a)]=0),"Available"===n["".concat(o)].state&&(r["".concat(a)]+=1)}return r},Bn=function(e){var t=e.entities,n=Object.values(t.orderItems),r=0;if(n.length>0)for(var o=0;o<n.length;o++){r+=parseInt(n["".concat(o)].unitPrice)}return r};function $n(e){return($n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Vn(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function qn(e){return(qn=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function Hn(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function Kn(e,t){return(Kn=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var Qn=function(e){function t(e){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),(n=function(e,t){return!t||"object"!==$n(t)&&"function"!=typeof t?Hn(e):t}(this,qn(t).call(this,e))).state={productId:n.props.match.params.productId,size:""},n.handleSubmit=n.handleSubmit.bind(Hn(n)),n}var n,r,a;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Kn(e,t)}(t,o.a.Component),n=t,(r=[{key:"componentDidMount",value:function(){var e=this.props.match.params.productId;this.props.requestProduct(e)}},{key:"handleInput",value:function(e){var t=this;return function(n){var r,o,a;t.setState((r={},o=e,a=n.target.value,o in r?Object.defineProperty(r,o,{value:a,enumerable:!0,configurable:!0,writable:!0}):r[o]=a,r))}}},{key:"handleSubmit",value:function(e){e.preventDefault();var t=function(e,t){var n=Object.values(e).filter(function(e){return e.size===t&&"Available"===e.state});return n.length>0?parseInt(n[0].id):void 0}(this.props.productItems,this.state.size),n={id:t,product_id:this.state.productId,size:this.state.size,state:"pending_order"},r={product_item_id:t,order_id:parseInt(this.props.orders.id)},o=this.props.currentUser;this.props.createOrderItem(o,r),this.props.updateProductItem(n)}},{key:"render",value:function(){console.log("rendering");var e=this.props.product;if(void 0===e)return null;var t=new Intl.NumberFormat("en-US",{style:"currency",currency:"USD",minimumFractionDigits:2}),n=this.props.selectedSizes.map(function(e){return e[1]>0?o.a.createElement("option",{key:e,className:"size--available"},e[0]):o.a.createElement("option",{key:e,className:"size--not-available",disabled:!0},e[0])}),r=o.a.createElement("section",{className:"product-show--photos-wrapper"},o.a.createElement("section",{className:"product-show--photos-aside-wrapper"},o.a.createElement("ul",{className:"product-show--aside--photos"},o.a.createElement("li",{className:"product-show--photos--item"},o.a.createElement("img",{className:"listings--product--show--img",src:e.photoUrls[0],alt:""})),o.a.createElement("li",{className:"product-show--photos--item"},o.a.createElement("img",{className:"listings--product--show--img",src:e.photoUrls[1],alt:""}))),o.a.createElement("img",{className:"product-show--photos--social"})),o.a.createElement("section",{className:"product-show--photo-carousel-wrapper"},o.a.createElement("img",{className:"product-show--photo-carousel--product-img",src:e.photoUrls[0],alt:""}),o.a.createElement("button",{className:"prev-btn"}),o.a.createElement("button",{className:"prev-btn"}))),a=o.a.createElement("section",{className:"product--show--cart-aside-wrapper"},o.a.createElement("section",{className:"product-show--cart-aside"},o.a.createElement("ul",{className:"product-show--cart-aside-items"},o.a.createElement("h3",{className:"product-show--cart-aside-items--title"},e.title),o.a.createElement("ul",{className:"product-show--cart-aside-items--price-wrapper"},o.a.createElement("li",{className:"product-show--cart-aside-items--price"},t.format(e.price)),o.a.createElement("p",{className:"product-show--cart-aside-items--shipping"},"Free Shipping & Returns")),o.a.createElement("ul",{className:"product-show--cart-aside-items--color-wrapper"},o.a.createElement("li",{className:"product-show--cart-aside-items--color-title"},"Color: "),o.a.createElement("li",{className:"product-show--cart-aside-items--color"},"Some color")),o.a.createElement("section",{className:"product-show--cart-aside--form"},o.a.createElement("label",{className:"product-show--cart-aside--form--sizing--label"},o.a.createElement("select",{className:"product-show--cart-aside--form--sizing",value:this.state.size,name:"size",onChange:this.handleInput("size")},o.a.createElement("option",{className:"dropdown-helper",selected:!0,disabled:!0},"Select a size"),n)),o.a.createElement("button",{className:"product-show--cart-aside--form--add-to-cart",onClick:this.handleSubmit},"ADD TO CART"))))),i=o.a.createElement("section",{className:"product-show--deatil-wrapper"},o.a.createElement("ul",{className:"product-show--deatil--items"},o.a.createElement("ul",{className:"product-show--detail--item"},o.a.createElement("h3",{className:"product-show--detail--item--title"},"PRODUCT DETAILS"),o.a.createElement("p",{className:"product-show--detail--item--subtitle"},"Category by brand"),o.a.createElement("ul",{className:"product-show--detail--item--details"},o.a.createElement("li",{className:"product-show--detail--item--details--item"},"details here"))),o.a.createElement("ul",{className:"product-show--detail--item"},o.a.createElement("ul",{className:"product-show--detail--area"},o.a.createElement("h3",{className:"product-show--detail--item--title"},"PRODUCT CODE"),o.a.createElement("p",null,e.code),o.a.createElement("ul",{className:"product-show--detail--area"},o.a.createElement("h3",{className:"product-show--detail--item--title"},"BRAND"),o.a.createElement("p",null,"brand here")))),o.a.createElement("ul",{className:"product-show--detail--item"},o.a.createElement("ul",{className:"product-show--detail--area"},o.a.createElement("h3",{className:"product-show--detail--item--title"},"SIZE & FIT"),o.a.createElement("ul",{className:"product-show--detail--item--design-specs"},o.a.createElement("li",{className:"product-show--detail--item--design-specs--item"},e.model_size),o.a.createElement("li",{className:"product-show--detail--item--design-specs--item"},e.model_height))),o.a.createElement("ul",{className:"product-show--detail--area"},o.a.createElement("h3",{className:"product-show--detail--item--title"},"LOOK AFTER ME"),o.a.createElement("ul",{className:"product-show--detail--item--design-specs"},o.a.createElement("li",{className:"product-show--detail--item--design-specs--item"},e.care_instructions),o.a.createElement("li",{className:"product-show--detail--item--design-specs--item"},e.care_advice))),o.a.createElement("ul",{className:"product-show--detail--area"},o.a.createElement("h3",{className:"product-show--detail--item--title"},"ABOUT ME"),o.a.createElement("ul",{className:"product-show--detail--item--design-specs"},o.a.createElement("li",{className:"product-show--detail--item--design-specs--item"},e.fabric_stretch),o.a.createElement("li",{className:"product-show--detail--item--design-specs--item"},e.fabric_material),o.a.createElement("li",{className:"product-show--detail--item--design-specs--item"},e.main_fiber_content))))));return o.a.createElement("section",{className:"product-show"},o.a.createElement("section",{className:"product-show--wrapper"},r,a),o.a.createElement("section",{className:"product-show--detail-wrapper"},i))}}])&&Vn(n.prototype,r),a&&Vn(n,a),t}(),Gn=Ve(function(e,t){var n=t.match.params.productId;return{product:e.entities.products[n],currentUser:e.session.currentUser,orders:e.entities.orders,productItems:e.entities.productItems,selectedSizes:Object.entries(Wn(e))}},function(e){return{requestProduct:function(t){return e(T(t))},createOrderItem:function(t,n,r){return e(R(0,n))},updateProductItem:function(t){return e(z(t))}}})(Qn);function Yn(e){return(Yn="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Zn(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Xn(e){return(Xn=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function Jn(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function er(e,t){return(er=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var tr=function(e){function t(e){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),(n=function(e,t){return!t||"object"!==Yn(t)&&"function"!=typeof t?Jn(e):t}(this,Xn(t).call(this,e))).state={orderId:n.props.match.params.orderId,subTotal:0,listings:[]},n.handleSubmit=n.handleSubmit.bind(Jn(n)),n}var n,r,a;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&er(e,t)}(t,o.a.Component),n=t,(r=[{key:"componentDidMount",value:function(){var e=parseInt(this.props.match.params.orderId);this.props.fetchOrder(e)}},{key:"handleSubmit",value:function(e){e.preventDefault();var t=e.target.attributes.orderItemId.value,n=this.props.orderItems[t].product_item_id,r={id:n,product_id:[this.props.productItems[n].product_item_id].product_id,size:this.props.productItems[n].size,state:"Available"};this.props.deleteOrderItem(t,this.props.currentUser.id,this.state.orderId),this.props.updateProductItem(r)}},{key:"render",value:function(){var e,t=this,n=new Intl.NumberFormat("en-US",{style:"currency",currency:"USD",minimumFractionDigits:2});this.props.orderListItems.length>0?e=this.props.orderListItems.map(function(e,r){return o.a.createElement("section",{className:"listing--item--wrapper",key:r},o.a.createElement("section",{className:"listing--item--photos"},o.a.createElement("img",{src:e.photosUrl,className:"listing--item--img"})),o.a.createElement("section",{className:"listing--details--wrapper"},o.a.createElement("ul",{className:"listing--details"},o.a.createElement("h3",{className:"listing--details--header"},n.format(e.price)),o.a.createElement("p",{className:"listing--details--brand"},e.brand),o.a.createElement("p",{className:"listing--title"},e.shortTitle),o.a.createElement("ul",{className:"listing--details--specs--wrapper"},o.a.createElement("li",{className:"listing--details--specs--color"},"Color"),o.a.createElement("li",{className:"listing--details--specs--size"},e.size),o.a.createElement("p",{className:"listing--details--specs--qty"},"Qty")))),o.a.createElement("button",{className:"listing--remove--btn",orderItemId:e.id,onClick:t.handleSubmit},"x"))}):o.a.createElement("div",null);var r=o.a.createElement("section",{className:"order--container"},o.a.createElement("ul",{className:"order--wrapper"},o.a.createElement("ul",{className:"order--main"},o.a.createElement("section",{className:"order--listings--wrapper"},o.a.createElement("h3",{className:"order--listings--header"},"My Cart"),o.a.createElement("ul",{className:"order--listings"},e),o.a.createElement("ul",{className:"order--listings--subtotal"},o.a.createElement("h3",{className:"order--listings--subtotal--title"},"SUB-TOTAL"),o.a.createElement("h3",{className:"order--listings--subtotal--price"},n.format(this.props.subTotal)))),o.a.createElement("ul",{className:"order--delivery--wrapper"})),o.a.createElement("section",{className:"order--aside"})));return o.a.createElement("div",{className:"order"},r)}}])&&Zn(n.prototype,r),a&&Zn(n,a),t}(),nr=Ve(function(e,t){var n,r,o,a,i,u=t.match.params.orderId;return{orders:e.entities.orders[u],currentUser:e.session.currentUser,products:e.entities.products,productItems:e.entities.productItems,orderItems:e.entities.orderItems,orderListItems:(n=e.entities.orderItems,r=e.entities.products,o=e.entities.productItems,a=Object.entries(n),i=[],a.length>0&&(i=a.map(function(e){return{id:e[1].id,price:e[1].unitPrice,brand:"some",color:"some",size:o[e[1].product_item_id].size,shortTitle:r[o[e[1].product_item_id].product_id].title,photosUrl:r[o[e[1].product_item_id].product_id].photoUrls[0]}})),i),subTotal:Bn(e)}},function(e){return{fetchOrder:function(t){return e(P(t))},deleteOrderItem:function(t){return e(I(t))},updateProductItem:function(t){return e(z(t))}}})(tr),rr=function(e){return o.a.createElement("div",{id:"main"},o.a.createElement(Ft,{path:"/",component:Rn}),o.a.createElement(Ht,null,o.a.createElement(Ft,{exact:!0,path:"/",component:_n}),o.a.createElement(Ft,{exact:!0,path:"/products",component:Fn}),o.a.createElement(Ft,{exact:!0,path:"/products/:productId",component:Gn}),o.a.createElement(Ft,{exact:!0,path:"/orders/:orderId",component:nr}),o.a.createElement(Ft,{render:function(){return o.a.createElement(Ut,{to:{pathname:"/"}})}})),o.a.createElement(Ft,{path:"/",component:vn}))},or=function(){return o.a.createElement("div",{id:"app"},o.a.createElement(Ht,null,o.a.createElement(Zt,{exact:!0,path:"/login",component:on}),o.a.createElement(Zt,{exact:!0,path:"/signup",component:pn}),o.a.createElement(Ft,{path:"/",component:rr})))},ar=function(e){var t=e.store;return o.a.createElement(re,{store:t},o.a.createElement(Qt,null,o.a.createElement(or,null)))};document.addEventListener("DOMContentLoaded",function(){var e=document.getElementById("root"),t=void 0;window.currentUser&&(t={session:{currentUser:window.currentUser}});var n=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return f(q,e,b(H,w.a))}(t);window.store=n,i.a.render(o.a.createElement(ar,{store:n}),e),window.getState=n.getState})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9pbnZhcmlhbnQvYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL2xvZGFzaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL2lzT2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX3Jvb3QuanMiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9idWlsZGluL2dsb2JhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL2lzT2JqZWN0TGlrZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3MvZGlzdC9ob2lzdC1ub24tcmVhY3Qtc3RhdGljcy5janMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fTGlzdENhY2hlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Fzc29jSW5kZXhPZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL2VxLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VHZXRUYWcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fbmF0aXZlQ3JlYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2dldE1hcERhdGEuanMiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9idWlsZGluL21vZHVsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZG9tL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1pcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19nZXROYXRpdmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9pc0Z1bmN0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VBc3NpZ25WYWx1ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL2lzQXJyYXlMaWtlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zeW1ib2wtb2JzZXJ2YWJsZS9lcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbmhlcml0c0xvb3NlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wYXRoLXRvLXJlZ2V4cC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvb2JqZWN0LWFzc2lnbi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19NYXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fU3ltYm9sLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2ZyZWVHbG9iYWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYXNzaWduTWVyZ2VWYWx1ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19kZWZpbmVQcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19nZXRQcm90b3R5cGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9faXNQcm90b3R5cGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9pc0FyZ3VtZW50cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL2lzQXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9pc0xlbmd0aC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL2lzQnVmZmVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvaXNUeXBlZEFycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX3NhZmVHZXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9rZXlzSW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9faXNJbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL2lkZW50aXR5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWR1eC1sb2dnZXIvZGlzdC9yZWR1eC1sb2dnZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N5bWJvbC1vYnNlcnZhYmxlL2VzL3BvbnlmaWxsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9ndWQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2Nqcy9yZWFjdC5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZG9tL2Nqcy9yZWFjdC1kb20ucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NjaGVkdWxlci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2NoZWR1bGVyL2Nqcy9zY2hlZHVsZXIucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9tZXJnZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlTWVyZ2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fU3RhY2suanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fbGlzdENhY2hlQ2xlYXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fbGlzdENhY2hlRGVsZXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2xpc3RDYWNoZUdldC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19saXN0Q2FjaGVIYXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fbGlzdENhY2hlU2V0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX3N0YWNrQ2xlYXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fc3RhY2tEZWxldGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fc3RhY2tHZXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fc3RhY2tIYXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fc3RhY2tTZXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUlzTmF0aXZlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2dldFJhd1RhZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19vYmplY3RUb1N0cmluZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19pc01hc2tlZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19jb3JlSnNEYXRhLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX3RvU291cmNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2dldFZhbHVlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX01hcENhY2hlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX21hcENhY2hlQ2xlYXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fSGFzaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19oYXNoQ2xlYXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9faGFzaERlbGV0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19oYXNoR2V0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2hhc2hIYXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9faGFzaFNldC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19tYXBDYWNoZURlbGV0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19pc0tleWFibGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fbWFwQ2FjaGVHZXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fbWFwQ2FjaGVIYXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fbWFwQ2FjaGVTZXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUZvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19jcmVhdGVCYXNlRm9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VNZXJnZURlZXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fY2xvbmVCdWZmZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fY2xvbmVUeXBlZEFycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Nsb25lQXJyYXlCdWZmZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fVWludDhBcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19jb3B5QXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9faW5pdENsb25lT2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VDcmVhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fb3ZlckFyZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlSXNBcmd1bWVudHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9pc0FycmF5TGlrZU9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL3N0dWJGYWxzZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL2lzUGxhaW5PYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUlzVHlwZWRBcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlVW5hcnkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fbm9kZVV0aWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC90b1BsYWluT2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2NvcHlPYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYXNzaWduVmFsdWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYXJyYXlMaWtlS2V5cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlVGltZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUtleXNJbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19uYXRpdmVLZXlzSW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fY3JlYXRlQXNzaWduZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZVJlc3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fb3ZlclJlc3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYXBwbHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fc2V0VG9TdHJpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZVNldFRvU3RyaW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvY29uc3RhbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fc2hvcnRPdXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9faXNJdGVyYXRlZUNhbGwuanMiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9idWlsZGluL2hhcm1vbnktbW9kdWxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2ZhY3RvcnlXaXRoVGhyb3dpbmdTaGltcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9saWIvUmVhY3RQcm9wVHlwZXNTZWNyZXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWlzL2Nqcy9yZWFjdC1pcy5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcGF0aC10by1yZWdleHAvbm9kZV9tb2R1bGVzL2lzYXJyYXkvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlZHV4L2VzL3JlZHV4LmpzIiwid2VicGFjazovLy8uL2Zyb250ZW5kL2FjdGlvbnMvc2Vzc2lvbi5qcyIsIndlYnBhY2s6Ly8vLi9mcm9udGVuZC91dGlscy9zZXNzaW9uX3V0aWwuanMiLCJ3ZWJwYWNrOi8vLy4vZnJvbnRlbmQvcmVkdWNlcnMvc2Vzc2lvbi5qcyIsIndlYnBhY2s6Ly8vLi9mcm9udGVuZC9hY3Rpb25zL3Byb2R1Y3RzLmpzIiwid2VicGFjazovLy8uL2Zyb250ZW5kL3V0aWxzL3Byb2R1Y3RfdXRpbC5qcyIsIndlYnBhY2s6Ly8vLi9mcm9udGVuZC9hY3Rpb25zL29yZGVycy5qcyIsIndlYnBhY2s6Ly8vLi9mcm9udGVuZC91dGlscy9vcmRlcl91dGlsLmpzeCIsIndlYnBhY2s6Ly8vLi9mcm9udGVuZC91dGlscy9vcmRlcl9pdGVtc191dGlsLmpzeCIsIndlYnBhY2s6Ly8vLi9mcm9udGVuZC9hY3Rpb25zL29yZGVyX2l0ZW1zLmpzIiwid2VicGFjazovLy8uL2Zyb250ZW5kL3JlZHVjZXJzL3Byb2R1Y3RzLmpzIiwid2VicGFjazovLy8uL2Zyb250ZW5kL2FjdGlvbnMvcHJvZHVjdF9pdGVtcy5qcyIsIndlYnBhY2s6Ly8vLi9mcm9udGVuZC91dGlscy9wcm9kdWN0X2l0ZW1fdXRpbC5qc3giLCJ3ZWJwYWNrOi8vLy4vZnJvbnRlbmQvcmVkdWNlcnMvb3JkZXJfaXRlbXMuanMiLCJ3ZWJwYWNrOi8vLy4vZnJvbnRlbmQvcmVkdWNlcnMvZW50aXRpZXMuanMiLCJ3ZWJwYWNrOi8vLy4vZnJvbnRlbmQvcmVkdWNlcnMvcHJvZHVjdF9pdGVtcy5qcyIsIndlYnBhY2s6Ly8vLi9mcm9udGVuZC9yZWR1Y2Vycy9vcmRlcnMuanMiLCJ3ZWJwYWNrOi8vLy4vZnJvbnRlbmQvYWN0aW9ucy9zaWdudXAuanMiLCJ3ZWJwYWNrOi8vLy4vZnJvbnRlbmQvdXRpbHMvc2lnbnVwX3V0aWwuanMiLCJ3ZWJwYWNrOi8vLy4vZnJvbnRlbmQvcmVkdWNlcnMvZXJyb3JzLmpzIiwid2VicGFjazovLy8uL2Zyb250ZW5kL3JlZHVjZXJzL3Nlc3Npb25fZXJyb3JzLmpzIiwid2VicGFjazovLy8uL2Zyb250ZW5kL3JlZHVjZXJzL3NpZ251cF9lcnJvcnMuanMiLCJ3ZWJwYWNrOi8vLy4vZnJvbnRlbmQvcmVkdWNlcnMvcm9vdC5qcyIsIndlYnBhY2s6Ly8vLi9mcm9udGVuZC90aHVuay90aHVuay5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaW5oZXJpdHNMb29zZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvY29tcG9uZW50cy9Db250ZXh0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy91dGlscy9iYXRjaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvdXRpbHMvU3Vic2NyaXB0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9jb21wb25lbnRzL1Byb3ZpZGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2NvbXBvbmVudHMvY29ubmVjdEFkdmFuY2VkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy91dGlscy9zaGFsbG93RXF1YWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2Nvbm5lY3Qvd3JhcE1hcFRvUHJvcHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2Nvbm5lY3QvbWFwRGlzcGF0Y2hUb1Byb3BzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9jb25uZWN0L21hcFN0YXRlVG9Qcm9wcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvY29ubmVjdC9tZXJnZVByb3BzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9jb25uZWN0L3NlbGVjdG9yRmFjdG9yeS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvY29ubmVjdC9jb25uZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9ob29rcy91c2VTZWxlY3Rvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21pbmktY3JlYXRlLXJlYWN0LWNvbnRleHQvZGlzdC9lc20vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Jlc29sdmUtcGF0aG5hbWUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3ZhbHVlLWVxdWFsL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy90aW55LWludmFyaWFudC9kaXN0L3RpbnktaW52YXJpYW50LmVzbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaGlzdG9yeS9lc20vaGlzdG9yeS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL2VzbS9yZWFjdC1yb3V0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci1kb20vZXNtL3JlYWN0LXJvdXRlci1kb20uanMiLCJ3ZWJwYWNrOi8vLy4vZnJvbnRlbmQvdXRpbHMvcm91dGVfdXRpbHMuanN4Iiwid2VicGFjazovLy8uL2Zyb250ZW5kL2NvbXBvbmVudHMvc2Vzc2lvbi9sb2dpbi5qc3giLCJ3ZWJwYWNrOi8vLy4vZnJvbnRlbmQvY29tcG9uZW50cy9zZXNzaW9uL2xvZ2luX2NvbnRhaW5lci5qc3giLCJ3ZWJwYWNrOi8vLy4vZnJvbnRlbmQvY29tcG9uZW50cy9zZXNzaW9uL3NpZ251cC5qc3giLCJ3ZWJwYWNrOi8vLy4vZnJvbnRlbmQvY29tcG9uZW50cy9zZXNzaW9uL3NpZ251cF9jb250YWluZXIuanN4Iiwid2VicGFjazovLy8uL2Zyb250ZW5kL2NvbXBvbmVudHMvZm9vdGVyL2Zvb3Rlcl9pY29ucy5qc3giLCJ3ZWJwYWNrOi8vLy4vZnJvbnRlbmQvY29tcG9uZW50cy9mb290ZXIvZm9vdGVyX25hdl9saW5rcy5qc3giLCJ3ZWJwYWNrOi8vLy4vZnJvbnRlbmQvY29tcG9uZW50cy9mb290ZXIvZWNvbV9mb290ZXIuanN4Iiwid2VicGFjazovLy8uL2Zyb250ZW5kL2NvbXBvbmVudHMvZm9vdGVyL2Zvb3Rlci5qc3giLCJ3ZWJwYWNrOi8vLy4vZnJvbnRlbmQvY29tcG9uZW50cy9ob21lL2hvbWVfYmFubmVyLmpzeCIsIndlYnBhY2s6Ly8vLi9mcm9udGVuZC9jb21wb25lbnRzL2hvbWUvaG9tZV9mZWF0dXJlLmpzeCIsIndlYnBhY2s6Ly8vLi9mcm9udGVuZC9jb21wb25lbnRzL2hvbWUvc3R5bGVfZmVlZF9jYXJvdXNlbC5qc3giLCJ3ZWJwYWNrOi8vLy4vZnJvbnRlbmQvY29tcG9uZW50cy9ob21lL3NlYXNvbmFsX2ZlYXR1cmUuanN4Iiwid2VicGFjazovLy8uL2Zyb250ZW5kL2NvbXBvbmVudHMvaG9tZS9jYXRlZ29yeV9jYXJvdXNlbC5qc3giLCJ3ZWJwYWNrOi8vLy4vZnJvbnRlbmQvY29tcG9uZW50cy9ob21lL2hvbWUuanN4Iiwid2VicGFjazovLy8uL2Zyb250ZW5kL2NvbXBvbmVudHMvbmF2X2Jhci9lY29tX2Jhci5qc3giLCJ3ZWJwYWNrOi8vLy4vZnJvbnRlbmQvY29tcG9uZW50cy9uYXZfYmFyL3Rvb2xiYXIuanN4Iiwid2VicGFjazovLy8uL2Zyb250ZW5kL2NvbXBvbmVudHMvbmF2X2Jhci90b29sYmFyX2NvbnRhaW5lci5qc3giLCJ3ZWJwYWNrOi8vLy4vZnJvbnRlbmQvY29tcG9uZW50cy9uYXZfYmFyL2NhdGVnb3J5X2Jhci5qc3giLCJ3ZWJwYWNrOi8vLy4vZnJvbnRlbmQvY29tcG9uZW50cy9uYXZfYmFyL25hdl9iYXJfY29udGFpbmVyLmpzeCIsIndlYnBhY2s6Ly8vLi9mcm9udGVuZC9jb21wb25lbnRzL25hdl9iYXIvbmF2X2Jhci5qc3giLCJ3ZWJwYWNrOi8vLy4vZnJvbnRlbmQvY29tcG9uZW50cy9wcm9kdWN0cy9wcm9kdWN0X2luZGV4X2l0ZW0uanN4Iiwid2VicGFjazovLy8uL2Zyb250ZW5kL2NvbXBvbmVudHMvcHJvZHVjdHMvcHJvZHVjdF9pbmRleC5qc3giLCJ3ZWJwYWNrOi8vLy4vZnJvbnRlbmQvY29tcG9uZW50cy9wcm9kdWN0cy9wcm9kdWN0X2luZGV4X2NvbnRhaW5lci5qc3giLCJ3ZWJwYWNrOi8vLy4vZnJvbnRlbmQvcmVkdWNlcnMvc2VsZWN0b3JzLmpzIiwid2VicGFjazovLy8uL2Zyb250ZW5kL2NvbXBvbmVudHMvcHJvZHVjdHMvcHJvZHVjdF9zaG93LmpzeCIsIndlYnBhY2s6Ly8vLi9mcm9udGVuZC9jb21wb25lbnRzL3Byb2R1Y3RzL3Byb2R1Y3Rfc2hvd19jb250YWluZXIuanN4Iiwid2VicGFjazovLy8uL2Zyb250ZW5kL2NvbXBvbmVudHMvb3JkZXJzL29yZGVyc19zaG93LmpzeCIsIndlYnBhY2s6Ly8vLi9mcm9udGVuZC9jb21wb25lbnRzL29yZGVycy9vcmRlcnNfc2hvd19jb250YWluZXIuanN4Iiwid2VicGFjazovLy8uL2Zyb250ZW5kL2NvbXBvbmVudHMvbWFpbi5qc3giLCJ3ZWJwYWNrOi8vLy4vZnJvbnRlbmQvY29tcG9uZW50cy9hcHAuanN4Iiwid2VicGFjazovLy8uL2Zyb250ZW5kL2NvbXBvbmVudHMvcm9vdC5qc3giLCJ3ZWJwYWNrOi8vLy4vZnJvbnRlbmQvYXNhdWNlLmpzeCIsIndlYnBhY2s6Ly8vLi9mcm9udGVuZC9zdG9yZS9zdG9yZS5qcyJdLCJuYW1lcyI6WyJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiZXhwb3J0cyIsIm1vZHVsZSIsImkiLCJsIiwibW9kdWxlcyIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwidCIsIm1vZGUiLCJfX2VzTW9kdWxlIiwibnMiLCJjcmVhdGUiLCJrZXkiLCJiaW5kIiwibiIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsImNvbmRpdGlvbiIsImZvcm1hdCIsImEiLCJiIiwiZSIsImYiLCJlcnJvciIsInVuZGVmaW5lZCIsIkVycm9yIiwiYXJncyIsImFyZ0luZGV4IiwicmVwbGFjZSIsImZyYW1lc1RvUG9wIiwiTEFSR0VfQVJSQVlfU0laRSIsIkNPUkVfRVJST1JfVEVYVCIsIkZVTkNfRVJST1JfVEVYVCIsIkhBU0hfVU5ERUZJTkVEIiwiTUFYX01FTU9JWkVfU0laRSIsIlBMQUNFSE9MREVSIiwiQ0xPTkVfREVFUF9GTEFHIiwiQ0xPTkVfRkxBVF9GTEFHIiwiQ0xPTkVfU1lNQk9MU19GTEFHIiwiQ09NUEFSRV9QQVJUSUFMX0ZMQUciLCJDT01QQVJFX1VOT1JERVJFRF9GTEFHIiwiV1JBUF9CSU5EX0ZMQUciLCJXUkFQX0JJTkRfS0VZX0ZMQUciLCJXUkFQX0NVUlJZX0JPVU5EX0ZMQUciLCJXUkFQX0NVUlJZX0ZMQUciLCJXUkFQX0NVUlJZX1JJR0hUX0ZMQUciLCJXUkFQX1BBUlRJQUxfRkxBRyIsIldSQVBfUEFSVElBTF9SSUdIVF9GTEFHIiwiV1JBUF9BUllfRkxBRyIsIldSQVBfUkVBUkdfRkxBRyIsIldSQVBfRkxJUF9GTEFHIiwiREVGQVVMVF9UUlVOQ19MRU5HVEgiLCJERUZBVUxUX1RSVU5DX09NSVNTSU9OIiwiSE9UX0NPVU5UIiwiSE9UX1NQQU4iLCJMQVpZX0ZJTFRFUl9GTEFHIiwiTEFaWV9NQVBfRkxBRyIsIklORklOSVRZIiwiTUFYX1NBRkVfSU5URUdFUiIsIk1BWF9JTlRFR0VSIiwiTkFOIiwiTUFYX0FSUkFZX0xFTkdUSCIsIk1BWF9BUlJBWV9JTkRFWCIsIkhBTEZfTUFYX0FSUkFZX0xFTkdUSCIsIndyYXBGbGFncyIsImFyZ3NUYWciLCJhcnJheVRhZyIsImFzeW5jVGFnIiwiYm9vbFRhZyIsImRhdGVUYWciLCJkb21FeGNUYWciLCJlcnJvclRhZyIsImZ1bmNUYWciLCJnZW5UYWciLCJtYXBUYWciLCJudW1iZXJUYWciLCJudWxsVGFnIiwib2JqZWN0VGFnIiwicHJveHlUYWciLCJyZWdleHBUYWciLCJzZXRUYWciLCJzdHJpbmdUYWciLCJzeW1ib2xUYWciLCJ1bmRlZmluZWRUYWciLCJ3ZWFrTWFwVGFnIiwid2Vha1NldFRhZyIsImFycmF5QnVmZmVyVGFnIiwiZGF0YVZpZXdUYWciLCJmbG9hdDMyVGFnIiwiZmxvYXQ2NFRhZyIsImludDhUYWciLCJpbnQxNlRhZyIsImludDMyVGFnIiwidWludDhUYWciLCJ1aW50OENsYW1wZWRUYWciLCJ1aW50MTZUYWciLCJ1aW50MzJUYWciLCJyZUVtcHR5U3RyaW5nTGVhZGluZyIsInJlRW1wdHlTdHJpbmdNaWRkbGUiLCJyZUVtcHR5U3RyaW5nVHJhaWxpbmciLCJyZUVzY2FwZWRIdG1sIiwicmVVbmVzY2FwZWRIdG1sIiwicmVIYXNFc2NhcGVkSHRtbCIsIlJlZ0V4cCIsInNvdXJjZSIsInJlSGFzVW5lc2NhcGVkSHRtbCIsInJlRXNjYXBlIiwicmVFdmFsdWF0ZSIsInJlSW50ZXJwb2xhdGUiLCJyZUlzRGVlcFByb3AiLCJyZUlzUGxhaW5Qcm9wIiwicmVQcm9wTmFtZSIsInJlUmVnRXhwQ2hhciIsInJlSGFzUmVnRXhwQ2hhciIsInJlVHJpbSIsInJlVHJpbVN0YXJ0IiwicmVUcmltRW5kIiwicmVXcmFwQ29tbWVudCIsInJlV3JhcERldGFpbHMiLCJyZVNwbGl0RGV0YWlscyIsInJlQXNjaWlXb3JkIiwicmVFc2NhcGVDaGFyIiwicmVFc1RlbXBsYXRlIiwicmVGbGFncyIsInJlSXNCYWRIZXgiLCJyZUlzQmluYXJ5IiwicmVJc0hvc3RDdG9yIiwicmVJc09jdGFsIiwicmVJc1VpbnQiLCJyZUxhdGluIiwicmVOb01hdGNoIiwicmVVbmVzY2FwZWRTdHJpbmciLCJyc0NvbWJvUmFuZ2UiLCJyc0NvbWJvTWFya3NSYW5nZSIsInJzQnJlYWtSYW5nZSIsInJzTWF0aE9wUmFuZ2UiLCJyc0FzdHJhbCIsInJzQnJlYWsiLCJyc0NvbWJvIiwicnNEaWdpdHMiLCJyc0RpbmdiYXQiLCJyc0xvd2VyIiwicnNNaXNjIiwicnNGaXR6IiwicnNOb25Bc3RyYWwiLCJyc1JlZ2lvbmFsIiwicnNTdXJyUGFpciIsInJzVXBwZXIiLCJyc01pc2NMb3dlciIsInJzTWlzY1VwcGVyIiwicmVPcHRNb2QiLCJyc1NlcSIsImpvaW4iLCJyc0Vtb2ppIiwicnNTeW1ib2wiLCJyZUFwb3MiLCJyZUNvbWJvTWFyayIsInJlVW5pY29kZSIsInJlVW5pY29kZVdvcmQiLCJyZUhhc1VuaWNvZGUiLCJyZUhhc1VuaWNvZGVXb3JkIiwiY29udGV4dFByb3BzIiwidGVtcGxhdGVDb3VudGVyIiwidHlwZWRBcnJheVRhZ3MiLCJjbG9uZWFibGVUYWdzIiwic3RyaW5nRXNjYXBlcyIsImZyZWVQYXJzZUZsb2F0IiwicGFyc2VGbG9hdCIsImZyZWVQYXJzZUludCIsInBhcnNlSW50IiwiZnJlZUdsb2JhbCIsImdsb2JhbCIsImZyZWVTZWxmIiwic2VsZiIsInJvb3QiLCJGdW5jdGlvbiIsImZyZWVFeHBvcnRzIiwibm9kZVR5cGUiLCJmcmVlTW9kdWxlIiwibW9kdWxlRXhwb3J0cyIsImZyZWVQcm9jZXNzIiwicHJvY2VzcyIsIm5vZGVVdGlsIiwidHlwZXMiLCJyZXF1aXJlIiwiYmluZGluZyIsIm5vZGVJc0FycmF5QnVmZmVyIiwiaXNBcnJheUJ1ZmZlciIsIm5vZGVJc0RhdGUiLCJpc0RhdGUiLCJub2RlSXNNYXAiLCJpc01hcCIsIm5vZGVJc1JlZ0V4cCIsImlzUmVnRXhwIiwibm9kZUlzU2V0IiwiaXNTZXQiLCJub2RlSXNUeXBlZEFycmF5IiwiaXNUeXBlZEFycmF5IiwiYXBwbHkiLCJmdW5jIiwidGhpc0FyZyIsImxlbmd0aCIsImFycmF5QWdncmVnYXRvciIsImFycmF5Iiwic2V0dGVyIiwiaXRlcmF0ZWUiLCJhY2N1bXVsYXRvciIsImluZGV4IiwiYXJyYXlFYWNoIiwiYXJyYXlFYWNoUmlnaHQiLCJhcnJheUV2ZXJ5IiwicHJlZGljYXRlIiwiYXJyYXlGaWx0ZXIiLCJyZXNJbmRleCIsInJlc3VsdCIsImFycmF5SW5jbHVkZXMiLCJiYXNlSW5kZXhPZiIsImFycmF5SW5jbHVkZXNXaXRoIiwiY29tcGFyYXRvciIsImFycmF5TWFwIiwiQXJyYXkiLCJhcnJheVB1c2giLCJ2YWx1ZXMiLCJvZmZzZXQiLCJhcnJheVJlZHVjZSIsImluaXRBY2N1bSIsImFycmF5UmVkdWNlUmlnaHQiLCJhcnJheVNvbWUiLCJhc2NpaVNpemUiLCJiYXNlUHJvcGVydHkiLCJiYXNlRmluZEtleSIsImNvbGxlY3Rpb24iLCJlYWNoRnVuYyIsImJhc2VGaW5kSW5kZXgiLCJmcm9tSW5kZXgiLCJmcm9tUmlnaHQiLCJzdHJpY3RJbmRleE9mIiwiYmFzZUlzTmFOIiwiYmFzZUluZGV4T2ZXaXRoIiwiYmFzZU1lYW4iLCJiYXNlU3VtIiwiYmFzZVByb3BlcnR5T2YiLCJiYXNlUmVkdWNlIiwiY3VycmVudCIsImJhc2VUaW1lcyIsImJhc2VVbmFyeSIsImJhc2VWYWx1ZXMiLCJwcm9wcyIsImNhY2hlSGFzIiwiY2FjaGUiLCJoYXMiLCJjaGFyc1N0YXJ0SW5kZXgiLCJzdHJTeW1ib2xzIiwiY2hyU3ltYm9scyIsImNoYXJzRW5kSW5kZXgiLCJkZWJ1cnJMZXR0ZXIiLCJlc2NhcGVIdG1sQ2hhciIsImVzY2FwZVN0cmluZ0NoYXIiLCJjaHIiLCJoYXNVbmljb2RlIiwic3RyaW5nIiwidGVzdCIsIm1hcFRvQXJyYXkiLCJtYXAiLCJzaXplIiwiZm9yRWFjaCIsIm92ZXJBcmciLCJ0cmFuc2Zvcm0iLCJhcmciLCJyZXBsYWNlSG9sZGVycyIsInBsYWNlaG9sZGVyIiwic2V0VG9BcnJheSIsInNldCIsInNldFRvUGFpcnMiLCJzdHJpbmdTaXplIiwibGFzdEluZGV4IiwidW5pY29kZVNpemUiLCJzdHJpbmdUb0FycmF5IiwibWF0Y2giLCJ1bmljb2RlVG9BcnJheSIsInNwbGl0IiwiYXNjaWlUb0FycmF5IiwidW5lc2NhcGVIdG1sQ2hhciIsIl8iLCJydW5JbkNvbnRleHQiLCJjb250ZXh0IiwidWlkIiwiZGVmYXVsdHMiLCJwaWNrIiwiRGF0ZSIsIk1hdGgiLCJTdHJpbmciLCJUeXBlRXJyb3IiLCJhcnJheVByb3RvIiwiZnVuY1Byb3RvIiwib2JqZWN0UHJvdG8iLCJjb3JlSnNEYXRhIiwiZnVuY1RvU3RyaW5nIiwidG9TdHJpbmciLCJpZENvdW50ZXIiLCJtYXNrU3JjS2V5IiwiZXhlYyIsImtleXMiLCJJRV9QUk9UTyIsIm5hdGl2ZU9iamVjdFRvU3RyaW5nIiwib2JqZWN0Q3RvclN0cmluZyIsIm9sZERhc2giLCJyZUlzTmF0aXZlIiwiQnVmZmVyIiwiVWludDhBcnJheSIsImFsbG9jVW5zYWZlIiwiZ2V0UHJvdG90eXBlIiwiZ2V0UHJvdG90eXBlT2YiLCJvYmplY3RDcmVhdGUiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsInNwbGljZSIsInNwcmVhZGFibGVTeW1ib2wiLCJpc0NvbmNhdFNwcmVhZGFibGUiLCJzeW1JdGVyYXRvciIsIml0ZXJhdG9yIiwic3ltVG9TdHJpbmdUYWciLCJnZXROYXRpdmUiLCJjdHhDbGVhclRpbWVvdXQiLCJjbGVhclRpbWVvdXQiLCJjdHhOb3ciLCJub3ciLCJjdHhTZXRUaW1lb3V0Iiwic2V0VGltZW91dCIsIm5hdGl2ZUNlaWwiLCJjZWlsIiwibmF0aXZlRmxvb3IiLCJmbG9vciIsIm5hdGl2ZUdldFN5bWJvbHMiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJuYXRpdmVJc0J1ZmZlciIsImlzQnVmZmVyIiwibmF0aXZlSXNGaW5pdGUiLCJpc0Zpbml0ZSIsIm5hdGl2ZUpvaW4iLCJuYXRpdmVLZXlzIiwibmF0aXZlTWF4IiwibWF4IiwibmF0aXZlTWluIiwibWluIiwibmF0aXZlTm93IiwibmF0aXZlUGFyc2VJbnQiLCJuYXRpdmVSYW5kb20iLCJyYW5kb20iLCJuYXRpdmVSZXZlcnNlIiwicmV2ZXJzZSIsIkRhdGFWaWV3IiwiTWFwIiwiUHJvbWlzZSIsIlNldCIsIldlYWtNYXAiLCJuYXRpdmVDcmVhdGUiLCJtZXRhTWFwIiwicmVhbE5hbWVzIiwiZGF0YVZpZXdDdG9yU3RyaW5nIiwidG9Tb3VyY2UiLCJtYXBDdG9yU3RyaW5nIiwicHJvbWlzZUN0b3JTdHJpbmciLCJzZXRDdG9yU3RyaW5nIiwid2Vha01hcEN0b3JTdHJpbmciLCJzeW1ib2xQcm90byIsInN5bWJvbFZhbHVlT2YiLCJ2YWx1ZU9mIiwic3ltYm9sVG9TdHJpbmciLCJsb2Rhc2giLCJpc09iamVjdExpa2UiLCJpc0FycmF5IiwiTGF6eVdyYXBwZXIiLCJMb2Rhc2hXcmFwcGVyIiwid3JhcHBlckNsb25lIiwiYmFzZUNyZWF0ZSIsInByb3RvIiwiaXNPYmplY3QiLCJiYXNlTG9kYXNoIiwiY2hhaW5BbGwiLCJ0aGlzIiwiX193cmFwcGVkX18iLCJfX2FjdGlvbnNfXyIsIl9fY2hhaW5fXyIsIl9faW5kZXhfXyIsIl9fdmFsdWVzX18iLCJfX2Rpcl9fIiwiX19maWx0ZXJlZF9fIiwiX19pdGVyYXRlZXNfXyIsIl9fdGFrZUNvdW50X18iLCJfX3ZpZXdzX18iLCJIYXNoIiwiZW50cmllcyIsImNsZWFyIiwiZW50cnkiLCJMaXN0Q2FjaGUiLCJNYXBDYWNoZSIsIlNldENhY2hlIiwiX19kYXRhX18iLCJhZGQiLCJTdGFjayIsImRhdGEiLCJhcnJheUxpa2VLZXlzIiwiaW5oZXJpdGVkIiwiaXNBcnIiLCJpc0FyZyIsImlzQXJndW1lbnRzIiwiaXNCdWZmIiwiaXNUeXBlIiwic2tpcEluZGV4ZXMiLCJpc0luZGV4IiwicHVzaCIsImFycmF5U2FtcGxlIiwiYmFzZVJhbmRvbSIsImFycmF5U2FtcGxlU2l6ZSIsInNodWZmbGVTZWxmIiwiY29weUFycmF5IiwiYmFzZUNsYW1wIiwiYXJyYXlTaHVmZmxlIiwiYXNzaWduTWVyZ2VWYWx1ZSIsImVxIiwiYmFzZUFzc2lnblZhbHVlIiwiYXNzaWduVmFsdWUiLCJvYmpWYWx1ZSIsImFzc29jSW5kZXhPZiIsImJhc2VBZ2dyZWdhdG9yIiwiYmFzZUVhY2giLCJiYXNlQXNzaWduIiwiY29weU9iamVjdCIsImJhc2VBdCIsInBhdGhzIiwic2tpcCIsIm51bWJlciIsImxvd2VyIiwidXBwZXIiLCJiYXNlQ2xvbmUiLCJiaXRtYXNrIiwiY3VzdG9taXplciIsInN0YWNrIiwiaXNEZWVwIiwiaXNGbGF0IiwiaXNGdWxsIiwiY29uc3RydWN0b3IiLCJpbnB1dCIsImluaXRDbG9uZUFycmF5IiwidGFnIiwiZ2V0VGFnIiwiaXNGdW5jIiwiY2xvbmVCdWZmZXIiLCJpbml0Q2xvbmVPYmplY3QiLCJnZXRTeW1ib2xzSW4iLCJjb3B5U3ltYm9sc0luIiwia2V5c0luIiwiYmFzZUFzc2lnbkluIiwiZ2V0U3ltYm9scyIsImNvcHlTeW1ib2xzIiwiQ3RvciIsImNsb25lQXJyYXlCdWZmZXIiLCJkYXRhVmlldyIsImJ1ZmZlciIsImJ5dGVPZmZzZXQiLCJieXRlTGVuZ3RoIiwiY2xvbmVEYXRhVmlldyIsImNsb25lVHlwZWRBcnJheSIsInJlZ2V4cCIsImNsb25lUmVnRXhwIiwic3ltYm9sIiwiaW5pdENsb25lQnlUYWciLCJzdGFja2VkIiwic3ViVmFsdWUiLCJnZXRBbGxLZXlzSW4iLCJnZXRBbGxLZXlzIiwiYmFzZUNvbmZvcm1zVG8iLCJiYXNlRGVsYXkiLCJ3YWl0IiwiYmFzZURpZmZlcmVuY2UiLCJpbmNsdWRlcyIsImlzQ29tbW9uIiwidmFsdWVzTGVuZ3RoIiwib3V0ZXIiLCJjb21wdXRlZCIsInZhbHVlc0luZGV4IiwidGVtcGxhdGVTZXR0aW5ncyIsInBvcCIsImdldE1hcERhdGEiLCJwYWlycyIsImNyZWF0ZUJhc2VFYWNoIiwiYmFzZUZvck93biIsImJhc2VFYWNoUmlnaHQiLCJiYXNlRm9yT3duUmlnaHQiLCJiYXNlRXZlcnkiLCJiYXNlRXh0cmVtdW0iLCJpc1N5bWJvbCIsImJhc2VGaWx0ZXIiLCJiYXNlRmxhdHRlbiIsImRlcHRoIiwiaXNTdHJpY3QiLCJpc0ZsYXR0ZW5hYmxlIiwiYmFzZUZvciIsImNyZWF0ZUJhc2VGb3IiLCJiYXNlRm9yUmlnaHQiLCJiYXNlRnVuY3Rpb25zIiwiaXNGdW5jdGlvbiIsImJhc2VHZXQiLCJwYXRoIiwiY2FzdFBhdGgiLCJ0b0tleSIsImJhc2VHZXRBbGxLZXlzIiwia2V5c0Z1bmMiLCJzeW1ib2xzRnVuYyIsImJhc2VHZXRUYWciLCJpc093biIsInVubWFza2VkIiwiZ2V0UmF3VGFnIiwib2JqZWN0VG9TdHJpbmciLCJiYXNlR3QiLCJvdGhlciIsImJhc2VIYXMiLCJiYXNlSGFzSW4iLCJiYXNlSW50ZXJzZWN0aW9uIiwiYXJyYXlzIiwib3RoTGVuZ3RoIiwib3RoSW5kZXgiLCJjYWNoZXMiLCJtYXhMZW5ndGgiLCJJbmZpbml0eSIsInNlZW4iLCJiYXNlSW52b2tlIiwicGFyZW50IiwibGFzdCIsImJhc2VJc0FyZ3VtZW50cyIsImJhc2VJc0VxdWFsIiwiZXF1YWxGdW5jIiwib2JqSXNBcnIiLCJvdGhJc0FyciIsIm9ialRhZyIsIm90aFRhZyIsIm9iaklzT2JqIiwib3RoSXNPYmoiLCJpc1NhbWVUYWciLCJlcXVhbEFycmF5cyIsIm1lc3NhZ2UiLCJjb252ZXJ0IiwiaXNQYXJ0aWFsIiwiZXF1YWxCeVRhZyIsIm9iaklzV3JhcHBlZCIsIm90aElzV3JhcHBlZCIsIm9ialVud3JhcHBlZCIsIm90aFVud3JhcHBlZCIsIm9ialByb3BzIiwib2JqTGVuZ3RoIiwic2tpcEN0b3IiLCJvdGhWYWx1ZSIsImNvbXBhcmVkIiwib2JqQ3RvciIsIm90aEN0b3IiLCJlcXVhbE9iamVjdHMiLCJiYXNlSXNFcXVhbERlZXAiLCJiYXNlSXNNYXRjaCIsIm1hdGNoRGF0YSIsIm5vQ3VzdG9taXplciIsInNyY1ZhbHVlIiwiYmFzZUlzTmF0aXZlIiwiYmFzZUl0ZXJhdGVlIiwiaWRlbnRpdHkiLCJiYXNlTWF0Y2hlc1Byb3BlcnR5IiwiYmFzZU1hdGNoZXMiLCJiYXNlS2V5cyIsImlzUHJvdG90eXBlIiwiYmFzZUtleXNJbiIsIm5hdGl2ZUtleXNJbiIsImlzUHJvdG8iLCJiYXNlTHQiLCJiYXNlTWFwIiwiaXNBcnJheUxpa2UiLCJnZXRNYXRjaERhdGEiLCJtYXRjaGVzU3RyaWN0Q29tcGFyYWJsZSIsImlzS2V5IiwiaXNTdHJpY3RDb21wYXJhYmxlIiwiaGFzSW4iLCJiYXNlTWVyZ2UiLCJzcmNJbmRleCIsIm1lcmdlRnVuYyIsInNhZmVHZXQiLCJuZXdWYWx1ZSIsImlzVHlwZWQiLCJpc0FycmF5TGlrZU9iamVjdCIsImlzUGxhaW5PYmplY3QiLCJ0b1BsYWluT2JqZWN0IiwiYmFzZU1lcmdlRGVlcCIsImJhc2VOdGgiLCJiYXNlT3JkZXJCeSIsIml0ZXJhdGVlcyIsIm9yZGVycyIsImdldEl0ZXJhdGVlIiwiY29tcGFyZXIiLCJzb3J0IiwiYmFzZVNvcnRCeSIsIm9iakNyaXRlcmlhIiwiY3JpdGVyaWEiLCJvdGhDcml0ZXJpYSIsIm9yZGVyc0xlbmd0aCIsImNvbXBhcmVBc2NlbmRpbmciLCJvcmRlciIsImNvbXBhcmVNdWx0aXBsZSIsImJhc2VQaWNrQnkiLCJiYXNlU2V0IiwiYmFzZVB1bGxBbGwiLCJpbmRleE9mIiwiYmFzZVB1bGxBdCIsImluZGV4ZXMiLCJwcmV2aW91cyIsImJhc2VVbnNldCIsImJhc2VSZXBlYXQiLCJiYXNlUmVzdCIsInN0YXJ0Iiwic2V0VG9TdHJpbmciLCJvdmVyUmVzdCIsImJhc2VTYW1wbGUiLCJiYXNlU2FtcGxlU2l6ZSIsIm5lc3RlZCIsImJhc2VTZXREYXRhIiwiYmFzZVNldFRvU3RyaW5nIiwiY29uc3RhbnQiLCJiYXNlU2h1ZmZsZSIsImJhc2VTbGljZSIsImVuZCIsImJhc2VTb21lIiwiYmFzZVNvcnRlZEluZGV4IiwicmV0SGlnaGVzdCIsImxvdyIsImhpZ2giLCJtaWQiLCJiYXNlU29ydGVkSW5kZXhCeSIsInZhbElzTmFOIiwidmFsSXNOdWxsIiwidmFsSXNTeW1ib2wiLCJ2YWxJc1VuZGVmaW5lZCIsIm90aElzRGVmaW5lZCIsIm90aElzTnVsbCIsIm90aElzUmVmbGV4aXZlIiwib3RoSXNTeW1ib2wiLCJzZXRMb3ciLCJiYXNlU29ydGVkVW5pcSIsImJhc2VUb051bWJlciIsImJhc2VUb1N0cmluZyIsImJhc2VVbmlxIiwiY3JlYXRlU2V0Iiwic2VlbkluZGV4IiwiYmFzZVVwZGF0ZSIsInVwZGF0ZXIiLCJiYXNlV2hpbGUiLCJpc0Ryb3AiLCJiYXNlV3JhcHBlclZhbHVlIiwiYWN0aW9ucyIsImFjdGlvbiIsImJhc2VYb3IiLCJiYXNlWmlwT2JqZWN0IiwiYXNzaWduRnVuYyIsInZhbHNMZW5ndGgiLCJjYXN0QXJyYXlMaWtlT2JqZWN0IiwiY2FzdEZ1bmN0aW9uIiwic3RyaW5nVG9QYXRoIiwiY2FzdFJlc3QiLCJjYXN0U2xpY2UiLCJpZCIsInNsaWNlIiwiY29weSIsImFycmF5QnVmZmVyIiwidHlwZWRBcnJheSIsInZhbElzRGVmaW5lZCIsInZhbElzUmVmbGV4aXZlIiwiY29tcG9zZUFyZ3MiLCJwYXJ0aWFscyIsImhvbGRlcnMiLCJpc0N1cnJpZWQiLCJhcmdzSW5kZXgiLCJhcmdzTGVuZ3RoIiwiaG9sZGVyc0xlbmd0aCIsImxlZnRJbmRleCIsImxlZnRMZW5ndGgiLCJyYW5nZUxlbmd0aCIsImlzVW5jdXJyaWVkIiwiY29tcG9zZUFyZ3NSaWdodCIsImhvbGRlcnNJbmRleCIsInJpZ2h0SW5kZXgiLCJyaWdodExlbmd0aCIsImlzTmV3IiwiY3JlYXRlQWdncmVnYXRvciIsImluaXRpYWxpemVyIiwiY3JlYXRlQXNzaWduZXIiLCJhc3NpZ25lciIsInNvdXJjZXMiLCJndWFyZCIsImlzSXRlcmF0ZWVDYWxsIiwiaXRlcmFibGUiLCJjcmVhdGVDYXNlRmlyc3QiLCJtZXRob2ROYW1lIiwiY2hhckF0IiwidHJhaWxpbmciLCJjcmVhdGVDb21wb3VuZGVyIiwiY2FsbGJhY2siLCJ3b3JkcyIsImRlYnVyciIsImNyZWF0ZUN0b3IiLCJhcmd1bWVudHMiLCJ0aGlzQmluZGluZyIsImNyZWF0ZUZpbmQiLCJmaW5kSW5kZXhGdW5jIiwiY3JlYXRlRmxvdyIsImZsYXRSZXN0IiwiZnVuY3MiLCJwcmVyZXEiLCJ0aHJ1Iiwid3JhcHBlciIsImdldEZ1bmNOYW1lIiwiZnVuY05hbWUiLCJnZXREYXRhIiwiaXNMYXppYWJsZSIsInBsYW50IiwiY3JlYXRlSHlicmlkIiwicGFydGlhbHNSaWdodCIsImhvbGRlcnNSaWdodCIsImFyZ1BvcyIsImFyeSIsImFyaXR5IiwiaXNBcnkiLCJpc0JpbmQiLCJpc0JpbmRLZXkiLCJpc0ZsaXAiLCJnZXRIb2xkZXIiLCJob2xkZXJzQ291bnQiLCJjb3VudEhvbGRlcnMiLCJuZXdIb2xkZXJzIiwiY3JlYXRlUmVjdXJyeSIsImZuIiwiYXJyTGVuZ3RoIiwib2xkQXJyYXkiLCJyZW9yZGVyIiwiY3JlYXRlSW52ZXJ0ZXIiLCJ0b0l0ZXJhdGVlIiwiYmFzZUludmVydGVyIiwiY3JlYXRlTWF0aE9wZXJhdGlvbiIsIm9wZXJhdG9yIiwiZGVmYXVsdFZhbHVlIiwiY3JlYXRlT3ZlciIsImFycmF5RnVuYyIsImNyZWF0ZVBhZGRpbmciLCJjaGFycyIsImNoYXJzTGVuZ3RoIiwiY3JlYXRlUmFuZ2UiLCJzdGVwIiwidG9GaW5pdGUiLCJiYXNlUmFuZ2UiLCJjcmVhdGVSZWxhdGlvbmFsT3BlcmF0aW9uIiwidG9OdW1iZXIiLCJ3cmFwRnVuYyIsImlzQ3VycnkiLCJuZXdEYXRhIiwic2V0RGF0YSIsInNldFdyYXBUb1N0cmluZyIsImNyZWF0ZVJvdW5kIiwicHJlY2lzaW9uIiwidG9JbnRlZ2VyIiwicGFpciIsIm5vb3AiLCJjcmVhdGVUb1BhaXJzIiwiYmFzZVRvUGFpcnMiLCJjcmVhdGVXcmFwIiwic3JjQml0bWFzayIsIm5ld0JpdG1hc2siLCJpc0NvbWJvIiwibWVyZ2VEYXRhIiwiY3JlYXRlQ3VycnkiLCJjcmVhdGVQYXJ0aWFsIiwiY3JlYXRlQmluZCIsImN1c3RvbURlZmF1bHRzQXNzaWduSW4iLCJjdXN0b21EZWZhdWx0c01lcmdlIiwiY3VzdG9tT21pdENsb25lIiwiYXJyVmFsdWUiLCJmbGF0dGVuIiwib3RoZXJGdW5jIiwidHlwZSIsImdldFZhbHVlIiwic3R1YkFycmF5IiwiaGFzUGF0aCIsImhhc0Z1bmMiLCJpc0xlbmd0aCIsIkFycmF5QnVmZmVyIiwicmVzb2x2ZSIsImN0b3JTdHJpbmciLCJpc01hc2thYmxlIiwic3R1YkZhbHNlIiwib3RoZXJBcmdzIiwic2hvcnRPdXQiLCJyZWZlcmVuY2UiLCJkZXRhaWxzIiwiaW5zZXJ0V3JhcERldGFpbHMiLCJ1cGRhdGVXcmFwRGV0YWlscyIsImdldFdyYXBEZXRhaWxzIiwiY291bnQiLCJsYXN0Q2FsbGVkIiwic3RhbXAiLCJyZW1haW5pbmciLCJyYW5kIiwibWVtb2l6ZSIsIm1lbW9pemVDYXBwZWQiLCJjaGFyQ29kZUF0IiwicXVvdGUiLCJzdWJTdHJpbmciLCJjbG9uZSIsImRpZmZlcmVuY2UiLCJkaWZmZXJlbmNlQnkiLCJkaWZmZXJlbmNlV2l0aCIsImZpbmRJbmRleCIsImZpbmRMYXN0SW5kZXgiLCJoZWFkIiwiaW50ZXJzZWN0aW9uIiwibWFwcGVkIiwiaW50ZXJzZWN0aW9uQnkiLCJpbnRlcnNlY3Rpb25XaXRoIiwicHVsbCIsInB1bGxBbGwiLCJwdWxsQXQiLCJ1bmlvbiIsInVuaW9uQnkiLCJ1bmlvbldpdGgiLCJ1bnppcCIsImdyb3VwIiwidW56aXBXaXRoIiwid2l0aG91dCIsInhvciIsInhvckJ5IiwieG9yV2l0aCIsInppcCIsInppcFdpdGgiLCJjaGFpbiIsImludGVyY2VwdG9yIiwid3JhcHBlckF0IiwiY291bnRCeSIsImZpbmQiLCJmaW5kTGFzdCIsImZvckVhY2hSaWdodCIsImdyb3VwQnkiLCJpbnZva2VNYXAiLCJrZXlCeSIsInBhcnRpdGlvbiIsInNvcnRCeSIsImJlZm9yZSIsImJpbmRLZXkiLCJkZWJvdW5jZSIsIm9wdGlvbnMiLCJsYXN0QXJncyIsImxhc3RUaGlzIiwibWF4V2FpdCIsInRpbWVySWQiLCJsYXN0Q2FsbFRpbWUiLCJsYXN0SW52b2tlVGltZSIsImxlYWRpbmciLCJtYXhpbmciLCJpbnZva2VGdW5jIiwidGltZSIsInNob3VsZEludm9rZSIsInRpbWVTaW5jZUxhc3RDYWxsIiwidGltZXJFeHBpcmVkIiwidHJhaWxpbmdFZGdlIiwidGltZVdhaXRpbmciLCJyZW1haW5pbmdXYWl0IiwiZGVib3VuY2VkIiwiaXNJbnZva2luZyIsImxlYWRpbmdFZGdlIiwiY2FuY2VsIiwiZmx1c2giLCJkZWZlciIsImRlbGF5IiwicmVzb2x2ZXIiLCJtZW1vaXplZCIsIkNhY2hlIiwibmVnYXRlIiwib3ZlckFyZ3MiLCJ0cmFuc2Zvcm1zIiwiZnVuY3NMZW5ndGgiLCJwYXJ0aWFsIiwicGFydGlhbFJpZ2h0IiwicmVhcmciLCJndCIsImd0ZSIsImlzRXJyb3IiLCJpc0ludGVnZXIiLCJpc051bWJlciIsImlzU3RyaW5nIiwibHQiLCJsdGUiLCJ0b0FycmF5IiwibmV4dCIsImRvbmUiLCJpdGVyYXRvclRvQXJyYXkiLCJyZW1haW5kZXIiLCJ0b0xlbmd0aCIsImlzQmluYXJ5IiwiYXNzaWduIiwiYXNzaWduSW4iLCJhc3NpZ25JbldpdGgiLCJhc3NpZ25XaXRoIiwiYXQiLCJwcm9wc0luZGV4IiwicHJvcHNMZW5ndGgiLCJkZWZhdWx0c0RlZXAiLCJtZXJnZVdpdGgiLCJpbnZlcnQiLCJpbnZlcnRCeSIsImludm9rZSIsIm1lcmdlIiwib21pdCIsImJhc2VQaWNrIiwicGlja0J5IiwicHJvcCIsInRvUGFpcnMiLCJ0b1BhaXJzSW4iLCJjYW1lbENhc2UiLCJ3b3JkIiwidG9Mb3dlckNhc2UiLCJjYXBpdGFsaXplIiwidXBwZXJGaXJzdCIsImtlYmFiQ2FzZSIsImxvd2VyQ2FzZSIsImxvd2VyRmlyc3QiLCJzbmFrZUNhc2UiLCJzdGFydENhc2UiLCJ1cHBlckNhc2UiLCJ0b1VwcGVyQ2FzZSIsInBhdHRlcm4iLCJoYXNVbmljb2RlV29yZCIsInVuaWNvZGVXb3JkcyIsImFzY2lpV29yZHMiLCJhdHRlbXB0IiwiYmluZEFsbCIsIm1ldGhvZE5hbWVzIiwiZmxvdyIsImZsb3dSaWdodCIsIm1ldGhvZCIsIm1ldGhvZE9mIiwibWl4aW4iLCJvdmVyIiwib3ZlckV2ZXJ5Iiwib3ZlclNvbWUiLCJiYXNlUHJvcGVydHlEZWVwIiwicmFuZ2UiLCJyYW5nZVJpZ2h0IiwiYXVnZW5kIiwiYWRkZW5kIiwiZGl2aWRlIiwiZGl2aWRlbmQiLCJkaXZpc29yIiwibXVsdGlwbHkiLCJtdWx0aXBsaWVyIiwibXVsdGlwbGljYW5kIiwicm91bmQiLCJzdWJ0cmFjdCIsIm1pbnVlbmQiLCJzdWJ0cmFoZW5kIiwiYWZ0ZXIiLCJjYXN0QXJyYXkiLCJjaHVuayIsImNvbXBhY3QiLCJjb25jYXQiLCJjb25kIiwiY29uZm9ybXMiLCJiYXNlQ29uZm9ybXMiLCJwcm9wZXJ0aWVzIiwiY3VycnkiLCJjdXJyeVJpZ2h0IiwiZHJvcCIsImRyb3BSaWdodCIsImRyb3BSaWdodFdoaWxlIiwiZHJvcFdoaWxlIiwiZmlsbCIsImJhc2VGaWxsIiwiZmlsdGVyIiwiZmxhdE1hcCIsImZsYXRNYXBEZWVwIiwiZmxhdE1hcERlcHRoIiwiZmxhdHRlbkRlZXAiLCJmbGF0dGVuRGVwdGgiLCJmbGlwIiwiZnJvbVBhaXJzIiwiZnVuY3Rpb25zIiwiZnVuY3Rpb25zSW4iLCJpbml0aWFsIiwibWFwS2V5cyIsIm1hcFZhbHVlcyIsIm1hdGNoZXMiLCJtYXRjaGVzUHJvcGVydHkiLCJudGhBcmciLCJvbWl0QnkiLCJvbmNlIiwib3JkZXJCeSIsInByb3BlcnR5T2YiLCJwdWxsQWxsQnkiLCJwdWxsQWxsV2l0aCIsInJlamVjdCIsInJlbW92ZSIsInJlc3QiLCJzYW1wbGVTaXplIiwic2V0V2l0aCIsInNodWZmbGUiLCJzb3J0ZWRVbmlxIiwic29ydGVkVW5pcUJ5Iiwic2VwYXJhdG9yIiwibGltaXQiLCJzcHJlYWQiLCJ0YWlsIiwidGFrZSIsInRha2VSaWdodCIsInRha2VSaWdodFdoaWxlIiwidGFrZVdoaWxlIiwidGFwIiwidGhyb3R0bGUiLCJ0b1BhdGgiLCJpc0Fyckxpa2UiLCJ1bmFyeSIsInVuaXEiLCJ1bmlxQnkiLCJ1bmlxV2l0aCIsInVuc2V0IiwidXBkYXRlIiwidXBkYXRlV2l0aCIsInZhbHVlc0luIiwid3JhcCIsInppcE9iamVjdCIsInppcE9iamVjdERlZXAiLCJlbnRyaWVzSW4iLCJleHRlbmQiLCJleHRlbmRXaXRoIiwiY2xhbXAiLCJjbG9uZURlZXAiLCJjbG9uZURlZXBXaXRoIiwiY2xvbmVXaXRoIiwiY29uZm9ybXNUbyIsImRlZmF1bHRUbyIsImVuZHNXaXRoIiwidGFyZ2V0IiwicG9zaXRpb24iLCJlc2NhcGUiLCJlc2NhcGVSZWdFeHAiLCJldmVyeSIsImZpbmRLZXkiLCJmaW5kTGFzdEtleSIsImZvckluIiwiZm9ySW5SaWdodCIsImZvck93biIsImZvck93blJpZ2h0IiwiaW5SYW5nZSIsImJhc2VJblJhbmdlIiwiaXNCb29sZWFuIiwiaXNFbGVtZW50IiwiaXNFbXB0eSIsImlzRXF1YWwiLCJpc0VxdWFsV2l0aCIsImlzTWF0Y2giLCJpc01hdGNoV2l0aCIsImlzTmFOIiwiaXNOYXRpdmUiLCJpc05pbCIsImlzTnVsbCIsImlzU2FmZUludGVnZXIiLCJpc1VuZGVmaW5lZCIsImlzV2Vha01hcCIsImlzV2Vha1NldCIsImxhc3RJbmRleE9mIiwic3RyaWN0TGFzdEluZGV4T2YiLCJtYXhCeSIsIm1lYW4iLCJtZWFuQnkiLCJtaW5CeSIsInN0dWJPYmplY3QiLCJzdHViU3RyaW5nIiwic3R1YlRydWUiLCJudGgiLCJub0NvbmZsaWN0IiwicGFkIiwic3RyTGVuZ3RoIiwicGFkRW5kIiwicGFkU3RhcnQiLCJyYWRpeCIsImZsb2F0aW5nIiwidGVtcCIsInJlZHVjZSIsInJlZHVjZVJpZ2h0IiwicmVwZWF0Iiwic2FtcGxlIiwic29tZSIsInNvcnRlZEluZGV4Iiwic29ydGVkSW5kZXhCeSIsInNvcnRlZEluZGV4T2YiLCJzb3J0ZWRMYXN0SW5kZXgiLCJzb3J0ZWRMYXN0SW5kZXhCeSIsInNvcnRlZExhc3RJbmRleE9mIiwic3RhcnRzV2l0aCIsInN1bSIsInN1bUJ5IiwidGVtcGxhdGUiLCJzZXR0aW5ncyIsImlzRXNjYXBpbmciLCJpc0V2YWx1YXRpbmciLCJpbXBvcnRzIiwiaW1wb3J0c0tleXMiLCJpbXBvcnRzVmFsdWVzIiwiaW50ZXJwb2xhdGUiLCJyZURlbGltaXRlcnMiLCJldmFsdWF0ZSIsInNvdXJjZVVSTCIsImVzY2FwZVZhbHVlIiwiaW50ZXJwb2xhdGVWYWx1ZSIsImVzVGVtcGxhdGVWYWx1ZSIsImV2YWx1YXRlVmFsdWUiLCJ2YXJpYWJsZSIsInRpbWVzIiwidG9Mb3dlciIsInRvU2FmZUludGVnZXIiLCJ0b1VwcGVyIiwidHJpbSIsInRyaW1FbmQiLCJ0cmltU3RhcnQiLCJ0cnVuY2F0ZSIsIm9taXNzaW9uIiwic2VhcmNoIiwic3Vic3RyaW5nIiwibmV3RW5kIiwidW5lc2NhcGUiLCJ1bmlxdWVJZCIsInByZWZpeCIsImVhY2giLCJlYWNoUmlnaHQiLCJmaXJzdCIsIlZFUlNJT04iLCJpc0ZpbHRlciIsInRha2VOYW1lIiwiZHJvcE5hbWUiLCJjaGVja0l0ZXJhdGVlIiwiaXNUYWtlciIsImxvZGFzaEZ1bmMiLCJyZXRVbndyYXBwZWQiLCJpc0xhenkiLCJ1c2VMYXp5IiwiaXNIeWJyaWQiLCJpc1Vud3JhcHBlZCIsIm9ubHlMYXp5IiwiY2hhaW5OYW1lIiwiZGlyIiwiaXNSaWdodCIsInZpZXciLCJnZXRWaWV3IiwiaXRlckxlbmd0aCIsInRha2VDb3VudCIsIml0ZXJJbmRleCIsImNvbW1pdCIsIndyYXBwZWQiLCJ0b0pTT04iLCJnIiwid2luZG93IiwiUmVhY3RJcyIsIlJFQUNUX1NUQVRJQ1MiLCJjaGlsZENvbnRleHRUeXBlcyIsImNvbnRleHRUeXBlIiwiY29udGV4dFR5cGVzIiwiZGVmYXVsdFByb3BzIiwiZGlzcGxheU5hbWUiLCJnZXREZWZhdWx0UHJvcHMiLCJnZXREZXJpdmVkU3RhdGVGcm9tRXJyb3IiLCJnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMiLCJtaXhpbnMiLCJwcm9wVHlwZXMiLCJLTk9XTl9TVEFUSUNTIiwiY2FsbGVyIiwiY2FsbGVlIiwiTUVNT19TVEFUSUNTIiwiY29tcGFyZSIsIlRZUEVfU1RBVElDUyIsImdldFN0YXRpY3MiLCJjb21wb25lbnQiLCJpc01lbW8iLCJGb3J3YXJkUmVmIiwicmVuZGVyIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIm9iamVjdFByb3RvdHlwZSIsImhvaXN0Tm9uUmVhY3RTdGF0aWNzIiwidGFyZ2V0Q29tcG9uZW50Iiwic291cmNlQ29tcG9uZW50IiwiYmxhY2tsaXN0IiwiaW5oZXJpdGVkQ29tcG9uZW50IiwidGFyZ2V0U3RhdGljcyIsInNvdXJjZVN0YXRpY3MiLCJkZXNjcmlwdG9yIiwibGlzdENhY2hlQ2xlYXIiLCJsaXN0Q2FjaGVEZWxldGUiLCJsaXN0Q2FjaGVHZXQiLCJsaXN0Q2FjaGVIYXMiLCJsaXN0Q2FjaGVTZXQiLCJpc0tleWFibGUiLCJ3ZWJwYWNrUG9seWZpbGwiLCJkZXByZWNhdGUiLCJjaGlsZHJlbiIsImNoZWNrRENFIiwiX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fIiwiZXJyIiwiY29uc29sZSIsInN1YkNsYXNzIiwic3VwZXJDbGFzcyIsIl9fcHJvdG9fXyIsImlzYXJyYXkiLCJwYXRoVG9SZWdleHAiLCJwYXJzZSIsImNvbXBpbGUiLCJzdHIiLCJ0b2tlbnNUb0Z1bmN0aW9uIiwidG9rZW5zVG9SZWdFeHAiLCJQQVRIX1JFR0VYUCIsInJlcyIsInRva2VucyIsImRlZmF1bHREZWxpbWl0ZXIiLCJkZWxpbWl0ZXIiLCJlc2NhcGVkIiwiY2FwdHVyZSIsIm1vZGlmaWVyIiwiYXN0ZXJpc2siLCJvcHRpb25hbCIsImVzY2FwZUdyb3VwIiwiZXNjYXBlU3RyaW5nIiwic3Vic3RyIiwiZW5jb2RlVVJJQ29tcG9uZW50UHJldHR5IiwiZW5jb2RlVVJJIiwib2JqIiwib3B0cyIsImVuY29kZSIsInByZXR0eSIsImVuY29kZVVSSUNvbXBvbmVudCIsInRva2VuIiwic2VnbWVudCIsIkpTT04iLCJzdHJpbmdpZnkiLCJqIiwiYXR0YWNoS2V5cyIsInJlIiwiZmxhZ3MiLCJzZW5zaXRpdmUiLCJzdHJpY3QiLCJyb3V0ZSIsImVuZHNXaXRoRGVsaW1pdGVyIiwiZ3JvdXBzIiwicmVnZXhwVG9SZWdleHAiLCJwYXJ0cyIsImFycmF5VG9SZWdleHAiLCJzdHJpbmdUb1JlZ2V4cCIsInByb3BJc0VudW1lcmFibGUiLCJ0b09iamVjdCIsInZhbCIsInRlc3QxIiwidGVzdDIiLCJmcm9tQ2hhckNvZGUiLCJ0ZXN0MyIsImxldHRlciIsInNob3VsZFVzZU5hdGl2ZSIsImZyb20iLCJzeW1ib2xzIiwidG8iLCJiYXNlSXNUeXBlZEFycmF5Iiwic3VwZXJfIiwid3JpdGFibGUiLCJjb25maWd1cmFibGUiLCJ1IiwiTiIsInByZWZpbHRlciIsIm5vcm1hbGl6ZSIsImgiLCJ5IiwidiIsImxocyIsInJocyIsInciLCJ4IiwiUyIsImtpbmQiLCJpdGVtIiwiRiIsImNvbG9yIiwiZ3JvdXBDb2xsYXBzZWQiLCJsb2ciLCJ0ZXh0IiwiUCIsImdyb3VwRW5kIiwibG9nZ2VyIiwiYWN0aW9uVHJhbnNmb3JtZXIiLCJ0aXRsZUZvcm1hdHRlciIsInRpbWVzdGFtcCIsImR1cmF0aW9uIiwidG9GaXhlZCIsImNvbGxhcHNlZCIsImNvbG9ycyIsImxldmVsIiwiZGlmZiIsInN0YXJ0ZWQiLCJzdGFydGVkVGltZSIsInByZXZTdGF0ZSIsInRvb2siLCJuZXh0U3RhdGUiLCJrIiwiRCIsIkUiLCJ0aXRsZSIsIkEiLCJPIiwiQyIsIkwiLCJUIiwiTSIsInN0YXRlVHJhbnNmb3JtZXIiLCJlcnJvclRyYW5zZm9ybWVyIiwibG9nRXJyb3JzIiwiZGlmZlByZWRpY2F0ZSIsImdldFN0YXRlIiwiZGlzcGF0Y2giLCJnZXRIb3VycyIsImdldE1pbnV0ZXMiLCJnZXRTZWNvbmRzIiwiZ2V0TWlsbGlzZWNvbmRzIiwicGVyZm9ybWFuY2UiLCJEZWVwRGlmZiIsImRlZmluZVByb3BlcnRpZXMiLCJvYnNlcnZhYmxlRGlmZiIsImFwcGx5RGlmZiIsImFwcGx5Q2hhbmdlIiwicmV2ZXJ0Q2hhbmdlIiwiaXNDb25mbGljdCIsInRyYW5zZm9ybWVyIiwiY3JlYXRlTG9nZ2VyIiwiZGVmYXVsdCIsInN5bWJvbE9ic2VydmFibGVQb255ZmlsbCIsIm9ic2VydmFibGUiLCJmb3IiLCJxIiwiYWEiLCJiYSIsImNhIiwieiIsIkIiLCJpc01vdW50ZWQiLCJlbnF1ZXVlRm9yY2VVcGRhdGUiLCJlbnF1ZXVlUmVwbGFjZVN0YXRlIiwiZW5xdWV1ZVNldFN0YXRlIiwicmVmcyIsImlzUmVhY3RDb21wb25lbnQiLCJzZXRTdGF0ZSIsImZvcmNlVXBkYXRlIiwiRyIsImlzUHVyZVJlYWN0Q29tcG9uZW50IiwiSCIsIkkiLCJzdXNwZW5zZSIsIkoiLCJLIiwicmVmIiwiX19zZWxmIiwiX19zb3VyY2UiLCIkJHR5cGVvZiIsIl9vd25lciIsIlEiLCJrZXlQcmVmaXgiLCJSIiwiVSIsImVhIiwiZmEiLCJWIiwiZGEiLCJXIiwiWCIsIkNoaWxkcmVuIiwib25seSIsImNyZWF0ZVJlZiIsIkNvbXBvbmVudCIsIlB1cmVDb21wb25lbnQiLCJjcmVhdGVDb250ZXh0IiwiX2NhbGN1bGF0ZUNoYW5nZWRCaXRzIiwiX2N1cnJlbnRWYWx1ZSIsIl9jdXJyZW50VmFsdWUyIiwiX3RocmVhZENvdW50IiwiUHJvdmlkZXIiLCJDb25zdW1lciIsIl9jb250ZXh0IiwiZm9yd2FyZFJlZiIsImxhenkiLCJfY3RvciIsIl9zdGF0dXMiLCJfcmVzdWx0IiwibWVtbyIsInVzZUNhbGxiYWNrIiwidXNlQ29udGV4dCIsInVzZUVmZmVjdCIsInVzZUltcGVyYXRpdmVIYW5kbGUiLCJ1c2VEZWJ1Z1ZhbHVlIiwidXNlTGF5b3V0RWZmZWN0IiwidXNlTWVtbyIsInVzZVJlZHVjZXIiLCJ1c2VSZWYiLCJ1c2VTdGF0ZSIsIkZyYWdtZW50IiwiUHJvZmlsZXIiLCJTdHJpY3RNb2RlIiwiU3VzcGVuc2UiLCJ1bnN0YWJsZV9TdXNwZW5zZUxpc3QiLCJjcmVhdGVFbGVtZW50IiwiY2xvbmVFbGVtZW50IiwiY3JlYXRlRmFjdG9yeSIsImlzVmFsaWRFbGVtZW50IiwidmVyc2lvbiIsInVuc3RhYmxlX3dpdGhTdXNwZW5zZUNvbmZpZyIsIl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEIiwiUmVhY3RDdXJyZW50RGlzcGF0Y2hlciIsIlJlYWN0Q3VycmVudEJhdGNoQ29uZmlnIiwiUmVhY3RDdXJyZW50T3duZXIiLCJJc1NvbWVSZW5kZXJlckFjdGluZyIsIlkiLCJaIiwiZXh0cmFjdEV2ZW50cyIsImV2ZW50VHlwZXMiLCJwaGFzZWRSZWdpc3RyYXRpb25OYW1lcyIsImhhIiwicmVnaXN0cmF0aW9uTmFtZSIsImlhIiwiamEiLCJkZXBlbmRlbmNpZXMiLCJsYSIsIm1hIiwibmEiLCJvYSIsInBhIiwib25FcnJvciIsInFhIiwic2EiLCJ0YSIsInZhIiwid2EiLCJjdXJyZW50VGFyZ2V0IiwicmEiLCJ4YSIsInlhIiwiemEiLCJBYSIsIl9kaXNwYXRjaExpc3RlbmVycyIsIl9kaXNwYXRjaEluc3RhbmNlcyIsImlzUHJvcGFnYXRpb25TdG9wcGVkIiwiaXNQZXJzaXN0ZW50IiwicmVsZWFzZSIsIkJhIiwiQ2EiLCJpbmplY3RFdmVudFBsdWdpbk9yZGVyIiwiaW5qZWN0RXZlbnRQbHVnaW5zQnlOYW1lIiwiRGEiLCJzdGF0ZU5vZGUiLCJkaXNhYmxlZCIsIkVhIiwiRmEiLCJHYSIsIkhhIiwicGFyZW50Tm9kZSIsIklhIiwiSmEiLCJLYSIsIkxhIiwicmV0dXJuIiwiTWEiLCJkaXNwYXRjaENvbmZpZyIsIk5hIiwiX3RhcmdldEluc3QiLCJPYSIsIlBhIiwiUWEiLCJSYSIsImRvY3VtZW50IiwiU2EiLCJUYSIsImFuaW1hdGlvbmVuZCIsImFuaW1hdGlvbml0ZXJhdGlvbiIsImFuaW1hdGlvbnN0YXJ0IiwidHJhbnNpdGlvbmVuZCIsIlVhIiwiVmEiLCJXYSIsInN0eWxlIiwiYW5pbWF0aW9uIiwidHJhbnNpdGlvbiIsIlhhIiwiWWEiLCJaYSIsImFiIiwiYmIiLCJjYiIsImRiIiwiZWIiLCJmYiIsInRleHRDb250ZW50IiwiZ2IiLCJoYiIsIm5hdGl2ZUV2ZW50IiwiSW50ZXJmYWNlIiwiaXNEZWZhdWx0UHJldmVudGVkIiwiZGVmYXVsdFByZXZlbnRlZCIsInJldHVyblZhbHVlIiwiamIiLCJldmVudFBvb2wiLCJrYiIsImRlc3RydWN0b3IiLCJpYiIsImdldFBvb2xlZCIsInByZXZlbnREZWZhdWx0Iiwic3RvcFByb3BhZ2F0aW9uIiwiY2FuY2VsQnViYmxlIiwicGVyc2lzdCIsImV2ZW50UGhhc2UiLCJidWJibGVzIiwiY2FuY2VsYWJsZSIsInRpbWVTdGFtcCIsImlzVHJ1c3RlZCIsImxiIiwibWIiLCJuYiIsIm9iIiwicGIiLCJkb2N1bWVudE1vZGUiLCJxYiIsInNiIiwidGIiLCJ1YiIsImJlZm9yZUlucHV0IiwiYnViYmxlZCIsImNhcHR1cmVkIiwiY29tcG9zaXRpb25FbmQiLCJjb21wb3NpdGlvblN0YXJ0IiwiY29tcG9zaXRpb25VcGRhdGUiLCJ2YiIsIndiIiwia2V5Q29kZSIsInhiIiwiZGV0YWlsIiwieWIiLCJDYiIsImxvY2FsZSIsIndoaWNoIiwiQWIiLCJjdHJsS2V5IiwiYWx0S2V5IiwibWV0YUtleSIsImNoYXIiLCJCYiIsIkRiIiwiRWIiLCJGYiIsIkdiIiwiSGIiLCJJYiIsIkpiIiwiS2IiLCJMYiIsIk1iIiwiTmIiLCJPYiIsIlBiIiwiZGF0ZSIsImRhdGV0aW1lIiwiZW1haWwiLCJtb250aCIsInBhc3N3b3JkIiwidGVsIiwidXJsIiwid2VlayIsIlFiIiwibm9kZU5hbWUiLCJSYiIsInNyY0VsZW1lbnQiLCJjb3JyZXNwb25kaW5nVXNlRWxlbWVudCIsIlNiIiwic2V0QXR0cmlidXRlIiwiVGIiLCJWYiIsIl92YWx1ZVRyYWNrZXIiLCJzZXRWYWx1ZSIsInN0b3BUcmFja2luZyIsIlViIiwiV2IiLCJjaGVja2VkIiwiWGIiLCJZYiIsIlpiIiwiJGIiLCJhYyIsImJjIiwiY2MiLCJkYyIsImVjIiwiZmMiLCJnYyIsImhjIiwiaWMiLCJqYyIsImtjIiwibGMiLCJtYyIsIm9jIiwicGMiLCJfZGVidWdPd25lciIsIl9kZWJ1Z1NvdXJjZSIsImZpbGVOYW1lIiwibGluZU51bWJlciIsInFjIiwicmMiLCJzYyIsInRjIiwiYWNjZXB0c0Jvb2xlYW5zIiwiYXR0cmlidXRlTmFtZSIsImF0dHJpYnV0ZU5hbWVzcGFjZSIsIm11c3RVc2VQcm9wZXJ0eSIsInByb3BlcnR5TmFtZSIsInNhbml0aXplVVJMIiwieGMiLCJ5YyIsInpjIiwidmMiLCJ3YyIsInVjIiwicmVtb3ZlQXR0cmlidXRlIiwic2V0QXR0cmlidXRlTlMiLCJBYyIsIkJjIiwiZGVmYXVsdENoZWNrZWQiLCJfd3JhcHBlclN0YXRlIiwiaW5pdGlhbENoZWNrZWQiLCJDYyIsImluaXRpYWxWYWx1ZSIsImNvbnRyb2xsZWQiLCJEYyIsIkVjIiwiRmMiLCJHYyIsIm93bmVyRG9jdW1lbnQiLCJhY3RpdmVFbGVtZW50IiwieGxpbmtIcmVmIiwiSGMiLCJjaGFuZ2UiLCJJYyIsIkpjIiwiS2MiLCJMYyIsIk1jIiwiTmMiLCJPYyIsIlBjIiwiZGV0YWNoRXZlbnQiLCJRYyIsIlJjIiwiYXR0YWNoRXZlbnQiLCJTYyIsIlRjIiwiVWMiLCJWYyIsIl9pc0lucHV0RXZlbnRTdXBwb3J0ZWQiLCJXYyIsIlhjIiwiQWx0IiwiQ29udHJvbCIsIk1ldGEiLCJTaGlmdCIsIlljIiwiZ2V0TW9kaWZpZXJTdGF0ZSIsIlpjIiwiJGMiLCJhZCIsImJkIiwiY2QiLCJkZCIsInNjcmVlblgiLCJzY3JlZW5ZIiwiY2xpZW50WCIsImNsaWVudFkiLCJwYWdlWCIsInBhZ2VZIiwic2hpZnRLZXkiLCJidXR0b24iLCJidXR0b25zIiwicmVsYXRlZFRhcmdldCIsImZyb21FbGVtZW50IiwidG9FbGVtZW50IiwibW92ZW1lbnRYIiwibW92ZW1lbnRZIiwiZWQiLCJwb2ludGVySWQiLCJ3aWR0aCIsImhlaWdodCIsInByZXNzdXJlIiwidGFuZ2VudGlhbFByZXNzdXJlIiwidGlsdFgiLCJ0aWx0WSIsInR3aXN0IiwicG9pbnRlclR5cGUiLCJpc1ByaW1hcnkiLCJmZCIsIm1vdXNlRW50ZXIiLCJtb3VzZUxlYXZlIiwicG9pbnRlckVudGVyIiwicG9pbnRlckxlYXZlIiwiZ2QiLCJkZWZhdWx0VmlldyIsInBhcmVudFdpbmRvdyIsImFsdGVybmF0ZSIsImhkIiwiamQiLCJrZCIsInJlc3BvbmRlciIsImxkIiwiZWZmZWN0VGFnIiwib2QiLCJxZCIsImNoaWxkIiwic2libGluZyIsInBkIiwicmQiLCJhbmltYXRpb25OYW1lIiwiZWxhcHNlZFRpbWUiLCJwc2V1ZG9FbGVtZW50Iiwic2QiLCJjbGlwYm9hcmREYXRhIiwidGQiLCJ1ZCIsImNoYXJDb2RlIiwidmQiLCJFc2MiLCJTcGFjZWJhciIsIkxlZnQiLCJVcCIsIlJpZ2h0IiwiRG93biIsIkRlbCIsIldpbiIsIk1lbnUiLCJBcHBzIiwiU2Nyb2xsIiwiTW96UHJpbnRhYmxlS2V5Iiwid2QiLCI4IiwiOSIsIjEyIiwiMTMiLCIxNiIsIjE3IiwiMTgiLCIxOSIsIjIwIiwiMjciLCIzMiIsIjMzIiwiMzQiLCIzNSIsIjM2IiwiMzciLCIzOCIsIjM5IiwiNDAiLCI0NSIsIjQ2IiwiMTEyIiwiMTEzIiwiMTE0IiwiMTE1IiwiMTE2IiwiMTE3IiwiMTE4IiwiMTE5IiwiMTIwIiwiMTIxIiwiMTIyIiwiMTIzIiwiMTQ0IiwiMTQ1IiwiMjI0IiwieGQiLCJsb2NhdGlvbiIsInlkIiwiZGF0YVRyYW5zZmVyIiwiemQiLCJ0b3VjaGVzIiwidGFyZ2V0VG91Y2hlcyIsImNoYW5nZWRUb3VjaGVzIiwiQWQiLCJCZCIsImRlbHRhWCIsIndoZWVsRGVsdGFYIiwiZGVsdGFZIiwid2hlZWxEZWx0YVkiLCJ3aGVlbERlbHRhIiwiZGVsdGFaIiwiZGVsdGFNb2RlIiwiQ2QiLCJEZCIsIkVkIiwiRmQiLCJHZCIsIkhkIiwiSWQiLCJKZCIsIktkIiwiTGQiLCJldmVudFByaW9yaXR5IiwiTWQiLCJnZXRFdmVudFByaW9yaXR5IiwiTmQiLCJPZCIsIlBkIiwidGFyZ2V0SW5zdCIsImFuY2VzdG9ycyIsImNvbnRhaW5lckluZm8iLCJ0b3BMZXZlbFR5cGUiLCJRZCIsIlJkIiwiVWQiLCJhZGRFdmVudExpc3RlbmVyIiwiVmQiLCJXZCIsIlhkIiwiYm9keSIsIllkIiwiZmlyc3RDaGlsZCIsIlpkIiwibm9kZSIsIm5leHRTaWJsaW5nIiwiYWUiLCJIVE1MSUZyYW1lRWxlbWVudCIsImNvbnRlbnRXaW5kb3ciLCJocmVmIiwiYmUiLCJjb250ZW50RWRpdGFibGUiLCJjZSIsImRlIiwic2VsZWN0IiwiZWUiLCJmZSIsImdlIiwiaGUiLCJpZSIsInNlbGVjdGlvblN0YXJ0Iiwic2VsZWN0aW9uRW5kIiwiYW5jaG9yTm9kZSIsImdldFNlbGVjdGlvbiIsImFuY2hvck9mZnNldCIsImZvY3VzTm9kZSIsImZvY3VzT2Zmc2V0IiwiamUiLCJvblNlbGVjdCIsImxlIiwia2UiLCJtZSIsInNlbGVjdGVkIiwiZGVmYXVsdFNlbGVjdGVkIiwibmUiLCJkYW5nZXJvdXNseVNldElubmVySFRNTCIsIm9lIiwicGUiLCJxZSIsIlNpbXBsZUV2ZW50UGx1Z2luIiwiRW50ZXJMZWF2ZUV2ZW50UGx1Z2luIiwiQ2hhbmdlRXZlbnRQbHVnaW4iLCJTZWxlY3RFdmVudFBsdWdpbiIsIkJlZm9yZUlucHV0RXZlbnRQbHVnaW4iLCJodG1sIiwibWF0aG1sIiwic3ZnIiwic2UiLCJ0ZSIsInVlIiwidmUiLCJNU0FwcCIsImV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uIiwibmFtZXNwYWNlVVJJIiwiaW5uZXJIVE1MIiwicmVtb3ZlQ2hpbGQiLCJhcHBlbmRDaGlsZCIsIndlIiwibGFzdENoaWxkIiwibm9kZVZhbHVlIiwieGUiLCJhbmltYXRpb25JdGVyYXRpb25Db3VudCIsImJvcmRlckltYWdlT3V0c2V0IiwiYm9yZGVySW1hZ2VTbGljZSIsImJvcmRlckltYWdlV2lkdGgiLCJib3hGbGV4IiwiYm94RmxleEdyb3VwIiwiYm94T3JkaW5hbEdyb3VwIiwiY29sdW1uQ291bnQiLCJjb2x1bW5zIiwiZmxleCIsImZsZXhHcm93IiwiZmxleFBvc2l0aXZlIiwiZmxleFNocmluayIsImZsZXhOZWdhdGl2ZSIsImZsZXhPcmRlciIsImdyaWRBcmVhIiwiZ3JpZFJvdyIsImdyaWRSb3dFbmQiLCJncmlkUm93U3BhbiIsImdyaWRSb3dTdGFydCIsImdyaWRDb2x1bW4iLCJncmlkQ29sdW1uRW5kIiwiZ3JpZENvbHVtblNwYW4iLCJncmlkQ29sdW1uU3RhcnQiLCJmb250V2VpZ2h0IiwibGluZUNsYW1wIiwibGluZUhlaWdodCIsIm9wYWNpdHkiLCJvcnBoYW5zIiwidGFiU2l6ZSIsIndpZG93cyIsInpJbmRleCIsInpvb20iLCJmaWxsT3BhY2l0eSIsImZsb29kT3BhY2l0eSIsInN0b3BPcGFjaXR5Iiwic3Ryb2tlRGFzaGFycmF5Iiwic3Ryb2tlRGFzaG9mZnNldCIsInN0cm9rZU1pdGVybGltaXQiLCJzdHJva2VPcGFjaXR5Iiwic3Ryb2tlV2lkdGgiLCJ5ZSIsInplIiwiQWUiLCJzZXRQcm9wZXJ0eSIsIkNlIiwibWVudWl0ZW0iLCJhcmVhIiwiYmFzZSIsImJyIiwiY29sIiwiZW1iZWQiLCJociIsImltZyIsImtleWdlbiIsImxpbmsiLCJtZXRhIiwicGFyYW0iLCJ0cmFjayIsIndiciIsIkRlIiwiRWUiLCJpcyIsIkZlIiwiR2UiLCJIZSIsIkllIiwiSmUiLCJhdXRvRm9jdXMiLCJLZSIsIl9faHRtbCIsIkxlIiwiTWUiLCJOZSIsIk9lIiwiUGUiLCJRZSIsIlJlIiwiU2UiLCJfX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0IiwiX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQiLCJUZSIsIlVlIiwiVmUiLCJXZSIsImdldENoaWxkQ29udGV4dCIsIlhlIiwiX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQiLCJZZSIsIlplIiwidW5zdGFibGVfcnVuV2l0aFByaW9yaXR5IiwiJGUiLCJ1bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrIiwiYWYiLCJ1bnN0YWJsZV9jYW5jZWxDYWxsYmFjayIsImJmIiwidW5zdGFibGVfc2hvdWxkWWllbGQiLCJjZiIsInVuc3RhYmxlX3JlcXVlc3RQYWludCIsImRmIiwidW5zdGFibGVfbm93IiwiZWYiLCJ1bnN0YWJsZV9nZXRDdXJyZW50UHJpb3JpdHlMZXZlbCIsImZmIiwidW5zdGFibGVfSW1tZWRpYXRlUHJpb3JpdHkiLCJoZiIsInVuc3RhYmxlX1VzZXJCbG9ja2luZ1ByaW9yaXR5IiwiamYiLCJ1bnN0YWJsZV9Ob3JtYWxQcmlvcml0eSIsImtmIiwidW5zdGFibGVfTG93UHJpb3JpdHkiLCJsZiIsInVuc3RhYmxlX0lkbGVQcmlvcml0eSIsIm1mIiwibmYiLCJvZiIsInBmIiwicWYiLCJyZiIsInNmIiwidGYiLCJ1ZiIsInZmIiwid2YiLCJ4ZiIsInlmIiwiemYiLCJBZiIsIkNmIiwiRGYiLCJFZiIsIkZmIiwiR2YiLCJIZiIsIklmIiwiSmYiLCJjaGlsZEV4cGlyYXRpb25UaW1lIiwiS2YiLCJmaXJzdENvbnRleHQiLCJleHBpcmF0aW9uVGltZSIsIkxmIiwiTWYiLCJvYnNlcnZlZEJpdHMiLCJyZXNwb25kZXJzIiwiTmYiLCJPZiIsImJhc2VTdGF0ZSIsImZpcnN0VXBkYXRlIiwibGFzdFVwZGF0ZSIsImZpcnN0Q2FwdHVyZWRVcGRhdGUiLCJsYXN0Q2FwdHVyZWRVcGRhdGUiLCJmaXJzdEVmZmVjdCIsImxhc3RFZmZlY3QiLCJmaXJzdENhcHR1cmVkRWZmZWN0IiwibGFzdENhcHR1cmVkRWZmZWN0IiwiUGYiLCJRZiIsInN1c3BlbnNlQ29uZmlnIiwicGF5bG9hZCIsIm5leHRFZmZlY3QiLCJSZiIsIlNmIiwidXBkYXRlUXVldWUiLCJtZW1vaXplZFN0YXRlIiwiVGYiLCJVZiIsIlZmIiwiV2YiLCJYZiIsIllmIiwiWmYiLCIkZiIsImFnIiwiYmciLCJmZyIsIl9yZWFjdEludGVybmFsRmliZXIiLCJjZyIsImRnIiwiZWciLCJnZyIsInNob3VsZENvbXBvbmVudFVwZGF0ZSIsImhnIiwic3RhdGUiLCJpZyIsImNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMiLCJVTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyIsImpnIiwiZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUiLCJVTlNBRkVfY29tcG9uZW50V2lsbE1vdW50IiwiY29tcG9uZW50V2lsbE1vdW50IiwiY29tcG9uZW50RGlkTW91bnQiLCJrZyIsImxnIiwiX3N0cmluZ1JlZiIsIm1nIiwibmciLCJvZyIsInBnIiwiZWxlbWVudFR5cGUiLCJxZyIsImltcGxlbWVudGF0aW9uIiwicmciLCJzZyIsInJiIiwiZGVsZXRlIiwiQmUiLCJ0ZyIsInVnIiwidmciLCJ3ZyIsInhnIiwieWciLCJ6ZyIsIkFnIiwiZG9jdW1lbnRFbGVtZW50IiwidGFnTmFtZSIsIkJnIiwiQ2ciLCJEZyIsIkVnIiwiRmciLCJHZyIsIkhnIiwibWVtb2l6ZWRQcm9wcyIsInJldmVhbE9yZGVyIiwiSWciLCJKZyIsIktnIiwiTGciLCJNZyIsIk5nIiwiT2ciLCJQZyIsIlFnIiwiUmciLCJTZyIsIlRnIiwiVWciLCJWZyIsIldnIiwiWGciLCJZZyIsIlpnIiwiJGciLCJhaCIsImJoIiwiY2giLCJkaCIsImVoIiwiZmgiLCJoaCIsImloIiwiamgiLCJxdWV1ZSIsImtoIiwibGgiLCJtaCIsImxhc3RSZW5kZXJlZFJlZHVjZXIiLCJsYXN0UmVuZGVyZWRTdGF0ZSIsImVhZ2VyUmVkdWNlciIsImVhZ2VyU3RhdGUiLCJuaCIsImRlc3Ryb3kiLCJkZXBzIiwib2giLCJwaCIsInFoIiwicmgiLCJzaCIsInJlYWRDb250ZXh0IiwidXNlUmVzcG9uZGVyIiwidGgiLCJ1aCIsInZoIiwid2giLCJ4aCIsInloIiwicGVuZGluZ1Byb3BzIiwiemgiLCJBaCIsIkJoIiwiQ2giLCJEaCIsIkVoIiwiRmgiLCJHaCIsIkhoIiwiSWgiLCJKaCIsIktoIiwiTGgiLCJVTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSIsImNvbXBvbmVudFdpbGxVcGRhdGUiLCJjb21wb25lbnREaWRVcGRhdGUiLCJNaCIsIk5oIiwicGVuZGluZ0NvbnRleHQiLCJPaCIsIlBoIiwiZmFsbGJhY2siLCJ1bnN0YWJsZV9hdm9pZFRoaXNGYWxsYmFjayIsIlFoIiwiaXNCYWNrd2FyZHMiLCJyZW5kZXJpbmciLCJ0YWlsRXhwaXJhdGlvbiIsInRhaWxNb2RlIiwiUmgiLCJTaCIsIlRoIiwiVWgiLCJWaCIsIldoIiwiJGgiLCJhaSIsImJpIiwiaW5zdGFuY2UiLCJvbkNsaWNrIiwib25jbGljayIsImNpIiwiV2Vha1NldCIsImRpIiwiZ2kiLCJmaSIsImhpIiwiaWkiLCJqaSIsImNvbXBvbmVudFdpbGxVbm1vdW50IiwiZWkiLCJraSIsImxpIiwibWkiLCJuaSIsImluc2VydEJlZm9yZSIsIl9yZWFjdFJvb3RDb250YWluZXIiLCJvaSIsIndhc011bHRpcGxlIiwibXVsdGlwbGUiLCJwaSIsImRpc3BsYXkiLCJxaSIsIllpIiwiWmkiLCJ0aGVuIiwic2kiLCJ0aSIsImVsZW1lbnQiLCJ1aSIsInZpIiwid2kiLCJjb21wb25lbnREaWRDYXRjaCIsInhpIiwiY29tcG9uZW50U3RhY2siLCJ5aSIsInppIiwiQWkiLCJCaSIsIkNpIiwiRGkiLCJFaSIsIkZpIiwiR2kiLCJIaSIsIklpIiwiSmkiLCJLaSIsIkxpIiwiTWkiLCJOaSIsIk9pIiwiUGkiLCJRaSIsIlJpIiwiU2kiLCJUaSIsIlVpIiwiVmkiLCJXaSIsInRpbWVvdXRNcyIsIlhpIiwicGluZ1RpbWUiLCJmaXJzdFBlbmRpbmdUaW1lIiwibGFzdFBlbmRpbmdUaW1lIiwiY2FsbGJhY2tFeHBpcmF0aW9uVGltZSIsImNhbGxiYWNrTm9kZSIsIiRpIiwidGltZW91dCIsImFqIiwiYmoiLCJjaiIsImVqIiwiZmoiLCJnaiIsImhqIiwiZmluaXNoZWRXb3JrIiwiZmluaXNoZWRFeHBpcmF0aW9uVGltZSIsInRpbWVvdXRIYW5kbGUiLCJpaiIsImpqIiwicGluZ0NhY2hlIiwia2oiLCJsaiIsImZpcnN0QmF0Y2giLCJfZGVmZXIiLCJfZXhwaXJhdGlvblRpbWUiLCJfb25Db21wbGV0ZSIsImRqIiwiYnVzeU1pbkR1cmF0aW9uTXMiLCJidXN5RGVsYXlNcyIsIm1qIiwiY3JlYXRlRWxlbWVudE5TIiwiY3JlYXRlVGV4dE5vZGUiLCJyYW5nZUNvdW50IiwiemIiLCJmb2N1c2VkRWxlbSIsInNlbGVjdGlvblJhbmdlIiwidWEiLCJnaCIsIm9qIiwiX19yZWFjdEludGVybmFsU25hcHNob3RCZWZvcmVVcGRhdGUiLCIkZCIsImNvbnRhaW5zIiwiY29tcGFyZURvY3VtZW50UG9zaXRpb24iLCJzZXRTdGFydCIsInJlbW92ZUFsbFJhbmdlcyIsImFkZFJhbmdlIiwic2V0RW5kIiwibGVmdCIsInNjcm9sbExlZnQiLCJ0b3AiLCJzY3JvbGxUb3AiLCJmb2N1cyIsIiRhIiwibmMiLCJtZCIsIkZqIiwiWGgiLCJZaCIsIkdqIiwibmQiLCJaaCIsImdmIiwicGoiLCJyaiIsImhpZGRlbiIsIkJmIiwic2oiLCJoeWRyYXRlIiwidW5zdGFibGVfb2JzZXJ2ZWRCaXRzIiwidWoiLCJwZW5kaW5nQ2hpbGRyZW4iLCJ2aiIsIndqIiwieGoiLCJ5aiIsInpqIiwiQmoiLCJfcm9vdCIsIl9jYWxsYmFja3MiLCJfbmV4dCIsIl9oYXNDaGlsZHJlbiIsIl9kaWRDb21wbGV0ZSIsIl9jaGlsZHJlbiIsIkNqIiwiX2RpZENvbW1pdCIsIl9vbkNvbW1pdCIsIkRqIiwiX2ludGVybmFsUm9vdCIsIkVqIiwiSGoiLCJKaiIsImhhc0F0dHJpYnV0ZSIsIklqIiwiS2oiLCJBaiIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJmb3JtIiwidW5tb3VudCIsImNyZWF0ZUJhdGNoIiwiTmoiLCJjcmVhdGVQb3J0YWwiLCJmaW5kRE9NTm9kZSIsInVuc3RhYmxlX3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyIiwidW5tb3VudENvbXBvbmVudEF0Tm9kZSIsInVuc3RhYmxlX2NyZWF0ZVBvcnRhbCIsInVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzIiwidW5zdGFibGVfaW50ZXJhY3RpdmVVcGRhdGVzIiwidW5zdGFibGVfZGlzY3JldGVVcGRhdGVzIiwidW5zdGFibGVfZmx1c2hEaXNjcmV0ZVVwZGF0ZXMiLCJmbHVzaFN5bmMiLCJ1bnN0YWJsZV9jcmVhdGVSb290IiwidW5zdGFibGVfY3JlYXRlU3luY1Jvb3QiLCJ1bnN0YWJsZV9mbHVzaENvbnRyb2xsZWQiLCJFdmVudHMiLCJmaW5kRmliZXJCeUhvc3RJbnN0YW5jZSIsImJ1bmRsZVR5cGUiLCJyZW5kZXJlclBhY2thZ2VOYW1lIiwiaXNEaXNhYmxlZCIsInN1cHBvcnRzRmliZXIiLCJpbmplY3QiLCJvbkNvbW1pdEZpYmVyUm9vdCIsIm9uQ29tbWl0RmliZXJVbm1vdW50IiwidGoiLCJvdmVycmlkZUhvb2tTdGF0ZSIsIm92ZXJyaWRlUHJvcHMiLCJzZXRTdXNwZW5zZUhhbmRsZXIiLCJzY2hlZHVsZVVwZGF0ZSIsImN1cnJlbnREaXNwYXRjaGVyUmVmIiwiZmluZEhvc3RJbnN0YW5jZUJ5RmliZXIiLCJmaW5kSG9zdEluc3RhbmNlc0ZvclJlZnJlc2giLCJzY2hlZHVsZVJlZnJlc2giLCJzY2hlZHVsZVJvb3QiLCJzZXRSZWZyZXNoSGFuZGxlciIsImdldEN1cnJlbnRGaWJlciIsIk9qIiwiUGoiLCJ1bnN0YWJsZV9mb3JjZUZyYW1lUmF0ZSIsIk1lc3NhZ2VDaGFubmVsIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiY2FuY2VsQW5pbWF0aW9uRnJhbWUiLCJwb3N0TWVzc2FnZSIsInBvcnQyIiwicG9ydDEiLCJvbm1lc3NhZ2UiLCJwcmlvcml0eUxldmVsIiwic3RhcnRUaW1lIiwidW5zdGFibGVfbmV4dCIsInVuc3RhYmxlX3dyYXBDYWxsYmFjayIsInVuc3RhYmxlX2NvbnRpbnVlRXhlY3V0aW9uIiwidW5zdGFibGVfcGF1c2VFeGVjdXRpb24iLCJ1bnN0YWJsZV9nZXRGaXJzdENhbGxiYWNrTm9kZSIsInN0YWNrQ2xlYXIiLCJzdGFja0RlbGV0ZSIsInN0YWNrR2V0Iiwic3RhY2tIYXMiLCJzdGFja1NldCIsImlzTWFza2VkIiwibWFwQ2FjaGVDbGVhciIsIm1hcENhY2hlRGVsZXRlIiwibWFwQ2FjaGVHZXQiLCJtYXBDYWNoZUhhcyIsIm1hcENhY2hlU2V0IiwiaGFzaENsZWFyIiwiaGFzaERlbGV0ZSIsImhhc2hHZXQiLCJoYXNoSGFzIiwiaGFzaFNldCIsIm9yaWdpbmFsTW9kdWxlIiwiUmVhY3RQcm9wVHlwZXNTZWNyZXQiLCJlbXB0eUZ1bmN0aW9uIiwiZW1wdHlGdW5jdGlvbldpdGhSZXNldCIsInJlc2V0V2FybmluZ0NhY2hlIiwic2hpbSIsInByb3BOYW1lIiwiY29tcG9uZW50TmFtZSIsInByb3BGdWxsTmFtZSIsInNlY3JldCIsImdldFNoaW0iLCJpc1JlcXVpcmVkIiwiUmVhY3RQcm9wVHlwZXMiLCJib29sIiwiYW55IiwiYXJyYXlPZiIsImluc3RhbmNlT2YiLCJvYmplY3RPZiIsIm9uZU9mIiwib25lT2ZUeXBlIiwic2hhcGUiLCJleGFjdCIsImNoZWNrUHJvcFR5cGVzIiwiUHJvcFR5cGVzIiwidHlwZU9mIiwiQXN5bmNNb2RlIiwiQ29uY3VycmVudE1vZGUiLCJDb250ZXh0Q29uc3VtZXIiLCJDb250ZXh0UHJvdmlkZXIiLCJFbGVtZW50IiwiTGF6eSIsIk1lbW8iLCJQb3J0YWwiLCJpc1ZhbGlkRWxlbWVudFR5cGUiLCJpc0FzeW5jTW9kZSIsImlzQ29uY3VycmVudE1vZGUiLCJpc0NvbnRleHRDb25zdW1lciIsImlzQ29udGV4dFByb3ZpZGVyIiwiaXNGb3J3YXJkUmVmIiwiaXNGcmFnbWVudCIsImlzUG9ydGFsIiwiaXNQcm9maWxlciIsImlzU3RyaWN0TW9kZSIsImlzU3VzcGVuc2UiLCJhcnIiLCJyYW5kb21TdHJpbmciLCJBY3Rpb25UeXBlcyIsIklOSVQiLCJSRVBMQUNFIiwiUFJPQkVfVU5LTk9XTl9BQ1RJT04iLCJjcmVhdGVTdG9yZSIsInJlZHVjZXIiLCJwcmVsb2FkZWRTdGF0ZSIsImVuaGFuY2VyIiwiX3JlZjIiLCJjdXJyZW50UmVkdWNlciIsImN1cnJlbnRTdGF0ZSIsImN1cnJlbnRMaXN0ZW5lcnMiLCJuZXh0TGlzdGVuZXJzIiwiaXNEaXNwYXRjaGluZyIsImVuc3VyZUNhbk11dGF0ZU5leHRMaXN0ZW5lcnMiLCJzdWJzY3JpYmUiLCJsaXN0ZW5lciIsImlzU3Vic2NyaWJlZCIsImxpc3RlbmVycyIsInJlcGxhY2VSZWR1Y2VyIiwibmV4dFJlZHVjZXIiLCJfcmVmIiwib3V0ZXJTdWJzY3JpYmUiLCJvYnNlcnZlciIsIm9ic2VydmVTdGF0ZSIsInVuc3Vic2NyaWJlIiwiZ2V0VW5kZWZpbmVkU3RhdGVFcnJvck1lc3NhZ2UiLCJhY3Rpb25UeXBlIiwiY29tYmluZVJlZHVjZXJzIiwicmVkdWNlcnMiLCJyZWR1Y2VyS2V5cyIsImZpbmFsUmVkdWNlcnMiLCJzaGFwZUFzc2VydGlvbkVycm9yIiwiZmluYWxSZWR1Y2VyS2V5cyIsImFzc2VydFJlZHVjZXJTaGFwZSIsImhhc0NoYW5nZWQiLCJfaSIsIl9rZXkiLCJwcmV2aW91c1N0YXRlRm9yS2V5IiwibmV4dFN0YXRlRm9yS2V5IiwiZXJyb3JNZXNzYWdlIiwiYmluZEFjdGlvbkNyZWF0b3IiLCJhY3Rpb25DcmVhdG9yIiwiX2RlZmluZVByb3BlcnR5Iiwib3duS2V5cyIsImVudW1lcmFibGVPbmx5Iiwic3ltIiwiX29iamVjdFNwcmVhZDIiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzIiwiY29tcG9zZSIsIl9sZW4iLCJhcHBseU1pZGRsZXdhcmUiLCJtaWRkbGV3YXJlcyIsInN0b3JlIiwiX2Rpc3BhdGNoIiwibWlkZGxld2FyZUFQSSIsIm1pZGRsZXdhcmUiLCJyZWNlaXZlQ3VycmVudFVzZXIiLCJ1c2VyIiwiY2xlYXJFcnJvcnMiLCJsb2dpbiIsImZvcm1Vc2VyIiwiJCIsImFqYXgiLCJlcnJvcnMiLCJyZWNlaXZlRXJyb3JzIiwicmVzcG9uc2VKU09OIiwibG9nb3V0IiwiX251bGxTZXNzaW9uIiwiY3VycmVudFVzZXIiLCJyZXF1ZXN0UHJvZHVjdHMiLCJwcm9kdWN0cyIsInJlY2VpdmVBbGxQcm9kdWN0cyIsInJlcXVlc3RQcm9kdWN0IiwicHJvZHVjdEFQSVV0aWwiLCJwcm9kdWN0IiwicmVjZWl2ZU9yZGVyIiwib3JkZXJJdGVtcyIsInByb2R1Y3RJdGVtcyIsInVzZXJzIiwiZmV0Y2hPcmRlciIsIm9yZGVyQXBpVXRpbCIsInJlY2VpdmVPcmRlckl0ZW0iLCJyZXNwb25zZSIsIm9yZGVySXRlbSIsImNyZWF0ZU9yZGVySXRlbSIsIm9yZGVyX2lkIiwib3JkZXJJdGVtc0FwaVV0aWwiLCJkZWxldGVPcmRlckl0ZW0iLCJvcmRlcklkIiwib3JkZXJJdGVtSWQiLCJyZW1vdmVPcmRlckl0ZW0iLCJwcm9kdWN0c1JlZHVjZXIiLCJvbGRTdGF0ZSIsImZyZWV6ZSIsIm5ld1N0YXRlIiwicmVjZWl2ZVByb2R1Y3RJdGVtIiwicHJvZHVjdEl0ZW0iLCJ1cGRhdGVQcm9kdWN0SXRlbSIsInByb2R1Y3RfaXRlbSIsInByb2R1Y3RfaXRlbXMiLCJvcmRlcl9pdGVtcyIsImNyZWF0ZU5ld1VzZXIiLCJyZWNlaXZlU2lnbnVwRXJyb3JzIiwic2Vzc2lvbiIsInNpZ251cCIsImVudGl0aWVzIiwiZW50aXRpZXNSZWR1Y2VyIiwiZXJyb3JzUmVkdWNlciIsInRodW5rIiwiX2luaGVyaXRzTG9vc2UiLCJSZWFjdFJlZHV4Q29udGV4dCIsImdldEJhdGNoIiwiQ0xFQVJFRCIsIm51bGxMaXN0ZW5lcnMiLCJub3RpZnkiLCJTdWJzY3JpcHRpb24iLCJwYXJlbnRTdWIiLCJoYW5kbGVDaGFuZ2VXcmFwcGVyIiwiX3Byb3RvIiwiYWRkTmVzdGVkU3ViIiwidHJ5U3Vic2NyaWJlIiwibm90aWZ5TmVzdGVkU3VicyIsIm9uU3RhdGVDaGFuZ2UiLCJCb29sZWFuIiwiYmF0Y2giLCJ0cnlVbnN1YnNjcmliZSIsIl9Db21wb25lbnQiLCJfdGhpcyIsIm5vdGlmeVN1YnNjcmliZXJzIiwiUmVmZXJlbmNlRXJyb3IiLCJfYXNzZXJ0VGhpc0luaXRpYWxpemVkIiwic3Vic2NyaXB0aW9uIiwicHJldmlvdXNTdGF0ZSIsIl9pc01vdW50ZWQiLCJwcmV2UHJvcHMiLCJDb250ZXh0IiwiX2V4dGVuZHMiLCJfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSIsImV4Y2x1ZGVkIiwic291cmNlS2V5cyIsIkVNUFRZX0FSUkFZIiwiTk9fU1VCU0NSSVBUSU9OX0FSUkFZIiwic3RvcmVTdGF0ZVVwZGF0ZXNSZWR1Y2VyIiwidXBkYXRlQ291bnQiLCJpbml0U3RhdGVVcGRhdGVzIiwidXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCIsImNvbm5lY3RBZHZhbmNlZCIsInNlbGVjdG9yRmFjdG9yeSIsIl9yZWYyJGdldERpc3BsYXlOYW1lIiwiZ2V0RGlzcGxheU5hbWUiLCJfcmVmMiRtZXRob2ROYW1lIiwiX3JlZjIkcmVuZGVyQ291bnRQcm9wIiwicmVuZGVyQ291bnRQcm9wIiwiX3JlZjIkc2hvdWxkSGFuZGxlU3RhIiwic2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzIiwiX3JlZjIkc3RvcmVLZXkiLCJzdG9yZUtleSIsIl9yZWYyJHdpdGhSZWYiLCJ3aXRoUmVmIiwiX3JlZjIkZm9yd2FyZFJlZiIsIl9yZWYyJGNvbnRleHQiLCJjb25uZWN0T3B0aW9ucyIsIldyYXBwZWRDb21wb25lbnQiLCJ3cmFwcGVkQ29tcG9uZW50TmFtZSIsInNlbGVjdG9yRmFjdG9yeU9wdGlvbnMiLCJwdXJlIiwidXNlUHVyZU9ubHlNZW1vIiwiQ29ubmVjdEZ1bmN0aW9uIiwiX3VzZU1lbW8iLCJmb3J3YXJkZWRSZWYiLCJ3cmFwcGVyUHJvcHMiLCJwcm9wc0NvbnRleHQiLCJDb250ZXh0VG9Vc2UiLCJjb250ZXh0VmFsdWUiLCJkaWRTdG9yZUNvbWVGcm9tUHJvcHMiLCJkaWRTdG9yZUNvbWVGcm9tQ29udGV4dCIsImNoaWxkUHJvcHNTZWxlY3RvciIsImNyZWF0ZUNoaWxkU2VsZWN0b3IiLCJfdXNlTWVtbzIiLCJvdmVycmlkZGVuQ29udGV4dFZhbHVlIiwiX3VzZVJlZHVjZXIiLCJwcmV2aW91c1N0YXRlVXBkYXRlUmVzdWx0IiwiZm9yY2VDb21wb25lbnRVcGRhdGVEaXNwYXRjaCIsImxhc3RDaGlsZFByb3BzIiwibGFzdFdyYXBwZXJQcm9wcyIsImNoaWxkUHJvcHNGcm9tU3RvcmVVcGRhdGUiLCJyZW5kZXJJc1NjaGVkdWxlZCIsImFjdHVhbENoaWxkUHJvcHMiLCJkaWRVbnN1YnNjcmliZSIsImxhc3RUaHJvd25FcnJvciIsImNoZWNrRm9yVXBkYXRlcyIsIm5ld0NoaWxkUHJvcHMiLCJsYXRlc3RTdG9yZVN0YXRlIiwicmVuZGVyZWRXcmFwcGVkQ29tcG9uZW50IiwiQ29ubmVjdCIsImZvcndhcmRlZCIsImhhc093biIsInNoYWxsb3dFcXVhbCIsIm9iakEiLCJvYmpCIiwia2V5c0EiLCJrZXlzQiIsIndyYXBNYXBUb1Byb3BzQ29uc3RhbnQiLCJnZXRDb25zdGFudCIsImNvbnN0YW50U2VsZWN0b3IiLCJkZXBlbmRzT25Pd25Qcm9wcyIsImdldERlcGVuZHNPbk93blByb3BzIiwibWFwVG9Qcm9wcyIsIndyYXBNYXBUb1Byb3BzRnVuYyIsInByb3h5Iiwic3RhdGVPckRpc3BhdGNoIiwib3duUHJvcHMiLCJtYXBEaXNwYXRjaFRvUHJvcHMiLCJhY3Rpb25DcmVhdG9ycyIsImJvdW5kQWN0aW9uQ3JlYXRvcnMiLCJiaW5kQWN0aW9uQ3JlYXRvcnMiLCJtYXBTdGF0ZVRvUHJvcHMiLCJkZWZhdWx0TWVyZ2VQcm9wcyIsInN0YXRlUHJvcHMiLCJkaXNwYXRjaFByb3BzIiwibWVyZ2VQcm9wcyIsIm1lcmdlZFByb3BzIiwiYXJlTWVyZ2VkUHJvcHNFcXVhbCIsImhhc1J1bk9uY2UiLCJuZXh0TWVyZ2VkUHJvcHMiLCJ3cmFwTWVyZ2VQcm9wc0Z1bmMiLCJpbXB1cmVGaW5hbFByb3BzU2VsZWN0b3JGYWN0b3J5IiwicHVyZUZpbmFsUHJvcHNTZWxlY3RvckZhY3RvcnkiLCJhcmVTdGF0ZXNFcXVhbCIsImFyZU93blByb3BzRXF1YWwiLCJhcmVTdGF0ZVByb3BzRXF1YWwiLCJoYXNSdW5BdExlYXN0T25jZSIsImhhbmRsZVN1YnNlcXVlbnRDYWxscyIsIm5leHRPd25Qcm9wcyIsIm5leHRTdGF0ZVByb3BzIiwic3RhdGVQcm9wc0NoYW5nZWQiLCJwcm9wc0NoYW5nZWQiLCJzdGF0ZUNoYW5nZWQiLCJmaW5hbFByb3BzU2VsZWN0b3JGYWN0b3J5IiwiaW5pdE1hcFN0YXRlVG9Qcm9wcyIsImluaXRNYXBEaXNwYXRjaFRvUHJvcHMiLCJpbml0TWVyZ2VQcm9wcyIsImZhY3RvcmllcyIsInN0cmljdEVxdWFsIiwiX3RlbXAiLCJfcmVmJGNvbm5lY3RIT0MiLCJjb25uZWN0SE9DIiwiX3JlZiRtYXBTdGF0ZVRvUHJvcHNGIiwibWFwU3RhdGVUb1Byb3BzRmFjdG9yaWVzIiwiX3JlZiRtYXBEaXNwYXRjaFRvUHJvIiwibWFwRGlzcGF0Y2hUb1Byb3BzRmFjdG9yaWVzIiwiX3JlZiRtZXJnZVByb3BzRmFjdG9yIiwibWVyZ2VQcm9wc0ZhY3RvcmllcyIsIl9yZWYkc2VsZWN0b3JGYWN0b3J5IiwiX3JlZjMiLCJfcmVmMyRwdXJlIiwiX3JlZjMkYXJlU3RhdGVzRXF1YWwiLCJfcmVmMyRhcmVPd25Qcm9wc0VxdWEiLCJfcmVmMyRhcmVTdGF0ZVByb3BzRXEiLCJfcmVmMyRhcmVNZXJnZWRQcm9wc0UiLCJleHRyYU9wdGlvbnMiLCJuZXdCYXRjaCIsIk1BWF9TSUdORURfMzFfQklUX0lOVCIsImNhbGN1bGF0ZUNoYW5nZWRCaXRzIiwiX1Byb3ZpZGVyJGNoaWxkQ29udGV4IiwiX0NvbnN1bWVyJGNvbnRleHRUeXBlIiwiY29udGV4dFByb3AiLCJoYW5kbGVycyIsImVtaXR0ZXIiLCJvbiIsImhhbmRsZXIiLCJvZmYiLCJjaGFuZ2VkQml0cyIsIm5leHRQcm9wcyIsIm9sZFZhbHVlIiwiX0NvbXBvbmVudDIiLCJfdGhpczIiLCJvblVwZGF0ZSIsIl9wcm90bzIiLCJpc0Fic29sdXRlIiwicGF0aG5hbWUiLCJzcGxpY2VPbmUiLCJsaXN0IiwidG9QYXJ0cyIsImZyb21QYXJ0cyIsImlzVG9BYnMiLCJpc0Zyb21BYnMiLCJtdXN0RW5kQWJzIiwiaGFzVHJhaWxpbmdTbGFzaCIsInVwIiwicGFydCIsInVuc2hpZnQiLCJfdHlwZW9mIiwidmFsdWVFcXVhbCIsImFUeXBlIiwiYVZhbHVlIiwiYlZhbHVlIiwiYUtleXMiLCJiS2V5cyIsImlzUHJvZHVjdGlvbiIsImFkZExlYWRpbmdTbGFzaCIsInN0cmlwTGVhZGluZ1NsYXNoIiwic3RyaXBCYXNlbmFtZSIsImhhc0Jhc2VuYW1lIiwic3RyaXBUcmFpbGluZ1NsYXNoIiwiY3JlYXRlUGF0aCIsImhhc2giLCJjcmVhdGVMb2NhdGlvbiIsImN1cnJlbnRMb2NhdGlvbiIsImhhc2hJbmRleCIsInNlYXJjaEluZGV4IiwicGFyc2VQYXRoIiwiZGVjb2RlVVJJIiwiVVJJRXJyb3IiLCJsb2NhdGlvbnNBcmVFcXVhbCIsImNyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyIiwicHJvbXB0Iiwic2V0UHJvbXB0IiwibmV4dFByb21wdCIsImNvbmZpcm1UcmFuc2l0aW9uVG8iLCJnZXRVc2VyQ29uZmlybWF0aW9uIiwiYXBwZW5kTGlzdGVuZXIiLCJpc0FjdGl2ZSIsIm5vdGlmeUxpc3RlbmVycyIsImNhblVzZURPTSIsImdldENvbmZpcm1hdGlvbiIsImNvbmZpcm0iLCJQb3BTdGF0ZUV2ZW50IiwiSGFzaENoYW5nZUV2ZW50IiwiZ2V0SGlzdG9yeVN0YXRlIiwiaGlzdG9yeSIsImNyZWF0ZUJyb3dzZXJIaXN0b3J5IiwiZ2xvYmFsSGlzdG9yeSIsImNhblVzZUhpc3RvcnkiLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJuZWVkc0hhc2hDaGFuZ2VMaXN0ZW5lciIsIl9wcm9wcyIsIl9wcm9wcyRmb3JjZVJlZnJlc2giLCJmb3JjZVJlZnJlc2giLCJfcHJvcHMkZ2V0VXNlckNvbmZpcm0iLCJfcHJvcHMka2V5TGVuZ3RoIiwia2V5TGVuZ3RoIiwiYmFzZW5hbWUiLCJnZXRET01Mb2NhdGlvbiIsImhpc3RvcnlTdGF0ZSIsIl93aW5kb3ckbG9jYXRpb24iLCJjcmVhdGVLZXkiLCJ0cmFuc2l0aW9uTWFuYWdlciIsImhhbmRsZVBvcFN0YXRlIiwiZXZlbnQiLCJpc0V4dHJhbmVvdXNQb3BzdGF0ZUV2ZW50IiwiaGFuZGxlUG9wIiwiaGFuZGxlSGFzaENoYW5nZSIsImZvcmNlTmV4dFBvcCIsIm9rIiwiZnJvbUxvY2F0aW9uIiwidG9Mb2NhdGlvbiIsInRvSW5kZXgiLCJhbGxLZXlzIiwiZGVsdGEiLCJnbyIsInJldmVydFBvcCIsImluaXRpYWxMb2NhdGlvbiIsImNyZWF0ZUhyZWYiLCJsaXN0ZW5lckNvdW50IiwiY2hlY2tET01MaXN0ZW5lcnMiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiaXNCbG9ja2VkIiwicHVzaFN0YXRlIiwicHJldkluZGV4IiwibmV4dEtleXMiLCJyZXBsYWNlU3RhdGUiLCJnb0JhY2siLCJnb0ZvcndhcmQiLCJibG9jayIsInVuYmxvY2siLCJsaXN0ZW4iLCJ1bmxpc3RlbiIsIkhhc2hDaGFuZ2VFdmVudCQxIiwiSGFzaFBhdGhDb2RlcnMiLCJoYXNoYmFuZyIsImVuY29kZVBhdGgiLCJkZWNvZGVQYXRoIiwibm9zbGFzaCIsInNsYXNoIiwiZ2V0SGFzaFBhdGgiLCJyZXBsYWNlSGFzaFBhdGgiLCJjcmVhdGVIYXNoSGlzdG9yeSIsIl9wcm9wcyRoYXNoVHlwZSIsImhhc2hUeXBlIiwiX0hhc2hQYXRoQ29kZXJzJGhhc2hUIiwiaWdub3JlUGF0aCIsImVuY29kZWRQYXRoIiwicHJldkxvY2F0aW9uIiwiYWxsUGF0aHMiLCJwdXNoSGFzaFBhdGgiLCJuZXh0UGF0aHMiLCJsb3dlckJvdW5kIiwidXBwZXJCb3VuZCIsIl9SZWFjdCRDb21wb25lbnQiLCJSb3V0ZXIiLCJfcGVuZGluZ0xvY2F0aW9uIiwic3RhdGljQ29udGV4dCIsImNvbXB1dGVSb290TWF0Y2giLCJwYXJhbXMiLCJpc0V4YWN0IiwiTGlmZWN5Y2xlIiwib25Nb3VudCIsIm9uVW5tb3VudCIsImNhY2hlTGltaXQiLCJjYWNoZUNvdW50IiwiZ2VuZXJhdGVQYXRoIiwiZ2VuZXJhdG9yIiwiY29tcGlsZVBhdGgiLCJSZWRpcmVjdCIsImNvbXB1dGVkTWF0Y2giLCJfcmVmJHB1c2giLCJjb250ZXh0JCQxIiwiY2FjaGUkMSIsImNhY2hlTGltaXQkMSIsImNhY2hlQ291bnQkMSIsIm1hdGNoUGF0aCIsIl9vcHRpb25zIiwiX29wdGlvbnMkZXhhY3QiLCJfb3B0aW9ucyRzdHJpY3QiLCJfb3B0aW9ucyRzZW5zaXRpdmUiLCJtYXRjaGVkIiwiX2NvbXBpbGVQYXRoIiwiY2FjaGVLZXkiLCJwYXRoQ2FjaGUiLCJjb21waWxlUGF0aCQxIiwiUm91dGUiLCJfdGhpcyRwcm9wcyIsImlzRW1wdHlDaGlsZHJlbiIsImNyZWF0ZVVSTCIsInN0YXRpY0hhbmRsZXIiLCJTd2l0Y2giLCJ3aXRoUm91dGVyIiwid3JhcHBlZENvbXBvbmVudFJlZiIsInJlbWFpbmluZ1Byb3BzIiwiSGFzaFJvdXRlciIsIkxpbmsiLCJoYW5kbGVDbGljayIsImV4IiwiaXNNb2RpZmllZEV2ZW50IiwiaW5uZXJSZWYiLCJsb2dnZWRJbiIsIkF1dGhSb3V0ZSIsImNvbm5lY3QiLCJoYW5kbGVTdWJtaXQiLCJSZWFjdCIsImVycnMiLCJjbGFzc05hbWUiLCJjbGFzcy1uYW1lIiwic3JjIiwiYWx0IiwicmVuZGVyRXJyb3JzIiwib25DaGFuZ2UiLCJoYW5kbGVJbnB1dCIsImZvcm1UeXBlIiwiTG9naW4iLCJmaXJzdF9uYW1lIiwibGFzdF9uYW1lIiwiZGF0ZV9vZl9iaXJ0aCIsImdlbmRlciIsImNvdW50cnkiLCJlbWFpbF9saXN0cyIsImF0dHJpYnV0ZSIsImZpZWxkRXJyb3JzIiwiY2xhc3MiLCJTaWdudXAiLCJUb29sYmFyIiwidmlld0JveCIsInJvbGUiLCJhcmlhLWxhYmVsbGVkYnkiLCJmaWxsUnVsZSIsInNob3dNZW51IiwiYXJpYS1oaWRkZW4iLCJQcm9kdWN0SW5kZXhJdGVtIiwiZm9ybWF0dGVyIiwiSW50bCIsIk51bWJlckZvcm1hdCIsImN1cnJlbmN5IiwibWluaW11bUZyYWN0aW9uRGlnaXRzIiwicGhvdG9VcmxzIiwicHJpY2UiLCJQcm9kdWN0c0luZGV4Iiwic2VsZWN0U2l6ZUF2YWlsYWJpbGl0eSIsIml0ZW1zIiwic2l6ZUF2YWlsYWJpbGl0eSIsInN6Iiwic2VsZWN0U3ViVG90YWwiLCJzdWJUb3RhbCIsInVuaXRQcmljZSIsIlByb2R1Y3RTaG93IiwicHJvZHVjdElkIiwicHJvZHVjdF9pdGVtX2lkIiwiZmlsdGVyZWQiLCJzZWxlY3RPcmRlclByb2R1Y3RJdGVtSWQiLCJwcm9kdWN0X2lkIiwic2l6ZU9wdGlvbnMiLCJzZWxlY3RlZFNpemVzIiwiZWwiLCJwaG90b0FyZWEiLCJhc2lkZUFyZWEiLCJkZWF0aWxBcmVhIiwiY29kZSIsIm1vZGVsX3NpemUiLCJtb2RlbF9oZWlnaHQiLCJjYXJlX2luc3RydWN0aW9ucyIsImNhcmVfYWR2aWNlIiwiZmFicmljX3N0cmV0Y2giLCJmYWJyaWNfbWF0ZXJpYWwiLCJtYWluX2ZpYmVyX2NvbnRlbnQiLCJvd25QYXJhbXMiLCJPcmRlclNob3ciLCJsaXN0aW5ncyIsImF0dHJpYnV0ZXMiLCJvcmRlckxpc3RJdGVtcyIsImxpc3RpbmciLCJpZHgiLCJwaG90b3NVcmwiLCJicmFuZCIsInNob3J0VGl0bGUiLCJOYXZCYXJDb250YWluZXIiLCJIb21lIiwiUHJvZHVjdHNJbmRleENvbnRhaW5lciIsIlByb2R1Y3RTaG93Q29udGFpbmVyIiwiT3JkZXJzU2hvd0NvbnRhaW5lciIsIkZvb3RlciIsIkxvZ2luQ29udGFpbmVyIiwiU2lnbnVwQ29udGFpbmVyIiwiTWFpbiIsImdldEVsZW1lbnRCeUlkIiwicm9vdFJlZHVjZXIiLCJSZWFjdERPTSJdLCJtYXBwaW5ncyI6ImFBQ0UsSUFBSUEsRUFB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QUN0QixJQUFRLElBQU0sSUFBUSxJQUN0QixJQUFRLElBQU0sSUFBUSxJQUFLLElBQVEsSUFBSyxJQUFRLElBQ2hELElBQVEsSUFBTSxJQUFRLElBQUssSUFBUSxJQUFLLElBQVEsSUFDaEQsSUFBUSxJQUFNLElBQVEsSUFBSyxJQUFRLElBQUssSUFBUSxJQUNoRCxJQUFRLElBQU0sSUFBUSxJQUFLLElBQVEsSUFBSyxJQUFRLElBQ2hELElBQVEsSUFBTSxJQUFRLElBQ3RCLElBQVEsSUFBTSxJQUFRLElBQUssSUFBUSxJQUFLLElBQVEsSUFBSyxJQUFRLElBQUssSUFBUSxJQUMxRSxJQUFRLElBQU0sSUFBUSxJQUFLLElBQVEsSUFBSyxJQUFRLElBQUssSUFBUSxJQUFLLElBQVEsSUFDMUUsSUFBUSxJQUFNLElBQVEsSUFBSyxJQUFRLElBQUssSUFBUSxJQUNoRCxJQUFRLElBQU0sSUFBUSxJQUFLLElBQVEsSUFBSyxJQUFRLElBQ2hELElBQVEsSUFBTSxJQUFRLElBQUssSUFBUSxJQUNuQyxJQUFRLEtBQU0sSUFBUSxLQUN0QixJQUFRLEtBQU0sSUFBUSxLQUN0QixJQUFRLEtBRVIsSUFBVSxJQUFNLElBQVUsSUFBSyxJQUFVLElBQ3pDLElBQVUsSUFBTSxJQUFVLElBQUssSUFBVSxJQUN6QyxJQUFVLElBQU0sSUFBVSxJQUFLLElBQVUsSUFBSyxJQUFVLElBQ3hELElBQVUsSUFBTSxJQUFVLElBQUssSUFBVSxJQUFLLElBQVUsSUFDeEQsSUFBVSxJQUFNLElBQVUsSUFBSyxJQUFVLElBQUssSUFBVSxJQUN4RCxJQUFVLElBQU0sSUFBVSxJQUFLLElBQVUsSUFBSyxJQUFVLElBQUssSUFBVSxJQUN2RSxJQUFVLElBQU0sSUFBVSxJQUFLLElBQVUsSUFBSyxJQUFVLElBQUssSUFBVSxJQUN2RSxJQUFVLElBQU0sSUFBVSxJQUFLLElBQVUsSUFBSyxJQUFVLElBQ3hELElBQVUsSUFBTSxJQUFVLElBQUssSUFBVSxJQUFLLElBQVUsSUFDeEQsSUFBVSxJQUFNLElBQVUsSUFBSyxJQUFVLElBQUssSUFBVSxJQUN4RCxJQUFVLElBQU0sSUFBVSxJQUFLLElBQVUsSUFBSyxJQUFVLElBQUssSUFBVSxJQUN2RSxJQUFVLElBQU0sSUFBVSxJQUFLLElBQVUsSUFBSyxJQUFVLElBQUssSUFBVSxJQUN2RSxJQUFVLElBQU0sSUFBVSxJQUMxQixJQUFVLElBQU0sSUFBVSxJQUFLLElBQVUsSUFDekMsSUFBVSxJQUFNLElBQVUsSUFBSyxJQUFVLElBQUssSUFBVSxJQUFLLElBQVUsSUFDdkUsSUFBVSxJQUFNLElBQVUsSUFBSyxJQUFVLElBQUssSUFBVSxJQUFLLElBQVUsSUFDdkUsSUFBVSxJQUFNLElBQVUsSUFBSyxJQUFVLElBQUssSUFBVSxJQUN4RCxJQUFVLElBQU0sSUFBVSxJQUFLLElBQVUsSUFBSyxJQUFVLElBQ3hELElBQVUsSUFBTSxJQUFVLElBQUssSUFBVSxJQUN6QyxJQUFVLElBQU0sSUFBVSxJQUFLLElBQVUsSUFDekMsSUFBVSxJQUFNLElBQVUsSUFBSyxJQUFVLElBQ3pDLElBQVUsSUFBTSxJQUFVLElBQUssSUFBVSxJQUN6QyxJQUFVLElBQU0sSUFBVSxJQUFLLElBQVUsSUFBSyxJQUFVLElBQ3hELElBQVUsSUFBTSxJQUFVLElBQUssSUFBVSxJQUFLLElBQVUsSUFDeEQsSUFBVSxJQUFNLElBQVUsSUFBSyxJQUFVLElBQ3pDLElBQVUsSUFBTSxJQUFVLElBQUssSUFBVSxJQUN6QyxJQUFVLElBQU0sSUFBVSxJQUFLLElBQVUsSUFBSyxJQUFVLElBQUssSUFBVSxJQUFLLElBQVUsSUFDdEYsSUFBVSxJQUFNLElBQVUsSUFBSyxJQUFVLElBQUssSUFBVSxJQUFLLElBQVUsSUFBSyxJQUFVLElBQ3RGLElBQVUsSUFBTSxJQUFVLElBQzFCLElBQVUsSUFBTSxJQUFVLElBQUssSUFBVSxJQUN6QyxJQUFVLElBQU0sSUFBVSxJQUFLLElBQVUsSUFDekMsSUFBVSxJQUFNLElBQVUsSUFBSyxJQUFVLElBQ3pDLElBQVUsS0FBTSxJQUFVLEtBQzFCLElBQVUsS0FBTSxJQUFVLEtBQzFCLElBQVUsS0FB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Q0FBTXUwQyxNQUFPQSxJQUFXdnpFLEdBQ3hDeTlCLE9BQU9pSyxTQUFXNnJDLEVBQU03ckMiLCJmaWxlIjoiYnVuZGxlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDEyMik7XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgdmFyIFJlYWN0SXMgPSByZXF1aXJlKCdyZWFjdC1pcycpO1xuXG4gIC8vIEJ5IGV4cGxpY2l0bHkgdXNpbmcgYHByb3AtdHlwZXNgIHlvdSBhcmUgb3B0aW5nIGludG8gbmV3IGRldmVsb3BtZW50IGJlaGF2aW9yLlxuICAvLyBodHRwOi8vZmIubWUvcHJvcC10eXBlcy1pbi1wcm9kXG4gIHZhciB0aHJvd09uRGlyZWN0QWNjZXNzID0gdHJ1ZTtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2ZhY3RvcnlXaXRoVHlwZUNoZWNrZXJzJykoUmVhY3RJcy5pc0VsZW1lbnQsIHRocm93T25EaXJlY3RBY2Nlc3MpO1xufSBlbHNlIHtcbiAgLy8gQnkgZXhwbGljaXRseSB1c2luZyBgcHJvcC10eXBlc2AgeW91IGFyZSBvcHRpbmcgaW50byBuZXcgcHJvZHVjdGlvbiBiZWhhdmlvci5cbiAgLy8gaHR0cDovL2ZiLm1lL3Byb3AtdHlwZXMtaW4tcHJvZFxuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vZmFjdG9yeVdpdGhUaHJvd2luZ1NoaW1zJykoKTtcbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIFVzZSBpbnZhcmlhbnQoKSB0byBhc3NlcnQgc3RhdGUgd2hpY2ggeW91ciBwcm9ncmFtIGFzc3VtZXMgdG8gYmUgdHJ1ZS5cbiAqXG4gKiBQcm92aWRlIHNwcmludGYtc3R5bGUgZm9ybWF0IChvbmx5ICVzIGlzIHN1cHBvcnRlZCkgYW5kIGFyZ3VtZW50c1xuICogdG8gcHJvdmlkZSBpbmZvcm1hdGlvbiBhYm91dCB3aGF0IGJyb2tlIGFuZCB3aGF0IHlvdSB3ZXJlXG4gKiBleHBlY3RpbmcuXG4gKlxuICogVGhlIGludmFyaWFudCBtZXNzYWdlIHdpbGwgYmUgc3RyaXBwZWQgaW4gcHJvZHVjdGlvbiwgYnV0IHRoZSBpbnZhcmlhbnRcbiAqIHdpbGwgcmVtYWluIHRvIGVuc3VyZSBsb2dpYyBkb2VzIG5vdCBkaWZmZXIgaW4gcHJvZHVjdGlvbi5cbiAqL1xuXG52YXIgaW52YXJpYW50ID0gZnVuY3Rpb24oY29uZGl0aW9uLCBmb3JtYXQsIGEsIGIsIGMsIGQsIGUsIGYpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBpZiAoZm9ybWF0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignaW52YXJpYW50IHJlcXVpcmVzIGFuIGVycm9yIG1lc3NhZ2UgYXJndW1lbnQnKTtcbiAgICB9XG4gIH1cblxuICBpZiAoIWNvbmRpdGlvbikge1xuICAgIHZhciBlcnJvcjtcbiAgICBpZiAoZm9ybWF0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGVycm9yID0gbmV3IEVycm9yKFxuICAgICAgICAnTWluaWZpZWQgZXhjZXB0aW9uIG9jY3VycmVkOyB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgJyArXG4gICAgICAgICdmb3IgdGhlIGZ1bGwgZXJyb3IgbWVzc2FnZSBhbmQgYWRkaXRpb25hbCBoZWxwZnVsIHdhcm5pbmdzLidcbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBhcmdzID0gW2EsIGIsIGMsIGQsIGUsIGZdO1xuICAgICAgdmFyIGFyZ0luZGV4ID0gMDtcbiAgICAgIGVycm9yID0gbmV3IEVycm9yKFxuICAgICAgICBmb3JtYXQucmVwbGFjZSgvJXMvZywgZnVuY3Rpb24oKSB7IHJldHVybiBhcmdzW2FyZ0luZGV4KytdOyB9KVxuICAgICAgKTtcbiAgICAgIGVycm9yLm5hbWUgPSAnSW52YXJpYW50IFZpb2xhdGlvbic7XG4gICAgfVxuXG4gICAgZXJyb3IuZnJhbWVzVG9Qb3AgPSAxOyAvLyB3ZSBkb24ndCBjYXJlIGFib3V0IGludmFyaWFudCdzIG93biBmcmFtZVxuICAgIHRocm93IGVycm9yO1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGludmFyaWFudDtcbiIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIExvZGFzaCA8aHR0cHM6Ly9sb2Rhc2guY29tLz5cbiAqIENvcHlyaWdodCBPcGVuSlMgRm91bmRhdGlvbiBhbmQgb3RoZXIgY29udHJpYnV0b3JzIDxodHRwczovL29wZW5qc2Yub3JnLz5cbiAqIFJlbGVhc2VkIHVuZGVyIE1JVCBsaWNlbnNlIDxodHRwczovL2xvZGFzaC5jb20vbGljZW5zZT5cbiAqIEJhc2VkIG9uIFVuZGVyc2NvcmUuanMgMS44LjMgPGh0dHA6Ly91bmRlcnNjb3JlanMub3JnL0xJQ0VOU0U+XG4gKiBDb3B5cmlnaHQgSmVyZW15IEFzaGtlbmFzLCBEb2N1bWVudENsb3VkIGFuZCBJbnZlc3RpZ2F0aXZlIFJlcG9ydGVycyAmIEVkaXRvcnNcbiAqL1xuOyhmdW5jdGlvbigpIHtcblxuICAvKiogVXNlZCBhcyBhIHNhZmUgcmVmZXJlbmNlIGZvciBgdW5kZWZpbmVkYCBpbiBwcmUtRVM1IGVudmlyb25tZW50cy4gKi9cbiAgdmFyIHVuZGVmaW5lZDtcblxuICAvKiogVXNlZCBhcyB0aGUgc2VtYW50aWMgdmVyc2lvbiBudW1iZXIuICovXG4gIHZhciBWRVJTSU9OID0gJzQuMTcuMTUnO1xuXG4gIC8qKiBVc2VkIGFzIHRoZSBzaXplIHRvIGVuYWJsZSBsYXJnZSBhcnJheSBvcHRpbWl6YXRpb25zLiAqL1xuICB2YXIgTEFSR0VfQVJSQVlfU0laRSA9IDIwMDtcblxuICAvKiogRXJyb3IgbWVzc2FnZSBjb25zdGFudHMuICovXG4gIHZhciBDT1JFX0VSUk9SX1RFWFQgPSAnVW5zdXBwb3J0ZWQgY29yZS1qcyB1c2UuIFRyeSBodHRwczovL25wbXMuaW8vc2VhcmNoP3E9cG9ueWZpbGwuJyxcbiAgICAgIEZVTkNfRVJST1JfVEVYVCA9ICdFeHBlY3RlZCBhIGZ1bmN0aW9uJztcblxuICAvKiogVXNlZCB0byBzdGFuZC1pbiBmb3IgYHVuZGVmaW5lZGAgaGFzaCB2YWx1ZXMuICovXG4gIHZhciBIQVNIX1VOREVGSU5FRCA9ICdfX2xvZGFzaF9oYXNoX3VuZGVmaW5lZF9fJztcblxuICAvKiogVXNlZCBhcyB0aGUgbWF4aW11bSBtZW1vaXplIGNhY2hlIHNpemUuICovXG4gIHZhciBNQVhfTUVNT0laRV9TSVpFID0gNTAwO1xuXG4gIC8qKiBVc2VkIGFzIHRoZSBpbnRlcm5hbCBhcmd1bWVudCBwbGFjZWhvbGRlci4gKi9cbiAgdmFyIFBMQUNFSE9MREVSID0gJ19fbG9kYXNoX3BsYWNlaG9sZGVyX18nO1xuXG4gIC8qKiBVc2VkIHRvIGNvbXBvc2UgYml0bWFza3MgZm9yIGNsb25pbmcuICovXG4gIHZhciBDTE9ORV9ERUVQX0ZMQUcgPSAxLFxuICAgICAgQ0xPTkVfRkxBVF9GTEFHID0gMixcbiAgICAgIENMT05FX1NZTUJPTFNfRkxBRyA9IDQ7XG5cbiAgLyoqIFVzZWQgdG8gY29tcG9zZSBiaXRtYXNrcyBmb3IgdmFsdWUgY29tcGFyaXNvbnMuICovXG4gIHZhciBDT01QQVJFX1BBUlRJQUxfRkxBRyA9IDEsXG4gICAgICBDT01QQVJFX1VOT1JERVJFRF9GTEFHID0gMjtcblxuICAvKiogVXNlZCB0byBjb21wb3NlIGJpdG1hc2tzIGZvciBmdW5jdGlvbiBtZXRhZGF0YS4gKi9cbiAgdmFyIFdSQVBfQklORF9GTEFHID0gMSxcbiAgICAgIFdSQVBfQklORF9LRVlfRkxBRyA9IDIsXG4gICAgICBXUkFQX0NVUlJZX0JPVU5EX0ZMQUcgPSA0LFxuICAgICAgV1JBUF9DVVJSWV9GTEFHID0gOCxcbiAgICAgIFdSQVBfQ1VSUllfUklHSFRfRkxBRyA9IDE2LFxuICAgICAgV1JBUF9QQVJUSUFMX0ZMQUcgPSAzMixcbiAgICAgIFdSQVBfUEFSVElBTF9SSUdIVF9GTEFHID0gNjQsXG4gICAgICBXUkFQX0FSWV9GTEFHID0gMTI4LFxuICAgICAgV1JBUF9SRUFSR19GTEFHID0gMjU2LFxuICAgICAgV1JBUF9GTElQX0ZMQUcgPSA1MTI7XG5cbiAgLyoqIFVzZWQgYXMgZGVmYXVsdCBvcHRpb25zIGZvciBgXy50cnVuY2F0ZWAuICovXG4gIHZhciBERUZBVUxUX1RSVU5DX0xFTkdUSCA9IDMwLFxuICAgICAgREVGQVVMVF9UUlVOQ19PTUlTU0lPTiA9ICcuLi4nO1xuXG4gIC8qKiBVc2VkIHRvIGRldGVjdCBob3QgZnVuY3Rpb25zIGJ5IG51bWJlciBvZiBjYWxscyB3aXRoaW4gYSBzcGFuIG9mIG1pbGxpc2Vjb25kcy4gKi9cbiAgdmFyIEhPVF9DT1VOVCA9IDgwMCxcbiAgICAgIEhPVF9TUEFOID0gMTY7XG5cbiAgLyoqIFVzZWQgdG8gaW5kaWNhdGUgdGhlIHR5cGUgb2YgbGF6eSBpdGVyYXRlZXMuICovXG4gIHZhciBMQVpZX0ZJTFRFUl9GTEFHID0gMSxcbiAgICAgIExBWllfTUFQX0ZMQUcgPSAyLFxuICAgICAgTEFaWV9XSElMRV9GTEFHID0gMztcblxuICAvKiogVXNlZCBhcyByZWZlcmVuY2VzIGZvciB2YXJpb3VzIGBOdW1iZXJgIGNvbnN0YW50cy4gKi9cbiAgdmFyIElORklOSVRZID0gMSAvIDAsXG4gICAgICBNQVhfU0FGRV9JTlRFR0VSID0gOTAwNzE5OTI1NDc0MDk5MSxcbiAgICAgIE1BWF9JTlRFR0VSID0gMS43OTc2OTMxMzQ4NjIzMTU3ZSszMDgsXG4gICAgICBOQU4gPSAwIC8gMDtcblxuICAvKiogVXNlZCBhcyByZWZlcmVuY2VzIGZvciB0aGUgbWF4aW11bSBsZW5ndGggYW5kIGluZGV4IG9mIGFuIGFycmF5LiAqL1xuICB2YXIgTUFYX0FSUkFZX0xFTkdUSCA9IDQyOTQ5NjcyOTUsXG4gICAgICBNQVhfQVJSQVlfSU5ERVggPSBNQVhfQVJSQVlfTEVOR1RIIC0gMSxcbiAgICAgIEhBTEZfTUFYX0FSUkFZX0xFTkdUSCA9IE1BWF9BUlJBWV9MRU5HVEggPj4+IDE7XG5cbiAgLyoqIFVzZWQgdG8gYXNzb2NpYXRlIHdyYXAgbWV0aG9kcyB3aXRoIHRoZWlyIGJpdCBmbGFncy4gKi9cbiAgdmFyIHdyYXBGbGFncyA9IFtcbiAgICBbJ2FyeScsIFdSQVBfQVJZX0ZMQUddLFxuICAgIFsnYmluZCcsIFdSQVBfQklORF9GTEFHXSxcbiAgICBbJ2JpbmRLZXknLCBXUkFQX0JJTkRfS0VZX0ZMQUddLFxuICAgIFsnY3VycnknLCBXUkFQX0NVUlJZX0ZMQUddLFxuICAgIFsnY3VycnlSaWdodCcsIFdSQVBfQ1VSUllfUklHSFRfRkxBR10sXG4gICAgWydmbGlwJywgV1JBUF9GTElQX0ZMQUddLFxuICAgIFsncGFydGlhbCcsIFdSQVBfUEFSVElBTF9GTEFHXSxcbiAgICBbJ3BhcnRpYWxSaWdodCcsIFdSQVBfUEFSVElBTF9SSUdIVF9GTEFHXSxcbiAgICBbJ3JlYXJnJywgV1JBUF9SRUFSR19GTEFHXVxuICBdO1xuXG4gIC8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbiAgdmFyIGFyZ3NUYWcgPSAnW29iamVjdCBBcmd1bWVudHNdJyxcbiAgICAgIGFycmF5VGFnID0gJ1tvYmplY3QgQXJyYXldJyxcbiAgICAgIGFzeW5jVGFnID0gJ1tvYmplY3QgQXN5bmNGdW5jdGlvbl0nLFxuICAgICAgYm9vbFRhZyA9ICdbb2JqZWN0IEJvb2xlYW5dJyxcbiAgICAgIGRhdGVUYWcgPSAnW29iamVjdCBEYXRlXScsXG4gICAgICBkb21FeGNUYWcgPSAnW29iamVjdCBET01FeGNlcHRpb25dJyxcbiAgICAgIGVycm9yVGFnID0gJ1tvYmplY3QgRXJyb3JdJyxcbiAgICAgIGZ1bmNUYWcgPSAnW29iamVjdCBGdW5jdGlvbl0nLFxuICAgICAgZ2VuVGFnID0gJ1tvYmplY3QgR2VuZXJhdG9yRnVuY3Rpb25dJyxcbiAgICAgIG1hcFRhZyA9ICdbb2JqZWN0IE1hcF0nLFxuICAgICAgbnVtYmVyVGFnID0gJ1tvYmplY3QgTnVtYmVyXScsXG4gICAgICBudWxsVGFnID0gJ1tvYmplY3QgTnVsbF0nLFxuICAgICAgb2JqZWN0VGFnID0gJ1tvYmplY3QgT2JqZWN0XScsXG4gICAgICBwcm9taXNlVGFnID0gJ1tvYmplY3QgUHJvbWlzZV0nLFxuICAgICAgcHJveHlUYWcgPSAnW29iamVjdCBQcm94eV0nLFxuICAgICAgcmVnZXhwVGFnID0gJ1tvYmplY3QgUmVnRXhwXScsXG4gICAgICBzZXRUYWcgPSAnW29iamVjdCBTZXRdJyxcbiAgICAgIHN0cmluZ1RhZyA9ICdbb2JqZWN0IFN0cmluZ10nLFxuICAgICAgc3ltYm9sVGFnID0gJ1tvYmplY3QgU3ltYm9sXScsXG4gICAgICB1bmRlZmluZWRUYWcgPSAnW29iamVjdCBVbmRlZmluZWRdJyxcbiAgICAgIHdlYWtNYXBUYWcgPSAnW29iamVjdCBXZWFrTWFwXScsXG4gICAgICB3ZWFrU2V0VGFnID0gJ1tvYmplY3QgV2Vha1NldF0nO1xuXG4gIHZhciBhcnJheUJ1ZmZlclRhZyA9ICdbb2JqZWN0IEFycmF5QnVmZmVyXScsXG4gICAgICBkYXRhVmlld1RhZyA9ICdbb2JqZWN0IERhdGFWaWV3XScsXG4gICAgICBmbG9hdDMyVGFnID0gJ1tvYmplY3QgRmxvYXQzMkFycmF5XScsXG4gICAgICBmbG9hdDY0VGFnID0gJ1tvYmplY3QgRmxvYXQ2NEFycmF5XScsXG4gICAgICBpbnQ4VGFnID0gJ1tvYmplY3QgSW50OEFycmF5XScsXG4gICAgICBpbnQxNlRhZyA9ICdbb2JqZWN0IEludDE2QXJyYXldJyxcbiAgICAgIGludDMyVGFnID0gJ1tvYmplY3QgSW50MzJBcnJheV0nLFxuICAgICAgdWludDhUYWcgPSAnW29iamVjdCBVaW50OEFycmF5XScsXG4gICAgICB1aW50OENsYW1wZWRUYWcgPSAnW29iamVjdCBVaW50OENsYW1wZWRBcnJheV0nLFxuICAgICAgdWludDE2VGFnID0gJ1tvYmplY3QgVWludDE2QXJyYXldJyxcbiAgICAgIHVpbnQzMlRhZyA9ICdbb2JqZWN0IFVpbnQzMkFycmF5XSc7XG5cbiAgLyoqIFVzZWQgdG8gbWF0Y2ggZW1wdHkgc3RyaW5nIGxpdGVyYWxzIGluIGNvbXBpbGVkIHRlbXBsYXRlIHNvdXJjZS4gKi9cbiAgdmFyIHJlRW1wdHlTdHJpbmdMZWFkaW5nID0gL1xcYl9fcCBcXCs9ICcnOy9nLFxuICAgICAgcmVFbXB0eVN0cmluZ01pZGRsZSA9IC9cXGIoX19wIFxcKz0pICcnIFxcKy9nLFxuICAgICAgcmVFbXB0eVN0cmluZ1RyYWlsaW5nID0gLyhfX2VcXCguKj9cXCl8XFxiX190XFwpKSBcXCtcXG4nJzsvZztcblxuICAvKiogVXNlZCB0byBtYXRjaCBIVE1MIGVudGl0aWVzIGFuZCBIVE1MIGNoYXJhY3RlcnMuICovXG4gIHZhciByZUVzY2FwZWRIdG1sID0gLyYoPzphbXB8bHR8Z3R8cXVvdHwjMzkpOy9nLFxuICAgICAgcmVVbmVzY2FwZWRIdG1sID0gL1smPD5cIiddL2csXG4gICAgICByZUhhc0VzY2FwZWRIdG1sID0gUmVnRXhwKHJlRXNjYXBlZEh0bWwuc291cmNlKSxcbiAgICAgIHJlSGFzVW5lc2NhcGVkSHRtbCA9IFJlZ0V4cChyZVVuZXNjYXBlZEh0bWwuc291cmNlKTtcblxuICAvKiogVXNlZCB0byBtYXRjaCB0ZW1wbGF0ZSBkZWxpbWl0ZXJzLiAqL1xuICB2YXIgcmVFc2NhcGUgPSAvPCUtKFtcXHNcXFNdKz8pJT4vZyxcbiAgICAgIHJlRXZhbHVhdGUgPSAvPCUoW1xcc1xcU10rPyklPi9nLFxuICAgICAgcmVJbnRlcnBvbGF0ZSA9IC88JT0oW1xcc1xcU10rPyklPi9nO1xuXG4gIC8qKiBVc2VkIHRvIG1hdGNoIHByb3BlcnR5IG5hbWVzIHdpdGhpbiBwcm9wZXJ0eSBwYXRocy4gKi9cbiAgdmFyIHJlSXNEZWVwUHJvcCA9IC9cXC58XFxbKD86W15bXFxdXSp8KFtcIiddKSg/Oig/IVxcMSlbXlxcXFxdfFxcXFwuKSo/XFwxKVxcXS8sXG4gICAgICByZUlzUGxhaW5Qcm9wID0gL15cXHcqJC8sXG4gICAgICByZVByb3BOYW1lID0gL1teLltcXF1dK3xcXFsoPzooLT9cXGQrKD86XFwuXFxkKyk/KXwoW1wiJ10pKCg/Oig/IVxcMilbXlxcXFxdfFxcXFwuKSo/KVxcMilcXF18KD89KD86XFwufFxcW1xcXSkoPzpcXC58XFxbXFxdfCQpKS9nO1xuXG4gIC8qKlxuICAgKiBVc2VkIHRvIG1hdGNoIGBSZWdFeHBgXG4gICAqIFtzeW50YXggY2hhcmFjdGVyc10oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtcGF0dGVybnMpLlxuICAgKi9cbiAgdmFyIHJlUmVnRXhwQ2hhciA9IC9bXFxcXF4kLiorPygpW1xcXXt9fF0vZyxcbiAgICAgIHJlSGFzUmVnRXhwQ2hhciA9IFJlZ0V4cChyZVJlZ0V4cENoYXIuc291cmNlKTtcblxuICAvKiogVXNlZCB0byBtYXRjaCBsZWFkaW5nIGFuZCB0cmFpbGluZyB3aGl0ZXNwYWNlLiAqL1xuICB2YXIgcmVUcmltID0gL15cXHMrfFxccyskL2csXG4gICAgICByZVRyaW1TdGFydCA9IC9eXFxzKy8sXG4gICAgICByZVRyaW1FbmQgPSAvXFxzKyQvO1xuXG4gIC8qKiBVc2VkIHRvIG1hdGNoIHdyYXAgZGV0YWlsIGNvbW1lbnRzLiAqL1xuICB2YXIgcmVXcmFwQ29tbWVudCA9IC9cXHsoPzpcXG5cXC9cXCogXFxbd3JhcHBlZCB3aXRoIC4rXFxdIFxcKlxcLyk/XFxuPy8sXG4gICAgICByZVdyYXBEZXRhaWxzID0gL1xce1xcblxcL1xcKiBcXFt3cmFwcGVkIHdpdGggKC4rKVxcXSBcXCovLFxuICAgICAgcmVTcGxpdERldGFpbHMgPSAvLD8gJiAvO1xuXG4gIC8qKiBVc2VkIHRvIG1hdGNoIHdvcmRzIGNvbXBvc2VkIG9mIGFscGhhbnVtZXJpYyBjaGFyYWN0ZXJzLiAqL1xuICB2YXIgcmVBc2NpaVdvcmQgPSAvW15cXHgwMC1cXHgyZlxceDNhLVxceDQwXFx4NWItXFx4NjBcXHg3Yi1cXHg3Zl0rL2c7XG5cbiAgLyoqIFVzZWQgdG8gbWF0Y2ggYmFja3NsYXNoZXMgaW4gcHJvcGVydHkgcGF0aHMuICovXG4gIHZhciByZUVzY2FwZUNoYXIgPSAvXFxcXChcXFxcKT8vZztcblxuICAvKipcbiAgICogVXNlZCB0byBtYXRjaFxuICAgKiBbRVMgdGVtcGxhdGUgZGVsaW1pdGVyc10oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtdGVtcGxhdGUtbGl0ZXJhbC1sZXhpY2FsLWNvbXBvbmVudHMpLlxuICAgKi9cbiAgdmFyIHJlRXNUZW1wbGF0ZSA9IC9cXCRcXHsoW15cXFxcfV0qKD86XFxcXC5bXlxcXFx9XSopKilcXH0vZztcblxuICAvKiogVXNlZCB0byBtYXRjaCBgUmVnRXhwYCBmbGFncyBmcm9tIHRoZWlyIGNvZXJjZWQgc3RyaW5nIHZhbHVlcy4gKi9cbiAgdmFyIHJlRmxhZ3MgPSAvXFx3KiQvO1xuXG4gIC8qKiBVc2VkIHRvIGRldGVjdCBiYWQgc2lnbmVkIGhleGFkZWNpbWFsIHN0cmluZyB2YWx1ZXMuICovXG4gIHZhciByZUlzQmFkSGV4ID0gL15bLStdMHhbMC05YS1mXSskL2k7XG5cbiAgLyoqIFVzZWQgdG8gZGV0ZWN0IGJpbmFyeSBzdHJpbmcgdmFsdWVzLiAqL1xuICB2YXIgcmVJc0JpbmFyeSA9IC9eMGJbMDFdKyQvaTtcblxuICAvKiogVXNlZCB0byBkZXRlY3QgaG9zdCBjb25zdHJ1Y3RvcnMgKFNhZmFyaSkuICovXG4gIHZhciByZUlzSG9zdEN0b3IgPSAvXlxcW29iamVjdCAuKz9Db25zdHJ1Y3RvclxcXSQvO1xuXG4gIC8qKiBVc2VkIHRvIGRldGVjdCBvY3RhbCBzdHJpbmcgdmFsdWVzLiAqL1xuICB2YXIgcmVJc09jdGFsID0gL14wb1swLTddKyQvaTtcblxuICAvKiogVXNlZCB0byBkZXRlY3QgdW5zaWduZWQgaW50ZWdlciB2YWx1ZXMuICovXG4gIHZhciByZUlzVWludCA9IC9eKD86MHxbMS05XVxcZCopJC87XG5cbiAgLyoqIFVzZWQgdG8gbWF0Y2ggTGF0aW4gVW5pY29kZSBsZXR0ZXJzIChleGNsdWRpbmcgbWF0aGVtYXRpY2FsIG9wZXJhdG9ycykuICovXG4gIHZhciByZUxhdGluID0gL1tcXHhjMC1cXHhkNlxceGQ4LVxceGY2XFx4ZjgtXFx4ZmZcXHUwMTAwLVxcdTAxN2ZdL2c7XG5cbiAgLyoqIFVzZWQgdG8gZW5zdXJlIGNhcHR1cmluZyBvcmRlciBvZiB0ZW1wbGF0ZSBkZWxpbWl0ZXJzLiAqL1xuICB2YXIgcmVOb01hdGNoID0gLygkXikvO1xuXG4gIC8qKiBVc2VkIHRvIG1hdGNoIHVuZXNjYXBlZCBjaGFyYWN0ZXJzIGluIGNvbXBpbGVkIHN0cmluZyBsaXRlcmFscy4gKi9cbiAgdmFyIHJlVW5lc2NhcGVkU3RyaW5nID0gL1snXFxuXFxyXFx1MjAyOFxcdTIwMjlcXFxcXS9nO1xuXG4gIC8qKiBVc2VkIHRvIGNvbXBvc2UgdW5pY29kZSBjaGFyYWN0ZXIgY2xhc3Nlcy4gKi9cbiAgdmFyIHJzQXN0cmFsUmFuZ2UgPSAnXFxcXHVkODAwLVxcXFx1ZGZmZicsXG4gICAgICByc0NvbWJvTWFya3NSYW5nZSA9ICdcXFxcdTAzMDAtXFxcXHUwMzZmJyxcbiAgICAgIHJlQ29tYm9IYWxmTWFya3NSYW5nZSA9ICdcXFxcdWZlMjAtXFxcXHVmZTJmJyxcbiAgICAgIHJzQ29tYm9TeW1ib2xzUmFuZ2UgPSAnXFxcXHUyMGQwLVxcXFx1MjBmZicsXG4gICAgICByc0NvbWJvUmFuZ2UgPSByc0NvbWJvTWFya3NSYW5nZSArIHJlQ29tYm9IYWxmTWFya3NSYW5nZSArIHJzQ29tYm9TeW1ib2xzUmFuZ2UsXG4gICAgICByc0RpbmdiYXRSYW5nZSA9ICdcXFxcdTI3MDAtXFxcXHUyN2JmJyxcbiAgICAgIHJzTG93ZXJSYW5nZSA9ICdhLXpcXFxceGRmLVxcXFx4ZjZcXFxceGY4LVxcXFx4ZmYnLFxuICAgICAgcnNNYXRoT3BSYW5nZSA9ICdcXFxceGFjXFxcXHhiMVxcXFx4ZDdcXFxceGY3JyxcbiAgICAgIHJzTm9uQ2hhclJhbmdlID0gJ1xcXFx4MDAtXFxcXHgyZlxcXFx4M2EtXFxcXHg0MFxcXFx4NWItXFxcXHg2MFxcXFx4N2ItXFxcXHhiZicsXG4gICAgICByc1B1bmN0dWF0aW9uUmFuZ2UgPSAnXFxcXHUyMDAwLVxcXFx1MjA2ZicsXG4gICAgICByc1NwYWNlUmFuZ2UgPSAnIFxcXFx0XFxcXHgwYlxcXFxmXFxcXHhhMFxcXFx1ZmVmZlxcXFxuXFxcXHJcXFxcdTIwMjhcXFxcdTIwMjlcXFxcdTE2ODBcXFxcdTE4MGVcXFxcdTIwMDBcXFxcdTIwMDFcXFxcdTIwMDJcXFxcdTIwMDNcXFxcdTIwMDRcXFxcdTIwMDVcXFxcdTIwMDZcXFxcdTIwMDdcXFxcdTIwMDhcXFxcdTIwMDlcXFxcdTIwMGFcXFxcdTIwMmZcXFxcdTIwNWZcXFxcdTMwMDAnLFxuICAgICAgcnNVcHBlclJhbmdlID0gJ0EtWlxcXFx4YzAtXFxcXHhkNlxcXFx4ZDgtXFxcXHhkZScsXG4gICAgICByc1ZhclJhbmdlID0gJ1xcXFx1ZmUwZVxcXFx1ZmUwZicsXG4gICAgICByc0JyZWFrUmFuZ2UgPSByc01hdGhPcFJhbmdlICsgcnNOb25DaGFyUmFuZ2UgKyByc1B1bmN0dWF0aW9uUmFuZ2UgKyByc1NwYWNlUmFuZ2U7XG5cbiAgLyoqIFVzZWQgdG8gY29tcG9zZSB1bmljb2RlIGNhcHR1cmUgZ3JvdXBzLiAqL1xuICB2YXIgcnNBcG9zID0gXCJbJ1xcdTIwMTldXCIsXG4gICAgICByc0FzdHJhbCA9ICdbJyArIHJzQXN0cmFsUmFuZ2UgKyAnXScsXG4gICAgICByc0JyZWFrID0gJ1snICsgcnNCcmVha1JhbmdlICsgJ10nLFxuICAgICAgcnNDb21ibyA9ICdbJyArIHJzQ29tYm9SYW5nZSArICddJyxcbiAgICAgIHJzRGlnaXRzID0gJ1xcXFxkKycsXG4gICAgICByc0RpbmdiYXQgPSAnWycgKyByc0RpbmdiYXRSYW5nZSArICddJyxcbiAgICAgIHJzTG93ZXIgPSAnWycgKyByc0xvd2VyUmFuZ2UgKyAnXScsXG4gICAgICByc01pc2MgPSAnW14nICsgcnNBc3RyYWxSYW5nZSArIHJzQnJlYWtSYW5nZSArIHJzRGlnaXRzICsgcnNEaW5nYmF0UmFuZ2UgKyByc0xvd2VyUmFuZ2UgKyByc1VwcGVyUmFuZ2UgKyAnXScsXG4gICAgICByc0ZpdHogPSAnXFxcXHVkODNjW1xcXFx1ZGZmYi1cXFxcdWRmZmZdJyxcbiAgICAgIHJzTW9kaWZpZXIgPSAnKD86JyArIHJzQ29tYm8gKyAnfCcgKyByc0ZpdHogKyAnKScsXG4gICAgICByc05vbkFzdHJhbCA9ICdbXicgKyByc0FzdHJhbFJhbmdlICsgJ10nLFxuICAgICAgcnNSZWdpb25hbCA9ICcoPzpcXFxcdWQ4M2NbXFxcXHVkZGU2LVxcXFx1ZGRmZl0pezJ9JyxcbiAgICAgIHJzU3VyclBhaXIgPSAnW1xcXFx1ZDgwMC1cXFxcdWRiZmZdW1xcXFx1ZGMwMC1cXFxcdWRmZmZdJyxcbiAgICAgIHJzVXBwZXIgPSAnWycgKyByc1VwcGVyUmFuZ2UgKyAnXScsXG4gICAgICByc1pXSiA9ICdcXFxcdTIwMGQnO1xuXG4gIC8qKiBVc2VkIHRvIGNvbXBvc2UgdW5pY29kZSByZWdleGVzLiAqL1xuICB2YXIgcnNNaXNjTG93ZXIgPSAnKD86JyArIHJzTG93ZXIgKyAnfCcgKyByc01pc2MgKyAnKScsXG4gICAgICByc01pc2NVcHBlciA9ICcoPzonICsgcnNVcHBlciArICd8JyArIHJzTWlzYyArICcpJyxcbiAgICAgIHJzT3B0Q29udHJMb3dlciA9ICcoPzonICsgcnNBcG9zICsgJyg/OmR8bGx8bXxyZXxzfHR8dmUpKT8nLFxuICAgICAgcnNPcHRDb250clVwcGVyID0gJyg/OicgKyByc0Fwb3MgKyAnKD86RHxMTHxNfFJFfFN8VHxWRSkpPycsXG4gICAgICByZU9wdE1vZCA9IHJzTW9kaWZpZXIgKyAnPycsXG4gICAgICByc09wdFZhciA9ICdbJyArIHJzVmFyUmFuZ2UgKyAnXT8nLFxuICAgICAgcnNPcHRKb2luID0gJyg/OicgKyByc1pXSiArICcoPzonICsgW3JzTm9uQXN0cmFsLCByc1JlZ2lvbmFsLCByc1N1cnJQYWlyXS5qb2luKCd8JykgKyAnKScgKyByc09wdFZhciArIHJlT3B0TW9kICsgJykqJyxcbiAgICAgIHJzT3JkTG93ZXIgPSAnXFxcXGQqKD86MXN0fDJuZHwzcmR8KD8hWzEyM10pXFxcXGR0aCkoPz1cXFxcYnxbQS1aX10pJyxcbiAgICAgIHJzT3JkVXBwZXIgPSAnXFxcXGQqKD86MVNUfDJORHwzUkR8KD8hWzEyM10pXFxcXGRUSCkoPz1cXFxcYnxbYS16X10pJyxcbiAgICAgIHJzU2VxID0gcnNPcHRWYXIgKyByZU9wdE1vZCArIHJzT3B0Sm9pbixcbiAgICAgIHJzRW1vamkgPSAnKD86JyArIFtyc0RpbmdiYXQsIHJzUmVnaW9uYWwsIHJzU3VyclBhaXJdLmpvaW4oJ3wnKSArICcpJyArIHJzU2VxLFxuICAgICAgcnNTeW1ib2wgPSAnKD86JyArIFtyc05vbkFzdHJhbCArIHJzQ29tYm8gKyAnPycsIHJzQ29tYm8sIHJzUmVnaW9uYWwsIHJzU3VyclBhaXIsIHJzQXN0cmFsXS5qb2luKCd8JykgKyAnKSc7XG5cbiAgLyoqIFVzZWQgdG8gbWF0Y2ggYXBvc3Ryb3BoZXMuICovXG4gIHZhciByZUFwb3MgPSBSZWdFeHAocnNBcG9zLCAnZycpO1xuXG4gIC8qKlxuICAgKiBVc2VkIHRvIG1hdGNoIFtjb21iaW5pbmcgZGlhY3JpdGljYWwgbWFya3NdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0NvbWJpbmluZ19EaWFjcml0aWNhbF9NYXJrcykgYW5kXG4gICAqIFtjb21iaW5pbmcgZGlhY3JpdGljYWwgbWFya3MgZm9yIHN5bWJvbHNdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0NvbWJpbmluZ19EaWFjcml0aWNhbF9NYXJrc19mb3JfU3ltYm9scykuXG4gICAqL1xuICB2YXIgcmVDb21ib01hcmsgPSBSZWdFeHAocnNDb21ibywgJ2cnKTtcblxuICAvKiogVXNlZCB0byBtYXRjaCBbc3RyaW5nIHN5bWJvbHNdKGh0dHBzOi8vbWF0aGlhc2J5bmVucy5iZS9ub3Rlcy9qYXZhc2NyaXB0LXVuaWNvZGUpLiAqL1xuICB2YXIgcmVVbmljb2RlID0gUmVnRXhwKHJzRml0eiArICcoPz0nICsgcnNGaXR6ICsgJyl8JyArIHJzU3ltYm9sICsgcnNTZXEsICdnJyk7XG5cbiAgLyoqIFVzZWQgdG8gbWF0Y2ggY29tcGxleCBvciBjb21wb3VuZCB3b3Jkcy4gKi9cbiAgdmFyIHJlVW5pY29kZVdvcmQgPSBSZWdFeHAoW1xuICAgIHJzVXBwZXIgKyAnPycgKyByc0xvd2VyICsgJysnICsgcnNPcHRDb250ckxvd2VyICsgJyg/PScgKyBbcnNCcmVhaywgcnNVcHBlciwgJyQnXS5qb2luKCd8JykgKyAnKScsXG4gICAgcnNNaXNjVXBwZXIgKyAnKycgKyByc09wdENvbnRyVXBwZXIgKyAnKD89JyArIFtyc0JyZWFrLCByc1VwcGVyICsgcnNNaXNjTG93ZXIsICckJ10uam9pbignfCcpICsgJyknLFxuICAgIHJzVXBwZXIgKyAnPycgKyByc01pc2NMb3dlciArICcrJyArIHJzT3B0Q29udHJMb3dlcixcbiAgICByc1VwcGVyICsgJysnICsgcnNPcHRDb250clVwcGVyLFxuICAgIHJzT3JkVXBwZXIsXG4gICAgcnNPcmRMb3dlcixcbiAgICByc0RpZ2l0cyxcbiAgICByc0Vtb2ppXG4gIF0uam9pbignfCcpLCAnZycpO1xuXG4gIC8qKiBVc2VkIHRvIGRldGVjdCBzdHJpbmdzIHdpdGggW3plcm8td2lkdGggam9pbmVycyBvciBjb2RlIHBvaW50cyBmcm9tIHRoZSBhc3RyYWwgcGxhbmVzXShodHRwOi8vZWV2LmVlL2Jsb2cvMjAxNS8wOS8xMi9kYXJrLWNvcm5lcnMtb2YtdW5pY29kZS8pLiAqL1xuICB2YXIgcmVIYXNVbmljb2RlID0gUmVnRXhwKCdbJyArIHJzWldKICsgcnNBc3RyYWxSYW5nZSAgKyByc0NvbWJvUmFuZ2UgKyByc1ZhclJhbmdlICsgJ10nKTtcblxuICAvKiogVXNlZCB0byBkZXRlY3Qgc3RyaW5ncyB0aGF0IG5lZWQgYSBtb3JlIHJvYnVzdCByZWdleHAgdG8gbWF0Y2ggd29yZHMuICovXG4gIHZhciByZUhhc1VuaWNvZGVXb3JkID0gL1thLXpdW0EtWl18W0EtWl17Mn1bYS16XXxbMC05XVthLXpBLVpdfFthLXpBLVpdWzAtOV18W15hLXpBLVowLTkgXS87XG5cbiAgLyoqIFVzZWQgdG8gYXNzaWduIGRlZmF1bHQgYGNvbnRleHRgIG9iamVjdCBwcm9wZXJ0aWVzLiAqL1xuICB2YXIgY29udGV4dFByb3BzID0gW1xuICAgICdBcnJheScsICdCdWZmZXInLCAnRGF0YVZpZXcnLCAnRGF0ZScsICdFcnJvcicsICdGbG9hdDMyQXJyYXknLCAnRmxvYXQ2NEFycmF5JyxcbiAgICAnRnVuY3Rpb24nLCAnSW50OEFycmF5JywgJ0ludDE2QXJyYXknLCAnSW50MzJBcnJheScsICdNYXAnLCAnTWF0aCcsICdPYmplY3QnLFxuICAgICdQcm9taXNlJywgJ1JlZ0V4cCcsICdTZXQnLCAnU3RyaW5nJywgJ1N5bWJvbCcsICdUeXBlRXJyb3InLCAnVWludDhBcnJheScsXG4gICAgJ1VpbnQ4Q2xhbXBlZEFycmF5JywgJ1VpbnQxNkFycmF5JywgJ1VpbnQzMkFycmF5JywgJ1dlYWtNYXAnLFxuICAgICdfJywgJ2NsZWFyVGltZW91dCcsICdpc0Zpbml0ZScsICdwYXJzZUludCcsICdzZXRUaW1lb3V0J1xuICBdO1xuXG4gIC8qKiBVc2VkIHRvIG1ha2UgdGVtcGxhdGUgc291cmNlVVJMcyBlYXNpZXIgdG8gaWRlbnRpZnkuICovXG4gIHZhciB0ZW1wbGF0ZUNvdW50ZXIgPSAtMTtcblxuICAvKiogVXNlZCB0byBpZGVudGlmeSBgdG9TdHJpbmdUYWdgIHZhbHVlcyBvZiB0eXBlZCBhcnJheXMuICovXG4gIHZhciB0eXBlZEFycmF5VGFncyA9IHt9O1xuICB0eXBlZEFycmF5VGFnc1tmbG9hdDMyVGFnXSA9IHR5cGVkQXJyYXlUYWdzW2Zsb2F0NjRUYWddID1cbiAgdHlwZWRBcnJheVRhZ3NbaW50OFRhZ10gPSB0eXBlZEFycmF5VGFnc1tpbnQxNlRhZ10gPVxuICB0eXBlZEFycmF5VGFnc1tpbnQzMlRhZ10gPSB0eXBlZEFycmF5VGFnc1t1aW50OFRhZ10gPVxuICB0eXBlZEFycmF5VGFnc1t1aW50OENsYW1wZWRUYWddID0gdHlwZWRBcnJheVRhZ3NbdWludDE2VGFnXSA9XG4gIHR5cGVkQXJyYXlUYWdzW3VpbnQzMlRhZ10gPSB0cnVlO1xuICB0eXBlZEFycmF5VGFnc1thcmdzVGFnXSA9IHR5cGVkQXJyYXlUYWdzW2FycmF5VGFnXSA9XG4gIHR5cGVkQXJyYXlUYWdzW2FycmF5QnVmZmVyVGFnXSA9IHR5cGVkQXJyYXlUYWdzW2Jvb2xUYWddID1cbiAgdHlwZWRBcnJheVRhZ3NbZGF0YVZpZXdUYWddID0gdHlwZWRBcnJheVRhZ3NbZGF0ZVRhZ10gPVxuICB0eXBlZEFycmF5VGFnc1tlcnJvclRhZ10gPSB0eXBlZEFycmF5VGFnc1tmdW5jVGFnXSA9XG4gIHR5cGVkQXJyYXlUYWdzW21hcFRhZ10gPSB0eXBlZEFycmF5VGFnc1tudW1iZXJUYWddID1cbiAgdHlwZWRBcnJheVRhZ3Nbb2JqZWN0VGFnXSA9IHR5cGVkQXJyYXlUYWdzW3JlZ2V4cFRhZ10gPVxuICB0eXBlZEFycmF5VGFnc1tzZXRUYWddID0gdHlwZWRBcnJheVRhZ3Nbc3RyaW5nVGFnXSA9XG4gIHR5cGVkQXJyYXlUYWdzW3dlYWtNYXBUYWddID0gZmFsc2U7XG5cbiAgLyoqIFVzZWQgdG8gaWRlbnRpZnkgYHRvU3RyaW5nVGFnYCB2YWx1ZXMgc3VwcG9ydGVkIGJ5IGBfLmNsb25lYC4gKi9cbiAgdmFyIGNsb25lYWJsZVRhZ3MgPSB7fTtcbiAgY2xvbmVhYmxlVGFnc1thcmdzVGFnXSA9IGNsb25lYWJsZVRhZ3NbYXJyYXlUYWddID1cbiAgY2xvbmVhYmxlVGFnc1thcnJheUJ1ZmZlclRhZ10gPSBjbG9uZWFibGVUYWdzW2RhdGFWaWV3VGFnXSA9XG4gIGNsb25lYWJsZVRhZ3NbYm9vbFRhZ10gPSBjbG9uZWFibGVUYWdzW2RhdGVUYWddID1cbiAgY2xvbmVhYmxlVGFnc1tmbG9hdDMyVGFnXSA9IGNsb25lYWJsZVRhZ3NbZmxvYXQ2NFRhZ10gPVxuICBjbG9uZWFibGVUYWdzW2ludDhUYWddID0gY2xvbmVhYmxlVGFnc1tpbnQxNlRhZ10gPVxuICBjbG9uZWFibGVUYWdzW2ludDMyVGFnXSA9IGNsb25lYWJsZVRhZ3NbbWFwVGFnXSA9XG4gIGNsb25lYWJsZVRhZ3NbbnVtYmVyVGFnXSA9IGNsb25lYWJsZVRhZ3Nbb2JqZWN0VGFnXSA9XG4gIGNsb25lYWJsZVRhZ3NbcmVnZXhwVGFnXSA9IGNsb25lYWJsZVRhZ3Nbc2V0VGFnXSA9XG4gIGNsb25lYWJsZVRhZ3Nbc3RyaW5nVGFnXSA9IGNsb25lYWJsZVRhZ3Nbc3ltYm9sVGFnXSA9XG4gIGNsb25lYWJsZVRhZ3NbdWludDhUYWddID0gY2xvbmVhYmxlVGFnc1t1aW50OENsYW1wZWRUYWddID1cbiAgY2xvbmVhYmxlVGFnc1t1aW50MTZUYWddID0gY2xvbmVhYmxlVGFnc1t1aW50MzJUYWddID0gdHJ1ZTtcbiAgY2xvbmVhYmxlVGFnc1tlcnJvclRhZ10gPSBjbG9uZWFibGVUYWdzW2Z1bmNUYWddID1cbiAgY2xvbmVhYmxlVGFnc1t3ZWFrTWFwVGFnXSA9IGZhbHNlO1xuXG4gIC8qKiBVc2VkIHRvIG1hcCBMYXRpbiBVbmljb2RlIGxldHRlcnMgdG8gYmFzaWMgTGF0aW4gbGV0dGVycy4gKi9cbiAgdmFyIGRlYnVycmVkTGV0dGVycyA9IHtcbiAgICAvLyBMYXRpbi0xIFN1cHBsZW1lbnQgYmxvY2suXG4gICAgJ1xceGMwJzogJ0EnLCAgJ1xceGMxJzogJ0EnLCAnXFx4YzInOiAnQScsICdcXHhjMyc6ICdBJywgJ1xceGM0JzogJ0EnLCAnXFx4YzUnOiAnQScsXG4gICAgJ1xceGUwJzogJ2EnLCAgJ1xceGUxJzogJ2EnLCAnXFx4ZTInOiAnYScsICdcXHhlMyc6ICdhJywgJ1xceGU0JzogJ2EnLCAnXFx4ZTUnOiAnYScsXG4gICAgJ1xceGM3JzogJ0MnLCAgJ1xceGU3JzogJ2MnLFxuICAgICdcXHhkMCc6ICdEJywgICdcXHhmMCc6ICdkJyxcbiAgICAnXFx4YzgnOiAnRScsICAnXFx4YzknOiAnRScsICdcXHhjYSc6ICdFJywgJ1xceGNiJzogJ0UnLFxuICAgICdcXHhlOCc6ICdlJywgICdcXHhlOSc6ICdlJywgJ1xceGVhJzogJ2UnLCAnXFx4ZWInOiAnZScsXG4gICAgJ1xceGNjJzogJ0knLCAgJ1xceGNkJzogJ0knLCAnXFx4Y2UnOiAnSScsICdcXHhjZic6ICdJJyxcbiAgICAnXFx4ZWMnOiAnaScsICAnXFx4ZWQnOiAnaScsICdcXHhlZSc6ICdpJywgJ1xceGVmJzogJ2knLFxuICAgICdcXHhkMSc6ICdOJywgICdcXHhmMSc6ICduJyxcbiAgICAnXFx4ZDInOiAnTycsICAnXFx4ZDMnOiAnTycsICdcXHhkNCc6ICdPJywgJ1xceGQ1JzogJ08nLCAnXFx4ZDYnOiAnTycsICdcXHhkOCc6ICdPJyxcbiAgICAnXFx4ZjInOiAnbycsICAnXFx4ZjMnOiAnbycsICdcXHhmNCc6ICdvJywgJ1xceGY1JzogJ28nLCAnXFx4ZjYnOiAnbycsICdcXHhmOCc6ICdvJyxcbiAgICAnXFx4ZDknOiAnVScsICAnXFx4ZGEnOiAnVScsICdcXHhkYic6ICdVJywgJ1xceGRjJzogJ1UnLFxuICAgICdcXHhmOSc6ICd1JywgICdcXHhmYSc6ICd1JywgJ1xceGZiJzogJ3UnLCAnXFx4ZmMnOiAndScsXG4gICAgJ1xceGRkJzogJ1knLCAgJ1xceGZkJzogJ3knLCAnXFx4ZmYnOiAneScsXG4gICAgJ1xceGM2JzogJ0FlJywgJ1xceGU2JzogJ2FlJyxcbiAgICAnXFx4ZGUnOiAnVGgnLCAnXFx4ZmUnOiAndGgnLFxuICAgICdcXHhkZic6ICdzcycsXG4gICAgLy8gTGF0aW4gRXh0ZW5kZWQtQSBibG9jay5cbiAgICAnXFx1MDEwMCc6ICdBJywgICdcXHUwMTAyJzogJ0EnLCAnXFx1MDEwNCc6ICdBJyxcbiAgICAnXFx1MDEwMSc6ICdhJywgICdcXHUwMTAzJzogJ2EnLCAnXFx1MDEwNSc6ICdhJyxcbiAgICAnXFx1MDEwNic6ICdDJywgICdcXHUwMTA4JzogJ0MnLCAnXFx1MDEwYSc6ICdDJywgJ1xcdTAxMGMnOiAnQycsXG4gICAgJ1xcdTAxMDcnOiAnYycsICAnXFx1MDEwOSc6ICdjJywgJ1xcdTAxMGInOiAnYycsICdcXHUwMTBkJzogJ2MnLFxuICAgICdcXHUwMTBlJzogJ0QnLCAgJ1xcdTAxMTAnOiAnRCcsICdcXHUwMTBmJzogJ2QnLCAnXFx1MDExMSc6ICdkJyxcbiAgICAnXFx1MDExMic6ICdFJywgICdcXHUwMTE0JzogJ0UnLCAnXFx1MDExNic6ICdFJywgJ1xcdTAxMTgnOiAnRScsICdcXHUwMTFhJzogJ0UnLFxuICAgICdcXHUwMTEzJzogJ2UnLCAgJ1xcdTAxMTUnOiAnZScsICdcXHUwMTE3JzogJ2UnLCAnXFx1MDExOSc6ICdlJywgJ1xcdTAxMWInOiAnZScsXG4gICAgJ1xcdTAxMWMnOiAnRycsICAnXFx1MDExZSc6ICdHJywgJ1xcdTAxMjAnOiAnRycsICdcXHUwMTIyJzogJ0cnLFxuICAgICdcXHUwMTFkJzogJ2cnLCAgJ1xcdTAxMWYnOiAnZycsICdcXHUwMTIxJzogJ2cnLCAnXFx1MDEyMyc6ICdnJyxcbiAgICAnXFx1MDEyNCc6ICdIJywgICdcXHUwMTI2JzogJ0gnLCAnXFx1MDEyNSc6ICdoJywgJ1xcdTAxMjcnOiAnaCcsXG4gICAgJ1xcdTAxMjgnOiAnSScsICAnXFx1MDEyYSc6ICdJJywgJ1xcdTAxMmMnOiAnSScsICdcXHUwMTJlJzogJ0knLCAnXFx1MDEzMCc6ICdJJyxcbiAgICAnXFx1MDEyOSc6ICdpJywgICdcXHUwMTJiJzogJ2knLCAnXFx1MDEyZCc6ICdpJywgJ1xcdTAxMmYnOiAnaScsICdcXHUwMTMxJzogJ2knLFxuICAgICdcXHUwMTM0JzogJ0onLCAgJ1xcdTAxMzUnOiAnaicsXG4gICAgJ1xcdTAxMzYnOiAnSycsICAnXFx1MDEzNyc6ICdrJywgJ1xcdTAxMzgnOiAnaycsXG4gICAgJ1xcdTAxMzknOiAnTCcsICAnXFx1MDEzYic6ICdMJywgJ1xcdTAxM2QnOiAnTCcsICdcXHUwMTNmJzogJ0wnLCAnXFx1MDE0MSc6ICdMJyxcbiAgICAnXFx1MDEzYSc6ICdsJywgICdcXHUwMTNjJzogJ2wnLCAnXFx1MDEzZSc6ICdsJywgJ1xcdTAxNDAnOiAnbCcsICdcXHUwMTQyJzogJ2wnLFxuICAgICdcXHUwMTQzJzogJ04nLCAgJ1xcdTAxNDUnOiAnTicsICdcXHUwMTQ3JzogJ04nLCAnXFx1MDE0YSc6ICdOJyxcbiAgICAnXFx1MDE0NCc6ICduJywgICdcXHUwMTQ2JzogJ24nLCAnXFx1MDE0OCc6ICduJywgJ1xcdTAxNGInOiAnbicsXG4gICAgJ1xcdTAxNGMnOiAnTycsICAnXFx1MDE0ZSc6ICdPJywgJ1xcdTAxNTAnOiAnTycsXG4gICAgJ1xcdTAxNGQnOiAnbycsICAnXFx1MDE0Zic6ICdvJywgJ1xcdTAxNTEnOiAnbycsXG4gICAgJ1xcdTAxNTQnOiAnUicsICAnXFx1MDE1Nic6ICdSJywgJ1xcdTAxNTgnOiAnUicsXG4gICAgJ1xcdTAxNTUnOiAncicsICAnXFx1MDE1Nyc6ICdyJywgJ1xcdTAxNTknOiAncicsXG4gICAgJ1xcdTAxNWEnOiAnUycsICAnXFx1MDE1Yyc6ICdTJywgJ1xcdTAxNWUnOiAnUycsICdcXHUwMTYwJzogJ1MnLFxuICAgICdcXHUwMTViJzogJ3MnLCAgJ1xcdTAxNWQnOiAncycsICdcXHUwMTVmJzogJ3MnLCAnXFx1MDE2MSc6ICdzJyxcbiAgICAnXFx1MDE2Mic6ICdUJywgICdcXHUwMTY0JzogJ1QnLCAnXFx1MDE2Nic6ICdUJyxcbiAgICAnXFx1MDE2Myc6ICd0JywgICdcXHUwMTY1JzogJ3QnLCAnXFx1MDE2Nyc6ICd0JyxcbiAgICAnXFx1MDE2OCc6ICdVJywgICdcXHUwMTZhJzogJ1UnLCAnXFx1MDE2Yyc6ICdVJywgJ1xcdTAxNmUnOiAnVScsICdcXHUwMTcwJzogJ1UnLCAnXFx1MDE3Mic6ICdVJyxcbiAgICAnXFx1MDE2OSc6ICd1JywgICdcXHUwMTZiJzogJ3UnLCAnXFx1MDE2ZCc6ICd1JywgJ1xcdTAxNmYnOiAndScsICdcXHUwMTcxJzogJ3UnLCAnXFx1MDE3Myc6ICd1JyxcbiAgICAnXFx1MDE3NCc6ICdXJywgICdcXHUwMTc1JzogJ3cnLFxuICAgICdcXHUwMTc2JzogJ1knLCAgJ1xcdTAxNzcnOiAneScsICdcXHUwMTc4JzogJ1knLFxuICAgICdcXHUwMTc5JzogJ1onLCAgJ1xcdTAxN2InOiAnWicsICdcXHUwMTdkJzogJ1onLFxuICAgICdcXHUwMTdhJzogJ3onLCAgJ1xcdTAxN2MnOiAneicsICdcXHUwMTdlJzogJ3onLFxuICAgICdcXHUwMTMyJzogJ0lKJywgJ1xcdTAxMzMnOiAnaWonLFxuICAgICdcXHUwMTUyJzogJ09lJywgJ1xcdTAxNTMnOiAnb2UnLFxuICAgICdcXHUwMTQ5JzogXCInblwiLCAnXFx1MDE3Zic6ICdzJ1xuICB9O1xuXG4gIC8qKiBVc2VkIHRvIG1hcCBjaGFyYWN0ZXJzIHRvIEhUTUwgZW50aXRpZXMuICovXG4gIHZhciBodG1sRXNjYXBlcyA9IHtcbiAgICAnJic6ICcmYW1wOycsXG4gICAgJzwnOiAnJmx0OycsXG4gICAgJz4nOiAnJmd0OycsXG4gICAgJ1wiJzogJyZxdW90OycsXG4gICAgXCInXCI6ICcmIzM5OydcbiAgfTtcblxuICAvKiogVXNlZCB0byBtYXAgSFRNTCBlbnRpdGllcyB0byBjaGFyYWN0ZXJzLiAqL1xuICB2YXIgaHRtbFVuZXNjYXBlcyA9IHtcbiAgICAnJmFtcDsnOiAnJicsXG4gICAgJyZsdDsnOiAnPCcsXG4gICAgJyZndDsnOiAnPicsXG4gICAgJyZxdW90Oyc6ICdcIicsXG4gICAgJyYjMzk7JzogXCInXCJcbiAgfTtcblxuICAvKiogVXNlZCB0byBlc2NhcGUgY2hhcmFjdGVycyBmb3IgaW5jbHVzaW9uIGluIGNvbXBpbGVkIHN0cmluZyBsaXRlcmFscy4gKi9cbiAgdmFyIHN0cmluZ0VzY2FwZXMgPSB7XG4gICAgJ1xcXFwnOiAnXFxcXCcsXG4gICAgXCInXCI6IFwiJ1wiLFxuICAgICdcXG4nOiAnbicsXG4gICAgJ1xccic6ICdyJyxcbiAgICAnXFx1MjAyOCc6ICd1MjAyOCcsXG4gICAgJ1xcdTIwMjknOiAndTIwMjknXG4gIH07XG5cbiAgLyoqIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIHdpdGhvdXQgYSBkZXBlbmRlbmN5IG9uIGByb290YC4gKi9cbiAgdmFyIGZyZWVQYXJzZUZsb2F0ID0gcGFyc2VGbG9hdCxcbiAgICAgIGZyZWVQYXJzZUludCA9IHBhcnNlSW50O1xuXG4gIC8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgZ2xvYmFsYCBmcm9tIE5vZGUuanMuICovXG4gIHZhciBmcmVlR2xvYmFsID0gdHlwZW9mIGdsb2JhbCA9PSAnb2JqZWN0JyAmJiBnbG9iYWwgJiYgZ2xvYmFsLk9iamVjdCA9PT0gT2JqZWN0ICYmIGdsb2JhbDtcblxuICAvKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYHNlbGZgLiAqL1xuICB2YXIgZnJlZVNlbGYgPSB0eXBlb2Ygc2VsZiA9PSAnb2JqZWN0JyAmJiBzZWxmICYmIHNlbGYuT2JqZWN0ID09PSBPYmplY3QgJiYgc2VsZjtcblxuICAvKiogVXNlZCBhcyBhIHJlZmVyZW5jZSB0byB0aGUgZ2xvYmFsIG9iamVjdC4gKi9cbiAgdmFyIHJvb3QgPSBmcmVlR2xvYmFsIHx8IGZyZWVTZWxmIHx8IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5cbiAgLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBleHBvcnRzYC4gKi9cbiAgdmFyIGZyZWVFeHBvcnRzID0gdHlwZW9mIGV4cG9ydHMgPT0gJ29iamVjdCcgJiYgZXhwb3J0cyAmJiAhZXhwb3J0cy5ub2RlVHlwZSAmJiBleHBvcnRzO1xuXG4gIC8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgbW9kdWxlYC4gKi9cbiAgdmFyIGZyZWVNb2R1bGUgPSBmcmVlRXhwb3J0cyAmJiB0eXBlb2YgbW9kdWxlID09ICdvYmplY3QnICYmIG1vZHVsZSAmJiAhbW9kdWxlLm5vZGVUeXBlICYmIG1vZHVsZTtcblxuICAvKiogRGV0ZWN0IHRoZSBwb3B1bGFyIENvbW1vbkpTIGV4dGVuc2lvbiBgbW9kdWxlLmV4cG9ydHNgLiAqL1xuICB2YXIgbW9kdWxlRXhwb3J0cyA9IGZyZWVNb2R1bGUgJiYgZnJlZU1vZHVsZS5leHBvcnRzID09PSBmcmVlRXhwb3J0cztcblxuICAvKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYHByb2Nlc3NgIGZyb20gTm9kZS5qcy4gKi9cbiAgdmFyIGZyZWVQcm9jZXNzID0gbW9kdWxlRXhwb3J0cyAmJiBmcmVlR2xvYmFsLnByb2Nlc3M7XG5cbiAgLyoqIFVzZWQgdG8gYWNjZXNzIGZhc3RlciBOb2RlLmpzIGhlbHBlcnMuICovXG4gIHZhciBub2RlVXRpbCA9IChmdW5jdGlvbigpIHtcbiAgICB0cnkge1xuICAgICAgLy8gVXNlIGB1dGlsLnR5cGVzYCBmb3IgTm9kZS5qcyAxMCsuXG4gICAgICB2YXIgdHlwZXMgPSBmcmVlTW9kdWxlICYmIGZyZWVNb2R1bGUucmVxdWlyZSAmJiBmcmVlTW9kdWxlLnJlcXVpcmUoJ3V0aWwnKS50eXBlcztcblxuICAgICAgaWYgKHR5cGVzKSB7XG4gICAgICAgIHJldHVybiB0eXBlcztcbiAgICAgIH1cblxuICAgICAgLy8gTGVnYWN5IGBwcm9jZXNzLmJpbmRpbmcoJ3V0aWwnKWAgZm9yIE5vZGUuanMgPCAxMC5cbiAgICAgIHJldHVybiBmcmVlUHJvY2VzcyAmJiBmcmVlUHJvY2Vzcy5iaW5kaW5nICYmIGZyZWVQcm9jZXNzLmJpbmRpbmcoJ3V0aWwnKTtcbiAgICB9IGNhdGNoIChlKSB7fVxuICB9KCkpO1xuXG4gIC8qIE5vZGUuanMgaGVscGVyIHJlZmVyZW5jZXMuICovXG4gIHZhciBub2RlSXNBcnJheUJ1ZmZlciA9IG5vZGVVdGlsICYmIG5vZGVVdGlsLmlzQXJyYXlCdWZmZXIsXG4gICAgICBub2RlSXNEYXRlID0gbm9kZVV0aWwgJiYgbm9kZVV0aWwuaXNEYXRlLFxuICAgICAgbm9kZUlzTWFwID0gbm9kZVV0aWwgJiYgbm9kZVV0aWwuaXNNYXAsXG4gICAgICBub2RlSXNSZWdFeHAgPSBub2RlVXRpbCAmJiBub2RlVXRpbC5pc1JlZ0V4cCxcbiAgICAgIG5vZGVJc1NldCA9IG5vZGVVdGlsICYmIG5vZGVVdGlsLmlzU2V0LFxuICAgICAgbm9kZUlzVHlwZWRBcnJheSA9IG5vZGVVdGlsICYmIG5vZGVVdGlsLmlzVHlwZWRBcnJheTtcblxuICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAvKipcbiAgICogQSBmYXN0ZXIgYWx0ZXJuYXRpdmUgdG8gYEZ1bmN0aW9uI2FwcGx5YCwgdGhpcyBmdW5jdGlvbiBpbnZva2VzIGBmdW5jYFxuICAgKiB3aXRoIHRoZSBgdGhpc2AgYmluZGluZyBvZiBgdGhpc0FyZ2AgYW5kIHRoZSBhcmd1bWVudHMgb2YgYGFyZ3NgLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBpbnZva2UuXG4gICAqIEBwYXJhbSB7Kn0gdGhpc0FyZyBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGZ1bmNgLlxuICAgKiBAcGFyYW0ge0FycmF5fSBhcmdzIFRoZSBhcmd1bWVudHMgdG8gaW52b2tlIGBmdW5jYCB3aXRoLlxuICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmVzdWx0IG9mIGBmdW5jYC5cbiAgICovXG4gIGZ1bmN0aW9uIGFwcGx5KGZ1bmMsIHRoaXNBcmcsIGFyZ3MpIHtcbiAgICBzd2l0Y2ggKGFyZ3MubGVuZ3RoKSB7XG4gICAgICBjYXNlIDA6IHJldHVybiBmdW5jLmNhbGwodGhpc0FyZyk7XG4gICAgICBjYXNlIDE6IHJldHVybiBmdW5jLmNhbGwodGhpc0FyZywgYXJnc1swXSk7XG4gICAgICBjYXNlIDI6IHJldHVybiBmdW5jLmNhbGwodGhpc0FyZywgYXJnc1swXSwgYXJnc1sxXSk7XG4gICAgICBjYXNlIDM6IHJldHVybiBmdW5jLmNhbGwodGhpc0FyZywgYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSk7XG4gICAgfVxuICAgIHJldHVybiBmdW5jLmFwcGx5KHRoaXNBcmcsIGFyZ3MpO1xuICB9XG5cbiAgLyoqXG4gICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZUFnZ3JlZ2F0b3JgIGZvciBhcnJheXMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gc2V0dGVyIFRoZSBmdW5jdGlvbiB0byBzZXQgYGFjY3VtdWxhdG9yYCB2YWx1ZXMuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBpdGVyYXRlZSB0byB0cmFuc2Zvcm0ga2V5cy5cbiAgICogQHBhcmFtIHtPYmplY3R9IGFjY3VtdWxhdG9yIFRoZSBpbml0aWFsIGFnZ3JlZ2F0ZWQgb2JqZWN0LlxuICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgYGFjY3VtdWxhdG9yYC5cbiAgICovXG4gIGZ1bmN0aW9uIGFycmF5QWdncmVnYXRvcihhcnJheSwgc2V0dGVyLCBpdGVyYXRlZSwgYWNjdW11bGF0b3IpIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG5cbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgdmFyIHZhbHVlID0gYXJyYXlbaW5kZXhdO1xuICAgICAgc2V0dGVyKGFjY3VtdWxhdG9yLCB2YWx1ZSwgaXRlcmF0ZWUodmFsdWUpLCBhcnJheSk7XG4gICAgfVxuICAgIHJldHVybiBhY2N1bXVsYXRvcjtcbiAgfVxuXG4gIC8qKlxuICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uZm9yRWFjaGAgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yXG4gICAqIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gICAqL1xuICBmdW5jdGlvbiBhcnJheUVhY2goYXJyYXksIGl0ZXJhdGVlKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuXG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIGlmIChpdGVyYXRlZShhcnJheVtpbmRleF0sIGluZGV4LCBhcnJheSkgPT09IGZhbHNlKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gYXJyYXk7XG4gIH1cblxuICAvKipcbiAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLmZvckVhY2hSaWdodGAgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yXG4gICAqIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gICAqL1xuICBmdW5jdGlvbiBhcnJheUVhY2hSaWdodChhcnJheSwgaXRlcmF0ZWUpIHtcbiAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG5cbiAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgIGlmIChpdGVyYXRlZShhcnJheVtsZW5ndGhdLCBsZW5ndGgsIGFycmF5KSA9PT0gZmFsc2UpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBhcnJheTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uZXZlcnlgIGZvciBhcnJheXMgd2l0aG91dCBzdXBwb3J0IGZvclxuICAgKiBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYWxsIGVsZW1lbnRzIHBhc3MgdGhlIHByZWRpY2F0ZSBjaGVjayxcbiAgICogIGVsc2UgYGZhbHNlYC5cbiAgICovXG4gIGZ1bmN0aW9uIGFycmF5RXZlcnkoYXJyYXksIHByZWRpY2F0ZSkge1xuICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcblxuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICBpZiAoIXByZWRpY2F0ZShhcnJheVtpbmRleF0sIGluZGV4LCBhcnJheSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uZmlsdGVyYCBmb3IgYXJyYXlzIHdpdGhvdXQgc3VwcG9ydCBmb3JcbiAgICogaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcmVkaWNhdGUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmlsdGVyZWQgYXJyYXkuXG4gICAqL1xuICBmdW5jdGlvbiBhcnJheUZpbHRlcihhcnJheSwgcHJlZGljYXRlKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoLFxuICAgICAgICByZXNJbmRleCA9IDAsXG4gICAgICAgIHJlc3VsdCA9IFtdO1xuXG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIHZhciB2YWx1ZSA9IGFycmF5W2luZGV4XTtcbiAgICAgIGlmIChwcmVkaWNhdGUodmFsdWUsIGluZGV4LCBhcnJheSkpIHtcbiAgICAgICAgcmVzdWx0W3Jlc0luZGV4KytdID0gdmFsdWU7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLmluY2x1ZGVzYCBmb3IgYXJyYXlzIHdpdGhvdXQgc3VwcG9ydCBmb3JcbiAgICogc3BlY2lmeWluZyBhbiBpbmRleCB0byBzZWFyY2ggZnJvbS5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICogQHBhcmFtIHsqfSB0YXJnZXQgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuXG4gICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdGFyZ2V0YCBpcyBmb3VuZCwgZWxzZSBgZmFsc2VgLlxuICAgKi9cbiAgZnVuY3Rpb24gYXJyYXlJbmNsdWRlcyhhcnJheSwgdmFsdWUpIHtcbiAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgcmV0dXJuICEhbGVuZ3RoICYmIGJhc2VJbmRleE9mKGFycmF5LCB2YWx1ZSwgMCkgPiAtMTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGlzIGZ1bmN0aW9uIGlzIGxpa2UgYGFycmF5SW5jbHVkZXNgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYSBjb21wYXJhdG9yLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgKiBAcGFyYW0geyp9IHRhcmdldCBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gY29tcGFyYXRvciBUaGUgY29tcGFyYXRvciBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHRhcmdldGAgaXMgZm91bmQsIGVsc2UgYGZhbHNlYC5cbiAgICovXG4gIGZ1bmN0aW9uIGFycmF5SW5jbHVkZXNXaXRoKGFycmF5LCB2YWx1ZSwgY29tcGFyYXRvcikge1xuICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcblxuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICBpZiAoY29tcGFyYXRvcih2YWx1ZSwgYXJyYXlbaW5kZXhdKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgLyoqXG4gICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5tYXBgIGZvciBhcnJheXMgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZVxuICAgKiBzaG9ydGhhbmRzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IG1hcHBlZCBhcnJheS5cbiAgICovXG4gIGZ1bmN0aW9uIGFycmF5TWFwKGFycmF5LCBpdGVyYXRlZSkge1xuICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aCxcbiAgICAgICAgcmVzdWx0ID0gQXJyYXkobGVuZ3RoKTtcblxuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICByZXN1bHRbaW5kZXhdID0gaXRlcmF0ZWUoYXJyYXlbaW5kZXhdLCBpbmRleCwgYXJyYXkpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIEFwcGVuZHMgdGhlIGVsZW1lbnRzIG9mIGB2YWx1ZXNgIHRvIGBhcnJheWAuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBtb2RpZnkuXG4gICAqIEBwYXJhbSB7QXJyYXl9IHZhbHVlcyBUaGUgdmFsdWVzIHRvIGFwcGVuZC5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gICAqL1xuICBmdW5jdGlvbiBhcnJheVB1c2goYXJyYXksIHZhbHVlcykge1xuICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICBsZW5ndGggPSB2YWx1ZXMubGVuZ3RoLFxuICAgICAgICBvZmZzZXQgPSBhcnJheS5sZW5ndGg7XG5cbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgYXJyYXlbb2Zmc2V0ICsgaW5kZXhdID0gdmFsdWVzW2luZGV4XTtcbiAgICB9XG4gICAgcmV0dXJuIGFycmF5O1xuICB9XG5cbiAgLyoqXG4gICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5yZWR1Y2VgIGZvciBhcnJheXMgd2l0aG91dCBzdXBwb3J0IGZvclxuICAgKiBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAqIEBwYXJhbSB7Kn0gW2FjY3VtdWxhdG9yXSBUaGUgaW5pdGlhbCB2YWx1ZS5cbiAgICogQHBhcmFtIHtib29sZWFufSBbaW5pdEFjY3VtXSBTcGVjaWZ5IHVzaW5nIHRoZSBmaXJzdCBlbGVtZW50IG9mIGBhcnJheWAgYXNcbiAgICogIHRoZSBpbml0aWFsIHZhbHVlLlxuICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgYWNjdW11bGF0ZWQgdmFsdWUuXG4gICAqL1xuICBmdW5jdGlvbiBhcnJheVJlZHVjZShhcnJheSwgaXRlcmF0ZWUsIGFjY3VtdWxhdG9yLCBpbml0QWNjdW0pIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG5cbiAgICBpZiAoaW5pdEFjY3VtICYmIGxlbmd0aCkge1xuICAgICAgYWNjdW11bGF0b3IgPSBhcnJheVsrK2luZGV4XTtcbiAgICB9XG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIGFjY3VtdWxhdG9yID0gaXRlcmF0ZWUoYWNjdW11bGF0b3IsIGFycmF5W2luZGV4XSwgaW5kZXgsIGFycmF5KTtcbiAgICB9XG4gICAgcmV0dXJuIGFjY3VtdWxhdG9yO1xuICB9XG5cbiAgLyoqXG4gICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5yZWR1Y2VSaWdodGAgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yXG4gICAqIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICogQHBhcmFtIHsqfSBbYWNjdW11bGF0b3JdIFRoZSBpbml0aWFsIHZhbHVlLlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtpbml0QWNjdW1dIFNwZWNpZnkgdXNpbmcgdGhlIGxhc3QgZWxlbWVudCBvZiBgYXJyYXlgIGFzXG4gICAqICB0aGUgaW5pdGlhbCB2YWx1ZS5cbiAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGFjY3VtdWxhdGVkIHZhbHVlLlxuICAgKi9cbiAgZnVuY3Rpb24gYXJyYXlSZWR1Y2VSaWdodChhcnJheSwgaXRlcmF0ZWUsIGFjY3VtdWxhdG9yLCBpbml0QWNjdW0pIHtcbiAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgaWYgKGluaXRBY2N1bSAmJiBsZW5ndGgpIHtcbiAgICAgIGFjY3VtdWxhdG9yID0gYXJyYXlbLS1sZW5ndGhdO1xuICAgIH1cbiAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgIGFjY3VtdWxhdG9yID0gaXRlcmF0ZWUoYWNjdW11bGF0b3IsIGFycmF5W2xlbmd0aF0sIGxlbmd0aCwgYXJyYXkpO1xuICAgIH1cbiAgICByZXR1cm4gYWNjdW11bGF0b3I7XG4gIH1cblxuICAvKipcbiAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLnNvbWVgIGZvciBhcnJheXMgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZVxuICAgKiBzaG9ydGhhbmRzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW55IGVsZW1lbnQgcGFzc2VzIHRoZSBwcmVkaWNhdGUgY2hlY2ssXG4gICAqICBlbHNlIGBmYWxzZWAuXG4gICAqL1xuICBmdW5jdGlvbiBhcnJheVNvbWUoYXJyYXksIHByZWRpY2F0ZSkge1xuICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcblxuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICBpZiAocHJlZGljYXRlKGFycmF5W2luZGV4XSwgaW5kZXgsIGFycmF5KSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIHNpemUgb2YgYW4gQVNDSUkgYHN0cmluZ2AuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyBpbnNwZWN0LlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBzdHJpbmcgc2l6ZS5cbiAgICovXG4gIHZhciBhc2NpaVNpemUgPSBiYXNlUHJvcGVydHkoJ2xlbmd0aCcpO1xuXG4gIC8qKlxuICAgKiBDb252ZXJ0cyBhbiBBU0NJSSBgc3RyaW5nYCB0byBhbiBhcnJheS5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgY29udmVydGVkIGFycmF5LlxuICAgKi9cbiAgZnVuY3Rpb24gYXNjaWlUb0FycmF5KHN0cmluZykge1xuICAgIHJldHVybiBzdHJpbmcuc3BsaXQoJycpO1xuICB9XG5cbiAgLyoqXG4gICAqIFNwbGl0cyBhbiBBU0NJSSBgc3RyaW5nYCBpbnRvIGFuIGFycmF5IG9mIGl0cyB3b3Jkcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IFRoZSBzdHJpbmcgdG8gaW5zcGVjdC5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSB3b3JkcyBvZiBgc3RyaW5nYC5cbiAgICovXG4gIGZ1bmN0aW9uIGFzY2lpV29yZHMoc3RyaW5nKSB7XG4gICAgcmV0dXJuIHN0cmluZy5tYXRjaChyZUFzY2lpV29yZCkgfHwgW107XG4gIH1cblxuICAvKipcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgbWV0aG9kcyBsaWtlIGBfLmZpbmRLZXlgIGFuZCBgXy5maW5kTGFzdEtleWAsXG4gICAqIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcywgd2hpY2ggaXRlcmF0ZXMgb3ZlciBgY29sbGVjdGlvbmBcbiAgICogdXNpbmcgYGVhY2hGdW5jYC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaW5zcGVjdC5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGVhY2hGdW5jIFRoZSBmdW5jdGlvbiB0byBpdGVyYXRlIG92ZXIgYGNvbGxlY3Rpb25gLlxuICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZm91bmQgZWxlbWVudCBvciBpdHMga2V5LCBlbHNlIGB1bmRlZmluZWRgLlxuICAgKi9cbiAgZnVuY3Rpb24gYmFzZUZpbmRLZXkoY29sbGVjdGlvbiwgcHJlZGljYXRlLCBlYWNoRnVuYykge1xuICAgIHZhciByZXN1bHQ7XG4gICAgZWFjaEZ1bmMoY29sbGVjdGlvbiwgZnVuY3Rpb24odmFsdWUsIGtleSwgY29sbGVjdGlvbikge1xuICAgICAgaWYgKHByZWRpY2F0ZSh2YWx1ZSwga2V5LCBjb2xsZWN0aW9uKSkge1xuICAgICAgICByZXN1bHQgPSBrZXk7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmZpbmRJbmRleGAgYW5kIGBfLmZpbmRMYXN0SW5kZXhgIHdpdGhvdXRcbiAgICogc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgKiBAcGFyYW0ge251bWJlcn0gZnJvbUluZGV4IFRoZSBpbmRleCB0byBzZWFyY2ggZnJvbS5cbiAgICogQHBhcmFtIHtib29sZWFufSBbZnJvbVJpZ2h0XSBTcGVjaWZ5IGl0ZXJhdGluZyBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBtYXRjaGVkIHZhbHVlLCBlbHNlIGAtMWAuXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlRmluZEluZGV4KGFycmF5LCBwcmVkaWNhdGUsIGZyb21JbmRleCwgZnJvbVJpZ2h0KSB7XG4gICAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aCxcbiAgICAgICAgaW5kZXggPSBmcm9tSW5kZXggKyAoZnJvbVJpZ2h0ID8gMSA6IC0xKTtcblxuICAgIHdoaWxlICgoZnJvbVJpZ2h0ID8gaW5kZXgtLSA6ICsraW5kZXggPCBsZW5ndGgpKSB7XG4gICAgICBpZiAocHJlZGljYXRlKGFycmF5W2luZGV4XSwgaW5kZXgsIGFycmF5KSkge1xuICAgICAgICByZXR1cm4gaW5kZXg7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiAtMTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pbmRleE9mYCB3aXRob3V0IGBmcm9tSW5kZXhgIGJvdW5kcyBjaGVja3MuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZWFyY2ggZm9yLlxuICAgKiBAcGFyYW0ge251bWJlcn0gZnJvbUluZGV4IFRoZSBpbmRleCB0byBzZWFyY2ggZnJvbS5cbiAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIG1hdGNoZWQgdmFsdWUsIGVsc2UgYC0xYC5cbiAgICovXG4gIGZ1bmN0aW9uIGJhc2VJbmRleE9mKGFycmF5LCB2YWx1ZSwgZnJvbUluZGV4KSB7XG4gICAgcmV0dXJuIHZhbHVlID09PSB2YWx1ZVxuICAgICAgPyBzdHJpY3RJbmRleE9mKGFycmF5LCB2YWx1ZSwgZnJvbUluZGV4KVxuICAgICAgOiBiYXNlRmluZEluZGV4KGFycmF5LCBiYXNlSXNOYU4sIGZyb21JbmRleCk7XG4gIH1cblxuICAvKipcbiAgICogVGhpcyBmdW5jdGlvbiBpcyBsaWtlIGBiYXNlSW5kZXhPZmAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBhIGNvbXBhcmF0b3IuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZWFyY2ggZm9yLlxuICAgKiBAcGFyYW0ge251bWJlcn0gZnJvbUluZGV4IFRoZSBpbmRleCB0byBzZWFyY2ggZnJvbS5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gY29tcGFyYXRvciBUaGUgY29tcGFyYXRvciBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbWF0Y2hlZCB2YWx1ZSwgZWxzZSBgLTFgLlxuICAgKi9cbiAgZnVuY3Rpb24gYmFzZUluZGV4T2ZXaXRoKGFycmF5LCB2YWx1ZSwgZnJvbUluZGV4LCBjb21wYXJhdG9yKSB7XG4gICAgdmFyIGluZGV4ID0gZnJvbUluZGV4IC0gMSxcbiAgICAgICAgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuXG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIGlmIChjb21wYXJhdG9yKGFycmF5W2luZGV4XSwgdmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBpbmRleDtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIC0xO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzTmFOYCB3aXRob3V0IHN1cHBvcnQgZm9yIG51bWJlciBvYmplY3RzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYE5hTmAsIGVsc2UgYGZhbHNlYC5cbiAgICovXG4gIGZ1bmN0aW9uIGJhc2VJc05hTih2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZSAhPT0gdmFsdWU7XG4gIH1cblxuICAvKipcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ubWVhbmAgYW5kIGBfLm1lYW5CeWAgd2l0aG91dCBzdXBwb3J0IGZvclxuICAgKiBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBtZWFuLlxuICAgKi9cbiAgZnVuY3Rpb24gYmFzZU1lYW4oYXJyYXksIGl0ZXJhdGVlKSB7XG4gICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgIHJldHVybiBsZW5ndGggPyAoYmFzZVN1bShhcnJheSwgaXRlcmF0ZWUpIC8gbGVuZ3RoKSA6IE5BTjtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5wcm9wZXJ0eWAgd2l0aG91dCBzdXBwb3J0IGZvciBkZWVwIHBhdGhzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYWNjZXNzb3IgZnVuY3Rpb24uXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlUHJvcGVydHkoa2V5KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCkge1xuICAgICAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gdW5kZWZpbmVkIDogb2JqZWN0W2tleV07XG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5wcm9wZXJ0eU9mYCB3aXRob3V0IHN1cHBvcnQgZm9yIGRlZXAgcGF0aHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYWNjZXNzb3IgZnVuY3Rpb24uXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlUHJvcGVydHlPZihvYmplY3QpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oa2V5KSB7XG4gICAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyB1bmRlZmluZWQgOiBvYmplY3Rba2V5XTtcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnJlZHVjZWAgYW5kIGBfLnJlZHVjZVJpZ2h0YCwgd2l0aG91dCBzdXBwb3J0XG4gICAqIGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLCB3aGljaCBpdGVyYXRlcyBvdmVyIGBjb2xsZWN0aW9uYCB1c2luZyBgZWFjaEZ1bmNgLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAqIEBwYXJhbSB7Kn0gYWNjdW11bGF0b3IgVGhlIGluaXRpYWwgdmFsdWUuXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gaW5pdEFjY3VtIFNwZWNpZnkgdXNpbmcgdGhlIGZpcnN0IG9yIGxhc3QgZWxlbWVudCBvZlxuICAgKiAgYGNvbGxlY3Rpb25gIGFzIHRoZSBpbml0aWFsIHZhbHVlLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBlYWNoRnVuYyBUaGUgZnVuY3Rpb24gdG8gaXRlcmF0ZSBvdmVyIGBjb2xsZWN0aW9uYC5cbiAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGFjY3VtdWxhdGVkIHZhbHVlLlxuICAgKi9cbiAgZnVuY3Rpb24gYmFzZVJlZHVjZShjb2xsZWN0aW9uLCBpdGVyYXRlZSwgYWNjdW11bGF0b3IsIGluaXRBY2N1bSwgZWFjaEZ1bmMpIHtcbiAgICBlYWNoRnVuYyhjb2xsZWN0aW9uLCBmdW5jdGlvbih2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pIHtcbiAgICAgIGFjY3VtdWxhdG9yID0gaW5pdEFjY3VtXG4gICAgICAgID8gKGluaXRBY2N1bSA9IGZhbHNlLCB2YWx1ZSlcbiAgICAgICAgOiBpdGVyYXRlZShhY2N1bXVsYXRvciwgdmFsdWUsIGluZGV4LCBjb2xsZWN0aW9uKTtcbiAgICB9KTtcbiAgICByZXR1cm4gYWNjdW11bGF0b3I7XG4gIH1cblxuICAvKipcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uc29ydEJ5YCB3aGljaCB1c2VzIGBjb21wYXJlcmAgdG8gZGVmaW5lIHRoZVxuICAgKiBzb3J0IG9yZGVyIG9mIGBhcnJheWAgYW5kIHJlcGxhY2VzIGNyaXRlcmlhIG9iamVjdHMgd2l0aCB0aGVpciBjb3JyZXNwb25kaW5nXG4gICAqIHZhbHVlcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHNvcnQuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGNvbXBhcmVyIFRoZSBmdW5jdGlvbiB0byBkZWZpbmUgc29ydCBvcmRlci5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlU29ydEJ5KGFycmF5LCBjb21wYXJlcikge1xuICAgIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG5cbiAgICBhcnJheS5zb3J0KGNvbXBhcmVyKTtcbiAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgIGFycmF5W2xlbmd0aF0gPSBhcnJheVtsZW5ndGhdLnZhbHVlO1xuICAgIH1cbiAgICByZXR1cm4gYXJyYXk7XG4gIH1cblxuICAvKipcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uc3VtYCBhbmQgYF8uc3VtQnlgIHdpdGhvdXQgc3VwcG9ydCBmb3JcbiAgICogaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgc3VtLlxuICAgKi9cbiAgZnVuY3Rpb24gYmFzZVN1bShhcnJheSwgaXRlcmF0ZWUpIHtcbiAgICB2YXIgcmVzdWx0LFxuICAgICAgICBpbmRleCA9IC0xLFxuICAgICAgICBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG5cbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgdmFyIGN1cnJlbnQgPSBpdGVyYXRlZShhcnJheVtpbmRleF0pO1xuICAgICAgaWYgKGN1cnJlbnQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXN1bHQgPSByZXN1bHQgPT09IHVuZGVmaW5lZCA/IGN1cnJlbnQgOiAocmVzdWx0ICsgY3VycmVudCk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udGltZXNgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kc1xuICAgKiBvciBtYXggYXJyYXkgbGVuZ3RoIGNoZWNrcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtudW1iZXJ9IG4gVGhlIG51bWJlciBvZiB0aW1lcyB0byBpbnZva2UgYGl0ZXJhdGVlYC5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiByZXN1bHRzLlxuICAgKi9cbiAgZnVuY3Rpb24gYmFzZVRpbWVzKG4sIGl0ZXJhdGVlKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIHJlc3VsdCA9IEFycmF5KG4pO1xuXG4gICAgd2hpbGUgKCsraW5kZXggPCBuKSB7XG4gICAgICByZXN1bHRbaW5kZXhdID0gaXRlcmF0ZWUoaW5kZXgpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnRvUGFpcnNgIGFuZCBgXy50b1BhaXJzSW5gIHdoaWNoIGNyZWF0ZXMgYW4gYXJyYXlcbiAgICogb2Yga2V5LXZhbHVlIHBhaXJzIGZvciBgb2JqZWN0YCBjb3JyZXNwb25kaW5nIHRvIHRoZSBwcm9wZXJ0eSBuYW1lcyBvZiBgcHJvcHNgLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAqIEBwYXJhbSB7QXJyYXl9IHByb3BzIFRoZSBwcm9wZXJ0eSBuYW1lcyB0byBnZXQgdmFsdWVzIGZvci5cbiAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUga2V5LXZhbHVlIHBhaXJzLlxuICAgKi9cbiAgZnVuY3Rpb24gYmFzZVRvUGFpcnMob2JqZWN0LCBwcm9wcykge1xuICAgIHJldHVybiBhcnJheU1hcChwcm9wcywgZnVuY3Rpb24oa2V5KSB7XG4gICAgICByZXR1cm4gW2tleSwgb2JqZWN0W2tleV1dO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnVuYXJ5YCB3aXRob3V0IHN1cHBvcnQgZm9yIHN0b3JpbmcgbWV0YWRhdGEuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNhcCBhcmd1bWVudHMgZm9yLlxuICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBjYXBwZWQgZnVuY3Rpb24uXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlVW5hcnkoZnVuYykge1xuICAgIHJldHVybiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgcmV0dXJuIGZ1bmModmFsdWUpO1xuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udmFsdWVzYCBhbmQgYF8udmFsdWVzSW5gIHdoaWNoIGNyZWF0ZXMgYW5cbiAgICogYXJyYXkgb2YgYG9iamVjdGAgcHJvcGVydHkgdmFsdWVzIGNvcnJlc3BvbmRpbmcgdG8gdGhlIHByb3BlcnR5IG5hbWVzXG4gICAqIG9mIGBwcm9wc2AuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICogQHBhcmFtIHtBcnJheX0gcHJvcHMgVGhlIHByb3BlcnR5IG5hbWVzIHRvIGdldCB2YWx1ZXMgZm9yLlxuICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSB2YWx1ZXMuXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlVmFsdWVzKG9iamVjdCwgcHJvcHMpIHtcbiAgICByZXR1cm4gYXJyYXlNYXAocHJvcHMsIGZ1bmN0aW9uKGtleSkge1xuICAgICAgcmV0dXJuIG9iamVjdFtrZXldO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrcyBpZiBhIGBjYWNoZWAgdmFsdWUgZm9yIGBrZXlgIGV4aXN0cy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtPYmplY3R9IGNhY2hlIFRoZSBjYWNoZSB0byBxdWVyeS5cbiAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBlbnRyeSB0byBjaGVjay5cbiAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAgICovXG4gIGZ1bmN0aW9uIGNhY2hlSGFzKGNhY2hlLCBrZXkpIHtcbiAgICByZXR1cm4gY2FjaGUuaGFzKGtleSk7XG4gIH1cblxuICAvKipcbiAgICogVXNlZCBieSBgXy50cmltYCBhbmQgYF8udHJpbVN0YXJ0YCB0byBnZXQgdGhlIGluZGV4IG9mIHRoZSBmaXJzdCBzdHJpbmcgc3ltYm9sXG4gICAqIHRoYXQgaXMgbm90IGZvdW5kIGluIHRoZSBjaGFyYWN0ZXIgc3ltYm9scy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gc3RyU3ltYm9scyBUaGUgc3RyaW5nIHN5bWJvbHMgdG8gaW5zcGVjdC5cbiAgICogQHBhcmFtIHtBcnJheX0gY2hyU3ltYm9scyBUaGUgY2hhcmFjdGVyIHN5bWJvbHMgdG8gZmluZC5cbiAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIGZpcnN0IHVubWF0Y2hlZCBzdHJpbmcgc3ltYm9sLlxuICAgKi9cbiAgZnVuY3Rpb24gY2hhcnNTdGFydEluZGV4KHN0clN5bWJvbHMsIGNoclN5bWJvbHMpIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgbGVuZ3RoID0gc3RyU3ltYm9scy5sZW5ndGg7XG5cbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCAmJiBiYXNlSW5kZXhPZihjaHJTeW1ib2xzLCBzdHJTeW1ib2xzW2luZGV4XSwgMCkgPiAtMSkge31cbiAgICByZXR1cm4gaW5kZXg7XG4gIH1cblxuICAvKipcbiAgICogVXNlZCBieSBgXy50cmltYCBhbmQgYF8udHJpbUVuZGAgdG8gZ2V0IHRoZSBpbmRleCBvZiB0aGUgbGFzdCBzdHJpbmcgc3ltYm9sXG4gICAqIHRoYXQgaXMgbm90IGZvdW5kIGluIHRoZSBjaGFyYWN0ZXIgc3ltYm9scy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gc3RyU3ltYm9scyBUaGUgc3RyaW5nIHN5bWJvbHMgdG8gaW5zcGVjdC5cbiAgICogQHBhcmFtIHtBcnJheX0gY2hyU3ltYm9scyBUaGUgY2hhcmFjdGVyIHN5bWJvbHMgdG8gZmluZC5cbiAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIGxhc3QgdW5tYXRjaGVkIHN0cmluZyBzeW1ib2wuXG4gICAqL1xuICBmdW5jdGlvbiBjaGFyc0VuZEluZGV4KHN0clN5bWJvbHMsIGNoclN5bWJvbHMpIHtcbiAgICB2YXIgaW5kZXggPSBzdHJTeW1ib2xzLmxlbmd0aDtcblxuICAgIHdoaWxlIChpbmRleC0tICYmIGJhc2VJbmRleE9mKGNoclN5bWJvbHMsIHN0clN5bWJvbHNbaW5kZXhdLCAwKSA+IC0xKSB7fVxuICAgIHJldHVybiBpbmRleDtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSBudW1iZXIgb2YgYHBsYWNlaG9sZGVyYCBvY2N1cnJlbmNlcyBpbiBgYXJyYXlgLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICogQHBhcmFtIHsqfSBwbGFjZWhvbGRlciBUaGUgcGxhY2Vob2xkZXIgdG8gc2VhcmNoIGZvci5cbiAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgcGxhY2Vob2xkZXIgY291bnQuXG4gICAqL1xuICBmdW5jdGlvbiBjb3VudEhvbGRlcnMoYXJyYXksIHBsYWNlaG9sZGVyKSB7XG4gICAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aCxcbiAgICAgICAgcmVzdWx0ID0gMDtcblxuICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgaWYgKGFycmF5W2xlbmd0aF0gPT09IHBsYWNlaG9sZGVyKSB7XG4gICAgICAgICsrcmVzdWx0O1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIFVzZWQgYnkgYF8uZGVidXJyYCB0byBjb252ZXJ0IExhdGluLTEgU3VwcGxlbWVudCBhbmQgTGF0aW4gRXh0ZW5kZWQtQVxuICAgKiBsZXR0ZXJzIHRvIGJhc2ljIExhdGluIGxldHRlcnMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBsZXR0ZXIgVGhlIG1hdGNoZWQgbGV0dGVyIHRvIGRlYnVyci5cbiAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgZGVidXJyZWQgbGV0dGVyLlxuICAgKi9cbiAgdmFyIGRlYnVyckxldHRlciA9IGJhc2VQcm9wZXJ0eU9mKGRlYnVycmVkTGV0dGVycyk7XG5cbiAgLyoqXG4gICAqIFVzZWQgYnkgYF8uZXNjYXBlYCB0byBjb252ZXJ0IGNoYXJhY3RlcnMgdG8gSFRNTCBlbnRpdGllcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IGNociBUaGUgbWF0Y2hlZCBjaGFyYWN0ZXIgdG8gZXNjYXBlLlxuICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBlc2NhcGVkIGNoYXJhY3Rlci5cbiAgICovXG4gIHZhciBlc2NhcGVIdG1sQ2hhciA9IGJhc2VQcm9wZXJ0eU9mKGh0bWxFc2NhcGVzKTtcblxuICAvKipcbiAgICogVXNlZCBieSBgXy50ZW1wbGF0ZWAgdG8gZXNjYXBlIGNoYXJhY3RlcnMgZm9yIGluY2x1c2lvbiBpbiBjb21waWxlZCBzdHJpbmcgbGl0ZXJhbHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBjaHIgVGhlIG1hdGNoZWQgY2hhcmFjdGVyIHRvIGVzY2FwZS5cbiAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgZXNjYXBlZCBjaGFyYWN0ZXIuXG4gICAqL1xuICBmdW5jdGlvbiBlc2NhcGVTdHJpbmdDaGFyKGNocikge1xuICAgIHJldHVybiAnXFxcXCcgKyBzdHJpbmdFc2NhcGVzW2Nocl07XG4gIH1cblxuICAvKipcbiAgICogR2V0cyB0aGUgdmFsdWUgYXQgYGtleWAgb2YgYG9iamVjdGAuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0XSBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHByb3BlcnR5IHZhbHVlLlxuICAgKi9cbiAgZnVuY3Rpb24gZ2V0VmFsdWUob2JqZWN0LCBrZXkpIHtcbiAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyB1bmRlZmluZWQgOiBvYmplY3Rba2V5XTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVja3MgaWYgYHN0cmluZ2AgY29udGFpbnMgVW5pY29kZSBzeW1ib2xzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgdG8gaW5zcGVjdC5cbiAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGEgc3ltYm9sIGlzIGZvdW5kLCBlbHNlIGBmYWxzZWAuXG4gICAqL1xuICBmdW5jdGlvbiBoYXNVbmljb2RlKHN0cmluZykge1xuICAgIHJldHVybiByZUhhc1VuaWNvZGUudGVzdChzdHJpbmcpO1xuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrcyBpZiBgc3RyaW5nYCBjb250YWlucyBhIHdvcmQgY29tcG9zZWQgb2YgVW5pY29kZSBzeW1ib2xzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgdG8gaW5zcGVjdC5cbiAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGEgd29yZCBpcyBmb3VuZCwgZWxzZSBgZmFsc2VgLlxuICAgKi9cbiAgZnVuY3Rpb24gaGFzVW5pY29kZVdvcmQoc3RyaW5nKSB7XG4gICAgcmV0dXJuIHJlSGFzVW5pY29kZVdvcmQudGVzdChzdHJpbmcpO1xuICB9XG5cbiAgLyoqXG4gICAqIENvbnZlcnRzIGBpdGVyYXRvcmAgdG8gYW4gYXJyYXkuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBpdGVyYXRvciBUaGUgaXRlcmF0b3IgdG8gY29udmVydC5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgYXJyYXkuXG4gICAqL1xuICBmdW5jdGlvbiBpdGVyYXRvclRvQXJyYXkoaXRlcmF0b3IpIHtcbiAgICB2YXIgZGF0YSxcbiAgICAgICAgcmVzdWx0ID0gW107XG5cbiAgICB3aGlsZSAoIShkYXRhID0gaXRlcmF0b3IubmV4dCgpKS5kb25lKSB7XG4gICAgICByZXN1bHQucHVzaChkYXRhLnZhbHVlKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb252ZXJ0cyBgbWFwYCB0byBpdHMga2V5LXZhbHVlIHBhaXJzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge09iamVjdH0gbWFwIFRoZSBtYXAgdG8gY29udmVydC5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBrZXktdmFsdWUgcGFpcnMuXG4gICAqL1xuICBmdW5jdGlvbiBtYXBUb0FycmF5KG1hcCkge1xuICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICByZXN1bHQgPSBBcnJheShtYXAuc2l6ZSk7XG5cbiAgICBtYXAuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gICAgICByZXN1bHRbKytpbmRleF0gPSBba2V5LCB2YWx1ZV07XG4gICAgfSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgdW5hcnkgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGBmdW5jYCB3aXRoIGl0cyBhcmd1bWVudCB0cmFuc2Zvcm1lZC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gd3JhcC5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gdHJhbnNmb3JtIFRoZSBhcmd1bWVudCB0cmFuc2Zvcm0uXG4gICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgKi9cbiAgZnVuY3Rpb24gb3ZlckFyZyhmdW5jLCB0cmFuc2Zvcm0pIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oYXJnKSB7XG4gICAgICByZXR1cm4gZnVuYyh0cmFuc2Zvcm0oYXJnKSk7XG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXBsYWNlcyBhbGwgYHBsYWNlaG9sZGVyYCBlbGVtZW50cyBpbiBgYXJyYXlgIHdpdGggYW4gaW50ZXJuYWwgcGxhY2Vob2xkZXJcbiAgICogYW5kIHJldHVybnMgYW4gYXJyYXkgb2YgdGhlaXIgaW5kZXhlcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIG1vZGlmeS5cbiAgICogQHBhcmFtIHsqfSBwbGFjZWhvbGRlciBUaGUgcGxhY2Vob2xkZXIgdG8gcmVwbGFjZS5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgcGxhY2Vob2xkZXIgaW5kZXhlcy5cbiAgICovXG4gIGZ1bmN0aW9uIHJlcGxhY2VIb2xkZXJzKGFycmF5LCBwbGFjZWhvbGRlcikge1xuICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICBsZW5ndGggPSBhcnJheS5sZW5ndGgsXG4gICAgICAgIHJlc0luZGV4ID0gMCxcbiAgICAgICAgcmVzdWx0ID0gW107XG5cbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgdmFyIHZhbHVlID0gYXJyYXlbaW5kZXhdO1xuICAgICAgaWYgKHZhbHVlID09PSBwbGFjZWhvbGRlciB8fCB2YWx1ZSA9PT0gUExBQ0VIT0xERVIpIHtcbiAgICAgICAgYXJyYXlbaW5kZXhdID0gUExBQ0VIT0xERVI7XG4gICAgICAgIHJlc3VsdFtyZXNJbmRleCsrXSA9IGluZGV4O1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIENvbnZlcnRzIGBzZXRgIHRvIGFuIGFycmF5IG9mIGl0cyB2YWx1ZXMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBzZXQgVGhlIHNldCB0byBjb252ZXJ0LlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHZhbHVlcy5cbiAgICovXG4gIGZ1bmN0aW9uIHNldFRvQXJyYXkoc2V0KSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIHJlc3VsdCA9IEFycmF5KHNldC5zaXplKTtcblxuICAgIHNldC5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICByZXN1bHRbKytpbmRleF0gPSB2YWx1ZTtcbiAgICB9KTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIENvbnZlcnRzIGBzZXRgIHRvIGl0cyB2YWx1ZS12YWx1ZSBwYWlycy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtPYmplY3R9IHNldCBUaGUgc2V0IHRvIGNvbnZlcnQuXG4gICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgdmFsdWUtdmFsdWUgcGFpcnMuXG4gICAqL1xuICBmdW5jdGlvbiBzZXRUb1BhaXJzKHNldCkge1xuICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICByZXN1bHQgPSBBcnJheShzZXQuc2l6ZSk7XG5cbiAgICBzZXQuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgcmVzdWx0WysraW5kZXhdID0gW3ZhbHVlLCB2YWx1ZV07XG4gICAgfSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uaW5kZXhPZmAgd2hpY2ggcGVyZm9ybXMgc3RyaWN0IGVxdWFsaXR5XG4gICAqIGNvbXBhcmlzb25zIG9mIHZhbHVlcywgaS5lLiBgPT09YC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBmcm9tSW5kZXggVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbWF0Y2hlZCB2YWx1ZSwgZWxzZSBgLTFgLlxuICAgKi9cbiAgZnVuY3Rpb24gc3RyaWN0SW5kZXhPZihhcnJheSwgdmFsdWUsIGZyb21JbmRleCkge1xuICAgIHZhciBpbmRleCA9IGZyb21JbmRleCAtIDEsXG4gICAgICAgIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcblxuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICBpZiAoYXJyYXlbaW5kZXhdID09PSB2YWx1ZSkge1xuICAgICAgICByZXR1cm4gaW5kZXg7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiAtMTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8ubGFzdEluZGV4T2ZgIHdoaWNoIHBlcmZvcm1zIHN0cmljdCBlcXVhbGl0eVxuICAgKiBjb21wYXJpc29ucyBvZiB2YWx1ZXMsIGkuZS4gYD09PWAuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZWFyY2ggZm9yLlxuICAgKiBAcGFyYW0ge251bWJlcn0gZnJvbUluZGV4IFRoZSBpbmRleCB0byBzZWFyY2ggZnJvbS5cbiAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIG1hdGNoZWQgdmFsdWUsIGVsc2UgYC0xYC5cbiAgICovXG4gIGZ1bmN0aW9uIHN0cmljdExhc3RJbmRleE9mKGFycmF5LCB2YWx1ZSwgZnJvbUluZGV4KSB7XG4gICAgdmFyIGluZGV4ID0gZnJvbUluZGV4ICsgMTtcbiAgICB3aGlsZSAoaW5kZXgtLSkge1xuICAgICAgaWYgKGFycmF5W2luZGV4XSA9PT0gdmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIGluZGV4O1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gaW5kZXg7XG4gIH1cblxuICAvKipcbiAgICogR2V0cyB0aGUgbnVtYmVyIG9mIHN5bWJvbHMgaW4gYHN0cmluZ2AuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyB0byBpbnNwZWN0LlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBzdHJpbmcgc2l6ZS5cbiAgICovXG4gIGZ1bmN0aW9uIHN0cmluZ1NpemUoc3RyaW5nKSB7XG4gICAgcmV0dXJuIGhhc1VuaWNvZGUoc3RyaW5nKVxuICAgICAgPyB1bmljb2RlU2l6ZShzdHJpbmcpXG4gICAgICA6IGFzY2lpU2l6ZShzdHJpbmcpO1xuICB9XG5cbiAgLyoqXG4gICAqIENvbnZlcnRzIGBzdHJpbmdgIHRvIGFuIGFycmF5LlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgYXJyYXkuXG4gICAqL1xuICBmdW5jdGlvbiBzdHJpbmdUb0FycmF5KHN0cmluZykge1xuICAgIHJldHVybiBoYXNVbmljb2RlKHN0cmluZylcbiAgICAgID8gdW5pY29kZVRvQXJyYXkoc3RyaW5nKVxuICAgICAgOiBhc2NpaVRvQXJyYXkoc3RyaW5nKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBVc2VkIGJ5IGBfLnVuZXNjYXBlYCB0byBjb252ZXJ0IEhUTUwgZW50aXRpZXMgdG8gY2hhcmFjdGVycy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IGNociBUaGUgbWF0Y2hlZCBjaGFyYWN0ZXIgdG8gdW5lc2NhcGUuXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHVuZXNjYXBlZCBjaGFyYWN0ZXIuXG4gICAqL1xuICB2YXIgdW5lc2NhcGVIdG1sQ2hhciA9IGJhc2VQcm9wZXJ0eU9mKGh0bWxVbmVzY2FwZXMpO1xuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSBzaXplIG9mIGEgVW5pY29kZSBgc3RyaW5nYC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIGluc3BlY3QuXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHN0cmluZyBzaXplLlxuICAgKi9cbiAgZnVuY3Rpb24gdW5pY29kZVNpemUoc3RyaW5nKSB7XG4gICAgdmFyIHJlc3VsdCA9IHJlVW5pY29kZS5sYXN0SW5kZXggPSAwO1xuICAgIHdoaWxlIChyZVVuaWNvZGUudGVzdChzdHJpbmcpKSB7XG4gICAgICArK3Jlc3VsdDtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb252ZXJ0cyBhIFVuaWNvZGUgYHN0cmluZ2AgdG8gYW4gYXJyYXkuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBhcnJheS5cbiAgICovXG4gIGZ1bmN0aW9uIHVuaWNvZGVUb0FycmF5KHN0cmluZykge1xuICAgIHJldHVybiBzdHJpbmcubWF0Y2gocmVVbmljb2RlKSB8fCBbXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTcGxpdHMgYSBVbmljb2RlIGBzdHJpbmdgIGludG8gYW4gYXJyYXkgb2YgaXRzIHdvcmRzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gVGhlIHN0cmluZyB0byBpbnNwZWN0LlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHdvcmRzIG9mIGBzdHJpbmdgLlxuICAgKi9cbiAgZnVuY3Rpb24gdW5pY29kZVdvcmRzKHN0cmluZykge1xuICAgIHJldHVybiBzdHJpbmcubWF0Y2gocmVVbmljb2RlV29yZCkgfHwgW107XG4gIH1cblxuICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAvKipcbiAgICogQ3JlYXRlIGEgbmV3IHByaXN0aW5lIGBsb2Rhc2hgIGZ1bmN0aW9uIHVzaW5nIHRoZSBgY29udGV4dGAgb2JqZWN0LlxuICAgKlxuICAgKiBAc3RhdGljXG4gICAqIEBtZW1iZXJPZiBfXG4gICAqIEBzaW5jZSAxLjEuMFxuICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgKiBAcGFyYW0ge09iamVjdH0gW2NvbnRleHQ9cm9vdF0gVGhlIGNvbnRleHQgb2JqZWN0LlxuICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgYSBuZXcgYGxvZGFzaGAgZnVuY3Rpb24uXG4gICAqIEBleGFtcGxlXG4gICAqXG4gICAqIF8ubWl4aW4oeyAnZm9vJzogXy5jb25zdGFudCgnZm9vJykgfSk7XG4gICAqXG4gICAqIHZhciBsb2Rhc2ggPSBfLnJ1bkluQ29udGV4dCgpO1xuICAgKiBsb2Rhc2gubWl4aW4oeyAnYmFyJzogbG9kYXNoLmNvbnN0YW50KCdiYXInKSB9KTtcbiAgICpcbiAgICogXy5pc0Z1bmN0aW9uKF8uZm9vKTtcbiAgICogLy8gPT4gdHJ1ZVxuICAgKiBfLmlzRnVuY3Rpb24oXy5iYXIpO1xuICAgKiAvLyA9PiBmYWxzZVxuICAgKlxuICAgKiBsb2Rhc2guaXNGdW5jdGlvbihsb2Rhc2guZm9vKTtcbiAgICogLy8gPT4gZmFsc2VcbiAgICogbG9kYXNoLmlzRnVuY3Rpb24obG9kYXNoLmJhcik7XG4gICAqIC8vID0+IHRydWVcbiAgICpcbiAgICogLy8gQ3JlYXRlIGEgc3VwZWQtdXAgYGRlZmVyYCBpbiBOb2RlLmpzLlxuICAgKiB2YXIgZGVmZXIgPSBfLnJ1bkluQ29udGV4dCh7ICdzZXRUaW1lb3V0Jzogc2V0SW1tZWRpYXRlIH0pLmRlZmVyO1xuICAgKi9cbiAgdmFyIHJ1bkluQ29udGV4dCA9IChmdW5jdGlvbiBydW5JbkNvbnRleHQoY29udGV4dCkge1xuICAgIGNvbnRleHQgPSBjb250ZXh0ID09IG51bGwgPyByb290IDogXy5kZWZhdWx0cyhyb290Lk9iamVjdCgpLCBjb250ZXh0LCBfLnBpY2socm9vdCwgY29udGV4dFByb3BzKSk7XG5cbiAgICAvKiogQnVpbHQtaW4gY29uc3RydWN0b3IgcmVmZXJlbmNlcy4gKi9cbiAgICB2YXIgQXJyYXkgPSBjb250ZXh0LkFycmF5LFxuICAgICAgICBEYXRlID0gY29udGV4dC5EYXRlLFxuICAgICAgICBFcnJvciA9IGNvbnRleHQuRXJyb3IsXG4gICAgICAgIEZ1bmN0aW9uID0gY29udGV4dC5GdW5jdGlvbixcbiAgICAgICAgTWF0aCA9IGNvbnRleHQuTWF0aCxcbiAgICAgICAgT2JqZWN0ID0gY29udGV4dC5PYmplY3QsXG4gICAgICAgIFJlZ0V4cCA9IGNvbnRleHQuUmVnRXhwLFxuICAgICAgICBTdHJpbmcgPSBjb250ZXh0LlN0cmluZyxcbiAgICAgICAgVHlwZUVycm9yID0gY29udGV4dC5UeXBlRXJyb3I7XG5cbiAgICAvKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG4gICAgdmFyIGFycmF5UHJvdG8gPSBBcnJheS5wcm90b3R5cGUsXG4gICAgICAgIGZ1bmNQcm90byA9IEZ1bmN0aW9uLnByb3RvdHlwZSxcbiAgICAgICAgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4gICAgLyoqIFVzZWQgdG8gZGV0ZWN0IG92ZXJyZWFjaGluZyBjb3JlLWpzIHNoaW1zLiAqL1xuICAgIHZhciBjb3JlSnNEYXRhID0gY29udGV4dFsnX19jb3JlLWpzX3NoYXJlZF9fJ107XG5cbiAgICAvKiogVXNlZCB0byByZXNvbHZlIHRoZSBkZWNvbXBpbGVkIHNvdXJjZSBvZiBmdW5jdGlvbnMuICovXG4gICAgdmFyIGZ1bmNUb1N0cmluZyA9IGZ1bmNQcm90by50b1N0cmluZztcblxuICAgIC8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xuICAgIHZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4gICAgLyoqIFVzZWQgdG8gZ2VuZXJhdGUgdW5pcXVlIElEcy4gKi9cbiAgICB2YXIgaWRDb3VudGVyID0gMDtcblxuICAgIC8qKiBVc2VkIHRvIGRldGVjdCBtZXRob2RzIG1hc3F1ZXJhZGluZyBhcyBuYXRpdmUuICovXG4gICAgdmFyIG1hc2tTcmNLZXkgPSAoZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgdWlkID0gL1teLl0rJC8uZXhlYyhjb3JlSnNEYXRhICYmIGNvcmVKc0RhdGEua2V5cyAmJiBjb3JlSnNEYXRhLmtleXMuSUVfUFJPVE8gfHwgJycpO1xuICAgICAgcmV0dXJuIHVpZCA/ICgnU3ltYm9sKHNyYylfMS4nICsgdWlkKSA6ICcnO1xuICAgIH0oKSk7XG5cbiAgICAvKipcbiAgICAgKiBVc2VkIHRvIHJlc29sdmUgdGhlXG4gICAgICogW2B0b1N0cmluZ1RhZ2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLW9iamVjdC5wcm90b3R5cGUudG9zdHJpbmcpXG4gICAgICogb2YgdmFsdWVzLlxuICAgICAqL1xuICAgIHZhciBuYXRpdmVPYmplY3RUb1N0cmluZyA9IG9iamVjdFByb3RvLnRvU3RyaW5nO1xuXG4gICAgLyoqIFVzZWQgdG8gaW5mZXIgdGhlIGBPYmplY3RgIGNvbnN0cnVjdG9yLiAqL1xuICAgIHZhciBvYmplY3RDdG9yU3RyaW5nID0gZnVuY1RvU3RyaW5nLmNhbGwoT2JqZWN0KTtcblxuICAgIC8qKiBVc2VkIHRvIHJlc3RvcmUgdGhlIG9yaWdpbmFsIGBfYCByZWZlcmVuY2UgaW4gYF8ubm9Db25mbGljdGAuICovXG4gICAgdmFyIG9sZERhc2ggPSByb290Ll87XG5cbiAgICAvKiogVXNlZCB0byBkZXRlY3QgaWYgYSBtZXRob2QgaXMgbmF0aXZlLiAqL1xuICAgIHZhciByZUlzTmF0aXZlID0gUmVnRXhwKCdeJyArXG4gICAgICBmdW5jVG9TdHJpbmcuY2FsbChoYXNPd25Qcm9wZXJ0eSkucmVwbGFjZShyZVJlZ0V4cENoYXIsICdcXFxcJCYnKVxuICAgICAgLnJlcGxhY2UoL2hhc093blByb3BlcnR5fChmdW5jdGlvbikuKj8oPz1cXFxcXFwoKXwgZm9yIC4rPyg/PVxcXFxcXF0pL2csICckMS4qPycpICsgJyQnXG4gICAgKTtcblxuICAgIC8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xuICAgIHZhciBCdWZmZXIgPSBtb2R1bGVFeHBvcnRzID8gY29udGV4dC5CdWZmZXIgOiB1bmRlZmluZWQsXG4gICAgICAgIFN5bWJvbCA9IGNvbnRleHQuU3ltYm9sLFxuICAgICAgICBVaW50OEFycmF5ID0gY29udGV4dC5VaW50OEFycmF5LFxuICAgICAgICBhbGxvY1Vuc2FmZSA9IEJ1ZmZlciA/IEJ1ZmZlci5hbGxvY1Vuc2FmZSA6IHVuZGVmaW5lZCxcbiAgICAgICAgZ2V0UHJvdG90eXBlID0gb3ZlckFyZyhPYmplY3QuZ2V0UHJvdG90eXBlT2YsIE9iamVjdCksXG4gICAgICAgIG9iamVjdENyZWF0ZSA9IE9iamVjdC5jcmVhdGUsXG4gICAgICAgIHByb3BlcnR5SXNFbnVtZXJhYmxlID0gb2JqZWN0UHJvdG8ucHJvcGVydHlJc0VudW1lcmFibGUsXG4gICAgICAgIHNwbGljZSA9IGFycmF5UHJvdG8uc3BsaWNlLFxuICAgICAgICBzcHJlYWRhYmxlU3ltYm9sID0gU3ltYm9sID8gU3ltYm9sLmlzQ29uY2F0U3ByZWFkYWJsZSA6IHVuZGVmaW5lZCxcbiAgICAgICAgc3ltSXRlcmF0b3IgPSBTeW1ib2wgPyBTeW1ib2wuaXRlcmF0b3IgOiB1bmRlZmluZWQsXG4gICAgICAgIHN5bVRvU3RyaW5nVGFnID0gU3ltYm9sID8gU3ltYm9sLnRvU3RyaW5nVGFnIDogdW5kZWZpbmVkO1xuXG4gICAgdmFyIGRlZmluZVByb3BlcnR5ID0gKGZ1bmN0aW9uKCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgdmFyIGZ1bmMgPSBnZXROYXRpdmUoT2JqZWN0LCAnZGVmaW5lUHJvcGVydHknKTtcbiAgICAgICAgZnVuYyh7fSwgJycsIHt9KTtcbiAgICAgICAgcmV0dXJuIGZ1bmM7XG4gICAgICB9IGNhdGNoIChlKSB7fVxuICAgIH0oKSk7XG5cbiAgICAvKiogTW9ja2VkIGJ1aWx0LWlucy4gKi9cbiAgICB2YXIgY3R4Q2xlYXJUaW1lb3V0ID0gY29udGV4dC5jbGVhclRpbWVvdXQgIT09IHJvb3QuY2xlYXJUaW1lb3V0ICYmIGNvbnRleHQuY2xlYXJUaW1lb3V0LFxuICAgICAgICBjdHhOb3cgPSBEYXRlICYmIERhdGUubm93ICE9PSByb290LkRhdGUubm93ICYmIERhdGUubm93LFxuICAgICAgICBjdHhTZXRUaW1lb3V0ID0gY29udGV4dC5zZXRUaW1lb3V0ICE9PSByb290LnNldFRpbWVvdXQgJiYgY29udGV4dC5zZXRUaW1lb3V0O1xuXG4gICAgLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgZm9yIHRob3NlIHdpdGggdGhlIHNhbWUgbmFtZSBhcyBvdGhlciBgbG9kYXNoYCBtZXRob2RzLiAqL1xuICAgIHZhciBuYXRpdmVDZWlsID0gTWF0aC5jZWlsLFxuICAgICAgICBuYXRpdmVGbG9vciA9IE1hdGguZmxvb3IsXG4gICAgICAgIG5hdGl2ZUdldFN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzLFxuICAgICAgICBuYXRpdmVJc0J1ZmZlciA9IEJ1ZmZlciA/IEJ1ZmZlci5pc0J1ZmZlciA6IHVuZGVmaW5lZCxcbiAgICAgICAgbmF0aXZlSXNGaW5pdGUgPSBjb250ZXh0LmlzRmluaXRlLFxuICAgICAgICBuYXRpdmVKb2luID0gYXJyYXlQcm90by5qb2luLFxuICAgICAgICBuYXRpdmVLZXlzID0gb3ZlckFyZyhPYmplY3Qua2V5cywgT2JqZWN0KSxcbiAgICAgICAgbmF0aXZlTWF4ID0gTWF0aC5tYXgsXG4gICAgICAgIG5hdGl2ZU1pbiA9IE1hdGgubWluLFxuICAgICAgICBuYXRpdmVOb3cgPSBEYXRlLm5vdyxcbiAgICAgICAgbmF0aXZlUGFyc2VJbnQgPSBjb250ZXh0LnBhcnNlSW50LFxuICAgICAgICBuYXRpdmVSYW5kb20gPSBNYXRoLnJhbmRvbSxcbiAgICAgICAgbmF0aXZlUmV2ZXJzZSA9IGFycmF5UHJvdG8ucmV2ZXJzZTtcblxuICAgIC8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIHRoYXQgYXJlIHZlcmlmaWVkIHRvIGJlIG5hdGl2ZS4gKi9cbiAgICB2YXIgRGF0YVZpZXcgPSBnZXROYXRpdmUoY29udGV4dCwgJ0RhdGFWaWV3JyksXG4gICAgICAgIE1hcCA9IGdldE5hdGl2ZShjb250ZXh0LCAnTWFwJyksXG4gICAgICAgIFByb21pc2UgPSBnZXROYXRpdmUoY29udGV4dCwgJ1Byb21pc2UnKSxcbiAgICAgICAgU2V0ID0gZ2V0TmF0aXZlKGNvbnRleHQsICdTZXQnKSxcbiAgICAgICAgV2Vha01hcCA9IGdldE5hdGl2ZShjb250ZXh0LCAnV2Vha01hcCcpLFxuICAgICAgICBuYXRpdmVDcmVhdGUgPSBnZXROYXRpdmUoT2JqZWN0LCAnY3JlYXRlJyk7XG5cbiAgICAvKiogVXNlZCB0byBzdG9yZSBmdW5jdGlvbiBtZXRhZGF0YS4gKi9cbiAgICB2YXIgbWV0YU1hcCA9IFdlYWtNYXAgJiYgbmV3IFdlYWtNYXA7XG5cbiAgICAvKiogVXNlZCB0byBsb29rdXAgdW5taW5pZmllZCBmdW5jdGlvbiBuYW1lcy4gKi9cbiAgICB2YXIgcmVhbE5hbWVzID0ge307XG5cbiAgICAvKiogVXNlZCB0byBkZXRlY3QgbWFwcywgc2V0cywgYW5kIHdlYWttYXBzLiAqL1xuICAgIHZhciBkYXRhVmlld0N0b3JTdHJpbmcgPSB0b1NvdXJjZShEYXRhVmlldyksXG4gICAgICAgIG1hcEN0b3JTdHJpbmcgPSB0b1NvdXJjZShNYXApLFxuICAgICAgICBwcm9taXNlQ3RvclN0cmluZyA9IHRvU291cmNlKFByb21pc2UpLFxuICAgICAgICBzZXRDdG9yU3RyaW5nID0gdG9Tb3VyY2UoU2V0KSxcbiAgICAgICAgd2Vha01hcEN0b3JTdHJpbmcgPSB0b1NvdXJjZShXZWFrTWFwKTtcblxuICAgIC8qKiBVc2VkIHRvIGNvbnZlcnQgc3ltYm9scyB0byBwcmltaXRpdmVzIGFuZCBzdHJpbmdzLiAqL1xuICAgIHZhciBzeW1ib2xQcm90byA9IFN5bWJvbCA/IFN5bWJvbC5wcm90b3R5cGUgOiB1bmRlZmluZWQsXG4gICAgICAgIHN5bWJvbFZhbHVlT2YgPSBzeW1ib2xQcm90byA/IHN5bWJvbFByb3RvLnZhbHVlT2YgOiB1bmRlZmluZWQsXG4gICAgICAgIHN5bWJvbFRvU3RyaW5nID0gc3ltYm9sUHJvdG8gPyBzeW1ib2xQcm90by50b1N0cmluZyA6IHVuZGVmaW5lZDtcblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBgbG9kYXNoYCBvYmplY3Qgd2hpY2ggd3JhcHMgYHZhbHVlYCB0byBlbmFibGUgaW1wbGljaXQgbWV0aG9kXG4gICAgICogY2hhaW4gc2VxdWVuY2VzLiBNZXRob2RzIHRoYXQgb3BlcmF0ZSBvbiBhbmQgcmV0dXJuIGFycmF5cywgY29sbGVjdGlvbnMsXG4gICAgICogYW5kIGZ1bmN0aW9ucyBjYW4gYmUgY2hhaW5lZCB0b2dldGhlci4gTWV0aG9kcyB0aGF0IHJldHJpZXZlIGEgc2luZ2xlIHZhbHVlXG4gICAgICogb3IgbWF5IHJldHVybiBhIHByaW1pdGl2ZSB2YWx1ZSB3aWxsIGF1dG9tYXRpY2FsbHkgZW5kIHRoZSBjaGFpbiBzZXF1ZW5jZVxuICAgICAqIGFuZCByZXR1cm4gdGhlIHVud3JhcHBlZCB2YWx1ZS4gT3RoZXJ3aXNlLCB0aGUgdmFsdWUgbXVzdCBiZSB1bndyYXBwZWRcbiAgICAgKiB3aXRoIGBfI3ZhbHVlYC5cbiAgICAgKlxuICAgICAqIEV4cGxpY2l0IGNoYWluIHNlcXVlbmNlcywgd2hpY2ggbXVzdCBiZSB1bndyYXBwZWQgd2l0aCBgXyN2YWx1ZWAsIG1heSBiZVxuICAgICAqIGVuYWJsZWQgdXNpbmcgYF8uY2hhaW5gLlxuICAgICAqXG4gICAgICogVGhlIGV4ZWN1dGlvbiBvZiBjaGFpbmVkIG1ldGhvZHMgaXMgbGF6eSwgdGhhdCBpcywgaXQncyBkZWZlcnJlZCB1bnRpbFxuICAgICAqIGBfI3ZhbHVlYCBpcyBpbXBsaWNpdGx5IG9yIGV4cGxpY2l0bHkgY2FsbGVkLlxuICAgICAqXG4gICAgICogTGF6eSBldmFsdWF0aW9uIGFsbG93cyBzZXZlcmFsIG1ldGhvZHMgdG8gc3VwcG9ydCBzaG9ydGN1dCBmdXNpb24uXG4gICAgICogU2hvcnRjdXQgZnVzaW9uIGlzIGFuIG9wdGltaXphdGlvbiB0byBtZXJnZSBpdGVyYXRlZSBjYWxsczsgdGhpcyBhdm9pZHNcbiAgICAgKiB0aGUgY3JlYXRpb24gb2YgaW50ZXJtZWRpYXRlIGFycmF5cyBhbmQgY2FuIGdyZWF0bHkgcmVkdWNlIHRoZSBudW1iZXIgb2ZcbiAgICAgKiBpdGVyYXRlZSBleGVjdXRpb25zLiBTZWN0aW9ucyBvZiBhIGNoYWluIHNlcXVlbmNlIHF1YWxpZnkgZm9yIHNob3J0Y3V0XG4gICAgICogZnVzaW9uIGlmIHRoZSBzZWN0aW9uIGlzIGFwcGxpZWQgdG8gYW4gYXJyYXkgYW5kIGl0ZXJhdGVlcyBhY2NlcHQgb25seVxuICAgICAqIG9uZSBhcmd1bWVudC4gVGhlIGhldXJpc3RpYyBmb3Igd2hldGhlciBhIHNlY3Rpb24gcXVhbGlmaWVzIGZvciBzaG9ydGN1dFxuICAgICAqIGZ1c2lvbiBpcyBzdWJqZWN0IHRvIGNoYW5nZS5cbiAgICAgKlxuICAgICAqIENoYWluaW5nIGlzIHN1cHBvcnRlZCBpbiBjdXN0b20gYnVpbGRzIGFzIGxvbmcgYXMgdGhlIGBfI3ZhbHVlYCBtZXRob2QgaXNcbiAgICAgKiBkaXJlY3RseSBvciBpbmRpcmVjdGx5IGluY2x1ZGVkIGluIHRoZSBidWlsZC5cbiAgICAgKlxuICAgICAqIEluIGFkZGl0aW9uIHRvIGxvZGFzaCBtZXRob2RzLCB3cmFwcGVycyBoYXZlIGBBcnJheWAgYW5kIGBTdHJpbmdgIG1ldGhvZHMuXG4gICAgICpcbiAgICAgKiBUaGUgd3JhcHBlciBgQXJyYXlgIG1ldGhvZHMgYXJlOlxuICAgICAqIGBjb25jYXRgLCBgam9pbmAsIGBwb3BgLCBgcHVzaGAsIGBzaGlmdGAsIGBzb3J0YCwgYHNwbGljZWAsIGFuZCBgdW5zaGlmdGBcbiAgICAgKlxuICAgICAqIFRoZSB3cmFwcGVyIGBTdHJpbmdgIG1ldGhvZHMgYXJlOlxuICAgICAqIGByZXBsYWNlYCBhbmQgYHNwbGl0YFxuICAgICAqXG4gICAgICogVGhlIHdyYXBwZXIgbWV0aG9kcyB0aGF0IHN1cHBvcnQgc2hvcnRjdXQgZnVzaW9uIGFyZTpcbiAgICAgKiBgYXRgLCBgY29tcGFjdGAsIGBkcm9wYCwgYGRyb3BSaWdodGAsIGBkcm9wV2hpbGVgLCBgZmlsdGVyYCwgYGZpbmRgLFxuICAgICAqIGBmaW5kTGFzdGAsIGBoZWFkYCwgYGluaXRpYWxgLCBgbGFzdGAsIGBtYXBgLCBgcmVqZWN0YCwgYHJldmVyc2VgLCBgc2xpY2VgLFxuICAgICAqIGB0YWlsYCwgYHRha2VgLCBgdGFrZVJpZ2h0YCwgYHRha2VSaWdodFdoaWxlYCwgYHRha2VXaGlsZWAsIGFuZCBgdG9BcnJheWBcbiAgICAgKlxuICAgICAqIFRoZSBjaGFpbmFibGUgd3JhcHBlciBtZXRob2RzIGFyZTpcbiAgICAgKiBgYWZ0ZXJgLCBgYXJ5YCwgYGFzc2lnbmAsIGBhc3NpZ25JbmAsIGBhc3NpZ25JbldpdGhgLCBgYXNzaWduV2l0aGAsIGBhdGAsXG4gICAgICogYGJlZm9yZWAsIGBiaW5kYCwgYGJpbmRBbGxgLCBgYmluZEtleWAsIGBjYXN0QXJyYXlgLCBgY2hhaW5gLCBgY2h1bmtgLFxuICAgICAqIGBjb21taXRgLCBgY29tcGFjdGAsIGBjb25jYXRgLCBgY29uZm9ybXNgLCBgY29uc3RhbnRgLCBgY291bnRCeWAsIGBjcmVhdGVgLFxuICAgICAqIGBjdXJyeWAsIGBkZWJvdW5jZWAsIGBkZWZhdWx0c2AsIGBkZWZhdWx0c0RlZXBgLCBgZGVmZXJgLCBgZGVsYXlgLFxuICAgICAqIGBkaWZmZXJlbmNlYCwgYGRpZmZlcmVuY2VCeWAsIGBkaWZmZXJlbmNlV2l0aGAsIGBkcm9wYCwgYGRyb3BSaWdodGAsXG4gICAgICogYGRyb3BSaWdodFdoaWxlYCwgYGRyb3BXaGlsZWAsIGBleHRlbmRgLCBgZXh0ZW5kV2l0aGAsIGBmaWxsYCwgYGZpbHRlcmAsXG4gICAgICogYGZsYXRNYXBgLCBgZmxhdE1hcERlZXBgLCBgZmxhdE1hcERlcHRoYCwgYGZsYXR0ZW5gLCBgZmxhdHRlbkRlZXBgLFxuICAgICAqIGBmbGF0dGVuRGVwdGhgLCBgZmxpcGAsIGBmbG93YCwgYGZsb3dSaWdodGAsIGBmcm9tUGFpcnNgLCBgZnVuY3Rpb25zYCxcbiAgICAgKiBgZnVuY3Rpb25zSW5gLCBgZ3JvdXBCeWAsIGBpbml0aWFsYCwgYGludGVyc2VjdGlvbmAsIGBpbnRlcnNlY3Rpb25CeWAsXG4gICAgICogYGludGVyc2VjdGlvbldpdGhgLCBgaW52ZXJ0YCwgYGludmVydEJ5YCwgYGludm9rZU1hcGAsIGBpdGVyYXRlZWAsIGBrZXlCeWAsXG4gICAgICogYGtleXNgLCBga2V5c0luYCwgYG1hcGAsIGBtYXBLZXlzYCwgYG1hcFZhbHVlc2AsIGBtYXRjaGVzYCwgYG1hdGNoZXNQcm9wZXJ0eWAsXG4gICAgICogYG1lbW9pemVgLCBgbWVyZ2VgLCBgbWVyZ2VXaXRoYCwgYG1ldGhvZGAsIGBtZXRob2RPZmAsIGBtaXhpbmAsIGBuZWdhdGVgLFxuICAgICAqIGBudGhBcmdgLCBgb21pdGAsIGBvbWl0QnlgLCBgb25jZWAsIGBvcmRlckJ5YCwgYG92ZXJgLCBgb3ZlckFyZ3NgLFxuICAgICAqIGBvdmVyRXZlcnlgLCBgb3ZlclNvbWVgLCBgcGFydGlhbGAsIGBwYXJ0aWFsUmlnaHRgLCBgcGFydGl0aW9uYCwgYHBpY2tgLFxuICAgICAqIGBwaWNrQnlgLCBgcGxhbnRgLCBgcHJvcGVydHlgLCBgcHJvcGVydHlPZmAsIGBwdWxsYCwgYHB1bGxBbGxgLCBgcHVsbEFsbEJ5YCxcbiAgICAgKiBgcHVsbEFsbFdpdGhgLCBgcHVsbEF0YCwgYHB1c2hgLCBgcmFuZ2VgLCBgcmFuZ2VSaWdodGAsIGByZWFyZ2AsIGByZWplY3RgLFxuICAgICAqIGByZW1vdmVgLCBgcmVzdGAsIGByZXZlcnNlYCwgYHNhbXBsZVNpemVgLCBgc2V0YCwgYHNldFdpdGhgLCBgc2h1ZmZsZWAsXG4gICAgICogYHNsaWNlYCwgYHNvcnRgLCBgc29ydEJ5YCwgYHNwbGljZWAsIGBzcHJlYWRgLCBgdGFpbGAsIGB0YWtlYCwgYHRha2VSaWdodGAsXG4gICAgICogYHRha2VSaWdodFdoaWxlYCwgYHRha2VXaGlsZWAsIGB0YXBgLCBgdGhyb3R0bGVgLCBgdGhydWAsIGB0b0FycmF5YCxcbiAgICAgKiBgdG9QYWlyc2AsIGB0b1BhaXJzSW5gLCBgdG9QYXRoYCwgYHRvUGxhaW5PYmplY3RgLCBgdHJhbnNmb3JtYCwgYHVuYXJ5YCxcbiAgICAgKiBgdW5pb25gLCBgdW5pb25CeWAsIGB1bmlvbldpdGhgLCBgdW5pcWAsIGB1bmlxQnlgLCBgdW5pcVdpdGhgLCBgdW5zZXRgLFxuICAgICAqIGB1bnNoaWZ0YCwgYHVuemlwYCwgYHVuemlwV2l0aGAsIGB1cGRhdGVgLCBgdXBkYXRlV2l0aGAsIGB2YWx1ZXNgLFxuICAgICAqIGB2YWx1ZXNJbmAsIGB3aXRob3V0YCwgYHdyYXBgLCBgeG9yYCwgYHhvckJ5YCwgYHhvcldpdGhgLCBgemlwYCxcbiAgICAgKiBgemlwT2JqZWN0YCwgYHppcE9iamVjdERlZXBgLCBhbmQgYHppcFdpdGhgXG4gICAgICpcbiAgICAgKiBUaGUgd3JhcHBlciBtZXRob2RzIHRoYXQgYXJlICoqbm90KiogY2hhaW5hYmxlIGJ5IGRlZmF1bHQgYXJlOlxuICAgICAqIGBhZGRgLCBgYXR0ZW1wdGAsIGBjYW1lbENhc2VgLCBgY2FwaXRhbGl6ZWAsIGBjZWlsYCwgYGNsYW1wYCwgYGNsb25lYCxcbiAgICAgKiBgY2xvbmVEZWVwYCwgYGNsb25lRGVlcFdpdGhgLCBgY2xvbmVXaXRoYCwgYGNvbmZvcm1zVG9gLCBgZGVidXJyYCxcbiAgICAgKiBgZGVmYXVsdFRvYCwgYGRpdmlkZWAsIGBlYWNoYCwgYGVhY2hSaWdodGAsIGBlbmRzV2l0aGAsIGBlcWAsIGBlc2NhcGVgLFxuICAgICAqIGBlc2NhcGVSZWdFeHBgLCBgZXZlcnlgLCBgZmluZGAsIGBmaW5kSW5kZXhgLCBgZmluZEtleWAsIGBmaW5kTGFzdGAsXG4gICAgICogYGZpbmRMYXN0SW5kZXhgLCBgZmluZExhc3RLZXlgLCBgZmlyc3RgLCBgZmxvb3JgLCBgZm9yRWFjaGAsIGBmb3JFYWNoUmlnaHRgLFxuICAgICAqIGBmb3JJbmAsIGBmb3JJblJpZ2h0YCwgYGZvck93bmAsIGBmb3JPd25SaWdodGAsIGBnZXRgLCBgZ3RgLCBgZ3RlYCwgYGhhc2AsXG4gICAgICogYGhhc0luYCwgYGhlYWRgLCBgaWRlbnRpdHlgLCBgaW5jbHVkZXNgLCBgaW5kZXhPZmAsIGBpblJhbmdlYCwgYGludm9rZWAsXG4gICAgICogYGlzQXJndW1lbnRzYCwgYGlzQXJyYXlgLCBgaXNBcnJheUJ1ZmZlcmAsIGBpc0FycmF5TGlrZWAsIGBpc0FycmF5TGlrZU9iamVjdGAsXG4gICAgICogYGlzQm9vbGVhbmAsIGBpc0J1ZmZlcmAsIGBpc0RhdGVgLCBgaXNFbGVtZW50YCwgYGlzRW1wdHlgLCBgaXNFcXVhbGAsXG4gICAgICogYGlzRXF1YWxXaXRoYCwgYGlzRXJyb3JgLCBgaXNGaW5pdGVgLCBgaXNGdW5jdGlvbmAsIGBpc0ludGVnZXJgLCBgaXNMZW5ndGhgLFxuICAgICAqIGBpc01hcGAsIGBpc01hdGNoYCwgYGlzTWF0Y2hXaXRoYCwgYGlzTmFOYCwgYGlzTmF0aXZlYCwgYGlzTmlsYCwgYGlzTnVsbGAsXG4gICAgICogYGlzTnVtYmVyYCwgYGlzT2JqZWN0YCwgYGlzT2JqZWN0TGlrZWAsIGBpc1BsYWluT2JqZWN0YCwgYGlzUmVnRXhwYCxcbiAgICAgKiBgaXNTYWZlSW50ZWdlcmAsIGBpc1NldGAsIGBpc1N0cmluZ2AsIGBpc1VuZGVmaW5lZGAsIGBpc1R5cGVkQXJyYXlgLFxuICAgICAqIGBpc1dlYWtNYXBgLCBgaXNXZWFrU2V0YCwgYGpvaW5gLCBga2ViYWJDYXNlYCwgYGxhc3RgLCBgbGFzdEluZGV4T2ZgLFxuICAgICAqIGBsb3dlckNhc2VgLCBgbG93ZXJGaXJzdGAsIGBsdGAsIGBsdGVgLCBgbWF4YCwgYG1heEJ5YCwgYG1lYW5gLCBgbWVhbkJ5YCxcbiAgICAgKiBgbWluYCwgYG1pbkJ5YCwgYG11bHRpcGx5YCwgYG5vQ29uZmxpY3RgLCBgbm9vcGAsIGBub3dgLCBgbnRoYCwgYHBhZGAsXG4gICAgICogYHBhZEVuZGAsIGBwYWRTdGFydGAsIGBwYXJzZUludGAsIGBwb3BgLCBgcmFuZG9tYCwgYHJlZHVjZWAsIGByZWR1Y2VSaWdodGAsXG4gICAgICogYHJlcGVhdGAsIGByZXN1bHRgLCBgcm91bmRgLCBgcnVuSW5Db250ZXh0YCwgYHNhbXBsZWAsIGBzaGlmdGAsIGBzaXplYCxcbiAgICAgKiBgc25ha2VDYXNlYCwgYHNvbWVgLCBgc29ydGVkSW5kZXhgLCBgc29ydGVkSW5kZXhCeWAsIGBzb3J0ZWRMYXN0SW5kZXhgLFxuICAgICAqIGBzb3J0ZWRMYXN0SW5kZXhCeWAsIGBzdGFydENhc2VgLCBgc3RhcnRzV2l0aGAsIGBzdHViQXJyYXlgLCBgc3R1YkZhbHNlYCxcbiAgICAgKiBgc3R1Yk9iamVjdGAsIGBzdHViU3RyaW5nYCwgYHN0dWJUcnVlYCwgYHN1YnRyYWN0YCwgYHN1bWAsIGBzdW1CeWAsXG4gICAgICogYHRlbXBsYXRlYCwgYHRpbWVzYCwgYHRvRmluaXRlYCwgYHRvSW50ZWdlcmAsIGB0b0pTT05gLCBgdG9MZW5ndGhgLFxuICAgICAqIGB0b0xvd2VyYCwgYHRvTnVtYmVyYCwgYHRvU2FmZUludGVnZXJgLCBgdG9TdHJpbmdgLCBgdG9VcHBlcmAsIGB0cmltYCxcbiAgICAgKiBgdHJpbUVuZGAsIGB0cmltU3RhcnRgLCBgdHJ1bmNhdGVgLCBgdW5lc2NhcGVgLCBgdW5pcXVlSWRgLCBgdXBwZXJDYXNlYCxcbiAgICAgKiBgdXBwZXJGaXJzdGAsIGB2YWx1ZWAsIGFuZCBgd29yZHNgXG4gICAgICpcbiAgICAgKiBAbmFtZSBfXG4gICAgICogQGNvbnN0cnVjdG9yXG4gICAgICogQGNhdGVnb3J5IFNlcVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHdyYXAgaW4gYSBgbG9kYXNoYCBpbnN0YW5jZS5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgYGxvZGFzaGAgd3JhcHBlciBpbnN0YW5jZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gc3F1YXJlKG4pIHtcbiAgICAgKiAgIHJldHVybiBuICogbjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiB2YXIgd3JhcHBlZCA9IF8oWzEsIDIsIDNdKTtcbiAgICAgKlxuICAgICAqIC8vIFJldHVybnMgYW4gdW53cmFwcGVkIHZhbHVlLlxuICAgICAqIHdyYXBwZWQucmVkdWNlKF8uYWRkKTtcbiAgICAgKiAvLyA9PiA2XG4gICAgICpcbiAgICAgKiAvLyBSZXR1cm5zIGEgd3JhcHBlZCB2YWx1ZS5cbiAgICAgKiB2YXIgc3F1YXJlcyA9IHdyYXBwZWQubWFwKHNxdWFyZSk7XG4gICAgICpcbiAgICAgKiBfLmlzQXJyYXkoc3F1YXJlcyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNBcnJheShzcXVhcmVzLnZhbHVlKCkpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBsb2Rhc2godmFsdWUpIHtcbiAgICAgIGlmIChpc09iamVjdExpa2UodmFsdWUpICYmICFpc0FycmF5KHZhbHVlKSAmJiAhKHZhbHVlIGluc3RhbmNlb2YgTGF6eVdyYXBwZXIpKSB7XG4gICAgICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIExvZGFzaFdyYXBwZXIpIHtcbiAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwodmFsdWUsICdfX3dyYXBwZWRfXycpKSB7XG4gICAgICAgICAgcmV0dXJuIHdyYXBwZXJDbG9uZSh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBuZXcgTG9kYXNoV3JhcHBlcih2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uY3JlYXRlYCB3aXRob3V0IHN1cHBvcnQgZm9yIGFzc2lnbmluZ1xuICAgICAqIHByb3BlcnRpZXMgdG8gdGhlIGNyZWF0ZWQgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gcHJvdG8gVGhlIG9iamVjdCB0byBpbmhlcml0IGZyb20uXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG9iamVjdC5cbiAgICAgKi9cbiAgICB2YXIgYmFzZUNyZWF0ZSA9IChmdW5jdGlvbigpIHtcbiAgICAgIGZ1bmN0aW9uIG9iamVjdCgpIHt9XG4gICAgICByZXR1cm4gZnVuY3Rpb24ocHJvdG8pIHtcbiAgICAgICAgaWYgKCFpc09iamVjdChwcm90bykpIHtcbiAgICAgICAgICByZXR1cm4ge307XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9iamVjdENyZWF0ZSkge1xuICAgICAgICAgIHJldHVybiBvYmplY3RDcmVhdGUocHJvdG8pO1xuICAgICAgICB9XG4gICAgICAgIG9iamVjdC5wcm90b3R5cGUgPSBwcm90bztcbiAgICAgICAgdmFyIHJlc3VsdCA9IG5ldyBvYmplY3Q7XG4gICAgICAgIG9iamVjdC5wcm90b3R5cGUgPSB1bmRlZmluZWQ7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9O1xuICAgIH0oKSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgZnVuY3Rpb24gd2hvc2UgcHJvdG90eXBlIGNoYWluIHNlcXVlbmNlIHdyYXBwZXJzIGluaGVyaXQgZnJvbS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUxvZGFzaCgpIHtcbiAgICAgIC8vIE5vIG9wZXJhdGlvbiBwZXJmb3JtZWQuXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgY29uc3RydWN0b3IgZm9yIGNyZWF0aW5nIGBsb2Rhc2hgIHdyYXBwZXIgb2JqZWN0cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gd3JhcC5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtjaGFpbkFsbF0gRW5hYmxlIGV4cGxpY2l0IG1ldGhvZCBjaGFpbiBzZXF1ZW5jZXMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gTG9kYXNoV3JhcHBlcih2YWx1ZSwgY2hhaW5BbGwpIHtcbiAgICAgIHRoaXMuX193cmFwcGVkX18gPSB2YWx1ZTtcbiAgICAgIHRoaXMuX19hY3Rpb25zX18gPSBbXTtcbiAgICAgIHRoaXMuX19jaGFpbl9fID0gISFjaGFpbkFsbDtcbiAgICAgIHRoaXMuX19pbmRleF9fID0gMDtcbiAgICAgIHRoaXMuX192YWx1ZXNfXyA9IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBCeSBkZWZhdWx0LCB0aGUgdGVtcGxhdGUgZGVsaW1pdGVycyB1c2VkIGJ5IGxvZGFzaCBhcmUgbGlrZSB0aG9zZSBpblxuICAgICAqIGVtYmVkZGVkIFJ1YnkgKEVSQikgYXMgd2VsbCBhcyBFUzIwMTUgdGVtcGxhdGUgc3RyaW5ncy4gQ2hhbmdlIHRoZVxuICAgICAqIGZvbGxvd2luZyB0ZW1wbGF0ZSBzZXR0aW5ncyB0byB1c2UgYWx0ZXJuYXRpdmUgZGVsaW1pdGVycy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEB0eXBlIHtPYmplY3R9XG4gICAgICovXG4gICAgbG9kYXNoLnRlbXBsYXRlU2V0dGluZ3MgPSB7XG5cbiAgICAgIC8qKlxuICAgICAgICogVXNlZCB0byBkZXRlY3QgYGRhdGFgIHByb3BlcnR5IHZhbHVlcyB0byBiZSBIVE1MLWVzY2FwZWQuXG4gICAgICAgKlxuICAgICAgICogQG1lbWJlck9mIF8udGVtcGxhdGVTZXR0aW5nc1xuICAgICAgICogQHR5cGUge1JlZ0V4cH1cbiAgICAgICAqL1xuICAgICAgJ2VzY2FwZSc6IHJlRXNjYXBlLFxuXG4gICAgICAvKipcbiAgICAgICAqIFVzZWQgdG8gZGV0ZWN0IGNvZGUgdG8gYmUgZXZhbHVhdGVkLlxuICAgICAgICpcbiAgICAgICAqIEBtZW1iZXJPZiBfLnRlbXBsYXRlU2V0dGluZ3NcbiAgICAgICAqIEB0eXBlIHtSZWdFeHB9XG4gICAgICAgKi9cbiAgICAgICdldmFsdWF0ZSc6IHJlRXZhbHVhdGUsXG5cbiAgICAgIC8qKlxuICAgICAgICogVXNlZCB0byBkZXRlY3QgYGRhdGFgIHByb3BlcnR5IHZhbHVlcyB0byBpbmplY3QuXG4gICAgICAgKlxuICAgICAgICogQG1lbWJlck9mIF8udGVtcGxhdGVTZXR0aW5nc1xuICAgICAgICogQHR5cGUge1JlZ0V4cH1cbiAgICAgICAqL1xuICAgICAgJ2ludGVycG9sYXRlJzogcmVJbnRlcnBvbGF0ZSxcblxuICAgICAgLyoqXG4gICAgICAgKiBVc2VkIHRvIHJlZmVyZW5jZSB0aGUgZGF0YSBvYmplY3QgaW4gdGhlIHRlbXBsYXRlIHRleHQuXG4gICAgICAgKlxuICAgICAgICogQG1lbWJlck9mIF8udGVtcGxhdGVTZXR0aW5nc1xuICAgICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgICAqL1xuICAgICAgJ3ZhcmlhYmxlJzogJycsXG5cbiAgICAgIC8qKlxuICAgICAgICogVXNlZCB0byBpbXBvcnQgdmFyaWFibGVzIGludG8gdGhlIGNvbXBpbGVkIHRlbXBsYXRlLlxuICAgICAgICpcbiAgICAgICAqIEBtZW1iZXJPZiBfLnRlbXBsYXRlU2V0dGluZ3NcbiAgICAgICAqIEB0eXBlIHtPYmplY3R9XG4gICAgICAgKi9cbiAgICAgICdpbXBvcnRzJzoge1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBIHJlZmVyZW5jZSB0byB0aGUgYGxvZGFzaGAgZnVuY3Rpb24uXG4gICAgICAgICAqXG4gICAgICAgICAqIEBtZW1iZXJPZiBfLnRlbXBsYXRlU2V0dGluZ3MuaW1wb3J0c1xuICAgICAgICAgKiBAdHlwZSB7RnVuY3Rpb259XG4gICAgICAgICAqL1xuICAgICAgICAnXyc6IGxvZGFzaFxuICAgICAgfVxuICAgIH07XG5cbiAgICAvLyBFbnN1cmUgd3JhcHBlcnMgYXJlIGluc3RhbmNlcyBvZiBgYmFzZUxvZGFzaGAuXG4gICAgbG9kYXNoLnByb3RvdHlwZSA9IGJhc2VMb2Rhc2gucHJvdG90eXBlO1xuICAgIGxvZGFzaC5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBsb2Rhc2g7XG5cbiAgICBMb2Rhc2hXcmFwcGVyLnByb3RvdHlwZSA9IGJhc2VDcmVhdGUoYmFzZUxvZGFzaC5wcm90b3R5cGUpO1xuICAgIExvZGFzaFdyYXBwZXIucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gTG9kYXNoV3JhcHBlcjtcblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBsYXp5IHdyYXBwZXIgb2JqZWN0IHdoaWNoIHdyYXBzIGB2YWx1ZWAgdG8gZW5hYmxlIGxhenkgZXZhbHVhdGlvbi5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQGNvbnN0cnVjdG9yXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gd3JhcC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBMYXp5V3JhcHBlcih2YWx1ZSkge1xuICAgICAgdGhpcy5fX3dyYXBwZWRfXyA9IHZhbHVlO1xuICAgICAgdGhpcy5fX2FjdGlvbnNfXyA9IFtdO1xuICAgICAgdGhpcy5fX2Rpcl9fID0gMTtcbiAgICAgIHRoaXMuX19maWx0ZXJlZF9fID0gZmFsc2U7XG4gICAgICB0aGlzLl9faXRlcmF0ZWVzX18gPSBbXTtcbiAgICAgIHRoaXMuX190YWtlQ291bnRfXyA9IE1BWF9BUlJBWV9MRU5HVEg7XG4gICAgICB0aGlzLl9fdmlld3NfXyA9IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBjbG9uZSBvZiB0aGUgbGF6eSB3cmFwcGVyIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgY2xvbmVcbiAgICAgKiBAbWVtYmVyT2YgTGF6eVdyYXBwZXJcbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjbG9uZWQgYExhenlXcmFwcGVyYCBvYmplY3QuXG4gICAgICovXG4gICAgZnVuY3Rpb24gbGF6eUNsb25lKCkge1xuICAgICAgdmFyIHJlc3VsdCA9IG5ldyBMYXp5V3JhcHBlcih0aGlzLl9fd3JhcHBlZF9fKTtcbiAgICAgIHJlc3VsdC5fX2FjdGlvbnNfXyA9IGNvcHlBcnJheSh0aGlzLl9fYWN0aW9uc19fKTtcbiAgICAgIHJlc3VsdC5fX2Rpcl9fID0gdGhpcy5fX2Rpcl9fO1xuICAgICAgcmVzdWx0Ll9fZmlsdGVyZWRfXyA9IHRoaXMuX19maWx0ZXJlZF9fO1xuICAgICAgcmVzdWx0Ll9faXRlcmF0ZWVzX18gPSBjb3B5QXJyYXkodGhpcy5fX2l0ZXJhdGVlc19fKTtcbiAgICAgIHJlc3VsdC5fX3Rha2VDb3VudF9fID0gdGhpcy5fX3Rha2VDb3VudF9fO1xuICAgICAgcmVzdWx0Ll9fdmlld3NfXyA9IGNvcHlBcnJheSh0aGlzLl9fdmlld3NfXyk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldmVyc2VzIHRoZSBkaXJlY3Rpb24gb2YgbGF6eSBpdGVyYXRpb24uXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIHJldmVyc2VcbiAgICAgKiBAbWVtYmVyT2YgTGF6eVdyYXBwZXJcbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgcmV2ZXJzZWQgYExhenlXcmFwcGVyYCBvYmplY3QuXG4gICAgICovXG4gICAgZnVuY3Rpb24gbGF6eVJldmVyc2UoKSB7XG4gICAgICBpZiAodGhpcy5fX2ZpbHRlcmVkX18pIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IG5ldyBMYXp5V3JhcHBlcih0aGlzKTtcbiAgICAgICAgcmVzdWx0Ll9fZGlyX18gPSAtMTtcbiAgICAgICAgcmVzdWx0Ll9fZmlsdGVyZWRfXyA9IHRydWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXN1bHQgPSB0aGlzLmNsb25lKCk7XG4gICAgICAgIHJlc3VsdC5fX2Rpcl9fICo9IC0xO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBFeHRyYWN0cyB0aGUgdW53cmFwcGVkIHZhbHVlIGZyb20gaXRzIGxhenkgd3JhcHBlci5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgdmFsdWVcbiAgICAgKiBAbWVtYmVyT2YgTGF6eVdyYXBwZXJcbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgdW53cmFwcGVkIHZhbHVlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGxhenlWYWx1ZSgpIHtcbiAgICAgIHZhciBhcnJheSA9IHRoaXMuX193cmFwcGVkX18udmFsdWUoKSxcbiAgICAgICAgICBkaXIgPSB0aGlzLl9fZGlyX18sXG4gICAgICAgICAgaXNBcnIgPSBpc0FycmF5KGFycmF5KSxcbiAgICAgICAgICBpc1JpZ2h0ID0gZGlyIDwgMCxcbiAgICAgICAgICBhcnJMZW5ndGggPSBpc0FyciA/IGFycmF5Lmxlbmd0aCA6IDAsXG4gICAgICAgICAgdmlldyA9IGdldFZpZXcoMCwgYXJyTGVuZ3RoLCB0aGlzLl9fdmlld3NfXyksXG4gICAgICAgICAgc3RhcnQgPSB2aWV3LnN0YXJ0LFxuICAgICAgICAgIGVuZCA9IHZpZXcuZW5kLFxuICAgICAgICAgIGxlbmd0aCA9IGVuZCAtIHN0YXJ0LFxuICAgICAgICAgIGluZGV4ID0gaXNSaWdodCA/IGVuZCA6IChzdGFydCAtIDEpLFxuICAgICAgICAgIGl0ZXJhdGVlcyA9IHRoaXMuX19pdGVyYXRlZXNfXyxcbiAgICAgICAgICBpdGVyTGVuZ3RoID0gaXRlcmF0ZWVzLmxlbmd0aCxcbiAgICAgICAgICByZXNJbmRleCA9IDAsXG4gICAgICAgICAgdGFrZUNvdW50ID0gbmF0aXZlTWluKGxlbmd0aCwgdGhpcy5fX3Rha2VDb3VudF9fKTtcblxuICAgICAgaWYgKCFpc0FyciB8fCAoIWlzUmlnaHQgJiYgYXJyTGVuZ3RoID09IGxlbmd0aCAmJiB0YWtlQ291bnQgPT0gbGVuZ3RoKSkge1xuICAgICAgICByZXR1cm4gYmFzZVdyYXBwZXJWYWx1ZShhcnJheSwgdGhpcy5fX2FjdGlvbnNfXyk7XG4gICAgICB9XG4gICAgICB2YXIgcmVzdWx0ID0gW107XG5cbiAgICAgIG91dGVyOlxuICAgICAgd2hpbGUgKGxlbmd0aC0tICYmIHJlc0luZGV4IDwgdGFrZUNvdW50KSB7XG4gICAgICAgIGluZGV4ICs9IGRpcjtcblxuICAgICAgICB2YXIgaXRlckluZGV4ID0gLTEsXG4gICAgICAgICAgICB2YWx1ZSA9IGFycmF5W2luZGV4XTtcblxuICAgICAgICB3aGlsZSAoKytpdGVySW5kZXggPCBpdGVyTGVuZ3RoKSB7XG4gICAgICAgICAgdmFyIGRhdGEgPSBpdGVyYXRlZXNbaXRlckluZGV4XSxcbiAgICAgICAgICAgICAgaXRlcmF0ZWUgPSBkYXRhLml0ZXJhdGVlLFxuICAgICAgICAgICAgICB0eXBlID0gZGF0YS50eXBlLFxuICAgICAgICAgICAgICBjb21wdXRlZCA9IGl0ZXJhdGVlKHZhbHVlKTtcblxuICAgICAgICAgIGlmICh0eXBlID09IExBWllfTUFQX0ZMQUcpIHtcbiAgICAgICAgICAgIHZhbHVlID0gY29tcHV0ZWQ7XG4gICAgICAgICAgfSBlbHNlIGlmICghY29tcHV0ZWQpIHtcbiAgICAgICAgICAgIGlmICh0eXBlID09IExBWllfRklMVEVSX0ZMQUcpIHtcbiAgICAgICAgICAgICAgY29udGludWUgb3V0ZXI7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBicmVhayBvdXRlcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmVzdWx0W3Jlc0luZGV4KytdID0gdmFsdWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8vIEVuc3VyZSBgTGF6eVdyYXBwZXJgIGlzIGFuIGluc3RhbmNlIG9mIGBiYXNlTG9kYXNoYC5cbiAgICBMYXp5V3JhcHBlci5wcm90b3R5cGUgPSBiYXNlQ3JlYXRlKGJhc2VMb2Rhc2gucHJvdG90eXBlKTtcbiAgICBMYXp5V3JhcHBlci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBMYXp5V3JhcHBlcjtcblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBoYXNoIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQGNvbnN0cnVjdG9yXG4gICAgICogQHBhcmFtIHtBcnJheX0gW2VudHJpZXNdIFRoZSBrZXktdmFsdWUgcGFpcnMgdG8gY2FjaGUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gSGFzaChlbnRyaWVzKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBlbnRyaWVzID09IG51bGwgPyAwIDogZW50cmllcy5sZW5ndGg7XG5cbiAgICAgIHRoaXMuY2xlYXIoKTtcbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IGVudHJpZXNbaW5kZXhdO1xuICAgICAgICB0aGlzLnNldChlbnRyeVswXSwgZW50cnlbMV0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYWxsIGtleS12YWx1ZSBlbnRyaWVzIGZyb20gdGhlIGhhc2guXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGNsZWFyXG4gICAgICogQG1lbWJlck9mIEhhc2hcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBoYXNoQ2xlYXIoKSB7XG4gICAgICB0aGlzLl9fZGF0YV9fID0gbmF0aXZlQ3JlYXRlID8gbmF0aXZlQ3JlYXRlKG51bGwpIDoge307XG4gICAgICB0aGlzLnNpemUgPSAwO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYGtleWAgYW5kIGl0cyB2YWx1ZSBmcm9tIHRoZSBoYXNoLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBkZWxldGVcbiAgICAgKiBAbWVtYmVyT2YgSGFzaFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBoYXNoIFRoZSBoYXNoIHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHJlbW92ZS5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGVudHJ5IHdhcyByZW1vdmVkLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaGFzaERlbGV0ZShrZXkpIHtcbiAgICAgIHZhciByZXN1bHQgPSB0aGlzLmhhcyhrZXkpICYmIGRlbGV0ZSB0aGlzLl9fZGF0YV9fW2tleV07XG4gICAgICB0aGlzLnNpemUgLT0gcmVzdWx0ID8gMSA6IDA7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGhhc2ggdmFsdWUgZm9yIGBrZXlgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBnZXRcbiAgICAgKiBAbWVtYmVyT2YgSGFzaFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gZ2V0LlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBlbnRyeSB2YWx1ZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBoYXNoR2V0KGtleSkge1xuICAgICAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fO1xuICAgICAgaWYgKG5hdGl2ZUNyZWF0ZSkge1xuICAgICAgICB2YXIgcmVzdWx0ID0gZGF0YVtrZXldO1xuICAgICAgICByZXR1cm4gcmVzdWx0ID09PSBIQVNIX1VOREVGSU5FRCA/IHVuZGVmaW5lZCA6IHJlc3VsdDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBoYXNPd25Qcm9wZXJ0eS5jYWxsKGRhdGEsIGtleSkgPyBkYXRhW2tleV0gOiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGEgaGFzaCB2YWx1ZSBmb3IgYGtleWAgZXhpc3RzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBoYXNcbiAgICAgKiBAbWVtYmVyT2YgSGFzaFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBoYXNoSGFzKGtleSkge1xuICAgICAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fO1xuICAgICAgcmV0dXJuIG5hdGl2ZUNyZWF0ZSA/IChkYXRhW2tleV0gIT09IHVuZGVmaW5lZCkgOiBoYXNPd25Qcm9wZXJ0eS5jYWxsKGRhdGEsIGtleSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgaGFzaCBga2V5YCB0byBgdmFsdWVgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBzZXRcbiAgICAgKiBAbWVtYmVyT2YgSGFzaFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gc2V0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBoYXNoIGluc3RhbmNlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGhhc2hTZXQoa2V5LCB2YWx1ZSkge1xuICAgICAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fO1xuICAgICAgdGhpcy5zaXplICs9IHRoaXMuaGFzKGtleSkgPyAwIDogMTtcbiAgICAgIGRhdGFba2V5XSA9IChuYXRpdmVDcmVhdGUgJiYgdmFsdWUgPT09IHVuZGVmaW5lZCkgPyBIQVNIX1VOREVGSU5FRCA6IHZhbHVlO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLy8gQWRkIG1ldGhvZHMgdG8gYEhhc2hgLlxuICAgIEhhc2gucHJvdG90eXBlLmNsZWFyID0gaGFzaENsZWFyO1xuICAgIEhhc2gucHJvdG90eXBlWydkZWxldGUnXSA9IGhhc2hEZWxldGU7XG4gICAgSGFzaC5wcm90b3R5cGUuZ2V0ID0gaGFzaEdldDtcbiAgICBIYXNoLnByb3RvdHlwZS5oYXMgPSBoYXNoSGFzO1xuICAgIEhhc2gucHJvdG90eXBlLnNldCA9IGhhc2hTZXQ7XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGxpc3QgY2FjaGUgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbZW50cmllc10gVGhlIGtleS12YWx1ZSBwYWlycyB0byBjYWNoZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBMaXN0Q2FjaGUoZW50cmllcykge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gZW50cmllcyA9PSBudWxsID8gMCA6IGVudHJpZXMubGVuZ3RoO1xuXG4gICAgICB0aGlzLmNsZWFyKCk7XG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgZW50cnkgPSBlbnRyaWVzW2luZGV4XTtcbiAgICAgICAgdGhpcy5zZXQoZW50cnlbMF0sIGVudHJ5WzFdKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGFsbCBrZXktdmFsdWUgZW50cmllcyBmcm9tIHRoZSBsaXN0IGNhY2hlLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBjbGVhclxuICAgICAqIEBtZW1iZXJPZiBMaXN0Q2FjaGVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBsaXN0Q2FjaGVDbGVhcigpIHtcbiAgICAgIHRoaXMuX19kYXRhX18gPSBbXTtcbiAgICAgIHRoaXMuc2l6ZSA9IDA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBga2V5YCBhbmQgaXRzIHZhbHVlIGZyb20gdGhlIGxpc3QgY2FjaGUuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGRlbGV0ZVxuICAgICAqIEBtZW1iZXJPZiBMaXN0Q2FjaGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHJlbW92ZS5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGVudHJ5IHdhcyByZW1vdmVkLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gbGlzdENhY2hlRGVsZXRlKGtleSkge1xuICAgICAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fLFxuICAgICAgICAgIGluZGV4ID0gYXNzb2NJbmRleE9mKGRhdGEsIGtleSk7XG5cbiAgICAgIGlmIChpbmRleCA8IDApIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgdmFyIGxhc3RJbmRleCA9IGRhdGEubGVuZ3RoIC0gMTtcbiAgICAgIGlmIChpbmRleCA9PSBsYXN0SW5kZXgpIHtcbiAgICAgICAgZGF0YS5wb3AoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNwbGljZS5jYWxsKGRhdGEsIGluZGV4LCAxKTtcbiAgICAgIH1cbiAgICAgIC0tdGhpcy5zaXplO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgbGlzdCBjYWNoZSB2YWx1ZSBmb3IgYGtleWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGdldFxuICAgICAqIEBtZW1iZXJPZiBMaXN0Q2FjaGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIGdldC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZW50cnkgdmFsdWUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gbGlzdENhY2hlR2V0KGtleSkge1xuICAgICAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fLFxuICAgICAgICAgIGluZGV4ID0gYXNzb2NJbmRleE9mKGRhdGEsIGtleSk7XG5cbiAgICAgIHJldHVybiBpbmRleCA8IDAgPyB1bmRlZmluZWQgOiBkYXRhW2luZGV4XVsxXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYSBsaXN0IGNhY2hlIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGhhc1xuICAgICAqIEBtZW1iZXJPZiBMaXN0Q2FjaGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbiBlbnRyeSBmb3IgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gbGlzdENhY2hlSGFzKGtleSkge1xuICAgICAgcmV0dXJuIGFzc29jSW5kZXhPZih0aGlzLl9fZGF0YV9fLCBrZXkpID4gLTE7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgbGlzdCBjYWNoZSBga2V5YCB0byBgdmFsdWVgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBzZXRcbiAgICAgKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBzZXQuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGxpc3QgY2FjaGUgaW5zdGFuY2UuXG4gICAgICovXG4gICAgZnVuY3Rpb24gbGlzdENhY2hlU2V0KGtleSwgdmFsdWUpIHtcbiAgICAgIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXyxcbiAgICAgICAgICBpbmRleCA9IGFzc29jSW5kZXhPZihkYXRhLCBrZXkpO1xuXG4gICAgICBpZiAoaW5kZXggPCAwKSB7XG4gICAgICAgICsrdGhpcy5zaXplO1xuICAgICAgICBkYXRhLnB1c2goW2tleSwgdmFsdWVdKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRhdGFbaW5kZXhdWzFdID0gdmFsdWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvLyBBZGQgbWV0aG9kcyB0byBgTGlzdENhY2hlYC5cbiAgICBMaXN0Q2FjaGUucHJvdG90eXBlLmNsZWFyID0gbGlzdENhY2hlQ2xlYXI7XG4gICAgTGlzdENhY2hlLnByb3RvdHlwZVsnZGVsZXRlJ10gPSBsaXN0Q2FjaGVEZWxldGU7XG4gICAgTGlzdENhY2hlLnByb3RvdHlwZS5nZXQgPSBsaXN0Q2FjaGVHZXQ7XG4gICAgTGlzdENhY2hlLnByb3RvdHlwZS5oYXMgPSBsaXN0Q2FjaGVIYXM7XG4gICAgTGlzdENhY2hlLnByb3RvdHlwZS5zZXQgPSBsaXN0Q2FjaGVTZXQ7XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbWFwIGNhY2hlIG9iamVjdCB0byBzdG9yZSBrZXktdmFsdWUgcGFpcnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtlbnRyaWVzXSBUaGUga2V5LXZhbHVlIHBhaXJzIHRvIGNhY2hlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIE1hcENhY2hlKGVudHJpZXMpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IGVudHJpZXMgPT0gbnVsbCA/IDAgOiBlbnRyaWVzLmxlbmd0aDtcblxuICAgICAgdGhpcy5jbGVhcigpO1xuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gZW50cmllc1tpbmRleF07XG4gICAgICAgIHRoaXMuc2V0KGVudHJ5WzBdLCBlbnRyeVsxXSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBhbGwga2V5LXZhbHVlIGVudHJpZXMgZnJvbSB0aGUgbWFwLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBjbGVhclxuICAgICAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1hcENhY2hlQ2xlYXIoKSB7XG4gICAgICB0aGlzLnNpemUgPSAwO1xuICAgICAgdGhpcy5fX2RhdGFfXyA9IHtcbiAgICAgICAgJ2hhc2gnOiBuZXcgSGFzaCxcbiAgICAgICAgJ21hcCc6IG5ldyAoTWFwIHx8IExpc3RDYWNoZSksXG4gICAgICAgICdzdHJpbmcnOiBuZXcgSGFzaFxuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGBrZXlgIGFuZCBpdHMgdmFsdWUgZnJvbSB0aGUgbWFwLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBkZWxldGVcbiAgICAgKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHJlbW92ZS5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGVudHJ5IHdhcyByZW1vdmVkLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWFwQ2FjaGVEZWxldGUoa2V5KSB7XG4gICAgICB2YXIgcmVzdWx0ID0gZ2V0TWFwRGF0YSh0aGlzLCBrZXkpWydkZWxldGUnXShrZXkpO1xuICAgICAgdGhpcy5zaXplIC09IHJlc3VsdCA/IDEgOiAwO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBtYXAgdmFsdWUgZm9yIGBrZXlgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBnZXRcbiAgICAgKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIGdldC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZW50cnkgdmFsdWUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWFwQ2FjaGVHZXQoa2V5KSB7XG4gICAgICByZXR1cm4gZ2V0TWFwRGF0YSh0aGlzLCBrZXkpLmdldChrZXkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBhIG1hcCB2YWx1ZSBmb3IgYGtleWAgZXhpc3RzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBoYXNcbiAgICAgKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbiBlbnRyeSBmb3IgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWFwQ2FjaGVIYXMoa2V5KSB7XG4gICAgICByZXR1cm4gZ2V0TWFwRGF0YSh0aGlzLCBrZXkpLmhhcyhrZXkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIG1hcCBga2V5YCB0byBgdmFsdWVgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBzZXRcbiAgICAgKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHNldC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbWFwIGNhY2hlIGluc3RhbmNlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1hcENhY2hlU2V0KGtleSwgdmFsdWUpIHtcbiAgICAgIHZhciBkYXRhID0gZ2V0TWFwRGF0YSh0aGlzLCBrZXkpLFxuICAgICAgICAgIHNpemUgPSBkYXRhLnNpemU7XG5cbiAgICAgIGRhdGEuc2V0KGtleSwgdmFsdWUpO1xuICAgICAgdGhpcy5zaXplICs9IGRhdGEuc2l6ZSA9PSBzaXplID8gMCA6IDE7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvLyBBZGQgbWV0aG9kcyB0byBgTWFwQ2FjaGVgLlxuICAgIE1hcENhY2hlLnByb3RvdHlwZS5jbGVhciA9IG1hcENhY2hlQ2xlYXI7XG4gICAgTWFwQ2FjaGUucHJvdG90eXBlWydkZWxldGUnXSA9IG1hcENhY2hlRGVsZXRlO1xuICAgIE1hcENhY2hlLnByb3RvdHlwZS5nZXQgPSBtYXBDYWNoZUdldDtcbiAgICBNYXBDYWNoZS5wcm90b3R5cGUuaGFzID0gbWFwQ2FjaGVIYXM7XG4gICAgTWFwQ2FjaGUucHJvdG90eXBlLnNldCA9IG1hcENhY2hlU2V0O1xuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IGNhY2hlIG9iamVjdCB0byBzdG9yZSB1bmlxdWUgdmFsdWVzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbdmFsdWVzXSBUaGUgdmFsdWVzIHRvIGNhY2hlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIFNldENhY2hlKHZhbHVlcykge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gdmFsdWVzID09IG51bGwgPyAwIDogdmFsdWVzLmxlbmd0aDtcblxuICAgICAgdGhpcy5fX2RhdGFfXyA9IG5ldyBNYXBDYWNoZTtcbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHRoaXMuYWRkKHZhbHVlc1tpbmRleF0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFkZHMgYHZhbHVlYCB0byB0aGUgYXJyYXkgY2FjaGUuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGFkZFxuICAgICAqIEBtZW1iZXJPZiBTZXRDYWNoZVxuICAgICAqIEBhbGlhcyBwdXNoXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2FjaGUuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY2FjaGUgaW5zdGFuY2UuXG4gICAgICovXG4gICAgZnVuY3Rpb24gc2V0Q2FjaGVBZGQodmFsdWUpIHtcbiAgICAgIHRoaXMuX19kYXRhX18uc2V0KHZhbHVlLCBIQVNIX1VOREVGSU5FRCk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBpbiB0aGUgYXJyYXkgY2FjaGUuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGhhc1xuICAgICAqIEBtZW1iZXJPZiBTZXRDYWNoZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBmb3VuZCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNldENhY2hlSGFzKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdGhpcy5fX2RhdGFfXy5oYXModmFsdWUpO1xuICAgIH1cblxuICAgIC8vIEFkZCBtZXRob2RzIHRvIGBTZXRDYWNoZWAuXG4gICAgU2V0Q2FjaGUucHJvdG90eXBlLmFkZCA9IFNldENhY2hlLnByb3RvdHlwZS5wdXNoID0gc2V0Q2FjaGVBZGQ7XG4gICAgU2V0Q2FjaGUucHJvdG90eXBlLmhhcyA9IHNldENhY2hlSGFzO1xuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHN0YWNrIGNhY2hlIG9iamVjdCB0byBzdG9yZSBrZXktdmFsdWUgcGFpcnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtlbnRyaWVzXSBUaGUga2V5LXZhbHVlIHBhaXJzIHRvIGNhY2hlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIFN0YWNrKGVudHJpZXMpIHtcbiAgICAgIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXyA9IG5ldyBMaXN0Q2FjaGUoZW50cmllcyk7XG4gICAgICB0aGlzLnNpemUgPSBkYXRhLnNpemU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBhbGwga2V5LXZhbHVlIGVudHJpZXMgZnJvbSB0aGUgc3RhY2suXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGNsZWFyXG4gICAgICogQG1lbWJlck9mIFN0YWNrXG4gICAgICovXG4gICAgZnVuY3Rpb24gc3RhY2tDbGVhcigpIHtcbiAgICAgIHRoaXMuX19kYXRhX18gPSBuZXcgTGlzdENhY2hlO1xuICAgICAgdGhpcy5zaXplID0gMDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGBrZXlgIGFuZCBpdHMgdmFsdWUgZnJvbSB0aGUgc3RhY2suXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGRlbGV0ZVxuICAgICAqIEBtZW1iZXJPZiBTdGFja1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gcmVtb3ZlLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZW50cnkgd2FzIHJlbW92ZWQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzdGFja0RlbGV0ZShrZXkpIHtcbiAgICAgIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXyxcbiAgICAgICAgICByZXN1bHQgPSBkYXRhWydkZWxldGUnXShrZXkpO1xuXG4gICAgICB0aGlzLnNpemUgPSBkYXRhLnNpemU7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIHN0YWNrIHZhbHVlIGZvciBga2V5YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgZ2V0XG4gICAgICogQG1lbWJlck9mIFN0YWNrXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBnZXQuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGVudHJ5IHZhbHVlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHN0YWNrR2V0KGtleSkge1xuICAgICAgcmV0dXJuIHRoaXMuX19kYXRhX18uZ2V0KGtleSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGEgc3RhY2sgdmFsdWUgZm9yIGBrZXlgIGV4aXN0cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgaGFzXG4gICAgICogQG1lbWJlck9mIFN0YWNrXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBlbnRyeSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHN0YWNrSGFzKGtleSkge1xuICAgICAgcmV0dXJuIHRoaXMuX19kYXRhX18uaGFzKGtleSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgc3RhY2sgYGtleWAgdG8gYHZhbHVlYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgc2V0XG4gICAgICogQG1lbWJlck9mIFN0YWNrXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBzZXQuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIHN0YWNrIGNhY2hlIGluc3RhbmNlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHN0YWNrU2V0KGtleSwgdmFsdWUpIHtcbiAgICAgIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXztcbiAgICAgIGlmIChkYXRhIGluc3RhbmNlb2YgTGlzdENhY2hlKSB7XG4gICAgICAgIHZhciBwYWlycyA9IGRhdGEuX19kYXRhX187XG4gICAgICAgIGlmICghTWFwIHx8IChwYWlycy5sZW5ndGggPCBMQVJHRV9BUlJBWV9TSVpFIC0gMSkpIHtcbiAgICAgICAgICBwYWlycy5wdXNoKFtrZXksIHZhbHVlXSk7XG4gICAgICAgICAgdGhpcy5zaXplID0gKytkYXRhLnNpemU7XG4gICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cbiAgICAgICAgZGF0YSA9IHRoaXMuX19kYXRhX18gPSBuZXcgTWFwQ2FjaGUocGFpcnMpO1xuICAgICAgfVxuICAgICAgZGF0YS5zZXQoa2V5LCB2YWx1ZSk7XG4gICAgICB0aGlzLnNpemUgPSBkYXRhLnNpemU7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvLyBBZGQgbWV0aG9kcyB0byBgU3RhY2tgLlxuICAgIFN0YWNrLnByb3RvdHlwZS5jbGVhciA9IHN0YWNrQ2xlYXI7XG4gICAgU3RhY2sucHJvdG90eXBlWydkZWxldGUnXSA9IHN0YWNrRGVsZXRlO1xuICAgIFN0YWNrLnByb3RvdHlwZS5nZXQgPSBzdGFja0dldDtcbiAgICBTdGFjay5wcm90b3R5cGUuaGFzID0gc3RhY2tIYXM7XG4gICAgU3RhY2sucHJvdG90eXBlLnNldCA9IHN0YWNrU2V0O1xuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiB0aGUgZW51bWVyYWJsZSBwcm9wZXJ0eSBuYW1lcyBvZiB0aGUgYXJyYXktbGlrZSBgdmFsdWVgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IGluaGVyaXRlZCBTcGVjaWZ5IHJldHVybmluZyBpbmhlcml0ZWQgcHJvcGVydHkgbmFtZXMuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBhcnJheUxpa2VLZXlzKHZhbHVlLCBpbmhlcml0ZWQpIHtcbiAgICAgIHZhciBpc0FyciA9IGlzQXJyYXkodmFsdWUpLFxuICAgICAgICAgIGlzQXJnID0gIWlzQXJyICYmIGlzQXJndW1lbnRzKHZhbHVlKSxcbiAgICAgICAgICBpc0J1ZmYgPSAhaXNBcnIgJiYgIWlzQXJnICYmIGlzQnVmZmVyKHZhbHVlKSxcbiAgICAgICAgICBpc1R5cGUgPSAhaXNBcnIgJiYgIWlzQXJnICYmICFpc0J1ZmYgJiYgaXNUeXBlZEFycmF5KHZhbHVlKSxcbiAgICAgICAgICBza2lwSW5kZXhlcyA9IGlzQXJyIHx8IGlzQXJnIHx8IGlzQnVmZiB8fCBpc1R5cGUsXG4gICAgICAgICAgcmVzdWx0ID0gc2tpcEluZGV4ZXMgPyBiYXNlVGltZXModmFsdWUubGVuZ3RoLCBTdHJpbmcpIDogW10sXG4gICAgICAgICAgbGVuZ3RoID0gcmVzdWx0Lmxlbmd0aDtcblxuICAgICAgZm9yICh2YXIga2V5IGluIHZhbHVlKSB7XG4gICAgICAgIGlmICgoaW5oZXJpdGVkIHx8IGhhc093blByb3BlcnR5LmNhbGwodmFsdWUsIGtleSkpICYmXG4gICAgICAgICAgICAhKHNraXBJbmRleGVzICYmIChcbiAgICAgICAgICAgICAgIC8vIFNhZmFyaSA5IGhhcyBlbnVtZXJhYmxlIGBhcmd1bWVudHMubGVuZ3RoYCBpbiBzdHJpY3QgbW9kZS5cbiAgICAgICAgICAgICAgIGtleSA9PSAnbGVuZ3RoJyB8fFxuICAgICAgICAgICAgICAgLy8gTm9kZS5qcyAwLjEwIGhhcyBlbnVtZXJhYmxlIG5vbi1pbmRleCBwcm9wZXJ0aWVzIG9uIGJ1ZmZlcnMuXG4gICAgICAgICAgICAgICAoaXNCdWZmICYmIChrZXkgPT0gJ29mZnNldCcgfHwga2V5ID09ICdwYXJlbnQnKSkgfHxcbiAgICAgICAgICAgICAgIC8vIFBoYW50b21KUyAyIGhhcyBlbnVtZXJhYmxlIG5vbi1pbmRleCBwcm9wZXJ0aWVzIG9uIHR5cGVkIGFycmF5cy5cbiAgICAgICAgICAgICAgIChpc1R5cGUgJiYgKGtleSA9PSAnYnVmZmVyJyB8fCBrZXkgPT0gJ2J5dGVMZW5ndGgnIHx8IGtleSA9PSAnYnl0ZU9mZnNldCcpKSB8fFxuICAgICAgICAgICAgICAgLy8gU2tpcCBpbmRleCBwcm9wZXJ0aWVzLlxuICAgICAgICAgICAgICAgaXNJbmRleChrZXksIGxlbmd0aClcbiAgICAgICAgICAgICkpKSB7XG4gICAgICAgICAgcmVzdWx0LnB1c2goa2V5KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uc2FtcGxlYCBmb3IgYXJyYXlzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gc2FtcGxlLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByYW5kb20gZWxlbWVudC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBhcnJheVNhbXBsZShhcnJheSkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcbiAgICAgIHJldHVybiBsZW5ndGggPyBhcnJheVtiYXNlUmFuZG9tKDAsIGxlbmd0aCAtIDEpXSA6IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uc2FtcGxlU2l6ZWAgZm9yIGFycmF5cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHNhbXBsZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbiBUaGUgbnVtYmVyIG9mIGVsZW1lbnRzIHRvIHNhbXBsZS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHJhbmRvbSBlbGVtZW50cy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBhcnJheVNhbXBsZVNpemUoYXJyYXksIG4pIHtcbiAgICAgIHJldHVybiBzaHVmZmxlU2VsZihjb3B5QXJyYXkoYXJyYXkpLCBiYXNlQ2xhbXAobiwgMCwgYXJyYXkubGVuZ3RoKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLnNodWZmbGVgIGZvciBhcnJheXMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBzaHVmZmxlLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IHNodWZmbGVkIGFycmF5LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGFycmF5U2h1ZmZsZShhcnJheSkge1xuICAgICAgcmV0dXJuIHNodWZmbGVTZWxmKGNvcHlBcnJheShhcnJheSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgZnVuY3Rpb24gaXMgbGlrZSBgYXNzaWduVmFsdWVgIGV4Y2VwdCB0aGF0IGl0IGRvZXNuJ3QgYXNzaWduXG4gICAgICogYHVuZGVmaW5lZGAgdmFsdWVzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gYXNzaWduLlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGFzc2lnbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBhc3NpZ25NZXJnZVZhbHVlKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICAgICAgaWYgKCh2YWx1ZSAhPT0gdW5kZWZpbmVkICYmICFlcShvYmplY3Rba2V5XSwgdmFsdWUpKSB8fFxuICAgICAgICAgICh2YWx1ZSA9PT0gdW5kZWZpbmVkICYmICEoa2V5IGluIG9iamVjdCkpKSB7XG4gICAgICAgIGJhc2VBc3NpZ25WYWx1ZShvYmplY3QsIGtleSwgdmFsdWUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFzc2lnbnMgYHZhbHVlYCB0byBga2V5YCBvZiBgb2JqZWN0YCBpZiB0aGUgZXhpc3RpbmcgdmFsdWUgaXMgbm90IGVxdWl2YWxlbnRcbiAgICAgKiB1c2luZyBbYFNhbWVWYWx1ZVplcm9gXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1zYW1ldmFsdWV6ZXJvKVxuICAgICAqIGZvciBlcXVhbGl0eSBjb21wYXJpc29ucy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGFzc2lnbi5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBhc3NpZ24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gYXNzaWduVmFsdWUob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gICAgICB2YXIgb2JqVmFsdWUgPSBvYmplY3Rba2V5XTtcbiAgICAgIGlmICghKGhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBrZXkpICYmIGVxKG9ialZhbHVlLCB2YWx1ZSkpIHx8XG4gICAgICAgICAgKHZhbHVlID09PSB1bmRlZmluZWQgJiYgIShrZXkgaW4gb2JqZWN0KSkpIHtcbiAgICAgICAgYmFzZUFzc2lnblZhbHVlKG9iamVjdCwga2V5LCB2YWx1ZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgaW5kZXggYXQgd2hpY2ggdGhlIGBrZXlgIGlzIGZvdW5kIGluIGBhcnJheWAgb2Yga2V5LXZhbHVlIHBhaXJzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0geyp9IGtleSBUaGUga2V5IHRvIHNlYXJjaCBmb3IuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIG1hdGNoZWQgdmFsdWUsIGVsc2UgYC0xYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBhc3NvY0luZGV4T2YoYXJyYXksIGtleSkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcbiAgICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgICBpZiAoZXEoYXJyYXlbbGVuZ3RoXVswXSwga2V5KSkge1xuICAgICAgICAgIHJldHVybiBsZW5ndGg7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiAtMTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBZ2dyZWdhdGVzIGVsZW1lbnRzIG9mIGBjb2xsZWN0aW9uYCBvbiBgYWNjdW11bGF0b3JgIHdpdGgga2V5cyB0cmFuc2Zvcm1lZFxuICAgICAqIGJ5IGBpdGVyYXRlZWAgYW5kIHZhbHVlcyBzZXQgYnkgYHNldHRlcmAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBzZXR0ZXIgVGhlIGZ1bmN0aW9uIHRvIHNldCBgYWNjdW11bGF0b3JgIHZhbHVlcy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgaXRlcmF0ZWUgdG8gdHJhbnNmb3JtIGtleXMuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGFjY3VtdWxhdG9yIFRoZSBpbml0aWFsIGFnZ3JlZ2F0ZWQgb2JqZWN0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyBgYWNjdW11bGF0b3JgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VBZ2dyZWdhdG9yKGNvbGxlY3Rpb24sIHNldHRlciwgaXRlcmF0ZWUsIGFjY3VtdWxhdG9yKSB7XG4gICAgICBiYXNlRWFjaChjb2xsZWN0aW9uLCBmdW5jdGlvbih2YWx1ZSwga2V5LCBjb2xsZWN0aW9uKSB7XG4gICAgICAgIHNldHRlcihhY2N1bXVsYXRvciwgdmFsdWUsIGl0ZXJhdGVlKHZhbHVlKSwgY29sbGVjdGlvbik7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBhY2N1bXVsYXRvcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5hc3NpZ25gIHdpdGhvdXQgc3VwcG9ydCBmb3IgbXVsdGlwbGUgc291cmNlc1xuICAgICAqIG9yIGBjdXN0b21pemVyYCBmdW5jdGlvbnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBzb3VyY2Ugb2JqZWN0LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUFzc2lnbihvYmplY3QsIHNvdXJjZSkge1xuICAgICAgcmV0dXJuIG9iamVjdCAmJiBjb3B5T2JqZWN0KHNvdXJjZSwga2V5cyhzb3VyY2UpLCBvYmplY3QpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmFzc2lnbkluYCB3aXRob3V0IHN1cHBvcnQgZm9yIG11bHRpcGxlIHNvdXJjZXNcbiAgICAgKiBvciBgY3VzdG9taXplcmAgZnVuY3Rpb25zLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgc291cmNlIG9iamVjdC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VBc3NpZ25JbihvYmplY3QsIHNvdXJjZSkge1xuICAgICAgcmV0dXJuIG9iamVjdCAmJiBjb3B5T2JqZWN0KHNvdXJjZSwga2V5c0luKHNvdXJjZSksIG9iamVjdCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYGFzc2lnblZhbHVlYCBhbmQgYGFzc2lnbk1lcmdlVmFsdWVgIHdpdGhvdXRcbiAgICAgKiB2YWx1ZSBjaGVja3MuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBhc3NpZ24uXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gYXNzaWduLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VBc3NpZ25WYWx1ZShvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgICAgIGlmIChrZXkgPT0gJ19fcHJvdG9fXycgJiYgZGVmaW5lUHJvcGVydHkpIHtcbiAgICAgICAgZGVmaW5lUHJvcGVydHkob2JqZWN0LCBrZXksIHtcbiAgICAgICAgICAnY29uZmlndXJhYmxlJzogdHJ1ZSxcbiAgICAgICAgICAnZW51bWVyYWJsZSc6IHRydWUsXG4gICAgICAgICAgJ3ZhbHVlJzogdmFsdWUsXG4gICAgICAgICAgJ3dyaXRhYmxlJzogdHJ1ZVxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG9iamVjdFtrZXldID0gdmFsdWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uYXRgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaW5kaXZpZHVhbCBwYXRocy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ1tdfSBwYXRocyBUaGUgcHJvcGVydHkgcGF0aHMgdG8gcGljay5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHBpY2tlZCBlbGVtZW50cy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlQXQob2JqZWN0LCBwYXRocykge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gcGF0aHMubGVuZ3RoLFxuICAgICAgICAgIHJlc3VsdCA9IEFycmF5KGxlbmd0aCksXG4gICAgICAgICAgc2tpcCA9IG9iamVjdCA9PSBudWxsO1xuXG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICByZXN1bHRbaW5kZXhdID0gc2tpcCA/IHVuZGVmaW5lZCA6IGdldChvYmplY3QsIHBhdGhzW2luZGV4XSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmNsYW1wYCB3aGljaCBkb2Vzbid0IGNvZXJjZSBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBudW1iZXIgVGhlIG51bWJlciB0byBjbGFtcC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2xvd2VyXSBUaGUgbG93ZXIgYm91bmQuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHVwcGVyIFRoZSB1cHBlciBib3VuZC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBjbGFtcGVkIG51bWJlci5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlQ2xhbXAobnVtYmVyLCBsb3dlciwgdXBwZXIpIHtcbiAgICAgIGlmIChudW1iZXIgPT09IG51bWJlcikge1xuICAgICAgICBpZiAodXBwZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIG51bWJlciA9IG51bWJlciA8PSB1cHBlciA/IG51bWJlciA6IHVwcGVyO1xuICAgICAgICB9XG4gICAgICAgIGlmIChsb3dlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgbnVtYmVyID0gbnVtYmVyID49IGxvd2VyID8gbnVtYmVyIDogbG93ZXI7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBudW1iZXI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uY2xvbmVgIGFuZCBgXy5jbG9uZURlZXBgIHdoaWNoIHRyYWNrc1xuICAgICAqIHRyYXZlcnNlZCBvYmplY3RzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjbG9uZS5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuXG4gICAgICogIDEgLSBEZWVwIGNsb25lXG4gICAgICogIDIgLSBGbGF0dGVuIGluaGVyaXRlZCBwcm9wZXJ0aWVzXG4gICAgICogIDQgLSBDbG9uZSBzeW1ib2xzXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY2xvbmluZy5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW2tleV0gVGhlIGtleSBvZiBgdmFsdWVgLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0XSBUaGUgcGFyZW50IG9iamVjdCBvZiBgdmFsdWVgLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbc3RhY2tdIFRyYWNrcyB0cmF2ZXJzZWQgb2JqZWN0cyBhbmQgdGhlaXIgY2xvbmUgY291bnRlcnBhcnRzLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBjbG9uZWQgdmFsdWUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUNsb25lKHZhbHVlLCBiaXRtYXNrLCBjdXN0b21pemVyLCBrZXksIG9iamVjdCwgc3RhY2spIHtcbiAgICAgIHZhciByZXN1bHQsXG4gICAgICAgICAgaXNEZWVwID0gYml0bWFzayAmIENMT05FX0RFRVBfRkxBRyxcbiAgICAgICAgICBpc0ZsYXQgPSBiaXRtYXNrICYgQ0xPTkVfRkxBVF9GTEFHLFxuICAgICAgICAgIGlzRnVsbCA9IGJpdG1hc2sgJiBDTE9ORV9TWU1CT0xTX0ZMQUc7XG5cbiAgICAgIGlmIChjdXN0b21pemVyKSB7XG4gICAgICAgIHJlc3VsdCA9IG9iamVjdCA/IGN1c3RvbWl6ZXIodmFsdWUsIGtleSwgb2JqZWN0LCBzdGFjaykgOiBjdXN0b21pemVyKHZhbHVlKTtcbiAgICAgIH1cbiAgICAgIGlmIChyZXN1bHQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfVxuICAgICAgaWYgKCFpc09iamVjdCh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgfVxuICAgICAgdmFyIGlzQXJyID0gaXNBcnJheSh2YWx1ZSk7XG4gICAgICBpZiAoaXNBcnIpIHtcbiAgICAgICAgcmVzdWx0ID0gaW5pdENsb25lQXJyYXkodmFsdWUpO1xuICAgICAgICBpZiAoIWlzRGVlcCkge1xuICAgICAgICAgIHJldHVybiBjb3B5QXJyYXkodmFsdWUsIHJlc3VsdCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciB0YWcgPSBnZXRUYWcodmFsdWUpLFxuICAgICAgICAgICAgaXNGdW5jID0gdGFnID09IGZ1bmNUYWcgfHwgdGFnID09IGdlblRhZztcblxuICAgICAgICBpZiAoaXNCdWZmZXIodmFsdWUpKSB7XG4gICAgICAgICAgcmV0dXJuIGNsb25lQnVmZmVyKHZhbHVlLCBpc0RlZXApO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0YWcgPT0gb2JqZWN0VGFnIHx8IHRhZyA9PSBhcmdzVGFnIHx8IChpc0Z1bmMgJiYgIW9iamVjdCkpIHtcbiAgICAgICAgICByZXN1bHQgPSAoaXNGbGF0IHx8IGlzRnVuYykgPyB7fSA6IGluaXRDbG9uZU9iamVjdCh2YWx1ZSk7XG4gICAgICAgICAgaWYgKCFpc0RlZXApIHtcbiAgICAgICAgICAgIHJldHVybiBpc0ZsYXRcbiAgICAgICAgICAgICAgPyBjb3B5U3ltYm9sc0luKHZhbHVlLCBiYXNlQXNzaWduSW4ocmVzdWx0LCB2YWx1ZSkpXG4gICAgICAgICAgICAgIDogY29weVN5bWJvbHModmFsdWUsIGJhc2VBc3NpZ24ocmVzdWx0LCB2YWx1ZSkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAoIWNsb25lYWJsZVRhZ3NbdGFnXSkge1xuICAgICAgICAgICAgcmV0dXJuIG9iamVjdCA/IHZhbHVlIDoge307XG4gICAgICAgICAgfVxuICAgICAgICAgIHJlc3VsdCA9IGluaXRDbG9uZUJ5VGFnKHZhbHVlLCB0YWcsIGlzRGVlcCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIC8vIENoZWNrIGZvciBjaXJjdWxhciByZWZlcmVuY2VzIGFuZCByZXR1cm4gaXRzIGNvcnJlc3BvbmRpbmcgY2xvbmUuXG4gICAgICBzdGFjayB8fCAoc3RhY2sgPSBuZXcgU3RhY2spO1xuICAgICAgdmFyIHN0YWNrZWQgPSBzdGFjay5nZXQodmFsdWUpO1xuICAgICAgaWYgKHN0YWNrZWQpIHtcbiAgICAgICAgcmV0dXJuIHN0YWNrZWQ7XG4gICAgICB9XG4gICAgICBzdGFjay5zZXQodmFsdWUsIHJlc3VsdCk7XG5cbiAgICAgIGlmIChpc1NldCh2YWx1ZSkpIHtcbiAgICAgICAgdmFsdWUuZm9yRWFjaChmdW5jdGlvbihzdWJWYWx1ZSkge1xuICAgICAgICAgIHJlc3VsdC5hZGQoYmFzZUNsb25lKHN1YlZhbHVlLCBiaXRtYXNrLCBjdXN0b21pemVyLCBzdWJWYWx1ZSwgdmFsdWUsIHN0YWNrKSk7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIGlmIChpc01hcCh2YWx1ZSkpIHtcbiAgICAgICAgdmFsdWUuZm9yRWFjaChmdW5jdGlvbihzdWJWYWx1ZSwga2V5KSB7XG4gICAgICAgICAgcmVzdWx0LnNldChrZXksIGJhc2VDbG9uZShzdWJWYWx1ZSwgYml0bWFzaywgY3VzdG9taXplciwga2V5LCB2YWx1ZSwgc3RhY2spKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHZhciBrZXlzRnVuYyA9IGlzRnVsbFxuICAgICAgICA/IChpc0ZsYXQgPyBnZXRBbGxLZXlzSW4gOiBnZXRBbGxLZXlzKVxuICAgICAgICA6IChpc0ZsYXQgPyBrZXlzSW4gOiBrZXlzKTtcblxuICAgICAgdmFyIHByb3BzID0gaXNBcnIgPyB1bmRlZmluZWQgOiBrZXlzRnVuYyh2YWx1ZSk7XG4gICAgICBhcnJheUVhY2gocHJvcHMgfHwgdmFsdWUsIGZ1bmN0aW9uKHN1YlZhbHVlLCBrZXkpIHtcbiAgICAgICAgaWYgKHByb3BzKSB7XG4gICAgICAgICAga2V5ID0gc3ViVmFsdWU7XG4gICAgICAgICAgc3ViVmFsdWUgPSB2YWx1ZVtrZXldO1xuICAgICAgICB9XG4gICAgICAgIC8vIFJlY3Vyc2l2ZWx5IHBvcHVsYXRlIGNsb25lIChzdXNjZXB0aWJsZSB0byBjYWxsIHN0YWNrIGxpbWl0cykuXG4gICAgICAgIGFzc2lnblZhbHVlKHJlc3VsdCwga2V5LCBiYXNlQ2xvbmUoc3ViVmFsdWUsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGtleSwgdmFsdWUsIHN0YWNrKSk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uY29uZm9ybXNgIHdoaWNoIGRvZXNuJ3QgY2xvbmUgYHNvdXJjZWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCBvZiBwcm9wZXJ0eSBwcmVkaWNhdGVzIHRvIGNvbmZvcm0gdG8uXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgc3BlYyBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlQ29uZm9ybXMoc291cmNlKSB7XG4gICAgICB2YXIgcHJvcHMgPSBrZXlzKHNvdXJjZSk7XG4gICAgICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgICAgIHJldHVybiBiYXNlQ29uZm9ybXNUbyhvYmplY3QsIHNvdXJjZSwgcHJvcHMpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5jb25mb3Jtc1RvYCB3aGljaCBhY2NlcHRzIGBwcm9wc2AgdG8gY2hlY2suXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCBvZiBwcm9wZXJ0eSBwcmVkaWNhdGVzIHRvIGNvbmZvcm0gdG8uXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBvYmplY3RgIGNvbmZvcm1zLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUNvbmZvcm1zVG8ob2JqZWN0LCBzb3VyY2UsIHByb3BzKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gcHJvcHMubGVuZ3RoO1xuICAgICAgaWYgKG9iamVjdCA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiAhbGVuZ3RoO1xuICAgICAgfVxuICAgICAgb2JqZWN0ID0gT2JqZWN0KG9iamVjdCk7XG4gICAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgICAgdmFyIGtleSA9IHByb3BzW2xlbmd0aF0sXG4gICAgICAgICAgICBwcmVkaWNhdGUgPSBzb3VyY2Vba2V5XSxcbiAgICAgICAgICAgIHZhbHVlID0gb2JqZWN0W2tleV07XG5cbiAgICAgICAgaWYgKCh2YWx1ZSA9PT0gdW5kZWZpbmVkICYmICEoa2V5IGluIG9iamVjdCkpIHx8ICFwcmVkaWNhdGUodmFsdWUpKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5kZWxheWAgYW5kIGBfLmRlZmVyYCB3aGljaCBhY2NlcHRzIGBhcmdzYFxuICAgICAqIHRvIHByb3ZpZGUgdG8gYGZ1bmNgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBkZWxheS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gd2FpdCBUaGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0byBkZWxheSBpbnZvY2F0aW9uLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFyZ3MgVGhlIGFyZ3VtZW50cyB0byBwcm92aWRlIHRvIGBmdW5jYC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfE9iamVjdH0gUmV0dXJucyB0aGUgdGltZXIgaWQgb3IgdGltZW91dCBvYmplY3QuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZURlbGF5KGZ1bmMsIHdhaXQsIGFyZ3MpIHtcbiAgICAgIGlmICh0eXBlb2YgZnVuYyAhPSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkgeyBmdW5jLmFwcGx5KHVuZGVmaW5lZCwgYXJncyk7IH0sIHdhaXQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIG1ldGhvZHMgbGlrZSBgXy5kaWZmZXJlbmNlYCB3aXRob3V0IHN1cHBvcnRcbiAgICAgKiBmb3IgZXhjbHVkaW5nIG11bHRpcGxlIGFycmF5cyBvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSB2YWx1ZXMgVGhlIHZhbHVlcyB0byBleGNsdWRlLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NvbXBhcmF0b3JdIFRoZSBjb21wYXJhdG9yIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgZmlsdGVyZWQgdmFsdWVzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VEaWZmZXJlbmNlKGFycmF5LCB2YWx1ZXMsIGl0ZXJhdGVlLCBjb21wYXJhdG9yKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBpbmNsdWRlcyA9IGFycmF5SW5jbHVkZXMsXG4gICAgICAgICAgaXNDb21tb24gPSB0cnVlLFxuICAgICAgICAgIGxlbmd0aCA9IGFycmF5Lmxlbmd0aCxcbiAgICAgICAgICByZXN1bHQgPSBbXSxcbiAgICAgICAgICB2YWx1ZXNMZW5ndGggPSB2YWx1ZXMubGVuZ3RoO1xuXG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfVxuICAgICAgaWYgKGl0ZXJhdGVlKSB7XG4gICAgICAgIHZhbHVlcyA9IGFycmF5TWFwKHZhbHVlcywgYmFzZVVuYXJ5KGl0ZXJhdGVlKSk7XG4gICAgICB9XG4gICAgICBpZiAoY29tcGFyYXRvcikge1xuICAgICAgICBpbmNsdWRlcyA9IGFycmF5SW5jbHVkZXNXaXRoO1xuICAgICAgICBpc0NvbW1vbiA9IGZhbHNlO1xuICAgICAgfVxuICAgICAgZWxzZSBpZiAodmFsdWVzLmxlbmd0aCA+PSBMQVJHRV9BUlJBWV9TSVpFKSB7XG4gICAgICAgIGluY2x1ZGVzID0gY2FjaGVIYXM7XG4gICAgICAgIGlzQ29tbW9uID0gZmFsc2U7XG4gICAgICAgIHZhbHVlcyA9IG5ldyBTZXRDYWNoZSh2YWx1ZXMpO1xuICAgICAgfVxuICAgICAgb3V0ZXI6XG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgdmFsdWUgPSBhcnJheVtpbmRleF0sXG4gICAgICAgICAgICBjb21wdXRlZCA9IGl0ZXJhdGVlID09IG51bGwgPyB2YWx1ZSA6IGl0ZXJhdGVlKHZhbHVlKTtcblxuICAgICAgICB2YWx1ZSA9IChjb21wYXJhdG9yIHx8IHZhbHVlICE9PSAwKSA/IHZhbHVlIDogMDtcbiAgICAgICAgaWYgKGlzQ29tbW9uICYmIGNvbXB1dGVkID09PSBjb21wdXRlZCkge1xuICAgICAgICAgIHZhciB2YWx1ZXNJbmRleCA9IHZhbHVlc0xlbmd0aDtcbiAgICAgICAgICB3aGlsZSAodmFsdWVzSW5kZXgtLSkge1xuICAgICAgICAgICAgaWYgKHZhbHVlc1t2YWx1ZXNJbmRleF0gPT09IGNvbXB1dGVkKSB7XG4gICAgICAgICAgICAgIGNvbnRpbnVlIG91dGVyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICByZXN1bHQucHVzaCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoIWluY2x1ZGVzKHZhbHVlcywgY29tcHV0ZWQsIGNvbXBhcmF0b3IpKSB7XG4gICAgICAgICAgcmVzdWx0LnB1c2godmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmZvckVhY2hgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fE9iamVjdH0gUmV0dXJucyBgY29sbGVjdGlvbmAuXG4gICAgICovXG4gICAgdmFyIGJhc2VFYWNoID0gY3JlYXRlQmFzZUVhY2goYmFzZUZvck93bik7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5mb3JFYWNoUmlnaHRgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fE9iamVjdH0gUmV0dXJucyBgY29sbGVjdGlvbmAuXG4gICAgICovXG4gICAgdmFyIGJhc2VFYWNoUmlnaHQgPSBjcmVhdGVCYXNlRWFjaChiYXNlRm9yT3duUmlnaHQsIHRydWUpO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZXZlcnlgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbGwgZWxlbWVudHMgcGFzcyB0aGUgcHJlZGljYXRlIGNoZWNrLFxuICAgICAqICBlbHNlIGBmYWxzZWBcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlRXZlcnkoY29sbGVjdGlvbiwgcHJlZGljYXRlKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gdHJ1ZTtcbiAgICAgIGJhc2VFYWNoKGNvbGxlY3Rpb24sIGZ1bmN0aW9uKHZhbHVlLCBpbmRleCwgY29sbGVjdGlvbikge1xuICAgICAgICByZXN1bHQgPSAhIXByZWRpY2F0ZSh2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIG1ldGhvZHMgbGlrZSBgXy5tYXhgIGFuZCBgXy5taW5gIHdoaWNoIGFjY2VwdHMgYVxuICAgICAqIGBjb21wYXJhdG9yYCB0byBkZXRlcm1pbmUgdGhlIGV4dHJlbXVtIHZhbHVlLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY29tcGFyYXRvciBUaGUgY29tcGFyYXRvciB1c2VkIHRvIGNvbXBhcmUgdmFsdWVzLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBleHRyZW11bSB2YWx1ZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlRXh0cmVtdW0oYXJyYXksIGl0ZXJhdGVlLCBjb21wYXJhdG9yKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IGFycmF5W2luZGV4XSxcbiAgICAgICAgICAgIGN1cnJlbnQgPSBpdGVyYXRlZSh2YWx1ZSk7XG5cbiAgICAgICAgaWYgKGN1cnJlbnQgIT0gbnVsbCAmJiAoY29tcHV0ZWQgPT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgICA/IChjdXJyZW50ID09PSBjdXJyZW50ICYmICFpc1N5bWJvbChjdXJyZW50KSlcbiAgICAgICAgICAgICAgOiBjb21wYXJhdG9yKGN1cnJlbnQsIGNvbXB1dGVkKVxuICAgICAgICAgICAgKSkge1xuICAgICAgICAgIHZhciBjb21wdXRlZCA9IGN1cnJlbnQsXG4gICAgICAgICAgICAgIHJlc3VsdCA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmZpbGxgIHdpdGhvdXQgYW4gaXRlcmF0ZWUgY2FsbCBndWFyZC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGZpbGwuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gZmlsbCBgYXJyYXlgIHdpdGguXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzdGFydD0wXSBUaGUgc3RhcnQgcG9zaXRpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtlbmQ9YXJyYXkubGVuZ3RoXSBUaGUgZW5kIHBvc2l0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VGaWxsKGFycmF5LCB2YWx1ZSwgc3RhcnQsIGVuZCkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcblxuICAgICAgc3RhcnQgPSB0b0ludGVnZXIoc3RhcnQpO1xuICAgICAgaWYgKHN0YXJ0IDwgMCkge1xuICAgICAgICBzdGFydCA9IC1zdGFydCA+IGxlbmd0aCA/IDAgOiAobGVuZ3RoICsgc3RhcnQpO1xuICAgICAgfVxuICAgICAgZW5kID0gKGVuZCA9PT0gdW5kZWZpbmVkIHx8IGVuZCA+IGxlbmd0aCkgPyBsZW5ndGggOiB0b0ludGVnZXIoZW5kKTtcbiAgICAgIGlmIChlbmQgPCAwKSB7XG4gICAgICAgIGVuZCArPSBsZW5ndGg7XG4gICAgICB9XG4gICAgICBlbmQgPSBzdGFydCA+IGVuZCA/IDAgOiB0b0xlbmd0aChlbmQpO1xuICAgICAgd2hpbGUgKHN0YXJ0IDwgZW5kKSB7XG4gICAgICAgIGFycmF5W3N0YXJ0KytdID0gdmFsdWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gYXJyYXk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZmlsdGVyYCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcmVkaWNhdGUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBmaWx0ZXJlZCBhcnJheS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlRmlsdGVyKGNvbGxlY3Rpb24sIHByZWRpY2F0ZSkge1xuICAgICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgICAgYmFzZUVhY2goY29sbGVjdGlvbiwgZnVuY3Rpb24odmFsdWUsIGluZGV4LCBjb2xsZWN0aW9uKSB7XG4gICAgICAgIGlmIChwcmVkaWNhdGUodmFsdWUsIGluZGV4LCBjb2xsZWN0aW9uKSkge1xuICAgICAgICAgIHJlc3VsdC5wdXNoKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmZsYXR0ZW5gIHdpdGggc3VwcG9ydCBmb3IgcmVzdHJpY3RpbmcgZmxhdHRlbmluZy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGZsYXR0ZW4uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGRlcHRoIFRoZSBtYXhpbXVtIHJlY3Vyc2lvbiBkZXB0aC5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtwcmVkaWNhdGU9aXNGbGF0dGVuYWJsZV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtpc1N0cmljdF0gUmVzdHJpY3QgdG8gdmFsdWVzIHRoYXQgcGFzcyBgcHJlZGljYXRlYCBjaGVja3MuXG4gICAgICogQHBhcmFtIHtBcnJheX0gW3Jlc3VsdD1bXV0gVGhlIGluaXRpYWwgcmVzdWx0IHZhbHVlLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGZsYXR0ZW5lZCBhcnJheS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlRmxhdHRlbihhcnJheSwgZGVwdGgsIHByZWRpY2F0ZSwgaXNTdHJpY3QsIHJlc3VsdCkge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuXG4gICAgICBwcmVkaWNhdGUgfHwgKHByZWRpY2F0ZSA9IGlzRmxhdHRlbmFibGUpO1xuICAgICAgcmVzdWx0IHx8IChyZXN1bHQgPSBbXSk7XG5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IGFycmF5W2luZGV4XTtcbiAgICAgICAgaWYgKGRlcHRoID4gMCAmJiBwcmVkaWNhdGUodmFsdWUpKSB7XG4gICAgICAgICAgaWYgKGRlcHRoID4gMSkge1xuICAgICAgICAgICAgLy8gUmVjdXJzaXZlbHkgZmxhdHRlbiBhcnJheXMgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKS5cbiAgICAgICAgICAgIGJhc2VGbGF0dGVuKHZhbHVlLCBkZXB0aCAtIDEsIHByZWRpY2F0ZSwgaXNTdHJpY3QsIHJlc3VsdCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGFycmF5UHVzaChyZXN1bHQsIHZhbHVlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoIWlzU3RyaWN0KSB7XG4gICAgICAgICAgcmVzdWx0W3Jlc3VsdC5sZW5ndGhdID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYGJhc2VGb3JPd25gIHdoaWNoIGl0ZXJhdGVzIG92ZXIgYG9iamVjdGBcbiAgICAgKiBwcm9wZXJ0aWVzIHJldHVybmVkIGJ5IGBrZXlzRnVuY2AgYW5kIGludm9rZXMgYGl0ZXJhdGVlYCBmb3IgZWFjaCBwcm9wZXJ0eS5cbiAgICAgKiBJdGVyYXRlZSBmdW5jdGlvbnMgbWF5IGV4aXQgaXRlcmF0aW9uIGVhcmx5IGJ5IGV4cGxpY2l0bHkgcmV0dXJuaW5nIGBmYWxzZWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBrZXlzRnVuYyBUaGUgZnVuY3Rpb24gdG8gZ2V0IHRoZSBrZXlzIG9mIGBvYmplY3RgLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICovXG4gICAgdmFyIGJhc2VGb3IgPSBjcmVhdGVCYXNlRm9yKCk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIGZ1bmN0aW9uIGlzIGxpa2UgYGJhc2VGb3JgIGV4Y2VwdCB0aGF0IGl0IGl0ZXJhdGVzIG92ZXIgcHJvcGVydGllc1xuICAgICAqIGluIHRoZSBvcHBvc2l0ZSBvcmRlci5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGtleXNGdW5jIFRoZSBmdW5jdGlvbiB0byBnZXQgdGhlIGtleXMgb2YgYG9iamVjdGAuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKi9cbiAgICB2YXIgYmFzZUZvclJpZ2h0ID0gY3JlYXRlQmFzZUZvcih0cnVlKTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmZvck93bmAgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlRm9yT3duKG9iamVjdCwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiBvYmplY3QgJiYgYmFzZUZvcihvYmplY3QsIGl0ZXJhdGVlLCBrZXlzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5mb3JPd25SaWdodGAgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlRm9yT3duUmlnaHQob2JqZWN0LCBpdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIG9iamVjdCAmJiBiYXNlRm9yUmlnaHQob2JqZWN0LCBpdGVyYXRlZSwga2V5cyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZnVuY3Rpb25zYCB3aGljaCBjcmVhdGVzIGFuIGFycmF5IG9mXG4gICAgICogYG9iamVjdGAgZnVuY3Rpb24gcHJvcGVydHkgbmFtZXMgZmlsdGVyZWQgZnJvbSBgcHJvcHNgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBwcm9wcyBUaGUgcHJvcGVydHkgbmFtZXMgdG8gZmlsdGVyLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgZnVuY3Rpb24gbmFtZXMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUZ1bmN0aW9ucyhvYmplY3QsIHByb3BzKSB7XG4gICAgICByZXR1cm4gYXJyYXlGaWx0ZXIocHJvcHMsIGZ1bmN0aW9uKGtleSkge1xuICAgICAgICByZXR1cm4gaXNGdW5jdGlvbihvYmplY3Rba2V5XSk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5nZXRgIHdpdGhvdXQgc3VwcG9ydCBmb3IgZGVmYXVsdCB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByZXNvbHZlZCB2YWx1ZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlR2V0KG9iamVjdCwgcGF0aCkge1xuICAgICAgcGF0aCA9IGNhc3RQYXRoKHBhdGgsIG9iamVjdCk7XG5cbiAgICAgIHZhciBpbmRleCA9IDAsXG4gICAgICAgICAgbGVuZ3RoID0gcGF0aC5sZW5ndGg7XG5cbiAgICAgIHdoaWxlIChvYmplY3QgIT0gbnVsbCAmJiBpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICBvYmplY3QgPSBvYmplY3RbdG9LZXkocGF0aFtpbmRleCsrXSldO1xuICAgICAgfVxuICAgICAgcmV0dXJuIChpbmRleCAmJiBpbmRleCA9PSBsZW5ndGgpID8gb2JqZWN0IDogdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBnZXRBbGxLZXlzYCBhbmQgYGdldEFsbEtleXNJbmAgd2hpY2ggdXNlc1xuICAgICAqIGBrZXlzRnVuY2AgYW5kIGBzeW1ib2xzRnVuY2AgdG8gZ2V0IHRoZSBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIGFuZFxuICAgICAqIHN5bWJvbHMgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBrZXlzRnVuYyBUaGUgZnVuY3Rpb24gdG8gZ2V0IHRoZSBrZXlzIG9mIGBvYmplY3RgLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHN5bWJvbHNGdW5jIFRoZSBmdW5jdGlvbiB0byBnZXQgdGhlIHN5bWJvbHMgb2YgYG9iamVjdGAuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcyBhbmQgc3ltYm9scy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlR2V0QWxsS2V5cyhvYmplY3QsIGtleXNGdW5jLCBzeW1ib2xzRnVuYykge1xuICAgICAgdmFyIHJlc3VsdCA9IGtleXNGdW5jKG9iamVjdCk7XG4gICAgICByZXR1cm4gaXNBcnJheShvYmplY3QpID8gcmVzdWx0IDogYXJyYXlQdXNoKHJlc3VsdCwgc3ltYm9sc0Z1bmMob2JqZWN0KSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYGdldFRhZ2Agd2l0aG91dCBmYWxsYmFja3MgZm9yIGJ1Z2d5IGVudmlyb25tZW50cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgYHRvU3RyaW5nVGFnYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlR2V0VGFnKHZhbHVlKSB7XG4gICAgICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gdmFsdWUgPT09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZFRhZyA6IG51bGxUYWc7XG4gICAgICB9XG4gICAgICByZXR1cm4gKHN5bVRvU3RyaW5nVGFnICYmIHN5bVRvU3RyaW5nVGFnIGluIE9iamVjdCh2YWx1ZSkpXG4gICAgICAgID8gZ2V0UmF3VGFnKHZhbHVlKVxuICAgICAgICA6IG9iamVjdFRvU3RyaW5nKHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5ndGAgd2hpY2ggZG9lc24ndCBjb2VyY2UgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgZ3JlYXRlciB0aGFuIGBvdGhlcmAsXG4gICAgICogIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlR3QodmFsdWUsIG90aGVyKSB7XG4gICAgICByZXR1cm4gdmFsdWUgPiBvdGhlcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5oYXNgIHdpdGhvdXQgc3VwcG9ydCBmb3IgZGVlcCBwYXRocy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3RdIFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IGtleSBUaGUga2V5IHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSGFzKG9iamVjdCwga2V5KSB7XG4gICAgICByZXR1cm4gb2JqZWN0ICE9IG51bGwgJiYgaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIGtleSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaGFzSW5gIHdpdGhvdXQgc3VwcG9ydCBmb3IgZGVlcCBwYXRocy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3RdIFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IGtleSBUaGUga2V5IHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSGFzSW4ob2JqZWN0LCBrZXkpIHtcbiAgICAgIHJldHVybiBvYmplY3QgIT0gbnVsbCAmJiBrZXkgaW4gT2JqZWN0KG9iamVjdCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaW5SYW5nZWAgd2hpY2ggZG9lc24ndCBjb2VyY2UgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbnVtYmVyIFRoZSBudW1iZXIgdG8gY2hlY2suXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHN0YXJ0IFRoZSBzdGFydCBvZiB0aGUgcmFuZ2UuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGVuZCBUaGUgZW5kIG9mIHRoZSByYW5nZS5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYG51bWJlcmAgaXMgaW4gdGhlIHJhbmdlLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUluUmFuZ2UobnVtYmVyLCBzdGFydCwgZW5kKSB7XG4gICAgICByZXR1cm4gbnVtYmVyID49IG5hdGl2ZU1pbihzdGFydCwgZW5kKSAmJiBudW1iZXIgPCBuYXRpdmVNYXgoc3RhcnQsIGVuZCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgbWV0aG9kcyBsaWtlIGBfLmludGVyc2VjdGlvbmAsIHdpdGhvdXQgc3VwcG9ydFxuICAgICAqIGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLCB0aGF0IGFjY2VwdHMgYW4gYXJyYXkgb2YgYXJyYXlzIHRvIGluc3BlY3QuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5cyBUaGUgYXJyYXlzIHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlXSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY29tcGFyYXRvcl0gVGhlIGNvbXBhcmF0b3IgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBzaGFyZWQgdmFsdWVzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VJbnRlcnNlY3Rpb24oYXJyYXlzLCBpdGVyYXRlZSwgY29tcGFyYXRvcikge1xuICAgICAgdmFyIGluY2x1ZGVzID0gY29tcGFyYXRvciA/IGFycmF5SW5jbHVkZXNXaXRoIDogYXJyYXlJbmNsdWRlcyxcbiAgICAgICAgICBsZW5ndGggPSBhcnJheXNbMF0ubGVuZ3RoLFxuICAgICAgICAgIG90aExlbmd0aCA9IGFycmF5cy5sZW5ndGgsXG4gICAgICAgICAgb3RoSW5kZXggPSBvdGhMZW5ndGgsXG4gICAgICAgICAgY2FjaGVzID0gQXJyYXkob3RoTGVuZ3RoKSxcbiAgICAgICAgICBtYXhMZW5ndGggPSBJbmZpbml0eSxcbiAgICAgICAgICByZXN1bHQgPSBbXTtcblxuICAgICAgd2hpbGUgKG90aEluZGV4LS0pIHtcbiAgICAgICAgdmFyIGFycmF5ID0gYXJyYXlzW290aEluZGV4XTtcbiAgICAgICAgaWYgKG90aEluZGV4ICYmIGl0ZXJhdGVlKSB7XG4gICAgICAgICAgYXJyYXkgPSBhcnJheU1hcChhcnJheSwgYmFzZVVuYXJ5KGl0ZXJhdGVlKSk7XG4gICAgICAgIH1cbiAgICAgICAgbWF4TGVuZ3RoID0gbmF0aXZlTWluKGFycmF5Lmxlbmd0aCwgbWF4TGVuZ3RoKTtcbiAgICAgICAgY2FjaGVzW290aEluZGV4XSA9ICFjb21wYXJhdG9yICYmIChpdGVyYXRlZSB8fCAobGVuZ3RoID49IDEyMCAmJiBhcnJheS5sZW5ndGggPj0gMTIwKSlcbiAgICAgICAgICA/IG5ldyBTZXRDYWNoZShvdGhJbmRleCAmJiBhcnJheSlcbiAgICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIGFycmF5ID0gYXJyYXlzWzBdO1xuXG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBzZWVuID0gY2FjaGVzWzBdO1xuXG4gICAgICBvdXRlcjpcbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoICYmIHJlc3VsdC5sZW5ndGggPCBtYXhMZW5ndGgpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gYXJyYXlbaW5kZXhdLFxuICAgICAgICAgICAgY29tcHV0ZWQgPSBpdGVyYXRlZSA/IGl0ZXJhdGVlKHZhbHVlKSA6IHZhbHVlO1xuXG4gICAgICAgIHZhbHVlID0gKGNvbXBhcmF0b3IgfHwgdmFsdWUgIT09IDApID8gdmFsdWUgOiAwO1xuICAgICAgICBpZiAoIShzZWVuXG4gICAgICAgICAgICAgID8gY2FjaGVIYXMoc2VlbiwgY29tcHV0ZWQpXG4gICAgICAgICAgICAgIDogaW5jbHVkZXMocmVzdWx0LCBjb21wdXRlZCwgY29tcGFyYXRvcilcbiAgICAgICAgICAgICkpIHtcbiAgICAgICAgICBvdGhJbmRleCA9IG90aExlbmd0aDtcbiAgICAgICAgICB3aGlsZSAoLS1vdGhJbmRleCkge1xuICAgICAgICAgICAgdmFyIGNhY2hlID0gY2FjaGVzW290aEluZGV4XTtcbiAgICAgICAgICAgIGlmICghKGNhY2hlXG4gICAgICAgICAgICAgICAgICA/IGNhY2hlSGFzKGNhY2hlLCBjb21wdXRlZClcbiAgICAgICAgICAgICAgICAgIDogaW5jbHVkZXMoYXJyYXlzW290aEluZGV4XSwgY29tcHV0ZWQsIGNvbXBhcmF0b3IpKVxuICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICBjb250aW51ZSBvdXRlcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHNlZW4pIHtcbiAgICAgICAgICAgIHNlZW4ucHVzaChjb21wdXRlZCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJlc3VsdC5wdXNoKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pbnZlcnRgIGFuZCBgXy5pbnZlcnRCeWAgd2hpY2ggaW52ZXJ0c1xuICAgICAqIGBvYmplY3RgIHdpdGggdmFsdWVzIHRyYW5zZm9ybWVkIGJ5IGBpdGVyYXRlZWAgYW5kIHNldCBieSBgc2V0dGVyYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBzZXR0ZXIgVGhlIGZ1bmN0aW9uIHRvIHNldCBgYWNjdW11bGF0b3JgIHZhbHVlcy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgaXRlcmF0ZWUgdG8gdHJhbnNmb3JtIHZhbHVlcy5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gYWNjdW11bGF0b3IgVGhlIGluaXRpYWwgaW52ZXJ0ZWQgb2JqZWN0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyBgYWNjdW11bGF0b3JgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VJbnZlcnRlcihvYmplY3QsIHNldHRlciwgaXRlcmF0ZWUsIGFjY3VtdWxhdG9yKSB7XG4gICAgICBiYXNlRm9yT3duKG9iamVjdCwgZnVuY3Rpb24odmFsdWUsIGtleSwgb2JqZWN0KSB7XG4gICAgICAgIHNldHRlcihhY2N1bXVsYXRvciwgaXRlcmF0ZWUodmFsdWUpLCBrZXksIG9iamVjdCk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBhY2N1bXVsYXRvcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pbnZva2VgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaW5kaXZpZHVhbFxuICAgICAqIG1ldGhvZCBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgbWV0aG9kIHRvIGludm9rZS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcmdzIFRoZSBhcmd1bWVudHMgdG8gaW52b2tlIHRoZSBtZXRob2Qgd2l0aC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmVzdWx0IG9mIHRoZSBpbnZva2VkIG1ldGhvZC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSW52b2tlKG9iamVjdCwgcGF0aCwgYXJncykge1xuICAgICAgcGF0aCA9IGNhc3RQYXRoKHBhdGgsIG9iamVjdCk7XG4gICAgICBvYmplY3QgPSBwYXJlbnQob2JqZWN0LCBwYXRoKTtcbiAgICAgIHZhciBmdW5jID0gb2JqZWN0ID09IG51bGwgPyBvYmplY3QgOiBvYmplY3RbdG9LZXkobGFzdChwYXRoKSldO1xuICAgICAgcmV0dXJuIGZ1bmMgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IGFwcGx5KGZ1bmMsIG9iamVjdCwgYXJncyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNBcmd1bWVudHNgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBgYXJndW1lbnRzYCBvYmplY3QsXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUlzQXJndW1lbnRzKHZhbHVlKSB7XG4gICAgICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBiYXNlR2V0VGFnKHZhbHVlKSA9PSBhcmdzVGFnO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzQXJyYXlCdWZmZXJgIHdpdGhvdXQgTm9kZS5qcyBvcHRpbWl6YXRpb25zLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBhcnJheSBidWZmZXIsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSXNBcnJheUJ1ZmZlcih2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgYmFzZUdldFRhZyh2YWx1ZSkgPT0gYXJyYXlCdWZmZXJUYWc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNEYXRlYCB3aXRob3V0IE5vZGUuanMgb3B0aW1pemF0aW9ucy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBkYXRlIG9iamVjdCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VJc0RhdGUodmFsdWUpIHtcbiAgICAgIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIGJhc2VHZXRUYWcodmFsdWUpID09IGRhdGVUYWc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNFcXVhbGAgd2hpY2ggc3VwcG9ydHMgcGFydGlhbCBjb21wYXJpc29uc1xuICAgICAqIGFuZCB0cmFja3MgdHJhdmVyc2VkIG9iamVjdHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuXG4gICAgICogIDEgLSBVbm9yZGVyZWQgY29tcGFyaXNvblxuICAgICAqICAyIC0gUGFydGlhbCBjb21wYXJpc29uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29tcGFyaXNvbnMuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtzdGFja10gVHJhY2tzIHRyYXZlcnNlZCBgdmFsdWVgIGFuZCBgb3RoZXJgIG9iamVjdHMuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSB2YWx1ZXMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSXNFcXVhbCh2YWx1ZSwgb3RoZXIsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIHN0YWNrKSB7XG4gICAgICBpZiAodmFsdWUgPT09IG90aGVyKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgaWYgKHZhbHVlID09IG51bGwgfHwgb3RoZXIgPT0gbnVsbCB8fCAoIWlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgIWlzT2JqZWN0TGlrZShvdGhlcikpKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZSAhPT0gdmFsdWUgJiYgb3RoZXIgIT09IG90aGVyO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VJc0VxdWFsRGVlcCh2YWx1ZSwgb3RoZXIsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGJhc2VJc0VxdWFsLCBzdGFjayk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlSXNFcXVhbGAgZm9yIGFycmF5cyBhbmQgb2JqZWN0cyB3aGljaCBwZXJmb3Jtc1xuICAgICAqIGRlZXAgY29tcGFyaXNvbnMgYW5kIHRyYWNrcyB0cmF2ZXJzZWQgb2JqZWN0cyBlbmFibGluZyBvYmplY3RzIHdpdGggY2lyY3VsYXJcbiAgICAgKiByZWZlcmVuY2VzIHRvIGJlIGNvbXBhcmVkLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3RoZXIgVGhlIG90aGVyIG9iamVjdCB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGJhc2VJc0VxdWFsYCBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGN1c3RvbWl6ZXIgVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBlcXVhbEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGRldGVybWluZSBlcXVpdmFsZW50cyBvZiB2YWx1ZXMuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtzdGFja10gVHJhY2tzIHRyYXZlcnNlZCBgb2JqZWN0YCBhbmQgYG90aGVyYCBvYmplY3RzLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgb2JqZWN0cyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VJc0VxdWFsRGVlcChvYmplY3QsIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKSB7XG4gICAgICB2YXIgb2JqSXNBcnIgPSBpc0FycmF5KG9iamVjdCksXG4gICAgICAgICAgb3RoSXNBcnIgPSBpc0FycmF5KG90aGVyKSxcbiAgICAgICAgICBvYmpUYWcgPSBvYmpJc0FyciA/IGFycmF5VGFnIDogZ2V0VGFnKG9iamVjdCksXG4gICAgICAgICAgb3RoVGFnID0gb3RoSXNBcnIgPyBhcnJheVRhZyA6IGdldFRhZyhvdGhlcik7XG5cbiAgICAgIG9ialRhZyA9IG9ialRhZyA9PSBhcmdzVGFnID8gb2JqZWN0VGFnIDogb2JqVGFnO1xuICAgICAgb3RoVGFnID0gb3RoVGFnID09IGFyZ3NUYWcgPyBvYmplY3RUYWcgOiBvdGhUYWc7XG5cbiAgICAgIHZhciBvYmpJc09iaiA9IG9ialRhZyA9PSBvYmplY3RUYWcsXG4gICAgICAgICAgb3RoSXNPYmogPSBvdGhUYWcgPT0gb2JqZWN0VGFnLFxuICAgICAgICAgIGlzU2FtZVRhZyA9IG9ialRhZyA9PSBvdGhUYWc7XG5cbiAgICAgIGlmIChpc1NhbWVUYWcgJiYgaXNCdWZmZXIob2JqZWN0KSkge1xuICAgICAgICBpZiAoIWlzQnVmZmVyKG90aGVyKSkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBvYmpJc0FyciA9IHRydWU7XG4gICAgICAgIG9iaklzT2JqID0gZmFsc2U7XG4gICAgICB9XG4gICAgICBpZiAoaXNTYW1lVGFnICYmICFvYmpJc09iaikge1xuICAgICAgICBzdGFjayB8fCAoc3RhY2sgPSBuZXcgU3RhY2spO1xuICAgICAgICByZXR1cm4gKG9iaklzQXJyIHx8IGlzVHlwZWRBcnJheShvYmplY3QpKVxuICAgICAgICAgID8gZXF1YWxBcnJheXMob2JqZWN0LCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjaylcbiAgICAgICAgICA6IGVxdWFsQnlUYWcob2JqZWN0LCBvdGhlciwgb2JqVGFnLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKTtcbiAgICAgIH1cbiAgICAgIGlmICghKGJpdG1hc2sgJiBDT01QQVJFX1BBUlRJQUxfRkxBRykpIHtcbiAgICAgICAgdmFyIG9iaklzV3JhcHBlZCA9IG9iaklzT2JqICYmIGhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCAnX193cmFwcGVkX18nKSxcbiAgICAgICAgICAgIG90aElzV3JhcHBlZCA9IG90aElzT2JqICYmIGhhc093blByb3BlcnR5LmNhbGwob3RoZXIsICdfX3dyYXBwZWRfXycpO1xuXG4gICAgICAgIGlmIChvYmpJc1dyYXBwZWQgfHwgb3RoSXNXcmFwcGVkKSB7XG4gICAgICAgICAgdmFyIG9ialVud3JhcHBlZCA9IG9iaklzV3JhcHBlZCA/IG9iamVjdC52YWx1ZSgpIDogb2JqZWN0LFxuICAgICAgICAgICAgICBvdGhVbndyYXBwZWQgPSBvdGhJc1dyYXBwZWQgPyBvdGhlci52YWx1ZSgpIDogb3RoZXI7XG5cbiAgICAgICAgICBzdGFjayB8fCAoc3RhY2sgPSBuZXcgU3RhY2spO1xuICAgICAgICAgIHJldHVybiBlcXVhbEZ1bmMob2JqVW53cmFwcGVkLCBvdGhVbndyYXBwZWQsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIHN0YWNrKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKCFpc1NhbWVUYWcpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgc3RhY2sgfHwgKHN0YWNrID0gbmV3IFN0YWNrKTtcbiAgICAgIHJldHVybiBlcXVhbE9iamVjdHMob2JqZWN0LCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjayk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNNYXBgIHdpdGhvdXQgTm9kZS5qcyBvcHRpbWl6YXRpb25zLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIG1hcCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VJc01hcCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgZ2V0VGFnKHZhbHVlKSA9PSBtYXBUYWc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNNYXRjaGAgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3Qgb2YgcHJvcGVydHkgdmFsdWVzIHRvIG1hdGNoLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IG1hdGNoRGF0YSBUaGUgcHJvcGVydHkgbmFtZXMsIHZhbHVlcywgYW5kIGNvbXBhcmUgZmxhZ3MgdG8gbWF0Y2guXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29tcGFyaXNvbnMuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBvYmplY3RgIGlzIGEgbWF0Y2gsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSXNNYXRjaChvYmplY3QsIHNvdXJjZSwgbWF0Y2hEYXRhLCBjdXN0b21pemVyKSB7XG4gICAgICB2YXIgaW5kZXggPSBtYXRjaERhdGEubGVuZ3RoLFxuICAgICAgICAgIGxlbmd0aCA9IGluZGV4LFxuICAgICAgICAgIG5vQ3VzdG9taXplciA9ICFjdXN0b21pemVyO1xuXG4gICAgICBpZiAob2JqZWN0ID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuICFsZW5ndGg7XG4gICAgICB9XG4gICAgICBvYmplY3QgPSBPYmplY3Qob2JqZWN0KTtcbiAgICAgIHdoaWxlIChpbmRleC0tKSB7XG4gICAgICAgIHZhciBkYXRhID0gbWF0Y2hEYXRhW2luZGV4XTtcbiAgICAgICAgaWYgKChub0N1c3RvbWl6ZXIgJiYgZGF0YVsyXSlcbiAgICAgICAgICAgICAgPyBkYXRhWzFdICE9PSBvYmplY3RbZGF0YVswXV1cbiAgICAgICAgICAgICAgOiAhKGRhdGFbMF0gaW4gb2JqZWN0KVxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICBkYXRhID0gbWF0Y2hEYXRhW2luZGV4XTtcbiAgICAgICAgdmFyIGtleSA9IGRhdGFbMF0sXG4gICAgICAgICAgICBvYmpWYWx1ZSA9IG9iamVjdFtrZXldLFxuICAgICAgICAgICAgc3JjVmFsdWUgPSBkYXRhWzFdO1xuXG4gICAgICAgIGlmIChub0N1c3RvbWl6ZXIgJiYgZGF0YVsyXSkge1xuICAgICAgICAgIGlmIChvYmpWYWx1ZSA9PT0gdW5kZWZpbmVkICYmICEoa2V5IGluIG9iamVjdCkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIHN0YWNrID0gbmV3IFN0YWNrO1xuICAgICAgICAgIGlmIChjdXN0b21pemVyKSB7XG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gY3VzdG9taXplcihvYmpWYWx1ZSwgc3JjVmFsdWUsIGtleSwgb2JqZWN0LCBzb3VyY2UsIHN0YWNrKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKCEocmVzdWx0ID09PSB1bmRlZmluZWRcbiAgICAgICAgICAgICAgICA/IGJhc2VJc0VxdWFsKHNyY1ZhbHVlLCBvYmpWYWx1ZSwgQ09NUEFSRV9QQVJUSUFMX0ZMQUcgfCBDT01QQVJFX1VOT1JERVJFRF9GTEFHLCBjdXN0b21pemVyLCBzdGFjaylcbiAgICAgICAgICAgICAgICA6IHJlc3VsdFxuICAgICAgICAgICAgICApKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc05hdGl2ZWAgd2l0aG91dCBiYWQgc2hpbSBjaGVja3MuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgbmF0aXZlIGZ1bmN0aW9uLFxuICAgICAqICBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUlzTmF0aXZlKHZhbHVlKSB7XG4gICAgICBpZiAoIWlzT2JqZWN0KHZhbHVlKSB8fCBpc01hc2tlZCh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgdmFyIHBhdHRlcm4gPSBpc0Z1bmN0aW9uKHZhbHVlKSA/IHJlSXNOYXRpdmUgOiByZUlzSG9zdEN0b3I7XG4gICAgICByZXR1cm4gcGF0dGVybi50ZXN0KHRvU291cmNlKHZhbHVlKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNSZWdFeHBgIHdpdGhvdXQgTm9kZS5qcyBvcHRpbWl6YXRpb25zLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHJlZ2V4cCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VJc1JlZ0V4cCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgYmFzZUdldFRhZyh2YWx1ZSkgPT0gcmVnZXhwVGFnO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzU2V0YCB3aXRob3V0IE5vZGUuanMgb3B0aW1pemF0aW9ucy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBzZXQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSXNTZXQodmFsdWUpIHtcbiAgICAgIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIGdldFRhZyh2YWx1ZSkgPT0gc2V0VGFnO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzVHlwZWRBcnJheWAgd2l0aG91dCBOb2RlLmpzIG9wdGltaXphdGlvbnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgdHlwZWQgYXJyYXksIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSXNUeXBlZEFycmF5KHZhbHVlKSB7XG4gICAgICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJlxuICAgICAgICBpc0xlbmd0aCh2YWx1ZS5sZW5ndGgpICYmICEhdHlwZWRBcnJheVRhZ3NbYmFzZUdldFRhZyh2YWx1ZSldO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLml0ZXJhdGVlYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSBbdmFsdWU9Xy5pZGVudGl0eV0gVGhlIHZhbHVlIHRvIGNvbnZlcnQgdG8gYW4gaXRlcmF0ZWUuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBpdGVyYXRlZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSXRlcmF0ZWUodmFsdWUpIHtcbiAgICAgIC8vIERvbid0IHN0b3JlIHRoZSBgdHlwZW9mYCByZXN1bHQgaW4gYSB2YXJpYWJsZSB0byBhdm9pZCBhIEpJVCBidWcgaW4gU2FmYXJpIDkuXG4gICAgICAvLyBTZWUgaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTE1NjAzNCBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBpZGVudGl0eTtcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT0gJ29iamVjdCcpIHtcbiAgICAgICAgcmV0dXJuIGlzQXJyYXkodmFsdWUpXG4gICAgICAgICAgPyBiYXNlTWF0Y2hlc1Byb3BlcnR5KHZhbHVlWzBdLCB2YWx1ZVsxXSlcbiAgICAgICAgICA6IGJhc2VNYXRjaGVzKHZhbHVlKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBwcm9wZXJ0eSh2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ua2V5c2Agd2hpY2ggZG9lc24ndCB0cmVhdCBzcGFyc2UgYXJyYXlzIGFzIGRlbnNlLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlS2V5cyhvYmplY3QpIHtcbiAgICAgIGlmICghaXNQcm90b3R5cGUob2JqZWN0KSkge1xuICAgICAgICByZXR1cm4gbmF0aXZlS2V5cyhvYmplY3QpO1xuICAgICAgfVxuICAgICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgICAgZm9yICh2YXIga2V5IGluIE9iamVjdChvYmplY3QpKSB7XG4gICAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwga2V5KSAmJiBrZXkgIT0gJ2NvbnN0cnVjdG9yJykge1xuICAgICAgICAgIHJlc3VsdC5wdXNoKGtleSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ua2V5c0luYCB3aGljaCBkb2Vzbid0IHRyZWF0IHNwYXJzZSBhcnJheXMgYXMgZGVuc2UuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VLZXlzSW4ob2JqZWN0KSB7XG4gICAgICBpZiAoIWlzT2JqZWN0KG9iamVjdCkpIHtcbiAgICAgICAgcmV0dXJuIG5hdGl2ZUtleXNJbihvYmplY3QpO1xuICAgICAgfVxuICAgICAgdmFyIGlzUHJvdG8gPSBpc1Byb3RvdHlwZShvYmplY3QpLFxuICAgICAgICAgIHJlc3VsdCA9IFtdO1xuXG4gICAgICBmb3IgKHZhciBrZXkgaW4gb2JqZWN0KSB7XG4gICAgICAgIGlmICghKGtleSA9PSAnY29uc3RydWN0b3InICYmIChpc1Byb3RvIHx8ICFoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwga2V5KSkpKSB7XG4gICAgICAgICAgcmVzdWx0LnB1c2goa2V5KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5sdGAgd2hpY2ggZG9lc24ndCBjb2VyY2UgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgbGVzcyB0aGFuIGBvdGhlcmAsXG4gICAgICogIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlTHQodmFsdWUsIG90aGVyKSB7XG4gICAgICByZXR1cm4gdmFsdWUgPCBvdGhlcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5tYXBgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgbWFwcGVkIGFycmF5LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VNYXAoY29sbGVjdGlvbiwgaXRlcmF0ZWUpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIHJlc3VsdCA9IGlzQXJyYXlMaWtlKGNvbGxlY3Rpb24pID8gQXJyYXkoY29sbGVjdGlvbi5sZW5ndGgpIDogW107XG5cbiAgICAgIGJhc2VFYWNoKGNvbGxlY3Rpb24sIGZ1bmN0aW9uKHZhbHVlLCBrZXksIGNvbGxlY3Rpb24pIHtcbiAgICAgICAgcmVzdWx0WysraW5kZXhdID0gaXRlcmF0ZWUodmFsdWUsIGtleSwgY29sbGVjdGlvbik7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ubWF0Y2hlc2Agd2hpY2ggZG9lc24ndCBjbG9uZSBgc291cmNlYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IG9mIHByb3BlcnR5IHZhbHVlcyB0byBtYXRjaC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBzcGVjIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VNYXRjaGVzKHNvdXJjZSkge1xuICAgICAgdmFyIG1hdGNoRGF0YSA9IGdldE1hdGNoRGF0YShzb3VyY2UpO1xuICAgICAgaWYgKG1hdGNoRGF0YS5sZW5ndGggPT0gMSAmJiBtYXRjaERhdGFbMF1bMl0pIHtcbiAgICAgICAgcmV0dXJuIG1hdGNoZXNTdHJpY3RDb21wYXJhYmxlKG1hdGNoRGF0YVswXVswXSwgbWF0Y2hEYXRhWzBdWzFdKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmdW5jdGlvbihvYmplY3QpIHtcbiAgICAgICAgcmV0dXJuIG9iamVjdCA9PT0gc291cmNlIHx8IGJhc2VJc01hdGNoKG9iamVjdCwgc291cmNlLCBtYXRjaERhdGEpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5tYXRjaGVzUHJvcGVydHlgIHdoaWNoIGRvZXNuJ3QgY2xvbmUgYHNyY1ZhbHVlYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAgICAgKiBAcGFyYW0geyp9IHNyY1ZhbHVlIFRoZSB2YWx1ZSB0byBtYXRjaC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBzcGVjIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VNYXRjaGVzUHJvcGVydHkocGF0aCwgc3JjVmFsdWUpIHtcbiAgICAgIGlmIChpc0tleShwYXRoKSAmJiBpc1N0cmljdENvbXBhcmFibGUoc3JjVmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBtYXRjaGVzU3RyaWN0Q29tcGFyYWJsZSh0b0tleShwYXRoKSwgc3JjVmFsdWUpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCkge1xuICAgICAgICB2YXIgb2JqVmFsdWUgPSBnZXQob2JqZWN0LCBwYXRoKTtcbiAgICAgICAgcmV0dXJuIChvYmpWYWx1ZSA9PT0gdW5kZWZpbmVkICYmIG9ialZhbHVlID09PSBzcmNWYWx1ZSlcbiAgICAgICAgICA/IGhhc0luKG9iamVjdCwgcGF0aClcbiAgICAgICAgICA6IGJhc2VJc0VxdWFsKHNyY1ZhbHVlLCBvYmpWYWx1ZSwgQ09NUEFSRV9QQVJUSUFMX0ZMQUcgfCBDT01QQVJFX1VOT1JERVJFRF9GTEFHKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ubWVyZ2VgIHdpdGhvdXQgc3VwcG9ydCBmb3IgbXVsdGlwbGUgc291cmNlcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIHNvdXJjZSBvYmplY3QuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHNyY0luZGV4IFRoZSBpbmRleCBvZiBgc291cmNlYC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBtZXJnZWQgdmFsdWVzLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbc3RhY2tdIFRyYWNrcyB0cmF2ZXJzZWQgc291cmNlIHZhbHVlcyBhbmQgdGhlaXIgbWVyZ2VkXG4gICAgICogIGNvdW50ZXJwYXJ0cy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlTWVyZ2Uob2JqZWN0LCBzb3VyY2UsIHNyY0luZGV4LCBjdXN0b21pemVyLCBzdGFjaykge1xuICAgICAgaWYgKG9iamVjdCA9PT0gc291cmNlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGJhc2VGb3Ioc291cmNlLCBmdW5jdGlvbihzcmNWYWx1ZSwga2V5KSB7XG4gICAgICAgIHN0YWNrIHx8IChzdGFjayA9IG5ldyBTdGFjayk7XG4gICAgICAgIGlmIChpc09iamVjdChzcmNWYWx1ZSkpIHtcbiAgICAgICAgICBiYXNlTWVyZ2VEZWVwKG9iamVjdCwgc291cmNlLCBrZXksIHNyY0luZGV4LCBiYXNlTWVyZ2UsIGN1c3RvbWl6ZXIsIHN0YWNrKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICB2YXIgbmV3VmFsdWUgPSBjdXN0b21pemVyXG4gICAgICAgICAgICA/IGN1c3RvbWl6ZXIoc2FmZUdldChvYmplY3QsIGtleSksIHNyY1ZhbHVlLCAoa2V5ICsgJycpLCBvYmplY3QsIHNvdXJjZSwgc3RhY2spXG4gICAgICAgICAgICA6IHVuZGVmaW5lZDtcblxuICAgICAgICAgIGlmIChuZXdWYWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBuZXdWYWx1ZSA9IHNyY1ZhbHVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBhc3NpZ25NZXJnZVZhbHVlKG9iamVjdCwga2V5LCBuZXdWYWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0sIGtleXNJbik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlTWVyZ2VgIGZvciBhcnJheXMgYW5kIG9iamVjdHMgd2hpY2ggcGVyZm9ybXNcbiAgICAgKiBkZWVwIG1lcmdlcyBhbmQgdHJhY2tzIHRyYXZlcnNlZCBvYmplY3RzIGVuYWJsaW5nIG9iamVjdHMgd2l0aCBjaXJjdWxhclxuICAgICAqIHJlZmVyZW5jZXMgdG8gYmUgbWVyZ2VkLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgc291cmNlIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIG1lcmdlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzcmNJbmRleCBUaGUgaW5kZXggb2YgYHNvdXJjZWAuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gbWVyZ2VGdW5jIFRoZSBmdW5jdGlvbiB0byBtZXJnZSB2YWx1ZXMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgYXNzaWduZWQgdmFsdWVzLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbc3RhY2tdIFRyYWNrcyB0cmF2ZXJzZWQgc291cmNlIHZhbHVlcyBhbmQgdGhlaXIgbWVyZ2VkXG4gICAgICogIGNvdW50ZXJwYXJ0cy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlTWVyZ2VEZWVwKG9iamVjdCwgc291cmNlLCBrZXksIHNyY0luZGV4LCBtZXJnZUZ1bmMsIGN1c3RvbWl6ZXIsIHN0YWNrKSB7XG4gICAgICB2YXIgb2JqVmFsdWUgPSBzYWZlR2V0KG9iamVjdCwga2V5KSxcbiAgICAgICAgICBzcmNWYWx1ZSA9IHNhZmVHZXQoc291cmNlLCBrZXkpLFxuICAgICAgICAgIHN0YWNrZWQgPSBzdGFjay5nZXQoc3JjVmFsdWUpO1xuXG4gICAgICBpZiAoc3RhY2tlZCkge1xuICAgICAgICBhc3NpZ25NZXJnZVZhbHVlKG9iamVjdCwga2V5LCBzdGFja2VkKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdmFyIG5ld1ZhbHVlID0gY3VzdG9taXplclxuICAgICAgICA/IGN1c3RvbWl6ZXIob2JqVmFsdWUsIHNyY1ZhbHVlLCAoa2V5ICsgJycpLCBvYmplY3QsIHNvdXJjZSwgc3RhY2spXG4gICAgICAgIDogdW5kZWZpbmVkO1xuXG4gICAgICB2YXIgaXNDb21tb24gPSBuZXdWYWx1ZSA9PT0gdW5kZWZpbmVkO1xuXG4gICAgICBpZiAoaXNDb21tb24pIHtcbiAgICAgICAgdmFyIGlzQXJyID0gaXNBcnJheShzcmNWYWx1ZSksXG4gICAgICAgICAgICBpc0J1ZmYgPSAhaXNBcnIgJiYgaXNCdWZmZXIoc3JjVmFsdWUpLFxuICAgICAgICAgICAgaXNUeXBlZCA9ICFpc0FyciAmJiAhaXNCdWZmICYmIGlzVHlwZWRBcnJheShzcmNWYWx1ZSk7XG5cbiAgICAgICAgbmV3VmFsdWUgPSBzcmNWYWx1ZTtcbiAgICAgICAgaWYgKGlzQXJyIHx8IGlzQnVmZiB8fCBpc1R5cGVkKSB7XG4gICAgICAgICAgaWYgKGlzQXJyYXkob2JqVmFsdWUpKSB7XG4gICAgICAgICAgICBuZXdWYWx1ZSA9IG9ialZhbHVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBlbHNlIGlmIChpc0FycmF5TGlrZU9iamVjdChvYmpWYWx1ZSkpIHtcbiAgICAgICAgICAgIG5ld1ZhbHVlID0gY29weUFycmF5KG9ialZhbHVlKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSBpZiAoaXNCdWZmKSB7XG4gICAgICAgICAgICBpc0NvbW1vbiA9IGZhbHNlO1xuICAgICAgICAgICAgbmV3VmFsdWUgPSBjbG9uZUJ1ZmZlcihzcmNWYWx1ZSwgdHJ1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGVsc2UgaWYgKGlzVHlwZWQpIHtcbiAgICAgICAgICAgIGlzQ29tbW9uID0gZmFsc2U7XG4gICAgICAgICAgICBuZXdWYWx1ZSA9IGNsb25lVHlwZWRBcnJheShzcmNWYWx1ZSwgdHJ1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgbmV3VmFsdWUgPSBbXTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaXNQbGFpbk9iamVjdChzcmNWYWx1ZSkgfHwgaXNBcmd1bWVudHMoc3JjVmFsdWUpKSB7XG4gICAgICAgICAgbmV3VmFsdWUgPSBvYmpWYWx1ZTtcbiAgICAgICAgICBpZiAoaXNBcmd1bWVudHMob2JqVmFsdWUpKSB7XG4gICAgICAgICAgICBuZXdWYWx1ZSA9IHRvUGxhaW5PYmplY3Qob2JqVmFsdWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBlbHNlIGlmICghaXNPYmplY3Qob2JqVmFsdWUpIHx8IGlzRnVuY3Rpb24ob2JqVmFsdWUpKSB7XG4gICAgICAgICAgICBuZXdWYWx1ZSA9IGluaXRDbG9uZU9iamVjdChzcmNWYWx1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIGlzQ29tbW9uID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChpc0NvbW1vbikge1xuICAgICAgICAvLyBSZWN1cnNpdmVseSBtZXJnZSBvYmplY3RzIGFuZCBhcnJheXMgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKS5cbiAgICAgICAgc3RhY2suc2V0KHNyY1ZhbHVlLCBuZXdWYWx1ZSk7XG4gICAgICAgIG1lcmdlRnVuYyhuZXdWYWx1ZSwgc3JjVmFsdWUsIHNyY0luZGV4LCBjdXN0b21pemVyLCBzdGFjayk7XG4gICAgICAgIHN0YWNrWydkZWxldGUnXShzcmNWYWx1ZSk7XG4gICAgICB9XG4gICAgICBhc3NpZ25NZXJnZVZhbHVlKG9iamVjdCwga2V5LCBuZXdWYWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ubnRoYCB3aGljaCBkb2Vzbid0IGNvZXJjZSBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbiBUaGUgaW5kZXggb2YgdGhlIGVsZW1lbnQgdG8gcmV0dXJuLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBudGggZWxlbWVudCBvZiBgYXJyYXlgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VOdGgoYXJyYXksIG4pIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBuICs9IG4gPCAwID8gbGVuZ3RoIDogMDtcbiAgICAgIHJldHVybiBpc0luZGV4KG4sIGxlbmd0aCkgPyBhcnJheVtuXSA6IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5vcmRlckJ5YCB3aXRob3V0IHBhcmFtIGd1YXJkcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb25bXXxPYmplY3RbXXxzdHJpbmdbXX0gaXRlcmF0ZWVzIFRoZSBpdGVyYXRlZXMgdG8gc29ydCBieS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ1tdfSBvcmRlcnMgVGhlIHNvcnQgb3JkZXJzIG9mIGBpdGVyYXRlZXNgLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IHNvcnRlZCBhcnJheS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlT3JkZXJCeShjb2xsZWN0aW9uLCBpdGVyYXRlZXMsIG9yZGVycykge1xuICAgICAgdmFyIGluZGV4ID0gLTE7XG4gICAgICBpdGVyYXRlZXMgPSBhcnJheU1hcChpdGVyYXRlZXMubGVuZ3RoID8gaXRlcmF0ZWVzIDogW2lkZW50aXR5XSwgYmFzZVVuYXJ5KGdldEl0ZXJhdGVlKCkpKTtcblxuICAgICAgdmFyIHJlc3VsdCA9IGJhc2VNYXAoY29sbGVjdGlvbiwgZnVuY3Rpb24odmFsdWUsIGtleSwgY29sbGVjdGlvbikge1xuICAgICAgICB2YXIgY3JpdGVyaWEgPSBhcnJheU1hcChpdGVyYXRlZXMsIGZ1bmN0aW9uKGl0ZXJhdGVlKSB7XG4gICAgICAgICAgcmV0dXJuIGl0ZXJhdGVlKHZhbHVlKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB7ICdjcml0ZXJpYSc6IGNyaXRlcmlhLCAnaW5kZXgnOiArK2luZGV4LCAndmFsdWUnOiB2YWx1ZSB9O1xuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiBiYXNlU29ydEJ5KHJlc3VsdCwgZnVuY3Rpb24ob2JqZWN0LCBvdGhlcikge1xuICAgICAgICByZXR1cm4gY29tcGFyZU11bHRpcGxlKG9iamVjdCwgb3RoZXIsIG9yZGVycyk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5waWNrYCB3aXRob3V0IHN1cHBvcnQgZm9yIGluZGl2aWR1YWxcbiAgICAgKiBwcm9wZXJ0eSBpZGVudGlmaWVycy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgc291cmNlIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ1tdfSBwYXRocyBUaGUgcHJvcGVydHkgcGF0aHMgdG8gcGljay5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgb2JqZWN0LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VQaWNrKG9iamVjdCwgcGF0aHMpIHtcbiAgICAgIHJldHVybiBiYXNlUGlja0J5KG9iamVjdCwgcGF0aHMsIGZ1bmN0aW9uKHZhbHVlLCBwYXRoKSB7XG4gICAgICAgIHJldHVybiBoYXNJbihvYmplY3QsIHBhdGgpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgIGBfLnBpY2tCeWAgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBzb3VyY2Ugb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nW119IHBhdGhzIFRoZSBwcm9wZXJ0eSBwYXRocyB0byBwaWNrLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgcHJvcGVydHkuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG9iamVjdC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlUGlja0J5KG9iamVjdCwgcGF0aHMsIHByZWRpY2F0ZSkge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gcGF0aHMubGVuZ3RoLFxuICAgICAgICAgIHJlc3VsdCA9IHt9O1xuXG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgcGF0aCA9IHBhdGhzW2luZGV4XSxcbiAgICAgICAgICAgIHZhbHVlID0gYmFzZUdldChvYmplY3QsIHBhdGgpO1xuXG4gICAgICAgIGlmIChwcmVkaWNhdGUodmFsdWUsIHBhdGgpKSB7XG4gICAgICAgICAgYmFzZVNldChyZXN1bHQsIGNhc3RQYXRoKHBhdGgsIG9iamVjdCksIHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VQcm9wZXJ0eWAgd2hpY2ggc3VwcG9ydHMgZGVlcCBwYXRocy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBhY2Nlc3NvciBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlUHJvcGVydHlEZWVwKHBhdGgpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihvYmplY3QpIHtcbiAgICAgICAgcmV0dXJuIGJhc2VHZXQob2JqZWN0LCBwYXRoKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ucHVsbEFsbEJ5YCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlXG4gICAgICogc2hvcnRoYW5kcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSB2YWx1ZXMgVGhlIHZhbHVlcyB0byByZW1vdmUuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlXSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY29tcGFyYXRvcl0gVGhlIGNvbXBhcmF0b3IgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlUHVsbEFsbChhcnJheSwgdmFsdWVzLCBpdGVyYXRlZSwgY29tcGFyYXRvcikge1xuICAgICAgdmFyIGluZGV4T2YgPSBjb21wYXJhdG9yID8gYmFzZUluZGV4T2ZXaXRoIDogYmFzZUluZGV4T2YsXG4gICAgICAgICAgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSB2YWx1ZXMubGVuZ3RoLFxuICAgICAgICAgIHNlZW4gPSBhcnJheTtcblxuICAgICAgaWYgKGFycmF5ID09PSB2YWx1ZXMpIHtcbiAgICAgICAgdmFsdWVzID0gY29weUFycmF5KHZhbHVlcyk7XG4gICAgICB9XG4gICAgICBpZiAoaXRlcmF0ZWUpIHtcbiAgICAgICAgc2VlbiA9IGFycmF5TWFwKGFycmF5LCBiYXNlVW5hcnkoaXRlcmF0ZWUpKTtcbiAgICAgIH1cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciBmcm9tSW5kZXggPSAwLFxuICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZXNbaW5kZXhdLFxuICAgICAgICAgICAgY29tcHV0ZWQgPSBpdGVyYXRlZSA/IGl0ZXJhdGVlKHZhbHVlKSA6IHZhbHVlO1xuXG4gICAgICAgIHdoaWxlICgoZnJvbUluZGV4ID0gaW5kZXhPZihzZWVuLCBjb21wdXRlZCwgZnJvbUluZGV4LCBjb21wYXJhdG9yKSkgPiAtMSkge1xuICAgICAgICAgIGlmIChzZWVuICE9PSBhcnJheSkge1xuICAgICAgICAgICAgc3BsaWNlLmNhbGwoc2VlbiwgZnJvbUluZGV4LCAxKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgc3BsaWNlLmNhbGwoYXJyYXksIGZyb21JbmRleCwgMSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBhcnJheTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5wdWxsQXRgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaW5kaXZpZHVhbFxuICAgICAqIGluZGV4ZXMgb3IgY2FwdHVyaW5nIHRoZSByZW1vdmVkIGVsZW1lbnRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyW119IGluZGV4ZXMgVGhlIGluZGV4ZXMgb2YgZWxlbWVudHMgdG8gcmVtb3ZlLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VQdWxsQXQoYXJyYXksIGluZGV4ZXMpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA/IGluZGV4ZXMubGVuZ3RoIDogMCxcbiAgICAgICAgICBsYXN0SW5kZXggPSBsZW5ndGggLSAxO1xuXG4gICAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgICAgdmFyIGluZGV4ID0gaW5kZXhlc1tsZW5ndGhdO1xuICAgICAgICBpZiAobGVuZ3RoID09IGxhc3RJbmRleCB8fCBpbmRleCAhPT0gcHJldmlvdXMpIHtcbiAgICAgICAgICB2YXIgcHJldmlvdXMgPSBpbmRleDtcbiAgICAgICAgICBpZiAoaXNJbmRleChpbmRleCkpIHtcbiAgICAgICAgICAgIHNwbGljZS5jYWxsKGFycmF5LCBpbmRleCwgMSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGJhc2VVbnNldChhcnJheSwgaW5kZXgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGFycmF5O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnJhbmRvbWAgd2l0aG91dCBzdXBwb3J0IGZvciByZXR1cm5pbmdcbiAgICAgKiBmbG9hdGluZy1wb2ludCBudW1iZXJzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbG93ZXIgVGhlIGxvd2VyIGJvdW5kLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB1cHBlciBUaGUgdXBwZXIgYm91bmQuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgcmFuZG9tIG51bWJlci5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlUmFuZG9tKGxvd2VyLCB1cHBlcikge1xuICAgICAgcmV0dXJuIGxvd2VyICsgbmF0aXZlRmxvb3IobmF0aXZlUmFuZG9tKCkgKiAodXBwZXIgLSBsb3dlciArIDEpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5yYW5nZWAgYW5kIGBfLnJhbmdlUmlnaHRgIHdoaWNoIGRvZXNuJ3RcbiAgICAgKiBjb2VyY2UgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gc3RhcnQgVGhlIHN0YXJ0IG9mIHRoZSByYW5nZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gZW5kIFRoZSBlbmQgb2YgdGhlIHJhbmdlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzdGVwIFRoZSB2YWx1ZSB0byBpbmNyZW1lbnQgb3IgZGVjcmVtZW50IGJ5LlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2Zyb21SaWdodF0gU3BlY2lmeSBpdGVyYXRpbmcgZnJvbSByaWdodCB0byBsZWZ0LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgcmFuZ2Ugb2YgbnVtYmVycy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlUmFuZ2Uoc3RhcnQsIGVuZCwgc3RlcCwgZnJvbVJpZ2h0KSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBuYXRpdmVNYXgobmF0aXZlQ2VpbCgoZW5kIC0gc3RhcnQpIC8gKHN0ZXAgfHwgMSkpLCAwKSxcbiAgICAgICAgICByZXN1bHQgPSBBcnJheShsZW5ndGgpO1xuXG4gICAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgICAgcmVzdWx0W2Zyb21SaWdodCA/IGxlbmd0aCA6ICsraW5kZXhdID0gc3RhcnQ7XG4gICAgICAgIHN0YXJ0ICs9IHN0ZXA7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnJlcGVhdGAgd2hpY2ggZG9lc24ndCBjb2VyY2UgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgdG8gcmVwZWF0LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBuIFRoZSBudW1iZXIgb2YgdGltZXMgdG8gcmVwZWF0IHRoZSBzdHJpbmcuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgcmVwZWF0ZWQgc3RyaW5nLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VSZXBlYXQoc3RyaW5nLCBuKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gJyc7XG4gICAgICBpZiAoIXN0cmluZyB8fCBuIDwgMSB8fCBuID4gTUFYX1NBRkVfSU5URUdFUikge1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfVxuICAgICAgLy8gTGV2ZXJhZ2UgdGhlIGV4cG9uZW50aWF0aW9uIGJ5IHNxdWFyaW5nIGFsZ29yaXRobSBmb3IgYSBmYXN0ZXIgcmVwZWF0LlxuICAgICAgLy8gU2VlIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0V4cG9uZW50aWF0aW9uX2J5X3NxdWFyaW5nIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICBkbyB7XG4gICAgICAgIGlmIChuICUgMikge1xuICAgICAgICAgIHJlc3VsdCArPSBzdHJpbmc7XG4gICAgICAgIH1cbiAgICAgICAgbiA9IG5hdGl2ZUZsb29yKG4gLyAyKTtcbiAgICAgICAgaWYgKG4pIHtcbiAgICAgICAgICBzdHJpbmcgKz0gc3RyaW5nO1xuICAgICAgICB9XG4gICAgICB9IHdoaWxlIChuKTtcblxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5yZXN0YCB3aGljaCBkb2Vzbid0IHZhbGlkYXRlIG9yIGNvZXJjZSBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGFwcGx5IGEgcmVzdCBwYXJhbWV0ZXIgdG8uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzdGFydD1mdW5jLmxlbmd0aC0xXSBUaGUgc3RhcnQgcG9zaXRpb24gb2YgdGhlIHJlc3QgcGFyYW1ldGVyLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VSZXN0KGZ1bmMsIHN0YXJ0KSB7XG4gICAgICByZXR1cm4gc2V0VG9TdHJpbmcob3ZlclJlc3QoZnVuYywgc3RhcnQsIGlkZW50aXR5KSwgZnVuYyArICcnKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5zYW1wbGVgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBzYW1wbGUuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHJhbmRvbSBlbGVtZW50LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VTYW1wbGUoY29sbGVjdGlvbikge1xuICAgICAgcmV0dXJuIGFycmF5U2FtcGxlKHZhbHVlcyhjb2xsZWN0aW9uKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uc2FtcGxlU2l6ZWAgd2l0aG91dCBwYXJhbSBndWFyZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIHNhbXBsZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbiBUaGUgbnVtYmVyIG9mIGVsZW1lbnRzIHRvIHNhbXBsZS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHJhbmRvbSBlbGVtZW50cy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlU2FtcGxlU2l6ZShjb2xsZWN0aW9uLCBuKSB7XG4gICAgICB2YXIgYXJyYXkgPSB2YWx1ZXMoY29sbGVjdGlvbik7XG4gICAgICByZXR1cm4gc2h1ZmZsZVNlbGYoYXJyYXksIGJhc2VDbGFtcChuLCAwLCBhcnJheS5sZW5ndGgpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5zZXRgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBzZXQuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIHBhdGggY3JlYXRpb24uXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlU2V0KG9iamVjdCwgcGF0aCwgdmFsdWUsIGN1c3RvbWl6ZXIpIHtcbiAgICAgIGlmICghaXNPYmplY3Qob2JqZWN0KSkge1xuICAgICAgICByZXR1cm4gb2JqZWN0O1xuICAgICAgfVxuICAgICAgcGF0aCA9IGNhc3RQYXRoKHBhdGgsIG9iamVjdCk7XG5cbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IHBhdGgubGVuZ3RoLFxuICAgICAgICAgIGxhc3RJbmRleCA9IGxlbmd0aCAtIDEsXG4gICAgICAgICAgbmVzdGVkID0gb2JqZWN0O1xuXG4gICAgICB3aGlsZSAobmVzdGVkICE9IG51bGwgJiYgKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIga2V5ID0gdG9LZXkocGF0aFtpbmRleF0pLFxuICAgICAgICAgICAgbmV3VmFsdWUgPSB2YWx1ZTtcblxuICAgICAgICBpZiAoaW5kZXggIT0gbGFzdEluZGV4KSB7XG4gICAgICAgICAgdmFyIG9ialZhbHVlID0gbmVzdGVkW2tleV07XG4gICAgICAgICAgbmV3VmFsdWUgPSBjdXN0b21pemVyID8gY3VzdG9taXplcihvYmpWYWx1ZSwga2V5LCBuZXN0ZWQpIDogdW5kZWZpbmVkO1xuICAgICAgICAgIGlmIChuZXdWYWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBuZXdWYWx1ZSA9IGlzT2JqZWN0KG9ialZhbHVlKVxuICAgICAgICAgICAgICA/IG9ialZhbHVlXG4gICAgICAgICAgICAgIDogKGlzSW5kZXgocGF0aFtpbmRleCArIDFdKSA/IFtdIDoge30pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBhc3NpZ25WYWx1ZShuZXN0ZWQsIGtleSwgbmV3VmFsdWUpO1xuICAgICAgICBuZXN0ZWQgPSBuZXN0ZWRba2V5XTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYHNldERhdGFgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaG90IGxvb3Agc2hvcnRpbmcuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGFzc29jaWF0ZSBtZXRhZGF0YSB3aXRoLlxuICAgICAqIEBwYXJhbSB7Kn0gZGF0YSBUaGUgbWV0YWRhdGEuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIGBmdW5jYC5cbiAgICAgKi9cbiAgICB2YXIgYmFzZVNldERhdGEgPSAhbWV0YU1hcCA/IGlkZW50aXR5IDogZnVuY3Rpb24oZnVuYywgZGF0YSkge1xuICAgICAgbWV0YU1hcC5zZXQoZnVuYywgZGF0YSk7XG4gICAgICByZXR1cm4gZnVuYztcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYHNldFRvU3RyaW5nYCB3aXRob3V0IHN1cHBvcnQgZm9yIGhvdCBsb29wIHNob3J0aW5nLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gc3RyaW5nIFRoZSBgdG9TdHJpbmdgIHJlc3VsdC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgYGZ1bmNgLlxuICAgICAqL1xuICAgIHZhciBiYXNlU2V0VG9TdHJpbmcgPSAhZGVmaW5lUHJvcGVydHkgPyBpZGVudGl0eSA6IGZ1bmN0aW9uKGZ1bmMsIHN0cmluZykge1xuICAgICAgcmV0dXJuIGRlZmluZVByb3BlcnR5KGZ1bmMsICd0b1N0cmluZycsIHtcbiAgICAgICAgJ2NvbmZpZ3VyYWJsZSc6IHRydWUsXG4gICAgICAgICdlbnVtZXJhYmxlJzogZmFsc2UsXG4gICAgICAgICd2YWx1ZSc6IGNvbnN0YW50KHN0cmluZyksXG4gICAgICAgICd3cml0YWJsZSc6IHRydWVcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5zaHVmZmxlYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gc2h1ZmZsZS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBzaHVmZmxlZCBhcnJheS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlU2h1ZmZsZShjb2xsZWN0aW9uKSB7XG4gICAgICByZXR1cm4gc2h1ZmZsZVNlbGYodmFsdWVzKGNvbGxlY3Rpb24pKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5zbGljZWAgd2l0aG91dCBhbiBpdGVyYXRlZSBjYWxsIGd1YXJkLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gc2xpY2UuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzdGFydD0wXSBUaGUgc3RhcnQgcG9zaXRpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtlbmQ9YXJyYXkubGVuZ3RoXSBUaGUgZW5kIHBvc2l0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgc2xpY2Ugb2YgYGFycmF5YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlU2xpY2UoYXJyYXksIHN0YXJ0LCBlbmQpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcblxuICAgICAgaWYgKHN0YXJ0IDwgMCkge1xuICAgICAgICBzdGFydCA9IC1zdGFydCA+IGxlbmd0aCA/IDAgOiAobGVuZ3RoICsgc3RhcnQpO1xuICAgICAgfVxuICAgICAgZW5kID0gZW5kID4gbGVuZ3RoID8gbGVuZ3RoIDogZW5kO1xuICAgICAgaWYgKGVuZCA8IDApIHtcbiAgICAgICAgZW5kICs9IGxlbmd0aDtcbiAgICAgIH1cbiAgICAgIGxlbmd0aCA9IHN0YXJ0ID4gZW5kID8gMCA6ICgoZW5kIC0gc3RhcnQpID4+PiAwKTtcbiAgICAgIHN0YXJ0ID4+Pj0gMDtcblxuICAgICAgdmFyIHJlc3VsdCA9IEFycmF5KGxlbmd0aCk7XG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICByZXN1bHRbaW5kZXhdID0gYXJyYXlbaW5kZXggKyBzdGFydF07XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnNvbWVgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbnkgZWxlbWVudCBwYXNzZXMgdGhlIHByZWRpY2F0ZSBjaGVjayxcbiAgICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VTb21lKGNvbGxlY3Rpb24sIHByZWRpY2F0ZSkge1xuICAgICAgdmFyIHJlc3VsdDtcblxuICAgICAgYmFzZUVhY2goY29sbGVjdGlvbiwgZnVuY3Rpb24odmFsdWUsIGluZGV4LCBjb2xsZWN0aW9uKSB7XG4gICAgICAgIHJlc3VsdCA9IHByZWRpY2F0ZSh2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pO1xuICAgICAgICByZXR1cm4gIXJlc3VsdDtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuICEhcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnNvcnRlZEluZGV4YCBhbmQgYF8uc29ydGVkTGFzdEluZGV4YCB3aGljaFxuICAgICAqIHBlcmZvcm1zIGEgYmluYXJ5IHNlYXJjaCBvZiBgYXJyYXlgIHRvIGRldGVybWluZSB0aGUgaW5kZXggYXQgd2hpY2ggYHZhbHVlYFxuICAgICAqIHNob3VsZCBiZSBpbnNlcnRlZCBpbnRvIGBhcnJheWAgaW4gb3JkZXIgdG8gbWFpbnRhaW4gaXRzIHNvcnQgb3JkZXIuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBzb3J0ZWQgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBldmFsdWF0ZS5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtyZXRIaWdoZXN0XSBTcGVjaWZ5IHJldHVybmluZyB0aGUgaGlnaGVzdCBxdWFsaWZpZWQgaW5kZXguXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggYXQgd2hpY2ggYHZhbHVlYCBzaG91bGQgYmUgaW5zZXJ0ZWRcbiAgICAgKiAgaW50byBgYXJyYXlgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VTb3J0ZWRJbmRleChhcnJheSwgdmFsdWUsIHJldEhpZ2hlc3QpIHtcbiAgICAgIHZhciBsb3cgPSAwLFxuICAgICAgICAgIGhpZ2ggPSBhcnJheSA9PSBudWxsID8gbG93IDogYXJyYXkubGVuZ3RoO1xuXG4gICAgICBpZiAodHlwZW9mIHZhbHVlID09ICdudW1iZXInICYmIHZhbHVlID09PSB2YWx1ZSAmJiBoaWdoIDw9IEhBTEZfTUFYX0FSUkFZX0xFTkdUSCkge1xuICAgICAgICB3aGlsZSAobG93IDwgaGlnaCkge1xuICAgICAgICAgIHZhciBtaWQgPSAobG93ICsgaGlnaCkgPj4+IDEsXG4gICAgICAgICAgICAgIGNvbXB1dGVkID0gYXJyYXlbbWlkXTtcblxuICAgICAgICAgIGlmIChjb21wdXRlZCAhPT0gbnVsbCAmJiAhaXNTeW1ib2woY29tcHV0ZWQpICYmXG4gICAgICAgICAgICAgIChyZXRIaWdoZXN0ID8gKGNvbXB1dGVkIDw9IHZhbHVlKSA6IChjb21wdXRlZCA8IHZhbHVlKSkpIHtcbiAgICAgICAgICAgIGxvdyA9IG1pZCArIDE7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGhpZ2ggPSBtaWQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBoaWdoO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VTb3J0ZWRJbmRleEJ5KGFycmF5LCB2YWx1ZSwgaWRlbnRpdHksIHJldEhpZ2hlc3QpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnNvcnRlZEluZGV4QnlgIGFuZCBgXy5zb3J0ZWRMYXN0SW5kZXhCeWBcbiAgICAgKiB3aGljaCBpbnZva2VzIGBpdGVyYXRlZWAgZm9yIGB2YWx1ZWAgYW5kIGVhY2ggZWxlbWVudCBvZiBgYXJyYXlgIHRvIGNvbXB1dGVcbiAgICAgKiB0aGVpciBzb3J0IHJhbmtpbmcuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OyAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgc29ydGVkIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gZXZhbHVhdGUuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbcmV0SGlnaGVzdF0gU3BlY2lmeSByZXR1cm5pbmcgdGhlIGhpZ2hlc3QgcXVhbGlmaWVkIGluZGV4LlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IGF0IHdoaWNoIGB2YWx1ZWAgc2hvdWxkIGJlIGluc2VydGVkXG4gICAgICogIGludG8gYGFycmF5YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlU29ydGVkSW5kZXhCeShhcnJheSwgdmFsdWUsIGl0ZXJhdGVlLCByZXRIaWdoZXN0KSB7XG4gICAgICB2YWx1ZSA9IGl0ZXJhdGVlKHZhbHVlKTtcblxuICAgICAgdmFyIGxvdyA9IDAsXG4gICAgICAgICAgaGlnaCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoLFxuICAgICAgICAgIHZhbElzTmFOID0gdmFsdWUgIT09IHZhbHVlLFxuICAgICAgICAgIHZhbElzTnVsbCA9IHZhbHVlID09PSBudWxsLFxuICAgICAgICAgIHZhbElzU3ltYm9sID0gaXNTeW1ib2wodmFsdWUpLFxuICAgICAgICAgIHZhbElzVW5kZWZpbmVkID0gdmFsdWUgPT09IHVuZGVmaW5lZDtcblxuICAgICAgd2hpbGUgKGxvdyA8IGhpZ2gpIHtcbiAgICAgICAgdmFyIG1pZCA9IG5hdGl2ZUZsb29yKChsb3cgKyBoaWdoKSAvIDIpLFxuICAgICAgICAgICAgY29tcHV0ZWQgPSBpdGVyYXRlZShhcnJheVttaWRdKSxcbiAgICAgICAgICAgIG90aElzRGVmaW5lZCA9IGNvbXB1dGVkICE9PSB1bmRlZmluZWQsXG4gICAgICAgICAgICBvdGhJc051bGwgPSBjb21wdXRlZCA9PT0gbnVsbCxcbiAgICAgICAgICAgIG90aElzUmVmbGV4aXZlID0gY29tcHV0ZWQgPT09IGNvbXB1dGVkLFxuICAgICAgICAgICAgb3RoSXNTeW1ib2wgPSBpc1N5bWJvbChjb21wdXRlZCk7XG5cbiAgICAgICAgaWYgKHZhbElzTmFOKSB7XG4gICAgICAgICAgdmFyIHNldExvdyA9IHJldEhpZ2hlc3QgfHwgb3RoSXNSZWZsZXhpdmU7XG4gICAgICAgIH0gZWxzZSBpZiAodmFsSXNVbmRlZmluZWQpIHtcbiAgICAgICAgICBzZXRMb3cgPSBvdGhJc1JlZmxleGl2ZSAmJiAocmV0SGlnaGVzdCB8fCBvdGhJc0RlZmluZWQpO1xuICAgICAgICB9IGVsc2UgaWYgKHZhbElzTnVsbCkge1xuICAgICAgICAgIHNldExvdyA9IG90aElzUmVmbGV4aXZlICYmIG90aElzRGVmaW5lZCAmJiAocmV0SGlnaGVzdCB8fCAhb3RoSXNOdWxsKTtcbiAgICAgICAgfSBlbHNlIGlmICh2YWxJc1N5bWJvbCkge1xuICAgICAgICAgIHNldExvdyA9IG90aElzUmVmbGV4aXZlICYmIG90aElzRGVmaW5lZCAmJiAhb3RoSXNOdWxsICYmIChyZXRIaWdoZXN0IHx8ICFvdGhJc1N5bWJvbCk7XG4gICAgICAgIH0gZWxzZSBpZiAob3RoSXNOdWxsIHx8IG90aElzU3ltYm9sKSB7XG4gICAgICAgICAgc2V0TG93ID0gZmFsc2U7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc2V0TG93ID0gcmV0SGlnaGVzdCA/IChjb21wdXRlZCA8PSB2YWx1ZSkgOiAoY29tcHV0ZWQgPCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNldExvdykge1xuICAgICAgICAgIGxvdyA9IG1pZCArIDE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaGlnaCA9IG1pZDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIG5hdGl2ZU1pbihoaWdoLCBNQVhfQVJSQVlfSU5ERVgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnNvcnRlZFVuaXFgIGFuZCBgXy5zb3J0ZWRVbmlxQnlgIHdpdGhvdXRcbiAgICAgKiBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWVdIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGR1cGxpY2F0ZSBmcmVlIGFycmF5LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VTb3J0ZWRVbmlxKGFycmF5LCBpdGVyYXRlZSkge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gYXJyYXkubGVuZ3RoLFxuICAgICAgICAgIHJlc0luZGV4ID0gMCxcbiAgICAgICAgICByZXN1bHQgPSBbXTtcblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gYXJyYXlbaW5kZXhdLFxuICAgICAgICAgICAgY29tcHV0ZWQgPSBpdGVyYXRlZSA/IGl0ZXJhdGVlKHZhbHVlKSA6IHZhbHVlO1xuXG4gICAgICAgIGlmICghaW5kZXggfHwgIWVxKGNvbXB1dGVkLCBzZWVuKSkge1xuICAgICAgICAgIHZhciBzZWVuID0gY29tcHV0ZWQ7XG4gICAgICAgICAgcmVzdWx0W3Jlc0luZGV4KytdID0gdmFsdWUgPT09IDAgPyAwIDogdmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udG9OdW1iZXJgIHdoaWNoIGRvZXNuJ3QgZW5zdXJlIGNvcnJlY3RcbiAgICAgKiBjb252ZXJzaW9ucyBvZiBiaW5hcnksIGhleGFkZWNpbWFsLCBvciBvY3RhbCBzdHJpbmcgdmFsdWVzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBwcm9jZXNzLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIG51bWJlci5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlVG9OdW1iZXIodmFsdWUpIHtcbiAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT0gJ251bWJlcicpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgfVxuICAgICAgaWYgKGlzU3ltYm9sKHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gTkFOO1xuICAgICAgfVxuICAgICAgcmV0dXJuICt2YWx1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy50b1N0cmluZ2Agd2hpY2ggZG9lc24ndCBjb252ZXJ0IG51bGxpc2hcbiAgICAgKiB2YWx1ZXMgdG8gZW1wdHkgc3RyaW5ncy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcHJvY2Vzcy5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBzdHJpbmcuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVRvU3RyaW5nKHZhbHVlKSB7XG4gICAgICAvLyBFeGl0IGVhcmx5IGZvciBzdHJpbmdzIHRvIGF2b2lkIGEgcGVyZm9ybWFuY2UgaGl0IGluIHNvbWUgZW52aXJvbm1lbnRzLlxuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnc3RyaW5nJykge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9XG4gICAgICBpZiAoaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgLy8gUmVjdXJzaXZlbHkgY29udmVydCB2YWx1ZXMgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKS5cbiAgICAgICAgcmV0dXJuIGFycmF5TWFwKHZhbHVlLCBiYXNlVG9TdHJpbmcpICsgJyc7XG4gICAgICB9XG4gICAgICBpZiAoaXNTeW1ib2wodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBzeW1ib2xUb1N0cmluZyA/IHN5bWJvbFRvU3RyaW5nLmNhbGwodmFsdWUpIDogJyc7XG4gICAgICB9XG4gICAgICB2YXIgcmVzdWx0ID0gKHZhbHVlICsgJycpO1xuICAgICAgcmV0dXJuIChyZXN1bHQgPT0gJzAnICYmICgxIC8gdmFsdWUpID09IC1JTkZJTklUWSkgPyAnLTAnIDogcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnVuaXFCeWAgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWVdIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjb21wYXJhdG9yXSBUaGUgY29tcGFyYXRvciBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGR1cGxpY2F0ZSBmcmVlIGFycmF5LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VVbmlxKGFycmF5LCBpdGVyYXRlZSwgY29tcGFyYXRvcikge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgaW5jbHVkZXMgPSBhcnJheUluY2x1ZGVzLFxuICAgICAgICAgIGxlbmd0aCA9IGFycmF5Lmxlbmd0aCxcbiAgICAgICAgICBpc0NvbW1vbiA9IHRydWUsXG4gICAgICAgICAgcmVzdWx0ID0gW10sXG4gICAgICAgICAgc2VlbiA9IHJlc3VsdDtcblxuICAgICAgaWYgKGNvbXBhcmF0b3IpIHtcbiAgICAgICAgaXNDb21tb24gPSBmYWxzZTtcbiAgICAgICAgaW5jbHVkZXMgPSBhcnJheUluY2x1ZGVzV2l0aDtcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKGxlbmd0aCA+PSBMQVJHRV9BUlJBWV9TSVpFKSB7XG4gICAgICAgIHZhciBzZXQgPSBpdGVyYXRlZSA/IG51bGwgOiBjcmVhdGVTZXQoYXJyYXkpO1xuICAgICAgICBpZiAoc2V0KSB7XG4gICAgICAgICAgcmV0dXJuIHNldFRvQXJyYXkoc2V0KTtcbiAgICAgICAgfVxuICAgICAgICBpc0NvbW1vbiA9IGZhbHNlO1xuICAgICAgICBpbmNsdWRlcyA9IGNhY2hlSGFzO1xuICAgICAgICBzZWVuID0gbmV3IFNldENhY2hlO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIHNlZW4gPSBpdGVyYXRlZSA/IFtdIDogcmVzdWx0O1xuICAgICAgfVxuICAgICAgb3V0ZXI6XG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgdmFsdWUgPSBhcnJheVtpbmRleF0sXG4gICAgICAgICAgICBjb21wdXRlZCA9IGl0ZXJhdGVlID8gaXRlcmF0ZWUodmFsdWUpIDogdmFsdWU7XG5cbiAgICAgICAgdmFsdWUgPSAoY29tcGFyYXRvciB8fCB2YWx1ZSAhPT0gMCkgPyB2YWx1ZSA6IDA7XG4gICAgICAgIGlmIChpc0NvbW1vbiAmJiBjb21wdXRlZCA9PT0gY29tcHV0ZWQpIHtcbiAgICAgICAgICB2YXIgc2VlbkluZGV4ID0gc2Vlbi5sZW5ndGg7XG4gICAgICAgICAgd2hpbGUgKHNlZW5JbmRleC0tKSB7XG4gICAgICAgICAgICBpZiAoc2VlbltzZWVuSW5kZXhdID09PSBjb21wdXRlZCkge1xuICAgICAgICAgICAgICBjb250aW51ZSBvdXRlcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGl0ZXJhdGVlKSB7XG4gICAgICAgICAgICBzZWVuLnB1c2goY29tcHV0ZWQpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXN1bHQucHVzaCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoIWluY2x1ZGVzKHNlZW4sIGNvbXB1dGVkLCBjb21wYXJhdG9yKSkge1xuICAgICAgICAgIGlmIChzZWVuICE9PSByZXN1bHQpIHtcbiAgICAgICAgICAgIHNlZW4ucHVzaChjb21wdXRlZCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJlc3VsdC5wdXNoKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy51bnNldGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHByb3BlcnR5IHBhdGggdG8gdW5zZXQuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBwcm9wZXJ0eSBpcyBkZWxldGVkLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVVuc2V0KG9iamVjdCwgcGF0aCkge1xuICAgICAgcGF0aCA9IGNhc3RQYXRoKHBhdGgsIG9iamVjdCk7XG4gICAgICBvYmplY3QgPSBwYXJlbnQob2JqZWN0LCBwYXRoKTtcbiAgICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCB8fCBkZWxldGUgb2JqZWN0W3RvS2V5KGxhc3QocGF0aCkpXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy51cGRhdGVgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byB1cGRhdGUuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gdXBkYXRlciBUaGUgZnVuY3Rpb24gdG8gcHJvZHVjZSB0aGUgdXBkYXRlZCB2YWx1ZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBwYXRoIGNyZWF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVVwZGF0ZShvYmplY3QsIHBhdGgsIHVwZGF0ZXIsIGN1c3RvbWl6ZXIpIHtcbiAgICAgIHJldHVybiBiYXNlU2V0KG9iamVjdCwgcGF0aCwgdXBkYXRlcihiYXNlR2V0KG9iamVjdCwgcGF0aCkpLCBjdXN0b21pemVyKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBtZXRob2RzIGxpa2UgYF8uZHJvcFdoaWxlYCBhbmQgYF8udGFrZVdoaWxlYFxuICAgICAqIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2lzRHJvcF0gU3BlY2lmeSBkcm9wcGluZyBlbGVtZW50cyBpbnN0ZWFkIG9mIHRha2luZyB0aGVtLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2Zyb21SaWdodF0gU3BlY2lmeSBpdGVyYXRpbmcgZnJvbSByaWdodCB0byBsZWZ0LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgc2xpY2Ugb2YgYGFycmF5YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlV2hpbGUoYXJyYXksIHByZWRpY2F0ZSwgaXNEcm9wLCBmcm9tUmlnaHQpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGgsXG4gICAgICAgICAgaW5kZXggPSBmcm9tUmlnaHQgPyBsZW5ndGggOiAtMTtcblxuICAgICAgd2hpbGUgKChmcm9tUmlnaHQgPyBpbmRleC0tIDogKytpbmRleCA8IGxlbmd0aCkgJiZcbiAgICAgICAgcHJlZGljYXRlKGFycmF5W2luZGV4XSwgaW5kZXgsIGFycmF5KSkge31cblxuICAgICAgcmV0dXJuIGlzRHJvcFxuICAgICAgICA/IGJhc2VTbGljZShhcnJheSwgKGZyb21SaWdodCA/IDAgOiBpbmRleCksIChmcm9tUmlnaHQgPyBpbmRleCArIDEgOiBsZW5ndGgpKVxuICAgICAgICA6IGJhc2VTbGljZShhcnJheSwgKGZyb21SaWdodCA/IGluZGV4ICsgMSA6IDApLCAoZnJvbVJpZ2h0ID8gbGVuZ3RoIDogaW5kZXgpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgd3JhcHBlclZhbHVlYCB3aGljaCByZXR1cm5zIHRoZSByZXN1bHQgb2ZcbiAgICAgKiBwZXJmb3JtaW5nIGEgc2VxdWVuY2Ugb2YgYWN0aW9ucyBvbiB0aGUgdW53cmFwcGVkIGB2YWx1ZWAsIHdoZXJlIGVhY2hcbiAgICAgKiBzdWNjZXNzaXZlIGFjdGlvbiBpcyBzdXBwbGllZCB0aGUgcmV0dXJuIHZhbHVlIG9mIHRoZSBwcmV2aW91cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdW53cmFwcGVkIHZhbHVlLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFjdGlvbnMgQWN0aW9ucyB0byBwZXJmb3JtIHRvIHJlc29sdmUgdGhlIHVud3JhcHBlZCB2YWx1ZS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmVzb2x2ZWQgdmFsdWUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVdyYXBwZXJWYWx1ZSh2YWx1ZSwgYWN0aW9ucykge1xuICAgICAgdmFyIHJlc3VsdCA9IHZhbHVlO1xuICAgICAgaWYgKHJlc3VsdCBpbnN0YW5jZW9mIExhenlXcmFwcGVyKSB7XG4gICAgICAgIHJlc3VsdCA9IHJlc3VsdC52YWx1ZSgpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGFycmF5UmVkdWNlKGFjdGlvbnMsIGZ1bmN0aW9uKHJlc3VsdCwgYWN0aW9uKSB7XG4gICAgICAgIHJldHVybiBhY3Rpb24uZnVuYy5hcHBseShhY3Rpb24udGhpc0FyZywgYXJyYXlQdXNoKFtyZXN1bHRdLCBhY3Rpb24uYXJncykpO1xuICAgICAgfSwgcmVzdWx0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBtZXRob2RzIGxpa2UgYF8ueG9yYCwgd2l0aG91dCBzdXBwb3J0IGZvclxuICAgICAqIGl0ZXJhdGVlIHNob3J0aGFuZHMsIHRoYXQgYWNjZXB0cyBhbiBhcnJheSBvZiBhcnJheXMgdG8gaW5zcGVjdC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXlzIFRoZSBhcnJheXMgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWVdIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjb21wYXJhdG9yXSBUaGUgY29tcGFyYXRvciBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIHZhbHVlcy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlWG9yKGFycmF5cywgaXRlcmF0ZWUsIGNvbXBhcmF0b3IpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheXMubGVuZ3RoO1xuICAgICAgaWYgKGxlbmd0aCA8IDIpIHtcbiAgICAgICAgcmV0dXJuIGxlbmd0aCA/IGJhc2VVbmlxKGFycmF5c1swXSkgOiBbXTtcbiAgICAgIH1cbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIHJlc3VsdCA9IEFycmF5KGxlbmd0aCk7XG5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciBhcnJheSA9IGFycmF5c1tpbmRleF0sXG4gICAgICAgICAgICBvdGhJbmRleCA9IC0xO1xuXG4gICAgICAgIHdoaWxlICgrK290aEluZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgICAgaWYgKG90aEluZGV4ICE9IGluZGV4KSB7XG4gICAgICAgICAgICByZXN1bHRbaW5kZXhdID0gYmFzZURpZmZlcmVuY2UocmVzdWx0W2luZGV4XSB8fCBhcnJheSwgYXJyYXlzW290aEluZGV4XSwgaXRlcmF0ZWUsIGNvbXBhcmF0b3IpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VVbmlxKGJhc2VGbGF0dGVuKHJlc3VsdCwgMSksIGl0ZXJhdGVlLCBjb21wYXJhdG9yKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uemlwT2JqZWN0YCB3aGljaCBhc3NpZ25zIHZhbHVlcyB1c2luZyBgYXNzaWduRnVuY2AuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHByb3BzIFRoZSBwcm9wZXJ0eSBpZGVudGlmaWVycy5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSB2YWx1ZXMgVGhlIHByb3BlcnR5IHZhbHVlcy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBhc3NpZ25GdW5jIFRoZSBmdW5jdGlvbiB0byBhc3NpZ24gdmFsdWVzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBvYmplY3QuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVppcE9iamVjdChwcm9wcywgdmFsdWVzLCBhc3NpZ25GdW5jKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBwcm9wcy5sZW5ndGgsXG4gICAgICAgICAgdmFsc0xlbmd0aCA9IHZhbHVlcy5sZW5ndGgsXG4gICAgICAgICAgcmVzdWx0ID0ge307XG5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IGluZGV4IDwgdmFsc0xlbmd0aCA/IHZhbHVlc1tpbmRleF0gOiB1bmRlZmluZWQ7XG4gICAgICAgIGFzc2lnbkZ1bmMocmVzdWx0LCBwcm9wc1tpbmRleF0sIHZhbHVlKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2FzdHMgYHZhbHVlYCB0byBhbiBlbXB0eSBhcnJheSBpZiBpdCdzIG5vdCBhbiBhcnJheSBsaWtlIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gaW5zcGVjdC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl8T2JqZWN0fSBSZXR1cm5zIHRoZSBjYXN0IGFycmF5LWxpa2Ugb2JqZWN0LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNhc3RBcnJheUxpa2VPYmplY3QodmFsdWUpIHtcbiAgICAgIHJldHVybiBpc0FycmF5TGlrZU9iamVjdCh2YWx1ZSkgPyB2YWx1ZSA6IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENhc3RzIGB2YWx1ZWAgdG8gYGlkZW50aXR5YCBpZiBpdCdzIG5vdCBhIGZ1bmN0aW9uLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBpbnNwZWN0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyBjYXN0IGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNhc3RGdW5jdGlvbih2YWx1ZSkge1xuICAgICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnZnVuY3Rpb24nID8gdmFsdWUgOiBpZGVudGl0eTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDYXN0cyBgdmFsdWVgIHRvIGEgcGF0aCBhcnJheSBpZiBpdCdzIG5vdCBvbmUuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3RdIFRoZSBvYmplY3QgdG8gcXVlcnkga2V5cyBvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGNhc3QgcHJvcGVydHkgcGF0aCBhcnJheS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjYXN0UGF0aCh2YWx1ZSwgb2JqZWN0KSB7XG4gICAgICBpZiAoaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGlzS2V5KHZhbHVlLCBvYmplY3QpID8gW3ZhbHVlXSA6IHN0cmluZ1RvUGF0aCh0b1N0cmluZyh2YWx1ZSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgYGJhc2VSZXN0YCBhbGlhcyB3aGljaCBjYW4gYmUgcmVwbGFjZWQgd2l0aCBgaWRlbnRpdHlgIGJ5IG1vZHVsZVxuICAgICAqIHJlcGxhY2VtZW50IHBsdWdpbnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEB0eXBlIHtGdW5jdGlvbn1cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBhcHBseSBhIHJlc3QgcGFyYW1ldGVyIHRvLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIHZhciBjYXN0UmVzdCA9IGJhc2VSZXN0O1xuXG4gICAgLyoqXG4gICAgICogQ2FzdHMgYGFycmF5YCB0byBhIHNsaWNlIGlmIGl0J3MgbmVlZGVkLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gc3RhcnQgVGhlIHN0YXJ0IHBvc2l0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbZW5kPWFycmF5Lmxlbmd0aF0gVGhlIGVuZCBwb3NpdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGNhc3Qgc2xpY2UuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2FzdFNsaWNlKGFycmF5LCBzdGFydCwgZW5kKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuICAgICAgZW5kID0gZW5kID09PSB1bmRlZmluZWQgPyBsZW5ndGggOiBlbmQ7XG4gICAgICByZXR1cm4gKCFzdGFydCAmJiBlbmQgPj0gbGVuZ3RoKSA/IGFycmF5IDogYmFzZVNsaWNlKGFycmF5LCBzdGFydCwgZW5kKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNpbXBsZSB3cmFwcGVyIGFyb3VuZCB0aGUgZ2xvYmFsIFtgY2xlYXJUaW1lb3V0YF0oaHR0cHM6Ly9tZG4uaW8vY2xlYXJUaW1lb3V0KS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtudW1iZXJ8T2JqZWN0fSBpZCBUaGUgdGltZXIgaWQgb3IgdGltZW91dCBvYmplY3Qgb2YgdGhlIHRpbWVyIHRvIGNsZWFyLlxuICAgICAqL1xuICAgIHZhciBjbGVhclRpbWVvdXQgPSBjdHhDbGVhclRpbWVvdXQgfHwgZnVuY3Rpb24oaWQpIHtcbiAgICAgIHJldHVybiByb290LmNsZWFyVGltZW91dChpZCk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBjbG9uZSBvZiAgYGJ1ZmZlcmAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QnVmZmVyfSBidWZmZXIgVGhlIGJ1ZmZlciB0byBjbG9uZS5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtpc0RlZXBdIFNwZWNpZnkgYSBkZWVwIGNsb25lLlxuICAgICAqIEByZXR1cm5zIHtCdWZmZXJ9IFJldHVybnMgdGhlIGNsb25lZCBidWZmZXIuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2xvbmVCdWZmZXIoYnVmZmVyLCBpc0RlZXApIHtcbiAgICAgIGlmIChpc0RlZXApIHtcbiAgICAgICAgcmV0dXJuIGJ1ZmZlci5zbGljZSgpO1xuICAgICAgfVxuICAgICAgdmFyIGxlbmd0aCA9IGJ1ZmZlci5sZW5ndGgsXG4gICAgICAgICAgcmVzdWx0ID0gYWxsb2NVbnNhZmUgPyBhbGxvY1Vuc2FmZShsZW5ndGgpIDogbmV3IGJ1ZmZlci5jb25zdHJ1Y3RvcihsZW5ndGgpO1xuXG4gICAgICBidWZmZXIuY29weShyZXN1bHQpO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgY2xvbmUgb2YgYGFycmF5QnVmZmVyYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheUJ1ZmZlcn0gYXJyYXlCdWZmZXIgVGhlIGFycmF5IGJ1ZmZlciB0byBjbG9uZS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXlCdWZmZXJ9IFJldHVybnMgdGhlIGNsb25lZCBhcnJheSBidWZmZXIuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2xvbmVBcnJheUJ1ZmZlcihhcnJheUJ1ZmZlcikge1xuICAgICAgdmFyIHJlc3VsdCA9IG5ldyBhcnJheUJ1ZmZlci5jb25zdHJ1Y3RvcihhcnJheUJ1ZmZlci5ieXRlTGVuZ3RoKTtcbiAgICAgIG5ldyBVaW50OEFycmF5KHJlc3VsdCkuc2V0KG5ldyBVaW50OEFycmF5KGFycmF5QnVmZmVyKSk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBjbG9uZSBvZiBgZGF0YVZpZXdgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gZGF0YVZpZXcgVGhlIGRhdGEgdmlldyB0byBjbG9uZS5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtpc0RlZXBdIFNwZWNpZnkgYSBkZWVwIGNsb25lLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNsb25lZCBkYXRhIHZpZXcuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2xvbmVEYXRhVmlldyhkYXRhVmlldywgaXNEZWVwKSB7XG4gICAgICB2YXIgYnVmZmVyID0gaXNEZWVwID8gY2xvbmVBcnJheUJ1ZmZlcihkYXRhVmlldy5idWZmZXIpIDogZGF0YVZpZXcuYnVmZmVyO1xuICAgICAgcmV0dXJuIG5ldyBkYXRhVmlldy5jb25zdHJ1Y3RvcihidWZmZXIsIGRhdGFWaWV3LmJ5dGVPZmZzZXQsIGRhdGFWaWV3LmJ5dGVMZW5ndGgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBjbG9uZSBvZiBgcmVnZXhwYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHJlZ2V4cCBUaGUgcmVnZXhwIHRvIGNsb25lLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNsb25lZCByZWdleHAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2xvbmVSZWdFeHAocmVnZXhwKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gbmV3IHJlZ2V4cC5jb25zdHJ1Y3RvcihyZWdleHAuc291cmNlLCByZUZsYWdzLmV4ZWMocmVnZXhwKSk7XG4gICAgICByZXN1bHQubGFzdEluZGV4ID0gcmVnZXhwLmxhc3RJbmRleDtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGNsb25lIG9mIHRoZSBgc3ltYm9sYCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzeW1ib2wgVGhlIHN5bWJvbCBvYmplY3QgdG8gY2xvbmUuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY2xvbmVkIHN5bWJvbCBvYmplY3QuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2xvbmVTeW1ib2woc3ltYm9sKSB7XG4gICAgICByZXR1cm4gc3ltYm9sVmFsdWVPZiA/IE9iamVjdChzeW1ib2xWYWx1ZU9mLmNhbGwoc3ltYm9sKSkgOiB7fTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgY2xvbmUgb2YgYHR5cGVkQXJyYXlgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gdHlwZWRBcnJheSBUaGUgdHlwZWQgYXJyYXkgdG8gY2xvbmUuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbaXNEZWVwXSBTcGVjaWZ5IGEgZGVlcCBjbG9uZS5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjbG9uZWQgdHlwZWQgYXJyYXkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2xvbmVUeXBlZEFycmF5KHR5cGVkQXJyYXksIGlzRGVlcCkge1xuICAgICAgdmFyIGJ1ZmZlciA9IGlzRGVlcCA/IGNsb25lQXJyYXlCdWZmZXIodHlwZWRBcnJheS5idWZmZXIpIDogdHlwZWRBcnJheS5idWZmZXI7XG4gICAgICByZXR1cm4gbmV3IHR5cGVkQXJyYXkuY29uc3RydWN0b3IoYnVmZmVyLCB0eXBlZEFycmF5LmJ5dGVPZmZzZXQsIHR5cGVkQXJyYXkubGVuZ3RoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb21wYXJlcyB2YWx1ZXMgdG8gc29ydCB0aGVtIGluIGFzY2VuZGluZyBvcmRlci5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0geyp9IG90aGVyIFRoZSBvdGhlciB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHNvcnQgb3JkZXIgaW5kaWNhdG9yIGZvciBgdmFsdWVgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvbXBhcmVBc2NlbmRpbmcodmFsdWUsIG90aGVyKSB7XG4gICAgICBpZiAodmFsdWUgIT09IG90aGVyKSB7XG4gICAgICAgIHZhciB2YWxJc0RlZmluZWQgPSB2YWx1ZSAhPT0gdW5kZWZpbmVkLFxuICAgICAgICAgICAgdmFsSXNOdWxsID0gdmFsdWUgPT09IG51bGwsXG4gICAgICAgICAgICB2YWxJc1JlZmxleGl2ZSA9IHZhbHVlID09PSB2YWx1ZSxcbiAgICAgICAgICAgIHZhbElzU3ltYm9sID0gaXNTeW1ib2wodmFsdWUpO1xuXG4gICAgICAgIHZhciBvdGhJc0RlZmluZWQgPSBvdGhlciAhPT0gdW5kZWZpbmVkLFxuICAgICAgICAgICAgb3RoSXNOdWxsID0gb3RoZXIgPT09IG51bGwsXG4gICAgICAgICAgICBvdGhJc1JlZmxleGl2ZSA9IG90aGVyID09PSBvdGhlcixcbiAgICAgICAgICAgIG90aElzU3ltYm9sID0gaXNTeW1ib2wob3RoZXIpO1xuXG4gICAgICAgIGlmICgoIW90aElzTnVsbCAmJiAhb3RoSXNTeW1ib2wgJiYgIXZhbElzU3ltYm9sICYmIHZhbHVlID4gb3RoZXIpIHx8XG4gICAgICAgICAgICAodmFsSXNTeW1ib2wgJiYgb3RoSXNEZWZpbmVkICYmIG90aElzUmVmbGV4aXZlICYmICFvdGhJc051bGwgJiYgIW90aElzU3ltYm9sKSB8fFxuICAgICAgICAgICAgKHZhbElzTnVsbCAmJiBvdGhJc0RlZmluZWQgJiYgb3RoSXNSZWZsZXhpdmUpIHx8XG4gICAgICAgICAgICAoIXZhbElzRGVmaW5lZCAmJiBvdGhJc1JlZmxleGl2ZSkgfHxcbiAgICAgICAgICAgICF2YWxJc1JlZmxleGl2ZSkge1xuICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICB9XG4gICAgICAgIGlmICgoIXZhbElzTnVsbCAmJiAhdmFsSXNTeW1ib2wgJiYgIW90aElzU3ltYm9sICYmIHZhbHVlIDwgb3RoZXIpIHx8XG4gICAgICAgICAgICAob3RoSXNTeW1ib2wgJiYgdmFsSXNEZWZpbmVkICYmIHZhbElzUmVmbGV4aXZlICYmICF2YWxJc051bGwgJiYgIXZhbElzU3ltYm9sKSB8fFxuICAgICAgICAgICAgKG90aElzTnVsbCAmJiB2YWxJc0RlZmluZWQgJiYgdmFsSXNSZWZsZXhpdmUpIHx8XG4gICAgICAgICAgICAoIW90aElzRGVmaW5lZCAmJiB2YWxJc1JlZmxleGl2ZSkgfHxcbiAgICAgICAgICAgICFvdGhJc1JlZmxleGl2ZSkge1xuICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIDA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVXNlZCBieSBgXy5vcmRlckJ5YCB0byBjb21wYXJlIG11bHRpcGxlIHByb3BlcnRpZXMgb2YgYSB2YWx1ZSB0byBhbm90aGVyXG4gICAgICogYW5kIHN0YWJsZSBzb3J0IHRoZW0uXG4gICAgICpcbiAgICAgKiBJZiBgb3JkZXJzYCBpcyB1bnNwZWNpZmllZCwgYWxsIHZhbHVlcyBhcmUgc29ydGVkIGluIGFzY2VuZGluZyBvcmRlci4gT3RoZXJ3aXNlLFxuICAgICAqIHNwZWNpZnkgYW4gb3JkZXIgb2YgXCJkZXNjXCIgZm9yIGRlc2NlbmRpbmcgb3IgXCJhc2NcIiBmb3IgYXNjZW5kaW5nIHNvcnQgb3JkZXJcbiAgICAgKiBvZiBjb3JyZXNwb25kaW5nIHZhbHVlcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG90aGVyIFRoZSBvdGhlciBvYmplY3QgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW5bXXxzdHJpbmdbXX0gb3JkZXJzIFRoZSBvcmRlciB0byBzb3J0IGJ5IGZvciBlYWNoIHByb3BlcnR5LlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHNvcnQgb3JkZXIgaW5kaWNhdG9yIGZvciBgb2JqZWN0YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjb21wYXJlTXVsdGlwbGUob2JqZWN0LCBvdGhlciwgb3JkZXJzKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBvYmpDcml0ZXJpYSA9IG9iamVjdC5jcml0ZXJpYSxcbiAgICAgICAgICBvdGhDcml0ZXJpYSA9IG90aGVyLmNyaXRlcmlhLFxuICAgICAgICAgIGxlbmd0aCA9IG9iakNyaXRlcmlhLmxlbmd0aCxcbiAgICAgICAgICBvcmRlcnNMZW5ndGggPSBvcmRlcnMubGVuZ3RoO1xuXG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgcmVzdWx0ID0gY29tcGFyZUFzY2VuZGluZyhvYmpDcml0ZXJpYVtpbmRleF0sIG90aENyaXRlcmlhW2luZGV4XSk7XG4gICAgICAgIGlmIChyZXN1bHQpIHtcbiAgICAgICAgICBpZiAoaW5kZXggPj0gb3JkZXJzTGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgb3JkZXIgPSBvcmRlcnNbaW5kZXhdO1xuICAgICAgICAgIHJldHVybiByZXN1bHQgKiAob3JkZXIgPT0gJ2Rlc2MnID8gLTEgOiAxKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLy8gRml4ZXMgYW4gYEFycmF5I3NvcnRgIGJ1ZyBpbiB0aGUgSlMgZW5naW5lIGVtYmVkZGVkIGluIEFkb2JlIGFwcGxpY2F0aW9uc1xuICAgICAgLy8gdGhhdCBjYXVzZXMgaXQsIHVuZGVyIGNlcnRhaW4gY2lyY3Vtc3RhbmNlcywgdG8gcHJvdmlkZSB0aGUgc2FtZSB2YWx1ZSBmb3JcbiAgICAgIC8vIGBvYmplY3RgIGFuZCBgb3RoZXJgLiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2phc2hrZW5hcy91bmRlcnNjb3JlL3B1bGwvMTI0N1xuICAgICAgLy8gZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgIC8vXG4gICAgICAvLyBUaGlzIGFsc28gZW5zdXJlcyBhIHN0YWJsZSBzb3J0IGluIFY4IGFuZCBvdGhlciBlbmdpbmVzLlxuICAgICAgLy8gU2VlIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTkwIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICByZXR1cm4gb2JqZWN0LmluZGV4IC0gb3RoZXIuaW5kZXg7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSB0aGF0IGlzIHRoZSBjb21wb3NpdGlvbiBvZiBwYXJ0aWFsbHkgYXBwbGllZCBhcmd1bWVudHMsXG4gICAgICogcGxhY2Vob2xkZXJzLCBhbmQgcHJvdmlkZWQgYXJndW1lbnRzIGludG8gYSBzaW5nbGUgYXJyYXkgb2YgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcmdzIFRoZSBwcm92aWRlZCBhcmd1bWVudHMuXG4gICAgICogQHBhcmFtIHtBcnJheX0gcGFydGlhbHMgVGhlIGFyZ3VtZW50cyB0byBwcmVwZW5kIHRvIHRob3NlIHByb3ZpZGVkLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGhvbGRlcnMgVGhlIGBwYXJ0aWFsc2AgcGxhY2Vob2xkZXIgaW5kZXhlcy5cbiAgICAgKiBAcGFyYW1zIHtib29sZWFufSBbaXNDdXJyaWVkXSBTcGVjaWZ5IGNvbXBvc2luZyBmb3IgYSBjdXJyaWVkIGZ1bmN0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGNvbXBvc2VkIGFyZ3VtZW50cy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjb21wb3NlQXJncyhhcmdzLCBwYXJ0aWFscywgaG9sZGVycywgaXNDdXJyaWVkKSB7XG4gICAgICB2YXIgYXJnc0luZGV4ID0gLTEsXG4gICAgICAgICAgYXJnc0xlbmd0aCA9IGFyZ3MubGVuZ3RoLFxuICAgICAgICAgIGhvbGRlcnNMZW5ndGggPSBob2xkZXJzLmxlbmd0aCxcbiAgICAgICAgICBsZWZ0SW5kZXggPSAtMSxcbiAgICAgICAgICBsZWZ0TGVuZ3RoID0gcGFydGlhbHMubGVuZ3RoLFxuICAgICAgICAgIHJhbmdlTGVuZ3RoID0gbmF0aXZlTWF4KGFyZ3NMZW5ndGggLSBob2xkZXJzTGVuZ3RoLCAwKSxcbiAgICAgICAgICByZXN1bHQgPSBBcnJheShsZWZ0TGVuZ3RoICsgcmFuZ2VMZW5ndGgpLFxuICAgICAgICAgIGlzVW5jdXJyaWVkID0gIWlzQ3VycmllZDtcblxuICAgICAgd2hpbGUgKCsrbGVmdEluZGV4IDwgbGVmdExlbmd0aCkge1xuICAgICAgICByZXN1bHRbbGVmdEluZGV4XSA9IHBhcnRpYWxzW2xlZnRJbmRleF07XG4gICAgICB9XG4gICAgICB3aGlsZSAoKythcmdzSW5kZXggPCBob2xkZXJzTGVuZ3RoKSB7XG4gICAgICAgIGlmIChpc1VuY3VycmllZCB8fCBhcmdzSW5kZXggPCBhcmdzTGVuZ3RoKSB7XG4gICAgICAgICAgcmVzdWx0W2hvbGRlcnNbYXJnc0luZGV4XV0gPSBhcmdzW2FyZ3NJbmRleF07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHdoaWxlIChyYW5nZUxlbmd0aC0tKSB7XG4gICAgICAgIHJlc3VsdFtsZWZ0SW5kZXgrK10gPSBhcmdzW2FyZ3NJbmRleCsrXTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBmdW5jdGlvbiBpcyBsaWtlIGBjb21wb3NlQXJnc2AgZXhjZXB0IHRoYXQgdGhlIGFyZ3VtZW50cyBjb21wb3NpdGlvblxuICAgICAqIGlzIHRhaWxvcmVkIGZvciBgXy5wYXJ0aWFsUmlnaHRgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcmdzIFRoZSBwcm92aWRlZCBhcmd1bWVudHMuXG4gICAgICogQHBhcmFtIHtBcnJheX0gcGFydGlhbHMgVGhlIGFyZ3VtZW50cyB0byBhcHBlbmQgdG8gdGhvc2UgcHJvdmlkZWQuXG4gICAgICogQHBhcmFtIHtBcnJheX0gaG9sZGVycyBUaGUgYHBhcnRpYWxzYCBwbGFjZWhvbGRlciBpbmRleGVzLlxuICAgICAqIEBwYXJhbXMge2Jvb2xlYW59IFtpc0N1cnJpZWRdIFNwZWNpZnkgY29tcG9zaW5nIGZvciBhIGN1cnJpZWQgZnVuY3Rpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgY29tcG9zZWQgYXJndW1lbnRzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvbXBvc2VBcmdzUmlnaHQoYXJncywgcGFydGlhbHMsIGhvbGRlcnMsIGlzQ3VycmllZCkge1xuICAgICAgdmFyIGFyZ3NJbmRleCA9IC0xLFxuICAgICAgICAgIGFyZ3NMZW5ndGggPSBhcmdzLmxlbmd0aCxcbiAgICAgICAgICBob2xkZXJzSW5kZXggPSAtMSxcbiAgICAgICAgICBob2xkZXJzTGVuZ3RoID0gaG9sZGVycy5sZW5ndGgsXG4gICAgICAgICAgcmlnaHRJbmRleCA9IC0xLFxuICAgICAgICAgIHJpZ2h0TGVuZ3RoID0gcGFydGlhbHMubGVuZ3RoLFxuICAgICAgICAgIHJhbmdlTGVuZ3RoID0gbmF0aXZlTWF4KGFyZ3NMZW5ndGggLSBob2xkZXJzTGVuZ3RoLCAwKSxcbiAgICAgICAgICByZXN1bHQgPSBBcnJheShyYW5nZUxlbmd0aCArIHJpZ2h0TGVuZ3RoKSxcbiAgICAgICAgICBpc1VuY3VycmllZCA9ICFpc0N1cnJpZWQ7XG5cbiAgICAgIHdoaWxlICgrK2FyZ3NJbmRleCA8IHJhbmdlTGVuZ3RoKSB7XG4gICAgICAgIHJlc3VsdFthcmdzSW5kZXhdID0gYXJnc1thcmdzSW5kZXhdO1xuICAgICAgfVxuICAgICAgdmFyIG9mZnNldCA9IGFyZ3NJbmRleDtcbiAgICAgIHdoaWxlICgrK3JpZ2h0SW5kZXggPCByaWdodExlbmd0aCkge1xuICAgICAgICByZXN1bHRbb2Zmc2V0ICsgcmlnaHRJbmRleF0gPSBwYXJ0aWFsc1tyaWdodEluZGV4XTtcbiAgICAgIH1cbiAgICAgIHdoaWxlICgrK2hvbGRlcnNJbmRleCA8IGhvbGRlcnNMZW5ndGgpIHtcbiAgICAgICAgaWYgKGlzVW5jdXJyaWVkIHx8IGFyZ3NJbmRleCA8IGFyZ3NMZW5ndGgpIHtcbiAgICAgICAgICByZXN1bHRbb2Zmc2V0ICsgaG9sZGVyc1tob2xkZXJzSW5kZXhdXSA9IGFyZ3NbYXJnc0luZGV4KytdO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvcGllcyB0aGUgdmFsdWVzIG9mIGBzb3VyY2VgIHRvIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHNvdXJjZSBUaGUgYXJyYXkgdG8gY29weSB2YWx1ZXMgZnJvbS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbYXJyYXk9W11dIFRoZSBhcnJheSB0byBjb3B5IHZhbHVlcyB0by5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjb3B5QXJyYXkoc291cmNlLCBhcnJheSkge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gc291cmNlLmxlbmd0aDtcblxuICAgICAgYXJyYXkgfHwgKGFycmF5ID0gQXJyYXkobGVuZ3RoKSk7XG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICBhcnJheVtpbmRleF0gPSBzb3VyY2VbaW5kZXhdO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGFycmF5O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvcGllcyBwcm9wZXJ0aWVzIG9mIGBzb3VyY2VgIHRvIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3QgdG8gY29weSBwcm9wZXJ0aWVzIGZyb20uXG4gICAgICogQHBhcmFtIHtBcnJheX0gcHJvcHMgVGhlIHByb3BlcnR5IGlkZW50aWZpZXJzIHRvIGNvcHkuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3Q9e31dIFRoZSBvYmplY3QgdG8gY29weSBwcm9wZXJ0aWVzIHRvLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvcGllZCB2YWx1ZXMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjb3B5T2JqZWN0KHNvdXJjZSwgcHJvcHMsIG9iamVjdCwgY3VzdG9taXplcikge1xuICAgICAgdmFyIGlzTmV3ID0gIW9iamVjdDtcbiAgICAgIG9iamVjdCB8fCAob2JqZWN0ID0ge30pO1xuXG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBwcm9wcy5sZW5ndGg7XG5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciBrZXkgPSBwcm9wc1tpbmRleF07XG5cbiAgICAgICAgdmFyIG5ld1ZhbHVlID0gY3VzdG9taXplclxuICAgICAgICAgID8gY3VzdG9taXplcihvYmplY3Rba2V5XSwgc291cmNlW2tleV0sIGtleSwgb2JqZWN0LCBzb3VyY2UpXG4gICAgICAgICAgOiB1bmRlZmluZWQ7XG5cbiAgICAgICAgaWYgKG5ld1ZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBuZXdWYWx1ZSA9IHNvdXJjZVtrZXldO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc05ldykge1xuICAgICAgICAgIGJhc2VBc3NpZ25WYWx1ZShvYmplY3QsIGtleSwgbmV3VmFsdWUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGFzc2lnblZhbHVlKG9iamVjdCwga2V5LCBuZXdWYWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29waWVzIG93biBzeW1ib2xzIG9mIGBzb3VyY2VgIHRvIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3QgdG8gY29weSBzeW1ib2xzIGZyb20uXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3Q9e31dIFRoZSBvYmplY3QgdG8gY29weSBzeW1ib2xzIHRvLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29weVN5bWJvbHMoc291cmNlLCBvYmplY3QpIHtcbiAgICAgIHJldHVybiBjb3B5T2JqZWN0KHNvdXJjZSwgZ2V0U3ltYm9scyhzb3VyY2UpLCBvYmplY3QpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvcGllcyBvd24gYW5kIGluaGVyaXRlZCBzeW1ib2xzIG9mIGBzb3VyY2VgIHRvIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3QgdG8gY29weSBzeW1ib2xzIGZyb20uXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3Q9e31dIFRoZSBvYmplY3QgdG8gY29weSBzeW1ib2xzIHRvLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29weVN5bWJvbHNJbihzb3VyY2UsIG9iamVjdCkge1xuICAgICAgcmV0dXJuIGNvcHlPYmplY3Qoc291cmNlLCBnZXRTeW1ib2xzSW4oc291cmNlKSwgb2JqZWN0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gbGlrZSBgXy5ncm91cEJ5YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gc2V0dGVyIFRoZSBmdW5jdGlvbiB0byBzZXQgYWNjdW11bGF0b3IgdmFsdWVzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpbml0aWFsaXplcl0gVGhlIGFjY3VtdWxhdG9yIG9iamVjdCBpbml0aWFsaXplci5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBhZ2dyZWdhdG9yIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZUFnZ3JlZ2F0b3Ioc2V0dGVyLCBpbml0aWFsaXplcikge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKGNvbGxlY3Rpb24sIGl0ZXJhdGVlKSB7XG4gICAgICAgIHZhciBmdW5jID0gaXNBcnJheShjb2xsZWN0aW9uKSA/IGFycmF5QWdncmVnYXRvciA6IGJhc2VBZ2dyZWdhdG9yLFxuICAgICAgICAgICAgYWNjdW11bGF0b3IgPSBpbml0aWFsaXplciA/IGluaXRpYWxpemVyKCkgOiB7fTtcblxuICAgICAgICByZXR1cm4gZnVuYyhjb2xsZWN0aW9uLCBzZXR0ZXIsIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAyKSwgYWNjdW11bGF0b3IpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gbGlrZSBgXy5hc3NpZ25gLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBhc3NpZ25lciBUaGUgZnVuY3Rpb24gdG8gYXNzaWduIHZhbHVlcy5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBhc3NpZ25lciBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVBc3NpZ25lcihhc3NpZ25lcikge1xuICAgICAgcmV0dXJuIGJhc2VSZXN0KGZ1bmN0aW9uKG9iamVjdCwgc291cmNlcykge1xuICAgICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICAgIGxlbmd0aCA9IHNvdXJjZXMubGVuZ3RoLFxuICAgICAgICAgICAgY3VzdG9taXplciA9IGxlbmd0aCA+IDEgPyBzb3VyY2VzW2xlbmd0aCAtIDFdIDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgZ3VhcmQgPSBsZW5ndGggPiAyID8gc291cmNlc1syXSA6IHVuZGVmaW5lZDtcblxuICAgICAgICBjdXN0b21pemVyID0gKGFzc2lnbmVyLmxlbmd0aCA+IDMgJiYgdHlwZW9mIGN1c3RvbWl6ZXIgPT0gJ2Z1bmN0aW9uJylcbiAgICAgICAgICA/IChsZW5ndGgtLSwgY3VzdG9taXplcilcbiAgICAgICAgICA6IHVuZGVmaW5lZDtcblxuICAgICAgICBpZiAoZ3VhcmQgJiYgaXNJdGVyYXRlZUNhbGwoc291cmNlc1swXSwgc291cmNlc1sxXSwgZ3VhcmQpKSB7XG4gICAgICAgICAgY3VzdG9taXplciA9IGxlbmd0aCA8IDMgPyB1bmRlZmluZWQgOiBjdXN0b21pemVyO1xuICAgICAgICAgIGxlbmd0aCA9IDE7XG4gICAgICAgIH1cbiAgICAgICAgb2JqZWN0ID0gT2JqZWN0KG9iamVjdCk7XG4gICAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgICAgdmFyIHNvdXJjZSA9IHNvdXJjZXNbaW5kZXhdO1xuICAgICAgICAgIGlmIChzb3VyY2UpIHtcbiAgICAgICAgICAgIGFzc2lnbmVyKG9iamVjdCwgc291cmNlLCBpbmRleCwgY3VzdG9taXplcik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgYGJhc2VFYWNoYCBvciBgYmFzZUVhY2hSaWdodGAgZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGVhY2hGdW5jIFRoZSBmdW5jdGlvbiB0byBpdGVyYXRlIG92ZXIgYSBjb2xsZWN0aW9uLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2Zyb21SaWdodF0gU3BlY2lmeSBpdGVyYXRpbmcgZnJvbSByaWdodCB0byBsZWZ0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGJhc2UgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlQmFzZUVhY2goZWFjaEZ1bmMsIGZyb21SaWdodCkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKGNvbGxlY3Rpb24sIGl0ZXJhdGVlKSB7XG4gICAgICAgIGlmIChjb2xsZWN0aW9uID09IG51bGwpIHtcbiAgICAgICAgICByZXR1cm4gY29sbGVjdGlvbjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWlzQXJyYXlMaWtlKGNvbGxlY3Rpb24pKSB7XG4gICAgICAgICAgcmV0dXJuIGVhY2hGdW5jKGNvbGxlY3Rpb24sIGl0ZXJhdGVlKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgbGVuZ3RoID0gY29sbGVjdGlvbi5sZW5ndGgsXG4gICAgICAgICAgICBpbmRleCA9IGZyb21SaWdodCA/IGxlbmd0aCA6IC0xLFxuICAgICAgICAgICAgaXRlcmFibGUgPSBPYmplY3QoY29sbGVjdGlvbik7XG5cbiAgICAgICAgd2hpbGUgKChmcm9tUmlnaHQgPyBpbmRleC0tIDogKytpbmRleCA8IGxlbmd0aCkpIHtcbiAgICAgICAgICBpZiAoaXRlcmF0ZWUoaXRlcmFibGVbaW5kZXhdLCBpbmRleCwgaXRlcmFibGUpID09PSBmYWxzZSkge1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjb2xsZWN0aW9uO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgYmFzZSBmdW5jdGlvbiBmb3IgbWV0aG9kcyBsaWtlIGBfLmZvckluYCBhbmQgYF8uZm9yT3duYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbZnJvbVJpZ2h0XSBTcGVjaWZ5IGl0ZXJhdGluZyBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYmFzZSBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVCYXNlRm9yKGZyb21SaWdodCkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCwgaXRlcmF0ZWUsIGtleXNGdW5jKSB7XG4gICAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgICAgaXRlcmFibGUgPSBPYmplY3Qob2JqZWN0KSxcbiAgICAgICAgICAgIHByb3BzID0ga2V5c0Z1bmMob2JqZWN0KSxcbiAgICAgICAgICAgIGxlbmd0aCA9IHByb3BzLmxlbmd0aDtcblxuICAgICAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgICAgICB2YXIga2V5ID0gcHJvcHNbZnJvbVJpZ2h0ID8gbGVuZ3RoIDogKytpbmRleF07XG4gICAgICAgICAgaWYgKGl0ZXJhdGVlKGl0ZXJhYmxlW2tleV0sIGtleSwgaXRlcmFibGUpID09PSBmYWxzZSkge1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHdyYXBzIGBmdW5jYCB0byBpbnZva2UgaXQgd2l0aCB0aGUgb3B0aW9uYWwgYHRoaXNgXG4gICAgICogYmluZGluZyBvZiBgdGhpc0FyZ2AuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHdyYXAuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgY3JlYXRlV3JhcGAgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgKiBAcGFyYW0geyp9IFt0aGlzQXJnXSBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGZ1bmNgLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHdyYXBwZWQgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlQmluZChmdW5jLCBiaXRtYXNrLCB0aGlzQXJnKSB7XG4gICAgICB2YXIgaXNCaW5kID0gYml0bWFzayAmIFdSQVBfQklORF9GTEFHLFxuICAgICAgICAgIEN0b3IgPSBjcmVhdGVDdG9yKGZ1bmMpO1xuXG4gICAgICBmdW5jdGlvbiB3cmFwcGVyKCkge1xuICAgICAgICB2YXIgZm4gPSAodGhpcyAmJiB0aGlzICE9PSByb290ICYmIHRoaXMgaW5zdGFuY2VvZiB3cmFwcGVyKSA/IEN0b3IgOiBmdW5jO1xuICAgICAgICByZXR1cm4gZm4uYXBwbHkoaXNCaW5kID8gdGhpc0FyZyA6IHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gd3JhcHBlcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gbGlrZSBgXy5sb3dlckZpcnN0YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG1ldGhvZE5hbWUgVGhlIG5hbWUgb2YgdGhlIGBTdHJpbmdgIGNhc2UgbWV0aG9kIHRvIHVzZS5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBjYXNlIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZUNhc2VGaXJzdChtZXRob2ROYW1lKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oc3RyaW5nKSB7XG4gICAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG5cbiAgICAgICAgdmFyIHN0clN5bWJvbHMgPSBoYXNVbmljb2RlKHN0cmluZylcbiAgICAgICAgICA/IHN0cmluZ1RvQXJyYXkoc3RyaW5nKVxuICAgICAgICAgIDogdW5kZWZpbmVkO1xuXG4gICAgICAgIHZhciBjaHIgPSBzdHJTeW1ib2xzXG4gICAgICAgICAgPyBzdHJTeW1ib2xzWzBdXG4gICAgICAgICAgOiBzdHJpbmcuY2hhckF0KDApO1xuXG4gICAgICAgIHZhciB0cmFpbGluZyA9IHN0clN5bWJvbHNcbiAgICAgICAgICA/IGNhc3RTbGljZShzdHJTeW1ib2xzLCAxKS5qb2luKCcnKVxuICAgICAgICAgIDogc3RyaW5nLnNsaWNlKDEpO1xuXG4gICAgICAgIHJldHVybiBjaHJbbWV0aG9kTmFtZV0oKSArIHRyYWlsaW5nO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gbGlrZSBgXy5jYW1lbENhc2VgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayBUaGUgZnVuY3Rpb24gdG8gY29tYmluZSBlYWNoIHdvcmQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgY29tcG91bmRlciBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVDb21wb3VuZGVyKGNhbGxiYWNrKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oc3RyaW5nKSB7XG4gICAgICAgIHJldHVybiBhcnJheVJlZHVjZSh3b3JkcyhkZWJ1cnIoc3RyaW5nKS5yZXBsYWNlKHJlQXBvcywgJycpKSwgY2FsbGJhY2ssICcnKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgcHJvZHVjZXMgYW4gaW5zdGFuY2Ugb2YgYEN0b3JgIHJlZ2FyZGxlc3Mgb2ZcbiAgICAgKiB3aGV0aGVyIGl0IHdhcyBpbnZva2VkIGFzIHBhcnQgb2YgYSBgbmV3YCBleHByZXNzaW9uIG9yIGJ5IGBjYWxsYCBvciBgYXBwbHlgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBDdG9yIFRoZSBjb25zdHJ1Y3RvciB0byB3cmFwLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHdyYXBwZWQgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlQ3RvcihDdG9yKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgIC8vIFVzZSBhIGBzd2l0Y2hgIHN0YXRlbWVudCB0byB3b3JrIHdpdGggY2xhc3MgY29uc3RydWN0b3JzLiBTZWVcbiAgICAgICAgLy8gaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtZWNtYXNjcmlwdC1mdW5jdGlvbi1vYmplY3RzLWNhbGwtdGhpc2FyZ3VtZW50LWFyZ3VtZW50c2xpc3RcbiAgICAgICAgLy8gZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgICAgdmFyIGFyZ3MgPSBhcmd1bWVudHM7XG4gICAgICAgIHN3aXRjaCAoYXJncy5sZW5ndGgpIHtcbiAgICAgICAgICBjYXNlIDA6IHJldHVybiBuZXcgQ3RvcjtcbiAgICAgICAgICBjYXNlIDE6IHJldHVybiBuZXcgQ3RvcihhcmdzWzBdKTtcbiAgICAgICAgICBjYXNlIDI6IHJldHVybiBuZXcgQ3RvcihhcmdzWzBdLCBhcmdzWzFdKTtcbiAgICAgICAgICBjYXNlIDM6IHJldHVybiBuZXcgQ3RvcihhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdKTtcbiAgICAgICAgICBjYXNlIDQ6IHJldHVybiBuZXcgQ3RvcihhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdLCBhcmdzWzNdKTtcbiAgICAgICAgICBjYXNlIDU6IHJldHVybiBuZXcgQ3RvcihhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdLCBhcmdzWzNdLCBhcmdzWzRdKTtcbiAgICAgICAgICBjYXNlIDY6IHJldHVybiBuZXcgQ3RvcihhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdLCBhcmdzWzNdLCBhcmdzWzRdLCBhcmdzWzVdKTtcbiAgICAgICAgICBjYXNlIDc6IHJldHVybiBuZXcgQ3RvcihhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdLCBhcmdzWzNdLCBhcmdzWzRdLCBhcmdzWzVdLCBhcmdzWzZdKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgdGhpc0JpbmRpbmcgPSBiYXNlQ3JlYXRlKEN0b3IucHJvdG90eXBlKSxcbiAgICAgICAgICAgIHJlc3VsdCA9IEN0b3IuYXBwbHkodGhpc0JpbmRpbmcsIGFyZ3MpO1xuXG4gICAgICAgIC8vIE1pbWljIHRoZSBjb25zdHJ1Y3RvcidzIGByZXR1cm5gIGJlaGF2aW9yLlxuICAgICAgICAvLyBTZWUgaHR0cHM6Ly9lczUuZ2l0aHViLmlvLyN4MTMuMi4yIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICAgIHJldHVybiBpc09iamVjdChyZXN1bHQpID8gcmVzdWx0IDogdGhpc0JpbmRpbmc7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHdyYXBzIGBmdW5jYCB0byBlbmFibGUgY3VycnlpbmcuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHdyYXAuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgY3JlYXRlV3JhcGAgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYXJpdHkgVGhlIGFyaXR5IG9mIGBmdW5jYC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyB3cmFwcGVkIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZUN1cnJ5KGZ1bmMsIGJpdG1hc2ssIGFyaXR5KSB7XG4gICAgICB2YXIgQ3RvciA9IGNyZWF0ZUN0b3IoZnVuYyk7XG5cbiAgICAgIGZ1bmN0aW9uIHdyYXBwZXIoKSB7XG4gICAgICAgIHZhciBsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoLFxuICAgICAgICAgICAgYXJncyA9IEFycmF5KGxlbmd0aCksXG4gICAgICAgICAgICBpbmRleCA9IGxlbmd0aCxcbiAgICAgICAgICAgIHBsYWNlaG9sZGVyID0gZ2V0SG9sZGVyKHdyYXBwZXIpO1xuXG4gICAgICAgIHdoaWxlIChpbmRleC0tKSB7XG4gICAgICAgICAgYXJnc1tpbmRleF0gPSBhcmd1bWVudHNbaW5kZXhdO1xuICAgICAgICB9XG4gICAgICAgIHZhciBob2xkZXJzID0gKGxlbmd0aCA8IDMgJiYgYXJnc1swXSAhPT0gcGxhY2Vob2xkZXIgJiYgYXJnc1tsZW5ndGggLSAxXSAhPT0gcGxhY2Vob2xkZXIpXG4gICAgICAgICAgPyBbXVxuICAgICAgICAgIDogcmVwbGFjZUhvbGRlcnMoYXJncywgcGxhY2Vob2xkZXIpO1xuXG4gICAgICAgIGxlbmd0aCAtPSBob2xkZXJzLmxlbmd0aDtcbiAgICAgICAgaWYgKGxlbmd0aCA8IGFyaXR5KSB7XG4gICAgICAgICAgcmV0dXJuIGNyZWF0ZVJlY3VycnkoXG4gICAgICAgICAgICBmdW5jLCBiaXRtYXNrLCBjcmVhdGVIeWJyaWQsIHdyYXBwZXIucGxhY2Vob2xkZXIsIHVuZGVmaW5lZCxcbiAgICAgICAgICAgIGFyZ3MsIGhvbGRlcnMsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBhcml0eSAtIGxlbmd0aCk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGZuID0gKHRoaXMgJiYgdGhpcyAhPT0gcm9vdCAmJiB0aGlzIGluc3RhbmNlb2Ygd3JhcHBlcikgPyBDdG9yIDogZnVuYztcbiAgICAgICAgcmV0dXJuIGFwcGx5KGZuLCB0aGlzLCBhcmdzKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB3cmFwcGVyO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBgXy5maW5kYCBvciBgXy5maW5kTGFzdGAgZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZpbmRJbmRleEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGZpbmQgdGhlIGNvbGxlY3Rpb24gaW5kZXguXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZmluZCBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVGaW5kKGZpbmRJbmRleEZ1bmMpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihjb2xsZWN0aW9uLCBwcmVkaWNhdGUsIGZyb21JbmRleCkge1xuICAgICAgICB2YXIgaXRlcmFibGUgPSBPYmplY3QoY29sbGVjdGlvbik7XG4gICAgICAgIGlmICghaXNBcnJheUxpa2UoY29sbGVjdGlvbikpIHtcbiAgICAgICAgICB2YXIgaXRlcmF0ZWUgPSBnZXRJdGVyYXRlZShwcmVkaWNhdGUsIDMpO1xuICAgICAgICAgIGNvbGxlY3Rpb24gPSBrZXlzKGNvbGxlY3Rpb24pO1xuICAgICAgICAgIHByZWRpY2F0ZSA9IGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gaXRlcmF0ZWUoaXRlcmFibGVba2V5XSwga2V5LCBpdGVyYWJsZSk7IH07XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGluZGV4ID0gZmluZEluZGV4RnVuYyhjb2xsZWN0aW9uLCBwcmVkaWNhdGUsIGZyb21JbmRleCk7XG4gICAgICAgIHJldHVybiBpbmRleCA+IC0xID8gaXRlcmFibGVbaXRlcmF0ZWUgPyBjb2xsZWN0aW9uW2luZGV4XSA6IGluZGV4XSA6IHVuZGVmaW5lZDtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGBfLmZsb3dgIG9yIGBfLmZsb3dSaWdodGAgZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2Zyb21SaWdodF0gU3BlY2lmeSBpdGVyYXRpbmcgZnJvbSByaWdodCB0byBsZWZ0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZsb3cgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlRmxvdyhmcm9tUmlnaHQpIHtcbiAgICAgIHJldHVybiBmbGF0UmVzdChmdW5jdGlvbihmdW5jcykge1xuICAgICAgICB2YXIgbGVuZ3RoID0gZnVuY3MubGVuZ3RoLFxuICAgICAgICAgICAgaW5kZXggPSBsZW5ndGgsXG4gICAgICAgICAgICBwcmVyZXEgPSBMb2Rhc2hXcmFwcGVyLnByb3RvdHlwZS50aHJ1O1xuXG4gICAgICAgIGlmIChmcm9tUmlnaHQpIHtcbiAgICAgICAgICBmdW5jcy5yZXZlcnNlKCk7XG4gICAgICAgIH1cbiAgICAgICAgd2hpbGUgKGluZGV4LS0pIHtcbiAgICAgICAgICB2YXIgZnVuYyA9IGZ1bmNzW2luZGV4XTtcbiAgICAgICAgICBpZiAodHlwZW9mIGZ1bmMgIT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihGVU5DX0VSUk9SX1RFWFQpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAocHJlcmVxICYmICF3cmFwcGVyICYmIGdldEZ1bmNOYW1lKGZ1bmMpID09ICd3cmFwcGVyJykge1xuICAgICAgICAgICAgdmFyIHdyYXBwZXIgPSBuZXcgTG9kYXNoV3JhcHBlcihbXSwgdHJ1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGluZGV4ID0gd3JhcHBlciA/IGluZGV4IDogbGVuZ3RoO1xuICAgICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICAgIGZ1bmMgPSBmdW5jc1tpbmRleF07XG5cbiAgICAgICAgICB2YXIgZnVuY05hbWUgPSBnZXRGdW5jTmFtZShmdW5jKSxcbiAgICAgICAgICAgICAgZGF0YSA9IGZ1bmNOYW1lID09ICd3cmFwcGVyJyA/IGdldERhdGEoZnVuYykgOiB1bmRlZmluZWQ7XG5cbiAgICAgICAgICBpZiAoZGF0YSAmJiBpc0xhemlhYmxlKGRhdGFbMF0pICYmXG4gICAgICAgICAgICAgICAgZGF0YVsxXSA9PSAoV1JBUF9BUllfRkxBRyB8IFdSQVBfQ1VSUllfRkxBRyB8IFdSQVBfUEFSVElBTF9GTEFHIHwgV1JBUF9SRUFSR19GTEFHKSAmJlxuICAgICAgICAgICAgICAgICFkYXRhWzRdLmxlbmd0aCAmJiBkYXRhWzldID09IDFcbiAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICB3cmFwcGVyID0gd3JhcHBlcltnZXRGdW5jTmFtZShkYXRhWzBdKV0uYXBwbHkod3JhcHBlciwgZGF0YVszXSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHdyYXBwZXIgPSAoZnVuYy5sZW5ndGggPT0gMSAmJiBpc0xhemlhYmxlKGZ1bmMpKVxuICAgICAgICAgICAgICA/IHdyYXBwZXJbZnVuY05hbWVdKClcbiAgICAgICAgICAgICAgOiB3cmFwcGVyLnRocnUoZnVuYyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgICB2YXIgYXJncyA9IGFyZ3VtZW50cyxcbiAgICAgICAgICAgICAgdmFsdWUgPSBhcmdzWzBdO1xuXG4gICAgICAgICAgaWYgKHdyYXBwZXIgJiYgYXJncy5sZW5ndGggPT0gMSAmJiBpc0FycmF5KHZhbHVlKSkge1xuICAgICAgICAgICAgcmV0dXJuIHdyYXBwZXIucGxhbnQodmFsdWUpLnZhbHVlKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciBpbmRleCA9IDAsXG4gICAgICAgICAgICAgIHJlc3VsdCA9IGxlbmd0aCA/IGZ1bmNzW2luZGV4XS5hcHBseSh0aGlzLCBhcmdzKSA6IHZhbHVlO1xuXG4gICAgICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgICAgIHJlc3VsdCA9IGZ1bmNzW2luZGV4XS5jYWxsKHRoaXMsIHJlc3VsdCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH07XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCB3cmFwcyBgZnVuY2AgdG8gaW52b2tlIGl0IHdpdGggb3B0aW9uYWwgYHRoaXNgXG4gICAgICogYmluZGluZyBvZiBgdGhpc0FyZ2AsIHBhcnRpYWwgYXBwbGljYXRpb24sIGFuZCBjdXJyeWluZy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbnxzdHJpbmd9IGZ1bmMgVGhlIGZ1bmN0aW9uIG9yIG1ldGhvZCBuYW1lIHRvIHdyYXAuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgY3JlYXRlV3JhcGAgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgKiBAcGFyYW0geyp9IFt0aGlzQXJnXSBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGZ1bmNgLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtwYXJ0aWFsc10gVGhlIGFyZ3VtZW50cyB0byBwcmVwZW5kIHRvIHRob3NlIHByb3ZpZGVkIHRvXG4gICAgICogIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICogQHBhcmFtIHtBcnJheX0gW2hvbGRlcnNdIFRoZSBgcGFydGlhbHNgIHBsYWNlaG9sZGVyIGluZGV4ZXMuXG4gICAgICogQHBhcmFtIHtBcnJheX0gW3BhcnRpYWxzUmlnaHRdIFRoZSBhcmd1bWVudHMgdG8gYXBwZW5kIHRvIHRob3NlIHByb3ZpZGVkXG4gICAgICogIHRvIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICogQHBhcmFtIHtBcnJheX0gW2hvbGRlcnNSaWdodF0gVGhlIGBwYXJ0aWFsc1JpZ2h0YCBwbGFjZWhvbGRlciBpbmRleGVzLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFthcmdQb3NdIFRoZSBhcmd1bWVudCBwb3NpdGlvbnMgb2YgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2FyeV0gVGhlIGFyaXR5IGNhcCBvZiBgZnVuY2AuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFthcml0eV0gVGhlIGFyaXR5IG9mIGBmdW5jYC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyB3cmFwcGVkIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZUh5YnJpZChmdW5jLCBiaXRtYXNrLCB0aGlzQXJnLCBwYXJ0aWFscywgaG9sZGVycywgcGFydGlhbHNSaWdodCwgaG9sZGVyc1JpZ2h0LCBhcmdQb3MsIGFyeSwgYXJpdHkpIHtcbiAgICAgIHZhciBpc0FyeSA9IGJpdG1hc2sgJiBXUkFQX0FSWV9GTEFHLFxuICAgICAgICAgIGlzQmluZCA9IGJpdG1hc2sgJiBXUkFQX0JJTkRfRkxBRyxcbiAgICAgICAgICBpc0JpbmRLZXkgPSBiaXRtYXNrICYgV1JBUF9CSU5EX0tFWV9GTEFHLFxuICAgICAgICAgIGlzQ3VycmllZCA9IGJpdG1hc2sgJiAoV1JBUF9DVVJSWV9GTEFHIHwgV1JBUF9DVVJSWV9SSUdIVF9GTEFHKSxcbiAgICAgICAgICBpc0ZsaXAgPSBiaXRtYXNrICYgV1JBUF9GTElQX0ZMQUcsXG4gICAgICAgICAgQ3RvciA9IGlzQmluZEtleSA/IHVuZGVmaW5lZCA6IGNyZWF0ZUN0b3IoZnVuYyk7XG5cbiAgICAgIGZ1bmN0aW9uIHdyYXBwZXIoKSB7XG4gICAgICAgIHZhciBsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoLFxuICAgICAgICAgICAgYXJncyA9IEFycmF5KGxlbmd0aCksXG4gICAgICAgICAgICBpbmRleCA9IGxlbmd0aDtcblxuICAgICAgICB3aGlsZSAoaW5kZXgtLSkge1xuICAgICAgICAgIGFyZ3NbaW5kZXhdID0gYXJndW1lbnRzW2luZGV4XTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNDdXJyaWVkKSB7XG4gICAgICAgICAgdmFyIHBsYWNlaG9sZGVyID0gZ2V0SG9sZGVyKHdyYXBwZXIpLFxuICAgICAgICAgICAgICBob2xkZXJzQ291bnQgPSBjb3VudEhvbGRlcnMoYXJncywgcGxhY2Vob2xkZXIpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwYXJ0aWFscykge1xuICAgICAgICAgIGFyZ3MgPSBjb21wb3NlQXJncyhhcmdzLCBwYXJ0aWFscywgaG9sZGVycywgaXNDdXJyaWVkKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocGFydGlhbHNSaWdodCkge1xuICAgICAgICAgIGFyZ3MgPSBjb21wb3NlQXJnc1JpZ2h0KGFyZ3MsIHBhcnRpYWxzUmlnaHQsIGhvbGRlcnNSaWdodCwgaXNDdXJyaWVkKTtcbiAgICAgICAgfVxuICAgICAgICBsZW5ndGggLT0gaG9sZGVyc0NvdW50O1xuICAgICAgICBpZiAoaXNDdXJyaWVkICYmIGxlbmd0aCA8IGFyaXR5KSB7XG4gICAgICAgICAgdmFyIG5ld0hvbGRlcnMgPSByZXBsYWNlSG9sZGVycyhhcmdzLCBwbGFjZWhvbGRlcik7XG4gICAgICAgICAgcmV0dXJuIGNyZWF0ZVJlY3VycnkoXG4gICAgICAgICAgICBmdW5jLCBiaXRtYXNrLCBjcmVhdGVIeWJyaWQsIHdyYXBwZXIucGxhY2Vob2xkZXIsIHRoaXNBcmcsXG4gICAgICAgICAgICBhcmdzLCBuZXdIb2xkZXJzLCBhcmdQb3MsIGFyeSwgYXJpdHkgLSBsZW5ndGhcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIHZhciB0aGlzQmluZGluZyA9IGlzQmluZCA/IHRoaXNBcmcgOiB0aGlzLFxuICAgICAgICAgICAgZm4gPSBpc0JpbmRLZXkgPyB0aGlzQmluZGluZ1tmdW5jXSA6IGZ1bmM7XG5cbiAgICAgICAgbGVuZ3RoID0gYXJncy5sZW5ndGg7XG4gICAgICAgIGlmIChhcmdQb3MpIHtcbiAgICAgICAgICBhcmdzID0gcmVvcmRlcihhcmdzLCBhcmdQb3MpO1xuICAgICAgICB9IGVsc2UgaWYgKGlzRmxpcCAmJiBsZW5ndGggPiAxKSB7XG4gICAgICAgICAgYXJncy5yZXZlcnNlKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzQXJ5ICYmIGFyeSA8IGxlbmd0aCkge1xuICAgICAgICAgIGFyZ3MubGVuZ3RoID0gYXJ5O1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzICYmIHRoaXMgIT09IHJvb3QgJiYgdGhpcyBpbnN0YW5jZW9mIHdyYXBwZXIpIHtcbiAgICAgICAgICBmbiA9IEN0b3IgfHwgY3JlYXRlQ3Rvcihmbik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZuLmFwcGx5KHRoaXNCaW5kaW5nLCBhcmdzKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB3cmFwcGVyO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiBsaWtlIGBfLmludmVydEJ5YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gc2V0dGVyIFRoZSBmdW5jdGlvbiB0byBzZXQgYWNjdW11bGF0b3IgdmFsdWVzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHRvSXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIHRvIHJlc29sdmUgaXRlcmF0ZWVzLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGludmVydGVyIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZUludmVydGVyKHNldHRlciwgdG9JdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCwgaXRlcmF0ZWUpIHtcbiAgICAgICAgcmV0dXJuIGJhc2VJbnZlcnRlcihvYmplY3QsIHNldHRlciwgdG9JdGVyYXRlZShpdGVyYXRlZSksIHt9KTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgcGVyZm9ybXMgYSBtYXRoZW1hdGljYWwgb3BlcmF0aW9uIG9uIHR3byB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IG9wZXJhdG9yIFRoZSBmdW5jdGlvbiB0byBwZXJmb3JtIHRoZSBvcGVyYXRpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtkZWZhdWx0VmFsdWVdIFRoZSB2YWx1ZSB1c2VkIGZvciBgdW5kZWZpbmVkYCBhcmd1bWVudHMuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgbWF0aGVtYXRpY2FsIG9wZXJhdGlvbiBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVNYXRoT3BlcmF0aW9uKG9wZXJhdG9yLCBkZWZhdWx0VmFsdWUpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbih2YWx1ZSwgb3RoZXIpIHtcbiAgICAgICAgdmFyIHJlc3VsdDtcbiAgICAgICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQgJiYgb3RoZXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHJldHVybiBkZWZhdWx0VmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICByZXN1bHQgPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAob3RoZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGlmIChyZXN1bHQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIG90aGVyO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09ICdzdHJpbmcnIHx8IHR5cGVvZiBvdGhlciA9PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgdmFsdWUgPSBiYXNlVG9TdHJpbmcodmFsdWUpO1xuICAgICAgICAgICAgb3RoZXIgPSBiYXNlVG9TdHJpbmcob3RoZXIpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YWx1ZSA9IGJhc2VUb051bWJlcih2YWx1ZSk7XG4gICAgICAgICAgICBvdGhlciA9IGJhc2VUb051bWJlcihvdGhlcik7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJlc3VsdCA9IG9wZXJhdG9yKHZhbHVlLCBvdGhlcik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIGxpa2UgYF8ub3ZlcmAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGFycmF5RnVuYyBUaGUgZnVuY3Rpb24gdG8gaXRlcmF0ZSBvdmVyIGl0ZXJhdGVlcy5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBvdmVyIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZU92ZXIoYXJyYXlGdW5jKSB7XG4gICAgICByZXR1cm4gZmxhdFJlc3QoZnVuY3Rpb24oaXRlcmF0ZWVzKSB7XG4gICAgICAgIGl0ZXJhdGVlcyA9IGFycmF5TWFwKGl0ZXJhdGVlcywgYmFzZVVuYXJ5KGdldEl0ZXJhdGVlKCkpKTtcbiAgICAgICAgcmV0dXJuIGJhc2VSZXN0KGZ1bmN0aW9uKGFyZ3MpIHtcbiAgICAgICAgICB2YXIgdGhpc0FyZyA9IHRoaXM7XG4gICAgICAgICAgcmV0dXJuIGFycmF5RnVuYyhpdGVyYXRlZXMsIGZ1bmN0aW9uKGl0ZXJhdGVlKSB7XG4gICAgICAgICAgICByZXR1cm4gYXBwbHkoaXRlcmF0ZWUsIHRoaXNBcmcsIGFyZ3MpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgdGhlIHBhZGRpbmcgZm9yIGBzdHJpbmdgIGJhc2VkIG9uIGBsZW5ndGhgLiBUaGUgYGNoYXJzYCBzdHJpbmdcbiAgICAgKiBpcyB0cnVuY2F0ZWQgaWYgdGhlIG51bWJlciBvZiBjaGFyYWN0ZXJzIGV4Y2VlZHMgYGxlbmd0aGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBsZW5ndGggVGhlIHBhZGRpbmcgbGVuZ3RoLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbY2hhcnM9JyAnXSBUaGUgc3RyaW5nIHVzZWQgYXMgcGFkZGluZy5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBwYWRkaW5nIGZvciBgc3RyaW5nYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVQYWRkaW5nKGxlbmd0aCwgY2hhcnMpIHtcbiAgICAgIGNoYXJzID0gY2hhcnMgPT09IHVuZGVmaW5lZCA/ICcgJyA6IGJhc2VUb1N0cmluZyhjaGFycyk7XG5cbiAgICAgIHZhciBjaGFyc0xlbmd0aCA9IGNoYXJzLmxlbmd0aDtcbiAgICAgIGlmIChjaGFyc0xlbmd0aCA8IDIpIHtcbiAgICAgICAgcmV0dXJuIGNoYXJzTGVuZ3RoID8gYmFzZVJlcGVhdChjaGFycywgbGVuZ3RoKSA6IGNoYXJzO1xuICAgICAgfVxuICAgICAgdmFyIHJlc3VsdCA9IGJhc2VSZXBlYXQoY2hhcnMsIG5hdGl2ZUNlaWwobGVuZ3RoIC8gc3RyaW5nU2l6ZShjaGFycykpKTtcbiAgICAgIHJldHVybiBoYXNVbmljb2RlKGNoYXJzKVxuICAgICAgICA/IGNhc3RTbGljZShzdHJpbmdUb0FycmF5KHJlc3VsdCksIDAsIGxlbmd0aCkuam9pbignJylcbiAgICAgICAgOiByZXN1bHQuc2xpY2UoMCwgbGVuZ3RoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCB3cmFwcyBgZnVuY2AgdG8gaW52b2tlIGl0IHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nXG4gICAgICogb2YgYHRoaXNBcmdgIGFuZCBgcGFydGlhbHNgIHByZXBlbmRlZCB0byB0aGUgYXJndW1lbnRzIGl0IHJlY2VpdmVzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byB3cmFwLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGNyZWF0ZVdyYXBgIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICogQHBhcmFtIHsqfSB0aGlzQXJnIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgZnVuY2AuXG4gICAgICogQHBhcmFtIHtBcnJheX0gcGFydGlhbHMgVGhlIGFyZ3VtZW50cyB0byBwcmVwZW5kIHRvIHRob3NlIHByb3ZpZGVkIHRvXG4gICAgICogIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgd3JhcHBlZCBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVQYXJ0aWFsKGZ1bmMsIGJpdG1hc2ssIHRoaXNBcmcsIHBhcnRpYWxzKSB7XG4gICAgICB2YXIgaXNCaW5kID0gYml0bWFzayAmIFdSQVBfQklORF9GTEFHLFxuICAgICAgICAgIEN0b3IgPSBjcmVhdGVDdG9yKGZ1bmMpO1xuXG4gICAgICBmdW5jdGlvbiB3cmFwcGVyKCkge1xuICAgICAgICB2YXIgYXJnc0luZGV4ID0gLTEsXG4gICAgICAgICAgICBhcmdzTGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aCxcbiAgICAgICAgICAgIGxlZnRJbmRleCA9IC0xLFxuICAgICAgICAgICAgbGVmdExlbmd0aCA9IHBhcnRpYWxzLmxlbmd0aCxcbiAgICAgICAgICAgIGFyZ3MgPSBBcnJheShsZWZ0TGVuZ3RoICsgYXJnc0xlbmd0aCksXG4gICAgICAgICAgICBmbiA9ICh0aGlzICYmIHRoaXMgIT09IHJvb3QgJiYgdGhpcyBpbnN0YW5jZW9mIHdyYXBwZXIpID8gQ3RvciA6IGZ1bmM7XG5cbiAgICAgICAgd2hpbGUgKCsrbGVmdEluZGV4IDwgbGVmdExlbmd0aCkge1xuICAgICAgICAgIGFyZ3NbbGVmdEluZGV4XSA9IHBhcnRpYWxzW2xlZnRJbmRleF07XG4gICAgICAgIH1cbiAgICAgICAgd2hpbGUgKGFyZ3NMZW5ndGgtLSkge1xuICAgICAgICAgIGFyZ3NbbGVmdEluZGV4KytdID0gYXJndW1lbnRzWysrYXJnc0luZGV4XTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYXBwbHkoZm4sIGlzQmluZCA/IHRoaXNBcmcgOiB0aGlzLCBhcmdzKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB3cmFwcGVyO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBgXy5yYW5nZWAgb3IgYF8ucmFuZ2VSaWdodGAgZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2Zyb21SaWdodF0gU3BlY2lmeSBpdGVyYXRpbmcgZnJvbSByaWdodCB0byBsZWZ0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHJhbmdlIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZVJhbmdlKGZyb21SaWdodCkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKHN0YXJ0LCBlbmQsIHN0ZXApIHtcbiAgICAgICAgaWYgKHN0ZXAgJiYgdHlwZW9mIHN0ZXAgIT0gJ251bWJlcicgJiYgaXNJdGVyYXRlZUNhbGwoc3RhcnQsIGVuZCwgc3RlcCkpIHtcbiAgICAgICAgICBlbmQgPSBzdGVwID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIC8vIEVuc3VyZSB0aGUgc2lnbiBvZiBgLTBgIGlzIHByZXNlcnZlZC5cbiAgICAgICAgc3RhcnQgPSB0b0Zpbml0ZShzdGFydCk7XG4gICAgICAgIGlmIChlbmQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGVuZCA9IHN0YXJ0O1xuICAgICAgICAgIHN0YXJ0ID0gMDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBlbmQgPSB0b0Zpbml0ZShlbmQpO1xuICAgICAgICB9XG4gICAgICAgIHN0ZXAgPSBzdGVwID09PSB1bmRlZmluZWQgPyAoc3RhcnQgPCBlbmQgPyAxIDogLTEpIDogdG9GaW5pdGUoc3RlcCk7XG4gICAgICAgIHJldHVybiBiYXNlUmFuZ2Uoc3RhcnQsIGVuZCwgc3RlcCwgZnJvbVJpZ2h0KTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgcGVyZm9ybXMgYSByZWxhdGlvbmFsIG9wZXJhdGlvbiBvbiB0d28gdmFsdWVzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBvcGVyYXRvciBUaGUgZnVuY3Rpb24gdG8gcGVyZm9ybSB0aGUgb3BlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHJlbGF0aW9uYWwgb3BlcmF0aW9uIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZVJlbGF0aW9uYWxPcGVyYXRpb24ob3BlcmF0b3IpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbih2YWx1ZSwgb3RoZXIpIHtcbiAgICAgICAgaWYgKCEodHlwZW9mIHZhbHVlID09ICdzdHJpbmcnICYmIHR5cGVvZiBvdGhlciA9PSAnc3RyaW5nJykpIHtcbiAgICAgICAgICB2YWx1ZSA9IHRvTnVtYmVyKHZhbHVlKTtcbiAgICAgICAgICBvdGhlciA9IHRvTnVtYmVyKG90aGVyKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb3BlcmF0b3IodmFsdWUsIG90aGVyKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgd3JhcHMgYGZ1bmNgIHRvIGNvbnRpbnVlIGN1cnJ5aW5nLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byB3cmFwLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGNyZWF0ZVdyYXBgIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gd3JhcEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNyZWF0ZSB0aGUgYGZ1bmNgIHdyYXBwZXIuXG4gICAgICogQHBhcmFtIHsqfSBwbGFjZWhvbGRlciBUaGUgcGxhY2Vob2xkZXIgdmFsdWUuXG4gICAgICogQHBhcmFtIHsqfSBbdGhpc0FyZ10gVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBmdW5jYC5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbcGFydGlhbHNdIFRoZSBhcmd1bWVudHMgdG8gcHJlcGVuZCB0byB0aG9zZSBwcm92aWRlZCB0b1xuICAgICAqICB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtob2xkZXJzXSBUaGUgYHBhcnRpYWxzYCBwbGFjZWhvbGRlciBpbmRleGVzLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFthcmdQb3NdIFRoZSBhcmd1bWVudCBwb3NpdGlvbnMgb2YgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2FyeV0gVGhlIGFyaXR5IGNhcCBvZiBgZnVuY2AuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFthcml0eV0gVGhlIGFyaXR5IG9mIGBmdW5jYC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyB3cmFwcGVkIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZVJlY3VycnkoZnVuYywgYml0bWFzaywgd3JhcEZ1bmMsIHBsYWNlaG9sZGVyLCB0aGlzQXJnLCBwYXJ0aWFscywgaG9sZGVycywgYXJnUG9zLCBhcnksIGFyaXR5KSB7XG4gICAgICB2YXIgaXNDdXJyeSA9IGJpdG1hc2sgJiBXUkFQX0NVUlJZX0ZMQUcsXG4gICAgICAgICAgbmV3SG9sZGVycyA9IGlzQ3VycnkgPyBob2xkZXJzIDogdW5kZWZpbmVkLFxuICAgICAgICAgIG5ld0hvbGRlcnNSaWdodCA9IGlzQ3VycnkgPyB1bmRlZmluZWQgOiBob2xkZXJzLFxuICAgICAgICAgIG5ld1BhcnRpYWxzID0gaXNDdXJyeSA/IHBhcnRpYWxzIDogdW5kZWZpbmVkLFxuICAgICAgICAgIG5ld1BhcnRpYWxzUmlnaHQgPSBpc0N1cnJ5ID8gdW5kZWZpbmVkIDogcGFydGlhbHM7XG5cbiAgICAgIGJpdG1hc2sgfD0gKGlzQ3VycnkgPyBXUkFQX1BBUlRJQUxfRkxBRyA6IFdSQVBfUEFSVElBTF9SSUdIVF9GTEFHKTtcbiAgICAgIGJpdG1hc2sgJj0gfihpc0N1cnJ5ID8gV1JBUF9QQVJUSUFMX1JJR0hUX0ZMQUcgOiBXUkFQX1BBUlRJQUxfRkxBRyk7XG5cbiAgICAgIGlmICghKGJpdG1hc2sgJiBXUkFQX0NVUlJZX0JPVU5EX0ZMQUcpKSB7XG4gICAgICAgIGJpdG1hc2sgJj0gfihXUkFQX0JJTkRfRkxBRyB8IFdSQVBfQklORF9LRVlfRkxBRyk7XG4gICAgICB9XG4gICAgICB2YXIgbmV3RGF0YSA9IFtcbiAgICAgICAgZnVuYywgYml0bWFzaywgdGhpc0FyZywgbmV3UGFydGlhbHMsIG5ld0hvbGRlcnMsIG5ld1BhcnRpYWxzUmlnaHQsXG4gICAgICAgIG5ld0hvbGRlcnNSaWdodCwgYXJnUG9zLCBhcnksIGFyaXR5XG4gICAgICBdO1xuXG4gICAgICB2YXIgcmVzdWx0ID0gd3JhcEZ1bmMuYXBwbHkodW5kZWZpbmVkLCBuZXdEYXRhKTtcbiAgICAgIGlmIChpc0xhemlhYmxlKGZ1bmMpKSB7XG4gICAgICAgIHNldERhdGEocmVzdWx0LCBuZXdEYXRhKTtcbiAgICAgIH1cbiAgICAgIHJlc3VsdC5wbGFjZWhvbGRlciA9IHBsYWNlaG9sZGVyO1xuICAgICAgcmV0dXJuIHNldFdyYXBUb1N0cmluZyhyZXN1bHQsIGZ1bmMsIGJpdG1hc2spO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiBsaWtlIGBfLnJvdW5kYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG1ldGhvZE5hbWUgVGhlIG5hbWUgb2YgdGhlIGBNYXRoYCBtZXRob2QgdG8gdXNlIHdoZW4gcm91bmRpbmcuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgcm91bmQgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlUm91bmQobWV0aG9kTmFtZSkge1xuICAgICAgdmFyIGZ1bmMgPSBNYXRoW21ldGhvZE5hbWVdO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKG51bWJlciwgcHJlY2lzaW9uKSB7XG4gICAgICAgIG51bWJlciA9IHRvTnVtYmVyKG51bWJlcik7XG4gICAgICAgIHByZWNpc2lvbiA9IHByZWNpc2lvbiA9PSBudWxsID8gMCA6IG5hdGl2ZU1pbih0b0ludGVnZXIocHJlY2lzaW9uKSwgMjkyKTtcbiAgICAgICAgaWYgKHByZWNpc2lvbiAmJiBuYXRpdmVJc0Zpbml0ZShudW1iZXIpKSB7XG4gICAgICAgICAgLy8gU2hpZnQgd2l0aCBleHBvbmVudGlhbCBub3RhdGlvbiB0byBhdm9pZCBmbG9hdGluZy1wb2ludCBpc3N1ZXMuXG4gICAgICAgICAgLy8gU2VlIFtNRE5dKGh0dHBzOi8vbWRuLmlvL3JvdW5kI0V4YW1wbGVzKSBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAgICAgIHZhciBwYWlyID0gKHRvU3RyaW5nKG51bWJlcikgKyAnZScpLnNwbGl0KCdlJyksXG4gICAgICAgICAgICAgIHZhbHVlID0gZnVuYyhwYWlyWzBdICsgJ2UnICsgKCtwYWlyWzFdICsgcHJlY2lzaW9uKSk7XG5cbiAgICAgICAgICBwYWlyID0gKHRvU3RyaW5nKHZhbHVlKSArICdlJykuc3BsaXQoJ2UnKTtcbiAgICAgICAgICByZXR1cm4gKyhwYWlyWzBdICsgJ2UnICsgKCtwYWlyWzFdIC0gcHJlY2lzaW9uKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZ1bmMobnVtYmVyKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHNldCBvYmplY3Qgb2YgYHZhbHVlc2AuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHZhbHVlcyBUaGUgdmFsdWVzIHRvIGFkZCB0byB0aGUgc2V0LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBzZXQuXG4gICAgICovXG4gICAgdmFyIGNyZWF0ZVNldCA9ICEoU2V0ICYmICgxIC8gc2V0VG9BcnJheShuZXcgU2V0KFssLTBdKSlbMV0pID09IElORklOSVRZKSA/IG5vb3AgOiBmdW5jdGlvbih2YWx1ZXMpIHtcbiAgICAgIHJldHVybiBuZXcgU2V0KHZhbHVlcyk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBgXy50b1BhaXJzYCBvciBgXy50b1BhaXJzSW5gIGZ1bmN0aW9uLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBrZXlzRnVuYyBUaGUgZnVuY3Rpb24gdG8gZ2V0IHRoZSBrZXlzIG9mIGEgZ2l2ZW4gb2JqZWN0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHBhaXJzIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZVRvUGFpcnMoa2V5c0Z1bmMpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihvYmplY3QpIHtcbiAgICAgICAgdmFyIHRhZyA9IGdldFRhZyhvYmplY3QpO1xuICAgICAgICBpZiAodGFnID09IG1hcFRhZykge1xuICAgICAgICAgIHJldHVybiBtYXBUb0FycmF5KG9iamVjdCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRhZyA9PSBzZXRUYWcpIHtcbiAgICAgICAgICByZXR1cm4gc2V0VG9QYWlycyhvYmplY3QpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBiYXNlVG9QYWlycyhvYmplY3QsIGtleXNGdW5jKG9iamVjdCkpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBlaXRoZXIgY3VycmllcyBvciBpbnZva2VzIGBmdW5jYCB3aXRoIG9wdGlvbmFsXG4gICAgICogYHRoaXNgIGJpbmRpbmcgYW5kIHBhcnRpYWxseSBhcHBsaWVkIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbnxzdHJpbmd9IGZ1bmMgVGhlIGZ1bmN0aW9uIG9yIG1ldGhvZCBuYW1lIHRvIHdyYXAuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuXG4gICAgICogICAgMSAtIGBfLmJpbmRgXG4gICAgICogICAgMiAtIGBfLmJpbmRLZXlgXG4gICAgICogICAgNCAtIGBfLmN1cnJ5YCBvciBgXy5jdXJyeVJpZ2h0YCBvZiBhIGJvdW5kIGZ1bmN0aW9uXG4gICAgICogICAgOCAtIGBfLmN1cnJ5YFxuICAgICAqICAgMTYgLSBgXy5jdXJyeVJpZ2h0YFxuICAgICAqICAgMzIgLSBgXy5wYXJ0aWFsYFxuICAgICAqICAgNjQgLSBgXy5wYXJ0aWFsUmlnaHRgXG4gICAgICogIDEyOCAtIGBfLnJlYXJnYFxuICAgICAqICAyNTYgLSBgXy5hcnlgXG4gICAgICogIDUxMiAtIGBfLmZsaXBgXG4gICAgICogQHBhcmFtIHsqfSBbdGhpc0FyZ10gVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBmdW5jYC5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbcGFydGlhbHNdIFRoZSBhcmd1bWVudHMgdG8gYmUgcGFydGlhbGx5IGFwcGxpZWQuXG4gICAgICogQHBhcmFtIHtBcnJheX0gW2hvbGRlcnNdIFRoZSBgcGFydGlhbHNgIHBsYWNlaG9sZGVyIGluZGV4ZXMuXG4gICAgICogQHBhcmFtIHtBcnJheX0gW2FyZ1Bvc10gVGhlIGFyZ3VtZW50IHBvc2l0aW9ucyBvZiB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbYXJ5XSBUaGUgYXJpdHkgY2FwIG9mIGBmdW5jYC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2FyaXR5XSBUaGUgYXJpdHkgb2YgYGZ1bmNgLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHdyYXBwZWQgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlV3JhcChmdW5jLCBiaXRtYXNrLCB0aGlzQXJnLCBwYXJ0aWFscywgaG9sZGVycywgYXJnUG9zLCBhcnksIGFyaXR5KSB7XG4gICAgICB2YXIgaXNCaW5kS2V5ID0gYml0bWFzayAmIFdSQVBfQklORF9LRVlfRkxBRztcbiAgICAgIGlmICghaXNCaW5kS2V5ICYmIHR5cGVvZiBmdW5jICE9ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihGVU5DX0VSUk9SX1RFWFQpO1xuICAgICAgfVxuICAgICAgdmFyIGxlbmd0aCA9IHBhcnRpYWxzID8gcGFydGlhbHMubGVuZ3RoIDogMDtcbiAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgIGJpdG1hc2sgJj0gfihXUkFQX1BBUlRJQUxfRkxBRyB8IFdSQVBfUEFSVElBTF9SSUdIVF9GTEFHKTtcbiAgICAgICAgcGFydGlhbHMgPSBob2xkZXJzID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgYXJ5ID0gYXJ5ID09PSB1bmRlZmluZWQgPyBhcnkgOiBuYXRpdmVNYXgodG9JbnRlZ2VyKGFyeSksIDApO1xuICAgICAgYXJpdHkgPSBhcml0eSA9PT0gdW5kZWZpbmVkID8gYXJpdHkgOiB0b0ludGVnZXIoYXJpdHkpO1xuICAgICAgbGVuZ3RoIC09IGhvbGRlcnMgPyBob2xkZXJzLmxlbmd0aCA6IDA7XG5cbiAgICAgIGlmIChiaXRtYXNrICYgV1JBUF9QQVJUSUFMX1JJR0hUX0ZMQUcpIHtcbiAgICAgICAgdmFyIHBhcnRpYWxzUmlnaHQgPSBwYXJ0aWFscyxcbiAgICAgICAgICAgIGhvbGRlcnNSaWdodCA9IGhvbGRlcnM7XG5cbiAgICAgICAgcGFydGlhbHMgPSBob2xkZXJzID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgdmFyIGRhdGEgPSBpc0JpbmRLZXkgPyB1bmRlZmluZWQgOiBnZXREYXRhKGZ1bmMpO1xuXG4gICAgICB2YXIgbmV3RGF0YSA9IFtcbiAgICAgICAgZnVuYywgYml0bWFzaywgdGhpc0FyZywgcGFydGlhbHMsIGhvbGRlcnMsIHBhcnRpYWxzUmlnaHQsIGhvbGRlcnNSaWdodCxcbiAgICAgICAgYXJnUG9zLCBhcnksIGFyaXR5XG4gICAgICBdO1xuXG4gICAgICBpZiAoZGF0YSkge1xuICAgICAgICBtZXJnZURhdGEobmV3RGF0YSwgZGF0YSk7XG4gICAgICB9XG4gICAgICBmdW5jID0gbmV3RGF0YVswXTtcbiAgICAgIGJpdG1hc2sgPSBuZXdEYXRhWzFdO1xuICAgICAgdGhpc0FyZyA9IG5ld0RhdGFbMl07XG4gICAgICBwYXJ0aWFscyA9IG5ld0RhdGFbM107XG4gICAgICBob2xkZXJzID0gbmV3RGF0YVs0XTtcbiAgICAgIGFyaXR5ID0gbmV3RGF0YVs5XSA9IG5ld0RhdGFbOV0gPT09IHVuZGVmaW5lZFxuICAgICAgICA/IChpc0JpbmRLZXkgPyAwIDogZnVuYy5sZW5ndGgpXG4gICAgICAgIDogbmF0aXZlTWF4KG5ld0RhdGFbOV0gLSBsZW5ndGgsIDApO1xuXG4gICAgICBpZiAoIWFyaXR5ICYmIGJpdG1hc2sgJiAoV1JBUF9DVVJSWV9GTEFHIHwgV1JBUF9DVVJSWV9SSUdIVF9GTEFHKSkge1xuICAgICAgICBiaXRtYXNrICY9IH4oV1JBUF9DVVJSWV9GTEFHIHwgV1JBUF9DVVJSWV9SSUdIVF9GTEFHKTtcbiAgICAgIH1cbiAgICAgIGlmICghYml0bWFzayB8fCBiaXRtYXNrID09IFdSQVBfQklORF9GTEFHKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSBjcmVhdGVCaW5kKGZ1bmMsIGJpdG1hc2ssIHRoaXNBcmcpO1xuICAgICAgfSBlbHNlIGlmIChiaXRtYXNrID09IFdSQVBfQ1VSUllfRkxBRyB8fCBiaXRtYXNrID09IFdSQVBfQ1VSUllfUklHSFRfRkxBRykge1xuICAgICAgICByZXN1bHQgPSBjcmVhdGVDdXJyeShmdW5jLCBiaXRtYXNrLCBhcml0eSk7XG4gICAgICB9IGVsc2UgaWYgKChiaXRtYXNrID09IFdSQVBfUEFSVElBTF9GTEFHIHx8IGJpdG1hc2sgPT0gKFdSQVBfQklORF9GTEFHIHwgV1JBUF9QQVJUSUFMX0ZMQUcpKSAmJiAhaG9sZGVycy5sZW5ndGgpIHtcbiAgICAgICAgcmVzdWx0ID0gY3JlYXRlUGFydGlhbChmdW5jLCBiaXRtYXNrLCB0aGlzQXJnLCBwYXJ0aWFscyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXN1bHQgPSBjcmVhdGVIeWJyaWQuYXBwbHkodW5kZWZpbmVkLCBuZXdEYXRhKTtcbiAgICAgIH1cbiAgICAgIHZhciBzZXR0ZXIgPSBkYXRhID8gYmFzZVNldERhdGEgOiBzZXREYXRhO1xuICAgICAgcmV0dXJuIHNldFdyYXBUb1N0cmluZyhzZXR0ZXIocmVzdWx0LCBuZXdEYXRhKSwgZnVuYywgYml0bWFzayk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVXNlZCBieSBgXy5kZWZhdWx0c2AgdG8gY3VzdG9taXplIGl0cyBgXy5hc3NpZ25JbmAgdXNlIHRvIGFzc2lnbiBwcm9wZXJ0aWVzXG4gICAgICogb2Ygc291cmNlIG9iamVjdHMgdG8gdGhlIGRlc3RpbmF0aW9uIG9iamVjdCBmb3IgYWxsIGRlc3RpbmF0aW9uIHByb3BlcnRpZXNcbiAgICAgKiB0aGF0IHJlc29sdmUgdG8gYHVuZGVmaW5lZGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gb2JqVmFsdWUgVGhlIGRlc3RpbmF0aW9uIHZhbHVlLlxuICAgICAqIEBwYXJhbSB7Kn0gc3JjVmFsdWUgVGhlIHNvdXJjZSB2YWx1ZS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGFzc2lnbi5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBwYXJlbnQgb2JqZWN0IG9mIGBvYmpWYWx1ZWAuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHZhbHVlIHRvIGFzc2lnbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjdXN0b21EZWZhdWx0c0Fzc2lnbkluKG9ialZhbHVlLCBzcmNWYWx1ZSwga2V5LCBvYmplY3QpIHtcbiAgICAgIGlmIChvYmpWYWx1ZSA9PT0gdW5kZWZpbmVkIHx8XG4gICAgICAgICAgKGVxKG9ialZhbHVlLCBvYmplY3RQcm90b1trZXldKSAmJiAhaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIGtleSkpKSB7XG4gICAgICAgIHJldHVybiBzcmNWYWx1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBvYmpWYWx1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBVc2VkIGJ5IGBfLmRlZmF1bHRzRGVlcGAgdG8gY3VzdG9taXplIGl0cyBgXy5tZXJnZWAgdXNlIHRvIG1lcmdlIHNvdXJjZVxuICAgICAqIG9iamVjdHMgaW50byBkZXN0aW5hdGlvbiBvYmplY3RzIHRoYXQgYXJlIHBhc3NlZCB0aHJ1LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IG9ialZhbHVlIFRoZSBkZXN0aW5hdGlvbiB2YWx1ZS5cbiAgICAgKiBAcGFyYW0geyp9IHNyY1ZhbHVlIFRoZSBzb3VyY2UgdmFsdWUuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBtZXJnZS5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBwYXJlbnQgb2JqZWN0IG9mIGBvYmpWYWx1ZWAuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgcGFyZW50IG9iamVjdCBvZiBgc3JjVmFsdWVgLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbc3RhY2tdIFRyYWNrcyB0cmF2ZXJzZWQgc291cmNlIHZhbHVlcyBhbmQgdGhlaXIgbWVyZ2VkXG4gICAgICogIGNvdW50ZXJwYXJ0cy5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgdmFsdWUgdG8gYXNzaWduLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGN1c3RvbURlZmF1bHRzTWVyZ2Uob2JqVmFsdWUsIHNyY1ZhbHVlLCBrZXksIG9iamVjdCwgc291cmNlLCBzdGFjaykge1xuICAgICAgaWYgKGlzT2JqZWN0KG9ialZhbHVlKSAmJiBpc09iamVjdChzcmNWYWx1ZSkpIHtcbiAgICAgICAgLy8gUmVjdXJzaXZlbHkgbWVyZ2Ugb2JqZWN0cyBhbmQgYXJyYXlzIChzdXNjZXB0aWJsZSB0byBjYWxsIHN0YWNrIGxpbWl0cykuXG4gICAgICAgIHN0YWNrLnNldChzcmNWYWx1ZSwgb2JqVmFsdWUpO1xuICAgICAgICBiYXNlTWVyZ2Uob2JqVmFsdWUsIHNyY1ZhbHVlLCB1bmRlZmluZWQsIGN1c3RvbURlZmF1bHRzTWVyZ2UsIHN0YWNrKTtcbiAgICAgICAgc3RhY2tbJ2RlbGV0ZSddKHNyY1ZhbHVlKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBvYmpWYWx1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBVc2VkIGJ5IGBfLm9taXRgIHRvIGN1c3RvbWl6ZSBpdHMgYF8uY2xvbmVEZWVwYCB1c2UgdG8gb25seSBjbG9uZSBwbGFpblxuICAgICAqIG9iamVjdHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBpbnNwZWN0LlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSB1bmNsb25lZCB2YWx1ZSBvciBgdW5kZWZpbmVkYCB0byBkZWZlciBjbG9uaW5nIHRvIGBfLmNsb25lRGVlcGAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3VzdG9tT21pdENsb25lKHZhbHVlKSB7XG4gICAgICByZXR1cm4gaXNQbGFpbk9iamVjdCh2YWx1ZSkgPyB1bmRlZmluZWQgOiB2YWx1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VJc0VxdWFsRGVlcGAgZm9yIGFycmF5cyB3aXRoIHN1cHBvcnQgZm9yXG4gICAgICogcGFydGlhbCBkZWVwIGNvbXBhcmlzb25zLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBvdGhlciBUaGUgb3RoZXIgYXJyYXkgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy4gU2VlIGBiYXNlSXNFcXVhbGAgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjdXN0b21pemVyIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29tcGFyaXNvbnMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZXF1YWxGdW5jIFRoZSBmdW5jdGlvbiB0byBkZXRlcm1pbmUgZXF1aXZhbGVudHMgb2YgdmFsdWVzLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzdGFjayBUcmFja3MgdHJhdmVyc2VkIGBhcnJheWAgYW5kIGBvdGhlcmAgb2JqZWN0cy5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGFycmF5cyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGVxdWFsQXJyYXlzKGFycmF5LCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjaykge1xuICAgICAgdmFyIGlzUGFydGlhbCA9IGJpdG1hc2sgJiBDT01QQVJFX1BBUlRJQUxfRkxBRyxcbiAgICAgICAgICBhcnJMZW5ndGggPSBhcnJheS5sZW5ndGgsXG4gICAgICAgICAgb3RoTGVuZ3RoID0gb3RoZXIubGVuZ3RoO1xuXG4gICAgICBpZiAoYXJyTGVuZ3RoICE9IG90aExlbmd0aCAmJiAhKGlzUGFydGlhbCAmJiBvdGhMZW5ndGggPiBhcnJMZW5ndGgpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIC8vIEFzc3VtZSBjeWNsaWMgdmFsdWVzIGFyZSBlcXVhbC5cbiAgICAgIHZhciBzdGFja2VkID0gc3RhY2suZ2V0KGFycmF5KTtcbiAgICAgIGlmIChzdGFja2VkICYmIHN0YWNrLmdldChvdGhlcikpIHtcbiAgICAgICAgcmV0dXJuIHN0YWNrZWQgPT0gb3RoZXI7XG4gICAgICB9XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICByZXN1bHQgPSB0cnVlLFxuICAgICAgICAgIHNlZW4gPSAoYml0bWFzayAmIENPTVBBUkVfVU5PUkRFUkVEX0ZMQUcpID8gbmV3IFNldENhY2hlIDogdW5kZWZpbmVkO1xuXG4gICAgICBzdGFjay5zZXQoYXJyYXksIG90aGVyKTtcbiAgICAgIHN0YWNrLnNldChvdGhlciwgYXJyYXkpO1xuXG4gICAgICAvLyBJZ25vcmUgbm9uLWluZGV4IHByb3BlcnRpZXMuXG4gICAgICB3aGlsZSAoKytpbmRleCA8IGFyckxlbmd0aCkge1xuICAgICAgICB2YXIgYXJyVmFsdWUgPSBhcnJheVtpbmRleF0sXG4gICAgICAgICAgICBvdGhWYWx1ZSA9IG90aGVyW2luZGV4XTtcblxuICAgICAgICBpZiAoY3VzdG9taXplcikge1xuICAgICAgICAgIHZhciBjb21wYXJlZCA9IGlzUGFydGlhbFxuICAgICAgICAgICAgPyBjdXN0b21pemVyKG90aFZhbHVlLCBhcnJWYWx1ZSwgaW5kZXgsIG90aGVyLCBhcnJheSwgc3RhY2spXG4gICAgICAgICAgICA6IGN1c3RvbWl6ZXIoYXJyVmFsdWUsIG90aFZhbHVlLCBpbmRleCwgYXJyYXksIG90aGVyLCBzdGFjayk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNvbXBhcmVkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBpZiAoY29tcGFyZWQpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXN1bHQgPSBmYWxzZTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICAvLyBSZWN1cnNpdmVseSBjb21wYXJlIGFycmF5cyAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpLlxuICAgICAgICBpZiAoc2Vlbikge1xuICAgICAgICAgIGlmICghYXJyYXlTb21lKG90aGVyLCBmdW5jdGlvbihvdGhWYWx1ZSwgb3RoSW5kZXgpIHtcbiAgICAgICAgICAgICAgICBpZiAoIWNhY2hlSGFzKHNlZW4sIG90aEluZGV4KSAmJlxuICAgICAgICAgICAgICAgICAgICAoYXJyVmFsdWUgPT09IG90aFZhbHVlIHx8IGVxdWFsRnVuYyhhcnJWYWx1ZSwgb3RoVmFsdWUsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIHN0YWNrKSkpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBzZWVuLnB1c2gob3RoSW5kZXgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSkpIHtcbiAgICAgICAgICAgIHJlc3VsdCA9IGZhbHNlO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKCEoXG4gICAgICAgICAgICAgIGFyclZhbHVlID09PSBvdGhWYWx1ZSB8fFxuICAgICAgICAgICAgICAgIGVxdWFsRnVuYyhhcnJWYWx1ZSwgb3RoVmFsdWUsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIHN0YWNrKVxuICAgICAgICAgICAgKSkge1xuICAgICAgICAgIHJlc3VsdCA9IGZhbHNlO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBzdGFja1snZGVsZXRlJ10oYXJyYXkpO1xuICAgICAgc3RhY2tbJ2RlbGV0ZSddKG90aGVyKTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlSXNFcXVhbERlZXBgIGZvciBjb21wYXJpbmcgb2JqZWN0cyBvZlxuICAgICAqIHRoZSBzYW1lIGB0b1N0cmluZ1RhZ2AuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBmdW5jdGlvbiBvbmx5IHN1cHBvcnRzIGNvbXBhcmluZyB2YWx1ZXMgd2l0aCB0YWdzIG9mXG4gICAgICogYEJvb2xlYW5gLCBgRGF0ZWAsIGBFcnJvcmAsIGBOdW1iZXJgLCBgUmVnRXhwYCwgb3IgYFN0cmluZ2AuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvdGhlciBUaGUgb3RoZXIgb2JqZWN0IHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHRhZyBUaGUgYHRvU3RyaW5nVGFnYCBvZiB0aGUgb2JqZWN0cyB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGJhc2VJc0VxdWFsYCBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGN1c3RvbWl6ZXIgVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBlcXVhbEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGRldGVybWluZSBlcXVpdmFsZW50cyBvZiB2YWx1ZXMuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHN0YWNrIFRyYWNrcyB0cmF2ZXJzZWQgYG9iamVjdGAgYW5kIGBvdGhlcmAgb2JqZWN0cy5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIG9iamVjdHMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBlcXVhbEJ5VGFnKG9iamVjdCwgb3RoZXIsIHRhZywgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjaykge1xuICAgICAgc3dpdGNoICh0YWcpIHtcbiAgICAgICAgY2FzZSBkYXRhVmlld1RhZzpcbiAgICAgICAgICBpZiAoKG9iamVjdC5ieXRlTGVuZ3RoICE9IG90aGVyLmJ5dGVMZW5ndGgpIHx8XG4gICAgICAgICAgICAgIChvYmplY3QuYnl0ZU9mZnNldCAhPSBvdGhlci5ieXRlT2Zmc2V0KSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBvYmplY3QgPSBvYmplY3QuYnVmZmVyO1xuICAgICAgICAgIG90aGVyID0gb3RoZXIuYnVmZmVyO1xuXG4gICAgICAgIGNhc2UgYXJyYXlCdWZmZXJUYWc6XG4gICAgICAgICAgaWYgKChvYmplY3QuYnl0ZUxlbmd0aCAhPSBvdGhlci5ieXRlTGVuZ3RoKSB8fFxuICAgICAgICAgICAgICAhZXF1YWxGdW5jKG5ldyBVaW50OEFycmF5KG9iamVjdCksIG5ldyBVaW50OEFycmF5KG90aGVyKSkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG5cbiAgICAgICAgY2FzZSBib29sVGFnOlxuICAgICAgICBjYXNlIGRhdGVUYWc6XG4gICAgICAgIGNhc2UgbnVtYmVyVGFnOlxuICAgICAgICAgIC8vIENvZXJjZSBib29sZWFucyB0byBgMWAgb3IgYDBgIGFuZCBkYXRlcyB0byBtaWxsaXNlY29uZHMuXG4gICAgICAgICAgLy8gSW52YWxpZCBkYXRlcyBhcmUgY29lcmNlZCB0byBgTmFOYC5cbiAgICAgICAgICByZXR1cm4gZXEoK29iamVjdCwgK290aGVyKTtcblxuICAgICAgICBjYXNlIGVycm9yVGFnOlxuICAgICAgICAgIHJldHVybiBvYmplY3QubmFtZSA9PSBvdGhlci5uYW1lICYmIG9iamVjdC5tZXNzYWdlID09IG90aGVyLm1lc3NhZ2U7XG5cbiAgICAgICAgY2FzZSByZWdleHBUYWc6XG4gICAgICAgIGNhc2Ugc3RyaW5nVGFnOlxuICAgICAgICAgIC8vIENvZXJjZSByZWdleGVzIHRvIHN0cmluZ3MgYW5kIHRyZWF0IHN0cmluZ3MsIHByaW1pdGl2ZXMgYW5kIG9iamVjdHMsXG4gICAgICAgICAgLy8gYXMgZXF1YWwuIFNlZSBodHRwOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtcmVnZXhwLnByb3RvdHlwZS50b3N0cmluZ1xuICAgICAgICAgIC8vIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICAgICAgcmV0dXJuIG9iamVjdCA9PSAob3RoZXIgKyAnJyk7XG5cbiAgICAgICAgY2FzZSBtYXBUYWc6XG4gICAgICAgICAgdmFyIGNvbnZlcnQgPSBtYXBUb0FycmF5O1xuXG4gICAgICAgIGNhc2Ugc2V0VGFnOlxuICAgICAgICAgIHZhciBpc1BhcnRpYWwgPSBiaXRtYXNrICYgQ09NUEFSRV9QQVJUSUFMX0ZMQUc7XG4gICAgICAgICAgY29udmVydCB8fCAoY29udmVydCA9IHNldFRvQXJyYXkpO1xuXG4gICAgICAgICAgaWYgKG9iamVjdC5zaXplICE9IG90aGVyLnNpemUgJiYgIWlzUGFydGlhbCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgICAvLyBBc3N1bWUgY3ljbGljIHZhbHVlcyBhcmUgZXF1YWwuXG4gICAgICAgICAgdmFyIHN0YWNrZWQgPSBzdGFjay5nZXQob2JqZWN0KTtcbiAgICAgICAgICBpZiAoc3RhY2tlZCkge1xuICAgICAgICAgICAgcmV0dXJuIHN0YWNrZWQgPT0gb3RoZXI7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJpdG1hc2sgfD0gQ09NUEFSRV9VTk9SREVSRURfRkxBRztcblxuICAgICAgICAgIC8vIFJlY3Vyc2l2ZWx5IGNvbXBhcmUgb2JqZWN0cyAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpLlxuICAgICAgICAgIHN0YWNrLnNldChvYmplY3QsIG90aGVyKTtcbiAgICAgICAgICB2YXIgcmVzdWx0ID0gZXF1YWxBcnJheXMoY29udmVydChvYmplY3QpLCBjb252ZXJ0KG90aGVyKSwgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjayk7XG4gICAgICAgICAgc3RhY2tbJ2RlbGV0ZSddKG9iamVjdCk7XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdDtcblxuICAgICAgICBjYXNlIHN5bWJvbFRhZzpcbiAgICAgICAgICBpZiAoc3ltYm9sVmFsdWVPZikge1xuICAgICAgICAgICAgcmV0dXJuIHN5bWJvbFZhbHVlT2YuY2FsbChvYmplY3QpID09IHN5bWJvbFZhbHVlT2YuY2FsbChvdGhlcik7XG4gICAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZUlzRXF1YWxEZWVwYCBmb3Igb2JqZWN0cyB3aXRoIHN1cHBvcnQgZm9yXG4gICAgICogcGFydGlhbCBkZWVwIGNvbXBhcmlzb25zLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3RoZXIgVGhlIG90aGVyIG9iamVjdCB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGJhc2VJc0VxdWFsYCBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGN1c3RvbWl6ZXIgVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBlcXVhbEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGRldGVybWluZSBlcXVpdmFsZW50cyBvZiB2YWx1ZXMuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHN0YWNrIFRyYWNrcyB0cmF2ZXJzZWQgYG9iamVjdGAgYW5kIGBvdGhlcmAgb2JqZWN0cy5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIG9iamVjdHMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBlcXVhbE9iamVjdHMob2JqZWN0LCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjaykge1xuICAgICAgdmFyIGlzUGFydGlhbCA9IGJpdG1hc2sgJiBDT01QQVJFX1BBUlRJQUxfRkxBRyxcbiAgICAgICAgICBvYmpQcm9wcyA9IGdldEFsbEtleXMob2JqZWN0KSxcbiAgICAgICAgICBvYmpMZW5ndGggPSBvYmpQcm9wcy5sZW5ndGgsXG4gICAgICAgICAgb3RoUHJvcHMgPSBnZXRBbGxLZXlzKG90aGVyKSxcbiAgICAgICAgICBvdGhMZW5ndGggPSBvdGhQcm9wcy5sZW5ndGg7XG5cbiAgICAgIGlmIChvYmpMZW5ndGggIT0gb3RoTGVuZ3RoICYmICFpc1BhcnRpYWwpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgdmFyIGluZGV4ID0gb2JqTGVuZ3RoO1xuICAgICAgd2hpbGUgKGluZGV4LS0pIHtcbiAgICAgICAgdmFyIGtleSA9IG9ialByb3BzW2luZGV4XTtcbiAgICAgICAgaWYgKCEoaXNQYXJ0aWFsID8ga2V5IGluIG90aGVyIDogaGFzT3duUHJvcGVydHkuY2FsbChvdGhlciwga2V5KSkpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIC8vIEFzc3VtZSBjeWNsaWMgdmFsdWVzIGFyZSBlcXVhbC5cbiAgICAgIHZhciBzdGFja2VkID0gc3RhY2suZ2V0KG9iamVjdCk7XG4gICAgICBpZiAoc3RhY2tlZCAmJiBzdGFjay5nZXQob3RoZXIpKSB7XG4gICAgICAgIHJldHVybiBzdGFja2VkID09IG90aGVyO1xuICAgICAgfVxuICAgICAgdmFyIHJlc3VsdCA9IHRydWU7XG4gICAgICBzdGFjay5zZXQob2JqZWN0LCBvdGhlcik7XG4gICAgICBzdGFjay5zZXQob3RoZXIsIG9iamVjdCk7XG5cbiAgICAgIHZhciBza2lwQ3RvciA9IGlzUGFydGlhbDtcbiAgICAgIHdoaWxlICgrK2luZGV4IDwgb2JqTGVuZ3RoKSB7XG4gICAgICAgIGtleSA9IG9ialByb3BzW2luZGV4XTtcbiAgICAgICAgdmFyIG9ialZhbHVlID0gb2JqZWN0W2tleV0sXG4gICAgICAgICAgICBvdGhWYWx1ZSA9IG90aGVyW2tleV07XG5cbiAgICAgICAgaWYgKGN1c3RvbWl6ZXIpIHtcbiAgICAgICAgICB2YXIgY29tcGFyZWQgPSBpc1BhcnRpYWxcbiAgICAgICAgICAgID8gY3VzdG9taXplcihvdGhWYWx1ZSwgb2JqVmFsdWUsIGtleSwgb3RoZXIsIG9iamVjdCwgc3RhY2spXG4gICAgICAgICAgICA6IGN1c3RvbWl6ZXIob2JqVmFsdWUsIG90aFZhbHVlLCBrZXksIG9iamVjdCwgb3RoZXIsIHN0YWNrKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBSZWN1cnNpdmVseSBjb21wYXJlIG9iamVjdHMgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKS5cbiAgICAgICAgaWYgKCEoY29tcGFyZWQgPT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgICA/IChvYmpWYWx1ZSA9PT0gb3RoVmFsdWUgfHwgZXF1YWxGdW5jKG9ialZhbHVlLCBvdGhWYWx1ZSwgYml0bWFzaywgY3VzdG9taXplciwgc3RhY2spKVxuICAgICAgICAgICAgICA6IGNvbXBhcmVkXG4gICAgICAgICAgICApKSB7XG4gICAgICAgICAgcmVzdWx0ID0gZmFsc2U7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgc2tpcEN0b3IgfHwgKHNraXBDdG9yID0ga2V5ID09ICdjb25zdHJ1Y3RvcicpO1xuICAgICAgfVxuICAgICAgaWYgKHJlc3VsdCAmJiAhc2tpcEN0b3IpIHtcbiAgICAgICAgdmFyIG9iakN0b3IgPSBvYmplY3QuY29uc3RydWN0b3IsXG4gICAgICAgICAgICBvdGhDdG9yID0gb3RoZXIuY29uc3RydWN0b3I7XG5cbiAgICAgICAgLy8gTm9uIGBPYmplY3RgIG9iamVjdCBpbnN0YW5jZXMgd2l0aCBkaWZmZXJlbnQgY29uc3RydWN0b3JzIGFyZSBub3QgZXF1YWwuXG4gICAgICAgIGlmIChvYmpDdG9yICE9IG90aEN0b3IgJiZcbiAgICAgICAgICAgICgnY29uc3RydWN0b3InIGluIG9iamVjdCAmJiAnY29uc3RydWN0b3InIGluIG90aGVyKSAmJlxuICAgICAgICAgICAgISh0eXBlb2Ygb2JqQ3RvciA9PSAnZnVuY3Rpb24nICYmIG9iakN0b3IgaW5zdGFuY2VvZiBvYmpDdG9yICYmXG4gICAgICAgICAgICAgIHR5cGVvZiBvdGhDdG9yID09ICdmdW5jdGlvbicgJiYgb3RoQ3RvciBpbnN0YW5jZW9mIG90aEN0b3IpKSB7XG4gICAgICAgICAgcmVzdWx0ID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHN0YWNrWydkZWxldGUnXShvYmplY3QpO1xuICAgICAgc3RhY2tbJ2RlbGV0ZSddKG90aGVyKTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlUmVzdGAgd2hpY2ggZmxhdHRlbnMgdGhlIHJlc3QgYXJyYXkuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGFwcGx5IGEgcmVzdCBwYXJhbWV0ZXIgdG8uXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gZmxhdFJlc3QoZnVuYykge1xuICAgICAgcmV0dXJuIHNldFRvU3RyaW5nKG92ZXJSZXN0KGZ1bmMsIHVuZGVmaW5lZCwgZmxhdHRlbiksIGZ1bmMgKyAnJyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiBvd24gZW51bWVyYWJsZSBwcm9wZXJ0eSBuYW1lcyBhbmQgc3ltYm9scyBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMgYW5kIHN5bWJvbHMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0QWxsS2V5cyhvYmplY3QpIHtcbiAgICAgIHJldHVybiBiYXNlR2V0QWxsS2V5cyhvYmplY3QsIGtleXMsIGdldFN5bWJvbHMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2Ygb3duIGFuZCBpbmhlcml0ZWQgZW51bWVyYWJsZSBwcm9wZXJ0eSBuYW1lcyBhbmRcbiAgICAgKiBzeW1ib2xzIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcyBhbmQgc3ltYm9scy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXRBbGxLZXlzSW4ob2JqZWN0KSB7XG4gICAgICByZXR1cm4gYmFzZUdldEFsbEtleXMob2JqZWN0LCBrZXlzSW4sIGdldFN5bWJvbHNJbik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyBtZXRhZGF0YSBmb3IgYGZ1bmNgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgbWV0YWRhdGEgZm9yIGBmdW5jYC5cbiAgICAgKi9cbiAgICB2YXIgZ2V0RGF0YSA9ICFtZXRhTWFwID8gbm9vcCA6IGZ1bmN0aW9uKGZ1bmMpIHtcbiAgICAgIHJldHVybiBtZXRhTWFwLmdldChmdW5jKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgbmFtZSBvZiBgZnVuY2AuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGZ1bmN0aW9uIG5hbWUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0RnVuY05hbWUoZnVuYykge1xuICAgICAgdmFyIHJlc3VsdCA9IChmdW5jLm5hbWUgKyAnJyksXG4gICAgICAgICAgYXJyYXkgPSByZWFsTmFtZXNbcmVzdWx0XSxcbiAgICAgICAgICBsZW5ndGggPSBoYXNPd25Qcm9wZXJ0eS5jYWxsKHJlYWxOYW1lcywgcmVzdWx0KSA/IGFycmF5Lmxlbmd0aCA6IDA7XG5cbiAgICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgICB2YXIgZGF0YSA9IGFycmF5W2xlbmd0aF0sXG4gICAgICAgICAgICBvdGhlckZ1bmMgPSBkYXRhLmZ1bmM7XG4gICAgICAgIGlmIChvdGhlckZ1bmMgPT0gbnVsbCB8fCBvdGhlckZ1bmMgPT0gZnVuYykge1xuICAgICAgICAgIHJldHVybiBkYXRhLm5hbWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgYXJndW1lbnQgcGxhY2Vob2xkZXIgdmFsdWUgZm9yIGBmdW5jYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gaW5zcGVjdC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcGxhY2Vob2xkZXIgdmFsdWUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0SG9sZGVyKGZ1bmMpIHtcbiAgICAgIHZhciBvYmplY3QgPSBoYXNPd25Qcm9wZXJ0eS5jYWxsKGxvZGFzaCwgJ3BsYWNlaG9sZGVyJykgPyBsb2Rhc2ggOiBmdW5jO1xuICAgICAgcmV0dXJuIG9iamVjdC5wbGFjZWhvbGRlcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBhcHByb3ByaWF0ZSBcIml0ZXJhdGVlXCIgZnVuY3Rpb24uIElmIGBfLml0ZXJhdGVlYCBpcyBjdXN0b21pemVkLFxuICAgICAqIHRoaXMgZnVuY3Rpb24gcmV0dXJucyB0aGUgY3VzdG9tIG1ldGhvZCwgb3RoZXJ3aXNlIGl0IHJldHVybnMgYGJhc2VJdGVyYXRlZWAuXG4gICAgICogSWYgYXJndW1lbnRzIGFyZSBwcm92aWRlZCwgdGhlIGNob3NlbiBmdW5jdGlvbiBpcyBpbnZva2VkIHdpdGggdGhlbSBhbmRcbiAgICAgKiBpdHMgcmVzdWx0IGlzIHJldHVybmVkLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IFt2YWx1ZV0gVGhlIHZhbHVlIHRvIGNvbnZlcnQgdG8gYW4gaXRlcmF0ZWUuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFthcml0eV0gVGhlIGFyaXR5IG9mIHRoZSBjcmVhdGVkIGl0ZXJhdGVlLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgY2hvc2VuIGZ1bmN0aW9uIG9yIGl0cyByZXN1bHQuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0SXRlcmF0ZWUoKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gbG9kYXNoLml0ZXJhdGVlIHx8IGl0ZXJhdGVlO1xuICAgICAgcmVzdWx0ID0gcmVzdWx0ID09PSBpdGVyYXRlZSA/IGJhc2VJdGVyYXRlZSA6IHJlc3VsdDtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gcmVzdWx0KGFyZ3VtZW50c1swXSwgYXJndW1lbnRzWzFdKSA6IHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBkYXRhIGZvciBgbWFwYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG1hcCBUaGUgbWFwIHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIHJlZmVyZW5jZSBrZXkuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIG1hcCBkYXRhLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldE1hcERhdGEobWFwLCBrZXkpIHtcbiAgICAgIHZhciBkYXRhID0gbWFwLl9fZGF0YV9fO1xuICAgICAgcmV0dXJuIGlzS2V5YWJsZShrZXkpXG4gICAgICAgID8gZGF0YVt0eXBlb2Yga2V5ID09ICdzdHJpbmcnID8gJ3N0cmluZycgOiAnaGFzaCddXG4gICAgICAgIDogZGF0YS5tYXA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgcHJvcGVydHkgbmFtZXMsIHZhbHVlcywgYW5kIGNvbXBhcmUgZmxhZ3Mgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG1hdGNoIGRhdGEgb2YgYG9iamVjdGAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0TWF0Y2hEYXRhKG9iamVjdCkge1xuICAgICAgdmFyIHJlc3VsdCA9IGtleXMob2JqZWN0KSxcbiAgICAgICAgICBsZW5ndGggPSByZXN1bHQubGVuZ3RoO1xuXG4gICAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgICAgdmFyIGtleSA9IHJlc3VsdFtsZW5ndGhdLFxuICAgICAgICAgICAgdmFsdWUgPSBvYmplY3Rba2V5XTtcblxuICAgICAgICByZXN1bHRbbGVuZ3RoXSA9IFtrZXksIHZhbHVlLCBpc1N0cmljdENvbXBhcmFibGUodmFsdWUpXTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgbmF0aXZlIGZ1bmN0aW9uIGF0IGBrZXlgIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBtZXRob2QgdG8gZ2V0LlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBmdW5jdGlvbiBpZiBpdCdzIG5hdGl2ZSwgZWxzZSBgdW5kZWZpbmVkYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXROYXRpdmUob2JqZWN0LCBrZXkpIHtcbiAgICAgIHZhciB2YWx1ZSA9IGdldFZhbHVlKG9iamVjdCwga2V5KTtcbiAgICAgIHJldHVybiBiYXNlSXNOYXRpdmUodmFsdWUpID8gdmFsdWUgOiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlR2V0VGFnYCB3aGljaCBpZ25vcmVzIGBTeW1ib2wudG9TdHJpbmdUYWdgIHZhbHVlcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgcmF3IGB0b1N0cmluZ1RhZ2AuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0UmF3VGFnKHZhbHVlKSB7XG4gICAgICB2YXIgaXNPd24gPSBoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlLCBzeW1Ub1N0cmluZ1RhZyksXG4gICAgICAgICAgdGFnID0gdmFsdWVbc3ltVG9TdHJpbmdUYWddO1xuXG4gICAgICB0cnkge1xuICAgICAgICB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ10gPSB1bmRlZmluZWQ7XG4gICAgICAgIHZhciB1bm1hc2tlZCA9IHRydWU7XG4gICAgICB9IGNhdGNoIChlKSB7fVxuXG4gICAgICB2YXIgcmVzdWx0ID0gbmF0aXZlT2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSk7XG4gICAgICBpZiAodW5tYXNrZWQpIHtcbiAgICAgICAgaWYgKGlzT3duKSB7XG4gICAgICAgICAgdmFsdWVbc3ltVG9TdHJpbmdUYWddID0gdGFnO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGRlbGV0ZSB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ107XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiB0aGUgb3duIGVudW1lcmFibGUgc3ltYm9scyBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2Ygc3ltYm9scy5cbiAgICAgKi9cbiAgICB2YXIgZ2V0U3ltYm9scyA9ICFuYXRpdmVHZXRTeW1ib2xzID8gc3R1YkFycmF5IDogZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgICBpZiAob2JqZWN0ID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgb2JqZWN0ID0gT2JqZWN0KG9iamVjdCk7XG4gICAgICByZXR1cm4gYXJyYXlGaWx0ZXIobmF0aXZlR2V0U3ltYm9scyhvYmplY3QpLCBmdW5jdGlvbihzeW1ib2wpIHtcbiAgICAgICAgcmV0dXJuIHByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwob2JqZWN0LCBzeW1ib2wpO1xuICAgICAgfSk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdGhlIG93biBhbmQgaW5oZXJpdGVkIGVudW1lcmFibGUgc3ltYm9scyBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2Ygc3ltYm9scy5cbiAgICAgKi9cbiAgICB2YXIgZ2V0U3ltYm9sc0luID0gIW5hdGl2ZUdldFN5bWJvbHMgPyBzdHViQXJyYXkgOiBmdW5jdGlvbihvYmplY3QpIHtcbiAgICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICAgIHdoaWxlIChvYmplY3QpIHtcbiAgICAgICAgYXJyYXlQdXNoKHJlc3VsdCwgZ2V0U3ltYm9scyhvYmplY3QpKTtcbiAgICAgICAgb2JqZWN0ID0gZ2V0UHJvdG90eXBlKG9iamVjdCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBgdG9TdHJpbmdUYWdgIG9mIGB2YWx1ZWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGB0b1N0cmluZ1RhZ2AuXG4gICAgICovXG4gICAgdmFyIGdldFRhZyA9IGJhc2VHZXRUYWc7XG5cbiAgICAvLyBGYWxsYmFjayBmb3IgZGF0YSB2aWV3cywgbWFwcywgc2V0cywgYW5kIHdlYWsgbWFwcyBpbiBJRSAxMSBhbmQgcHJvbWlzZXMgaW4gTm9kZS5qcyA8IDYuXG4gICAgaWYgKChEYXRhVmlldyAmJiBnZXRUYWcobmV3IERhdGFWaWV3KG5ldyBBcnJheUJ1ZmZlcigxKSkpICE9IGRhdGFWaWV3VGFnKSB8fFxuICAgICAgICAoTWFwICYmIGdldFRhZyhuZXcgTWFwKSAhPSBtYXBUYWcpIHx8XG4gICAgICAgIChQcm9taXNlICYmIGdldFRhZyhQcm9taXNlLnJlc29sdmUoKSkgIT0gcHJvbWlzZVRhZykgfHxcbiAgICAgICAgKFNldCAmJiBnZXRUYWcobmV3IFNldCkgIT0gc2V0VGFnKSB8fFxuICAgICAgICAoV2Vha01hcCAmJiBnZXRUYWcobmV3IFdlYWtNYXApICE9IHdlYWtNYXBUYWcpKSB7XG4gICAgICBnZXRUYWcgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICB2YXIgcmVzdWx0ID0gYmFzZUdldFRhZyh2YWx1ZSksXG4gICAgICAgICAgICBDdG9yID0gcmVzdWx0ID09IG9iamVjdFRhZyA/IHZhbHVlLmNvbnN0cnVjdG9yIDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgY3RvclN0cmluZyA9IEN0b3IgPyB0b1NvdXJjZShDdG9yKSA6ICcnO1xuXG4gICAgICAgIGlmIChjdG9yU3RyaW5nKSB7XG4gICAgICAgICAgc3dpdGNoIChjdG9yU3RyaW5nKSB7XG4gICAgICAgICAgICBjYXNlIGRhdGFWaWV3Q3RvclN0cmluZzogcmV0dXJuIGRhdGFWaWV3VGFnO1xuICAgICAgICAgICAgY2FzZSBtYXBDdG9yU3RyaW5nOiByZXR1cm4gbWFwVGFnO1xuICAgICAgICAgICAgY2FzZSBwcm9taXNlQ3RvclN0cmluZzogcmV0dXJuIHByb21pc2VUYWc7XG4gICAgICAgICAgICBjYXNlIHNldEN0b3JTdHJpbmc6IHJldHVybiBzZXRUYWc7XG4gICAgICAgICAgICBjYXNlIHdlYWtNYXBDdG9yU3RyaW5nOiByZXR1cm4gd2Vha01hcFRhZztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgdmlldywgYXBwbHlpbmcgYW55IGB0cmFuc2Zvcm1zYCB0byB0aGUgYHN0YXJ0YCBhbmQgYGVuZGAgcG9zaXRpb25zLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gc3RhcnQgVGhlIHN0YXJ0IG9mIHRoZSB2aWV3LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBlbmQgVGhlIGVuZCBvZiB0aGUgdmlldy5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSB0cmFuc2Zvcm1zIFRoZSB0cmFuc2Zvcm1hdGlvbnMgdG8gYXBwbHkgdG8gdGhlIHZpZXcuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBhbiBvYmplY3QgY29udGFpbmluZyB0aGUgYHN0YXJ0YCBhbmQgYGVuZGBcbiAgICAgKiAgcG9zaXRpb25zIG9mIHRoZSB2aWV3LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldFZpZXcoc3RhcnQsIGVuZCwgdHJhbnNmb3Jtcykge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gdHJhbnNmb3Jtcy5sZW5ndGg7XG5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciBkYXRhID0gdHJhbnNmb3Jtc1tpbmRleF0sXG4gICAgICAgICAgICBzaXplID0gZGF0YS5zaXplO1xuXG4gICAgICAgIHN3aXRjaCAoZGF0YS50eXBlKSB7XG4gICAgICAgICAgY2FzZSAnZHJvcCc6ICAgICAgc3RhcnQgKz0gc2l6ZTsgYnJlYWs7XG4gICAgICAgICAgY2FzZSAnZHJvcFJpZ2h0JzogZW5kIC09IHNpemU7IGJyZWFrO1xuICAgICAgICAgIGNhc2UgJ3Rha2UnOiAgICAgIGVuZCA9IG5hdGl2ZU1pbihlbmQsIHN0YXJ0ICsgc2l6ZSk7IGJyZWFrO1xuICAgICAgICAgIGNhc2UgJ3Rha2VSaWdodCc6IHN0YXJ0ID0gbmF0aXZlTWF4KHN0YXJ0LCBlbmQgLSBzaXplKTsgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB7ICdzdGFydCc6IHN0YXJ0LCAnZW5kJzogZW5kIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRXh0cmFjdHMgd3JhcHBlciBkZXRhaWxzIGZyb20gdGhlIGBzb3VyY2VgIGJvZHkgY29tbWVudC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHNvdXJjZSBUaGUgc291cmNlIHRvIGluc3BlY3QuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSB3cmFwcGVyIGRldGFpbHMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0V3JhcERldGFpbHMoc291cmNlKSB7XG4gICAgICB2YXIgbWF0Y2ggPSBzb3VyY2UubWF0Y2gocmVXcmFwRGV0YWlscyk7XG4gICAgICByZXR1cm4gbWF0Y2ggPyBtYXRjaFsxXS5zcGxpdChyZVNwbGl0RGV0YWlscykgOiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHBhdGhgIGV4aXN0cyBvbiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIHRvIGNoZWNrLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGhhc0Z1bmMgVGhlIGZ1bmN0aW9uIHRvIGNoZWNrIHByb3BlcnRpZXMuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBwYXRoYCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBoYXNQYXRoKG9iamVjdCwgcGF0aCwgaGFzRnVuYykge1xuICAgICAgcGF0aCA9IGNhc3RQYXRoKHBhdGgsIG9iamVjdCk7XG5cbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IHBhdGgubGVuZ3RoLFxuICAgICAgICAgIHJlc3VsdCA9IGZhbHNlO1xuXG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIga2V5ID0gdG9LZXkocGF0aFtpbmRleF0pO1xuICAgICAgICBpZiAoIShyZXN1bHQgPSBvYmplY3QgIT0gbnVsbCAmJiBoYXNGdW5jKG9iamVjdCwga2V5KSkpIHtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBvYmplY3QgPSBvYmplY3Rba2V5XTtcbiAgICAgIH1cbiAgICAgIGlmIChyZXN1bHQgfHwgKytpbmRleCAhPSBsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cbiAgICAgIGxlbmd0aCA9IG9iamVjdCA9PSBudWxsID8gMCA6IG9iamVjdC5sZW5ndGg7XG4gICAgICByZXR1cm4gISFsZW5ndGggJiYgaXNMZW5ndGgobGVuZ3RoKSAmJiBpc0luZGV4KGtleSwgbGVuZ3RoKSAmJlxuICAgICAgICAoaXNBcnJheShvYmplY3QpIHx8IGlzQXJndW1lbnRzKG9iamVjdCkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEluaXRpYWxpemVzIGFuIGFycmF5IGNsb25lLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gY2xvbmUuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBpbml0aWFsaXplZCBjbG9uZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpbml0Q2xvbmVBcnJheShhcnJheSkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aCxcbiAgICAgICAgICByZXN1bHQgPSBuZXcgYXJyYXkuY29uc3RydWN0b3IobGVuZ3RoKTtcblxuICAgICAgLy8gQWRkIHByb3BlcnRpZXMgYXNzaWduZWQgYnkgYFJlZ0V4cCNleGVjYC5cbiAgICAgIGlmIChsZW5ndGggJiYgdHlwZW9mIGFycmF5WzBdID09ICdzdHJpbmcnICYmIGhhc093blByb3BlcnR5LmNhbGwoYXJyYXksICdpbmRleCcpKSB7XG4gICAgICAgIHJlc3VsdC5pbmRleCA9IGFycmF5LmluZGV4O1xuICAgICAgICByZXN1bHQuaW5wdXQgPSBhcnJheS5pbnB1dDtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSW5pdGlhbGl6ZXMgYW4gb2JqZWN0IGNsb25lLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gY2xvbmUuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgaW5pdGlhbGl6ZWQgY2xvbmUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaW5pdENsb25lT2JqZWN0KG9iamVjdCkge1xuICAgICAgcmV0dXJuICh0eXBlb2Ygb2JqZWN0LmNvbnN0cnVjdG9yID09ICdmdW5jdGlvbicgJiYgIWlzUHJvdG90eXBlKG9iamVjdCkpXG4gICAgICAgID8gYmFzZUNyZWF0ZShnZXRQcm90b3R5cGUob2JqZWN0KSlcbiAgICAgICAgOiB7fTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJbml0aWFsaXplcyBhbiBvYmplY3QgY2xvbmUgYmFzZWQgb24gaXRzIGB0b1N0cmluZ1RhZ2AuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBmdW5jdGlvbiBvbmx5IHN1cHBvcnRzIGNsb25pbmcgdmFsdWVzIHdpdGggdGFncyBvZlxuICAgICAqIGBCb29sZWFuYCwgYERhdGVgLCBgRXJyb3JgLCBgTWFwYCwgYE51bWJlcmAsIGBSZWdFeHBgLCBgU2V0YCwgb3IgYFN0cmluZ2AuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBjbG9uZS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdGFnIFRoZSBgdG9TdHJpbmdUYWdgIG9mIHRoZSBvYmplY3QgdG8gY2xvbmUuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbaXNEZWVwXSBTcGVjaWZ5IGEgZGVlcCBjbG9uZS5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBpbml0aWFsaXplZCBjbG9uZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpbml0Q2xvbmVCeVRhZyhvYmplY3QsIHRhZywgaXNEZWVwKSB7XG4gICAgICB2YXIgQ3RvciA9IG9iamVjdC5jb25zdHJ1Y3RvcjtcbiAgICAgIHN3aXRjaCAodGFnKSB7XG4gICAgICAgIGNhc2UgYXJyYXlCdWZmZXJUYWc6XG4gICAgICAgICAgcmV0dXJuIGNsb25lQXJyYXlCdWZmZXIob2JqZWN0KTtcblxuICAgICAgICBjYXNlIGJvb2xUYWc6XG4gICAgICAgIGNhc2UgZGF0ZVRhZzpcbiAgICAgICAgICByZXR1cm4gbmV3IEN0b3IoK29iamVjdCk7XG5cbiAgICAgICAgY2FzZSBkYXRhVmlld1RhZzpcbiAgICAgICAgICByZXR1cm4gY2xvbmVEYXRhVmlldyhvYmplY3QsIGlzRGVlcCk7XG5cbiAgICAgICAgY2FzZSBmbG9hdDMyVGFnOiBjYXNlIGZsb2F0NjRUYWc6XG4gICAgICAgIGNhc2UgaW50OFRhZzogY2FzZSBpbnQxNlRhZzogY2FzZSBpbnQzMlRhZzpcbiAgICAgICAgY2FzZSB1aW50OFRhZzogY2FzZSB1aW50OENsYW1wZWRUYWc6IGNhc2UgdWludDE2VGFnOiBjYXNlIHVpbnQzMlRhZzpcbiAgICAgICAgICByZXR1cm4gY2xvbmVUeXBlZEFycmF5KG9iamVjdCwgaXNEZWVwKTtcblxuICAgICAgICBjYXNlIG1hcFRhZzpcbiAgICAgICAgICByZXR1cm4gbmV3IEN0b3I7XG5cbiAgICAgICAgY2FzZSBudW1iZXJUYWc6XG4gICAgICAgIGNhc2Ugc3RyaW5nVGFnOlxuICAgICAgICAgIHJldHVybiBuZXcgQ3RvcihvYmplY3QpO1xuXG4gICAgICAgIGNhc2UgcmVnZXhwVGFnOlxuICAgICAgICAgIHJldHVybiBjbG9uZVJlZ0V4cChvYmplY3QpO1xuXG4gICAgICAgIGNhc2Ugc2V0VGFnOlxuICAgICAgICAgIHJldHVybiBuZXcgQ3RvcjtcblxuICAgICAgICBjYXNlIHN5bWJvbFRhZzpcbiAgICAgICAgICByZXR1cm4gY2xvbmVTeW1ib2wob2JqZWN0KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJbnNlcnRzIHdyYXBwZXIgYGRldGFpbHNgIGluIGEgY29tbWVudCBhdCB0aGUgdG9wIG9mIHRoZSBgc291cmNlYCBib2R5LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gc291cmNlIFRoZSBzb3VyY2UgdG8gbW9kaWZ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gZGV0YWlscyBUaGUgZGV0YWlscyB0byBpbnNlcnQuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgbW9kaWZpZWQgc291cmNlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGluc2VydFdyYXBEZXRhaWxzKHNvdXJjZSwgZGV0YWlscykge1xuICAgICAgdmFyIGxlbmd0aCA9IGRldGFpbHMubGVuZ3RoO1xuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIHNvdXJjZTtcbiAgICAgIH1cbiAgICAgIHZhciBsYXN0SW5kZXggPSBsZW5ndGggLSAxO1xuICAgICAgZGV0YWlsc1tsYXN0SW5kZXhdID0gKGxlbmd0aCA+IDEgPyAnJiAnIDogJycpICsgZGV0YWlsc1tsYXN0SW5kZXhdO1xuICAgICAgZGV0YWlscyA9IGRldGFpbHMuam9pbihsZW5ndGggPiAyID8gJywgJyA6ICcgJyk7XG4gICAgICByZXR1cm4gc291cmNlLnJlcGxhY2UocmVXcmFwQ29tbWVudCwgJ3tcXG4vKiBbd3JhcHBlZCB3aXRoICcgKyBkZXRhaWxzICsgJ10gKi9cXG4nKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIGZsYXR0ZW5hYmxlIGBhcmd1bWVudHNgIG9iamVjdCBvciBhcnJheS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgZmxhdHRlbmFibGUsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0ZsYXR0ZW5hYmxlKHZhbHVlKSB7XG4gICAgICByZXR1cm4gaXNBcnJheSh2YWx1ZSkgfHwgaXNBcmd1bWVudHModmFsdWUpIHx8XG4gICAgICAgICEhKHNwcmVhZGFibGVTeW1ib2wgJiYgdmFsdWUgJiYgdmFsdWVbc3ByZWFkYWJsZVN5bWJvbF0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgdmFsaWQgYXJyYXktbGlrZSBpbmRleC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtsZW5ndGg9TUFYX1NBRkVfSU5URUdFUl0gVGhlIHVwcGVyIGJvdW5kcyBvZiBhIHZhbGlkIGluZGV4LlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgdmFsaWQgaW5kZXgsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0luZGV4KHZhbHVlLCBsZW5ndGgpIHtcbiAgICAgIHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuICAgICAgbGVuZ3RoID0gbGVuZ3RoID09IG51bGwgPyBNQVhfU0FGRV9JTlRFR0VSIDogbGVuZ3RoO1xuXG4gICAgICByZXR1cm4gISFsZW5ndGggJiZcbiAgICAgICAgKHR5cGUgPT0gJ251bWJlcicgfHxcbiAgICAgICAgICAodHlwZSAhPSAnc3ltYm9sJyAmJiByZUlzVWludC50ZXN0KHZhbHVlKSkpICYmXG4gICAgICAgICAgICAodmFsdWUgPiAtMSAmJiB2YWx1ZSAlIDEgPT0gMCAmJiB2YWx1ZSA8IGxlbmd0aCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIHRoZSBnaXZlbiBhcmd1bWVudHMgYXJlIGZyb20gYW4gaXRlcmF0ZWUgY2FsbC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgcG90ZW50aWFsIGl0ZXJhdGVlIHZhbHVlIGFyZ3VtZW50LlxuICAgICAqIEBwYXJhbSB7Kn0gaW5kZXggVGhlIHBvdGVudGlhbCBpdGVyYXRlZSBpbmRleCBvciBrZXkgYXJndW1lbnQuXG4gICAgICogQHBhcmFtIHsqfSBvYmplY3QgVGhlIHBvdGVudGlhbCBpdGVyYXRlZSBvYmplY3QgYXJndW1lbnQuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBhcmd1bWVudHMgYXJlIGZyb20gYW4gaXRlcmF0ZWUgY2FsbCxcbiAgICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzSXRlcmF0ZWVDYWxsKHZhbHVlLCBpbmRleCwgb2JqZWN0KSB7XG4gICAgICBpZiAoIWlzT2JqZWN0KG9iamVjdCkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgdmFyIHR5cGUgPSB0eXBlb2YgaW5kZXg7XG4gICAgICBpZiAodHlwZSA9PSAnbnVtYmVyJ1xuICAgICAgICAgICAgPyAoaXNBcnJheUxpa2Uob2JqZWN0KSAmJiBpc0luZGV4KGluZGV4LCBvYmplY3QubGVuZ3RoKSlcbiAgICAgICAgICAgIDogKHR5cGUgPT0gJ3N0cmluZycgJiYgaW5kZXggaW4gb2JqZWN0KVxuICAgICAgICAgICkge1xuICAgICAgICByZXR1cm4gZXEob2JqZWN0W2luZGV4XSwgdmFsdWUpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgcHJvcGVydHkgbmFtZSBhbmQgbm90IGEgcHJvcGVydHkgcGF0aC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3RdIFRoZSBvYmplY3QgdG8gcXVlcnkga2V5cyBvbi5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHByb3BlcnR5IG5hbWUsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0tleSh2YWx1ZSwgb2JqZWN0KSB7XG4gICAgICBpZiAoaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsdWU7XG4gICAgICBpZiAodHlwZSA9PSAnbnVtYmVyJyB8fCB0eXBlID09ICdzeW1ib2wnIHx8IHR5cGUgPT0gJ2Jvb2xlYW4nIHx8XG4gICAgICAgICAgdmFsdWUgPT0gbnVsbCB8fCBpc1N5bWJvbCh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVJc1BsYWluUHJvcC50ZXN0KHZhbHVlKSB8fCAhcmVJc0RlZXBQcm9wLnRlc3QodmFsdWUpIHx8XG4gICAgICAgIChvYmplY3QgIT0gbnVsbCAmJiB2YWx1ZSBpbiBPYmplY3Qob2JqZWN0KSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgc3VpdGFibGUgZm9yIHVzZSBhcyB1bmlxdWUgb2JqZWN0IGtleS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgc3VpdGFibGUsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0tleWFibGUodmFsdWUpIHtcbiAgICAgIHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuICAgICAgcmV0dXJuICh0eXBlID09ICdzdHJpbmcnIHx8IHR5cGUgPT0gJ251bWJlcicgfHwgdHlwZSA9PSAnc3ltYm9sJyB8fCB0eXBlID09ICdib29sZWFuJylcbiAgICAgICAgPyAodmFsdWUgIT09ICdfX3Byb3RvX18nKVxuICAgICAgICA6ICh2YWx1ZSA9PT0gbnVsbCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGBmdW5jYCBoYXMgYSBsYXp5IGNvdW50ZXJwYXJ0LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYGZ1bmNgIGhhcyBhIGxhenkgY291bnRlcnBhcnQsXG4gICAgICogIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0xhemlhYmxlKGZ1bmMpIHtcbiAgICAgIHZhciBmdW5jTmFtZSA9IGdldEZ1bmNOYW1lKGZ1bmMpLFxuICAgICAgICAgIG90aGVyID0gbG9kYXNoW2Z1bmNOYW1lXTtcblxuICAgICAgaWYgKHR5cGVvZiBvdGhlciAhPSAnZnVuY3Rpb24nIHx8ICEoZnVuY05hbWUgaW4gTGF6eVdyYXBwZXIucHJvdG90eXBlKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICBpZiAoZnVuYyA9PT0gb3RoZXIpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICB2YXIgZGF0YSA9IGdldERhdGEob3RoZXIpO1xuICAgICAgcmV0dXJuICEhZGF0YSAmJiBmdW5jID09PSBkYXRhWzBdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgZnVuY2AgaGFzIGl0cyBzb3VyY2UgbWFza2VkLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYGZ1bmNgIGlzIG1hc2tlZCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzTWFza2VkKGZ1bmMpIHtcbiAgICAgIHJldHVybiAhIW1hc2tTcmNLZXkgJiYgKG1hc2tTcmNLZXkgaW4gZnVuYyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGBmdW5jYCBpcyBjYXBhYmxlIG9mIGJlaW5nIG1hc2tlZC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBmdW5jYCBpcyBtYXNrYWJsZSwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIHZhciBpc01hc2thYmxlID0gY29yZUpzRGF0YSA/IGlzRnVuY3Rpb24gOiBzdHViRmFsc2U7XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBsaWtlbHkgYSBwcm90b3R5cGUgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHByb3RvdHlwZSwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzUHJvdG90eXBlKHZhbHVlKSB7XG4gICAgICB2YXIgQ3RvciA9IHZhbHVlICYmIHZhbHVlLmNvbnN0cnVjdG9yLFxuICAgICAgICAgIHByb3RvID0gKHR5cGVvZiBDdG9yID09ICdmdW5jdGlvbicgJiYgQ3Rvci5wcm90b3R5cGUpIHx8IG9iamVjdFByb3RvO1xuXG4gICAgICByZXR1cm4gdmFsdWUgPT09IHByb3RvO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIHN1aXRhYmxlIGZvciBzdHJpY3QgZXF1YWxpdHkgY29tcGFyaXNvbnMsIGkuZS4gYD09PWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlmIHN1aXRhYmxlIGZvciBzdHJpY3RcbiAgICAgKiAgZXF1YWxpdHkgY29tcGFyaXNvbnMsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc1N0cmljdENvbXBhcmFibGUodmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA9PT0gdmFsdWUgJiYgIWlzT2JqZWN0KHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYG1hdGNoZXNQcm9wZXJ0eWAgZm9yIHNvdXJjZSB2YWx1ZXMgc3VpdGFibGVcbiAgICAgKiBmb3Igc3RyaWN0IGVxdWFsaXR5IGNvbXBhcmlzb25zLCBpLmUuIGA9PT1gLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAgICAgKiBAcGFyYW0geyp9IHNyY1ZhbHVlIFRoZSB2YWx1ZSB0byBtYXRjaC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBzcGVjIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1hdGNoZXNTdHJpY3RDb21wYXJhYmxlKGtleSwgc3JjVmFsdWUpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihvYmplY3QpIHtcbiAgICAgICAgaWYgKG9iamVjdCA9PSBudWxsKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvYmplY3Rba2V5XSA9PT0gc3JjVmFsdWUgJiZcbiAgICAgICAgICAoc3JjVmFsdWUgIT09IHVuZGVmaW5lZCB8fCAoa2V5IGluIE9iamVjdChvYmplY3QpKSk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5tZW1vaXplYCB3aGljaCBjbGVhcnMgdGhlIG1lbW9pemVkIGZ1bmN0aW9uJ3NcbiAgICAgKiBjYWNoZSB3aGVuIGl0IGV4Y2VlZHMgYE1BWF9NRU1PSVpFX1NJWkVgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBoYXZlIGl0cyBvdXRwdXQgbWVtb2l6ZWQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgbWVtb2l6ZWQgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWVtb2l6ZUNhcHBlZChmdW5jKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gbWVtb2l6ZShmdW5jLCBmdW5jdGlvbihrZXkpIHtcbiAgICAgICAgaWYgKGNhY2hlLnNpemUgPT09IE1BWF9NRU1PSVpFX1NJWkUpIHtcbiAgICAgICAgICBjYWNoZS5jbGVhcigpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBrZXk7XG4gICAgICB9KTtcblxuICAgICAgdmFyIGNhY2hlID0gcmVzdWx0LmNhY2hlO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBNZXJnZXMgdGhlIGZ1bmN0aW9uIG1ldGFkYXRhIG9mIGBzb3VyY2VgIGludG8gYGRhdGFgLlxuICAgICAqXG4gICAgICogTWVyZ2luZyBtZXRhZGF0YSByZWR1Y2VzIHRoZSBudW1iZXIgb2Ygd3JhcHBlcnMgdXNlZCB0byBpbnZva2UgYSBmdW5jdGlvbi5cbiAgICAgKiBUaGlzIGlzIHBvc3NpYmxlIGJlY2F1c2UgbWV0aG9kcyBsaWtlIGBfLmJpbmRgLCBgXy5jdXJyeWAsIGFuZCBgXy5wYXJ0aWFsYFxuICAgICAqIG1heSBiZSBhcHBsaWVkIHJlZ2FyZGxlc3Mgb2YgZXhlY3V0aW9uIG9yZGVyLiBNZXRob2RzIGxpa2UgYF8uYXJ5YCBhbmRcbiAgICAgKiBgXy5yZWFyZ2AgbW9kaWZ5IGZ1bmN0aW9uIGFyZ3VtZW50cywgbWFraW5nIHRoZSBvcmRlciBpbiB3aGljaCB0aGV5IGFyZVxuICAgICAqIGV4ZWN1dGVkIGltcG9ydGFudCwgcHJldmVudGluZyB0aGUgbWVyZ2luZyBvZiBtZXRhZGF0YS4gSG93ZXZlciwgd2UgbWFrZVxuICAgICAqIGFuIGV4Y2VwdGlvbiBmb3IgYSBzYWZlIGNvbWJpbmVkIGNhc2Ugd2hlcmUgY3VycmllZCBmdW5jdGlvbnMgaGF2ZSBgXy5hcnlgXG4gICAgICogYW5kIG9yIGBfLnJlYXJnYCBhcHBsaWVkLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBkYXRhIFRoZSBkZXN0aW5hdGlvbiBtZXRhZGF0YS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBzb3VyY2UgVGhlIHNvdXJjZSBtZXRhZGF0YS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGRhdGFgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1lcmdlRGF0YShkYXRhLCBzb3VyY2UpIHtcbiAgICAgIHZhciBiaXRtYXNrID0gZGF0YVsxXSxcbiAgICAgICAgICBzcmNCaXRtYXNrID0gc291cmNlWzFdLFxuICAgICAgICAgIG5ld0JpdG1hc2sgPSBiaXRtYXNrIHwgc3JjQml0bWFzayxcbiAgICAgICAgICBpc0NvbW1vbiA9IG5ld0JpdG1hc2sgPCAoV1JBUF9CSU5EX0ZMQUcgfCBXUkFQX0JJTkRfS0VZX0ZMQUcgfCBXUkFQX0FSWV9GTEFHKTtcblxuICAgICAgdmFyIGlzQ29tYm8gPVxuICAgICAgICAoKHNyY0JpdG1hc2sgPT0gV1JBUF9BUllfRkxBRykgJiYgKGJpdG1hc2sgPT0gV1JBUF9DVVJSWV9GTEFHKSkgfHxcbiAgICAgICAgKChzcmNCaXRtYXNrID09IFdSQVBfQVJZX0ZMQUcpICYmIChiaXRtYXNrID09IFdSQVBfUkVBUkdfRkxBRykgJiYgKGRhdGFbN10ubGVuZ3RoIDw9IHNvdXJjZVs4XSkpIHx8XG4gICAgICAgICgoc3JjQml0bWFzayA9PSAoV1JBUF9BUllfRkxBRyB8IFdSQVBfUkVBUkdfRkxBRykpICYmIChzb3VyY2VbN10ubGVuZ3RoIDw9IHNvdXJjZVs4XSkgJiYgKGJpdG1hc2sgPT0gV1JBUF9DVVJSWV9GTEFHKSk7XG5cbiAgICAgIC8vIEV4aXQgZWFybHkgaWYgbWV0YWRhdGEgY2FuJ3QgYmUgbWVyZ2VkLlxuICAgICAgaWYgKCEoaXNDb21tb24gfHwgaXNDb21ibykpIHtcbiAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgICB9XG4gICAgICAvLyBVc2Ugc291cmNlIGB0aGlzQXJnYCBpZiBhdmFpbGFibGUuXG4gICAgICBpZiAoc3JjQml0bWFzayAmIFdSQVBfQklORF9GTEFHKSB7XG4gICAgICAgIGRhdGFbMl0gPSBzb3VyY2VbMl07XG4gICAgICAgIC8vIFNldCB3aGVuIGN1cnJ5aW5nIGEgYm91bmQgZnVuY3Rpb24uXG4gICAgICAgIG5ld0JpdG1hc2sgfD0gYml0bWFzayAmIFdSQVBfQklORF9GTEFHID8gMCA6IFdSQVBfQ1VSUllfQk9VTkRfRkxBRztcbiAgICAgIH1cbiAgICAgIC8vIENvbXBvc2UgcGFydGlhbCBhcmd1bWVudHMuXG4gICAgICB2YXIgdmFsdWUgPSBzb3VyY2VbM107XG4gICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgdmFyIHBhcnRpYWxzID0gZGF0YVszXTtcbiAgICAgICAgZGF0YVszXSA9IHBhcnRpYWxzID8gY29tcG9zZUFyZ3MocGFydGlhbHMsIHZhbHVlLCBzb3VyY2VbNF0pIDogdmFsdWU7XG4gICAgICAgIGRhdGFbNF0gPSBwYXJ0aWFscyA/IHJlcGxhY2VIb2xkZXJzKGRhdGFbM10sIFBMQUNFSE9MREVSKSA6IHNvdXJjZVs0XTtcbiAgICAgIH1cbiAgICAgIC8vIENvbXBvc2UgcGFydGlhbCByaWdodCBhcmd1bWVudHMuXG4gICAgICB2YWx1ZSA9IHNvdXJjZVs1XTtcbiAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICBwYXJ0aWFscyA9IGRhdGFbNV07XG4gICAgICAgIGRhdGFbNV0gPSBwYXJ0aWFscyA/IGNvbXBvc2VBcmdzUmlnaHQocGFydGlhbHMsIHZhbHVlLCBzb3VyY2VbNl0pIDogdmFsdWU7XG4gICAgICAgIGRhdGFbNl0gPSBwYXJ0aWFscyA/IHJlcGxhY2VIb2xkZXJzKGRhdGFbNV0sIFBMQUNFSE9MREVSKSA6IHNvdXJjZVs2XTtcbiAgICAgIH1cbiAgICAgIC8vIFVzZSBzb3VyY2UgYGFyZ1Bvc2AgaWYgYXZhaWxhYmxlLlxuICAgICAgdmFsdWUgPSBzb3VyY2VbN107XG4gICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgZGF0YVs3XSA9IHZhbHVlO1xuICAgICAgfVxuICAgICAgLy8gVXNlIHNvdXJjZSBgYXJ5YCBpZiBpdCdzIHNtYWxsZXIuXG4gICAgICBpZiAoc3JjQml0bWFzayAmIFdSQVBfQVJZX0ZMQUcpIHtcbiAgICAgICAgZGF0YVs4XSA9IGRhdGFbOF0gPT0gbnVsbCA/IHNvdXJjZVs4XSA6IG5hdGl2ZU1pbihkYXRhWzhdLCBzb3VyY2VbOF0pO1xuICAgICAgfVxuICAgICAgLy8gVXNlIHNvdXJjZSBgYXJpdHlgIGlmIG9uZSBpcyBub3QgcHJvdmlkZWQuXG4gICAgICBpZiAoZGF0YVs5XSA9PSBudWxsKSB7XG4gICAgICAgIGRhdGFbOV0gPSBzb3VyY2VbOV07XG4gICAgICB9XG4gICAgICAvLyBVc2Ugc291cmNlIGBmdW5jYCBhbmQgbWVyZ2UgYml0bWFza3MuXG4gICAgICBkYXRhWzBdID0gc291cmNlWzBdO1xuICAgICAgZGF0YVsxXSA9IG5ld0JpdG1hc2s7XG5cbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgZnVuY3Rpb24gaXMgbGlrZVxuICAgICAqIFtgT2JqZWN0LmtleXNgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1vYmplY3Qua2V5cylcbiAgICAgKiBleGNlcHQgdGhhdCBpdCBpbmNsdWRlcyBpbmhlcml0ZWQgZW51bWVyYWJsZSBwcm9wZXJ0aWVzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBuYXRpdmVLZXlzSW4ob2JqZWN0KSB7XG4gICAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgICBpZiAob2JqZWN0ICE9IG51bGwpIHtcbiAgICAgICAgZm9yICh2YXIga2V5IGluIE9iamVjdChvYmplY3QpKSB7XG4gICAgICAgICAgcmVzdWx0LnB1c2goa2V5KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgc3RyaW5nIHVzaW5nIGBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgc3RyaW5nLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG9iamVjdFRvU3RyaW5nKHZhbHVlKSB7XG4gICAgICByZXR1cm4gbmF0aXZlT2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlUmVzdGAgd2hpY2ggdHJhbnNmb3JtcyB0aGUgcmVzdCBhcnJheS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gYXBwbHkgYSByZXN0IHBhcmFtZXRlciB0by5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3N0YXJ0PWZ1bmMubGVuZ3RoLTFdIFRoZSBzdGFydCBwb3NpdGlvbiBvZiB0aGUgcmVzdCBwYXJhbWV0ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gdHJhbnNmb3JtIFRoZSByZXN0IGFycmF5IHRyYW5zZm9ybS5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBvdmVyUmVzdChmdW5jLCBzdGFydCwgdHJhbnNmb3JtKSB7XG4gICAgICBzdGFydCA9IG5hdGl2ZU1heChzdGFydCA9PT0gdW5kZWZpbmVkID8gKGZ1bmMubGVuZ3RoIC0gMSkgOiBzdGFydCwgMCk7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBhcmdzID0gYXJndW1lbnRzLFxuICAgICAgICAgICAgaW5kZXggPSAtMSxcbiAgICAgICAgICAgIGxlbmd0aCA9IG5hdGl2ZU1heChhcmdzLmxlbmd0aCAtIHN0YXJ0LCAwKSxcbiAgICAgICAgICAgIGFycmF5ID0gQXJyYXkobGVuZ3RoKTtcblxuICAgICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICAgIGFycmF5W2luZGV4XSA9IGFyZ3Nbc3RhcnQgKyBpbmRleF07XG4gICAgICAgIH1cbiAgICAgICAgaW5kZXggPSAtMTtcbiAgICAgICAgdmFyIG90aGVyQXJncyA9IEFycmF5KHN0YXJ0ICsgMSk7XG4gICAgICAgIHdoaWxlICgrK2luZGV4IDwgc3RhcnQpIHtcbiAgICAgICAgICBvdGhlckFyZ3NbaW5kZXhdID0gYXJnc1tpbmRleF07XG4gICAgICAgIH1cbiAgICAgICAgb3RoZXJBcmdzW3N0YXJ0XSA9IHRyYW5zZm9ybShhcnJheSk7XG4gICAgICAgIHJldHVybiBhcHBseShmdW5jLCB0aGlzLCBvdGhlckFyZ3MpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBwYXJlbnQgdmFsdWUgYXQgYHBhdGhgIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtBcnJheX0gcGF0aCBUaGUgcGF0aCB0byBnZXQgdGhlIHBhcmVudCB2YWx1ZSBvZi5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcGFyZW50IHZhbHVlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHBhcmVudChvYmplY3QsIHBhdGgpIHtcbiAgICAgIHJldHVybiBwYXRoLmxlbmd0aCA8IDIgPyBvYmplY3QgOiBiYXNlR2V0KG9iamVjdCwgYmFzZVNsaWNlKHBhdGgsIDAsIC0xKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVvcmRlciBgYXJyYXlgIGFjY29yZGluZyB0byB0aGUgc3BlY2lmaWVkIGluZGV4ZXMgd2hlcmUgdGhlIGVsZW1lbnQgYXRcbiAgICAgKiB0aGUgZmlyc3QgaW5kZXggaXMgYXNzaWduZWQgYXMgdGhlIGZpcnN0IGVsZW1lbnQsIHRoZSBlbGVtZW50IGF0XG4gICAgICogdGhlIHNlY29uZCBpbmRleCBpcyBhc3NpZ25lZCBhcyB0aGUgc2Vjb25kIGVsZW1lbnQsIGFuZCBzbyBvbi5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHJlb3JkZXIuXG4gICAgICogQHBhcmFtIHtBcnJheX0gaW5kZXhlcyBUaGUgYXJyYW5nZWQgYXJyYXkgaW5kZXhlcy5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiByZW9yZGVyKGFycmF5LCBpbmRleGVzKSB7XG4gICAgICB2YXIgYXJyTGVuZ3RoID0gYXJyYXkubGVuZ3RoLFxuICAgICAgICAgIGxlbmd0aCA9IG5hdGl2ZU1pbihpbmRleGVzLmxlbmd0aCwgYXJyTGVuZ3RoKSxcbiAgICAgICAgICBvbGRBcnJheSA9IGNvcHlBcnJheShhcnJheSk7XG5cbiAgICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgICB2YXIgaW5kZXggPSBpbmRleGVzW2xlbmd0aF07XG4gICAgICAgIGFycmF5W2xlbmd0aF0gPSBpc0luZGV4KGluZGV4LCBhcnJMZW5ndGgpID8gb2xkQXJyYXlbaW5kZXhdIDogdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGFycmF5O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIHZhbHVlIGF0IGBrZXlgLCB1bmxlc3MgYGtleWAgaXMgXCJfX3Byb3RvX19cIiBvciBcImNvbnN0cnVjdG9yXCIuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcHJvcGVydHkgdmFsdWUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gc2FmZUdldChvYmplY3QsIGtleSkge1xuICAgICAgaWYgKGtleSA9PT0gJ2NvbnN0cnVjdG9yJyAmJiB0eXBlb2Ygb2JqZWN0W2tleV0gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoa2V5ID09ICdfX3Byb3RvX18nKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG9iamVjdFtrZXldO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldHMgbWV0YWRhdGEgZm9yIGBmdW5jYC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBJZiB0aGlzIGZ1bmN0aW9uIGJlY29tZXMgaG90LCBpLmUuIGlzIGludm9rZWQgYSBsb3QgaW4gYSBzaG9ydFxuICAgICAqIHBlcmlvZCBvZiB0aW1lLCBpdCB3aWxsIHRyaXAgaXRzIGJyZWFrZXIgYW5kIHRyYW5zaXRpb24gdG8gYW4gaWRlbnRpdHlcbiAgICAgKiBmdW5jdGlvbiB0byBhdm9pZCBnYXJiYWdlIGNvbGxlY3Rpb24gcGF1c2VzIGluIFY4LiBTZWVcbiAgICAgKiBbVjggaXNzdWUgMjA3MF0oaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MjA3MClcbiAgICAgKiBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBhc3NvY2lhdGUgbWV0YWRhdGEgd2l0aC5cbiAgICAgKiBAcGFyYW0geyp9IGRhdGEgVGhlIG1ldGFkYXRhLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyBgZnVuY2AuXG4gICAgICovXG4gICAgdmFyIHNldERhdGEgPSBzaG9ydE91dChiYXNlU2V0RGF0YSk7XG5cbiAgICAvKipcbiAgICAgKiBBIHNpbXBsZSB3cmFwcGVyIGFyb3VuZCB0aGUgZ2xvYmFsIFtgc2V0VGltZW91dGBdKGh0dHBzOi8vbWRuLmlvL3NldFRpbWVvdXQpLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBkZWxheS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gd2FpdCBUaGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0byBkZWxheSBpbnZvY2F0aW9uLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ8T2JqZWN0fSBSZXR1cm5zIHRoZSB0aW1lciBpZCBvciB0aW1lb3V0IG9iamVjdC5cbiAgICAgKi9cbiAgICB2YXIgc2V0VGltZW91dCA9IGN0eFNldFRpbWVvdXQgfHwgZnVuY3Rpb24oZnVuYywgd2FpdCkge1xuICAgICAgcmV0dXJuIHJvb3Quc2V0VGltZW91dChmdW5jLCB3YWl0KTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgYHRvU3RyaW5nYCBtZXRob2Qgb2YgYGZ1bmNgIHRvIHJldHVybiBgc3RyaW5nYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHN0cmluZyBUaGUgYHRvU3RyaW5nYCByZXN1bHQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIGBmdW5jYC5cbiAgICAgKi9cbiAgICB2YXIgc2V0VG9TdHJpbmcgPSBzaG9ydE91dChiYXNlU2V0VG9TdHJpbmcpO1xuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgYHRvU3RyaW5nYCBtZXRob2Qgb2YgYHdyYXBwZXJgIHRvIG1pbWljIHRoZSBzb3VyY2Ugb2YgYHJlZmVyZW5jZWBcbiAgICAgKiB3aXRoIHdyYXBwZXIgZGV0YWlscyBpbiBhIGNvbW1lbnQgYXQgdGhlIHRvcCBvZiB0aGUgc291cmNlIGJvZHkuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHdyYXBwZXIgVGhlIGZ1bmN0aW9uIHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSByZWZlcmVuY2UgVGhlIHJlZmVyZW5jZSBmdW5jdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy4gU2VlIGBjcmVhdGVXcmFwYCBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyBgd3JhcHBlcmAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gc2V0V3JhcFRvU3RyaW5nKHdyYXBwZXIsIHJlZmVyZW5jZSwgYml0bWFzaykge1xuICAgICAgdmFyIHNvdXJjZSA9IChyZWZlcmVuY2UgKyAnJyk7XG4gICAgICByZXR1cm4gc2V0VG9TdHJpbmcod3JhcHBlciwgaW5zZXJ0V3JhcERldGFpbHMoc291cmNlLCB1cGRhdGVXcmFwRGV0YWlscyhnZXRXcmFwRGV0YWlscyhzb3VyY2UpLCBiaXRtYXNrKSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0J2xsIHNob3J0IG91dCBhbmQgaW52b2tlIGBpZGVudGl0eWAgaW5zdGVhZFxuICAgICAqIG9mIGBmdW5jYCB3aGVuIGl0J3MgY2FsbGVkIGBIT1RfQ09VTlRgIG9yIG1vcmUgdGltZXMgaW4gYEhPVF9TUEFOYFxuICAgICAqIG1pbGxpc2Vjb25kcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gcmVzdHJpY3QuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgc2hvcnRhYmxlIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNob3J0T3V0KGZ1bmMpIHtcbiAgICAgIHZhciBjb3VudCA9IDAsXG4gICAgICAgICAgbGFzdENhbGxlZCA9IDA7XG5cbiAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHN0YW1wID0gbmF0aXZlTm93KCksXG4gICAgICAgICAgICByZW1haW5pbmcgPSBIT1RfU1BBTiAtIChzdGFtcCAtIGxhc3RDYWxsZWQpO1xuXG4gICAgICAgIGxhc3RDYWxsZWQgPSBzdGFtcDtcbiAgICAgICAgaWYgKHJlbWFpbmluZyA+IDApIHtcbiAgICAgICAgICBpZiAoKytjb3VudCA+PSBIT1RfQ09VTlQpIHtcbiAgICAgICAgICAgIHJldHVybiBhcmd1bWVudHNbMF07XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvdW50ID0gMDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZnVuYy5hcHBseSh1bmRlZmluZWQsIGFyZ3VtZW50cyk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5zaHVmZmxlYCB3aGljaCBtdXRhdGVzIGFuZCBzZXRzIHRoZSBzaXplIG9mIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBzaHVmZmxlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbc2l6ZT1hcnJheS5sZW5ndGhdIFRoZSBzaXplIG9mIGBhcnJheWAuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gc2h1ZmZsZVNlbGYoYXJyYXksIHNpemUpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IGFycmF5Lmxlbmd0aCxcbiAgICAgICAgICBsYXN0SW5kZXggPSBsZW5ndGggLSAxO1xuXG4gICAgICBzaXplID0gc2l6ZSA9PT0gdW5kZWZpbmVkID8gbGVuZ3RoIDogc2l6ZTtcbiAgICAgIHdoaWxlICgrK2luZGV4IDwgc2l6ZSkge1xuICAgICAgICB2YXIgcmFuZCA9IGJhc2VSYW5kb20oaW5kZXgsIGxhc3RJbmRleCksXG4gICAgICAgICAgICB2YWx1ZSA9IGFycmF5W3JhbmRdO1xuXG4gICAgICAgIGFycmF5W3JhbmRdID0gYXJyYXlbaW5kZXhdO1xuICAgICAgICBhcnJheVtpbmRleF0gPSB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIGFycmF5Lmxlbmd0aCA9IHNpemU7XG4gICAgICByZXR1cm4gYXJyYXk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHN0cmluZ2AgdG8gYSBwcm9wZXJ0eSBwYXRoIGFycmF5LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHByb3BlcnR5IHBhdGggYXJyYXkuXG4gICAgICovXG4gICAgdmFyIHN0cmluZ1RvUGF0aCA9IG1lbW9pemVDYXBwZWQoZnVuY3Rpb24oc3RyaW5nKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgICBpZiAoc3RyaW5nLmNoYXJDb2RlQXQoMCkgPT09IDQ2IC8qIC4gKi8pIHtcbiAgICAgICAgcmVzdWx0LnB1c2goJycpO1xuICAgICAgfVxuICAgICAgc3RyaW5nLnJlcGxhY2UocmVQcm9wTmFtZSwgZnVuY3Rpb24obWF0Y2gsIG51bWJlciwgcXVvdGUsIHN1YlN0cmluZykge1xuICAgICAgICByZXN1bHQucHVzaChxdW90ZSA/IHN1YlN0cmluZy5yZXBsYWNlKHJlRXNjYXBlQ2hhciwgJyQxJykgOiAobnVtYmVyIHx8IG1hdGNoKSk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgc3RyaW5nIGtleSBpZiBpdCdzIG5vdCBhIHN0cmluZyBvciBzeW1ib2wuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGluc3BlY3QuXG4gICAgICogQHJldHVybnMge3N0cmluZ3xzeW1ib2x9IFJldHVybnMgdGhlIGtleS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0b0tleSh2YWx1ZSkge1xuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnc3RyaW5nJyB8fCBpc1N5bWJvbCh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgfVxuICAgICAgdmFyIHJlc3VsdCA9ICh2YWx1ZSArICcnKTtcbiAgICAgIHJldHVybiAocmVzdWx0ID09ICcwJyAmJiAoMSAvIHZhbHVlKSA9PSAtSU5GSU5JVFkpID8gJy0wJyA6IHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgZnVuY2AgdG8gaXRzIHNvdXJjZSBjb2RlLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHNvdXJjZSBjb2RlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRvU291cmNlKGZ1bmMpIHtcbiAgICAgIGlmIChmdW5jICE9IG51bGwpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICByZXR1cm4gZnVuY1RvU3RyaW5nLmNhbGwoZnVuYyk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgcmV0dXJuIChmdW5jICsgJycpO1xuICAgICAgICB9IGNhdGNoIChlKSB7fVxuICAgICAgfVxuICAgICAgcmV0dXJuICcnO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFVwZGF0ZXMgd3JhcHBlciBgZGV0YWlsc2AgYmFzZWQgb24gYGJpdG1hc2tgIGZsYWdzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IGRldGFpbHMgVGhlIGRldGFpbHMgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGNyZWF0ZVdyYXBgIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBkZXRhaWxzYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB1cGRhdGVXcmFwRGV0YWlscyhkZXRhaWxzLCBiaXRtYXNrKSB7XG4gICAgICBhcnJheUVhY2god3JhcEZsYWdzLCBmdW5jdGlvbihwYWlyKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9ICdfLicgKyBwYWlyWzBdO1xuICAgICAgICBpZiAoKGJpdG1hc2sgJiBwYWlyWzFdKSAmJiAhYXJyYXlJbmNsdWRlcyhkZXRhaWxzLCB2YWx1ZSkpIHtcbiAgICAgICAgICBkZXRhaWxzLnB1c2godmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBkZXRhaWxzLnNvcnQoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgY2xvbmUgb2YgYHdyYXBwZXJgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gd3JhcHBlciBUaGUgd3JhcHBlciB0byBjbG9uZS5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjbG9uZWQgd3JhcHBlci5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB3cmFwcGVyQ2xvbmUod3JhcHBlcikge1xuICAgICAgaWYgKHdyYXBwZXIgaW5zdGFuY2VvZiBMYXp5V3JhcHBlcikge1xuICAgICAgICByZXR1cm4gd3JhcHBlci5jbG9uZSgpO1xuICAgICAgfVxuICAgICAgdmFyIHJlc3VsdCA9IG5ldyBMb2Rhc2hXcmFwcGVyKHdyYXBwZXIuX193cmFwcGVkX18sIHdyYXBwZXIuX19jaGFpbl9fKTtcbiAgICAgIHJlc3VsdC5fX2FjdGlvbnNfXyA9IGNvcHlBcnJheSh3cmFwcGVyLl9fYWN0aW9uc19fKTtcbiAgICAgIHJlc3VsdC5fX2luZGV4X18gID0gd3JhcHBlci5fX2luZGV4X187XG4gICAgICByZXN1bHQuX192YWx1ZXNfXyA9IHdyYXBwZXIuX192YWx1ZXNfXztcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiBlbGVtZW50cyBzcGxpdCBpbnRvIGdyb3VwcyB0aGUgbGVuZ3RoIG9mIGBzaXplYC5cbiAgICAgKiBJZiBgYXJyYXlgIGNhbid0IGJlIHNwbGl0IGV2ZW5seSwgdGhlIGZpbmFsIGNodW5rIHdpbGwgYmUgdGhlIHJlbWFpbmluZ1xuICAgICAqIGVsZW1lbnRzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHByb2Nlc3MuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzaXplPTFdIFRoZSBsZW5ndGggb2YgZWFjaCBjaHVua1xuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgY2h1bmtzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmNodW5rKFsnYScsICdiJywgJ2MnLCAnZCddLCAyKTtcbiAgICAgKiAvLyA9PiBbWydhJywgJ2InXSwgWydjJywgJ2QnXV1cbiAgICAgKlxuICAgICAqIF8uY2h1bmsoWydhJywgJ2InLCAnYycsICdkJ10sIDMpO1xuICAgICAqIC8vID0+IFtbJ2EnLCAnYicsICdjJ10sIFsnZCddXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNodW5rKGFycmF5LCBzaXplLCBndWFyZCkge1xuICAgICAgaWYgKChndWFyZCA/IGlzSXRlcmF0ZWVDYWxsKGFycmF5LCBzaXplLCBndWFyZCkgOiBzaXplID09PSB1bmRlZmluZWQpKSB7XG4gICAgICAgIHNpemUgPSAxO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2l6ZSA9IG5hdGl2ZU1heCh0b0ludGVnZXIoc2l6ZSksIDApO1xuICAgICAgfVxuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgaWYgKCFsZW5ndGggfHwgc2l6ZSA8IDEpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgdmFyIGluZGV4ID0gMCxcbiAgICAgICAgICByZXNJbmRleCA9IDAsXG4gICAgICAgICAgcmVzdWx0ID0gQXJyYXkobmF0aXZlQ2VpbChsZW5ndGggLyBzaXplKSk7XG5cbiAgICAgIHdoaWxlIChpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICByZXN1bHRbcmVzSW5kZXgrK10gPSBiYXNlU2xpY2UoYXJyYXksIGluZGV4LCAoaW5kZXggKz0gc2l6ZSkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IHdpdGggYWxsIGZhbHNleSB2YWx1ZXMgcmVtb3ZlZC4gVGhlIHZhbHVlcyBgZmFsc2VgLCBgbnVsbGAsXG4gICAgICogYDBgLCBgXCJcImAsIGB1bmRlZmluZWRgLCBhbmQgYE5hTmAgYXJlIGZhbHNleS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBjb21wYWN0LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGZpbHRlcmVkIHZhbHVlcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5jb21wYWN0KFswLCAxLCBmYWxzZSwgMiwgJycsIDNdKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjb21wYWN0KGFycmF5KSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aCxcbiAgICAgICAgICByZXNJbmRleCA9IDAsXG4gICAgICAgICAgcmVzdWx0ID0gW107XG5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IGFycmF5W2luZGV4XTtcbiAgICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgcmVzdWx0W3Jlc0luZGV4KytdID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBhcnJheSBjb25jYXRlbmF0aW5nIGBhcnJheWAgd2l0aCBhbnkgYWRkaXRpb25hbCBhcnJheXNcbiAgICAgKiBhbmQvb3IgdmFsdWVzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGNvbmNhdGVuYXRlLlxuICAgICAqIEBwYXJhbSB7Li4uKn0gW3ZhbHVlc10gVGhlIHZhbHVlcyB0byBjb25jYXRlbmF0ZS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBjb25jYXRlbmF0ZWQgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFsxXTtcbiAgICAgKiB2YXIgb3RoZXIgPSBfLmNvbmNhdChhcnJheSwgMiwgWzNdLCBbWzRdXSk7XG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhvdGhlcik7XG4gICAgICogLy8gPT4gWzEsIDIsIDMsIFs0XV1cbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKGFycmF5KTtcbiAgICAgKiAvLyA9PiBbMV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjb25jYXQoKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIHZhciBhcmdzID0gQXJyYXkobGVuZ3RoIC0gMSksXG4gICAgICAgICAgYXJyYXkgPSBhcmd1bWVudHNbMF0sXG4gICAgICAgICAgaW5kZXggPSBsZW5ndGg7XG5cbiAgICAgIHdoaWxlIChpbmRleC0tKSB7XG4gICAgICAgIGFyZ3NbaW5kZXggLSAxXSA9IGFyZ3VtZW50c1tpbmRleF07XG4gICAgICB9XG4gICAgICByZXR1cm4gYXJyYXlQdXNoKGlzQXJyYXkoYXJyYXkpID8gY29weUFycmF5KGFycmF5KSA6IFthcnJheV0sIGJhc2VGbGF0dGVuKGFyZ3MsIDEpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIGBhcnJheWAgdmFsdWVzIG5vdCBpbmNsdWRlZCBpbiB0aGUgb3RoZXIgZ2l2ZW4gYXJyYXlzXG4gICAgICogdXNpbmcgW2BTYW1lVmFsdWVaZXJvYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtc2FtZXZhbHVlemVybylcbiAgICAgKiBmb3IgZXF1YWxpdHkgY29tcGFyaXNvbnMuIFRoZSBvcmRlciBhbmQgcmVmZXJlbmNlcyBvZiByZXN1bHQgdmFsdWVzIGFyZVxuICAgICAqIGRldGVybWluZWQgYnkgdGhlIGZpcnN0IGFycmF5LlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFVubGlrZSBgXy5wdWxsQWxsYCwgdGhpcyBtZXRob2QgcmV0dXJucyBhIG5ldyBhcnJheS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7Li4uQXJyYXl9IFt2YWx1ZXNdIFRoZSB2YWx1ZXMgdG8gZXhjbHVkZS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBmaWx0ZXJlZCB2YWx1ZXMuXG4gICAgICogQHNlZSBfLndpdGhvdXQsIF8ueG9yXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZGlmZmVyZW5jZShbMiwgMV0sIFsyLCAzXSk7XG4gICAgICogLy8gPT4gWzFdXG4gICAgICovXG4gICAgdmFyIGRpZmZlcmVuY2UgPSBiYXNlUmVzdChmdW5jdGlvbihhcnJheSwgdmFsdWVzKSB7XG4gICAgICByZXR1cm4gaXNBcnJheUxpa2VPYmplY3QoYXJyYXkpXG4gICAgICAgID8gYmFzZURpZmZlcmVuY2UoYXJyYXksIGJhc2VGbGF0dGVuKHZhbHVlcywgMSwgaXNBcnJheUxpa2VPYmplY3QsIHRydWUpKVxuICAgICAgICA6IFtdO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5kaWZmZXJlbmNlYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBpdGVyYXRlZWAgd2hpY2hcbiAgICAgKiBpcyBpbnZva2VkIGZvciBlYWNoIGVsZW1lbnQgb2YgYGFycmF5YCBhbmQgYHZhbHVlc2AgdG8gZ2VuZXJhdGUgdGhlIGNyaXRlcmlvblxuICAgICAqIGJ5IHdoaWNoIHRoZXkncmUgY29tcGFyZWQuIFRoZSBvcmRlciBhbmQgcmVmZXJlbmNlcyBvZiByZXN1bHQgdmFsdWVzIGFyZVxuICAgICAqIGRldGVybWluZWQgYnkgdGhlIGZpcnN0IGFycmF5LiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDpcbiAgICAgKiAodmFsdWUpLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFVubGlrZSBgXy5wdWxsQWxsQnlgLCB0aGlzIG1ldGhvZCByZXR1cm5zIGEgbmV3IGFycmF5LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHsuLi5BcnJheX0gW3ZhbHVlc10gVGhlIHZhbHVlcyB0byBleGNsdWRlLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBmaWx0ZXJlZCB2YWx1ZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZGlmZmVyZW5jZUJ5KFsyLjEsIDEuMl0sIFsyLjMsIDMuNF0sIE1hdGguZmxvb3IpO1xuICAgICAqIC8vID0+IFsxLjJdXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmRpZmZlcmVuY2VCeShbeyAneCc6IDIgfSwgeyAneCc6IDEgfV0sIFt7ICd4JzogMSB9XSwgJ3gnKTtcbiAgICAgKiAvLyA9PiBbeyAneCc6IDIgfV1cbiAgICAgKi9cbiAgICB2YXIgZGlmZmVyZW5jZUJ5ID0gYmFzZVJlc3QoZnVuY3Rpb24oYXJyYXksIHZhbHVlcykge1xuICAgICAgdmFyIGl0ZXJhdGVlID0gbGFzdCh2YWx1ZXMpO1xuICAgICAgaWYgKGlzQXJyYXlMaWtlT2JqZWN0KGl0ZXJhdGVlKSkge1xuICAgICAgICBpdGVyYXRlZSA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBpc0FycmF5TGlrZU9iamVjdChhcnJheSlcbiAgICAgICAgPyBiYXNlRGlmZmVyZW5jZShhcnJheSwgYmFzZUZsYXR0ZW4odmFsdWVzLCAxLCBpc0FycmF5TGlrZU9iamVjdCwgdHJ1ZSksIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAyKSlcbiAgICAgICAgOiBbXTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZGlmZmVyZW5jZWAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgY29tcGFyYXRvcmBcbiAgICAgKiB3aGljaCBpcyBpbnZva2VkIHRvIGNvbXBhcmUgZWxlbWVudHMgb2YgYGFycmF5YCB0byBgdmFsdWVzYC4gVGhlIG9yZGVyIGFuZFxuICAgICAqIHJlZmVyZW5jZXMgb2YgcmVzdWx0IHZhbHVlcyBhcmUgZGV0ZXJtaW5lZCBieSB0aGUgZmlyc3QgYXJyYXkuIFRoZSBjb21wYXJhdG9yXG4gICAgICogaXMgaW52b2tlZCB3aXRoIHR3byBhcmd1bWVudHM6IChhcnJWYWwsIG90aFZhbCkuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVW5saWtlIGBfLnB1bGxBbGxXaXRoYCwgdGhpcyBtZXRob2QgcmV0dXJucyBhIG5ldyBhcnJheS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7Li4uQXJyYXl9IFt2YWx1ZXNdIFRoZSB2YWx1ZXMgdG8gZXhjbHVkZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY29tcGFyYXRvcl0gVGhlIGNvbXBhcmF0b3IgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBmaWx0ZXJlZCB2YWx1ZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW3sgJ3gnOiAxLCAneSc6IDIgfSwgeyAneCc6IDIsICd5JzogMSB9XTtcbiAgICAgKlxuICAgICAqIF8uZGlmZmVyZW5jZVdpdGgob2JqZWN0cywgW3sgJ3gnOiAxLCAneSc6IDIgfV0sIF8uaXNFcXVhbCk7XG4gICAgICogLy8gPT4gW3sgJ3gnOiAyLCAneSc6IDEgfV1cbiAgICAgKi9cbiAgICB2YXIgZGlmZmVyZW5jZVdpdGggPSBiYXNlUmVzdChmdW5jdGlvbihhcnJheSwgdmFsdWVzKSB7XG4gICAgICB2YXIgY29tcGFyYXRvciA9IGxhc3QodmFsdWVzKTtcbiAgICAgIGlmIChpc0FycmF5TGlrZU9iamVjdChjb21wYXJhdG9yKSkge1xuICAgICAgICBjb21wYXJhdG9yID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGlzQXJyYXlMaWtlT2JqZWN0KGFycmF5KVxuICAgICAgICA/IGJhc2VEaWZmZXJlbmNlKGFycmF5LCBiYXNlRmxhdHRlbih2YWx1ZXMsIDEsIGlzQXJyYXlMaWtlT2JqZWN0LCB0cnVlKSwgdW5kZWZpbmVkLCBjb21wYXJhdG9yKVxuICAgICAgICA6IFtdO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHNsaWNlIG9mIGBhcnJheWAgd2l0aCBgbmAgZWxlbWVudHMgZHJvcHBlZCBmcm9tIHRoZSBiZWdpbm5pbmcuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC41LjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtuPTFdIFRoZSBudW1iZXIgb2YgZWxlbWVudHMgdG8gZHJvcC5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgc2xpY2Ugb2YgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5kcm9wKFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gWzIsIDNdXG4gICAgICpcbiAgICAgKiBfLmRyb3AoWzEsIDIsIDNdLCAyKTtcbiAgICAgKiAvLyA9PiBbM11cbiAgICAgKlxuICAgICAqIF8uZHJvcChbMSwgMiwgM10sIDUpO1xuICAgICAqIC8vID0+IFtdXG4gICAgICpcbiAgICAgKiBfLmRyb3AoWzEsIDIsIDNdLCAwKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBkcm9wKGFycmF5LCBuLCBndWFyZCkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgbiA9IChndWFyZCB8fCBuID09PSB1bmRlZmluZWQpID8gMSA6IHRvSW50ZWdlcihuKTtcbiAgICAgIHJldHVybiBiYXNlU2xpY2UoYXJyYXksIG4gPCAwID8gMCA6IG4sIGxlbmd0aCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHNsaWNlIG9mIGBhcnJheWAgd2l0aCBgbmAgZWxlbWVudHMgZHJvcHBlZCBmcm9tIHRoZSBlbmQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtuPTFdIFRoZSBudW1iZXIgb2YgZWxlbWVudHMgdG8gZHJvcC5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgc2xpY2Ugb2YgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5kcm9wUmlnaHQoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiBbMSwgMl1cbiAgICAgKlxuICAgICAqIF8uZHJvcFJpZ2h0KFsxLCAyLCAzXSwgMik7XG4gICAgICogLy8gPT4gWzFdXG4gICAgICpcbiAgICAgKiBfLmRyb3BSaWdodChbMSwgMiwgM10sIDUpO1xuICAgICAqIC8vID0+IFtdXG4gICAgICpcbiAgICAgKiBfLmRyb3BSaWdodChbMSwgMiwgM10sIDApO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGRyb3BSaWdodChhcnJheSwgbiwgZ3VhcmQpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIG4gPSAoZ3VhcmQgfHwgbiA9PT0gdW5kZWZpbmVkKSA/IDEgOiB0b0ludGVnZXIobik7XG4gICAgICBuID0gbGVuZ3RoIC0gbjtcbiAgICAgIHJldHVybiBiYXNlU2xpY2UoYXJyYXksIDAsIG4gPCAwID8gMCA6IG4pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBzbGljZSBvZiBgYXJyYXlgIGV4Y2x1ZGluZyBlbGVtZW50cyBkcm9wcGVkIGZyb20gdGhlIGVuZC5cbiAgICAgKiBFbGVtZW50cyBhcmUgZHJvcHBlZCB1bnRpbCBgcHJlZGljYXRlYCByZXR1cm5zIGZhbHNleS4gVGhlIHByZWRpY2F0ZSBpc1xuICAgICAqIGludm9rZWQgd2l0aCB0aHJlZSBhcmd1bWVudHM6ICh2YWx1ZSwgaW5kZXgsIGFycmF5KS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzbGljZSBvZiBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICAnYWN0aXZlJzogdHJ1ZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAgJ2FjdGl2ZSc6IGZhbHNlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ3BlYmJsZXMnLCAnYWN0aXZlJzogZmFsc2UgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLmRyb3BSaWdodFdoaWxlKHVzZXJzLCBmdW5jdGlvbihvKSB7IHJldHVybiAhby5hY3RpdmU7IH0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnYmFybmV5J11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzYCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5kcm9wUmlnaHRXaGlsZSh1c2VycywgeyAndXNlcic6ICdwZWJibGVzJywgJ2FjdGl2ZSc6IGZhbHNlIH0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnYmFybmV5JywgJ2ZyZWQnXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZHJvcFJpZ2h0V2hpbGUodXNlcnMsIFsnYWN0aXZlJywgZmFsc2VdKTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2Jhcm5leSddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmRyb3BSaWdodFdoaWxlKHVzZXJzLCAnYWN0aXZlJyk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydiYXJuZXknLCAnZnJlZCcsICdwZWJibGVzJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBkcm9wUmlnaHRXaGlsZShhcnJheSwgcHJlZGljYXRlKSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aClcbiAgICAgICAgPyBiYXNlV2hpbGUoYXJyYXksIGdldEl0ZXJhdGVlKHByZWRpY2F0ZSwgMyksIHRydWUsIHRydWUpXG4gICAgICAgIDogW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHNsaWNlIG9mIGBhcnJheWAgZXhjbHVkaW5nIGVsZW1lbnRzIGRyb3BwZWQgZnJvbSB0aGUgYmVnaW5uaW5nLlxuICAgICAqIEVsZW1lbnRzIGFyZSBkcm9wcGVkIHVudGlsIGBwcmVkaWNhdGVgIHJldHVybnMgZmFsc2V5LiBUaGUgcHJlZGljYXRlIGlzXG4gICAgICogaW52b2tlZCB3aXRoIHRocmVlIGFyZ3VtZW50czogKHZhbHVlLCBpbmRleCwgYXJyYXkpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHNsaWNlIG9mIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgICdhY3RpdmUnOiBmYWxzZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAgJ2FjdGl2ZSc6IGZhbHNlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ3BlYmJsZXMnLCAnYWN0aXZlJzogdHJ1ZSB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8uZHJvcFdoaWxlKHVzZXJzLCBmdW5jdGlvbihvKSB7IHJldHVybiAhby5hY3RpdmU7IH0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsncGViYmxlcyddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc2AgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZHJvcFdoaWxlKHVzZXJzLCB7ICd1c2VyJzogJ2Jhcm5leScsICdhY3RpdmUnOiBmYWxzZSB9KTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2ZyZWQnLCAncGViYmxlcyddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc1Byb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5kcm9wV2hpbGUodXNlcnMsIFsnYWN0aXZlJywgZmFsc2VdKTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ3BlYmJsZXMnXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5kcm9wV2hpbGUodXNlcnMsICdhY3RpdmUnKTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2Jhcm5leScsICdmcmVkJywgJ3BlYmJsZXMnXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGRyb3BXaGlsZShhcnJheSwgcHJlZGljYXRlKSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aClcbiAgICAgICAgPyBiYXNlV2hpbGUoYXJyYXksIGdldEl0ZXJhdGVlKHByZWRpY2F0ZSwgMyksIHRydWUpXG4gICAgICAgIDogW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRmlsbHMgZWxlbWVudHMgb2YgYGFycmF5YCB3aXRoIGB2YWx1ZWAgZnJvbSBgc3RhcnRgIHVwIHRvLCBidXQgbm90XG4gICAgICogaW5jbHVkaW5nLCBgZW5kYC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4yLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gZmlsbC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBmaWxsIGBhcnJheWAgd2l0aC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3N0YXJ0PTBdIFRoZSBzdGFydCBwb3NpdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2VuZD1hcnJheS5sZW5ndGhdIFRoZSBlbmQgcG9zaXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFsxLCAyLCAzXTtcbiAgICAgKlxuICAgICAqIF8uZmlsbChhcnJheSwgJ2EnKTtcbiAgICAgKiBjb25zb2xlLmxvZyhhcnJheSk7XG4gICAgICogLy8gPT4gWydhJywgJ2EnLCAnYSddXG4gICAgICpcbiAgICAgKiBfLmZpbGwoQXJyYXkoMyksIDIpO1xuICAgICAqIC8vID0+IFsyLCAyLCAyXVxuICAgICAqXG4gICAgICogXy5maWxsKFs0LCA2LCA4LCAxMF0sICcqJywgMSwgMyk7XG4gICAgICogLy8gPT4gWzQsICcqJywgJyonLCAxMF1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmaWxsKGFycmF5LCB2YWx1ZSwgc3RhcnQsIGVuZCkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgaWYgKHN0YXJ0ICYmIHR5cGVvZiBzdGFydCAhPSAnbnVtYmVyJyAmJiBpc0l0ZXJhdGVlQ2FsbChhcnJheSwgdmFsdWUsIHN0YXJ0KSkge1xuICAgICAgICBzdGFydCA9IDA7XG4gICAgICAgIGVuZCA9IGxlbmd0aDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlRmlsbChhcnJheSwgdmFsdWUsIHN0YXJ0LCBlbmQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZmluZGAgZXhjZXB0IHRoYXQgaXQgcmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIGZpcnN0XG4gICAgICogZWxlbWVudCBgcHJlZGljYXRlYCByZXR1cm5zIHRydXRoeSBmb3IgaW5zdGVhZCBvZiB0aGUgZWxlbWVudCBpdHNlbGYuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMS4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtmcm9tSW5kZXg9MF0gVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBmb3VuZCBlbGVtZW50LCBlbHNlIGAtMWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgICdhY3RpdmUnOiBmYWxzZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAgJ2FjdGl2ZSc6IGZhbHNlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ3BlYmJsZXMnLCAnYWN0aXZlJzogdHJ1ZSB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8uZmluZEluZGV4KHVzZXJzLCBmdW5jdGlvbihvKSB7IHJldHVybiBvLnVzZXIgPT0gJ2Jhcm5leSc7IH0pO1xuICAgICAqIC8vID0+IDBcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzYCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maW5kSW5kZXgodXNlcnMsIHsgJ3VzZXInOiAnZnJlZCcsICdhY3RpdmUnOiBmYWxzZSB9KTtcbiAgICAgKiAvLyA9PiAxXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc1Byb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maW5kSW5kZXgodXNlcnMsIFsnYWN0aXZlJywgZmFsc2VdKTtcbiAgICAgKiAvLyA9PiAwXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbmRJbmRleCh1c2VycywgJ2FjdGl2ZScpO1xuICAgICAqIC8vID0+IDJcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmaW5kSW5kZXgoYXJyYXksIHByZWRpY2F0ZSwgZnJvbUluZGV4KSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICByZXR1cm4gLTE7XG4gICAgICB9XG4gICAgICB2YXIgaW5kZXggPSBmcm9tSW5kZXggPT0gbnVsbCA/IDAgOiB0b0ludGVnZXIoZnJvbUluZGV4KTtcbiAgICAgIGlmIChpbmRleCA8IDApIHtcbiAgICAgICAgaW5kZXggPSBuYXRpdmVNYXgobGVuZ3RoICsgaW5kZXgsIDApO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VGaW5kSW5kZXgoYXJyYXksIGdldEl0ZXJhdGVlKHByZWRpY2F0ZSwgMyksIGluZGV4KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmZpbmRJbmRleGAgZXhjZXB0IHRoYXQgaXQgaXRlcmF0ZXMgb3ZlciBlbGVtZW50c1xuICAgICAqIG9mIGBjb2xsZWN0aW9uYCBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtmcm9tSW5kZXg9YXJyYXkubGVuZ3RoLTFdIFRoZSBpbmRleCB0byBzZWFyY2ggZnJvbS5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgZm91bmQgZWxlbWVudCwgZWxzZSBgLTFgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICAnYWN0aXZlJzogdHJ1ZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAgJ2FjdGl2ZSc6IGZhbHNlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ3BlYmJsZXMnLCAnYWN0aXZlJzogZmFsc2UgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLmZpbmRMYXN0SW5kZXgodXNlcnMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuIG8udXNlciA9PSAncGViYmxlcyc7IH0pO1xuICAgICAqIC8vID0+IDJcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzYCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maW5kTGFzdEluZGV4KHVzZXJzLCB7ICd1c2VyJzogJ2Jhcm5leScsICdhY3RpdmUnOiB0cnVlIH0pO1xuICAgICAqIC8vID0+IDBcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbmRMYXN0SW5kZXgodXNlcnMsIFsnYWN0aXZlJywgZmFsc2VdKTtcbiAgICAgKiAvLyA9PiAyXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbmRMYXN0SW5kZXgodXNlcnMsICdhY3RpdmUnKTtcbiAgICAgKiAvLyA9PiAwXG4gICAgICovXG4gICAgZnVuY3Rpb24gZmluZExhc3RJbmRleChhcnJheSwgcHJlZGljYXRlLCBmcm9tSW5kZXgpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiAtMTtcbiAgICAgIH1cbiAgICAgIHZhciBpbmRleCA9IGxlbmd0aCAtIDE7XG4gICAgICBpZiAoZnJvbUluZGV4ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgaW5kZXggPSB0b0ludGVnZXIoZnJvbUluZGV4KTtcbiAgICAgICAgaW5kZXggPSBmcm9tSW5kZXggPCAwXG4gICAgICAgICAgPyBuYXRpdmVNYXgobGVuZ3RoICsgaW5kZXgsIDApXG4gICAgICAgICAgOiBuYXRpdmVNaW4oaW5kZXgsIGxlbmd0aCAtIDEpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VGaW5kSW5kZXgoYXJyYXksIGdldEl0ZXJhdGVlKHByZWRpY2F0ZSwgMyksIGluZGV4LCB0cnVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBGbGF0dGVucyBgYXJyYXlgIGEgc2luZ2xlIGxldmVsIGRlZXAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gZmxhdHRlbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBmbGF0dGVuZWQgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZmxhdHRlbihbMSwgWzIsIFszLCBbNF1dLCA1XV0pO1xuICAgICAqIC8vID0+IFsxLCAyLCBbMywgWzRdXSwgNV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmbGF0dGVuKGFycmF5KSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICByZXR1cm4gbGVuZ3RoID8gYmFzZUZsYXR0ZW4oYXJyYXksIDEpIDogW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVjdXJzaXZlbHkgZmxhdHRlbnMgYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBmbGF0dGVuLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGZsYXR0ZW5lZCBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5mbGF0dGVuRGVlcChbMSwgWzIsIFszLCBbNF1dLCA1XV0pO1xuICAgICAqIC8vID0+IFsxLCAyLCAzLCA0LCA1XVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZsYXR0ZW5EZWVwKGFycmF5KSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICByZXR1cm4gbGVuZ3RoID8gYmFzZUZsYXR0ZW4oYXJyYXksIElORklOSVRZKSA6IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlY3Vyc2l2ZWx5IGZsYXR0ZW4gYGFycmF5YCB1cCB0byBgZGVwdGhgIHRpbWVzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuNC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGZsYXR0ZW4uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtkZXB0aD0xXSBUaGUgbWF4aW11bSByZWN1cnNpb24gZGVwdGguXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmxhdHRlbmVkIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbMSwgWzIsIFszLCBbNF1dLCA1XV07XG4gICAgICpcbiAgICAgKiBfLmZsYXR0ZW5EZXB0aChhcnJheSwgMSk7XG4gICAgICogLy8gPT4gWzEsIDIsIFszLCBbNF1dLCA1XVxuICAgICAqXG4gICAgICogXy5mbGF0dGVuRGVwdGgoYXJyYXksIDIpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzLCBbNF0sIDVdXG4gICAgICovXG4gICAgZnVuY3Rpb24gZmxhdHRlbkRlcHRoKGFycmF5LCBkZXB0aCkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgZGVwdGggPSBkZXB0aCA9PT0gdW5kZWZpbmVkID8gMSA6IHRvSW50ZWdlcihkZXB0aCk7XG4gICAgICByZXR1cm4gYmFzZUZsYXR0ZW4oYXJyYXksIGRlcHRoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgaW52ZXJzZSBvZiBgXy50b1BhaXJzYDsgdGhpcyBtZXRob2QgcmV0dXJucyBhbiBvYmplY3QgY29tcG9zZWRcbiAgICAgKiBmcm9tIGtleS12YWx1ZSBgcGFpcnNgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gcGFpcnMgVGhlIGtleS12YWx1ZSBwYWlycy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmZyb21QYWlycyhbWydhJywgMV0sIFsnYicsIDJdXSk7XG4gICAgICogLy8gPT4geyAnYSc6IDEsICdiJzogMiB9XG4gICAgICovXG4gICAgZnVuY3Rpb24gZnJvbVBhaXJzKHBhaXJzKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBwYWlycyA9PSBudWxsID8gMCA6IHBhaXJzLmxlbmd0aCxcbiAgICAgICAgICByZXN1bHQgPSB7fTtcblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIHBhaXIgPSBwYWlyc1tpbmRleF07XG4gICAgICAgIHJlc3VsdFtwYWlyWzBdXSA9IHBhaXJbMV07XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGZpcnN0IGVsZW1lbnQgb2YgYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBhbGlhcyBmaXJzdFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZmlyc3QgZWxlbWVudCBvZiBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmhlYWQoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiAxXG4gICAgICpcbiAgICAgKiBfLmhlYWQoW10pO1xuICAgICAqIC8vID0+IHVuZGVmaW5lZFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGhlYWQoYXJyYXkpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKSA/IGFycmF5WzBdIDogdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGluZGV4IGF0IHdoaWNoIHRoZSBmaXJzdCBvY2N1cnJlbmNlIG9mIGB2YWx1ZWAgaXMgZm91bmQgaW4gYGFycmF5YFxuICAgICAqIHVzaW5nIFtgU2FtZVZhbHVlWmVyb2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXNhbWV2YWx1ZXplcm8pXG4gICAgICogZm9yIGVxdWFsaXR5IGNvbXBhcmlzb25zLiBJZiBgZnJvbUluZGV4YCBpcyBuZWdhdGl2ZSwgaXQncyB1c2VkIGFzIHRoZVxuICAgICAqIG9mZnNldCBmcm9tIHRoZSBlbmQgb2YgYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtmcm9tSW5kZXg9MF0gVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBtYXRjaGVkIHZhbHVlLCBlbHNlIGAtMWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaW5kZXhPZihbMSwgMiwgMSwgMl0sIDIpO1xuICAgICAqIC8vID0+IDFcbiAgICAgKlxuICAgICAqIC8vIFNlYXJjaCBmcm9tIHRoZSBgZnJvbUluZGV4YC5cbiAgICAgKiBfLmluZGV4T2YoWzEsIDIsIDEsIDJdLCAyLCAyKTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICovXG4gICAgZnVuY3Rpb24gaW5kZXhPZihhcnJheSwgdmFsdWUsIGZyb21JbmRleCkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgfVxuICAgICAgdmFyIGluZGV4ID0gZnJvbUluZGV4ID09IG51bGwgPyAwIDogdG9JbnRlZ2VyKGZyb21JbmRleCk7XG4gICAgICBpZiAoaW5kZXggPCAwKSB7XG4gICAgICAgIGluZGV4ID0gbmF0aXZlTWF4KGxlbmd0aCArIGluZGV4LCAwKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlSW5kZXhPZihhcnJheSwgdmFsdWUsIGluZGV4KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIGFsbCBidXQgdGhlIGxhc3QgZWxlbWVudCBvZiBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgc2xpY2Ugb2YgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pbml0aWFsKFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gWzEsIDJdXG4gICAgICovXG4gICAgZnVuY3Rpb24gaW5pdGlhbChhcnJheSkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgcmV0dXJuIGxlbmd0aCA/IGJhc2VTbGljZShhcnJheSwgMCwgLTEpIDogW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiB1bmlxdWUgdmFsdWVzIHRoYXQgYXJlIGluY2x1ZGVkIGluIGFsbCBnaXZlbiBhcnJheXNcbiAgICAgKiB1c2luZyBbYFNhbWVWYWx1ZVplcm9gXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1zYW1ldmFsdWV6ZXJvKVxuICAgICAqIGZvciBlcXVhbGl0eSBjb21wYXJpc29ucy4gVGhlIG9yZGVyIGFuZCByZWZlcmVuY2VzIG9mIHJlc3VsdCB2YWx1ZXMgYXJlXG4gICAgICogZGV0ZXJtaW5lZCBieSB0aGUgZmlyc3QgYXJyYXkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0gey4uLkFycmF5fSBbYXJyYXlzXSBUaGUgYXJyYXlzIHRvIGluc3BlY3QuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgaW50ZXJzZWN0aW5nIHZhbHVlcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pbnRlcnNlY3Rpb24oWzIsIDFdLCBbMiwgM10pO1xuICAgICAqIC8vID0+IFsyXVxuICAgICAqL1xuICAgIHZhciBpbnRlcnNlY3Rpb24gPSBiYXNlUmVzdChmdW5jdGlvbihhcnJheXMpIHtcbiAgICAgIHZhciBtYXBwZWQgPSBhcnJheU1hcChhcnJheXMsIGNhc3RBcnJheUxpa2VPYmplY3QpO1xuICAgICAgcmV0dXJuIChtYXBwZWQubGVuZ3RoICYmIG1hcHBlZFswXSA9PT0gYXJyYXlzWzBdKVxuICAgICAgICA/IGJhc2VJbnRlcnNlY3Rpb24obWFwcGVkKVxuICAgICAgICA6IFtdO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5pbnRlcnNlY3Rpb25gIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGl0ZXJhdGVlYFxuICAgICAqIHdoaWNoIGlzIGludm9rZWQgZm9yIGVhY2ggZWxlbWVudCBvZiBlYWNoIGBhcnJheXNgIHRvIGdlbmVyYXRlIHRoZSBjcml0ZXJpb25cbiAgICAgKiBieSB3aGljaCB0aGV5J3JlIGNvbXBhcmVkLiBUaGUgb3JkZXIgYW5kIHJlZmVyZW5jZXMgb2YgcmVzdWx0IHZhbHVlcyBhcmVcbiAgICAgKiBkZXRlcm1pbmVkIGJ5IHRoZSBmaXJzdCBhcnJheS4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6XG4gICAgICogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7Li4uQXJyYXl9IFthcnJheXNdIFRoZSBhcnJheXMgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgaW50ZXJzZWN0aW5nIHZhbHVlcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pbnRlcnNlY3Rpb25CeShbMi4xLCAxLjJdLCBbMi4zLCAzLjRdLCBNYXRoLmZsb29yKTtcbiAgICAgKiAvLyA9PiBbMi4xXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5pbnRlcnNlY3Rpb25CeShbeyAneCc6IDEgfV0sIFt7ICd4JzogMiB9LCB7ICd4JzogMSB9XSwgJ3gnKTtcbiAgICAgKiAvLyA9PiBbeyAneCc6IDEgfV1cbiAgICAgKi9cbiAgICB2YXIgaW50ZXJzZWN0aW9uQnkgPSBiYXNlUmVzdChmdW5jdGlvbihhcnJheXMpIHtcbiAgICAgIHZhciBpdGVyYXRlZSA9IGxhc3QoYXJyYXlzKSxcbiAgICAgICAgICBtYXBwZWQgPSBhcnJheU1hcChhcnJheXMsIGNhc3RBcnJheUxpa2VPYmplY3QpO1xuXG4gICAgICBpZiAoaXRlcmF0ZWUgPT09IGxhc3QobWFwcGVkKSkge1xuICAgICAgICBpdGVyYXRlZSA9IHVuZGVmaW5lZDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG1hcHBlZC5wb3AoKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiAobWFwcGVkLmxlbmd0aCAmJiBtYXBwZWRbMF0gPT09IGFycmF5c1swXSlcbiAgICAgICAgPyBiYXNlSW50ZXJzZWN0aW9uKG1hcHBlZCwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDIpKVxuICAgICAgICA6IFtdO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5pbnRlcnNlY3Rpb25gIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGNvbXBhcmF0b3JgXG4gICAgICogd2hpY2ggaXMgaW52b2tlZCB0byBjb21wYXJlIGVsZW1lbnRzIG9mIGBhcnJheXNgLiBUaGUgb3JkZXIgYW5kIHJlZmVyZW5jZXNcbiAgICAgKiBvZiByZXN1bHQgdmFsdWVzIGFyZSBkZXRlcm1pbmVkIGJ5IHRoZSBmaXJzdCBhcnJheS4gVGhlIGNvbXBhcmF0b3IgaXNcbiAgICAgKiBpbnZva2VkIHdpdGggdHdvIGFyZ3VtZW50czogKGFyclZhbCwgb3RoVmFsKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7Li4uQXJyYXl9IFthcnJheXNdIFRoZSBhcnJheXMgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY29tcGFyYXRvcl0gVGhlIGNvbXBhcmF0b3IgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBpbnRlcnNlY3RpbmcgdmFsdWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFt7ICd4JzogMSwgJ3knOiAyIH0sIHsgJ3gnOiAyLCAneSc6IDEgfV07XG4gICAgICogdmFyIG90aGVycyA9IFt7ICd4JzogMSwgJ3knOiAxIH0sIHsgJ3gnOiAxLCAneSc6IDIgfV07XG4gICAgICpcbiAgICAgKiBfLmludGVyc2VjdGlvbldpdGgob2JqZWN0cywgb3RoZXJzLCBfLmlzRXF1YWwpO1xuICAgICAqIC8vID0+IFt7ICd4JzogMSwgJ3knOiAyIH1dXG4gICAgICovXG4gICAgdmFyIGludGVyc2VjdGlvbldpdGggPSBiYXNlUmVzdChmdW5jdGlvbihhcnJheXMpIHtcbiAgICAgIHZhciBjb21wYXJhdG9yID0gbGFzdChhcnJheXMpLFxuICAgICAgICAgIG1hcHBlZCA9IGFycmF5TWFwKGFycmF5cywgY2FzdEFycmF5TGlrZU9iamVjdCk7XG5cbiAgICAgIGNvbXBhcmF0b3IgPSB0eXBlb2YgY29tcGFyYXRvciA9PSAnZnVuY3Rpb24nID8gY29tcGFyYXRvciA6IHVuZGVmaW5lZDtcbiAgICAgIGlmIChjb21wYXJhdG9yKSB7XG4gICAgICAgIG1hcHBlZC5wb3AoKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiAobWFwcGVkLmxlbmd0aCAmJiBtYXBwZWRbMF0gPT09IGFycmF5c1swXSlcbiAgICAgICAgPyBiYXNlSW50ZXJzZWN0aW9uKG1hcHBlZCwgdW5kZWZpbmVkLCBjb21wYXJhdG9yKVxuICAgICAgICA6IFtdO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYWxsIGVsZW1lbnRzIGluIGBhcnJheWAgaW50byBhIHN0cmluZyBzZXBhcmF0ZWQgYnkgYHNlcGFyYXRvcmAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gY29udmVydC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3NlcGFyYXRvcj0nLCddIFRoZSBlbGVtZW50IHNlcGFyYXRvci5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBqb2luZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmpvaW4oWydhJywgJ2InLCAnYyddLCAnficpO1xuICAgICAqIC8vID0+ICdhfmJ+YydcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBqb2luKGFycmF5LCBzZXBhcmF0b3IpIHtcbiAgICAgIHJldHVybiBhcnJheSA9PSBudWxsID8gJycgOiBuYXRpdmVKb2luLmNhbGwoYXJyYXksIHNlcGFyYXRvcik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgbGFzdCBlbGVtZW50IG9mIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGxhc3QgZWxlbWVudCBvZiBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmxhc3QoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICovXG4gICAgZnVuY3Rpb24gbGFzdChhcnJheSkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgcmV0dXJuIGxlbmd0aCA/IGFycmF5W2xlbmd0aCAtIDFdIDogdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uaW5kZXhPZmAgZXhjZXB0IHRoYXQgaXQgaXRlcmF0ZXMgb3ZlciBlbGVtZW50cyBvZlxuICAgICAqIGBhcnJheWAgZnJvbSByaWdodCB0byBsZWZ0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2Zyb21JbmRleD1hcnJheS5sZW5ndGgtMV0gVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBtYXRjaGVkIHZhbHVlLCBlbHNlIGAtMWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ubGFzdEluZGV4T2YoWzEsIDIsIDEsIDJdLCAyKTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICpcbiAgICAgKiAvLyBTZWFyY2ggZnJvbSB0aGUgYGZyb21JbmRleGAuXG4gICAgICogXy5sYXN0SW5kZXhPZihbMSwgMiwgMSwgMl0sIDIsIDIpO1xuICAgICAqIC8vID0+IDFcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBsYXN0SW5kZXhPZihhcnJheSwgdmFsdWUsIGZyb21JbmRleCkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgfVxuICAgICAgdmFyIGluZGV4ID0gbGVuZ3RoO1xuICAgICAgaWYgKGZyb21JbmRleCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGluZGV4ID0gdG9JbnRlZ2VyKGZyb21JbmRleCk7XG4gICAgICAgIGluZGV4ID0gaW5kZXggPCAwID8gbmF0aXZlTWF4KGxlbmd0aCArIGluZGV4LCAwKSA6IG5hdGl2ZU1pbihpbmRleCwgbGVuZ3RoIC0gMSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdmFsdWUgPT09IHZhbHVlXG4gICAgICAgID8gc3RyaWN0TGFzdEluZGV4T2YoYXJyYXksIHZhbHVlLCBpbmRleClcbiAgICAgICAgOiBiYXNlRmluZEluZGV4KGFycmF5LCBiYXNlSXNOYU4sIGluZGV4LCB0cnVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBlbGVtZW50IGF0IGluZGV4IGBuYCBvZiBgYXJyYXlgLiBJZiBgbmAgaXMgbmVnYXRpdmUsIHRoZSBudGhcbiAgICAgKiBlbGVtZW50IGZyb20gdGhlIGVuZCBpcyByZXR1cm5lZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjExLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtuPTBdIFRoZSBpbmRleCBvZiB0aGUgZWxlbWVudCB0byByZXR1cm4uXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIG50aCBlbGVtZW50IG9mIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFsnYScsICdiJywgJ2MnLCAnZCddO1xuICAgICAqXG4gICAgICogXy5udGgoYXJyYXksIDEpO1xuICAgICAqIC8vID0+ICdiJ1xuICAgICAqXG4gICAgICogXy5udGgoYXJyYXksIC0yKTtcbiAgICAgKiAvLyA9PiAnYyc7XG4gICAgICovXG4gICAgZnVuY3Rpb24gbnRoKGFycmF5LCBuKSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aCkgPyBiYXNlTnRoKGFycmF5LCB0b0ludGVnZXIobikpIDogdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYWxsIGdpdmVuIHZhbHVlcyBmcm9tIGBhcnJheWAgdXNpbmdcbiAgICAgKiBbYFNhbWVWYWx1ZVplcm9gXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1zYW1ldmFsdWV6ZXJvKVxuICAgICAqIGZvciBlcXVhbGl0eSBjb21wYXJpc29ucy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBVbmxpa2UgYF8ud2l0aG91dGAsIHRoaXMgbWV0aG9kIG11dGF0ZXMgYGFycmF5YC4gVXNlIGBfLnJlbW92ZWBcbiAgICAgKiB0byByZW1vdmUgZWxlbWVudHMgZnJvbSBhbiBhcnJheSBieSBwcmVkaWNhdGUuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7Li4uKn0gW3ZhbHVlc10gVGhlIHZhbHVlcyB0byByZW1vdmUuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFsnYScsICdiJywgJ2MnLCAnYScsICdiJywgJ2MnXTtcbiAgICAgKlxuICAgICAqIF8ucHVsbChhcnJheSwgJ2EnLCAnYycpO1xuICAgICAqIGNvbnNvbGUubG9nKGFycmF5KTtcbiAgICAgKiAvLyA9PiBbJ2InLCAnYiddXG4gICAgICovXG4gICAgdmFyIHB1bGwgPSBiYXNlUmVzdChwdWxsQWxsKTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8ucHVsbGAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBhbiBhcnJheSBvZiB2YWx1ZXMgdG8gcmVtb3ZlLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFVubGlrZSBgXy5kaWZmZXJlbmNlYCwgdGhpcyBtZXRob2QgbXV0YXRlcyBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSB2YWx1ZXMgVGhlIHZhbHVlcyB0byByZW1vdmUuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFsnYScsICdiJywgJ2MnLCAnYScsICdiJywgJ2MnXTtcbiAgICAgKlxuICAgICAqIF8ucHVsbEFsbChhcnJheSwgWydhJywgJ2MnXSk7XG4gICAgICogY29uc29sZS5sb2coYXJyYXkpO1xuICAgICAqIC8vID0+IFsnYicsICdiJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBwdWxsQWxsKGFycmF5LCB2YWx1ZXMpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoICYmIHZhbHVlcyAmJiB2YWx1ZXMubGVuZ3RoKVxuICAgICAgICA/IGJhc2VQdWxsQWxsKGFycmF5LCB2YWx1ZXMpXG4gICAgICAgIDogYXJyYXk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5wdWxsQWxsYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBpdGVyYXRlZWAgd2hpY2ggaXNcbiAgICAgKiBpbnZva2VkIGZvciBlYWNoIGVsZW1lbnQgb2YgYGFycmF5YCBhbmQgYHZhbHVlc2AgdG8gZ2VuZXJhdGUgdGhlIGNyaXRlcmlvblxuICAgICAqIGJ5IHdoaWNoIHRoZXkncmUgY29tcGFyZWQuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OiAodmFsdWUpLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFVubGlrZSBgXy5kaWZmZXJlbmNlQnlgLCB0aGlzIG1ldGhvZCBtdXRhdGVzIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHZhbHVlcyBUaGUgdmFsdWVzIHRvIHJlbW92ZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFt7ICd4JzogMSB9LCB7ICd4JzogMiB9LCB7ICd4JzogMyB9LCB7ICd4JzogMSB9XTtcbiAgICAgKlxuICAgICAqIF8ucHVsbEFsbEJ5KGFycmF5LCBbeyAneCc6IDEgfSwgeyAneCc6IDMgfV0sICd4Jyk7XG4gICAgICogY29uc29sZS5sb2coYXJyYXkpO1xuICAgICAqIC8vID0+IFt7ICd4JzogMiB9XVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHB1bGxBbGxCeShhcnJheSwgdmFsdWVzLCBpdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGggJiYgdmFsdWVzICYmIHZhbHVlcy5sZW5ndGgpXG4gICAgICAgID8gYmFzZVB1bGxBbGwoYXJyYXksIHZhbHVlcywgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDIpKVxuICAgICAgICA6IGFycmF5O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8ucHVsbEFsbGAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgY29tcGFyYXRvcmAgd2hpY2hcbiAgICAgKiBpcyBpbnZva2VkIHRvIGNvbXBhcmUgZWxlbWVudHMgb2YgYGFycmF5YCB0byBgdmFsdWVzYC4gVGhlIGNvbXBhcmF0b3IgaXNcbiAgICAgKiBpbnZva2VkIHdpdGggdHdvIGFyZ3VtZW50czogKGFyclZhbCwgb3RoVmFsKS5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBVbmxpa2UgYF8uZGlmZmVyZW5jZVdpdGhgLCB0aGlzIG1ldGhvZCBtdXRhdGVzIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC42LjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHZhbHVlcyBUaGUgdmFsdWVzIHRvIHJlbW92ZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY29tcGFyYXRvcl0gVGhlIGNvbXBhcmF0b3IgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gW3sgJ3gnOiAxLCAneSc6IDIgfSwgeyAneCc6IDMsICd5JzogNCB9LCB7ICd4JzogNSwgJ3knOiA2IH1dO1xuICAgICAqXG4gICAgICogXy5wdWxsQWxsV2l0aChhcnJheSwgW3sgJ3gnOiAzLCAneSc6IDQgfV0sIF8uaXNFcXVhbCk7XG4gICAgICogY29uc29sZS5sb2coYXJyYXkpO1xuICAgICAqIC8vID0+IFt7ICd4JzogMSwgJ3knOiAyIH0sIHsgJ3gnOiA1LCAneSc6IDYgfV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBwdWxsQWxsV2l0aChhcnJheSwgdmFsdWVzLCBjb21wYXJhdG9yKSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aCAmJiB2YWx1ZXMgJiYgdmFsdWVzLmxlbmd0aClcbiAgICAgICAgPyBiYXNlUHVsbEFsbChhcnJheSwgdmFsdWVzLCB1bmRlZmluZWQsIGNvbXBhcmF0b3IpXG4gICAgICAgIDogYXJyYXk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBlbGVtZW50cyBmcm9tIGBhcnJheWAgY29ycmVzcG9uZGluZyB0byBgaW5kZXhlc2AgYW5kIHJldHVybnMgYW5cbiAgICAgKiBhcnJheSBvZiByZW1vdmVkIGVsZW1lbnRzLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFVubGlrZSBgXy5hdGAsIHRoaXMgbWV0aG9kIG11dGF0ZXMgYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHsuLi4obnVtYmVyfG51bWJlcltdKX0gW2luZGV4ZXNdIFRoZSBpbmRleGVzIG9mIGVsZW1lbnRzIHRvIHJlbW92ZS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiByZW1vdmVkIGVsZW1lbnRzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbJ2EnLCAnYicsICdjJywgJ2QnXTtcbiAgICAgKiB2YXIgcHVsbGVkID0gXy5wdWxsQXQoYXJyYXksIFsxLCAzXSk7XG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhhcnJheSk7XG4gICAgICogLy8gPT4gWydhJywgJ2MnXVxuICAgICAqXG4gICAgICogY29uc29sZS5sb2cocHVsbGVkKTtcbiAgICAgKiAvLyA9PiBbJ2InLCAnZCddXG4gICAgICovXG4gICAgdmFyIHB1bGxBdCA9IGZsYXRSZXN0KGZ1bmN0aW9uKGFycmF5LCBpbmRleGVzKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGgsXG4gICAgICAgICAgcmVzdWx0ID0gYmFzZUF0KGFycmF5LCBpbmRleGVzKTtcblxuICAgICAgYmFzZVB1bGxBdChhcnJheSwgYXJyYXlNYXAoaW5kZXhlcywgZnVuY3Rpb24oaW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIGlzSW5kZXgoaW5kZXgsIGxlbmd0aCkgPyAraW5kZXggOiBpbmRleDtcbiAgICAgIH0pLnNvcnQoY29tcGFyZUFzY2VuZGluZykpO1xuXG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBhbGwgZWxlbWVudHMgZnJvbSBgYXJyYXlgIHRoYXQgYHByZWRpY2F0ZWAgcmV0dXJucyB0cnV0aHkgZm9yXG4gICAgICogYW5kIHJldHVybnMgYW4gYXJyYXkgb2YgdGhlIHJlbW92ZWQgZWxlbWVudHMuIFRoZSBwcmVkaWNhdGUgaXMgaW52b2tlZFxuICAgICAqIHdpdGggdGhyZWUgYXJndW1lbnRzOiAodmFsdWUsIGluZGV4LCBhcnJheSkuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVW5saWtlIGBfLmZpbHRlcmAsIHRoaXMgbWV0aG9kIG11dGF0ZXMgYGFycmF5YC4gVXNlIGBfLnB1bGxgXG4gICAgICogdG8gcHVsbCBlbGVtZW50cyBmcm9tIGFuIGFycmF5IGJ5IHZhbHVlLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgcmVtb3ZlZCBlbGVtZW50cy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gWzEsIDIsIDMsIDRdO1xuICAgICAqIHZhciBldmVucyA9IF8ucmVtb3ZlKGFycmF5LCBmdW5jdGlvbihuKSB7XG4gICAgICogICByZXR1cm4gbiAlIDIgPT0gMDtcbiAgICAgKiB9KTtcbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKGFycmF5KTtcbiAgICAgKiAvLyA9PiBbMSwgM11cbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKGV2ZW5zKTtcbiAgICAgKiAvLyA9PiBbMiwgNF1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiByZW1vdmUoYXJyYXksIHByZWRpY2F0ZSkge1xuICAgICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgICAgaWYgKCEoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKSkge1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfVxuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgaW5kZXhlcyA9IFtdLFxuICAgICAgICAgIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcblxuICAgICAgcHJlZGljYXRlID0gZ2V0SXRlcmF0ZWUocHJlZGljYXRlLCAzKTtcbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IGFycmF5W2luZGV4XTtcbiAgICAgICAgaWYgKHByZWRpY2F0ZSh2YWx1ZSwgaW5kZXgsIGFycmF5KSkge1xuICAgICAgICAgIHJlc3VsdC5wdXNoKHZhbHVlKTtcbiAgICAgICAgICBpbmRleGVzLnB1c2goaW5kZXgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBiYXNlUHVsbEF0KGFycmF5LCBpbmRleGVzKTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV2ZXJzZXMgYGFycmF5YCBzbyB0aGF0IHRoZSBmaXJzdCBlbGVtZW50IGJlY29tZXMgdGhlIGxhc3QsIHRoZSBzZWNvbmRcbiAgICAgKiBlbGVtZW50IGJlY29tZXMgdGhlIHNlY29uZCB0byBsYXN0LCBhbmQgc28gb24uXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyBgYXJyYXlgIGFuZCBpcyBiYXNlZCBvblxuICAgICAqIFtgQXJyYXkjcmV2ZXJzZWBdKGh0dHBzOi8vbWRuLmlvL0FycmF5L3JldmVyc2UpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIG1vZGlmeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gWzEsIDIsIDNdO1xuICAgICAqXG4gICAgICogXy5yZXZlcnNlKGFycmF5KTtcbiAgICAgKiAvLyA9PiBbMywgMiwgMV1cbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKGFycmF5KTtcbiAgICAgKiAvLyA9PiBbMywgMiwgMV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiByZXZlcnNlKGFycmF5KSB7XG4gICAgICByZXR1cm4gYXJyYXkgPT0gbnVsbCA/IGFycmF5IDogbmF0aXZlUmV2ZXJzZS5jYWxsKGFycmF5KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgc2xpY2Ugb2YgYGFycmF5YCBmcm9tIGBzdGFydGAgdXAgdG8sIGJ1dCBub3QgaW5jbHVkaW5nLCBgZW5kYC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyB1c2VkIGluc3RlYWQgb2ZcbiAgICAgKiBbYEFycmF5I3NsaWNlYF0oaHR0cHM6Ly9tZG4uaW8vQXJyYXkvc2xpY2UpIHRvIGVuc3VyZSBkZW5zZSBhcnJheXMgYXJlXG4gICAgICogcmV0dXJuZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gc2xpY2UuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzdGFydD0wXSBUaGUgc3RhcnQgcG9zaXRpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtlbmQ9YXJyYXkubGVuZ3RoXSBUaGUgZW5kIHBvc2l0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgc2xpY2Ugb2YgYGFycmF5YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzbGljZShhcnJheSwgc3RhcnQsIGVuZCkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgaWYgKGVuZCAmJiB0eXBlb2YgZW5kICE9ICdudW1iZXInICYmIGlzSXRlcmF0ZWVDYWxsKGFycmF5LCBzdGFydCwgZW5kKSkge1xuICAgICAgICBzdGFydCA9IDA7XG4gICAgICAgIGVuZCA9IGxlbmd0aDtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBzdGFydCA9IHN0YXJ0ID09IG51bGwgPyAwIDogdG9JbnRlZ2VyKHN0YXJ0KTtcbiAgICAgICAgZW5kID0gZW5kID09PSB1bmRlZmluZWQgPyBsZW5ndGggOiB0b0ludGVnZXIoZW5kKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlU2xpY2UoYXJyYXksIHN0YXJ0LCBlbmQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFVzZXMgYSBiaW5hcnkgc2VhcmNoIHRvIGRldGVybWluZSB0aGUgbG93ZXN0IGluZGV4IGF0IHdoaWNoIGB2YWx1ZWBcbiAgICAgKiBzaG91bGQgYmUgaW5zZXJ0ZWQgaW50byBgYXJyYXlgIGluIG9yZGVyIHRvIG1haW50YWluIGl0cyBzb3J0IG9yZGVyLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIHNvcnRlZCBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGV2YWx1YXRlLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IGF0IHdoaWNoIGB2YWx1ZWAgc2hvdWxkIGJlIGluc2VydGVkXG4gICAgICogIGludG8gYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zb3J0ZWRJbmRleChbMzAsIDUwXSwgNDApO1xuICAgICAqIC8vID0+IDFcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzb3J0ZWRJbmRleChhcnJheSwgdmFsdWUpIHtcbiAgICAgIHJldHVybiBiYXNlU29ydGVkSW5kZXgoYXJyYXksIHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnNvcnRlZEluZGV4YCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBpdGVyYXRlZWBcbiAgICAgKiB3aGljaCBpcyBpbnZva2VkIGZvciBgdmFsdWVgIGFuZCBlYWNoIGVsZW1lbnQgb2YgYGFycmF5YCB0byBjb21wdXRlIHRoZWlyXG4gICAgICogc29ydCByYW5raW5nLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBzb3J0ZWQgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBldmFsdWF0ZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggYXQgd2hpY2ggYHZhbHVlYCBzaG91bGQgYmUgaW5zZXJ0ZWRcbiAgICAgKiAgaW50byBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFt7ICd4JzogNCB9LCB7ICd4JzogNSB9XTtcbiAgICAgKlxuICAgICAqIF8uc29ydGVkSW5kZXhCeShvYmplY3RzLCB7ICd4JzogNCB9LCBmdW5jdGlvbihvKSB7IHJldHVybiBvLng7IH0pO1xuICAgICAqIC8vID0+IDBcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uc29ydGVkSW5kZXhCeShvYmplY3RzLCB7ICd4JzogNCB9LCAneCcpO1xuICAgICAqIC8vID0+IDBcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzb3J0ZWRJbmRleEJ5KGFycmF5LCB2YWx1ZSwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiBiYXNlU29ydGVkSW5kZXhCeShhcnJheSwgdmFsdWUsIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAyKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5pbmRleE9mYCBleGNlcHQgdGhhdCBpdCBwZXJmb3JtcyBhIGJpbmFyeVxuICAgICAqIHNlYXJjaCBvbiBhIHNvcnRlZCBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbWF0Y2hlZCB2YWx1ZSwgZWxzZSBgLTFgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnNvcnRlZEluZGV4T2YoWzQsIDUsIDUsIDUsIDZdLCA1KTtcbiAgICAgKiAvLyA9PiAxXG4gICAgICovXG4gICAgZnVuY3Rpb24gc29ydGVkSW5kZXhPZihhcnJheSwgdmFsdWUpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIGlmIChsZW5ndGgpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gYmFzZVNvcnRlZEluZGV4KGFycmF5LCB2YWx1ZSk7XG4gICAgICAgIGlmIChpbmRleCA8IGxlbmd0aCAmJiBlcShhcnJheVtpbmRleF0sIHZhbHVlKSkge1xuICAgICAgICAgIHJldHVybiBpbmRleDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIC0xO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uc29ydGVkSW5kZXhgIGV4Y2VwdCB0aGF0IGl0IHJldHVybnMgdGhlIGhpZ2hlc3RcbiAgICAgKiBpbmRleCBhdCB3aGljaCBgdmFsdWVgIHNob3VsZCBiZSBpbnNlcnRlZCBpbnRvIGBhcnJheWAgaW4gb3JkZXIgdG9cbiAgICAgKiBtYWludGFpbiBpdHMgc29ydCBvcmRlci5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBzb3J0ZWQgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBldmFsdWF0ZS5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBhdCB3aGljaCBgdmFsdWVgIHNob3VsZCBiZSBpbnNlcnRlZFxuICAgICAqICBpbnRvIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc29ydGVkTGFzdEluZGV4KFs0LCA1LCA1LCA1LCA2XSwgNSk7XG4gICAgICogLy8gPT4gNFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNvcnRlZExhc3RJbmRleChhcnJheSwgdmFsdWUpIHtcbiAgICAgIHJldHVybiBiYXNlU29ydGVkSW5kZXgoYXJyYXksIHZhbHVlLCB0cnVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnNvcnRlZExhc3RJbmRleGAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgaXRlcmF0ZWVgXG4gICAgICogd2hpY2ggaXMgaW52b2tlZCBmb3IgYHZhbHVlYCBhbmQgZWFjaCBlbGVtZW50IG9mIGBhcnJheWAgdG8gY29tcHV0ZSB0aGVpclxuICAgICAqIHNvcnQgcmFua2luZy4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgc29ydGVkIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gZXZhbHVhdGUuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IGF0IHdoaWNoIGB2YWx1ZWAgc2hvdWxkIGJlIGluc2VydGVkXG4gICAgICogIGludG8gYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbeyAneCc6IDQgfSwgeyAneCc6IDUgfV07XG4gICAgICpcbiAgICAgKiBfLnNvcnRlZExhc3RJbmRleEJ5KG9iamVjdHMsIHsgJ3gnOiA0IH0sIGZ1bmN0aW9uKG8pIHsgcmV0dXJuIG8ueDsgfSk7XG4gICAgICogLy8gPT4gMVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5zb3J0ZWRMYXN0SW5kZXhCeShvYmplY3RzLCB7ICd4JzogNCB9LCAneCcpO1xuICAgICAqIC8vID0+IDFcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzb3J0ZWRMYXN0SW5kZXhCeShhcnJheSwgdmFsdWUsIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gYmFzZVNvcnRlZEluZGV4QnkoYXJyYXksIHZhbHVlLCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMiksIHRydWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8ubGFzdEluZGV4T2ZgIGV4Y2VwdCB0aGF0IGl0IHBlcmZvcm1zIGEgYmluYXJ5XG4gICAgICogc2VhcmNoIG9uIGEgc29ydGVkIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZWFyY2ggZm9yLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBtYXRjaGVkIHZhbHVlLCBlbHNlIGAtMWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc29ydGVkTGFzdEluZGV4T2YoWzQsIDUsIDUsIDUsIDZdLCA1KTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICovXG4gICAgZnVuY3Rpb24gc29ydGVkTGFzdEluZGV4T2YoYXJyYXksIHZhbHVlKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICBpZiAobGVuZ3RoKSB7XG4gICAgICAgIHZhciBpbmRleCA9IGJhc2VTb3J0ZWRJbmRleChhcnJheSwgdmFsdWUsIHRydWUpIC0gMTtcbiAgICAgICAgaWYgKGVxKGFycmF5W2luZGV4XSwgdmFsdWUpKSB7XG4gICAgICAgICAgcmV0dXJuIGluZGV4O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gLTE7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy51bmlxYCBleGNlcHQgdGhhdCBpdCdzIGRlc2lnbmVkIGFuZCBvcHRpbWl6ZWRcbiAgICAgKiBmb3Igc29ydGVkIGFycmF5cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGR1cGxpY2F0ZSBmcmVlIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnNvcnRlZFVuaXEoWzEsIDEsIDJdKTtcbiAgICAgKiAvLyA9PiBbMSwgMl1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzb3J0ZWRVbmlxKGFycmF5KSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aClcbiAgICAgICAgPyBiYXNlU29ydGVkVW5pcShhcnJheSlcbiAgICAgICAgOiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnVuaXFCeWAgZXhjZXB0IHRoYXQgaXQncyBkZXNpZ25lZCBhbmQgb3B0aW1pemVkXG4gICAgICogZm9yIHNvcnRlZCBhcnJheXMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWVdIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGR1cGxpY2F0ZSBmcmVlIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnNvcnRlZFVuaXFCeShbMS4xLCAxLjIsIDIuMywgMi40XSwgTWF0aC5mbG9vcik7XG4gICAgICogLy8gPT4gWzEuMSwgMi4zXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNvcnRlZFVuaXFCeShhcnJheSwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKVxuICAgICAgICA/IGJhc2VTb3J0ZWRVbmlxKGFycmF5LCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMikpXG4gICAgICAgIDogW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyBhbGwgYnV0IHRoZSBmaXJzdCBlbGVtZW50IG9mIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzbGljZSBvZiBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRhaWwoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiBbMiwgM11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0YWlsKGFycmF5KSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICByZXR1cm4gbGVuZ3RoID8gYmFzZVNsaWNlKGFycmF5LCAxLCBsZW5ndGgpIDogW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHNsaWNlIG9mIGBhcnJheWAgd2l0aCBgbmAgZWxlbWVudHMgdGFrZW4gZnJvbSB0aGUgYmVnaW5uaW5nLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbj0xXSBUaGUgbnVtYmVyIG9mIGVsZW1lbnRzIHRvIHRha2UuXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHNsaWNlIG9mIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udGFrZShbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IFsxXVxuICAgICAqXG4gICAgICogXy50YWtlKFsxLCAyLCAzXSwgMik7XG4gICAgICogLy8gPT4gWzEsIDJdXG4gICAgICpcbiAgICAgKiBfLnRha2UoWzEsIDIsIDNdLCA1KTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKlxuICAgICAqIF8udGFrZShbMSwgMiwgM10sIDApO1xuICAgICAqIC8vID0+IFtdXG4gICAgICovXG4gICAgZnVuY3Rpb24gdGFrZShhcnJheSwgbiwgZ3VhcmQpIHtcbiAgICAgIGlmICghKGFycmF5ICYmIGFycmF5Lmxlbmd0aCkpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgbiA9IChndWFyZCB8fCBuID09PSB1bmRlZmluZWQpID8gMSA6IHRvSW50ZWdlcihuKTtcbiAgICAgIHJldHVybiBiYXNlU2xpY2UoYXJyYXksIDAsIG4gPCAwID8gMCA6IG4pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBzbGljZSBvZiBgYXJyYXlgIHdpdGggYG5gIGVsZW1lbnRzIHRha2VuIGZyb20gdGhlIGVuZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW249MV0gVGhlIG51bWJlciBvZiBlbGVtZW50cyB0byB0YWtlLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzbGljZSBvZiBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRha2VSaWdodChbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IFszXVxuICAgICAqXG4gICAgICogXy50YWtlUmlnaHQoWzEsIDIsIDNdLCAyKTtcbiAgICAgKiAvLyA9PiBbMiwgM11cbiAgICAgKlxuICAgICAqIF8udGFrZVJpZ2h0KFsxLCAyLCAzXSwgNSk7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdXG4gICAgICpcbiAgICAgKiBfLnRha2VSaWdodChbMSwgMiwgM10sIDApO1xuICAgICAqIC8vID0+IFtdXG4gICAgICovXG4gICAgZnVuY3Rpb24gdGFrZVJpZ2h0KGFycmF5LCBuLCBndWFyZCkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgbiA9IChndWFyZCB8fCBuID09PSB1bmRlZmluZWQpID8gMSA6IHRvSW50ZWdlcihuKTtcbiAgICAgIG4gPSBsZW5ndGggLSBuO1xuICAgICAgcmV0dXJuIGJhc2VTbGljZShhcnJheSwgbiA8IDAgPyAwIDogbiwgbGVuZ3RoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgc2xpY2Ugb2YgYGFycmF5YCB3aXRoIGVsZW1lbnRzIHRha2VuIGZyb20gdGhlIGVuZC4gRWxlbWVudHMgYXJlXG4gICAgICogdGFrZW4gdW50aWwgYHByZWRpY2F0ZWAgcmV0dXJucyBmYWxzZXkuIFRoZSBwcmVkaWNhdGUgaXMgaW52b2tlZCB3aXRoXG4gICAgICogdGhyZWUgYXJndW1lbnRzOiAodmFsdWUsIGluZGV4LCBhcnJheSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgc2xpY2Ugb2YgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAgJ2FjdGl2ZSc6IHRydWUgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgICdhY3RpdmUnOiBmYWxzZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdwZWJibGVzJywgJ2FjdGl2ZSc6IGZhbHNlIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy50YWtlUmlnaHRXaGlsZSh1c2VycywgZnVuY3Rpb24obykgeyByZXR1cm4gIW8uYWN0aXZlOyB9KTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2ZyZWQnLCAncGViYmxlcyddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc2AgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8udGFrZVJpZ2h0V2hpbGUodXNlcnMsIHsgJ3VzZXInOiAncGViYmxlcycsICdhY3RpdmUnOiBmYWxzZSB9KTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ3BlYmJsZXMnXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8udGFrZVJpZ2h0V2hpbGUodXNlcnMsIFsnYWN0aXZlJywgZmFsc2VdKTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2ZyZWQnLCAncGViYmxlcyddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnRha2VSaWdodFdoaWxlKHVzZXJzLCAnYWN0aXZlJyk7XG4gICAgICogLy8gPT4gW11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0YWtlUmlnaHRXaGlsZShhcnJheSwgcHJlZGljYXRlKSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aClcbiAgICAgICAgPyBiYXNlV2hpbGUoYXJyYXksIGdldEl0ZXJhdGVlKHByZWRpY2F0ZSwgMyksIGZhbHNlLCB0cnVlKVxuICAgICAgICA6IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBzbGljZSBvZiBgYXJyYXlgIHdpdGggZWxlbWVudHMgdGFrZW4gZnJvbSB0aGUgYmVnaW5uaW5nLiBFbGVtZW50c1xuICAgICAqIGFyZSB0YWtlbiB1bnRpbCBgcHJlZGljYXRlYCByZXR1cm5zIGZhbHNleS4gVGhlIHByZWRpY2F0ZSBpcyBpbnZva2VkIHdpdGhcbiAgICAgKiB0aHJlZSBhcmd1bWVudHM6ICh2YWx1ZSwgaW5kZXgsIGFycmF5KS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzbGljZSBvZiBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICAnYWN0aXZlJzogZmFsc2UgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgICdhY3RpdmUnOiBmYWxzZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdwZWJibGVzJywgJ2FjdGl2ZSc6IHRydWUgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLnRha2VXaGlsZSh1c2VycywgZnVuY3Rpb24obykgeyByZXR1cm4gIW8uYWN0aXZlOyB9KTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2Jhcm5leScsICdmcmVkJ11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzYCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy50YWtlV2hpbGUodXNlcnMsIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FjdGl2ZSc6IGZhbHNlIH0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnYmFybmV5J11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnRha2VXaGlsZSh1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnYmFybmV5JywgJ2ZyZWQnXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy50YWtlV2hpbGUodXNlcnMsICdhY3RpdmUnKTtcbiAgICAgKiAvLyA9PiBbXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRha2VXaGlsZShhcnJheSwgcHJlZGljYXRlKSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aClcbiAgICAgICAgPyBiYXNlV2hpbGUoYXJyYXksIGdldEl0ZXJhdGVlKHByZWRpY2F0ZSwgMykpXG4gICAgICAgIDogW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiB1bmlxdWUgdmFsdWVzLCBpbiBvcmRlciwgZnJvbSBhbGwgZ2l2ZW4gYXJyYXlzIHVzaW5nXG4gICAgICogW2BTYW1lVmFsdWVaZXJvYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtc2FtZXZhbHVlemVybylcbiAgICAgKiBmb3IgZXF1YWxpdHkgY29tcGFyaXNvbnMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0gey4uLkFycmF5fSBbYXJyYXlzXSBUaGUgYXJyYXlzIHRvIGluc3BlY3QuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgY29tYmluZWQgdmFsdWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnVuaW9uKFsyXSwgWzEsIDJdKTtcbiAgICAgKiAvLyA9PiBbMiwgMV1cbiAgICAgKi9cbiAgICB2YXIgdW5pb24gPSBiYXNlUmVzdChmdW5jdGlvbihhcnJheXMpIHtcbiAgICAgIHJldHVybiBiYXNlVW5pcShiYXNlRmxhdHRlbihhcnJheXMsIDEsIGlzQXJyYXlMaWtlT2JqZWN0LCB0cnVlKSk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnVuaW9uYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBpdGVyYXRlZWAgd2hpY2ggaXNcbiAgICAgKiBpbnZva2VkIGZvciBlYWNoIGVsZW1lbnQgb2YgZWFjaCBgYXJyYXlzYCB0byBnZW5lcmF0ZSB0aGUgY3JpdGVyaW9uIGJ5XG4gICAgICogd2hpY2ggdW5pcXVlbmVzcyBpcyBjb21wdXRlZC4gUmVzdWx0IHZhbHVlcyBhcmUgY2hvc2VuIGZyb20gdGhlIGZpcnN0XG4gICAgICogYXJyYXkgaW4gd2hpY2ggdGhlIHZhbHVlIG9jY3Vycy4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6XG4gICAgICogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7Li4uQXJyYXl9IFthcnJheXNdIFRoZSBhcnJheXMgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgY29tYmluZWQgdmFsdWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnVuaW9uQnkoWzIuMV0sIFsxLjIsIDIuM10sIE1hdGguZmxvb3IpO1xuICAgICAqIC8vID0+IFsyLjEsIDEuMl1cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8udW5pb25CeShbeyAneCc6IDEgfV0sIFt7ICd4JzogMiB9LCB7ICd4JzogMSB9XSwgJ3gnKTtcbiAgICAgKiAvLyA9PiBbeyAneCc6IDEgfSwgeyAneCc6IDIgfV1cbiAgICAgKi9cbiAgICB2YXIgdW5pb25CeSA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFycmF5cykge1xuICAgICAgdmFyIGl0ZXJhdGVlID0gbGFzdChhcnJheXMpO1xuICAgICAgaWYgKGlzQXJyYXlMaWtlT2JqZWN0KGl0ZXJhdGVlKSkge1xuICAgICAgICBpdGVyYXRlZSA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlVW5pcShiYXNlRmxhdHRlbihhcnJheXMsIDEsIGlzQXJyYXlMaWtlT2JqZWN0LCB0cnVlKSwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDIpKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8udW5pb25gIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGNvbXBhcmF0b3JgIHdoaWNoXG4gICAgICogaXMgaW52b2tlZCB0byBjb21wYXJlIGVsZW1lbnRzIG9mIGBhcnJheXNgLiBSZXN1bHQgdmFsdWVzIGFyZSBjaG9zZW4gZnJvbVxuICAgICAqIHRoZSBmaXJzdCBhcnJheSBpbiB3aGljaCB0aGUgdmFsdWUgb2NjdXJzLiBUaGUgY29tcGFyYXRvciBpcyBpbnZva2VkXG4gICAgICogd2l0aCB0d28gYXJndW1lbnRzOiAoYXJyVmFsLCBvdGhWYWwpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHsuLi5BcnJheX0gW2FycmF5c10gVGhlIGFycmF5cyB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjb21wYXJhdG9yXSBUaGUgY29tcGFyYXRvciBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGNvbWJpbmVkIHZhbHVlcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbeyAneCc6IDEsICd5JzogMiB9LCB7ICd4JzogMiwgJ3knOiAxIH1dO1xuICAgICAqIHZhciBvdGhlcnMgPSBbeyAneCc6IDEsICd5JzogMSB9LCB7ICd4JzogMSwgJ3knOiAyIH1dO1xuICAgICAqXG4gICAgICogXy51bmlvbldpdGgob2JqZWN0cywgb3RoZXJzLCBfLmlzRXF1YWwpO1xuICAgICAqIC8vID0+IFt7ICd4JzogMSwgJ3knOiAyIH0sIHsgJ3gnOiAyLCAneSc6IDEgfSwgeyAneCc6IDEsICd5JzogMSB9XVxuICAgICAqL1xuICAgIHZhciB1bmlvbldpdGggPSBiYXNlUmVzdChmdW5jdGlvbihhcnJheXMpIHtcbiAgICAgIHZhciBjb21wYXJhdG9yID0gbGFzdChhcnJheXMpO1xuICAgICAgY29tcGFyYXRvciA9IHR5cGVvZiBjb21wYXJhdG9yID09ICdmdW5jdGlvbicgPyBjb21wYXJhdG9yIDogdW5kZWZpbmVkO1xuICAgICAgcmV0dXJuIGJhc2VVbmlxKGJhc2VGbGF0dGVuKGFycmF5cywgMSwgaXNBcnJheUxpa2VPYmplY3QsIHRydWUpLCB1bmRlZmluZWQsIGNvbXBhcmF0b3IpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGR1cGxpY2F0ZS1mcmVlIHZlcnNpb24gb2YgYW4gYXJyYXksIHVzaW5nXG4gICAgICogW2BTYW1lVmFsdWVaZXJvYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtc2FtZXZhbHVlemVybylcbiAgICAgKiBmb3IgZXF1YWxpdHkgY29tcGFyaXNvbnMsIGluIHdoaWNoIG9ubHkgdGhlIGZpcnN0IG9jY3VycmVuY2Ugb2YgZWFjaCBlbGVtZW50XG4gICAgICogaXMga2VwdC4gVGhlIG9yZGVyIG9mIHJlc3VsdCB2YWx1ZXMgaXMgZGV0ZXJtaW5lZCBieSB0aGUgb3JkZXIgdGhleSBvY2N1clxuICAgICAqIGluIHRoZSBhcnJheS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGR1cGxpY2F0ZSBmcmVlIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnVuaXEoWzIsIDEsIDJdKTtcbiAgICAgKiAvLyA9PiBbMiwgMV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB1bmlxKGFycmF5KSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aCkgPyBiYXNlVW5pcShhcnJheSkgOiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnVuaXFgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGl0ZXJhdGVlYCB3aGljaCBpc1xuICAgICAqIGludm9rZWQgZm9yIGVhY2ggZWxlbWVudCBpbiBgYXJyYXlgIHRvIGdlbmVyYXRlIHRoZSBjcml0ZXJpb24gYnkgd2hpY2hcbiAgICAgKiB1bmlxdWVuZXNzIGlzIGNvbXB1dGVkLiBUaGUgb3JkZXIgb2YgcmVzdWx0IHZhbHVlcyBpcyBkZXRlcm1pbmVkIGJ5IHRoZVxuICAgICAqIG9yZGVyIHRoZXkgb2NjdXIgaW4gdGhlIGFycmF5LiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDpcbiAgICAgKiAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGR1cGxpY2F0ZSBmcmVlIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnVuaXFCeShbMi4xLCAxLjIsIDIuM10sIE1hdGguZmxvb3IpO1xuICAgICAqIC8vID0+IFsyLjEsIDEuMl1cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8udW5pcUJ5KFt7ICd4JzogMSB9LCB7ICd4JzogMiB9LCB7ICd4JzogMSB9XSwgJ3gnKTtcbiAgICAgKiAvLyA9PiBbeyAneCc6IDEgfSwgeyAneCc6IDIgfV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB1bmlxQnkoYXJyYXksIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aCkgPyBiYXNlVW5pcShhcnJheSwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDIpKSA6IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8udW5pcWAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgY29tcGFyYXRvcmAgd2hpY2hcbiAgICAgKiBpcyBpbnZva2VkIHRvIGNvbXBhcmUgZWxlbWVudHMgb2YgYGFycmF5YC4gVGhlIG9yZGVyIG9mIHJlc3VsdCB2YWx1ZXMgaXNcbiAgICAgKiBkZXRlcm1pbmVkIGJ5IHRoZSBvcmRlciB0aGV5IG9jY3VyIGluIHRoZSBhcnJheS5UaGUgY29tcGFyYXRvciBpcyBpbnZva2VkXG4gICAgICogd2l0aCB0d28gYXJndW1lbnRzOiAoYXJyVmFsLCBvdGhWYWwpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NvbXBhcmF0b3JdIFRoZSBjb21wYXJhdG9yIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZHVwbGljYXRlIGZyZWUgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW3sgJ3gnOiAxLCAneSc6IDIgfSwgeyAneCc6IDIsICd5JzogMSB9LCB7ICd4JzogMSwgJ3knOiAyIH1dO1xuICAgICAqXG4gICAgICogXy51bmlxV2l0aChvYmplY3RzLCBfLmlzRXF1YWwpO1xuICAgICAqIC8vID0+IFt7ICd4JzogMSwgJ3knOiAyIH0sIHsgJ3gnOiAyLCAneSc6IDEgfV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB1bmlxV2l0aChhcnJheSwgY29tcGFyYXRvcikge1xuICAgICAgY29tcGFyYXRvciA9IHR5cGVvZiBjb21wYXJhdG9yID09ICdmdW5jdGlvbicgPyBjb21wYXJhdG9yIDogdW5kZWZpbmVkO1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpID8gYmFzZVVuaXEoYXJyYXksIHVuZGVmaW5lZCwgY29tcGFyYXRvcikgOiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnppcGAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBhbiBhcnJheSBvZiBncm91cGVkXG4gICAgICogZWxlbWVudHMgYW5kIGNyZWF0ZXMgYW4gYXJyYXkgcmVncm91cGluZyB0aGUgZWxlbWVudHMgdG8gdGhlaXIgcHJlLXppcFxuICAgICAqIGNvbmZpZ3VyYXRpb24uXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMS4yLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgb2YgZ3JvdXBlZCBlbGVtZW50cyB0byBwcm9jZXNzLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIHJlZ3JvdXBlZCBlbGVtZW50cy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHppcHBlZCA9IF8uemlwKFsnYScsICdiJ10sIFsxLCAyXSwgW3RydWUsIGZhbHNlXSk7XG4gICAgICogLy8gPT4gW1snYScsIDEsIHRydWVdLCBbJ2InLCAyLCBmYWxzZV1dXG4gICAgICpcbiAgICAgKiBfLnVuemlwKHppcHBlZCk7XG4gICAgICogLy8gPT4gW1snYScsICdiJ10sIFsxLCAyXSwgW3RydWUsIGZhbHNlXV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB1bnppcChhcnJheSkge1xuICAgICAgaWYgKCEoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKSkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICB2YXIgbGVuZ3RoID0gMDtcbiAgICAgIGFycmF5ID0gYXJyYXlGaWx0ZXIoYXJyYXksIGZ1bmN0aW9uKGdyb3VwKSB7XG4gICAgICAgIGlmIChpc0FycmF5TGlrZU9iamVjdChncm91cCkpIHtcbiAgICAgICAgICBsZW5ndGggPSBuYXRpdmVNYXgoZ3JvdXAubGVuZ3RoLCBsZW5ndGgpO1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBiYXNlVGltZXMobGVuZ3RoLCBmdW5jdGlvbihpbmRleCkge1xuICAgICAgICByZXR1cm4gYXJyYXlNYXAoYXJyYXksIGJhc2VQcm9wZXJ0eShpbmRleCkpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy51bnppcGAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgaXRlcmF0ZWVgIHRvIHNwZWNpZnlcbiAgICAgKiBob3cgcmVncm91cGVkIHZhbHVlcyBzaG91bGQgYmUgY29tYmluZWQuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggdGhlXG4gICAgICogZWxlbWVudHMgb2YgZWFjaCBncm91cDogKC4uLmdyb3VwKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjguMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSBvZiBncm91cGVkIGVsZW1lbnRzIHRvIHByb2Nlc3MuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiB0byBjb21iaW5lXG4gICAgICogIHJlZ3JvdXBlZCB2YWx1ZXMuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgcmVncm91cGVkIGVsZW1lbnRzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgemlwcGVkID0gXy56aXAoWzEsIDJdLCBbMTAsIDIwXSwgWzEwMCwgMjAwXSk7XG4gICAgICogLy8gPT4gW1sxLCAxMCwgMTAwXSwgWzIsIDIwLCAyMDBdXVxuICAgICAqXG4gICAgICogXy51bnppcFdpdGgoemlwcGVkLCBfLmFkZCk7XG4gICAgICogLy8gPT4gWzMsIDMwLCAzMDBdXG4gICAgICovXG4gICAgZnVuY3Rpb24gdW56aXBXaXRoKGFycmF5LCBpdGVyYXRlZSkge1xuICAgICAgaWYgKCEoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKSkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICB2YXIgcmVzdWx0ID0gdW56aXAoYXJyYXkpO1xuICAgICAgaWYgKGl0ZXJhdGVlID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBhcnJheU1hcChyZXN1bHQsIGZ1bmN0aW9uKGdyb3VwKSB7XG4gICAgICAgIHJldHVybiBhcHBseShpdGVyYXRlZSwgdW5kZWZpbmVkLCBncm91cCk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IGV4Y2x1ZGluZyBhbGwgZ2l2ZW4gdmFsdWVzIHVzaW5nXG4gICAgICogW2BTYW1lVmFsdWVaZXJvYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtc2FtZXZhbHVlemVybylcbiAgICAgKiBmb3IgZXF1YWxpdHkgY29tcGFyaXNvbnMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVW5saWtlIGBfLnB1bGxgLCB0aGlzIG1ldGhvZCByZXR1cm5zIGEgbmV3IGFycmF5LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHsuLi4qfSBbdmFsdWVzXSBUaGUgdmFsdWVzIHRvIGV4Y2x1ZGUuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgZmlsdGVyZWQgdmFsdWVzLlxuICAgICAqIEBzZWUgXy5kaWZmZXJlbmNlLCBfLnhvclxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLndpdGhvdXQoWzIsIDEsIDIsIDNdLCAxLCAyKTtcbiAgICAgKiAvLyA9PiBbM11cbiAgICAgKi9cbiAgICB2YXIgd2l0aG91dCA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFycmF5LCB2YWx1ZXMpIHtcbiAgICAgIHJldHVybiBpc0FycmF5TGlrZU9iamVjdChhcnJheSlcbiAgICAgICAgPyBiYXNlRGlmZmVyZW5jZShhcnJheSwgdmFsdWVzKVxuICAgICAgICA6IFtdO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiB1bmlxdWUgdmFsdWVzIHRoYXQgaXMgdGhlXG4gICAgICogW3N5bW1ldHJpYyBkaWZmZXJlbmNlXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9TeW1tZXRyaWNfZGlmZmVyZW5jZSlcbiAgICAgKiBvZiB0aGUgZ2l2ZW4gYXJyYXlzLiBUaGUgb3JkZXIgb2YgcmVzdWx0IHZhbHVlcyBpcyBkZXRlcm1pbmVkIGJ5IHRoZSBvcmRlclxuICAgICAqIHRoZXkgb2NjdXIgaW4gdGhlIGFycmF5cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAyLjQuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7Li4uQXJyYXl9IFthcnJheXNdIFRoZSBhcnJheXMgdG8gaW5zcGVjdC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBmaWx0ZXJlZCB2YWx1ZXMuXG4gICAgICogQHNlZSBfLmRpZmZlcmVuY2UsIF8ud2l0aG91dFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnhvcihbMiwgMV0sIFsyLCAzXSk7XG4gICAgICogLy8gPT4gWzEsIDNdXG4gICAgICovXG4gICAgdmFyIHhvciA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFycmF5cykge1xuICAgICAgcmV0dXJuIGJhc2VYb3IoYXJyYXlGaWx0ZXIoYXJyYXlzLCBpc0FycmF5TGlrZU9iamVjdCkpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy54b3JgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGl0ZXJhdGVlYCB3aGljaCBpc1xuICAgICAqIGludm9rZWQgZm9yIGVhY2ggZWxlbWVudCBvZiBlYWNoIGBhcnJheXNgIHRvIGdlbmVyYXRlIHRoZSBjcml0ZXJpb24gYnlcbiAgICAgKiB3aGljaCBieSB3aGljaCB0aGV5J3JlIGNvbXBhcmVkLiBUaGUgb3JkZXIgb2YgcmVzdWx0IHZhbHVlcyBpcyBkZXRlcm1pbmVkXG4gICAgICogYnkgdGhlIG9yZGVyIHRoZXkgb2NjdXIgaW4gdGhlIGFycmF5cy4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmVcbiAgICAgKiBhcmd1bWVudDogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7Li4uQXJyYXl9IFthcnJheXNdIFRoZSBhcnJheXMgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgZmlsdGVyZWQgdmFsdWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnhvckJ5KFsyLjEsIDEuMl0sIFsyLjMsIDMuNF0sIE1hdGguZmxvb3IpO1xuICAgICAqIC8vID0+IFsxLjIsIDMuNF1cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8ueG9yQnkoW3sgJ3gnOiAxIH1dLCBbeyAneCc6IDIgfSwgeyAneCc6IDEgfV0sICd4Jyk7XG4gICAgICogLy8gPT4gW3sgJ3gnOiAyIH1dXG4gICAgICovXG4gICAgdmFyIHhvckJ5ID0gYmFzZVJlc3QoZnVuY3Rpb24oYXJyYXlzKSB7XG4gICAgICB2YXIgaXRlcmF0ZWUgPSBsYXN0KGFycmF5cyk7XG4gICAgICBpZiAoaXNBcnJheUxpa2VPYmplY3QoaXRlcmF0ZWUpKSB7XG4gICAgICAgIGl0ZXJhdGVlID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VYb3IoYXJyYXlGaWx0ZXIoYXJyYXlzLCBpc0FycmF5TGlrZU9iamVjdCksIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAyKSk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnhvcmAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgY29tcGFyYXRvcmAgd2hpY2ggaXNcbiAgICAgKiBpbnZva2VkIHRvIGNvbXBhcmUgZWxlbWVudHMgb2YgYGFycmF5c2AuIFRoZSBvcmRlciBvZiByZXN1bHQgdmFsdWVzIGlzXG4gICAgICogZGV0ZXJtaW5lZCBieSB0aGUgb3JkZXIgdGhleSBvY2N1ciBpbiB0aGUgYXJyYXlzLiBUaGUgY29tcGFyYXRvciBpcyBpbnZva2VkXG4gICAgICogd2l0aCB0d28gYXJndW1lbnRzOiAoYXJyVmFsLCBvdGhWYWwpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHsuLi5BcnJheX0gW2FycmF5c10gVGhlIGFycmF5cyB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjb21wYXJhdG9yXSBUaGUgY29tcGFyYXRvciBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGZpbHRlcmVkIHZhbHVlcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbeyAneCc6IDEsICd5JzogMiB9LCB7ICd4JzogMiwgJ3knOiAxIH1dO1xuICAgICAqIHZhciBvdGhlcnMgPSBbeyAneCc6IDEsICd5JzogMSB9LCB7ICd4JzogMSwgJ3knOiAyIH1dO1xuICAgICAqXG4gICAgICogXy54b3JXaXRoKG9iamVjdHMsIG90aGVycywgXy5pc0VxdWFsKTtcbiAgICAgKiAvLyA9PiBbeyAneCc6IDIsICd5JzogMSB9LCB7ICd4JzogMSwgJ3knOiAxIH1dXG4gICAgICovXG4gICAgdmFyIHhvcldpdGggPSBiYXNlUmVzdChmdW5jdGlvbihhcnJheXMpIHtcbiAgICAgIHZhciBjb21wYXJhdG9yID0gbGFzdChhcnJheXMpO1xuICAgICAgY29tcGFyYXRvciA9IHR5cGVvZiBjb21wYXJhdG9yID09ICdmdW5jdGlvbicgPyBjb21wYXJhdG9yIDogdW5kZWZpbmVkO1xuICAgICAgcmV0dXJuIGJhc2VYb3IoYXJyYXlGaWx0ZXIoYXJyYXlzLCBpc0FycmF5TGlrZU9iamVjdCksIHVuZGVmaW5lZCwgY29tcGFyYXRvcik7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIGdyb3VwZWQgZWxlbWVudHMsIHRoZSBmaXJzdCBvZiB3aGljaCBjb250YWlucyB0aGVcbiAgICAgKiBmaXJzdCBlbGVtZW50cyBvZiB0aGUgZ2l2ZW4gYXJyYXlzLCB0aGUgc2Vjb25kIG9mIHdoaWNoIGNvbnRhaW5zIHRoZVxuICAgICAqIHNlY29uZCBlbGVtZW50cyBvZiB0aGUgZ2l2ZW4gYXJyYXlzLCBhbmQgc28gb24uXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0gey4uLkFycmF5fSBbYXJyYXlzXSBUaGUgYXJyYXlzIHRvIHByb2Nlc3MuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgZ3JvdXBlZCBlbGVtZW50cy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy56aXAoWydhJywgJ2InXSwgWzEsIDJdLCBbdHJ1ZSwgZmFsc2VdKTtcbiAgICAgKiAvLyA9PiBbWydhJywgMSwgdHJ1ZV0sIFsnYicsIDIsIGZhbHNlXV1cbiAgICAgKi9cbiAgICB2YXIgemlwID0gYmFzZVJlc3QodW56aXApO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5mcm9tUGFpcnNgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgdHdvIGFycmF5cyxcbiAgICAgKiBvbmUgb2YgcHJvcGVydHkgaWRlbnRpZmllcnMgYW5kIG9uZSBvZiBjb3JyZXNwb25kaW5nIHZhbHVlcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjQuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtwcm9wcz1bXV0gVGhlIHByb3BlcnR5IGlkZW50aWZpZXJzLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFt2YWx1ZXM9W11dIFRoZSBwcm9wZXJ0eSB2YWx1ZXMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy56aXBPYmplY3QoWydhJywgJ2InXSwgWzEsIDJdKTtcbiAgICAgKiAvLyA9PiB7ICdhJzogMSwgJ2InOiAyIH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB6aXBPYmplY3QocHJvcHMsIHZhbHVlcykge1xuICAgICAgcmV0dXJuIGJhc2VaaXBPYmplY3QocHJvcHMgfHwgW10sIHZhbHVlcyB8fCBbXSwgYXNzaWduVmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uemlwT2JqZWN0YCBleGNlcHQgdGhhdCBpdCBzdXBwb3J0cyBwcm9wZXJ0eSBwYXRocy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtwcm9wcz1bXV0gVGhlIHByb3BlcnR5IGlkZW50aWZpZXJzLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFt2YWx1ZXM9W11dIFRoZSBwcm9wZXJ0eSB2YWx1ZXMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy56aXBPYmplY3REZWVwKFsnYS5iWzBdLmMnLCAnYS5iWzFdLmQnXSwgWzEsIDJdKTtcbiAgICAgKiAvLyA9PiB7ICdhJzogeyAnYic6IFt7ICdjJzogMSB9LCB7ICdkJzogMiB9XSB9IH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB6aXBPYmplY3REZWVwKHByb3BzLCB2YWx1ZXMpIHtcbiAgICAgIHJldHVybiBiYXNlWmlwT2JqZWN0KHByb3BzIHx8IFtdLCB2YWx1ZXMgfHwgW10sIGJhc2VTZXQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uemlwYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBpdGVyYXRlZWAgdG8gc3BlY2lmeVxuICAgICAqIGhvdyBncm91cGVkIHZhbHVlcyBzaG91bGQgYmUgY29tYmluZWQuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggdGhlXG4gICAgICogZWxlbWVudHMgb2YgZWFjaCBncm91cDogKC4uLmdyb3VwKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjguMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7Li4uQXJyYXl9IFthcnJheXNdIFRoZSBhcnJheXMgdG8gcHJvY2Vzcy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIHRvIGNvbWJpbmVcbiAgICAgKiAgZ3JvdXBlZCB2YWx1ZXMuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgZ3JvdXBlZCBlbGVtZW50cy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy56aXBXaXRoKFsxLCAyXSwgWzEwLCAyMF0sIFsxMDAsIDIwMF0sIGZ1bmN0aW9uKGEsIGIsIGMpIHtcbiAgICAgKiAgIHJldHVybiBhICsgYiArIGM7XG4gICAgICogfSk7XG4gICAgICogLy8gPT4gWzExMSwgMjIyXVxuICAgICAqL1xuICAgIHZhciB6aXBXaXRoID0gYmFzZVJlc3QoZnVuY3Rpb24oYXJyYXlzKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXlzLmxlbmd0aCxcbiAgICAgICAgICBpdGVyYXRlZSA9IGxlbmd0aCA+IDEgPyBhcnJheXNbbGVuZ3RoIC0gMV0gOiB1bmRlZmluZWQ7XG5cbiAgICAgIGl0ZXJhdGVlID0gdHlwZW9mIGl0ZXJhdGVlID09ICdmdW5jdGlvbicgPyAoYXJyYXlzLnBvcCgpLCBpdGVyYXRlZSkgOiB1bmRlZmluZWQ7XG4gICAgICByZXR1cm4gdW56aXBXaXRoKGFycmF5cywgaXRlcmF0ZWUpO1xuICAgIH0pO1xuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGBsb2Rhc2hgIHdyYXBwZXIgaW5zdGFuY2UgdGhhdCB3cmFwcyBgdmFsdWVgIHdpdGggZXhwbGljaXQgbWV0aG9kXG4gICAgICogY2hhaW4gc2VxdWVuY2VzIGVuYWJsZWQuIFRoZSByZXN1bHQgb2Ygc3VjaCBzZXF1ZW5jZXMgbXVzdCBiZSB1bndyYXBwZWRcbiAgICAgKiB3aXRoIGBfI3ZhbHVlYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAxLjMuMFxuICAgICAqIEBjYXRlZ29yeSBTZXFcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byB3cmFwLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBgbG9kYXNoYCB3cmFwcGVyIGluc3RhbmNlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICAnYWdlJzogMzYgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgICdhZ2UnOiA0MCB9LFxuICAgICAqICAgeyAndXNlcic6ICdwZWJibGVzJywgJ2FnZSc6IDEgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiB2YXIgeW91bmdlc3QgPSBfXG4gICAgICogICAuY2hhaW4odXNlcnMpXG4gICAgICogICAuc29ydEJ5KCdhZ2UnKVxuICAgICAqICAgLm1hcChmdW5jdGlvbihvKSB7XG4gICAgICogICAgIHJldHVybiBvLnVzZXIgKyAnIGlzICcgKyBvLmFnZTtcbiAgICAgKiAgIH0pXG4gICAgICogICAuaGVhZCgpXG4gICAgICogICAudmFsdWUoKTtcbiAgICAgKiAvLyA9PiAncGViYmxlcyBpcyAxJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNoYWluKHZhbHVlKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gbG9kYXNoKHZhbHVlKTtcbiAgICAgIHJlc3VsdC5fX2NoYWluX18gPSB0cnVlO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpbnZva2VzIGBpbnRlcmNlcHRvcmAgYW5kIHJldHVybnMgYHZhbHVlYC4gVGhlIGludGVyY2VwdG9yXG4gICAgICogaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDsgKHZhbHVlKS4gVGhlIHB1cnBvc2Ugb2YgdGhpcyBtZXRob2QgaXMgdG9cbiAgICAgKiBcInRhcCBpbnRvXCIgYSBtZXRob2QgY2hhaW4gc2VxdWVuY2UgaW4gb3JkZXIgdG8gbW9kaWZ5IGludGVybWVkaWF0ZSByZXN1bHRzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IFNlcVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHByb3ZpZGUgdG8gYGludGVyY2VwdG9yYC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpbnRlcmNlcHRvciBUaGUgZnVuY3Rpb24gdG8gaW52b2tlLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIGB2YWx1ZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8oWzEsIDIsIDNdKVxuICAgICAqICAudGFwKGZ1bmN0aW9uKGFycmF5KSB7XG4gICAgICogICAgLy8gTXV0YXRlIGlucHV0IGFycmF5LlxuICAgICAqICAgIGFycmF5LnBvcCgpO1xuICAgICAqICB9KVxuICAgICAqICAucmV2ZXJzZSgpXG4gICAgICogIC52YWx1ZSgpO1xuICAgICAqIC8vID0+IFsyLCAxXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRhcCh2YWx1ZSwgaW50ZXJjZXB0b3IpIHtcbiAgICAgIGludGVyY2VwdG9yKHZhbHVlKTtcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnRhcGAgZXhjZXB0IHRoYXQgaXQgcmV0dXJucyB0aGUgcmVzdWx0IG9mIGBpbnRlcmNlcHRvcmAuXG4gICAgICogVGhlIHB1cnBvc2Ugb2YgdGhpcyBtZXRob2QgaXMgdG8gXCJwYXNzIHRocnVcIiB2YWx1ZXMgcmVwbGFjaW5nIGludGVybWVkaWF0ZVxuICAgICAqIHJlc3VsdHMgaW4gYSBtZXRob2QgY2hhaW4gc2VxdWVuY2UuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU2VxXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcHJvdmlkZSB0byBgaW50ZXJjZXB0b3JgLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGludGVyY2VwdG9yIFRoZSBmdW5jdGlvbiB0byBpbnZva2UuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHJlc3VsdCBvZiBgaW50ZXJjZXB0b3JgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfKCcgIGFiYyAgJylcbiAgICAgKiAgLmNoYWluKClcbiAgICAgKiAgLnRyaW0oKVxuICAgICAqICAudGhydShmdW5jdGlvbih2YWx1ZSkge1xuICAgICAqICAgIHJldHVybiBbdmFsdWVdO1xuICAgICAqICB9KVxuICAgICAqICAudmFsdWUoKTtcbiAgICAgKiAvLyA9PiBbJ2FiYyddXG4gICAgICovXG4gICAgZnVuY3Rpb24gdGhydSh2YWx1ZSwgaW50ZXJjZXB0b3IpIHtcbiAgICAgIHJldHVybiBpbnRlcmNlcHRvcih2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgdGhlIHdyYXBwZXIgdmVyc2lvbiBvZiBgXy5hdGAuXG4gICAgICpcbiAgICAgKiBAbmFtZSBhdFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDEuMC4wXG4gICAgICogQGNhdGVnb3J5IFNlcVxuICAgICAqIEBwYXJhbSB7Li4uKHN0cmluZ3xzdHJpbmdbXSl9IFtwYXRoc10gVGhlIHByb3BlcnR5IHBhdGhzIHRvIHBpY2suXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IGBsb2Rhc2hgIHdyYXBwZXIgaW5zdGFuY2UuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogW3sgJ2InOiB7ICdjJzogMyB9IH0sIDRdIH07XG4gICAgICpcbiAgICAgKiBfKG9iamVjdCkuYXQoWydhWzBdLmIuYycsICdhWzFdJ10pLnZhbHVlKCk7XG4gICAgICogLy8gPT4gWzMsIDRdXG4gICAgICovXG4gICAgdmFyIHdyYXBwZXJBdCA9IGZsYXRSZXN0KGZ1bmN0aW9uKHBhdGhzKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gcGF0aHMubGVuZ3RoLFxuICAgICAgICAgIHN0YXJ0ID0gbGVuZ3RoID8gcGF0aHNbMF0gOiAwLFxuICAgICAgICAgIHZhbHVlID0gdGhpcy5fX3dyYXBwZWRfXyxcbiAgICAgICAgICBpbnRlcmNlcHRvciA9IGZ1bmN0aW9uKG9iamVjdCkgeyByZXR1cm4gYmFzZUF0KG9iamVjdCwgcGF0aHMpOyB9O1xuXG4gICAgICBpZiAobGVuZ3RoID4gMSB8fCB0aGlzLl9fYWN0aW9uc19fLmxlbmd0aCB8fFxuICAgICAgICAgICEodmFsdWUgaW5zdGFuY2VvZiBMYXp5V3JhcHBlcikgfHwgIWlzSW5kZXgoc3RhcnQpKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnRocnUoaW50ZXJjZXB0b3IpO1xuICAgICAgfVxuICAgICAgdmFsdWUgPSB2YWx1ZS5zbGljZShzdGFydCwgK3N0YXJ0ICsgKGxlbmd0aCA/IDEgOiAwKSk7XG4gICAgICB2YWx1ZS5fX2FjdGlvbnNfXy5wdXNoKHtcbiAgICAgICAgJ2Z1bmMnOiB0aHJ1LFxuICAgICAgICAnYXJncyc6IFtpbnRlcmNlcHRvcl0sXG4gICAgICAgICd0aGlzQXJnJzogdW5kZWZpbmVkXG4gICAgICB9KTtcbiAgICAgIHJldHVybiBuZXcgTG9kYXNoV3JhcHBlcih2YWx1ZSwgdGhpcy5fX2NoYWluX18pLnRocnUoZnVuY3Rpb24oYXJyYXkpIHtcbiAgICAgICAgaWYgKGxlbmd0aCAmJiAhYXJyYXkubGVuZ3RoKSB7XG4gICAgICAgICAgYXJyYXkucHVzaCh1bmRlZmluZWQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhcnJheTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGBsb2Rhc2hgIHdyYXBwZXIgaW5zdGFuY2Ugd2l0aCBleHBsaWNpdCBtZXRob2QgY2hhaW4gc2VxdWVuY2VzIGVuYWJsZWQuXG4gICAgICpcbiAgICAgKiBAbmFtZSBjaGFpblxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IFNlcVxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBgbG9kYXNoYCB3cmFwcGVyIGluc3RhbmNlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICdhZ2UnOiAzNiB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAnYWdlJzogNDAgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiAvLyBBIHNlcXVlbmNlIHdpdGhvdXQgZXhwbGljaXQgY2hhaW5pbmcuXG4gICAgICogXyh1c2VycykuaGVhZCgpO1xuICAgICAqIC8vID0+IHsgJ3VzZXInOiAnYmFybmV5JywgJ2FnZSc6IDM2IH1cbiAgICAgKlxuICAgICAqIC8vIEEgc2VxdWVuY2Ugd2l0aCBleHBsaWNpdCBjaGFpbmluZy5cbiAgICAgKiBfKHVzZXJzKVxuICAgICAqICAgLmNoYWluKClcbiAgICAgKiAgIC5oZWFkKClcbiAgICAgKiAgIC5waWNrKCd1c2VyJylcbiAgICAgKiAgIC52YWx1ZSgpO1xuICAgICAqIC8vID0+IHsgJ3VzZXInOiAnYmFybmV5JyB9XG4gICAgICovXG4gICAgZnVuY3Rpb24gd3JhcHBlckNoYWluKCkge1xuICAgICAgcmV0dXJuIGNoYWluKHRoaXMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEV4ZWN1dGVzIHRoZSBjaGFpbiBzZXF1ZW5jZSBhbmQgcmV0dXJucyB0aGUgd3JhcHBlZCByZXN1bHQuXG4gICAgICpcbiAgICAgKiBAbmFtZSBjb21taXRcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjIuMFxuICAgICAqIEBjYXRlZ29yeSBTZXFcbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgYGxvZGFzaGAgd3JhcHBlciBpbnN0YW5jZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gWzEsIDJdO1xuICAgICAqIHZhciB3cmFwcGVkID0gXyhhcnJheSkucHVzaCgzKTtcbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKGFycmF5KTtcbiAgICAgKiAvLyA9PiBbMSwgMl1cbiAgICAgKlxuICAgICAqIHdyYXBwZWQgPSB3cmFwcGVkLmNvbW1pdCgpO1xuICAgICAqIGNvbnNvbGUubG9nKGFycmF5KTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKlxuICAgICAqIHdyYXBwZWQubGFzdCgpO1xuICAgICAqIC8vID0+IDNcbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKGFycmF5KTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB3cmFwcGVyQ29tbWl0KCkge1xuICAgICAgcmV0dXJuIG5ldyBMb2Rhc2hXcmFwcGVyKHRoaXMudmFsdWUoKSwgdGhpcy5fX2NoYWluX18pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIG5leHQgdmFsdWUgb24gYSB3cmFwcGVkIG9iamVjdCBmb2xsb3dpbmcgdGhlXG4gICAgICogW2l0ZXJhdG9yIHByb3RvY29sXShodHRwczovL21kbi5pby9pdGVyYXRpb25fcHJvdG9jb2xzI2l0ZXJhdG9yKS5cbiAgICAgKlxuICAgICAqIEBuYW1lIG5leHRcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBTZXFcbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXh0IGl0ZXJhdG9yIHZhbHVlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgd3JhcHBlZCA9IF8oWzEsIDJdKTtcbiAgICAgKlxuICAgICAqIHdyYXBwZWQubmV4dCgpO1xuICAgICAqIC8vID0+IHsgJ2RvbmUnOiBmYWxzZSwgJ3ZhbHVlJzogMSB9XG4gICAgICpcbiAgICAgKiB3cmFwcGVkLm5leHQoKTtcbiAgICAgKiAvLyA9PiB7ICdkb25lJzogZmFsc2UsICd2YWx1ZSc6IDIgfVxuICAgICAqXG4gICAgICogd3JhcHBlZC5uZXh0KCk7XG4gICAgICogLy8gPT4geyAnZG9uZSc6IHRydWUsICd2YWx1ZSc6IHVuZGVmaW5lZCB9XG4gICAgICovXG4gICAgZnVuY3Rpb24gd3JhcHBlck5leHQoKSB7XG4gICAgICBpZiAodGhpcy5fX3ZhbHVlc19fID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdGhpcy5fX3ZhbHVlc19fID0gdG9BcnJheSh0aGlzLnZhbHVlKCkpO1xuICAgICAgfVxuICAgICAgdmFyIGRvbmUgPSB0aGlzLl9faW5kZXhfXyA+PSB0aGlzLl9fdmFsdWVzX18ubGVuZ3RoLFxuICAgICAgICAgIHZhbHVlID0gZG9uZSA/IHVuZGVmaW5lZCA6IHRoaXMuX192YWx1ZXNfX1t0aGlzLl9faW5kZXhfXysrXTtcblxuICAgICAgcmV0dXJuIHsgJ2RvbmUnOiBkb25lLCAndmFsdWUnOiB2YWx1ZSB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEVuYWJsZXMgdGhlIHdyYXBwZXIgdG8gYmUgaXRlcmFibGUuXG4gICAgICpcbiAgICAgKiBAbmFtZSBTeW1ib2wuaXRlcmF0b3JcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBTZXFcbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSB3cmFwcGVyIG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHdyYXBwZWQgPSBfKFsxLCAyXSk7XG4gICAgICpcbiAgICAgKiB3cmFwcGVkW1N5bWJvbC5pdGVyYXRvcl0oKSA9PT0gd3JhcHBlZDtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBBcnJheS5mcm9tKHdyYXBwZWQpO1xuICAgICAqIC8vID0+IFsxLCAyXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHdyYXBwZXJUb0l0ZXJhdG9yKCkge1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGNsb25lIG9mIHRoZSBjaGFpbiBzZXF1ZW5jZSBwbGFudGluZyBgdmFsdWVgIGFzIHRoZSB3cmFwcGVkIHZhbHVlLlxuICAgICAqXG4gICAgICogQG5hbWUgcGxhbnRcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjIuMFxuICAgICAqIEBjYXRlZ29yeSBTZXFcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBwbGFudC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgYGxvZGFzaGAgd3JhcHBlciBpbnN0YW5jZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gc3F1YXJlKG4pIHtcbiAgICAgKiAgIHJldHVybiBuICogbjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiB2YXIgd3JhcHBlZCA9IF8oWzEsIDJdKS5tYXAoc3F1YXJlKTtcbiAgICAgKiB2YXIgb3RoZXIgPSB3cmFwcGVkLnBsYW50KFszLCA0XSk7XG4gICAgICpcbiAgICAgKiBvdGhlci52YWx1ZSgpO1xuICAgICAqIC8vID0+IFs5LCAxNl1cbiAgICAgKlxuICAgICAqIHdyYXBwZWQudmFsdWUoKTtcbiAgICAgKiAvLyA9PiBbMSwgNF1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB3cmFwcGVyUGxhbnQodmFsdWUpIHtcbiAgICAgIHZhciByZXN1bHQsXG4gICAgICAgICAgcGFyZW50ID0gdGhpcztcblxuICAgICAgd2hpbGUgKHBhcmVudCBpbnN0YW5jZW9mIGJhc2VMb2Rhc2gpIHtcbiAgICAgICAgdmFyIGNsb25lID0gd3JhcHBlckNsb25lKHBhcmVudCk7XG4gICAgICAgIGNsb25lLl9faW5kZXhfXyA9IDA7XG4gICAgICAgIGNsb25lLl9fdmFsdWVzX18gPSB1bmRlZmluZWQ7XG4gICAgICAgIGlmIChyZXN1bHQpIHtcbiAgICAgICAgICBwcmV2aW91cy5fX3dyYXBwZWRfXyA9IGNsb25lO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlc3VsdCA9IGNsb25lO1xuICAgICAgICB9XG4gICAgICAgIHZhciBwcmV2aW91cyA9IGNsb25lO1xuICAgICAgICBwYXJlbnQgPSBwYXJlbnQuX193cmFwcGVkX187XG4gICAgICB9XG4gICAgICBwcmV2aW91cy5fX3dyYXBwZWRfXyA9IHZhbHVlO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyB0aGUgd3JhcHBlciB2ZXJzaW9uIG9mIGBfLnJldmVyc2VgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgdGhlIHdyYXBwZWQgYXJyYXkuXG4gICAgICpcbiAgICAgKiBAbmFtZSByZXZlcnNlXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgU2VxXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IGBsb2Rhc2hgIHdyYXBwZXIgaW5zdGFuY2UuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFsxLCAyLCAzXTtcbiAgICAgKlxuICAgICAqIF8oYXJyYXkpLnJldmVyc2UoKS52YWx1ZSgpXG4gICAgICogLy8gPT4gWzMsIDIsIDFdXG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhhcnJheSk7XG4gICAgICogLy8gPT4gWzMsIDIsIDFdXG4gICAgICovXG4gICAgZnVuY3Rpb24gd3JhcHBlclJldmVyc2UoKSB7XG4gICAgICB2YXIgdmFsdWUgPSB0aGlzLl9fd3JhcHBlZF9fO1xuICAgICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgTGF6eVdyYXBwZXIpIHtcbiAgICAgICAgdmFyIHdyYXBwZWQgPSB2YWx1ZTtcbiAgICAgICAgaWYgKHRoaXMuX19hY3Rpb25zX18ubGVuZ3RoKSB7XG4gICAgICAgICAgd3JhcHBlZCA9IG5ldyBMYXp5V3JhcHBlcih0aGlzKTtcbiAgICAgICAgfVxuICAgICAgICB3cmFwcGVkID0gd3JhcHBlZC5yZXZlcnNlKCk7XG4gICAgICAgIHdyYXBwZWQuX19hY3Rpb25zX18ucHVzaCh7XG4gICAgICAgICAgJ2Z1bmMnOiB0aHJ1LFxuICAgICAgICAgICdhcmdzJzogW3JldmVyc2VdLFxuICAgICAgICAgICd0aGlzQXJnJzogdW5kZWZpbmVkXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gbmV3IExvZGFzaFdyYXBwZXIod3JhcHBlZCwgdGhpcy5fX2NoYWluX18pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMudGhydShyZXZlcnNlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBFeGVjdXRlcyB0aGUgY2hhaW4gc2VxdWVuY2UgdG8gcmVzb2x2ZSB0aGUgdW53cmFwcGVkIHZhbHVlLlxuICAgICAqXG4gICAgICogQG5hbWUgdmFsdWVcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBhbGlhcyB0b0pTT04sIHZhbHVlT2ZcbiAgICAgKiBAY2F0ZWdvcnkgU2VxXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHJlc29sdmVkIHVud3JhcHBlZCB2YWx1ZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXyhbMSwgMiwgM10pLnZhbHVlKCk7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdXG4gICAgICovXG4gICAgZnVuY3Rpb24gd3JhcHBlclZhbHVlKCkge1xuICAgICAgcmV0dXJuIGJhc2VXcmFwcGVyVmFsdWUodGhpcy5fX3dyYXBwZWRfXywgdGhpcy5fX2FjdGlvbnNfXyk7XG4gICAgfVxuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBvYmplY3QgY29tcG9zZWQgb2Yga2V5cyBnZW5lcmF0ZWQgZnJvbSB0aGUgcmVzdWx0cyBvZiBydW5uaW5nXG4gICAgICogZWFjaCBlbGVtZW50IG9mIGBjb2xsZWN0aW9uYCB0aHJ1IGBpdGVyYXRlZWAuIFRoZSBjb3JyZXNwb25kaW5nIHZhbHVlIG9mXG4gICAgICogZWFjaCBrZXkgaXMgdGhlIG51bWJlciBvZiB0aW1lcyB0aGUga2V5IHdhcyByZXR1cm5lZCBieSBgaXRlcmF0ZWVgLiBUaGVcbiAgICAgKiBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OiAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuNS4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBpdGVyYXRlZSB0byB0cmFuc2Zvcm0ga2V5cy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjb21wb3NlZCBhZ2dyZWdhdGUgb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmNvdW50QnkoWzYuMSwgNC4yLCA2LjNdLCBNYXRoLmZsb29yKTtcbiAgICAgKiAvLyA9PiB7ICc0JzogMSwgJzYnOiAyIH1cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uY291bnRCeShbJ29uZScsICd0d28nLCAndGhyZWUnXSwgJ2xlbmd0aCcpO1xuICAgICAqIC8vID0+IHsgJzMnOiAyLCAnNSc6IDEgfVxuICAgICAqL1xuICAgIHZhciBjb3VudEJ5ID0gY3JlYXRlQWdncmVnYXRvcihmdW5jdGlvbihyZXN1bHQsIHZhbHVlLCBrZXkpIHtcbiAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKHJlc3VsdCwga2V5KSkge1xuICAgICAgICArK3Jlc3VsdFtrZXldO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYmFzZUFzc2lnblZhbHVlKHJlc3VsdCwga2V5LCAxKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgcHJlZGljYXRlYCByZXR1cm5zIHRydXRoeSBmb3IgKiphbGwqKiBlbGVtZW50cyBvZiBgY29sbGVjdGlvbmAuXG4gICAgICogSXRlcmF0aW9uIGlzIHN0b3BwZWQgb25jZSBgcHJlZGljYXRlYCByZXR1cm5zIGZhbHNleS4gVGhlIHByZWRpY2F0ZSBpc1xuICAgICAqIGludm9rZWQgd2l0aCB0aHJlZSBhcmd1bWVudHM6ICh2YWx1ZSwgaW5kZXh8a2V5LCBjb2xsZWN0aW9uKS5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCByZXR1cm5zIGB0cnVlYCBmb3JcbiAgICAgKiBbZW1wdHkgY29sbGVjdGlvbnNdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0VtcHR5X3NldCkgYmVjYXVzZVxuICAgICAqIFtldmVyeXRoaW5nIGlzIHRydWVdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1ZhY3VvdXNfdHJ1dGgpIG9mXG4gICAgICogZWxlbWVudHMgb2YgZW1wdHkgY29sbGVjdGlvbnMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYWxsIGVsZW1lbnRzIHBhc3MgdGhlIHByZWRpY2F0ZSBjaGVjayxcbiAgICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmV2ZXJ5KFt0cnVlLCAxLCBudWxsLCAneWVzJ10sIEJvb2xlYW4pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICdhZ2UnOiAzNiwgJ2FjdGl2ZSc6IGZhbHNlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICdhZ2UnOiA0MCwgJ2FjdGl2ZSc6IGZhbHNlIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmV2ZXJ5KHVzZXJzLCB7ICd1c2VyJzogJ2Jhcm5leScsICdhY3RpdmUnOiBmYWxzZSB9KTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZXZlcnkodXNlcnMsIFsnYWN0aXZlJywgZmFsc2VdKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmV2ZXJ5KHVzZXJzLCAnYWN0aXZlJyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBldmVyeShjb2xsZWN0aW9uLCBwcmVkaWNhdGUsIGd1YXJkKSB7XG4gICAgICB2YXIgZnVuYyA9IGlzQXJyYXkoY29sbGVjdGlvbikgPyBhcnJheUV2ZXJ5IDogYmFzZUV2ZXJ5O1xuICAgICAgaWYgKGd1YXJkICYmIGlzSXRlcmF0ZWVDYWxsKGNvbGxlY3Rpb24sIHByZWRpY2F0ZSwgZ3VhcmQpKSB7XG4gICAgICAgIHByZWRpY2F0ZSA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmdW5jKGNvbGxlY3Rpb24sIGdldEl0ZXJhdGVlKHByZWRpY2F0ZSwgMykpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEl0ZXJhdGVzIG92ZXIgZWxlbWVudHMgb2YgYGNvbGxlY3Rpb25gLCByZXR1cm5pbmcgYW4gYXJyYXkgb2YgYWxsIGVsZW1lbnRzXG4gICAgICogYHByZWRpY2F0ZWAgcmV0dXJucyB0cnV0aHkgZm9yLiBUaGUgcHJlZGljYXRlIGlzIGludm9rZWQgd2l0aCB0aHJlZVxuICAgICAqIGFyZ3VtZW50czogKHZhbHVlLCBpbmRleHxrZXksIGNvbGxlY3Rpb24pLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFVubGlrZSBgXy5yZW1vdmVgLCB0aGlzIG1ldGhvZCByZXR1cm5zIGEgbmV3IGFycmF5LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGZpbHRlcmVkIGFycmF5LlxuICAgICAqIEBzZWUgXy5yZWplY3RcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAnYWdlJzogMzYsICdhY3RpdmUnOiB0cnVlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICdhZ2UnOiA0MCwgJ2FjdGl2ZSc6IGZhbHNlIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5maWx0ZXIodXNlcnMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuICFvLmFjdGl2ZTsgfSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydmcmVkJ11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzYCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maWx0ZXIodXNlcnMsIHsgJ2FnZSc6IDM2LCAnYWN0aXZlJzogdHJ1ZSB9KTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2Jhcm5leSddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc1Byb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maWx0ZXIodXNlcnMsIFsnYWN0aXZlJywgZmFsc2VdKTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2ZyZWQnXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maWx0ZXIodXNlcnMsICdhY3RpdmUnKTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2Jhcm5leSddXG4gICAgICovXG4gICAgZnVuY3Rpb24gZmlsdGVyKGNvbGxlY3Rpb24sIHByZWRpY2F0ZSkge1xuICAgICAgdmFyIGZ1bmMgPSBpc0FycmF5KGNvbGxlY3Rpb24pID8gYXJyYXlGaWx0ZXIgOiBiYXNlRmlsdGVyO1xuICAgICAgcmV0dXJuIGZ1bmMoY29sbGVjdGlvbiwgZ2V0SXRlcmF0ZWUocHJlZGljYXRlLCAzKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSXRlcmF0ZXMgb3ZlciBlbGVtZW50cyBvZiBgY29sbGVjdGlvbmAsIHJldHVybmluZyB0aGUgZmlyc3QgZWxlbWVudFxuICAgICAqIGBwcmVkaWNhdGVgIHJldHVybnMgdHJ1dGh5IGZvci4gVGhlIHByZWRpY2F0ZSBpcyBpbnZva2VkIHdpdGggdGhyZWVcbiAgICAgKiBhcmd1bWVudHM6ICh2YWx1ZSwgaW5kZXh8a2V5LCBjb2xsZWN0aW9uKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtmcm9tSW5kZXg9MF0gVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBtYXRjaGVkIGVsZW1lbnQsIGVsc2UgYHVuZGVmaW5lZGAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgICdhZ2UnOiAzNiwgJ2FjdGl2ZSc6IHRydWUgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgICdhZ2UnOiA0MCwgJ2FjdGl2ZSc6IGZhbHNlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ3BlYmJsZXMnLCAnYWdlJzogMSwgICdhY3RpdmUnOiB0cnVlIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5maW5kKHVzZXJzLCBmdW5jdGlvbihvKSB7IHJldHVybiBvLmFnZSA8IDQwOyB9KTtcbiAgICAgKiAvLyA9PiBvYmplY3QgZm9yICdiYXJuZXknXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc2AgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmluZCh1c2VycywgeyAnYWdlJzogMSwgJ2FjdGl2ZSc6IHRydWUgfSk7XG4gICAgICogLy8gPT4gb2JqZWN0IGZvciAncGViYmxlcydcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbmQodXNlcnMsIFsnYWN0aXZlJywgZmFsc2VdKTtcbiAgICAgKiAvLyA9PiBvYmplY3QgZm9yICdmcmVkJ1xuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maW5kKHVzZXJzLCAnYWN0aXZlJyk7XG4gICAgICogLy8gPT4gb2JqZWN0IGZvciAnYmFybmV5J1xuICAgICAqL1xuICAgIHZhciBmaW5kID0gY3JlYXRlRmluZChmaW5kSW5kZXgpO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5maW5kYCBleGNlcHQgdGhhdCBpdCBpdGVyYXRlcyBvdmVyIGVsZW1lbnRzIG9mXG4gICAgICogYGNvbGxlY3Rpb25gIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAyLjAuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtmcm9tSW5kZXg9Y29sbGVjdGlvbi5sZW5ndGgtMV0gVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBtYXRjaGVkIGVsZW1lbnQsIGVsc2UgYHVuZGVmaW5lZGAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZmluZExhc3QoWzEsIDIsIDMsIDRdLCBmdW5jdGlvbihuKSB7XG4gICAgICogICByZXR1cm4gbiAlIDIgPT0gMTtcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICovXG4gICAgdmFyIGZpbmRMYXN0ID0gY3JlYXRlRmluZChmaW5kTGFzdEluZGV4KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmbGF0dGVuZWQgYXJyYXkgb2YgdmFsdWVzIGJ5IHJ1bm5pbmcgZWFjaCBlbGVtZW50IGluIGBjb2xsZWN0aW9uYFxuICAgICAqIHRocnUgYGl0ZXJhdGVlYCBhbmQgZmxhdHRlbmluZyB0aGUgbWFwcGVkIHJlc3VsdHMuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkXG4gICAgICogd2l0aCB0aHJlZSBhcmd1bWVudHM6ICh2YWx1ZSwgaW5kZXh8a2V5LCBjb2xsZWN0aW9uKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGZsYXR0ZW5lZCBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gZHVwbGljYXRlKG4pIHtcbiAgICAgKiAgIHJldHVybiBbbiwgbl07XG4gICAgICogfVxuICAgICAqXG4gICAgICogXy5mbGF0TWFwKFsxLCAyXSwgZHVwbGljYXRlKTtcbiAgICAgKiAvLyA9PiBbMSwgMSwgMiwgMl1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmbGF0TWFwKGNvbGxlY3Rpb24sIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gYmFzZUZsYXR0ZW4obWFwKGNvbGxlY3Rpb24sIGl0ZXJhdGVlKSwgMSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5mbGF0TWFwYCBleGNlcHQgdGhhdCBpdCByZWN1cnNpdmVseSBmbGF0dGVucyB0aGVcbiAgICAgKiBtYXBwZWQgcmVzdWx0cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjcuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGZsYXR0ZW5lZCBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gZHVwbGljYXRlKG4pIHtcbiAgICAgKiAgIHJldHVybiBbW1tuLCBuXV1dO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIF8uZmxhdE1hcERlZXAoWzEsIDJdLCBkdXBsaWNhdGUpO1xuICAgICAqIC8vID0+IFsxLCAxLCAyLCAyXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZsYXRNYXBEZWVwKGNvbGxlY3Rpb24sIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gYmFzZUZsYXR0ZW4obWFwKGNvbGxlY3Rpb24sIGl0ZXJhdGVlKSwgSU5GSU5JVFkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZmxhdE1hcGAgZXhjZXB0IHRoYXQgaXQgcmVjdXJzaXZlbHkgZmxhdHRlbnMgdGhlXG4gICAgICogbWFwcGVkIHJlc3VsdHMgdXAgdG8gYGRlcHRoYCB0aW1lcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjcuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbZGVwdGg9MV0gVGhlIG1heGltdW0gcmVjdXJzaW9uIGRlcHRoLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGZsYXR0ZW5lZCBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gZHVwbGljYXRlKG4pIHtcbiAgICAgKiAgIHJldHVybiBbW1tuLCBuXV1dO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIF8uZmxhdE1hcERlcHRoKFsxLCAyXSwgZHVwbGljYXRlLCAyKTtcbiAgICAgKiAvLyA9PiBbWzEsIDFdLCBbMiwgMl1dXG4gICAgICovXG4gICAgZnVuY3Rpb24gZmxhdE1hcERlcHRoKGNvbGxlY3Rpb24sIGl0ZXJhdGVlLCBkZXB0aCkge1xuICAgICAgZGVwdGggPSBkZXB0aCA9PT0gdW5kZWZpbmVkID8gMSA6IHRvSW50ZWdlcihkZXB0aCk7XG4gICAgICByZXR1cm4gYmFzZUZsYXR0ZW4obWFwKGNvbGxlY3Rpb24sIGl0ZXJhdGVlKSwgZGVwdGgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEl0ZXJhdGVzIG92ZXIgZWxlbWVudHMgb2YgYGNvbGxlY3Rpb25gIGFuZCBpbnZva2VzIGBpdGVyYXRlZWAgZm9yIGVhY2ggZWxlbWVudC5cbiAgICAgKiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIHRocmVlIGFyZ3VtZW50czogKHZhbHVlLCBpbmRleHxrZXksIGNvbGxlY3Rpb24pLlxuICAgICAqIEl0ZXJhdGVlIGZ1bmN0aW9ucyBtYXkgZXhpdCBpdGVyYXRpb24gZWFybHkgYnkgZXhwbGljaXRseSByZXR1cm5pbmcgYGZhbHNlYC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBBcyB3aXRoIG90aGVyIFwiQ29sbGVjdGlvbnNcIiBtZXRob2RzLCBvYmplY3RzIHdpdGggYSBcImxlbmd0aFwiXG4gICAgICogcHJvcGVydHkgYXJlIGl0ZXJhdGVkIGxpa2UgYXJyYXlzLiBUbyBhdm9pZCB0aGlzIGJlaGF2aW9yIHVzZSBgXy5mb3JJbmBcbiAgICAgKiBvciBgXy5mb3JPd25gIGZvciBvYmplY3QgaXRlcmF0aW9uLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGFsaWFzIGVhY2hcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl8T2JqZWN0fSBSZXR1cm5zIGBjb2xsZWN0aW9uYC5cbiAgICAgKiBAc2VlIF8uZm9yRWFjaFJpZ2h0XG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZm9yRWFjaChbMSwgMl0sIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICogICBjb25zb2xlLmxvZyh2YWx1ZSk7XG4gICAgICogfSk7XG4gICAgICogLy8gPT4gTG9ncyBgMWAgdGhlbiBgMmAuXG4gICAgICpcbiAgICAgKiBfLmZvckVhY2goeyAnYSc6IDEsICdiJzogMiB9LCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gICAgICogICBjb25zb2xlLmxvZyhrZXkpO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IExvZ3MgJ2EnIHRoZW4gJ2InIChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZvckVhY2goY29sbGVjdGlvbiwgaXRlcmF0ZWUpIHtcbiAgICAgIHZhciBmdW5jID0gaXNBcnJheShjb2xsZWN0aW9uKSA/IGFycmF5RWFjaCA6IGJhc2VFYWNoO1xuICAgICAgcmV0dXJuIGZ1bmMoY29sbGVjdGlvbiwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDMpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmZvckVhY2hgIGV4Y2VwdCB0aGF0IGl0IGl0ZXJhdGVzIG92ZXIgZWxlbWVudHMgb2ZcbiAgICAgKiBgY29sbGVjdGlvbmAgZnJvbSByaWdodCB0byBsZWZ0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuMC4wXG4gICAgICogQGFsaWFzIGVhY2hSaWdodFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheXxPYmplY3R9IFJldHVybnMgYGNvbGxlY3Rpb25gLlxuICAgICAqIEBzZWUgXy5mb3JFYWNoXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZm9yRWFjaFJpZ2h0KFsxLCAyXSwgZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKHZhbHVlKTtcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiBMb2dzIGAyYCB0aGVuIGAxYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmb3JFYWNoUmlnaHQoY29sbGVjdGlvbiwgaXRlcmF0ZWUpIHtcbiAgICAgIHZhciBmdW5jID0gaXNBcnJheShjb2xsZWN0aW9uKSA/IGFycmF5RWFjaFJpZ2h0IDogYmFzZUVhY2hSaWdodDtcbiAgICAgIHJldHVybiBmdW5jKGNvbGxlY3Rpb24sIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAzKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBvYmplY3QgY29tcG9zZWQgb2Yga2V5cyBnZW5lcmF0ZWQgZnJvbSB0aGUgcmVzdWx0cyBvZiBydW5uaW5nXG4gICAgICogZWFjaCBlbGVtZW50IG9mIGBjb2xsZWN0aW9uYCB0aHJ1IGBpdGVyYXRlZWAuIFRoZSBvcmRlciBvZiBncm91cGVkIHZhbHVlc1xuICAgICAqIGlzIGRldGVybWluZWQgYnkgdGhlIG9yZGVyIHRoZXkgb2NjdXIgaW4gYGNvbGxlY3Rpb25gLiBUaGUgY29ycmVzcG9uZGluZ1xuICAgICAqIHZhbHVlIG9mIGVhY2gga2V5IGlzIGFuIGFycmF5IG9mIGVsZW1lbnRzIHJlc3BvbnNpYmxlIGZvciBnZW5lcmF0aW5nIHRoZVxuICAgICAqIGtleS4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGl0ZXJhdGVlIHRvIHRyYW5zZm9ybSBrZXlzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNvbXBvc2VkIGFnZ3JlZ2F0ZSBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZ3JvdXBCeShbNi4xLCA0LjIsIDYuM10sIE1hdGguZmxvb3IpO1xuICAgICAqIC8vID0+IHsgJzQnOiBbNC4yXSwgJzYnOiBbNi4xLCA2LjNdIH1cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZ3JvdXBCeShbJ29uZScsICd0d28nLCAndGhyZWUnXSwgJ2xlbmd0aCcpO1xuICAgICAqIC8vID0+IHsgJzMnOiBbJ29uZScsICd0d28nXSwgJzUnOiBbJ3RocmVlJ10gfVxuICAgICAqL1xuICAgIHZhciBncm91cEJ5ID0gY3JlYXRlQWdncmVnYXRvcihmdW5jdGlvbihyZXN1bHQsIHZhbHVlLCBrZXkpIHtcbiAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKHJlc3VsdCwga2V5KSkge1xuICAgICAgICByZXN1bHRba2V5XS5wdXNoKHZhbHVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGJhc2VBc3NpZ25WYWx1ZShyZXN1bHQsIGtleSwgW3ZhbHVlXSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBpbiBgY29sbGVjdGlvbmAuIElmIGBjb2xsZWN0aW9uYCBpcyBhIHN0cmluZywgaXQnc1xuICAgICAqIGNoZWNrZWQgZm9yIGEgc3Vic3RyaW5nIG9mIGB2YWx1ZWAsIG90aGVyd2lzZVxuICAgICAqIFtgU2FtZVZhbHVlWmVyb2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXNhbWV2YWx1ZXplcm8pXG4gICAgICogaXMgdXNlZCBmb3IgZXF1YWxpdHkgY29tcGFyaXNvbnMuIElmIGBmcm9tSW5kZXhgIGlzIG5lZ2F0aXZlLCBpdCdzIHVzZWQgYXNcbiAgICAgKiB0aGUgb2Zmc2V0IGZyb20gdGhlIGVuZCBvZiBgY29sbGVjdGlvbmAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fHN0cmluZ30gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtmcm9tSW5kZXg9MF0gVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLnJlZHVjZWAuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgZm91bmQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pbmNsdWRlcyhbMSwgMiwgM10sIDEpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaW5jbHVkZXMoWzEsIDIsIDNdLCAxLCAyKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pbmNsdWRlcyh7ICdhJzogMSwgJ2InOiAyIH0sIDEpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaW5jbHVkZXMoJ2FiY2QnLCAnYmMnKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaW5jbHVkZXMoY29sbGVjdGlvbiwgdmFsdWUsIGZyb21JbmRleCwgZ3VhcmQpIHtcbiAgICAgIGNvbGxlY3Rpb24gPSBpc0FycmF5TGlrZShjb2xsZWN0aW9uKSA/IGNvbGxlY3Rpb24gOiB2YWx1ZXMoY29sbGVjdGlvbik7XG4gICAgICBmcm9tSW5kZXggPSAoZnJvbUluZGV4ICYmICFndWFyZCkgPyB0b0ludGVnZXIoZnJvbUluZGV4KSA6IDA7XG5cbiAgICAgIHZhciBsZW5ndGggPSBjb2xsZWN0aW9uLmxlbmd0aDtcbiAgICAgIGlmIChmcm9tSW5kZXggPCAwKSB7XG4gICAgICAgIGZyb21JbmRleCA9IG5hdGl2ZU1heChsZW5ndGggKyBmcm9tSW5kZXgsIDApO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGlzU3RyaW5nKGNvbGxlY3Rpb24pXG4gICAgICAgID8gKGZyb21JbmRleCA8PSBsZW5ndGggJiYgY29sbGVjdGlvbi5pbmRleE9mKHZhbHVlLCBmcm9tSW5kZXgpID4gLTEpXG4gICAgICAgIDogKCEhbGVuZ3RoICYmIGJhc2VJbmRleE9mKGNvbGxlY3Rpb24sIHZhbHVlLCBmcm9tSW5kZXgpID4gLTEpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEludm9rZXMgdGhlIG1ldGhvZCBhdCBgcGF0aGAgb2YgZWFjaCBlbGVtZW50IGluIGBjb2xsZWN0aW9uYCwgcmV0dXJuaW5nXG4gICAgICogYW4gYXJyYXkgb2YgdGhlIHJlc3VsdHMgb2YgZWFjaCBpbnZva2VkIG1ldGhvZC4gQW55IGFkZGl0aW9uYWwgYXJndW1lbnRzXG4gICAgICogYXJlIHByb3ZpZGVkIHRvIGVhY2ggaW52b2tlZCBtZXRob2QuIElmIGBwYXRoYCBpcyBhIGZ1bmN0aW9uLCBpdCdzIGludm9rZWRcbiAgICAgKiBmb3IsIGFuZCBgdGhpc2AgYm91bmQgdG8sIGVhY2ggZWxlbWVudCBpbiBgY29sbGVjdGlvbmAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0FycmF5fEZ1bmN0aW9ufHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgbWV0aG9kIHRvIGludm9rZSBvclxuICAgICAqICB0aGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7Li4uKn0gW2FyZ3NdIFRoZSBhcmd1bWVudHMgdG8gaW52b2tlIGVhY2ggbWV0aG9kIHdpdGguXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiByZXN1bHRzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmludm9rZU1hcChbWzUsIDEsIDddLCBbMywgMiwgMV1dLCAnc29ydCcpO1xuICAgICAqIC8vID0+IFtbMSwgNSwgN10sIFsxLCAyLCAzXV1cbiAgICAgKlxuICAgICAqIF8uaW52b2tlTWFwKFsxMjMsIDQ1Nl0sIFN0cmluZy5wcm90b3R5cGUuc3BsaXQsICcnKTtcbiAgICAgKiAvLyA9PiBbWycxJywgJzInLCAnMyddLCBbJzQnLCAnNScsICc2J11dXG4gICAgICovXG4gICAgdmFyIGludm9rZU1hcCA9IGJhc2VSZXN0KGZ1bmN0aW9uKGNvbGxlY3Rpb24sIHBhdGgsIGFyZ3MpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGlzRnVuYyA9IHR5cGVvZiBwYXRoID09ICdmdW5jdGlvbicsXG4gICAgICAgICAgcmVzdWx0ID0gaXNBcnJheUxpa2UoY29sbGVjdGlvbikgPyBBcnJheShjb2xsZWN0aW9uLmxlbmd0aCkgOiBbXTtcblxuICAgICAgYmFzZUVhY2goY29sbGVjdGlvbiwgZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgcmVzdWx0WysraW5kZXhdID0gaXNGdW5jID8gYXBwbHkocGF0aCwgdmFsdWUsIGFyZ3MpIDogYmFzZUludm9rZSh2YWx1ZSwgcGF0aCwgYXJncyk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIG9iamVjdCBjb21wb3NlZCBvZiBrZXlzIGdlbmVyYXRlZCBmcm9tIHRoZSByZXN1bHRzIG9mIHJ1bm5pbmdcbiAgICAgKiBlYWNoIGVsZW1lbnQgb2YgYGNvbGxlY3Rpb25gIHRocnUgYGl0ZXJhdGVlYC4gVGhlIGNvcnJlc3BvbmRpbmcgdmFsdWUgb2ZcbiAgICAgKiBlYWNoIGtleSBpcyB0aGUgbGFzdCBlbGVtZW50IHJlc3BvbnNpYmxlIGZvciBnZW5lcmF0aW5nIHRoZSBrZXkuIFRoZVxuICAgICAqIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGl0ZXJhdGVlIHRvIHRyYW5zZm9ybSBrZXlzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNvbXBvc2VkIGFnZ3JlZ2F0ZSBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFtcbiAgICAgKiAgIHsgJ2Rpcic6ICdsZWZ0JywgJ2NvZGUnOiA5NyB9LFxuICAgICAqICAgeyAnZGlyJzogJ3JpZ2h0JywgJ2NvZGUnOiAxMDAgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLmtleUJ5KGFycmF5LCBmdW5jdGlvbihvKSB7XG4gICAgICogICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZShvLmNvZGUpO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IHsgJ2EnOiB7ICdkaXInOiAnbGVmdCcsICdjb2RlJzogOTcgfSwgJ2QnOiB7ICdkaXInOiAncmlnaHQnLCAnY29kZSc6IDEwMCB9IH1cbiAgICAgKlxuICAgICAqIF8ua2V5QnkoYXJyYXksICdkaXInKTtcbiAgICAgKiAvLyA9PiB7ICdsZWZ0JzogeyAnZGlyJzogJ2xlZnQnLCAnY29kZSc6IDk3IH0sICdyaWdodCc6IHsgJ2Rpcic6ICdyaWdodCcsICdjb2RlJzogMTAwIH0gfVxuICAgICAqL1xuICAgIHZhciBrZXlCeSA9IGNyZWF0ZUFnZ3JlZ2F0b3IoZnVuY3Rpb24ocmVzdWx0LCB2YWx1ZSwga2V5KSB7XG4gICAgICBiYXNlQXNzaWduVmFsdWUocmVzdWx0LCBrZXksIHZhbHVlKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdmFsdWVzIGJ5IHJ1bm5pbmcgZWFjaCBlbGVtZW50IGluIGBjb2xsZWN0aW9uYCB0aHJ1XG4gICAgICogYGl0ZXJhdGVlYC4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCB0aHJlZSBhcmd1bWVudHM6XG4gICAgICogKHZhbHVlLCBpbmRleHxrZXksIGNvbGxlY3Rpb24pLlxuICAgICAqXG4gICAgICogTWFueSBsb2Rhc2ggbWV0aG9kcyBhcmUgZ3VhcmRlZCB0byB3b3JrIGFzIGl0ZXJhdGVlcyBmb3IgbWV0aG9kcyBsaWtlXG4gICAgICogYF8uZXZlcnlgLCBgXy5maWx0ZXJgLCBgXy5tYXBgLCBgXy5tYXBWYWx1ZXNgLCBgXy5yZWplY3RgLCBhbmQgYF8uc29tZWAuXG4gICAgICpcbiAgICAgKiBUaGUgZ3VhcmRlZCBtZXRob2RzIGFyZTpcbiAgICAgKiBgYXJ5YCwgYGNodW5rYCwgYGN1cnJ5YCwgYGN1cnJ5UmlnaHRgLCBgZHJvcGAsIGBkcm9wUmlnaHRgLCBgZXZlcnlgLFxuICAgICAqIGBmaWxsYCwgYGludmVydGAsIGBwYXJzZUludGAsIGByYW5kb21gLCBgcmFuZ2VgLCBgcmFuZ2VSaWdodGAsIGByZXBlYXRgLFxuICAgICAqIGBzYW1wbGVTaXplYCwgYHNsaWNlYCwgYHNvbWVgLCBgc29ydEJ5YCwgYHNwbGl0YCwgYHRha2VgLCBgdGFrZVJpZ2h0YCxcbiAgICAgKiBgdGVtcGxhdGVgLCBgdHJpbWAsIGB0cmltRW5kYCwgYHRyaW1TdGFydGAsIGFuZCBgd29yZHNgXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBtYXBwZWQgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIHNxdWFyZShuKSB7XG4gICAgICogICByZXR1cm4gbiAqIG47XG4gICAgICogfVxuICAgICAqXG4gICAgICogXy5tYXAoWzQsIDhdLCBzcXVhcmUpO1xuICAgICAqIC8vID0+IFsxNiwgNjRdXG4gICAgICpcbiAgICAgKiBfLm1hcCh7ICdhJzogNCwgJ2InOiA4IH0sIHNxdWFyZSk7XG4gICAgICogLy8gPT4gWzE2LCA2NF0gKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JyB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJyB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8ubWFwKHVzZXJzLCAndXNlcicpO1xuICAgICAqIC8vID0+IFsnYmFybmV5JywgJ2ZyZWQnXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1hcChjb2xsZWN0aW9uLCBpdGVyYXRlZSkge1xuICAgICAgdmFyIGZ1bmMgPSBpc0FycmF5KGNvbGxlY3Rpb24pID8gYXJyYXlNYXAgOiBiYXNlTWFwO1xuICAgICAgcmV0dXJuIGZ1bmMoY29sbGVjdGlvbiwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDMpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnNvcnRCeWAgZXhjZXB0IHRoYXQgaXQgYWxsb3dzIHNwZWNpZnlpbmcgdGhlIHNvcnRcbiAgICAgKiBvcmRlcnMgb2YgdGhlIGl0ZXJhdGVlcyB0byBzb3J0IGJ5LiBJZiBgb3JkZXJzYCBpcyB1bnNwZWNpZmllZCwgYWxsIHZhbHVlc1xuICAgICAqIGFyZSBzb3J0ZWQgaW4gYXNjZW5kaW5nIG9yZGVyLiBPdGhlcndpc2UsIHNwZWNpZnkgYW4gb3JkZXIgb2YgXCJkZXNjXCIgZm9yXG4gICAgICogZGVzY2VuZGluZyBvciBcImFzY1wiIGZvciBhc2NlbmRpbmcgc29ydCBvcmRlciBvZiBjb3JyZXNwb25kaW5nIHZhbHVlcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7QXJyYXlbXXxGdW5jdGlvbltdfE9iamVjdFtdfHN0cmluZ1tdfSBbaXRlcmF0ZWVzPVtfLmlkZW50aXR5XV1cbiAgICAgKiAgVGhlIGl0ZXJhdGVlcyB0byBzb3J0IGJ5LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nW119IFtvcmRlcnNdIFRoZSBzb3J0IG9yZGVycyBvZiBgaXRlcmF0ZWVzYC5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5yZWR1Y2VgLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IHNvcnRlZCBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAnYWdlJzogNDggfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FnZSc6IDM0IH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICdhZ2UnOiA0MCB9LFxuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAnYWdlJzogMzYgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiAvLyBTb3J0IGJ5IGB1c2VyYCBpbiBhc2NlbmRpbmcgb3JkZXIgYW5kIGJ5IGBhZ2VgIGluIGRlc2NlbmRpbmcgb3JkZXIuXG4gICAgICogXy5vcmRlckJ5KHVzZXJzLCBbJ3VzZXInLCAnYWdlJ10sIFsnYXNjJywgJ2Rlc2MnXSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgW1snYmFybmV5JywgMzZdLCBbJ2Jhcm5leScsIDM0XSwgWydmcmVkJywgNDhdLCBbJ2ZyZWQnLCA0MF1dXG4gICAgICovXG4gICAgZnVuY3Rpb24gb3JkZXJCeShjb2xsZWN0aW9uLCBpdGVyYXRlZXMsIG9yZGVycywgZ3VhcmQpIHtcbiAgICAgIGlmIChjb2xsZWN0aW9uID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgaWYgKCFpc0FycmF5KGl0ZXJhdGVlcykpIHtcbiAgICAgICAgaXRlcmF0ZWVzID0gaXRlcmF0ZWVzID09IG51bGwgPyBbXSA6IFtpdGVyYXRlZXNdO1xuICAgICAgfVxuICAgICAgb3JkZXJzID0gZ3VhcmQgPyB1bmRlZmluZWQgOiBvcmRlcnM7XG4gICAgICBpZiAoIWlzQXJyYXkob3JkZXJzKSkge1xuICAgICAgICBvcmRlcnMgPSBvcmRlcnMgPT0gbnVsbCA/IFtdIDogW29yZGVyc107XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZU9yZGVyQnkoY29sbGVjdGlvbiwgaXRlcmF0ZWVzLCBvcmRlcnMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgZWxlbWVudHMgc3BsaXQgaW50byB0d28gZ3JvdXBzLCB0aGUgZmlyc3Qgb2Ygd2hpY2hcbiAgICAgKiBjb250YWlucyBlbGVtZW50cyBgcHJlZGljYXRlYCByZXR1cm5zIHRydXRoeSBmb3IsIHRoZSBzZWNvbmQgb2Ygd2hpY2hcbiAgICAgKiBjb250YWlucyBlbGVtZW50cyBgcHJlZGljYXRlYCByZXR1cm5zIGZhbHNleSBmb3IuIFRoZSBwcmVkaWNhdGUgaXNcbiAgICAgKiBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OiAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgZ3JvdXBlZCBlbGVtZW50cy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAgJ2FnZSc6IDM2LCAnYWN0aXZlJzogZmFsc2UgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgICdhZ2UnOiA0MCwgJ2FjdGl2ZSc6IHRydWUgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAncGViYmxlcycsICdhZ2UnOiAxLCAgJ2FjdGl2ZSc6IGZhbHNlIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5wYXJ0aXRpb24odXNlcnMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuIG8uYWN0aXZlOyB9KTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbWydmcmVkJ10sIFsnYmFybmV5JywgJ3BlYmJsZXMnXV1cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzYCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5wYXJ0aXRpb24odXNlcnMsIHsgJ2FnZSc6IDEsICdhY3RpdmUnOiBmYWxzZSB9KTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbWydwZWJibGVzJ10sIFsnYmFybmV5JywgJ2ZyZWQnXV1cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnBhcnRpdGlvbih1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFtbJ2Jhcm5leScsICdwZWJibGVzJ10sIFsnZnJlZCddXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5wYXJ0aXRpb24odXNlcnMsICdhY3RpdmUnKTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbWydmcmVkJ10sIFsnYmFybmV5JywgJ3BlYmJsZXMnXV1cbiAgICAgKi9cbiAgICB2YXIgcGFydGl0aW9uID0gY3JlYXRlQWdncmVnYXRvcihmdW5jdGlvbihyZXN1bHQsIHZhbHVlLCBrZXkpIHtcbiAgICAgIHJlc3VsdFtrZXkgPyAwIDogMV0ucHVzaCh2YWx1ZSk7XG4gICAgfSwgZnVuY3Rpb24oKSB7IHJldHVybiBbW10sIFtdXTsgfSk7XG5cbiAgICAvKipcbiAgICAgKiBSZWR1Y2VzIGBjb2xsZWN0aW9uYCB0byBhIHZhbHVlIHdoaWNoIGlzIHRoZSBhY2N1bXVsYXRlZCByZXN1bHQgb2YgcnVubmluZ1xuICAgICAqIGVhY2ggZWxlbWVudCBpbiBgY29sbGVjdGlvbmAgdGhydSBgaXRlcmF0ZWVgLCB3aGVyZSBlYWNoIHN1Y2Nlc3NpdmVcbiAgICAgKiBpbnZvY2F0aW9uIGlzIHN1cHBsaWVkIHRoZSByZXR1cm4gdmFsdWUgb2YgdGhlIHByZXZpb3VzLiBJZiBgYWNjdW11bGF0b3JgXG4gICAgICogaXMgbm90IGdpdmVuLCB0aGUgZmlyc3QgZWxlbWVudCBvZiBgY29sbGVjdGlvbmAgaXMgdXNlZCBhcyB0aGUgaW5pdGlhbFxuICAgICAqIHZhbHVlLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIGZvdXIgYXJndW1lbnRzOlxuICAgICAqIChhY2N1bXVsYXRvciwgdmFsdWUsIGluZGV4fGtleSwgY29sbGVjdGlvbikuXG4gICAgICpcbiAgICAgKiBNYW55IGxvZGFzaCBtZXRob2RzIGFyZSBndWFyZGVkIHRvIHdvcmsgYXMgaXRlcmF0ZWVzIGZvciBtZXRob2RzIGxpa2VcbiAgICAgKiBgXy5yZWR1Y2VgLCBgXy5yZWR1Y2VSaWdodGAsIGFuZCBgXy50cmFuc2Zvcm1gLlxuICAgICAqXG4gICAgICogVGhlIGd1YXJkZWQgbWV0aG9kcyBhcmU6XG4gICAgICogYGFzc2lnbmAsIGBkZWZhdWx0c2AsIGBkZWZhdWx0c0RlZXBgLCBgaW5jbHVkZXNgLCBgbWVyZ2VgLCBgb3JkZXJCeWAsXG4gICAgICogYW5kIGBzb3J0QnlgXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0geyp9IFthY2N1bXVsYXRvcl0gVGhlIGluaXRpYWwgdmFsdWUuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGFjY3VtdWxhdGVkIHZhbHVlLlxuICAgICAqIEBzZWUgXy5yZWR1Y2VSaWdodFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnJlZHVjZShbMSwgMl0sIGZ1bmN0aW9uKHN1bSwgbikge1xuICAgICAqICAgcmV0dXJuIHN1bSArIG47XG4gICAgICogfSwgMCk7XG4gICAgICogLy8gPT4gM1xuICAgICAqXG4gICAgICogXy5yZWR1Y2UoeyAnYSc6IDEsICdiJzogMiwgJ2MnOiAxIH0sIGZ1bmN0aW9uKHJlc3VsdCwgdmFsdWUsIGtleSkge1xuICAgICAqICAgKHJlc3VsdFt2YWx1ZV0gfHwgKHJlc3VsdFt2YWx1ZV0gPSBbXSkpLnB1c2goa2V5KTtcbiAgICAgKiAgIHJldHVybiByZXN1bHQ7XG4gICAgICogfSwge30pO1xuICAgICAqIC8vID0+IHsgJzEnOiBbJ2EnLCAnYyddLCAnMic6IFsnYiddIH0gKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAgICAgKi9cbiAgICBmdW5jdGlvbiByZWR1Y2UoY29sbGVjdGlvbiwgaXRlcmF0ZWUsIGFjY3VtdWxhdG9yKSB7XG4gICAgICB2YXIgZnVuYyA9IGlzQXJyYXkoY29sbGVjdGlvbikgPyBhcnJheVJlZHVjZSA6IGJhc2VSZWR1Y2UsXG4gICAgICAgICAgaW5pdEFjY3VtID0gYXJndW1lbnRzLmxlbmd0aCA8IDM7XG5cbiAgICAgIHJldHVybiBmdW5jKGNvbGxlY3Rpb24sIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCA0KSwgYWNjdW11bGF0b3IsIGluaXRBY2N1bSwgYmFzZUVhY2gpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8ucmVkdWNlYCBleGNlcHQgdGhhdCBpdCBpdGVyYXRlcyBvdmVyIGVsZW1lbnRzIG9mXG4gICAgICogYGNvbGxlY3Rpb25gIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7Kn0gW2FjY3VtdWxhdG9yXSBUaGUgaW5pdGlhbCB2YWx1ZS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgYWNjdW11bGF0ZWQgdmFsdWUuXG4gICAgICogQHNlZSBfLnJlZHVjZVxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbWzAsIDFdLCBbMiwgM10sIFs0LCA1XV07XG4gICAgICpcbiAgICAgKiBfLnJlZHVjZVJpZ2h0KGFycmF5LCBmdW5jdGlvbihmbGF0dGVuZWQsIG90aGVyKSB7XG4gICAgICogICByZXR1cm4gZmxhdHRlbmVkLmNvbmNhdChvdGhlcik7XG4gICAgICogfSwgW10pO1xuICAgICAqIC8vID0+IFs0LCA1LCAyLCAzLCAwLCAxXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJlZHVjZVJpZ2h0KGNvbGxlY3Rpb24sIGl0ZXJhdGVlLCBhY2N1bXVsYXRvcikge1xuICAgICAgdmFyIGZ1bmMgPSBpc0FycmF5KGNvbGxlY3Rpb24pID8gYXJyYXlSZWR1Y2VSaWdodCA6IGJhc2VSZWR1Y2UsXG4gICAgICAgICAgaW5pdEFjY3VtID0gYXJndW1lbnRzLmxlbmd0aCA8IDM7XG5cbiAgICAgIHJldHVybiBmdW5jKGNvbGxlY3Rpb24sIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCA0KSwgYWNjdW11bGF0b3IsIGluaXRBY2N1bSwgYmFzZUVhY2hSaWdodCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIG9wcG9zaXRlIG9mIGBfLmZpbHRlcmA7IHRoaXMgbWV0aG9kIHJldHVybnMgdGhlIGVsZW1lbnRzIG9mIGBjb2xsZWN0aW9uYFxuICAgICAqIHRoYXQgYHByZWRpY2F0ZWAgZG9lcyAqKm5vdCoqIHJldHVybiB0cnV0aHkgZm9yLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGZpbHRlcmVkIGFycmF5LlxuICAgICAqIEBzZWUgXy5maWx0ZXJcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAnYWdlJzogMzYsICdhY3RpdmUnOiBmYWxzZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAnYWdlJzogNDAsICdhY3RpdmUnOiB0cnVlIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5yZWplY3QodXNlcnMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuICFvLmFjdGl2ZTsgfSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydmcmVkJ11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzYCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5yZWplY3QodXNlcnMsIHsgJ2FnZSc6IDQwLCAnYWN0aXZlJzogdHJ1ZSB9KTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2Jhcm5leSddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc1Byb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5yZWplY3QodXNlcnMsIFsnYWN0aXZlJywgZmFsc2VdKTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2ZyZWQnXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5yZWplY3QodXNlcnMsICdhY3RpdmUnKTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2Jhcm5leSddXG4gICAgICovXG4gICAgZnVuY3Rpb24gcmVqZWN0KGNvbGxlY3Rpb24sIHByZWRpY2F0ZSkge1xuICAgICAgdmFyIGZ1bmMgPSBpc0FycmF5KGNvbGxlY3Rpb24pID8gYXJyYXlGaWx0ZXIgOiBiYXNlRmlsdGVyO1xuICAgICAgcmV0dXJuIGZ1bmMoY29sbGVjdGlvbiwgbmVnYXRlKGdldEl0ZXJhdGVlKHByZWRpY2F0ZSwgMykpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIGEgcmFuZG9tIGVsZW1lbnQgZnJvbSBgY29sbGVjdGlvbmAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIHNhbXBsZS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmFuZG9tIGVsZW1lbnQuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc2FtcGxlKFsxLCAyLCAzLCA0XSk7XG4gICAgICogLy8gPT4gMlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNhbXBsZShjb2xsZWN0aW9uKSB7XG4gICAgICB2YXIgZnVuYyA9IGlzQXJyYXkoY29sbGVjdGlvbikgPyBhcnJheVNhbXBsZSA6IGJhc2VTYW1wbGU7XG4gICAgICByZXR1cm4gZnVuYyhjb2xsZWN0aW9uKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIGBuYCByYW5kb20gZWxlbWVudHMgYXQgdW5pcXVlIGtleXMgZnJvbSBgY29sbGVjdGlvbmAgdXAgdG8gdGhlXG4gICAgICogc2l6ZSBvZiBgY29sbGVjdGlvbmAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIHNhbXBsZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW249MV0gVGhlIG51bWJlciBvZiBlbGVtZW50cyB0byBzYW1wbGUuXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHJhbmRvbSBlbGVtZW50cy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zYW1wbGVTaXplKFsxLCAyLCAzXSwgMik7XG4gICAgICogLy8gPT4gWzMsIDFdXG4gICAgICpcbiAgICAgKiBfLnNhbXBsZVNpemUoWzEsIDIsIDNdLCA0KTtcbiAgICAgKiAvLyA9PiBbMiwgMywgMV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzYW1wbGVTaXplKGNvbGxlY3Rpb24sIG4sIGd1YXJkKSB7XG4gICAgICBpZiAoKGd1YXJkID8gaXNJdGVyYXRlZUNhbGwoY29sbGVjdGlvbiwgbiwgZ3VhcmQpIDogbiA9PT0gdW5kZWZpbmVkKSkge1xuICAgICAgICBuID0gMTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG4gPSB0b0ludGVnZXIobik7XG4gICAgICB9XG4gICAgICB2YXIgZnVuYyA9IGlzQXJyYXkoY29sbGVjdGlvbikgPyBhcnJheVNhbXBsZVNpemUgOiBiYXNlU2FtcGxlU2l6ZTtcbiAgICAgIHJldHVybiBmdW5jKGNvbGxlY3Rpb24sIG4pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2Ygc2h1ZmZsZWQgdmFsdWVzLCB1c2luZyBhIHZlcnNpb24gb2YgdGhlXG4gICAgICogW0Zpc2hlci1ZYXRlcyBzaHVmZmxlXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9GaXNoZXItWWF0ZXNfc2h1ZmZsZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIHNodWZmbGUuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgc2h1ZmZsZWQgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc2h1ZmZsZShbMSwgMiwgMywgNF0pO1xuICAgICAqIC8vID0+IFs0LCAxLCAzLCAyXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNodWZmbGUoY29sbGVjdGlvbikge1xuICAgICAgdmFyIGZ1bmMgPSBpc0FycmF5KGNvbGxlY3Rpb24pID8gYXJyYXlTaHVmZmxlIDogYmFzZVNodWZmbGU7XG4gICAgICByZXR1cm4gZnVuYyhjb2xsZWN0aW9uKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBzaXplIG9mIGBjb2xsZWN0aW9uYCBieSByZXR1cm5pbmcgaXRzIGxlbmd0aCBmb3IgYXJyYXktbGlrZVxuICAgICAqIHZhbHVlcyBvciB0aGUgbnVtYmVyIG9mIG93biBlbnVtZXJhYmxlIHN0cmluZyBrZXllZCBwcm9wZXJ0aWVzIGZvciBvYmplY3RzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdHxzdHJpbmd9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaW5zcGVjdC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBjb2xsZWN0aW9uIHNpemUuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc2l6ZShbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IDNcbiAgICAgKlxuICAgICAqIF8uc2l6ZSh7ICdhJzogMSwgJ2InOiAyIH0pO1xuICAgICAqIC8vID0+IDJcbiAgICAgKlxuICAgICAqIF8uc2l6ZSgncGViYmxlcycpO1xuICAgICAqIC8vID0+IDdcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzaXplKGNvbGxlY3Rpb24pIHtcbiAgICAgIGlmIChjb2xsZWN0aW9uID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgICB9XG4gICAgICBpZiAoaXNBcnJheUxpa2UoY29sbGVjdGlvbikpIHtcbiAgICAgICAgcmV0dXJuIGlzU3RyaW5nKGNvbGxlY3Rpb24pID8gc3RyaW5nU2l6ZShjb2xsZWN0aW9uKSA6IGNvbGxlY3Rpb24ubGVuZ3RoO1xuICAgICAgfVxuICAgICAgdmFyIHRhZyA9IGdldFRhZyhjb2xsZWN0aW9uKTtcbiAgICAgIGlmICh0YWcgPT0gbWFwVGFnIHx8IHRhZyA9PSBzZXRUYWcpIHtcbiAgICAgICAgcmV0dXJuIGNvbGxlY3Rpb24uc2l6ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlS2V5cyhjb2xsZWN0aW9uKS5sZW5ndGg7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGBwcmVkaWNhdGVgIHJldHVybnMgdHJ1dGh5IGZvciAqKmFueSoqIGVsZW1lbnQgb2YgYGNvbGxlY3Rpb25gLlxuICAgICAqIEl0ZXJhdGlvbiBpcyBzdG9wcGVkIG9uY2UgYHByZWRpY2F0ZWAgcmV0dXJucyB0cnV0aHkuIFRoZSBwcmVkaWNhdGUgaXNcbiAgICAgKiBpbnZva2VkIHdpdGggdGhyZWUgYXJndW1lbnRzOiAodmFsdWUsIGluZGV4fGtleSwgY29sbGVjdGlvbikuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW55IGVsZW1lbnQgcGFzc2VzIHRoZSBwcmVkaWNhdGUgY2hlY2ssXG4gICAgICogIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zb21lKFtudWxsLCAwLCAneWVzJywgZmFsc2VdLCBCb29sZWFuKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICdhY3RpdmUnOiB0cnVlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICdhY3RpdmUnOiBmYWxzZSB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzYCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5zb21lKHVzZXJzLCB7ICd1c2VyJzogJ2Jhcm5leScsICdhY3RpdmUnOiBmYWxzZSB9KTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uc29tZSh1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uc29tZSh1c2VycywgJ2FjdGl2ZScpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzb21lKGNvbGxlY3Rpb24sIHByZWRpY2F0ZSwgZ3VhcmQpIHtcbiAgICAgIHZhciBmdW5jID0gaXNBcnJheShjb2xsZWN0aW9uKSA/IGFycmF5U29tZSA6IGJhc2VTb21lO1xuICAgICAgaWYgKGd1YXJkICYmIGlzSXRlcmF0ZWVDYWxsKGNvbGxlY3Rpb24sIHByZWRpY2F0ZSwgZ3VhcmQpKSB7XG4gICAgICAgIHByZWRpY2F0ZSA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmdW5jKGNvbGxlY3Rpb24sIGdldEl0ZXJhdGVlKHByZWRpY2F0ZSwgMykpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgZWxlbWVudHMsIHNvcnRlZCBpbiBhc2NlbmRpbmcgb3JkZXIgYnkgdGhlIHJlc3VsdHMgb2ZcbiAgICAgKiBydW5uaW5nIGVhY2ggZWxlbWVudCBpbiBhIGNvbGxlY3Rpb24gdGhydSBlYWNoIGl0ZXJhdGVlLiBUaGlzIG1ldGhvZFxuICAgICAqIHBlcmZvcm1zIGEgc3RhYmxlIHNvcnQsIHRoYXQgaXMsIGl0IHByZXNlcnZlcyB0aGUgb3JpZ2luYWwgc29ydCBvcmRlciBvZlxuICAgICAqIGVxdWFsIGVsZW1lbnRzLiBUaGUgaXRlcmF0ZWVzIGFyZSBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OiAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHsuLi4oRnVuY3Rpb258RnVuY3Rpb25bXSl9IFtpdGVyYXRlZXM9W18uaWRlbnRpdHldXVxuICAgICAqICBUaGUgaXRlcmF0ZWVzIHRvIHNvcnQgYnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgc29ydGVkIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICdhZ2UnOiA0OCB9LFxuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAnYWdlJzogMzYgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgJ2FnZSc6IDQwIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICdhZ2UnOiAzNCB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8uc29ydEJ5KHVzZXJzLCBbZnVuY3Rpb24obykgeyByZXR1cm4gby51c2VyOyB9XSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgW1snYmFybmV5JywgMzZdLCBbJ2Jhcm5leScsIDM0XSwgWydmcmVkJywgNDhdLCBbJ2ZyZWQnLCA0MF1dXG4gICAgICpcbiAgICAgKiBfLnNvcnRCeSh1c2VycywgWyd1c2VyJywgJ2FnZSddKTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbWydiYXJuZXknLCAzNF0sIFsnYmFybmV5JywgMzZdLCBbJ2ZyZWQnLCA0MF0sIFsnZnJlZCcsIDQ4XV1cbiAgICAgKi9cbiAgICB2YXIgc29ydEJ5ID0gYmFzZVJlc3QoZnVuY3Rpb24oY29sbGVjdGlvbiwgaXRlcmF0ZWVzKSB7XG4gICAgICBpZiAoY29sbGVjdGlvbiA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIHZhciBsZW5ndGggPSBpdGVyYXRlZXMubGVuZ3RoO1xuICAgICAgaWYgKGxlbmd0aCA+IDEgJiYgaXNJdGVyYXRlZUNhbGwoY29sbGVjdGlvbiwgaXRlcmF0ZWVzWzBdLCBpdGVyYXRlZXNbMV0pKSB7XG4gICAgICAgIGl0ZXJhdGVlcyA9IFtdO1xuICAgICAgfSBlbHNlIGlmIChsZW5ndGggPiAyICYmIGlzSXRlcmF0ZWVDYWxsKGl0ZXJhdGVlc1swXSwgaXRlcmF0ZWVzWzFdLCBpdGVyYXRlZXNbMl0pKSB7XG4gICAgICAgIGl0ZXJhdGVlcyA9IFtpdGVyYXRlZXNbMF1dO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VPcmRlckJ5KGNvbGxlY3Rpb24sIGJhc2VGbGF0dGVuKGl0ZXJhdGVlcywgMSksIFtdKTtcbiAgICB9KTtcblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIHRpbWVzdGFtcCBvZiB0aGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0aGF0IGhhdmUgZWxhcHNlZCBzaW5jZVxuICAgICAqIHRoZSBVbml4IGVwb2NoICgxIEphbnVhcnkgMTk3MCAwMDowMDowMCBVVEMpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuNC4wXG4gICAgICogQGNhdGVnb3J5IERhdGVcbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSB0aW1lc3RhbXAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZGVmZXIoZnVuY3Rpb24oc3RhbXApIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKF8ubm93KCkgLSBzdGFtcCk7XG4gICAgICogfSwgXy5ub3coKSk7XG4gICAgICogLy8gPT4gTG9ncyB0aGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyBpdCB0b29rIGZvciB0aGUgZGVmZXJyZWQgaW52b2NhdGlvbi5cbiAgICAgKi9cbiAgICB2YXIgbm93ID0gY3R4Tm93IHx8IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHJvb3QuRGF0ZS5ub3coKTtcbiAgICB9O1xuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogVGhlIG9wcG9zaXRlIG9mIGBfLmJlZm9yZWA7IHRoaXMgbWV0aG9kIGNyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXNcbiAgICAgKiBgZnVuY2Agb25jZSBpdCdzIGNhbGxlZCBgbmAgb3IgbW9yZSB0aW1lcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBuIFRoZSBudW1iZXIgb2YgY2FsbHMgYmVmb3JlIGBmdW5jYCBpcyBpbnZva2VkLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHJlc3RyaWN0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHJlc3RyaWN0ZWQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBzYXZlcyA9IFsncHJvZmlsZScsICdzZXR0aW5ncyddO1xuICAgICAqXG4gICAgICogdmFyIGRvbmUgPSBfLmFmdGVyKHNhdmVzLmxlbmd0aCwgZnVuY3Rpb24oKSB7XG4gICAgICogICBjb25zb2xlLmxvZygnZG9uZSBzYXZpbmchJyk7XG4gICAgICogfSk7XG4gICAgICpcbiAgICAgKiBfLmZvckVhY2goc2F2ZXMsIGZ1bmN0aW9uKHR5cGUpIHtcbiAgICAgKiAgIGFzeW5jU2F2ZSh7ICd0eXBlJzogdHlwZSwgJ2NvbXBsZXRlJzogZG9uZSB9KTtcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiBMb2dzICdkb25lIHNhdmluZyEnIGFmdGVyIHRoZSB0d28gYXN5bmMgc2F2ZXMgaGF2ZSBjb21wbGV0ZWQuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYWZ0ZXIobiwgZnVuYykge1xuICAgICAgaWYgKHR5cGVvZiBmdW5jICE9ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihGVU5DX0VSUk9SX1RFWFQpO1xuICAgICAgfVxuICAgICAgbiA9IHRvSW50ZWdlcihuKTtcbiAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKC0tbiA8IDEpIHtcbiAgICAgICAgICByZXR1cm4gZnVuYy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXMgYGZ1bmNgLCB3aXRoIHVwIHRvIGBuYCBhcmd1bWVudHMsXG4gICAgICogaWdub3JpbmcgYW55IGFkZGl0aW9uYWwgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY2FwIGFyZ3VtZW50cyBmb3IuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtuPWZ1bmMubGVuZ3RoXSBUaGUgYXJpdHkgY2FwLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgY2FwcGVkIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLm1hcChbJzYnLCAnOCcsICcxMCddLCBfLmFyeShwYXJzZUludCwgMSkpO1xuICAgICAqIC8vID0+IFs2LCA4LCAxMF1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBhcnkoZnVuYywgbiwgZ3VhcmQpIHtcbiAgICAgIG4gPSBndWFyZCA/IHVuZGVmaW5lZCA6IG47XG4gICAgICBuID0gKGZ1bmMgJiYgbiA9PSBudWxsKSA/IGZ1bmMubGVuZ3RoIDogbjtcbiAgICAgIHJldHVybiBjcmVhdGVXcmFwKGZ1bmMsIFdSQVBfQVJZX0ZMQUcsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgbik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBgZnVuY2AsIHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nIGFuZCBhcmd1bWVudHNcbiAgICAgKiBvZiB0aGUgY3JlYXRlZCBmdW5jdGlvbiwgd2hpbGUgaXQncyBjYWxsZWQgbGVzcyB0aGFuIGBuYCB0aW1lcy4gU3Vic2VxdWVudFxuICAgICAqIGNhbGxzIHRvIHRoZSBjcmVhdGVkIGZ1bmN0aW9uIHJldHVybiB0aGUgcmVzdWx0IG9mIHRoZSBsYXN0IGBmdW5jYCBpbnZvY2F0aW9uLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG4gVGhlIG51bWJlciBvZiBjYWxscyBhdCB3aGljaCBgZnVuY2AgaXMgbm8gbG9uZ2VyIGludm9rZWQuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gcmVzdHJpY3QuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgcmVzdHJpY3RlZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogalF1ZXJ5KGVsZW1lbnQpLm9uKCdjbGljaycsIF8uYmVmb3JlKDUsIGFkZENvbnRhY3RUb0xpc3QpKTtcbiAgICAgKiAvLyA9PiBBbGxvd3MgYWRkaW5nIHVwIHRvIDQgY29udGFjdHMgdG8gdGhlIGxpc3QuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmVmb3JlKG4sIGZ1bmMpIHtcbiAgICAgIHZhciByZXN1bHQ7XG4gICAgICBpZiAodHlwZW9mIGZ1bmMgIT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gICAgICB9XG4gICAgICBuID0gdG9JbnRlZ2VyKG4pO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAoLS1uID4gMCkge1xuICAgICAgICAgIHJlc3VsdCA9IGZ1bmMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobiA8PSAxKSB7XG4gICAgICAgICAgZnVuYyA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGBmdW5jYCB3aXRoIHRoZSBgdGhpc2AgYmluZGluZyBvZiBgdGhpc0FyZ2BcbiAgICAgKiBhbmQgYHBhcnRpYWxzYCBwcmVwZW5kZWQgdG8gdGhlIGFyZ3VtZW50cyBpdCByZWNlaXZlcy5cbiAgICAgKlxuICAgICAqIFRoZSBgXy5iaW5kLnBsYWNlaG9sZGVyYCB2YWx1ZSwgd2hpY2ggZGVmYXVsdHMgdG8gYF9gIGluIG1vbm9saXRoaWMgYnVpbGRzLFxuICAgICAqIG1heSBiZSB1c2VkIGFzIGEgcGxhY2Vob2xkZXIgZm9yIHBhcnRpYWxseSBhcHBsaWVkIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBVbmxpa2UgbmF0aXZlIGBGdW5jdGlvbiNiaW5kYCwgdGhpcyBtZXRob2QgZG9lc24ndCBzZXQgdGhlIFwibGVuZ3RoXCJcbiAgICAgKiBwcm9wZXJ0eSBvZiBib3VuZCBmdW5jdGlvbnMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBiaW5kLlxuICAgICAqIEBwYXJhbSB7Kn0gdGhpc0FyZyBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGZ1bmNgLlxuICAgICAqIEBwYXJhbSB7Li4uKn0gW3BhcnRpYWxzXSBUaGUgYXJndW1lbnRzIHRvIGJlIHBhcnRpYWxseSBhcHBsaWVkLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGJvdW5kIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBncmVldChncmVldGluZywgcHVuY3R1YXRpb24pIHtcbiAgICAgKiAgIHJldHVybiBncmVldGluZyArICcgJyArIHRoaXMudXNlciArIHB1bmN0dWF0aW9uO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICd1c2VyJzogJ2ZyZWQnIH07XG4gICAgICpcbiAgICAgKiB2YXIgYm91bmQgPSBfLmJpbmQoZ3JlZXQsIG9iamVjdCwgJ2hpJyk7XG4gICAgICogYm91bmQoJyEnKTtcbiAgICAgKiAvLyA9PiAnaGkgZnJlZCEnXG4gICAgICpcbiAgICAgKiAvLyBCb3VuZCB3aXRoIHBsYWNlaG9sZGVycy5cbiAgICAgKiB2YXIgYm91bmQgPSBfLmJpbmQoZ3JlZXQsIG9iamVjdCwgXywgJyEnKTtcbiAgICAgKiBib3VuZCgnaGknKTtcbiAgICAgKiAvLyA9PiAnaGkgZnJlZCEnXG4gICAgICovXG4gICAgdmFyIGJpbmQgPSBiYXNlUmVzdChmdW5jdGlvbihmdW5jLCB0aGlzQXJnLCBwYXJ0aWFscykge1xuICAgICAgdmFyIGJpdG1hc2sgPSBXUkFQX0JJTkRfRkxBRztcbiAgICAgIGlmIChwYXJ0aWFscy5sZW5ndGgpIHtcbiAgICAgICAgdmFyIGhvbGRlcnMgPSByZXBsYWNlSG9sZGVycyhwYXJ0aWFscywgZ2V0SG9sZGVyKGJpbmQpKTtcbiAgICAgICAgYml0bWFzayB8PSBXUkFQX1BBUlRJQUxfRkxBRztcbiAgICAgIH1cbiAgICAgIHJldHVybiBjcmVhdGVXcmFwKGZ1bmMsIGJpdG1hc2ssIHRoaXNBcmcsIHBhcnRpYWxzLCBob2xkZXJzKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXMgdGhlIG1ldGhvZCBhdCBgb2JqZWN0W2tleV1gIHdpdGggYHBhcnRpYWxzYFxuICAgICAqIHByZXBlbmRlZCB0byB0aGUgYXJndW1lbnRzIGl0IHJlY2VpdmVzLlxuICAgICAqXG4gICAgICogVGhpcyBtZXRob2QgZGlmZmVycyBmcm9tIGBfLmJpbmRgIGJ5IGFsbG93aW5nIGJvdW5kIGZ1bmN0aW9ucyB0byByZWZlcmVuY2VcbiAgICAgKiBtZXRob2RzIHRoYXQgbWF5IGJlIHJlZGVmaW5lZCBvciBkb24ndCB5ZXQgZXhpc3QuIFNlZVxuICAgICAqIFtQZXRlciBNaWNoYXV4J3MgYXJ0aWNsZV0oaHR0cDovL3BldGVyLm1pY2hhdXguY2EvYXJ0aWNsZXMvbGF6eS1mdW5jdGlvbi1kZWZpbml0aW9uLXBhdHRlcm4pXG4gICAgICogZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgKlxuICAgICAqIFRoZSBgXy5iaW5kS2V5LnBsYWNlaG9sZGVyYCB2YWx1ZSwgd2hpY2ggZGVmYXVsdHMgdG8gYF9gIGluIG1vbm9saXRoaWNcbiAgICAgKiBidWlsZHMsIG1heSBiZSB1c2VkIGFzIGEgcGxhY2Vob2xkZXIgZm9yIHBhcnRpYWxseSBhcHBsaWVkIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEwLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaW52b2tlIHRoZSBtZXRob2Qgb24uXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBtZXRob2QuXG4gICAgICogQHBhcmFtIHsuLi4qfSBbcGFydGlhbHNdIFRoZSBhcmd1bWVudHMgdG8gYmUgcGFydGlhbGx5IGFwcGxpZWQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYm91bmQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7XG4gICAgICogICAndXNlcic6ICdmcmVkJyxcbiAgICAgKiAgICdncmVldCc6IGZ1bmN0aW9uKGdyZWV0aW5nLCBwdW5jdHVhdGlvbikge1xuICAgICAqICAgICByZXR1cm4gZ3JlZXRpbmcgKyAnICcgKyB0aGlzLnVzZXIgKyBwdW5jdHVhdGlvbjtcbiAgICAgKiAgIH1cbiAgICAgKiB9O1xuICAgICAqXG4gICAgICogdmFyIGJvdW5kID0gXy5iaW5kS2V5KG9iamVjdCwgJ2dyZWV0JywgJ2hpJyk7XG4gICAgICogYm91bmQoJyEnKTtcbiAgICAgKiAvLyA9PiAnaGkgZnJlZCEnXG4gICAgICpcbiAgICAgKiBvYmplY3QuZ3JlZXQgPSBmdW5jdGlvbihncmVldGluZywgcHVuY3R1YXRpb24pIHtcbiAgICAgKiAgIHJldHVybiBncmVldGluZyArICd5YSAnICsgdGhpcy51c2VyICsgcHVuY3R1YXRpb247XG4gICAgICogfTtcbiAgICAgKlxuICAgICAqIGJvdW5kKCchJyk7XG4gICAgICogLy8gPT4gJ2hpeWEgZnJlZCEnXG4gICAgICpcbiAgICAgKiAvLyBCb3VuZCB3aXRoIHBsYWNlaG9sZGVycy5cbiAgICAgKiB2YXIgYm91bmQgPSBfLmJpbmRLZXkob2JqZWN0LCAnZ3JlZXQnLCBfLCAnIScpO1xuICAgICAqIGJvdW5kKCdoaScpO1xuICAgICAqIC8vID0+ICdoaXlhIGZyZWQhJ1xuICAgICAqL1xuICAgIHZhciBiaW5kS2V5ID0gYmFzZVJlc3QoZnVuY3Rpb24ob2JqZWN0LCBrZXksIHBhcnRpYWxzKSB7XG4gICAgICB2YXIgYml0bWFzayA9IFdSQVBfQklORF9GTEFHIHwgV1JBUF9CSU5EX0tFWV9GTEFHO1xuICAgICAgaWYgKHBhcnRpYWxzLmxlbmd0aCkge1xuICAgICAgICB2YXIgaG9sZGVycyA9IHJlcGxhY2VIb2xkZXJzKHBhcnRpYWxzLCBnZXRIb2xkZXIoYmluZEtleSkpO1xuICAgICAgICBiaXRtYXNrIHw9IFdSQVBfUEFSVElBTF9GTEFHO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGNyZWF0ZVdyYXAoa2V5LCBiaXRtYXNrLCBvYmplY3QsIHBhcnRpYWxzLCBob2xkZXJzKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGFjY2VwdHMgYXJndW1lbnRzIG9mIGBmdW5jYCBhbmQgZWl0aGVyIGludm9rZXNcbiAgICAgKiBgZnVuY2AgcmV0dXJuaW5nIGl0cyByZXN1bHQsIGlmIGF0IGxlYXN0IGBhcml0eWAgbnVtYmVyIG9mIGFyZ3VtZW50cyBoYXZlXG4gICAgICogYmVlbiBwcm92aWRlZCwgb3IgcmV0dXJucyBhIGZ1bmN0aW9uIHRoYXQgYWNjZXB0cyB0aGUgcmVtYWluaW5nIGBmdW5jYFxuICAgICAqIGFyZ3VtZW50cywgYW5kIHNvIG9uLiBUaGUgYXJpdHkgb2YgYGZ1bmNgIG1heSBiZSBzcGVjaWZpZWQgaWYgYGZ1bmMubGVuZ3RoYFxuICAgICAqIGlzIG5vdCBzdWZmaWNpZW50LlxuICAgICAqXG4gICAgICogVGhlIGBfLmN1cnJ5LnBsYWNlaG9sZGVyYCB2YWx1ZSwgd2hpY2ggZGVmYXVsdHMgdG8gYF9gIGluIG1vbm9saXRoaWMgYnVpbGRzLFxuICAgICAqIG1heSBiZSB1c2VkIGFzIGEgcGxhY2Vob2xkZXIgZm9yIHByb3ZpZGVkIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBkb2Vzbid0IHNldCB0aGUgXCJsZW5ndGhcIiBwcm9wZXJ0eSBvZiBjdXJyaWVkIGZ1bmN0aW9ucy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAyLjAuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGN1cnJ5LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbYXJpdHk9ZnVuYy5sZW5ndGhdIFRoZSBhcml0eSBvZiBgZnVuY2AuXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBjdXJyaWVkIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYWJjID0gZnVuY3Rpb24oYSwgYiwgYykge1xuICAgICAqICAgcmV0dXJuIFthLCBiLCBjXTtcbiAgICAgKiB9O1xuICAgICAqXG4gICAgICogdmFyIGN1cnJpZWQgPSBfLmN1cnJ5KGFiYyk7XG4gICAgICpcbiAgICAgKiBjdXJyaWVkKDEpKDIpKDMpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqXG4gICAgICogY3VycmllZCgxLCAyKSgzKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKlxuICAgICAqIGN1cnJpZWQoMSwgMiwgMyk7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdXG4gICAgICpcbiAgICAgKiAvLyBDdXJyaWVkIHdpdGggcGxhY2Vob2xkZXJzLlxuICAgICAqIGN1cnJpZWQoMSkoXywgMykoMik7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3VycnkoZnVuYywgYXJpdHksIGd1YXJkKSB7XG4gICAgICBhcml0eSA9IGd1YXJkID8gdW5kZWZpbmVkIDogYXJpdHk7XG4gICAgICB2YXIgcmVzdWx0ID0gY3JlYXRlV3JhcChmdW5jLCBXUkFQX0NVUlJZX0ZMQUcsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBhcml0eSk7XG4gICAgICByZXN1bHQucGxhY2Vob2xkZXIgPSBjdXJyeS5wbGFjZWhvbGRlcjtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5jdXJyeWAgZXhjZXB0IHRoYXQgYXJndW1lbnRzIGFyZSBhcHBsaWVkIHRvIGBmdW5jYFxuICAgICAqIGluIHRoZSBtYW5uZXIgb2YgYF8ucGFydGlhbFJpZ2h0YCBpbnN0ZWFkIG9mIGBfLnBhcnRpYWxgLlxuICAgICAqXG4gICAgICogVGhlIGBfLmN1cnJ5UmlnaHQucGxhY2Vob2xkZXJgIHZhbHVlLCB3aGljaCBkZWZhdWx0cyB0byBgX2AgaW4gbW9ub2xpdGhpY1xuICAgICAqIGJ1aWxkcywgbWF5IGJlIHVzZWQgYXMgYSBwbGFjZWhvbGRlciBmb3IgcHJvdmlkZWQgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGRvZXNuJ3Qgc2V0IHRoZSBcImxlbmd0aFwiIHByb3BlcnR5IG9mIGN1cnJpZWQgZnVuY3Rpb25zLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY3VycnkuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFthcml0eT1mdW5jLmxlbmd0aF0gVGhlIGFyaXR5IG9mIGBmdW5jYC5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGN1cnJpZWQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhYmMgPSBmdW5jdGlvbihhLCBiLCBjKSB7XG4gICAgICogICByZXR1cm4gW2EsIGIsIGNdO1xuICAgICAqIH07XG4gICAgICpcbiAgICAgKiB2YXIgY3VycmllZCA9IF8uY3VycnlSaWdodChhYmMpO1xuICAgICAqXG4gICAgICogY3VycmllZCgzKSgyKSgxKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKlxuICAgICAqIGN1cnJpZWQoMiwgMykoMSk7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdXG4gICAgICpcbiAgICAgKiBjdXJyaWVkKDEsIDIsIDMpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqXG4gICAgICogLy8gQ3VycmllZCB3aXRoIHBsYWNlaG9sZGVycy5cbiAgICAgKiBjdXJyaWVkKDMpKDEsIF8pKDIpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGN1cnJ5UmlnaHQoZnVuYywgYXJpdHksIGd1YXJkKSB7XG4gICAgICBhcml0eSA9IGd1YXJkID8gdW5kZWZpbmVkIDogYXJpdHk7XG4gICAgICB2YXIgcmVzdWx0ID0gY3JlYXRlV3JhcChmdW5jLCBXUkFQX0NVUlJZX1JJR0hUX0ZMQUcsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBhcml0eSk7XG4gICAgICByZXN1bHQucGxhY2Vob2xkZXIgPSBjdXJyeVJpZ2h0LnBsYWNlaG9sZGVyO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZGVib3VuY2VkIGZ1bmN0aW9uIHRoYXQgZGVsYXlzIGludm9raW5nIGBmdW5jYCB1bnRpbCBhZnRlciBgd2FpdGBcbiAgICAgKiBtaWxsaXNlY29uZHMgaGF2ZSBlbGFwc2VkIHNpbmNlIHRoZSBsYXN0IHRpbWUgdGhlIGRlYm91bmNlZCBmdW5jdGlvbiB3YXNcbiAgICAgKiBpbnZva2VkLiBUaGUgZGVib3VuY2VkIGZ1bmN0aW9uIGNvbWVzIHdpdGggYSBgY2FuY2VsYCBtZXRob2QgdG8gY2FuY2VsXG4gICAgICogZGVsYXllZCBgZnVuY2AgaW52b2NhdGlvbnMgYW5kIGEgYGZsdXNoYCBtZXRob2QgdG8gaW1tZWRpYXRlbHkgaW52b2tlIHRoZW0uXG4gICAgICogUHJvdmlkZSBgb3B0aW9uc2AgdG8gaW5kaWNhdGUgd2hldGhlciBgZnVuY2Agc2hvdWxkIGJlIGludm9rZWQgb24gdGhlXG4gICAgICogbGVhZGluZyBhbmQvb3IgdHJhaWxpbmcgZWRnZSBvZiB0aGUgYHdhaXRgIHRpbWVvdXQuIFRoZSBgZnVuY2AgaXMgaW52b2tlZFxuICAgICAqIHdpdGggdGhlIGxhc3QgYXJndW1lbnRzIHByb3ZpZGVkIHRvIHRoZSBkZWJvdW5jZWQgZnVuY3Rpb24uIFN1YnNlcXVlbnRcbiAgICAgKiBjYWxscyB0byB0aGUgZGVib3VuY2VkIGZ1bmN0aW9uIHJldHVybiB0aGUgcmVzdWx0IG9mIHRoZSBsYXN0IGBmdW5jYFxuICAgICAqIGludm9jYXRpb24uXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogSWYgYGxlYWRpbmdgIGFuZCBgdHJhaWxpbmdgIG9wdGlvbnMgYXJlIGB0cnVlYCwgYGZ1bmNgIGlzXG4gICAgICogaW52b2tlZCBvbiB0aGUgdHJhaWxpbmcgZWRnZSBvZiB0aGUgdGltZW91dCBvbmx5IGlmIHRoZSBkZWJvdW5jZWQgZnVuY3Rpb25cbiAgICAgKiBpcyBpbnZva2VkIG1vcmUgdGhhbiBvbmNlIGR1cmluZyB0aGUgYHdhaXRgIHRpbWVvdXQuXG4gICAgICpcbiAgICAgKiBJZiBgd2FpdGAgaXMgYDBgIGFuZCBgbGVhZGluZ2AgaXMgYGZhbHNlYCwgYGZ1bmNgIGludm9jYXRpb24gaXMgZGVmZXJyZWRcbiAgICAgKiB1bnRpbCB0byB0aGUgbmV4dCB0aWNrLCBzaW1pbGFyIHRvIGBzZXRUaW1lb3V0YCB3aXRoIGEgdGltZW91dCBvZiBgMGAuXG4gICAgICpcbiAgICAgKiBTZWUgW0RhdmlkIENvcmJhY2hvJ3MgYXJ0aWNsZV0oaHR0cHM6Ly9jc3MtdHJpY2tzLmNvbS9kZWJvdW5jaW5nLXRocm90dGxpbmctZXhwbGFpbmVkLWV4YW1wbGVzLylcbiAgICAgKiBmb3IgZGV0YWlscyBvdmVyIHRoZSBkaWZmZXJlbmNlcyBiZXR3ZWVuIGBfLmRlYm91bmNlYCBhbmQgYF8udGhyb3R0bGVgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gZGVib3VuY2UuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFt3YWl0PTBdIFRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRvIGRlbGF5LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9ucz17fV0gVGhlIG9wdGlvbnMgb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMubGVhZGluZz1mYWxzZV1cbiAgICAgKiAgU3BlY2lmeSBpbnZva2luZyBvbiB0aGUgbGVhZGluZyBlZGdlIG9mIHRoZSB0aW1lb3V0LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0aW9ucy5tYXhXYWl0XVxuICAgICAqICBUaGUgbWF4aW11bSB0aW1lIGBmdW5jYCBpcyBhbGxvd2VkIHRvIGJlIGRlbGF5ZWQgYmVmb3JlIGl0J3MgaW52b2tlZC5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLnRyYWlsaW5nPXRydWVdXG4gICAgICogIFNwZWNpZnkgaW52b2tpbmcgb24gdGhlIHRyYWlsaW5nIGVkZ2Ugb2YgdGhlIHRpbWVvdXQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZGVib3VuY2VkIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiAvLyBBdm9pZCBjb3N0bHkgY2FsY3VsYXRpb25zIHdoaWxlIHRoZSB3aW5kb3cgc2l6ZSBpcyBpbiBmbHV4LlxuICAgICAqIGpRdWVyeSh3aW5kb3cpLm9uKCdyZXNpemUnLCBfLmRlYm91bmNlKGNhbGN1bGF0ZUxheW91dCwgMTUwKSk7XG4gICAgICpcbiAgICAgKiAvLyBJbnZva2UgYHNlbmRNYWlsYCB3aGVuIGNsaWNrZWQsIGRlYm91bmNpbmcgc3Vic2VxdWVudCBjYWxscy5cbiAgICAgKiBqUXVlcnkoZWxlbWVudCkub24oJ2NsaWNrJywgXy5kZWJvdW5jZShzZW5kTWFpbCwgMzAwLCB7XG4gICAgICogICAnbGVhZGluZyc6IHRydWUsXG4gICAgICogICAndHJhaWxpbmcnOiBmYWxzZVxuICAgICAqIH0pKTtcbiAgICAgKlxuICAgICAqIC8vIEVuc3VyZSBgYmF0Y2hMb2dgIGlzIGludm9rZWQgb25jZSBhZnRlciAxIHNlY29uZCBvZiBkZWJvdW5jZWQgY2FsbHMuXG4gICAgICogdmFyIGRlYm91bmNlZCA9IF8uZGVib3VuY2UoYmF0Y2hMb2csIDI1MCwgeyAnbWF4V2FpdCc6IDEwMDAgfSk7XG4gICAgICogdmFyIHNvdXJjZSA9IG5ldyBFdmVudFNvdXJjZSgnL3N0cmVhbScpO1xuICAgICAqIGpRdWVyeShzb3VyY2UpLm9uKCdtZXNzYWdlJywgZGVib3VuY2VkKTtcbiAgICAgKlxuICAgICAqIC8vIENhbmNlbCB0aGUgdHJhaWxpbmcgZGVib3VuY2VkIGludm9jYXRpb24uXG4gICAgICogalF1ZXJ5KHdpbmRvdykub24oJ3BvcHN0YXRlJywgZGVib3VuY2VkLmNhbmNlbCk7XG4gICAgICovXG4gICAgZnVuY3Rpb24gZGVib3VuY2UoZnVuYywgd2FpdCwgb3B0aW9ucykge1xuICAgICAgdmFyIGxhc3RBcmdzLFxuICAgICAgICAgIGxhc3RUaGlzLFxuICAgICAgICAgIG1heFdhaXQsXG4gICAgICAgICAgcmVzdWx0LFxuICAgICAgICAgIHRpbWVySWQsXG4gICAgICAgICAgbGFzdENhbGxUaW1lLFxuICAgICAgICAgIGxhc3RJbnZva2VUaW1lID0gMCxcbiAgICAgICAgICBsZWFkaW5nID0gZmFsc2UsXG4gICAgICAgICAgbWF4aW5nID0gZmFsc2UsXG4gICAgICAgICAgdHJhaWxpbmcgPSB0cnVlO1xuXG4gICAgICBpZiAodHlwZW9mIGZ1bmMgIT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gICAgICB9XG4gICAgICB3YWl0ID0gdG9OdW1iZXIod2FpdCkgfHwgMDtcbiAgICAgIGlmIChpc09iamVjdChvcHRpb25zKSkge1xuICAgICAgICBsZWFkaW5nID0gISFvcHRpb25zLmxlYWRpbmc7XG4gICAgICAgIG1heGluZyA9ICdtYXhXYWl0JyBpbiBvcHRpb25zO1xuICAgICAgICBtYXhXYWl0ID0gbWF4aW5nID8gbmF0aXZlTWF4KHRvTnVtYmVyKG9wdGlvbnMubWF4V2FpdCkgfHwgMCwgd2FpdCkgOiBtYXhXYWl0O1xuICAgICAgICB0cmFpbGluZyA9ICd0cmFpbGluZycgaW4gb3B0aW9ucyA/ICEhb3B0aW9ucy50cmFpbGluZyA6IHRyYWlsaW5nO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBpbnZva2VGdW5jKHRpbWUpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBsYXN0QXJncyxcbiAgICAgICAgICAgIHRoaXNBcmcgPSBsYXN0VGhpcztcblxuICAgICAgICBsYXN0QXJncyA9IGxhc3RUaGlzID0gdW5kZWZpbmVkO1xuICAgICAgICBsYXN0SW52b2tlVGltZSA9IHRpbWU7XG4gICAgICAgIHJlc3VsdCA9IGZ1bmMuYXBwbHkodGhpc0FyZywgYXJncyk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGxlYWRpbmdFZGdlKHRpbWUpIHtcbiAgICAgICAgLy8gUmVzZXQgYW55IGBtYXhXYWl0YCB0aW1lci5cbiAgICAgICAgbGFzdEludm9rZVRpbWUgPSB0aW1lO1xuICAgICAgICAvLyBTdGFydCB0aGUgdGltZXIgZm9yIHRoZSB0cmFpbGluZyBlZGdlLlxuICAgICAgICB0aW1lcklkID0gc2V0VGltZW91dCh0aW1lckV4cGlyZWQsIHdhaXQpO1xuICAgICAgICAvLyBJbnZva2UgdGhlIGxlYWRpbmcgZWRnZS5cbiAgICAgICAgcmV0dXJuIGxlYWRpbmcgPyBpbnZva2VGdW5jKHRpbWUpIDogcmVzdWx0O1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiByZW1haW5pbmdXYWl0KHRpbWUpIHtcbiAgICAgICAgdmFyIHRpbWVTaW5jZUxhc3RDYWxsID0gdGltZSAtIGxhc3RDYWxsVGltZSxcbiAgICAgICAgICAgIHRpbWVTaW5jZUxhc3RJbnZva2UgPSB0aW1lIC0gbGFzdEludm9rZVRpbWUsXG4gICAgICAgICAgICB0aW1lV2FpdGluZyA9IHdhaXQgLSB0aW1lU2luY2VMYXN0Q2FsbDtcblxuICAgICAgICByZXR1cm4gbWF4aW5nXG4gICAgICAgICAgPyBuYXRpdmVNaW4odGltZVdhaXRpbmcsIG1heFdhaXQgLSB0aW1lU2luY2VMYXN0SW52b2tlKVxuICAgICAgICAgIDogdGltZVdhaXRpbmc7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIHNob3VsZEludm9rZSh0aW1lKSB7XG4gICAgICAgIHZhciB0aW1lU2luY2VMYXN0Q2FsbCA9IHRpbWUgLSBsYXN0Q2FsbFRpbWUsXG4gICAgICAgICAgICB0aW1lU2luY2VMYXN0SW52b2tlID0gdGltZSAtIGxhc3RJbnZva2VUaW1lO1xuXG4gICAgICAgIC8vIEVpdGhlciB0aGlzIGlzIHRoZSBmaXJzdCBjYWxsLCBhY3Rpdml0eSBoYXMgc3RvcHBlZCBhbmQgd2UncmUgYXQgdGhlXG4gICAgICAgIC8vIHRyYWlsaW5nIGVkZ2UsIHRoZSBzeXN0ZW0gdGltZSBoYXMgZ29uZSBiYWNrd2FyZHMgYW5kIHdlJ3JlIHRyZWF0aW5nXG4gICAgICAgIC8vIGl0IGFzIHRoZSB0cmFpbGluZyBlZGdlLCBvciB3ZSd2ZSBoaXQgdGhlIGBtYXhXYWl0YCBsaW1pdC5cbiAgICAgICAgcmV0dXJuIChsYXN0Q2FsbFRpbWUgPT09IHVuZGVmaW5lZCB8fCAodGltZVNpbmNlTGFzdENhbGwgPj0gd2FpdCkgfHxcbiAgICAgICAgICAodGltZVNpbmNlTGFzdENhbGwgPCAwKSB8fCAobWF4aW5nICYmIHRpbWVTaW5jZUxhc3RJbnZva2UgPj0gbWF4V2FpdCkpO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiB0aW1lckV4cGlyZWQoKSB7XG4gICAgICAgIHZhciB0aW1lID0gbm93KCk7XG4gICAgICAgIGlmIChzaG91bGRJbnZva2UodGltZSkpIHtcbiAgICAgICAgICByZXR1cm4gdHJhaWxpbmdFZGdlKHRpbWUpO1xuICAgICAgICB9XG4gICAgICAgIC8vIFJlc3RhcnQgdGhlIHRpbWVyLlxuICAgICAgICB0aW1lcklkID0gc2V0VGltZW91dCh0aW1lckV4cGlyZWQsIHJlbWFpbmluZ1dhaXQodGltZSkpO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiB0cmFpbGluZ0VkZ2UodGltZSkge1xuICAgICAgICB0aW1lcklkID0gdW5kZWZpbmVkO1xuXG4gICAgICAgIC8vIE9ubHkgaW52b2tlIGlmIHdlIGhhdmUgYGxhc3RBcmdzYCB3aGljaCBtZWFucyBgZnVuY2AgaGFzIGJlZW5cbiAgICAgICAgLy8gZGVib3VuY2VkIGF0IGxlYXN0IG9uY2UuXG4gICAgICAgIGlmICh0cmFpbGluZyAmJiBsYXN0QXJncykge1xuICAgICAgICAgIHJldHVybiBpbnZva2VGdW5jKHRpbWUpO1xuICAgICAgICB9XG4gICAgICAgIGxhc3RBcmdzID0gbGFzdFRoaXMgPSB1bmRlZmluZWQ7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGNhbmNlbCgpIHtcbiAgICAgICAgaWYgKHRpbWVySWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1lcklkKTtcbiAgICAgICAgfVxuICAgICAgICBsYXN0SW52b2tlVGltZSA9IDA7XG4gICAgICAgIGxhc3RBcmdzID0gbGFzdENhbGxUaW1lID0gbGFzdFRoaXMgPSB0aW1lcklkID0gdW5kZWZpbmVkO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBmbHVzaCgpIHtcbiAgICAgICAgcmV0dXJuIHRpbWVySWQgPT09IHVuZGVmaW5lZCA/IHJlc3VsdCA6IHRyYWlsaW5nRWRnZShub3coKSk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGRlYm91bmNlZCgpIHtcbiAgICAgICAgdmFyIHRpbWUgPSBub3coKSxcbiAgICAgICAgICAgIGlzSW52b2tpbmcgPSBzaG91bGRJbnZva2UodGltZSk7XG5cbiAgICAgICAgbGFzdEFyZ3MgPSBhcmd1bWVudHM7XG4gICAgICAgIGxhc3RUaGlzID0gdGhpcztcbiAgICAgICAgbGFzdENhbGxUaW1lID0gdGltZTtcblxuICAgICAgICBpZiAoaXNJbnZva2luZykge1xuICAgICAgICAgIGlmICh0aW1lcklkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBsZWFkaW5nRWRnZShsYXN0Q2FsbFRpbWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAobWF4aW5nKSB7XG4gICAgICAgICAgICAvLyBIYW5kbGUgaW52b2NhdGlvbnMgaW4gYSB0aWdodCBsb29wLlxuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVySWQpO1xuICAgICAgICAgICAgdGltZXJJZCA9IHNldFRpbWVvdXQodGltZXJFeHBpcmVkLCB3YWl0KTtcbiAgICAgICAgICAgIHJldHVybiBpbnZva2VGdW5jKGxhc3RDYWxsVGltZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICh0aW1lcklkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICB0aW1lcklkID0gc2V0VGltZW91dCh0aW1lckV4cGlyZWQsIHdhaXQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG4gICAgICBkZWJvdW5jZWQuY2FuY2VsID0gY2FuY2VsO1xuICAgICAgZGVib3VuY2VkLmZsdXNoID0gZmx1c2g7XG4gICAgICByZXR1cm4gZGVib3VuY2VkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIERlZmVycyBpbnZva2luZyB0aGUgYGZ1bmNgIHVudGlsIHRoZSBjdXJyZW50IGNhbGwgc3RhY2sgaGFzIGNsZWFyZWQuIEFueVxuICAgICAqIGFkZGl0aW9uYWwgYXJndW1lbnRzIGFyZSBwcm92aWRlZCB0byBgZnVuY2Agd2hlbiBpdCdzIGludm9rZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBkZWZlci5cbiAgICAgKiBAcGFyYW0gey4uLip9IFthcmdzXSBUaGUgYXJndW1lbnRzIHRvIGludm9rZSBgZnVuY2Agd2l0aC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSB0aW1lciBpZC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5kZWZlcihmdW5jdGlvbih0ZXh0KSB7XG4gICAgICogICBjb25zb2xlLmxvZyh0ZXh0KTtcbiAgICAgKiB9LCAnZGVmZXJyZWQnKTtcbiAgICAgKiAvLyA9PiBMb2dzICdkZWZlcnJlZCcgYWZ0ZXIgb25lIG1pbGxpc2Vjb25kLlxuICAgICAqL1xuICAgIHZhciBkZWZlciA9IGJhc2VSZXN0KGZ1bmN0aW9uKGZ1bmMsIGFyZ3MpIHtcbiAgICAgIHJldHVybiBiYXNlRGVsYXkoZnVuYywgMSwgYXJncyk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBJbnZva2VzIGBmdW5jYCBhZnRlciBgd2FpdGAgbWlsbGlzZWNvbmRzLiBBbnkgYWRkaXRpb25hbCBhcmd1bWVudHMgYXJlXG4gICAgICogcHJvdmlkZWQgdG8gYGZ1bmNgIHdoZW4gaXQncyBpbnZva2VkLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gZGVsYXkuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHdhaXQgVGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgdG8gZGVsYXkgaW52b2NhdGlvbi5cbiAgICAgKiBAcGFyYW0gey4uLip9IFthcmdzXSBUaGUgYXJndW1lbnRzIHRvIGludm9rZSBgZnVuY2Agd2l0aC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSB0aW1lciBpZC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5kZWxheShmdW5jdGlvbih0ZXh0KSB7XG4gICAgICogICBjb25zb2xlLmxvZyh0ZXh0KTtcbiAgICAgKiB9LCAxMDAwLCAnbGF0ZXInKTtcbiAgICAgKiAvLyA9PiBMb2dzICdsYXRlcicgYWZ0ZXIgb25lIHNlY29uZC5cbiAgICAgKi9cbiAgICB2YXIgZGVsYXkgPSBiYXNlUmVzdChmdW5jdGlvbihmdW5jLCB3YWl0LCBhcmdzKSB7XG4gICAgICByZXR1cm4gYmFzZURlbGF5KGZ1bmMsIHRvTnVtYmVyKHdhaXQpIHx8IDAsIGFyZ3MpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBgZnVuY2Agd2l0aCBhcmd1bWVudHMgcmV2ZXJzZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBmbGlwIGFyZ3VtZW50cyBmb3IuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZmxpcHBlZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGZsaXBwZWQgPSBfLmZsaXAoZnVuY3Rpb24oKSB7XG4gICAgICogICByZXR1cm4gXy50b0FycmF5KGFyZ3VtZW50cyk7XG4gICAgICogfSk7XG4gICAgICpcbiAgICAgKiBmbGlwcGVkKCdhJywgJ2InLCAnYycsICdkJyk7XG4gICAgICogLy8gPT4gWydkJywgJ2MnLCAnYicsICdhJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmbGlwKGZ1bmMpIHtcbiAgICAgIHJldHVybiBjcmVhdGVXcmFwKGZ1bmMsIFdSQVBfRkxJUF9GTEFHKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBtZW1vaXplcyB0aGUgcmVzdWx0IG9mIGBmdW5jYC4gSWYgYHJlc29sdmVyYCBpc1xuICAgICAqIHByb3ZpZGVkLCBpdCBkZXRlcm1pbmVzIHRoZSBjYWNoZSBrZXkgZm9yIHN0b3JpbmcgdGhlIHJlc3VsdCBiYXNlZCBvbiB0aGVcbiAgICAgKiBhcmd1bWVudHMgcHJvdmlkZWQgdG8gdGhlIG1lbW9pemVkIGZ1bmN0aW9uLiBCeSBkZWZhdWx0LCB0aGUgZmlyc3QgYXJndW1lbnRcbiAgICAgKiBwcm92aWRlZCB0byB0aGUgbWVtb2l6ZWQgZnVuY3Rpb24gaXMgdXNlZCBhcyB0aGUgbWFwIGNhY2hlIGtleS4gVGhlIGBmdW5jYFxuICAgICAqIGlzIGludm9rZWQgd2l0aCB0aGUgYHRoaXNgIGJpbmRpbmcgb2YgdGhlIG1lbW9pemVkIGZ1bmN0aW9uLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoZSBjYWNoZSBpcyBleHBvc2VkIGFzIHRoZSBgY2FjaGVgIHByb3BlcnR5IG9uIHRoZSBtZW1vaXplZFxuICAgICAqIGZ1bmN0aW9uLiBJdHMgY3JlYXRpb24gbWF5IGJlIGN1c3RvbWl6ZWQgYnkgcmVwbGFjaW5nIHRoZSBgXy5tZW1vaXplLkNhY2hlYFxuICAgICAqIGNvbnN0cnVjdG9yIHdpdGggb25lIHdob3NlIGluc3RhbmNlcyBpbXBsZW1lbnQgdGhlXG4gICAgICogW2BNYXBgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1wcm9wZXJ0aWVzLW9mLXRoZS1tYXAtcHJvdG90eXBlLW9iamVjdClcbiAgICAgKiBtZXRob2QgaW50ZXJmYWNlIG9mIGBjbGVhcmAsIGBkZWxldGVgLCBgZ2V0YCwgYGhhc2AsIGFuZCBgc2V0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGhhdmUgaXRzIG91dHB1dCBtZW1vaXplZC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcmVzb2x2ZXJdIFRoZSBmdW5jdGlvbiB0byByZXNvbHZlIHRoZSBjYWNoZSBrZXkuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgbWVtb2l6ZWQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogMSwgJ2InOiAyIH07XG4gICAgICogdmFyIG90aGVyID0geyAnYyc6IDMsICdkJzogNCB9O1xuICAgICAqXG4gICAgICogdmFyIHZhbHVlcyA9IF8ubWVtb2l6ZShfLnZhbHVlcyk7XG4gICAgICogdmFsdWVzKG9iamVjdCk7XG4gICAgICogLy8gPT4gWzEsIDJdXG4gICAgICpcbiAgICAgKiB2YWx1ZXMob3RoZXIpO1xuICAgICAqIC8vID0+IFszLCA0XVxuICAgICAqXG4gICAgICogb2JqZWN0LmEgPSAyO1xuICAgICAqIHZhbHVlcyhvYmplY3QpO1xuICAgICAqIC8vID0+IFsxLCAyXVxuICAgICAqXG4gICAgICogLy8gTW9kaWZ5IHRoZSByZXN1bHQgY2FjaGUuXG4gICAgICogdmFsdWVzLmNhY2hlLnNldChvYmplY3QsIFsnYScsICdiJ10pO1xuICAgICAqIHZhbHVlcyhvYmplY3QpO1xuICAgICAqIC8vID0+IFsnYScsICdiJ11cbiAgICAgKlxuICAgICAqIC8vIFJlcGxhY2UgYF8ubWVtb2l6ZS5DYWNoZWAuXG4gICAgICogXy5tZW1vaXplLkNhY2hlID0gV2Vha01hcDtcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtZW1vaXplKGZ1bmMsIHJlc29sdmVyKSB7XG4gICAgICBpZiAodHlwZW9mIGZ1bmMgIT0gJ2Z1bmN0aW9uJyB8fCAocmVzb2x2ZXIgIT0gbnVsbCAmJiB0eXBlb2YgcmVzb2x2ZXIgIT0gJ2Z1bmN0aW9uJykpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihGVU5DX0VSUk9SX1RFWFQpO1xuICAgICAgfVxuICAgICAgdmFyIG1lbW9pemVkID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBhcmdzID0gYXJndW1lbnRzLFxuICAgICAgICAgICAga2V5ID0gcmVzb2x2ZXIgPyByZXNvbHZlci5hcHBseSh0aGlzLCBhcmdzKSA6IGFyZ3NbMF0sXG4gICAgICAgICAgICBjYWNoZSA9IG1lbW9pemVkLmNhY2hlO1xuXG4gICAgICAgIGlmIChjYWNoZS5oYXMoa2V5KSkge1xuICAgICAgICAgIHJldHVybiBjYWNoZS5nZXQoa2V5KTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgcmVzdWx0ID0gZnVuYy5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICAgICAgbWVtb2l6ZWQuY2FjaGUgPSBjYWNoZS5zZXQoa2V5LCByZXN1bHQpIHx8IGNhY2hlO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfTtcbiAgICAgIG1lbW9pemVkLmNhY2hlID0gbmV3IChtZW1vaXplLkNhY2hlIHx8IE1hcENhY2hlKTtcbiAgICAgIHJldHVybiBtZW1vaXplZDtcbiAgICB9XG5cbiAgICAvLyBFeHBvc2UgYE1hcENhY2hlYC5cbiAgICBtZW1vaXplLkNhY2hlID0gTWFwQ2FjaGU7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBuZWdhdGVzIHRoZSByZXN1bHQgb2YgdGhlIHByZWRpY2F0ZSBgZnVuY2AuIFRoZVxuICAgICAqIGBmdW5jYCBwcmVkaWNhdGUgaXMgaW52b2tlZCB3aXRoIHRoZSBgdGhpc2AgYmluZGluZyBhbmQgYXJndW1lbnRzIG9mIHRoZVxuICAgICAqIGNyZWF0ZWQgZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcmVkaWNhdGUgVGhlIHByZWRpY2F0ZSB0byBuZWdhdGUuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgbmVnYXRlZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gaXNFdmVuKG4pIHtcbiAgICAgKiAgIHJldHVybiBuICUgMiA9PSAwO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIF8uZmlsdGVyKFsxLCAyLCAzLCA0LCA1LCA2XSwgXy5uZWdhdGUoaXNFdmVuKSk7XG4gICAgICogLy8gPT4gWzEsIDMsIDVdXG4gICAgICovXG4gICAgZnVuY3Rpb24gbmVnYXRlKHByZWRpY2F0ZSkge1xuICAgICAgaWYgKHR5cGVvZiBwcmVkaWNhdGUgIT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBhcmdzID0gYXJndW1lbnRzO1xuICAgICAgICBzd2l0Y2ggKGFyZ3MubGVuZ3RoKSB7XG4gICAgICAgICAgY2FzZSAwOiByZXR1cm4gIXByZWRpY2F0ZS5jYWxsKHRoaXMpO1xuICAgICAgICAgIGNhc2UgMTogcmV0dXJuICFwcmVkaWNhdGUuY2FsbCh0aGlzLCBhcmdzWzBdKTtcbiAgICAgICAgICBjYXNlIDI6IHJldHVybiAhcHJlZGljYXRlLmNhbGwodGhpcywgYXJnc1swXSwgYXJnc1sxXSk7XG4gICAgICAgICAgY2FzZSAzOiByZXR1cm4gIXByZWRpY2F0ZS5jYWxsKHRoaXMsIGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAhcHJlZGljYXRlLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpcyByZXN0cmljdGVkIHRvIGludm9raW5nIGBmdW5jYCBvbmNlLiBSZXBlYXQgY2FsbHNcbiAgICAgKiB0byB0aGUgZnVuY3Rpb24gcmV0dXJuIHRoZSB2YWx1ZSBvZiB0aGUgZmlyc3QgaW52b2NhdGlvbi4gVGhlIGBmdW5jYCBpc1xuICAgICAqIGludm9rZWQgd2l0aCB0aGUgYHRoaXNgIGJpbmRpbmcgYW5kIGFyZ3VtZW50cyBvZiB0aGUgY3JlYXRlZCBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHJlc3RyaWN0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHJlc3RyaWN0ZWQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBpbml0aWFsaXplID0gXy5vbmNlKGNyZWF0ZUFwcGxpY2F0aW9uKTtcbiAgICAgKiBpbml0aWFsaXplKCk7XG4gICAgICogaW5pdGlhbGl6ZSgpO1xuICAgICAqIC8vID0+IGBjcmVhdGVBcHBsaWNhdGlvbmAgaXMgaW52b2tlZCBvbmNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gb25jZShmdW5jKSB7XG4gICAgICByZXR1cm4gYmVmb3JlKDIsIGZ1bmMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXMgYGZ1bmNgIHdpdGggaXRzIGFyZ3VtZW50cyB0cmFuc2Zvcm1lZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHdyYXAuXG4gICAgICogQHBhcmFtIHsuLi4oRnVuY3Rpb258RnVuY3Rpb25bXSl9IFt0cmFuc2Zvcm1zPVtfLmlkZW50aXR5XV1cbiAgICAgKiAgVGhlIGFyZ3VtZW50IHRyYW5zZm9ybXMuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIGRvdWJsZWQobikge1xuICAgICAqICAgcmV0dXJuIG4gKiAyO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIHNxdWFyZShuKSB7XG4gICAgICogICByZXR1cm4gbiAqIG47XG4gICAgICogfVxuICAgICAqXG4gICAgICogdmFyIGZ1bmMgPSBfLm92ZXJBcmdzKGZ1bmN0aW9uKHgsIHkpIHtcbiAgICAgKiAgIHJldHVybiBbeCwgeV07XG4gICAgICogfSwgW3NxdWFyZSwgZG91YmxlZF0pO1xuICAgICAqXG4gICAgICogZnVuYyg5LCAzKTtcbiAgICAgKiAvLyA9PiBbODEsIDZdXG4gICAgICpcbiAgICAgKiBmdW5jKDEwLCA1KTtcbiAgICAgKiAvLyA9PiBbMTAwLCAxMF1cbiAgICAgKi9cbiAgICB2YXIgb3ZlckFyZ3MgPSBjYXN0UmVzdChmdW5jdGlvbihmdW5jLCB0cmFuc2Zvcm1zKSB7XG4gICAgICB0cmFuc2Zvcm1zID0gKHRyYW5zZm9ybXMubGVuZ3RoID09IDEgJiYgaXNBcnJheSh0cmFuc2Zvcm1zWzBdKSlcbiAgICAgICAgPyBhcnJheU1hcCh0cmFuc2Zvcm1zWzBdLCBiYXNlVW5hcnkoZ2V0SXRlcmF0ZWUoKSkpXG4gICAgICAgIDogYXJyYXlNYXAoYmFzZUZsYXR0ZW4odHJhbnNmb3JtcywgMSksIGJhc2VVbmFyeShnZXRJdGVyYXRlZSgpKSk7XG5cbiAgICAgIHZhciBmdW5jc0xlbmd0aCA9IHRyYW5zZm9ybXMubGVuZ3RoO1xuICAgICAgcmV0dXJuIGJhc2VSZXN0KGZ1bmN0aW9uKGFyZ3MpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgICBsZW5ndGggPSBuYXRpdmVNaW4oYXJncy5sZW5ndGgsIGZ1bmNzTGVuZ3RoKTtcblxuICAgICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICAgIGFyZ3NbaW5kZXhdID0gdHJhbnNmb3Jtc1tpbmRleF0uY2FsbCh0aGlzLCBhcmdzW2luZGV4XSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFwcGx5KGZ1bmMsIHRoaXMsIGFyZ3MpO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGBmdW5jYCB3aXRoIGBwYXJ0aWFsc2AgcHJlcGVuZGVkIHRvIHRoZVxuICAgICAqIGFyZ3VtZW50cyBpdCByZWNlaXZlcy4gVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5iaW5kYCBleGNlcHQgaXQgZG9lcyAqKm5vdCoqXG4gICAgICogYWx0ZXIgdGhlIGB0aGlzYCBiaW5kaW5nLlxuICAgICAqXG4gICAgICogVGhlIGBfLnBhcnRpYWwucGxhY2Vob2xkZXJgIHZhbHVlLCB3aGljaCBkZWZhdWx0cyB0byBgX2AgaW4gbW9ub2xpdGhpY1xuICAgICAqIGJ1aWxkcywgbWF5IGJlIHVzZWQgYXMgYSBwbGFjZWhvbGRlciBmb3IgcGFydGlhbGx5IGFwcGxpZWQgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGRvZXNuJ3Qgc2V0IHRoZSBcImxlbmd0aFwiIHByb3BlcnR5IG9mIHBhcnRpYWxseVxuICAgICAqIGFwcGxpZWQgZnVuY3Rpb25zLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMi4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gcGFydGlhbGx5IGFwcGx5IGFyZ3VtZW50cyB0by5cbiAgICAgKiBAcGFyYW0gey4uLip9IFtwYXJ0aWFsc10gVGhlIGFyZ3VtZW50cyB0byBiZSBwYXJ0aWFsbHkgYXBwbGllZC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBwYXJ0aWFsbHkgYXBwbGllZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gZ3JlZXQoZ3JlZXRpbmcsIG5hbWUpIHtcbiAgICAgKiAgIHJldHVybiBncmVldGluZyArICcgJyArIG5hbWU7XG4gICAgICogfVxuICAgICAqXG4gICAgICogdmFyIHNheUhlbGxvVG8gPSBfLnBhcnRpYWwoZ3JlZXQsICdoZWxsbycpO1xuICAgICAqIHNheUhlbGxvVG8oJ2ZyZWQnKTtcbiAgICAgKiAvLyA9PiAnaGVsbG8gZnJlZCdcbiAgICAgKlxuICAgICAqIC8vIFBhcnRpYWxseSBhcHBsaWVkIHdpdGggcGxhY2Vob2xkZXJzLlxuICAgICAqIHZhciBncmVldEZyZWQgPSBfLnBhcnRpYWwoZ3JlZXQsIF8sICdmcmVkJyk7XG4gICAgICogZ3JlZXRGcmVkKCdoaScpO1xuICAgICAqIC8vID0+ICdoaSBmcmVkJ1xuICAgICAqL1xuICAgIHZhciBwYXJ0aWFsID0gYmFzZVJlc3QoZnVuY3Rpb24oZnVuYywgcGFydGlhbHMpIHtcbiAgICAgIHZhciBob2xkZXJzID0gcmVwbGFjZUhvbGRlcnMocGFydGlhbHMsIGdldEhvbGRlcihwYXJ0aWFsKSk7XG4gICAgICByZXR1cm4gY3JlYXRlV3JhcChmdW5jLCBXUkFQX1BBUlRJQUxfRkxBRywgdW5kZWZpbmVkLCBwYXJ0aWFscywgaG9sZGVycyk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnBhcnRpYWxgIGV4Y2VwdCB0aGF0IHBhcnRpYWxseSBhcHBsaWVkIGFyZ3VtZW50c1xuICAgICAqIGFyZSBhcHBlbmRlZCB0byB0aGUgYXJndW1lbnRzIGl0IHJlY2VpdmVzLlxuICAgICAqXG4gICAgICogVGhlIGBfLnBhcnRpYWxSaWdodC5wbGFjZWhvbGRlcmAgdmFsdWUsIHdoaWNoIGRlZmF1bHRzIHRvIGBfYCBpbiBtb25vbGl0aGljXG4gICAgICogYnVpbGRzLCBtYXkgYmUgdXNlZCBhcyBhIHBsYWNlaG9sZGVyIGZvciBwYXJ0aWFsbHkgYXBwbGllZCBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgZG9lc24ndCBzZXQgdGhlIFwibGVuZ3RoXCIgcHJvcGVydHkgb2YgcGFydGlhbGx5XG4gICAgICogYXBwbGllZCBmdW5jdGlvbnMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMS4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBwYXJ0aWFsbHkgYXBwbHkgYXJndW1lbnRzIHRvLlxuICAgICAqIEBwYXJhbSB7Li4uKn0gW3BhcnRpYWxzXSBUaGUgYXJndW1lbnRzIHRvIGJlIHBhcnRpYWxseSBhcHBsaWVkLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHBhcnRpYWxseSBhcHBsaWVkIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBncmVldChncmVldGluZywgbmFtZSkge1xuICAgICAqICAgcmV0dXJuIGdyZWV0aW5nICsgJyAnICsgbmFtZTtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiB2YXIgZ3JlZXRGcmVkID0gXy5wYXJ0aWFsUmlnaHQoZ3JlZXQsICdmcmVkJyk7XG4gICAgICogZ3JlZXRGcmVkKCdoaScpO1xuICAgICAqIC8vID0+ICdoaSBmcmVkJ1xuICAgICAqXG4gICAgICogLy8gUGFydGlhbGx5IGFwcGxpZWQgd2l0aCBwbGFjZWhvbGRlcnMuXG4gICAgICogdmFyIHNheUhlbGxvVG8gPSBfLnBhcnRpYWxSaWdodChncmVldCwgJ2hlbGxvJywgXyk7XG4gICAgICogc2F5SGVsbG9UbygnZnJlZCcpO1xuICAgICAqIC8vID0+ICdoZWxsbyBmcmVkJ1xuICAgICAqL1xuICAgIHZhciBwYXJ0aWFsUmlnaHQgPSBiYXNlUmVzdChmdW5jdGlvbihmdW5jLCBwYXJ0aWFscykge1xuICAgICAgdmFyIGhvbGRlcnMgPSByZXBsYWNlSG9sZGVycyhwYXJ0aWFscywgZ2V0SG9sZGVyKHBhcnRpYWxSaWdodCkpO1xuICAgICAgcmV0dXJuIGNyZWF0ZVdyYXAoZnVuYywgV1JBUF9QQVJUSUFMX1JJR0hUX0ZMQUcsIHVuZGVmaW5lZCwgcGFydGlhbHMsIGhvbGRlcnMpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBgZnVuY2Agd2l0aCBhcmd1bWVudHMgYXJyYW5nZWQgYWNjb3JkaW5nXG4gICAgICogdG8gdGhlIHNwZWNpZmllZCBgaW5kZXhlc2Agd2hlcmUgdGhlIGFyZ3VtZW50IHZhbHVlIGF0IHRoZSBmaXJzdCBpbmRleCBpc1xuICAgICAqIHByb3ZpZGVkIGFzIHRoZSBmaXJzdCBhcmd1bWVudCwgdGhlIGFyZ3VtZW50IHZhbHVlIGF0IHRoZSBzZWNvbmQgaW5kZXggaXNcbiAgICAgKiBwcm92aWRlZCBhcyB0aGUgc2Vjb25kIGFyZ3VtZW50LCBhbmQgc28gb24uXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byByZWFycmFuZ2UgYXJndW1lbnRzIGZvci5cbiAgICAgKiBAcGFyYW0gey4uLihudW1iZXJ8bnVtYmVyW10pfSBpbmRleGVzIFRoZSBhcnJhbmdlZCBhcmd1bWVudCBpbmRleGVzLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgcmVhcmdlZCA9IF8ucmVhcmcoZnVuY3Rpb24oYSwgYiwgYykge1xuICAgICAqICAgcmV0dXJuIFthLCBiLCBjXTtcbiAgICAgKiB9LCBbMiwgMCwgMV0pO1xuICAgICAqXG4gICAgICogcmVhcmdlZCgnYicsICdjJywgJ2EnKVxuICAgICAqIC8vID0+IFsnYScsICdiJywgJ2MnXVxuICAgICAqL1xuICAgIHZhciByZWFyZyA9IGZsYXRSZXN0KGZ1bmN0aW9uKGZ1bmMsIGluZGV4ZXMpIHtcbiAgICAgIHJldHVybiBjcmVhdGVXcmFwKGZ1bmMsIFdSQVBfUkVBUkdfRkxBRywgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgaW5kZXhlcyk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGBmdW5jYCB3aXRoIHRoZSBgdGhpc2AgYmluZGluZyBvZiB0aGVcbiAgICAgKiBjcmVhdGVkIGZ1bmN0aW9uIGFuZCBhcmd1bWVudHMgZnJvbSBgc3RhcnRgIGFuZCBiZXlvbmQgcHJvdmlkZWQgYXNcbiAgICAgKiBhbiBhcnJheS5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBiYXNlZCBvbiB0aGVcbiAgICAgKiBbcmVzdCBwYXJhbWV0ZXJdKGh0dHBzOi8vbWRuLmlvL3Jlc3RfcGFyYW1ldGVycykuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBhcHBseSBhIHJlc3QgcGFyYW1ldGVyIHRvLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbc3RhcnQ9ZnVuYy5sZW5ndGgtMV0gVGhlIHN0YXJ0IHBvc2l0aW9uIG9mIHRoZSByZXN0IHBhcmFtZXRlci5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHNheSA9IF8ucmVzdChmdW5jdGlvbih3aGF0LCBuYW1lcykge1xuICAgICAqICAgcmV0dXJuIHdoYXQgKyAnICcgKyBfLmluaXRpYWwobmFtZXMpLmpvaW4oJywgJykgK1xuICAgICAqICAgICAoXy5zaXplKG5hbWVzKSA+IDEgPyAnLCAmICcgOiAnJykgKyBfLmxhc3QobmFtZXMpO1xuICAgICAqIH0pO1xuICAgICAqXG4gICAgICogc2F5KCdoZWxsbycsICdmcmVkJywgJ2Jhcm5leScsICdwZWJibGVzJyk7XG4gICAgICogLy8gPT4gJ2hlbGxvIGZyZWQsIGJhcm5leSwgJiBwZWJibGVzJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJlc3QoZnVuYywgc3RhcnQpIHtcbiAgICAgIGlmICh0eXBlb2YgZnVuYyAhPSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgICAgIH1cbiAgICAgIHN0YXJ0ID0gc3RhcnQgPT09IHVuZGVmaW5lZCA/IHN0YXJ0IDogdG9JbnRlZ2VyKHN0YXJ0KTtcbiAgICAgIHJldHVybiBiYXNlUmVzdChmdW5jLCBzdGFydCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBgZnVuY2Agd2l0aCB0aGUgYHRoaXNgIGJpbmRpbmcgb2YgdGhlXG4gICAgICogY3JlYXRlIGZ1bmN0aW9uIGFuZCBhbiBhcnJheSBvZiBhcmd1bWVudHMgbXVjaCBsaWtlXG4gICAgICogW2BGdW5jdGlvbiNhcHBseWBdKGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1mdW5jdGlvbi5wcm90b3R5cGUuYXBwbHkpLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGJhc2VkIG9uIHRoZVxuICAgICAqIFtzcHJlYWQgb3BlcmF0b3JdKGh0dHBzOi8vbWRuLmlvL3NwcmVhZF9vcGVyYXRvcikuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4yLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBzcHJlYWQgYXJndW1lbnRzIG92ZXIuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzdGFydD0wXSBUaGUgc3RhcnQgcG9zaXRpb24gb2YgdGhlIHNwcmVhZC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHNheSA9IF8uc3ByZWFkKGZ1bmN0aW9uKHdobywgd2hhdCkge1xuICAgICAqICAgcmV0dXJuIHdobyArICcgc2F5cyAnICsgd2hhdDtcbiAgICAgKiB9KTtcbiAgICAgKlxuICAgICAqIHNheShbJ2ZyZWQnLCAnaGVsbG8nXSk7XG4gICAgICogLy8gPT4gJ2ZyZWQgc2F5cyBoZWxsbydcbiAgICAgKlxuICAgICAqIHZhciBudW1iZXJzID0gUHJvbWlzZS5hbGwoW1xuICAgICAqICAgUHJvbWlzZS5yZXNvbHZlKDQwKSxcbiAgICAgKiAgIFByb21pc2UucmVzb2x2ZSgzNilcbiAgICAgKiBdKTtcbiAgICAgKlxuICAgICAqIG51bWJlcnMudGhlbihfLnNwcmVhZChmdW5jdGlvbih4LCB5KSB7XG4gICAgICogICByZXR1cm4geCArIHk7XG4gICAgICogfSkpO1xuICAgICAqIC8vID0+IGEgUHJvbWlzZSBvZiA3NlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNwcmVhZChmdW5jLCBzdGFydCkge1xuICAgICAgaWYgKHR5cGVvZiBmdW5jICE9ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihGVU5DX0VSUk9SX1RFWFQpO1xuICAgICAgfVxuICAgICAgc3RhcnQgPSBzdGFydCA9PSBudWxsID8gMCA6IG5hdGl2ZU1heCh0b0ludGVnZXIoc3RhcnQpLCAwKTtcbiAgICAgIHJldHVybiBiYXNlUmVzdChmdW5jdGlvbihhcmdzKSB7XG4gICAgICAgIHZhciBhcnJheSA9IGFyZ3Nbc3RhcnRdLFxuICAgICAgICAgICAgb3RoZXJBcmdzID0gY2FzdFNsaWNlKGFyZ3MsIDAsIHN0YXJ0KTtcblxuICAgICAgICBpZiAoYXJyYXkpIHtcbiAgICAgICAgICBhcnJheVB1c2gob3RoZXJBcmdzLCBhcnJheSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFwcGx5KGZ1bmMsIHRoaXMsIG90aGVyQXJncyk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgdGhyb3R0bGVkIGZ1bmN0aW9uIHRoYXQgb25seSBpbnZva2VzIGBmdW5jYCBhdCBtb3N0IG9uY2UgcGVyXG4gICAgICogZXZlcnkgYHdhaXRgIG1pbGxpc2Vjb25kcy4gVGhlIHRocm90dGxlZCBmdW5jdGlvbiBjb21lcyB3aXRoIGEgYGNhbmNlbGBcbiAgICAgKiBtZXRob2QgdG8gY2FuY2VsIGRlbGF5ZWQgYGZ1bmNgIGludm9jYXRpb25zIGFuZCBhIGBmbHVzaGAgbWV0aG9kIHRvXG4gICAgICogaW1tZWRpYXRlbHkgaW52b2tlIHRoZW0uIFByb3ZpZGUgYG9wdGlvbnNgIHRvIGluZGljYXRlIHdoZXRoZXIgYGZ1bmNgXG4gICAgICogc2hvdWxkIGJlIGludm9rZWQgb24gdGhlIGxlYWRpbmcgYW5kL29yIHRyYWlsaW5nIGVkZ2Ugb2YgdGhlIGB3YWl0YFxuICAgICAqIHRpbWVvdXQuIFRoZSBgZnVuY2AgaXMgaW52b2tlZCB3aXRoIHRoZSBsYXN0IGFyZ3VtZW50cyBwcm92aWRlZCB0byB0aGVcbiAgICAgKiB0aHJvdHRsZWQgZnVuY3Rpb24uIFN1YnNlcXVlbnQgY2FsbHMgdG8gdGhlIHRocm90dGxlZCBmdW5jdGlvbiByZXR1cm4gdGhlXG4gICAgICogcmVzdWx0IG9mIHRoZSBsYXN0IGBmdW5jYCBpbnZvY2F0aW9uLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIElmIGBsZWFkaW5nYCBhbmQgYHRyYWlsaW5nYCBvcHRpb25zIGFyZSBgdHJ1ZWAsIGBmdW5jYCBpc1xuICAgICAqIGludm9rZWQgb24gdGhlIHRyYWlsaW5nIGVkZ2Ugb2YgdGhlIHRpbWVvdXQgb25seSBpZiB0aGUgdGhyb3R0bGVkIGZ1bmN0aW9uXG4gICAgICogaXMgaW52b2tlZCBtb3JlIHRoYW4gb25jZSBkdXJpbmcgdGhlIGB3YWl0YCB0aW1lb3V0LlxuICAgICAqXG4gICAgICogSWYgYHdhaXRgIGlzIGAwYCBhbmQgYGxlYWRpbmdgIGlzIGBmYWxzZWAsIGBmdW5jYCBpbnZvY2F0aW9uIGlzIGRlZmVycmVkXG4gICAgICogdW50aWwgdG8gdGhlIG5leHQgdGljaywgc2ltaWxhciB0byBgc2V0VGltZW91dGAgd2l0aCBhIHRpbWVvdXQgb2YgYDBgLlxuICAgICAqXG4gICAgICogU2VlIFtEYXZpZCBDb3JiYWNobydzIGFydGljbGVdKGh0dHBzOi8vY3NzLXRyaWNrcy5jb20vZGVib3VuY2luZy10aHJvdHRsaW5nLWV4cGxhaW5lZC1leGFtcGxlcy8pXG4gICAgICogZm9yIGRldGFpbHMgb3ZlciB0aGUgZGlmZmVyZW5jZXMgYmV0d2VlbiBgXy50aHJvdHRsZWAgYW5kIGBfLmRlYm91bmNlYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHRocm90dGxlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbd2FpdD0wXSBUaGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0byB0aHJvdHRsZSBpbnZvY2F0aW9ucyB0by5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnM9e31dIFRoZSBvcHRpb25zIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLmxlYWRpbmc9dHJ1ZV1cbiAgICAgKiAgU3BlY2lmeSBpbnZva2luZyBvbiB0aGUgbGVhZGluZyBlZGdlIG9mIHRoZSB0aW1lb3V0LlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMudHJhaWxpbmc9dHJ1ZV1cbiAgICAgKiAgU3BlY2lmeSBpbnZva2luZyBvbiB0aGUgdHJhaWxpbmcgZWRnZSBvZiB0aGUgdGltZW91dC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyB0aHJvdHRsZWQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIC8vIEF2b2lkIGV4Y2Vzc2l2ZWx5IHVwZGF0aW5nIHRoZSBwb3NpdGlvbiB3aGlsZSBzY3JvbGxpbmcuXG4gICAgICogalF1ZXJ5KHdpbmRvdykub24oJ3Njcm9sbCcsIF8udGhyb3R0bGUodXBkYXRlUG9zaXRpb24sIDEwMCkpO1xuICAgICAqXG4gICAgICogLy8gSW52b2tlIGByZW5ld1Rva2VuYCB3aGVuIHRoZSBjbGljayBldmVudCBpcyBmaXJlZCwgYnV0IG5vdCBtb3JlIHRoYW4gb25jZSBldmVyeSA1IG1pbnV0ZXMuXG4gICAgICogdmFyIHRocm90dGxlZCA9IF8udGhyb3R0bGUocmVuZXdUb2tlbiwgMzAwMDAwLCB7ICd0cmFpbGluZyc6IGZhbHNlIH0pO1xuICAgICAqIGpRdWVyeShlbGVtZW50KS5vbignY2xpY2snLCB0aHJvdHRsZWQpO1xuICAgICAqXG4gICAgICogLy8gQ2FuY2VsIHRoZSB0cmFpbGluZyB0aHJvdHRsZWQgaW52b2NhdGlvbi5cbiAgICAgKiBqUXVlcnkod2luZG93KS5vbigncG9wc3RhdGUnLCB0aHJvdHRsZWQuY2FuY2VsKTtcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0aHJvdHRsZShmdW5jLCB3YWl0LCBvcHRpb25zKSB7XG4gICAgICB2YXIgbGVhZGluZyA9IHRydWUsXG4gICAgICAgICAgdHJhaWxpbmcgPSB0cnVlO1xuXG4gICAgICBpZiAodHlwZW9mIGZ1bmMgIT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gICAgICB9XG4gICAgICBpZiAoaXNPYmplY3Qob3B0aW9ucykpIHtcbiAgICAgICAgbGVhZGluZyA9ICdsZWFkaW5nJyBpbiBvcHRpb25zID8gISFvcHRpb25zLmxlYWRpbmcgOiBsZWFkaW5nO1xuICAgICAgICB0cmFpbGluZyA9ICd0cmFpbGluZycgaW4gb3B0aW9ucyA/ICEhb3B0aW9ucy50cmFpbGluZyA6IHRyYWlsaW5nO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGRlYm91bmNlKGZ1bmMsIHdhaXQsIHtcbiAgICAgICAgJ2xlYWRpbmcnOiBsZWFkaW5nLFxuICAgICAgICAnbWF4V2FpdCc6IHdhaXQsXG4gICAgICAgICd0cmFpbGluZyc6IHRyYWlsaW5nXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBhY2NlcHRzIHVwIHRvIG9uZSBhcmd1bWVudCwgaWdub3JpbmcgYW55XG4gICAgICogYWRkaXRpb25hbCBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjYXAgYXJndW1lbnRzIGZvci5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBjYXBwZWQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ubWFwKFsnNicsICc4JywgJzEwJ10sIF8udW5hcnkocGFyc2VJbnQpKTtcbiAgICAgKiAvLyA9PiBbNiwgOCwgMTBdXG4gICAgICovXG4gICAgZnVuY3Rpb24gdW5hcnkoZnVuYykge1xuICAgICAgcmV0dXJuIGFyeShmdW5jLCAxKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBwcm92aWRlcyBgdmFsdWVgIHRvIGB3cmFwcGVyYCBhcyBpdHMgZmlyc3RcbiAgICAgKiBhcmd1bWVudC4gQW55IGFkZGl0aW9uYWwgYXJndW1lbnRzIHByb3ZpZGVkIHRvIHRoZSBmdW5jdGlvbiBhcmUgYXBwZW5kZWRcbiAgICAgKiB0byB0aG9zZSBwcm92aWRlZCB0byB0aGUgYHdyYXBwZXJgLiBUaGUgd3JhcHBlciBpcyBpbnZva2VkIHdpdGggdGhlIGB0aGlzYFxuICAgICAqIGJpbmRpbmcgb2YgdGhlIGNyZWF0ZWQgZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byB3cmFwLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFt3cmFwcGVyPWlkZW50aXR5XSBUaGUgd3JhcHBlciBmdW5jdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHAgPSBfLndyYXAoXy5lc2NhcGUsIGZ1bmN0aW9uKGZ1bmMsIHRleHQpIHtcbiAgICAgKiAgIHJldHVybiAnPHA+JyArIGZ1bmModGV4dCkgKyAnPC9wPic7XG4gICAgICogfSk7XG4gICAgICpcbiAgICAgKiBwKCdmcmVkLCBiYXJuZXksICYgcGViYmxlcycpO1xuICAgICAqIC8vID0+ICc8cD5mcmVkLCBiYXJuZXksICZhbXA7IHBlYmJsZXM8L3A+J1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHdyYXAodmFsdWUsIHdyYXBwZXIpIHtcbiAgICAgIHJldHVybiBwYXJ0aWFsKGNhc3RGdW5jdGlvbih3cmFwcGVyKSwgdmFsdWUpO1xuICAgIH1cblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIENhc3RzIGB2YWx1ZWAgYXMgYW4gYXJyYXkgaWYgaXQncyBub3Qgb25lLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuNC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBpbnNwZWN0LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgY2FzdCBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5jYXN0QXJyYXkoMSk7XG4gICAgICogLy8gPT4gWzFdXG4gICAgICpcbiAgICAgKiBfLmNhc3RBcnJheSh7ICdhJzogMSB9KTtcbiAgICAgKiAvLyA9PiBbeyAnYSc6IDEgfV1cbiAgICAgKlxuICAgICAqIF8uY2FzdEFycmF5KCdhYmMnKTtcbiAgICAgKiAvLyA9PiBbJ2FiYyddXG4gICAgICpcbiAgICAgKiBfLmNhc3RBcnJheShudWxsKTtcbiAgICAgKiAvLyA9PiBbbnVsbF1cbiAgICAgKlxuICAgICAqIF8uY2FzdEFycmF5KHVuZGVmaW5lZCk7XG4gICAgICogLy8gPT4gW3VuZGVmaW5lZF1cbiAgICAgKlxuICAgICAqIF8uY2FzdEFycmF5KCk7XG4gICAgICogLy8gPT4gW11cbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFsxLCAyLCAzXTtcbiAgICAgKiBjb25zb2xlLmxvZyhfLmNhc3RBcnJheShhcnJheSkgPT09IGFycmF5KTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2FzdEFycmF5KCkge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIHZhciB2YWx1ZSA9IGFyZ3VtZW50c1swXTtcbiAgICAgIHJldHVybiBpc0FycmF5KHZhbHVlKSA/IHZhbHVlIDogW3ZhbHVlXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgc2hhbGxvdyBjbG9uZSBvZiBgdmFsdWVgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGxvb3NlbHkgYmFzZWQgb24gdGhlXG4gICAgICogW3N0cnVjdHVyZWQgY2xvbmUgYWxnb3JpdGhtXShodHRwczovL21kbi5pby9TdHJ1Y3R1cmVkX2Nsb25lX2FsZ29yaXRobSlcbiAgICAgKiBhbmQgc3VwcG9ydHMgY2xvbmluZyBhcnJheXMsIGFycmF5IGJ1ZmZlcnMsIGJvb2xlYW5zLCBkYXRlIG9iamVjdHMsIG1hcHMsXG4gICAgICogbnVtYmVycywgYE9iamVjdGAgb2JqZWN0cywgcmVnZXhlcywgc2V0cywgc3RyaW5ncywgc3ltYm9scywgYW5kIHR5cGVkXG4gICAgICogYXJyYXlzLiBUaGUgb3duIGVudW1lcmFibGUgcHJvcGVydGllcyBvZiBgYXJndW1lbnRzYCBvYmplY3RzIGFyZSBjbG9uZWRcbiAgICAgKiBhcyBwbGFpbiBvYmplY3RzLiBBbiBlbXB0eSBvYmplY3QgaXMgcmV0dXJuZWQgZm9yIHVuY2xvbmVhYmxlIHZhbHVlcyBzdWNoXG4gICAgICogYXMgZXJyb3Igb2JqZWN0cywgZnVuY3Rpb25zLCBET00gbm9kZXMsIGFuZCBXZWFrTWFwcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2xvbmUuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGNsb25lZCB2YWx1ZS5cbiAgICAgKiBAc2VlIF8uY2xvbmVEZWVwXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW3sgJ2EnOiAxIH0sIHsgJ2InOiAyIH1dO1xuICAgICAqXG4gICAgICogdmFyIHNoYWxsb3cgPSBfLmNsb25lKG9iamVjdHMpO1xuICAgICAqIGNvbnNvbGUubG9nKHNoYWxsb3dbMF0gPT09IG9iamVjdHNbMF0pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjbG9uZSh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGJhc2VDbG9uZSh2YWx1ZSwgQ0xPTkVfU1lNQk9MU19GTEFHKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmNsb25lYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBjdXN0b21pemVyYCB3aGljaFxuICAgICAqIGlzIGludm9rZWQgdG8gcHJvZHVjZSB0aGUgY2xvbmVkIHZhbHVlLiBJZiBgY3VzdG9taXplcmAgcmV0dXJucyBgdW5kZWZpbmVkYCxcbiAgICAgKiBjbG9uaW5nIGlzIGhhbmRsZWQgYnkgdGhlIG1ldGhvZCBpbnN0ZWFkLiBUaGUgYGN1c3RvbWl6ZXJgIGlzIGludm9rZWQgd2l0aFxuICAgICAqIHVwIHRvIGZvdXIgYXJndW1lbnRzOyAodmFsdWUgWywgaW5kZXh8a2V5LCBvYmplY3QsIHN0YWNrXSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNsb25lLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNsb25pbmcuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGNsb25lZCB2YWx1ZS5cbiAgICAgKiBAc2VlIF8uY2xvbmVEZWVwV2l0aFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBjdXN0b21pemVyKHZhbHVlKSB7XG4gICAgICogICBpZiAoXy5pc0VsZW1lbnQodmFsdWUpKSB7XG4gICAgICogICAgIHJldHVybiB2YWx1ZS5jbG9uZU5vZGUoZmFsc2UpO1xuICAgICAqICAgfVxuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciBlbCA9IF8uY2xvbmVXaXRoKGRvY3VtZW50LmJvZHksIGN1c3RvbWl6ZXIpO1xuICAgICAqXG4gICAgICogY29uc29sZS5sb2coZWwgPT09IGRvY3VtZW50LmJvZHkpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICogY29uc29sZS5sb2coZWwubm9kZU5hbWUpO1xuICAgICAqIC8vID0+ICdCT0RZJ1xuICAgICAqIGNvbnNvbGUubG9nKGVsLmNoaWxkTm9kZXMubGVuZ3RoKTtcbiAgICAgKiAvLyA9PiAwXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2xvbmVXaXRoKHZhbHVlLCBjdXN0b21pemVyKSB7XG4gICAgICBjdXN0b21pemVyID0gdHlwZW9mIGN1c3RvbWl6ZXIgPT0gJ2Z1bmN0aW9uJyA/IGN1c3RvbWl6ZXIgOiB1bmRlZmluZWQ7XG4gICAgICByZXR1cm4gYmFzZUNsb25lKHZhbHVlLCBDTE9ORV9TWU1CT0xTX0ZMQUcsIGN1c3RvbWl6ZXIpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uY2xvbmVgIGV4Y2VwdCB0aGF0IGl0IHJlY3Vyc2l2ZWx5IGNsb25lcyBgdmFsdWVgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDEuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byByZWN1cnNpdmVseSBjbG9uZS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZGVlcCBjbG9uZWQgdmFsdWUuXG4gICAgICogQHNlZSBfLmNsb25lXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW3sgJ2EnOiAxIH0sIHsgJ2InOiAyIH1dO1xuICAgICAqXG4gICAgICogdmFyIGRlZXAgPSBfLmNsb25lRGVlcChvYmplY3RzKTtcbiAgICAgKiBjb25zb2xlLmxvZyhkZWVwWzBdID09PSBvYmplY3RzWzBdKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNsb25lRGVlcCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGJhc2VDbG9uZSh2YWx1ZSwgQ0xPTkVfREVFUF9GTEFHIHwgQ0xPTkVfU1lNQk9MU19GTEFHKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmNsb25lV2l0aGAgZXhjZXB0IHRoYXQgaXQgcmVjdXJzaXZlbHkgY2xvbmVzIGB2YWx1ZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHJlY3Vyc2l2ZWx5IGNsb25lLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNsb25pbmcuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGRlZXAgY2xvbmVkIHZhbHVlLlxuICAgICAqIEBzZWUgXy5jbG9uZVdpdGhcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gY3VzdG9taXplcih2YWx1ZSkge1xuICAgICAqICAgaWYgKF8uaXNFbGVtZW50KHZhbHVlKSkge1xuICAgICAqICAgICByZXR1cm4gdmFsdWUuY2xvbmVOb2RlKHRydWUpO1xuICAgICAqICAgfVxuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciBlbCA9IF8uY2xvbmVEZWVwV2l0aChkb2N1bWVudC5ib2R5LCBjdXN0b21pemVyKTtcbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKGVsID09PSBkb2N1bWVudC5ib2R5KTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqIGNvbnNvbGUubG9nKGVsLm5vZGVOYW1lKTtcbiAgICAgKiAvLyA9PiAnQk9EWSdcbiAgICAgKiBjb25zb2xlLmxvZyhlbC5jaGlsZE5vZGVzLmxlbmd0aCk7XG4gICAgICogLy8gPT4gMjBcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjbG9uZURlZXBXaXRoKHZhbHVlLCBjdXN0b21pemVyKSB7XG4gICAgICBjdXN0b21pemVyID0gdHlwZW9mIGN1c3RvbWl6ZXIgPT0gJ2Z1bmN0aW9uJyA/IGN1c3RvbWl6ZXIgOiB1bmRlZmluZWQ7XG4gICAgICByZXR1cm4gYmFzZUNsb25lKHZhbHVlLCBDTE9ORV9ERUVQX0ZMQUcgfCBDTE9ORV9TWU1CT0xTX0ZMQUcsIGN1c3RvbWl6ZXIpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgb2JqZWN0YCBjb25mb3JtcyB0byBgc291cmNlYCBieSBpbnZva2luZyB0aGUgcHJlZGljYXRlXG4gICAgICogcHJvcGVydGllcyBvZiBgc291cmNlYCB3aXRoIHRoZSBjb3JyZXNwb25kaW5nIHByb3BlcnR5IHZhbHVlcyBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBlcXVpdmFsZW50IHRvIGBfLmNvbmZvcm1zYCB3aGVuIGBzb3VyY2VgIGlzXG4gICAgICogcGFydGlhbGx5IGFwcGxpZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4xNC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3Qgb2YgcHJvcGVydHkgcHJlZGljYXRlcyB0byBjb25mb3JtIHRvLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgb2JqZWN0YCBjb25mb3JtcywgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEsICdiJzogMiB9O1xuICAgICAqXG4gICAgICogXy5jb25mb3Jtc1RvKG9iamVjdCwgeyAnYic6IGZ1bmN0aW9uKG4pIHsgcmV0dXJuIG4gPiAxOyB9IH0pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uY29uZm9ybXNUbyhvYmplY3QsIHsgJ2InOiBmdW5jdGlvbihuKSB7IHJldHVybiBuID4gMjsgfSB9KTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvbmZvcm1zVG8ob2JqZWN0LCBzb3VyY2UpIHtcbiAgICAgIHJldHVybiBzb3VyY2UgPT0gbnVsbCB8fCBiYXNlQ29uZm9ybXNUbyhvYmplY3QsIHNvdXJjZSwga2V5cyhzb3VyY2UpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBQZXJmb3JtcyBhXG4gICAgICogW2BTYW1lVmFsdWVaZXJvYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtc2FtZXZhbHVlemVybylcbiAgICAgKiBjb21wYXJpc29uIGJldHdlZW4gdHdvIHZhbHVlcyB0byBkZXRlcm1pbmUgaWYgdGhleSBhcmUgZXF1aXZhbGVudC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0geyp9IG90aGVyIFRoZSBvdGhlciB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgdmFsdWVzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogMSB9O1xuICAgICAqIHZhciBvdGhlciA9IHsgJ2EnOiAxIH07XG4gICAgICpcbiAgICAgKiBfLmVxKG9iamVjdCwgb2JqZWN0KTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmVxKG9iamVjdCwgb3RoZXIpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmVxKCdhJywgJ2EnKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmVxKCdhJywgT2JqZWN0KCdhJykpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmVxKE5hTiwgTmFOKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gZXEodmFsdWUsIG90aGVyKSB7XG4gICAgICByZXR1cm4gdmFsdWUgPT09IG90aGVyIHx8ICh2YWx1ZSAhPT0gdmFsdWUgJiYgb3RoZXIgIT09IG90aGVyKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBncmVhdGVyIHRoYW4gYG90aGVyYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjkuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0geyp9IG90aGVyIFRoZSBvdGhlciB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGdyZWF0ZXIgdGhhbiBgb3RoZXJgLFxuICAgICAqICBlbHNlIGBmYWxzZWAuXG4gICAgICogQHNlZSBfLmx0XG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZ3QoMywgMSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5ndCgzLCAzKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5ndCgxLCAzKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIHZhciBndCA9IGNyZWF0ZVJlbGF0aW9uYWxPcGVyYXRpb24oYmFzZUd0KTtcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGdyZWF0ZXIgdGhhbiBvciBlcXVhbCB0byBgb3RoZXJgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuOS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgZ3JlYXRlciB0aGFuIG9yIGVxdWFsIHRvXG4gICAgICogIGBvdGhlcmAsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAc2VlIF8ubHRlXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZ3RlKDMsIDEpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uZ3RlKDMsIDMpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uZ3RlKDEsIDMpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgdmFyIGd0ZSA9IGNyZWF0ZVJlbGF0aW9uYWxPcGVyYXRpb24oZnVuY3Rpb24odmFsdWUsIG90aGVyKSB7XG4gICAgICByZXR1cm4gdmFsdWUgPj0gb3RoZXI7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBsaWtlbHkgYW4gYGFyZ3VtZW50c2Agb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBgYXJndW1lbnRzYCBvYmplY3QsXG4gICAgICogIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc0FyZ3VtZW50cyhmdW5jdGlvbigpIHsgcmV0dXJuIGFyZ3VtZW50czsgfSgpKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzQXJndW1lbnRzKFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICB2YXIgaXNBcmd1bWVudHMgPSBiYXNlSXNBcmd1bWVudHMoZnVuY3Rpb24oKSB7IHJldHVybiBhcmd1bWVudHM7IH0oKSkgPyBiYXNlSXNBcmd1bWVudHMgOiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwgJ2NhbGxlZScpICYmXG4gICAgICAgICFwcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHZhbHVlLCAnY2FsbGVlJyk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYW4gYEFycmF5YCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGFycmF5LCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNBcnJheShbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNBcnJheShkb2N1bWVudC5ib2R5LmNoaWxkcmVuKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pc0FycmF5KCdhYmMnKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pc0FycmF5KF8ubm9vcCk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICB2YXIgaXNBcnJheSA9IEFycmF5LmlzQXJyYXk7XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGFuIGBBcnJheUJ1ZmZlcmAgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMy4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBhcnJheSBidWZmZXIsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc0FycmF5QnVmZmVyKG5ldyBBcnJheUJ1ZmZlcigyKSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0FycmF5QnVmZmVyKG5ldyBBcnJheSgyKSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICB2YXIgaXNBcnJheUJ1ZmZlciA9IG5vZGVJc0FycmF5QnVmZmVyID8gYmFzZVVuYXJ5KG5vZGVJc0FycmF5QnVmZmVyKSA6IGJhc2VJc0FycmF5QnVmZmVyO1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYXJyYXktbGlrZS4gQSB2YWx1ZSBpcyBjb25zaWRlcmVkIGFycmF5LWxpa2UgaWYgaXQnc1xuICAgICAqIG5vdCBhIGZ1bmN0aW9uIGFuZCBoYXMgYSBgdmFsdWUubGVuZ3RoYCB0aGF0J3MgYW4gaW50ZWdlciBncmVhdGVyIHRoYW4gb3JcbiAgICAgKiBlcXVhbCB0byBgMGAgYW5kIGxlc3MgdGhhbiBvciBlcXVhbCB0byBgTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVJgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhcnJheS1saWtlLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNBcnJheUxpa2UoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzQXJyYXlMaWtlKGRvY3VtZW50LmJvZHkuY2hpbGRyZW4pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNBcnJheUxpa2UoJ2FiYycpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNBcnJheUxpa2UoXy5ub29wKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzQXJyYXlMaWtlKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdmFsdWUgIT0gbnVsbCAmJiBpc0xlbmd0aCh2YWx1ZS5sZW5ndGgpICYmICFpc0Z1bmN0aW9uKHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmlzQXJyYXlMaWtlYCBleGNlcHQgdGhhdCBpdCBhbHNvIGNoZWNrcyBpZiBgdmFsdWVgXG4gICAgICogaXMgYW4gb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBhcnJheS1saWtlIG9iamVjdCxcbiAgICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzQXJyYXlMaWtlT2JqZWN0KFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0FycmF5TGlrZU9iamVjdChkb2N1bWVudC5ib2R5LmNoaWxkcmVuKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzQXJyYXlMaWtlT2JqZWN0KCdhYmMnKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pc0FycmF5TGlrZU9iamVjdChfLm5vb3ApO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNBcnJheUxpa2VPYmplY3QodmFsdWUpIHtcbiAgICAgIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIGlzQXJyYXlMaWtlKHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYm9vbGVhbiBwcmltaXRpdmUgb3Igb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIGJvb2xlYW4sIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc0Jvb2xlYW4oZmFsc2UpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNCb29sZWFuKG51bGwpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNCb29sZWFuKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdmFsdWUgPT09IHRydWUgfHwgdmFsdWUgPT09IGZhbHNlIHx8XG4gICAgICAgIChpc09iamVjdExpa2UodmFsdWUpICYmIGJhc2VHZXRUYWcodmFsdWUpID09IGJvb2xUYWcpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgYnVmZmVyLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMy4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIGJ1ZmZlciwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzQnVmZmVyKG5ldyBCdWZmZXIoMikpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNCdWZmZXIobmV3IFVpbnQ4QXJyYXkoMikpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgdmFyIGlzQnVmZmVyID0gbmF0aXZlSXNCdWZmZXIgfHwgc3R1YkZhbHNlO1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBEYXRlYCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgZGF0ZSBvYmplY3QsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc0RhdGUobmV3IERhdGUpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNEYXRlKCdNb24gQXByaWwgMjMgMjAxMicpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgdmFyIGlzRGF0ZSA9IG5vZGVJc0RhdGUgPyBiYXNlVW5hcnkobm9kZUlzRGF0ZSkgOiBiYXNlSXNEYXRlO1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgbGlrZWx5IGEgRE9NIGVsZW1lbnQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgRE9NIGVsZW1lbnQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc0VsZW1lbnQoZG9jdW1lbnQuYm9keSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0VsZW1lbnQoJzxib2R5PicpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNFbGVtZW50KHZhbHVlKSB7XG4gICAgICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiB2YWx1ZS5ub2RlVHlwZSA9PT0gMSAmJiAhaXNQbGFpbk9iamVjdCh2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYW4gZW1wdHkgb2JqZWN0LCBjb2xsZWN0aW9uLCBtYXAsIG9yIHNldC5cbiAgICAgKlxuICAgICAqIE9iamVjdHMgYXJlIGNvbnNpZGVyZWQgZW1wdHkgaWYgdGhleSBoYXZlIG5vIG93biBlbnVtZXJhYmxlIHN0cmluZyBrZXllZFxuICAgICAqIHByb3BlcnRpZXMuXG4gICAgICpcbiAgICAgKiBBcnJheS1saWtlIHZhbHVlcyBzdWNoIGFzIGBhcmd1bWVudHNgIG9iamVjdHMsIGFycmF5cywgYnVmZmVycywgc3RyaW5ncywgb3JcbiAgICAgKiBqUXVlcnktbGlrZSBjb2xsZWN0aW9ucyBhcmUgY29uc2lkZXJlZCBlbXB0eSBpZiB0aGV5IGhhdmUgYSBgbGVuZ3RoYCBvZiBgMGAuXG4gICAgICogU2ltaWxhcmx5LCBtYXBzIGFuZCBzZXRzIGFyZSBjb25zaWRlcmVkIGVtcHR5IGlmIHRoZXkgaGF2ZSBhIGBzaXplYCBvZiBgMGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGVtcHR5LCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNFbXB0eShudWxsKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzRW1wdHkodHJ1ZSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0VtcHR5KDEpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNFbXB0eShbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmlzRW1wdHkoeyAnYSc6IDEgfSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0VtcHR5KHZhbHVlKSB7XG4gICAgICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGlmIChpc0FycmF5TGlrZSh2YWx1ZSkgJiZcbiAgICAgICAgICAoaXNBcnJheSh2YWx1ZSkgfHwgdHlwZW9mIHZhbHVlID09ICdzdHJpbmcnIHx8IHR5cGVvZiB2YWx1ZS5zcGxpY2UgPT0gJ2Z1bmN0aW9uJyB8fFxuICAgICAgICAgICAgaXNCdWZmZXIodmFsdWUpIHx8IGlzVHlwZWRBcnJheSh2YWx1ZSkgfHwgaXNBcmd1bWVudHModmFsdWUpKSkge1xuICAgICAgICByZXR1cm4gIXZhbHVlLmxlbmd0aDtcbiAgICAgIH1cbiAgICAgIHZhciB0YWcgPSBnZXRUYWcodmFsdWUpO1xuICAgICAgaWYgKHRhZyA9PSBtYXBUYWcgfHwgdGFnID09IHNldFRhZykge1xuICAgICAgICByZXR1cm4gIXZhbHVlLnNpemU7XG4gICAgICB9XG4gICAgICBpZiAoaXNQcm90b3R5cGUodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiAhYmFzZUtleXModmFsdWUpLmxlbmd0aDtcbiAgICAgIH1cbiAgICAgIGZvciAodmFyIGtleSBpbiB2YWx1ZSkge1xuICAgICAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwga2V5KSkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUGVyZm9ybXMgYSBkZWVwIGNvbXBhcmlzb24gYmV0d2VlbiB0d28gdmFsdWVzIHRvIGRldGVybWluZSBpZiB0aGV5IGFyZVxuICAgICAqIGVxdWl2YWxlbnQuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2Qgc3VwcG9ydHMgY29tcGFyaW5nIGFycmF5cywgYXJyYXkgYnVmZmVycywgYm9vbGVhbnMsXG4gICAgICogZGF0ZSBvYmplY3RzLCBlcnJvciBvYmplY3RzLCBtYXBzLCBudW1iZXJzLCBgT2JqZWN0YCBvYmplY3RzLCByZWdleGVzLFxuICAgICAqIHNldHMsIHN0cmluZ3MsIHN5bWJvbHMsIGFuZCB0eXBlZCBhcnJheXMuIGBPYmplY3RgIG9iamVjdHMgYXJlIGNvbXBhcmVkXG4gICAgICogYnkgdGhlaXIgb3duLCBub3QgaW5oZXJpdGVkLCBlbnVtZXJhYmxlIHByb3BlcnRpZXMuIEZ1bmN0aW9ucyBhbmQgRE9NXG4gICAgICogbm9kZXMgYXJlIGNvbXBhcmVkIGJ5IHN0cmljdCBlcXVhbGl0eSwgaS5lLiBgPT09YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0geyp9IG90aGVyIFRoZSBvdGhlciB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgdmFsdWVzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogMSB9O1xuICAgICAqIHZhciBvdGhlciA9IHsgJ2EnOiAxIH07XG4gICAgICpcbiAgICAgKiBfLmlzRXF1YWwob2JqZWN0LCBvdGhlcik7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogb2JqZWN0ID09PSBvdGhlcjtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzRXF1YWwodmFsdWUsIG90aGVyKSB7XG4gICAgICByZXR1cm4gYmFzZUlzRXF1YWwodmFsdWUsIG90aGVyKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmlzRXF1YWxgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGN1c3RvbWl6ZXJgIHdoaWNoXG4gICAgICogaXMgaW52b2tlZCB0byBjb21wYXJlIHZhbHVlcy4gSWYgYGN1c3RvbWl6ZXJgIHJldHVybnMgYHVuZGVmaW5lZGAsIGNvbXBhcmlzb25zXG4gICAgICogYXJlIGhhbmRsZWQgYnkgdGhlIG1ldGhvZCBpbnN0ZWFkLiBUaGUgYGN1c3RvbWl6ZXJgIGlzIGludm9rZWQgd2l0aCB1cCB0b1xuICAgICAqIHNpeCBhcmd1bWVudHM6IChvYmpWYWx1ZSwgb3RoVmFsdWUgWywgaW5kZXh8a2V5LCBvYmplY3QsIG90aGVyLCBzdGFja10pLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29tcGFyaXNvbnMuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSB2YWx1ZXMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gaXNHcmVldGluZyh2YWx1ZSkge1xuICAgICAqICAgcmV0dXJuIC9eaCg/Oml8ZWxsbykkLy50ZXN0KHZhbHVlKTtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBjdXN0b21pemVyKG9ialZhbHVlLCBvdGhWYWx1ZSkge1xuICAgICAqICAgaWYgKGlzR3JlZXRpbmcob2JqVmFsdWUpICYmIGlzR3JlZXRpbmcob3RoVmFsdWUpKSB7XG4gICAgICogICAgIHJldHVybiB0cnVlO1xuICAgICAqICAgfVxuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFsnaGVsbG8nLCAnZ29vZGJ5ZSddO1xuICAgICAqIHZhciBvdGhlciA9IFsnaGknLCAnZ29vZGJ5ZSddO1xuICAgICAqXG4gICAgICogXy5pc0VxdWFsV2l0aChhcnJheSwgb3RoZXIsIGN1c3RvbWl6ZXIpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0VxdWFsV2l0aCh2YWx1ZSwgb3RoZXIsIGN1c3RvbWl6ZXIpIHtcbiAgICAgIGN1c3RvbWl6ZXIgPSB0eXBlb2YgY3VzdG9taXplciA9PSAnZnVuY3Rpb24nID8gY3VzdG9taXplciA6IHVuZGVmaW5lZDtcbiAgICAgIHZhciByZXN1bHQgPSBjdXN0b21pemVyID8gY3VzdG9taXplcih2YWx1ZSwgb3RoZXIpIDogdW5kZWZpbmVkO1xuICAgICAgcmV0dXJuIHJlc3VsdCA9PT0gdW5kZWZpbmVkID8gYmFzZUlzRXF1YWwodmFsdWUsIG90aGVyLCB1bmRlZmluZWQsIGN1c3RvbWl6ZXIpIDogISFyZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYW4gYEVycm9yYCwgYEV2YWxFcnJvcmAsIGBSYW5nZUVycm9yYCwgYFJlZmVyZW5jZUVycm9yYCxcbiAgICAgKiBgU3ludGF4RXJyb3JgLCBgVHlwZUVycm9yYCwgb3IgYFVSSUVycm9yYCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGVycm9yIG9iamVjdCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzRXJyb3IobmV3IEVycm9yKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzRXJyb3IoRXJyb3IpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNFcnJvcih2YWx1ZSkge1xuICAgICAgaWYgKCFpc09iamVjdExpa2UodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHZhciB0YWcgPSBiYXNlR2V0VGFnKHZhbHVlKTtcbiAgICAgIHJldHVybiB0YWcgPT0gZXJyb3JUYWcgfHwgdGFnID09IGRvbUV4Y1RhZyB8fFxuICAgICAgICAodHlwZW9mIHZhbHVlLm1lc3NhZ2UgPT0gJ3N0cmluZycgJiYgdHlwZW9mIHZhbHVlLm5hbWUgPT0gJ3N0cmluZycgJiYgIWlzUGxhaW5PYmplY3QodmFsdWUpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIGZpbml0ZSBwcmltaXRpdmUgbnVtYmVyLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGJhc2VkIG9uXG4gICAgICogW2BOdW1iZXIuaXNGaW5pdGVgXShodHRwczovL21kbi5pby9OdW1iZXIvaXNGaW5pdGUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIGZpbml0ZSBudW1iZXIsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc0Zpbml0ZSgzKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzRmluaXRlKE51bWJlci5NSU5fVkFMVUUpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNGaW5pdGUoSW5maW5pdHkpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmlzRmluaXRlKCczJyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0Zpbml0ZSh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnbnVtYmVyJyAmJiBuYXRpdmVJc0Zpbml0ZSh2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBGdW5jdGlvbmAgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIGZ1bmN0aW9uLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNGdW5jdGlvbihfKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzRnVuY3Rpb24oL2FiYy8pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNGdW5jdGlvbih2YWx1ZSkge1xuICAgICAgaWYgKCFpc09iamVjdCh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgLy8gVGhlIHVzZSBvZiBgT2JqZWN0I3RvU3RyaW5nYCBhdm9pZHMgaXNzdWVzIHdpdGggdGhlIGB0eXBlb2ZgIG9wZXJhdG9yXG4gICAgICAvLyBpbiBTYWZhcmkgOSB3aGljaCByZXR1cm5zICdvYmplY3QnIGZvciB0eXBlZCBhcnJheXMgYW5kIG90aGVyIGNvbnN0cnVjdG9ycy5cbiAgICAgIHZhciB0YWcgPSBiYXNlR2V0VGFnKHZhbHVlKTtcbiAgICAgIHJldHVybiB0YWcgPT0gZnVuY1RhZyB8fCB0YWcgPT0gZ2VuVGFnIHx8IHRhZyA9PSBhc3luY1RhZyB8fCB0YWcgPT0gcHJveHlUYWc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYW4gaW50ZWdlci5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBiYXNlZCBvblxuICAgICAqIFtgTnVtYmVyLmlzSW50ZWdlcmBdKGh0dHBzOi8vbWRuLmlvL051bWJlci9pc0ludGVnZXIpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBpbnRlZ2VyLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNJbnRlZ2VyKDMpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNJbnRlZ2VyKE51bWJlci5NSU5fVkFMVUUpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmlzSW50ZWdlcihJbmZpbml0eSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNJbnRlZ2VyKCczJyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0ludGVnZXIodmFsdWUpIHtcbiAgICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT0gJ251bWJlcicgJiYgdmFsdWUgPT0gdG9JbnRlZ2VyKHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIHZhbGlkIGFycmF5LWxpa2UgbGVuZ3RoLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGxvb3NlbHkgYmFzZWQgb25cbiAgICAgKiBbYFRvTGVuZ3RoYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtdG9sZW5ndGgpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHZhbGlkIGxlbmd0aCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzTGVuZ3RoKDMpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNMZW5ndGgoTnVtYmVyLk1JTl9WQUxVRSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNMZW5ndGgoSW5maW5pdHkpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmlzTGVuZ3RoKCczJyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0xlbmd0aCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnbnVtYmVyJyAmJlxuICAgICAgICB2YWx1ZSA+IC0xICYmIHZhbHVlICUgMSA9PSAwICYmIHZhbHVlIDw9IE1BWF9TQUZFX0lOVEVHRVI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgdGhlXG4gICAgICogW2xhbmd1YWdlIHR5cGVdKGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1lY21hc2NyaXB0LWxhbmd1YWdlLXR5cGVzKVxuICAgICAqIG9mIGBPYmplY3RgLiAoZS5nLiBhcnJheXMsIGZ1bmN0aW9ucywgb2JqZWN0cywgcmVnZXhlcywgYG5ldyBOdW1iZXIoMClgLCBhbmQgYG5ldyBTdHJpbmcoJycpYClcbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gb2JqZWN0LCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNPYmplY3Qoe30pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNPYmplY3QoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzT2JqZWN0KF8ubm9vcCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc09iamVjdChudWxsKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzT2JqZWN0KHZhbHVlKSB7XG4gICAgICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgICAgIHJldHVybiB2YWx1ZSAhPSBudWxsICYmICh0eXBlID09ICdvYmplY3QnIHx8IHR5cGUgPT0gJ2Z1bmN0aW9uJyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgb2JqZWN0LWxpa2UuIEEgdmFsdWUgaXMgb2JqZWN0LWxpa2UgaWYgaXQncyBub3QgYG51bGxgXG4gICAgICogYW5kIGhhcyBhIGB0eXBlb2ZgIHJlc3VsdCBvZiBcIm9iamVjdFwiLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBvYmplY3QtbGlrZSwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzT2JqZWN0TGlrZSh7fSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc09iamVjdExpa2UoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzT2JqZWN0TGlrZShfLm5vb3ApO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmlzT2JqZWN0TGlrZShudWxsKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzT2JqZWN0TGlrZSh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHZhbHVlICE9IG51bGwgJiYgdHlwZW9mIHZhbHVlID09ICdvYmplY3QnO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgTWFwYCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4zLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgbWFwLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNNYXAobmV3IE1hcCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc01hcChuZXcgV2Vha01hcCk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICB2YXIgaXNNYXAgPSBub2RlSXNNYXAgPyBiYXNlVW5hcnkobm9kZUlzTWFwKSA6IGJhc2VJc01hcDtcblxuICAgIC8qKlxuICAgICAqIFBlcmZvcm1zIGEgcGFydGlhbCBkZWVwIGNvbXBhcmlzb24gYmV0d2VlbiBgb2JqZWN0YCBhbmQgYHNvdXJjZWAgdG9cbiAgICAgKiBkZXRlcm1pbmUgaWYgYG9iamVjdGAgY29udGFpbnMgZXF1aXZhbGVudCBwcm9wZXJ0eSB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgZXF1aXZhbGVudCB0byBgXy5tYXRjaGVzYCB3aGVuIGBzb3VyY2VgIGlzXG4gICAgICogcGFydGlhbGx5IGFwcGxpZWQuXG4gICAgICpcbiAgICAgKiBQYXJ0aWFsIGNvbXBhcmlzb25zIHdpbGwgbWF0Y2ggZW1wdHkgYXJyYXkgYW5kIGVtcHR5IG9iamVjdCBgc291cmNlYFxuICAgICAqIHZhbHVlcyBhZ2FpbnN0IGFueSBhcnJheSBvciBvYmplY3QgdmFsdWUsIHJlc3BlY3RpdmVseS4gU2VlIGBfLmlzRXF1YWxgXG4gICAgICogZm9yIGEgbGlzdCBvZiBzdXBwb3J0ZWQgdmFsdWUgY29tcGFyaXNvbnMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCBvZiBwcm9wZXJ0eSB2YWx1ZXMgdG8gbWF0Y2guXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBvYmplY3RgIGlzIGEgbWF0Y2gsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxLCAnYic6IDIgfTtcbiAgICAgKlxuICAgICAqIF8uaXNNYXRjaChvYmplY3QsIHsgJ2InOiAyIH0pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNNYXRjaChvYmplY3QsIHsgJ2InOiAxIH0pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNNYXRjaChvYmplY3QsIHNvdXJjZSkge1xuICAgICAgcmV0dXJuIG9iamVjdCA9PT0gc291cmNlIHx8IGJhc2VJc01hdGNoKG9iamVjdCwgc291cmNlLCBnZXRNYXRjaERhdGEoc291cmNlKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5pc01hdGNoYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBjdXN0b21pemVyYCB3aGljaFxuICAgICAqIGlzIGludm9rZWQgdG8gY29tcGFyZSB2YWx1ZXMuIElmIGBjdXN0b21pemVyYCByZXR1cm5zIGB1bmRlZmluZWRgLCBjb21wYXJpc29uc1xuICAgICAqIGFyZSBoYW5kbGVkIGJ5IHRoZSBtZXRob2QgaW5zdGVhZC4gVGhlIGBjdXN0b21pemVyYCBpcyBpbnZva2VkIHdpdGggZml2ZVxuICAgICAqIGFyZ3VtZW50czogKG9ialZhbHVlLCBzcmNWYWx1ZSwgaW5kZXh8a2V5LCBvYmplY3QsIHNvdXJjZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCBvZiBwcm9wZXJ0eSB2YWx1ZXMgdG8gbWF0Y2guXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29tcGFyaXNvbnMuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBvYmplY3RgIGlzIGEgbWF0Y2gsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gaXNHcmVldGluZyh2YWx1ZSkge1xuICAgICAqICAgcmV0dXJuIC9eaCg/Oml8ZWxsbykkLy50ZXN0KHZhbHVlKTtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBjdXN0b21pemVyKG9ialZhbHVlLCBzcmNWYWx1ZSkge1xuICAgICAqICAgaWYgKGlzR3JlZXRpbmcob2JqVmFsdWUpICYmIGlzR3JlZXRpbmcoc3JjVmFsdWUpKSB7XG4gICAgICogICAgIHJldHVybiB0cnVlO1xuICAgICAqICAgfVxuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdncmVldGluZyc6ICdoZWxsbycgfTtcbiAgICAgKiB2YXIgc291cmNlID0geyAnZ3JlZXRpbmcnOiAnaGknIH07XG4gICAgICpcbiAgICAgKiBfLmlzTWF0Y2hXaXRoKG9iamVjdCwgc291cmNlLCBjdXN0b21pemVyKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNNYXRjaFdpdGgob2JqZWN0LCBzb3VyY2UsIGN1c3RvbWl6ZXIpIHtcbiAgICAgIGN1c3RvbWl6ZXIgPSB0eXBlb2YgY3VzdG9taXplciA9PSAnZnVuY3Rpb24nID8gY3VzdG9taXplciA6IHVuZGVmaW5lZDtcbiAgICAgIHJldHVybiBiYXNlSXNNYXRjaChvYmplY3QsIHNvdXJjZSwgZ2V0TWF0Y2hEYXRhKHNvdXJjZSksIGN1c3RvbWl6ZXIpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGBOYU5gLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGJhc2VkIG9uXG4gICAgICogW2BOdW1iZXIuaXNOYU5gXShodHRwczovL21kbi5pby9OdW1iZXIvaXNOYU4pIGFuZCBpcyBub3QgdGhlIHNhbWUgYXNcbiAgICAgKiBnbG9iYWwgW2Bpc05hTmBdKGh0dHBzOi8vbWRuLmlvL2lzTmFOKSB3aGljaCByZXR1cm5zIGB0cnVlYCBmb3JcbiAgICAgKiBgdW5kZWZpbmVkYCBhbmQgb3RoZXIgbm9uLW51bWJlciB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGBOYU5gLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNOYU4oTmFOKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzTmFOKG5ldyBOdW1iZXIoTmFOKSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogaXNOYU4odW5kZWZpbmVkKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzTmFOKHVuZGVmaW5lZCk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc05hTih2YWx1ZSkge1xuICAgICAgLy8gQW4gYE5hTmAgcHJpbWl0aXZlIGlzIHRoZSBvbmx5IHZhbHVlIHRoYXQgaXMgbm90IGVxdWFsIHRvIGl0c2VsZi5cbiAgICAgIC8vIFBlcmZvcm0gdGhlIGB0b1N0cmluZ1RhZ2AgY2hlY2sgZmlyc3QgdG8gYXZvaWQgZXJyb3JzIHdpdGggc29tZVxuICAgICAgLy8gQWN0aXZlWCBvYmplY3RzIGluIElFLlxuICAgICAgcmV0dXJuIGlzTnVtYmVyKHZhbHVlKSAmJiB2YWx1ZSAhPSArdmFsdWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSBwcmlzdGluZSBuYXRpdmUgZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgY2FuJ3QgcmVsaWFibHkgZGV0ZWN0IG5hdGl2ZSBmdW5jdGlvbnMgaW4gdGhlIHByZXNlbmNlXG4gICAgICogb2YgdGhlIGNvcmUtanMgcGFja2FnZSBiZWNhdXNlIGNvcmUtanMgY2lyY3VtdmVudHMgdGhpcyBraW5kIG9mIGRldGVjdGlvbi5cbiAgICAgKiBEZXNwaXRlIG11bHRpcGxlIHJlcXVlc3RzLCB0aGUgY29yZS1qcyBtYWludGFpbmVyIGhhcyBtYWRlIGl0IGNsZWFyOiBhbnlcbiAgICAgKiBhdHRlbXB0IHRvIGZpeCB0aGUgZGV0ZWN0aW9uIHdpbGwgYmUgb2JzdHJ1Y3RlZC4gQXMgYSByZXN1bHQsIHdlJ3JlIGxlZnRcbiAgICAgKiB3aXRoIGxpdHRsZSBjaG9pY2UgYnV0IHRvIHRocm93IGFuIGVycm9yLiBVbmZvcnR1bmF0ZWx5LCB0aGlzIGFsc28gYWZmZWN0c1xuICAgICAqIHBhY2thZ2VzLCBsaWtlIFtiYWJlbC1wb2x5ZmlsbF0oaHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvYmFiZWwtcG9seWZpbGwpLFxuICAgICAqIHdoaWNoIHJlbHkgb24gY29yZS1qcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBuYXRpdmUgZnVuY3Rpb24sXG4gICAgICogIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc05hdGl2ZShBcnJheS5wcm90b3R5cGUucHVzaCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc05hdGl2ZShfKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzTmF0aXZlKHZhbHVlKSB7XG4gICAgICBpZiAoaXNNYXNrYWJsZSh2YWx1ZSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKENPUkVfRVJST1JfVEVYVCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZUlzTmF0aXZlKHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBgbnVsbGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGBudWxsYCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzTnVsbChudWxsKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzTnVsbCh2b2lkIDApO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNOdWxsKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdmFsdWUgPT09IG51bGw7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYG51bGxgIG9yIGB1bmRlZmluZWRgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBudWxsaXNoLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNOaWwobnVsbCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc05pbCh2b2lkIDApO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNOaWwoTmFOKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzTmlsKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdmFsdWUgPT0gbnVsbDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYE51bWJlcmAgcHJpbWl0aXZlIG9yIG9iamVjdC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUbyBleGNsdWRlIGBJbmZpbml0eWAsIGAtSW5maW5pdHlgLCBhbmQgYE5hTmAsIHdoaWNoIGFyZVxuICAgICAqIGNsYXNzaWZpZWQgYXMgbnVtYmVycywgdXNlIHRoZSBgXy5pc0Zpbml0ZWAgbWV0aG9kLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIG51bWJlciwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzTnVtYmVyKDMpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNOdW1iZXIoTnVtYmVyLk1JTl9WQUxVRSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc051bWJlcihJbmZpbml0eSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc051bWJlcignMycpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNOdW1iZXIodmFsdWUpIHtcbiAgICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT0gJ251bWJlcicgfHxcbiAgICAgICAgKGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgYmFzZUdldFRhZyh2YWx1ZSkgPT0gbnVtYmVyVGFnKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIHBsYWluIG9iamVjdCwgdGhhdCBpcywgYW4gb2JqZWN0IGNyZWF0ZWQgYnkgdGhlXG4gICAgICogYE9iamVjdGAgY29uc3RydWN0b3Igb3Igb25lIHdpdGggYSBgW1tQcm90b3R5cGVdXWAgb2YgYG51bGxgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuOC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHBsYWluIG9iamVjdCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBGb28oKSB7XG4gICAgICogICB0aGlzLmEgPSAxO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIF8uaXNQbGFpbk9iamVjdChuZXcgRm9vKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pc1BsYWluT2JqZWN0KFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNQbGFpbk9iamVjdCh7ICd4JzogMCwgJ3knOiAwIH0pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNQbGFpbk9iamVjdChPYmplY3QuY3JlYXRlKG51bGwpKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNQbGFpbk9iamVjdCh2YWx1ZSkge1xuICAgICAgaWYgKCFpc09iamVjdExpa2UodmFsdWUpIHx8IGJhc2VHZXRUYWcodmFsdWUpICE9IG9iamVjdFRhZykge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICB2YXIgcHJvdG8gPSBnZXRQcm90b3R5cGUodmFsdWUpO1xuICAgICAgaWYgKHByb3RvID09PSBudWxsKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgdmFyIEN0b3IgPSBoYXNPd25Qcm9wZXJ0eS5jYWxsKHByb3RvLCAnY29uc3RydWN0b3InKSAmJiBwcm90by5jb25zdHJ1Y3RvcjtcbiAgICAgIHJldHVybiB0eXBlb2YgQ3RvciA9PSAnZnVuY3Rpb24nICYmIEN0b3IgaW5zdGFuY2VvZiBDdG9yICYmXG4gICAgICAgIGZ1bmNUb1N0cmluZy5jYWxsKEN0b3IpID09IG9iamVjdEN0b3JTdHJpbmc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBSZWdFeHBgIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSByZWdleHAsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc1JlZ0V4cCgvYWJjLyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc1JlZ0V4cCgnL2FiYy8nKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIHZhciBpc1JlZ0V4cCA9IG5vZGVJc1JlZ0V4cCA/IGJhc2VVbmFyeShub2RlSXNSZWdFeHApIDogYmFzZUlzUmVnRXhwO1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSBzYWZlIGludGVnZXIuIEFuIGludGVnZXIgaXMgc2FmZSBpZiBpdCdzIGFuIElFRUUtNzU0XG4gICAgICogZG91YmxlIHByZWNpc2lvbiBudW1iZXIgd2hpY2ggaXNuJ3QgdGhlIHJlc3VsdCBvZiBhIHJvdW5kZWQgdW5zYWZlIGludGVnZXIuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgYmFzZWQgb25cbiAgICAgKiBbYE51bWJlci5pc1NhZmVJbnRlZ2VyYF0oaHR0cHM6Ly9tZG4uaW8vTnVtYmVyL2lzU2FmZUludGVnZXIpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHNhZmUgaW50ZWdlciwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzU2FmZUludGVnZXIoMyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc1NhZmVJbnRlZ2VyKE51bWJlci5NSU5fVkFMVUUpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmlzU2FmZUludGVnZXIoSW5maW5pdHkpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmlzU2FmZUludGVnZXIoJzMnKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzU2FmZUludGVnZXIodmFsdWUpIHtcbiAgICAgIHJldHVybiBpc0ludGVnZXIodmFsdWUpICYmIHZhbHVlID49IC1NQVhfU0FGRV9JTlRFR0VSICYmIHZhbHVlIDw9IE1BWF9TQUZFX0lOVEVHRVI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBTZXRgIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjMuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBzZXQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc1NldChuZXcgU2V0KTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzU2V0KG5ldyBXZWFrU2V0KTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIHZhciBpc1NldCA9IG5vZGVJc1NldCA/IGJhc2VVbmFyeShub2RlSXNTZXQpIDogYmFzZUlzU2V0O1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBTdHJpbmdgIHByaW1pdGl2ZSBvciBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgc3RyaW5nLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNTdHJpbmcoJ2FiYycpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNTdHJpbmcoMSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc1N0cmluZyh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnc3RyaW5nJyB8fFxuICAgICAgICAoIWlzQXJyYXkodmFsdWUpICYmIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgYmFzZUdldFRhZyh2YWx1ZSkgPT0gc3RyaW5nVGFnKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYFN5bWJvbGAgcHJpbWl0aXZlIG9yIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBzeW1ib2wsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc1N5bWJvbChTeW1ib2wuaXRlcmF0b3IpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNTeW1ib2woJ2FiYycpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNTeW1ib2wodmFsdWUpIHtcbiAgICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT0gJ3N5bWJvbCcgfHxcbiAgICAgICAgKGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgYmFzZUdldFRhZyh2YWx1ZSkgPT0gc3ltYm9sVGFnKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgdHlwZWQgYXJyYXkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgdHlwZWQgYXJyYXksIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc1R5cGVkQXJyYXkobmV3IFVpbnQ4QXJyYXkpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNUeXBlZEFycmF5KFtdKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIHZhciBpc1R5cGVkQXJyYXkgPSBub2RlSXNUeXBlZEFycmF5ID8gYmFzZVVuYXJ5KG5vZGVJc1R5cGVkQXJyYXkpIDogYmFzZUlzVHlwZWRBcnJheTtcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGB1bmRlZmluZWRgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBgdW5kZWZpbmVkYCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzVW5kZWZpbmVkKHZvaWQgMCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc1VuZGVmaW5lZChudWxsKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzVW5kZWZpbmVkKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdmFsdWUgPT09IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYFdlYWtNYXBgIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjMuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSB3ZWFrIG1hcCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzV2Vha01hcChuZXcgV2Vha01hcCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc1dlYWtNYXAobmV3IE1hcCk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc1dlYWtNYXAodmFsdWUpIHtcbiAgICAgIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIGdldFRhZyh2YWx1ZSkgPT0gd2Vha01hcFRhZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYFdlYWtTZXRgIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjMuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSB3ZWFrIHNldCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzV2Vha1NldChuZXcgV2Vha1NldCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc1dlYWtTZXQobmV3IFNldCk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc1dlYWtTZXQodmFsdWUpIHtcbiAgICAgIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIGJhc2VHZXRUYWcodmFsdWUpID09IHdlYWtTZXRUYWc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgbGVzcyB0aGFuIGBvdGhlcmAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy45LjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBsZXNzIHRoYW4gYG90aGVyYCxcbiAgICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBzZWUgXy5ndFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmx0KDEsIDMpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8ubHQoMywgMyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8ubHQoMywgMSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICB2YXIgbHQgPSBjcmVhdGVSZWxhdGlvbmFsT3BlcmF0aW9uKGJhc2VMdCk7XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBsZXNzIHRoYW4gb3IgZXF1YWwgdG8gYG90aGVyYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjkuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0geyp9IG90aGVyIFRoZSBvdGhlciB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGxlc3MgdGhhbiBvciBlcXVhbCB0b1xuICAgICAqICBgb3RoZXJgLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQHNlZSBfLmd0ZVxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmx0ZSgxLCAzKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmx0ZSgzLCAzKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmx0ZSgzLCAxKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIHZhciBsdGUgPSBjcmVhdGVSZWxhdGlvbmFsT3BlcmF0aW9uKGZ1bmN0aW9uKHZhbHVlLCBvdGhlcikge1xuICAgICAgcmV0dXJuIHZhbHVlIDw9IG90aGVyO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHZhbHVlYCB0byBhbiBhcnJheS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50b0FycmF5KHsgJ2EnOiAxLCAnYic6IDIgfSk7XG4gICAgICogLy8gPT4gWzEsIDJdXG4gICAgICpcbiAgICAgKiBfLnRvQXJyYXkoJ2FiYycpO1xuICAgICAqIC8vID0+IFsnYScsICdiJywgJ2MnXVxuICAgICAqXG4gICAgICogXy50b0FycmF5KDEpO1xuICAgICAqIC8vID0+IFtdXG4gICAgICpcbiAgICAgKiBfLnRvQXJyYXkobnVsbCk7XG4gICAgICogLy8gPT4gW11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0b0FycmF5KHZhbHVlKSB7XG4gICAgICBpZiAoIXZhbHVlKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIGlmIChpc0FycmF5TGlrZSh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIGlzU3RyaW5nKHZhbHVlKSA/IHN0cmluZ1RvQXJyYXkodmFsdWUpIDogY29weUFycmF5KHZhbHVlKTtcbiAgICAgIH1cbiAgICAgIGlmIChzeW1JdGVyYXRvciAmJiB2YWx1ZVtzeW1JdGVyYXRvcl0pIHtcbiAgICAgICAgcmV0dXJuIGl0ZXJhdG9yVG9BcnJheSh2YWx1ZVtzeW1JdGVyYXRvcl0oKSk7XG4gICAgICB9XG4gICAgICB2YXIgdGFnID0gZ2V0VGFnKHZhbHVlKSxcbiAgICAgICAgICBmdW5jID0gdGFnID09IG1hcFRhZyA/IG1hcFRvQXJyYXkgOiAodGFnID09IHNldFRhZyA/IHNldFRvQXJyYXkgOiB2YWx1ZXMpO1xuXG4gICAgICByZXR1cm4gZnVuYyh2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHZhbHVlYCB0byBhIGZpbml0ZSBudW1iZXIuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4xMi4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBudW1iZXIuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udG9GaW5pdGUoMy4yKTtcbiAgICAgKiAvLyA9PiAzLjJcbiAgICAgKlxuICAgICAqIF8udG9GaW5pdGUoTnVtYmVyLk1JTl9WQUxVRSk7XG4gICAgICogLy8gPT4gNWUtMzI0XG4gICAgICpcbiAgICAgKiBfLnRvRmluaXRlKEluZmluaXR5KTtcbiAgICAgKiAvLyA9PiAxLjc5NzY5MzEzNDg2MjMxNTdlKzMwOFxuICAgICAqXG4gICAgICogXy50b0Zpbml0ZSgnMy4yJyk7XG4gICAgICogLy8gPT4gMy4yXG4gICAgICovXG4gICAgZnVuY3Rpb24gdG9GaW5pdGUodmFsdWUpIHtcbiAgICAgIGlmICghdmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlID09PSAwID8gdmFsdWUgOiAwO1xuICAgICAgfVxuICAgICAgdmFsdWUgPSB0b051bWJlcih2YWx1ZSk7XG4gICAgICBpZiAodmFsdWUgPT09IElORklOSVRZIHx8IHZhbHVlID09PSAtSU5GSU5JVFkpIHtcbiAgICAgICAgdmFyIHNpZ24gPSAodmFsdWUgPCAwID8gLTEgOiAxKTtcbiAgICAgICAgcmV0dXJuIHNpZ24gKiBNQVhfSU5URUdFUjtcbiAgICAgIH1cbiAgICAgIHJldHVybiB2YWx1ZSA9PT0gdmFsdWUgPyB2YWx1ZSA6IDA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHZhbHVlYCB0byBhbiBpbnRlZ2VyLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGxvb3NlbHkgYmFzZWQgb25cbiAgICAgKiBbYFRvSW50ZWdlcmBdKGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy10b2ludGVnZXIpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBpbnRlZ2VyLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRvSW50ZWdlcigzLjIpO1xuICAgICAqIC8vID0+IDNcbiAgICAgKlxuICAgICAqIF8udG9JbnRlZ2VyKE51bWJlci5NSU5fVkFMVUUpO1xuICAgICAqIC8vID0+IDBcbiAgICAgKlxuICAgICAqIF8udG9JbnRlZ2VyKEluZmluaXR5KTtcbiAgICAgKiAvLyA9PiAxLjc5NzY5MzEzNDg2MjMxNTdlKzMwOFxuICAgICAqXG4gICAgICogXy50b0ludGVnZXIoJzMuMicpO1xuICAgICAqIC8vID0+IDNcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0b0ludGVnZXIodmFsdWUpIHtcbiAgICAgIHZhciByZXN1bHQgPSB0b0Zpbml0ZSh2YWx1ZSksXG4gICAgICAgICAgcmVtYWluZGVyID0gcmVzdWx0ICUgMTtcblxuICAgICAgcmV0dXJuIHJlc3VsdCA9PT0gcmVzdWx0ID8gKHJlbWFpbmRlciA/IHJlc3VsdCAtIHJlbWFpbmRlciA6IHJlc3VsdCkgOiAwO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYW4gaW50ZWdlciBzdWl0YWJsZSBmb3IgdXNlIGFzIHRoZSBsZW5ndGggb2YgYW5cbiAgICAgKiBhcnJheS1saWtlIG9iamVjdC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBiYXNlZCBvblxuICAgICAqIFtgVG9MZW5ndGhgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy10b2xlbmd0aCkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgY29udmVydGVkIGludGVnZXIuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udG9MZW5ndGgoMy4yKTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICpcbiAgICAgKiBfLnRvTGVuZ3RoKE51bWJlci5NSU5fVkFMVUUpO1xuICAgICAqIC8vID0+IDBcbiAgICAgKlxuICAgICAqIF8udG9MZW5ndGgoSW5maW5pdHkpO1xuICAgICAqIC8vID0+IDQyOTQ5NjcyOTVcbiAgICAgKlxuICAgICAqIF8udG9MZW5ndGgoJzMuMicpO1xuICAgICAqIC8vID0+IDNcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0b0xlbmd0aCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHZhbHVlID8gYmFzZUNsYW1wKHRvSW50ZWdlcih2YWx1ZSksIDAsIE1BWF9BUlJBWV9MRU5HVEgpIDogMDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgbnVtYmVyLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBwcm9jZXNzLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIG51bWJlci5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50b051bWJlcigzLjIpO1xuICAgICAqIC8vID0+IDMuMlxuICAgICAqXG4gICAgICogXy50b051bWJlcihOdW1iZXIuTUlOX1ZBTFVFKTtcbiAgICAgKiAvLyA9PiA1ZS0zMjRcbiAgICAgKlxuICAgICAqIF8udG9OdW1iZXIoSW5maW5pdHkpO1xuICAgICAqIC8vID0+IEluZmluaXR5XG4gICAgICpcbiAgICAgKiBfLnRvTnVtYmVyKCczLjInKTtcbiAgICAgKiAvLyA9PiAzLjJcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0b051bWJlcih2YWx1ZSkge1xuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnbnVtYmVyJykge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9XG4gICAgICBpZiAoaXNTeW1ib2wodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBOQU47XG4gICAgICB9XG4gICAgICBpZiAoaXNPYmplY3QodmFsdWUpKSB7XG4gICAgICAgIHZhciBvdGhlciA9IHR5cGVvZiB2YWx1ZS52YWx1ZU9mID09ICdmdW5jdGlvbicgPyB2YWx1ZS52YWx1ZU9mKCkgOiB2YWx1ZTtcbiAgICAgICAgdmFsdWUgPSBpc09iamVjdChvdGhlcikgPyAob3RoZXIgKyAnJykgOiBvdGhlcjtcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlID09PSAwID8gdmFsdWUgOiArdmFsdWU7XG4gICAgICB9XG4gICAgICB2YWx1ZSA9IHZhbHVlLnJlcGxhY2UocmVUcmltLCAnJyk7XG4gICAgICB2YXIgaXNCaW5hcnkgPSByZUlzQmluYXJ5LnRlc3QodmFsdWUpO1xuICAgICAgcmV0dXJuIChpc0JpbmFyeSB8fCByZUlzT2N0YWwudGVzdCh2YWx1ZSkpXG4gICAgICAgID8gZnJlZVBhcnNlSW50KHZhbHVlLnNsaWNlKDIpLCBpc0JpbmFyeSA/IDIgOiA4KVxuICAgICAgICA6IChyZUlzQmFkSGV4LnRlc3QodmFsdWUpID8gTkFOIDogK3ZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgcGxhaW4gb2JqZWN0IGZsYXR0ZW5pbmcgaW5oZXJpdGVkIGVudW1lcmFibGUgc3RyaW5nXG4gICAgICoga2V5ZWQgcHJvcGVydGllcyBvZiBgdmFsdWVgIHRvIG93biBwcm9wZXJ0aWVzIG9mIHRoZSBwbGFpbiBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY29udmVydGVkIHBsYWluIG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gRm9vKCkge1xuICAgICAqICAgdGhpcy5iID0gMjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBGb28ucHJvdG90eXBlLmMgPSAzO1xuICAgICAqXG4gICAgICogXy5hc3NpZ24oeyAnYSc6IDEgfSwgbmV3IEZvbyk7XG4gICAgICogLy8gPT4geyAnYSc6IDEsICdiJzogMiB9XG4gICAgICpcbiAgICAgKiBfLmFzc2lnbih7ICdhJzogMSB9LCBfLnRvUGxhaW5PYmplY3QobmV3IEZvbykpO1xuICAgICAqIC8vID0+IHsgJ2EnOiAxLCAnYic6IDIsICdjJzogMyB9XG4gICAgICovXG4gICAgZnVuY3Rpb24gdG9QbGFpbk9iamVjdCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGNvcHlPYmplY3QodmFsdWUsIGtleXNJbih2YWx1ZSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBzYWZlIGludGVnZXIuIEEgc2FmZSBpbnRlZ2VyIGNhbiBiZSBjb21wYXJlZCBhbmRcbiAgICAgKiByZXByZXNlbnRlZCBjb3JyZWN0bHkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgY29udmVydGVkIGludGVnZXIuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udG9TYWZlSW50ZWdlcigzLjIpO1xuICAgICAqIC8vID0+IDNcbiAgICAgKlxuICAgICAqIF8udG9TYWZlSW50ZWdlcihOdW1iZXIuTUlOX1ZBTFVFKTtcbiAgICAgKiAvLyA9PiAwXG4gICAgICpcbiAgICAgKiBfLnRvU2FmZUludGVnZXIoSW5maW5pdHkpO1xuICAgICAqIC8vID0+IDkwMDcxOTkyNTQ3NDA5OTFcbiAgICAgKlxuICAgICAqIF8udG9TYWZlSW50ZWdlcignMy4yJyk7XG4gICAgICogLy8gPT4gM1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRvU2FmZUludGVnZXIodmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZVxuICAgICAgICA/IGJhc2VDbGFtcCh0b0ludGVnZXIodmFsdWUpLCAtTUFYX1NBRkVfSU5URUdFUiwgTUFYX1NBRkVfSU5URUdFUilcbiAgICAgICAgOiAodmFsdWUgPT09IDAgPyB2YWx1ZSA6IDApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBzdHJpbmcuIEFuIGVtcHR5IHN0cmluZyBpcyByZXR1cm5lZCBmb3IgYG51bGxgXG4gICAgICogYW5kIGB1bmRlZmluZWRgIHZhbHVlcy4gVGhlIHNpZ24gb2YgYC0wYCBpcyBwcmVzZXJ2ZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgY29udmVydGVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50b1N0cmluZyhudWxsKTtcbiAgICAgKiAvLyA9PiAnJ1xuICAgICAqXG4gICAgICogXy50b1N0cmluZygtMCk7XG4gICAgICogLy8gPT4gJy0wJ1xuICAgICAqXG4gICAgICogXy50b1N0cmluZyhbMSwgMiwgM10pO1xuICAgICAqIC8vID0+ICcxLDIsMydcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0b1N0cmluZyh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHZhbHVlID09IG51bGwgPyAnJyA6IGJhc2VUb1N0cmluZyh2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQXNzaWducyBvd24gZW51bWVyYWJsZSBzdHJpbmcga2V5ZWQgcHJvcGVydGllcyBvZiBzb3VyY2Ugb2JqZWN0cyB0byB0aGVcbiAgICAgKiBkZXN0aW5hdGlvbiBvYmplY3QuIFNvdXJjZSBvYmplY3RzIGFyZSBhcHBsaWVkIGZyb20gbGVmdCB0byByaWdodC5cbiAgICAgKiBTdWJzZXF1ZW50IHNvdXJjZXMgb3ZlcndyaXRlIHByb3BlcnR5IGFzc2lnbm1lbnRzIG9mIHByZXZpb3VzIHNvdXJjZXMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyBgb2JqZWN0YCBhbmQgaXMgbG9vc2VseSBiYXNlZCBvblxuICAgICAqIFtgT2JqZWN0LmFzc2lnbmBdKGh0dHBzOi8vbWRuLmlvL09iamVjdC9hc3NpZ24pLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMTAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gICAgICogQHBhcmFtIHsuLi5PYmplY3R9IFtzb3VyY2VzXSBUaGUgc291cmNlIG9iamVjdHMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAc2VlIF8uYXNzaWduSW5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gRm9vKCkge1xuICAgICAqICAgdGhpcy5hID0gMTtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBCYXIoKSB7XG4gICAgICogICB0aGlzLmMgPSAzO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIEZvby5wcm90b3R5cGUuYiA9IDI7XG4gICAgICogQmFyLnByb3RvdHlwZS5kID0gNDtcbiAgICAgKlxuICAgICAqIF8uYXNzaWduKHsgJ2EnOiAwIH0sIG5ldyBGb28sIG5ldyBCYXIpO1xuICAgICAqIC8vID0+IHsgJ2EnOiAxLCAnYyc6IDMgfVxuICAgICAqL1xuICAgIHZhciBhc3NpZ24gPSBjcmVhdGVBc3NpZ25lcihmdW5jdGlvbihvYmplY3QsIHNvdXJjZSkge1xuICAgICAgaWYgKGlzUHJvdG90eXBlKHNvdXJjZSkgfHwgaXNBcnJheUxpa2Uoc291cmNlKSkge1xuICAgICAgICBjb3B5T2JqZWN0KHNvdXJjZSwga2V5cyhzb3VyY2UpLCBvYmplY3QpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7XG4gICAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkge1xuICAgICAgICAgIGFzc2lnblZhbHVlKG9iamVjdCwga2V5LCBzb3VyY2Vba2V5XSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uYXNzaWduYCBleGNlcHQgdGhhdCBpdCBpdGVyYXRlcyBvdmVyIG93biBhbmRcbiAgICAgKiBpbmhlcml0ZWQgc291cmNlIHByb3BlcnRpZXMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBhbGlhcyBleHRlbmRcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7Li4uT2JqZWN0fSBbc291cmNlc10gVGhlIHNvdXJjZSBvYmplY3RzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQHNlZSBfLmFzc2lnblxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBGb28oKSB7XG4gICAgICogICB0aGlzLmEgPSAxO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEJhcigpIHtcbiAgICAgKiAgIHRoaXMuYyA9IDM7XG4gICAgICogfVxuICAgICAqXG4gICAgICogRm9vLnByb3RvdHlwZS5iID0gMjtcbiAgICAgKiBCYXIucHJvdG90eXBlLmQgPSA0O1xuICAgICAqXG4gICAgICogXy5hc3NpZ25Jbih7ICdhJzogMCB9LCBuZXcgRm9vLCBuZXcgQmFyKTtcbiAgICAgKiAvLyA9PiB7ICdhJzogMSwgJ2InOiAyLCAnYyc6IDMsICdkJzogNCB9XG4gICAgICovXG4gICAgdmFyIGFzc2lnbkluID0gY3JlYXRlQXNzaWduZXIoZnVuY3Rpb24ob2JqZWN0LCBzb3VyY2UpIHtcbiAgICAgIGNvcHlPYmplY3Qoc291cmNlLCBrZXlzSW4oc291cmNlKSwgb2JqZWN0KTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uYXNzaWduSW5gIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGN1c3RvbWl6ZXJgXG4gICAgICogd2hpY2ggaXMgaW52b2tlZCB0byBwcm9kdWNlIHRoZSBhc3NpZ25lZCB2YWx1ZXMuIElmIGBjdXN0b21pemVyYCByZXR1cm5zXG4gICAgICogYHVuZGVmaW5lZGAsIGFzc2lnbm1lbnQgaXMgaGFuZGxlZCBieSB0aGUgbWV0aG9kIGluc3RlYWQuIFRoZSBgY3VzdG9taXplcmBcbiAgICAgKiBpcyBpbnZva2VkIHdpdGggZml2ZSBhcmd1bWVudHM6IChvYmpWYWx1ZSwgc3JjVmFsdWUsIGtleSwgb2JqZWN0LCBzb3VyY2UpLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAYWxpYXMgZXh0ZW5kV2l0aFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gICAgICogQHBhcmFtIHsuLi5PYmplY3R9IHNvdXJjZXMgVGhlIHNvdXJjZSBvYmplY3RzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGFzc2lnbmVkIHZhbHVlcy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBzZWUgXy5hc3NpZ25XaXRoXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIGN1c3RvbWl6ZXIob2JqVmFsdWUsIHNyY1ZhbHVlKSB7XG4gICAgICogICByZXR1cm4gXy5pc1VuZGVmaW5lZChvYmpWYWx1ZSkgPyBzcmNWYWx1ZSA6IG9ialZhbHVlO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciBkZWZhdWx0cyA9IF8ucGFydGlhbFJpZ2h0KF8uYXNzaWduSW5XaXRoLCBjdXN0b21pemVyKTtcbiAgICAgKlxuICAgICAqIGRlZmF1bHRzKHsgJ2EnOiAxIH0sIHsgJ2InOiAyIH0sIHsgJ2EnOiAzIH0pO1xuICAgICAqIC8vID0+IHsgJ2EnOiAxLCAnYic6IDIgfVxuICAgICAqL1xuICAgIHZhciBhc3NpZ25JbldpdGggPSBjcmVhdGVBc3NpZ25lcihmdW5jdGlvbihvYmplY3QsIHNvdXJjZSwgc3JjSW5kZXgsIGN1c3RvbWl6ZXIpIHtcbiAgICAgIGNvcHlPYmplY3Qoc291cmNlLCBrZXlzSW4oc291cmNlKSwgb2JqZWN0LCBjdXN0b21pemVyKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uYXNzaWduYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBjdXN0b21pemVyYFxuICAgICAqIHdoaWNoIGlzIGludm9rZWQgdG8gcHJvZHVjZSB0aGUgYXNzaWduZWQgdmFsdWVzLiBJZiBgY3VzdG9taXplcmAgcmV0dXJuc1xuICAgICAqIGB1bmRlZmluZWRgLCBhc3NpZ25tZW50IGlzIGhhbmRsZWQgYnkgdGhlIG1ldGhvZCBpbnN0ZWFkLiBUaGUgYGN1c3RvbWl6ZXJgXG4gICAgICogaXMgaW52b2tlZCB3aXRoIGZpdmUgYXJndW1lbnRzOiAob2JqVmFsdWUsIHNyY1ZhbHVlLCBrZXksIG9iamVjdCwgc291cmNlKS5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAgICAgKiBAcGFyYW0gey4uLk9iamVjdH0gc291cmNlcyBUaGUgc291cmNlIG9iamVjdHMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgYXNzaWduZWQgdmFsdWVzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQHNlZSBfLmFzc2lnbkluV2l0aFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBjdXN0b21pemVyKG9ialZhbHVlLCBzcmNWYWx1ZSkge1xuICAgICAqICAgcmV0dXJuIF8uaXNVbmRlZmluZWQob2JqVmFsdWUpID8gc3JjVmFsdWUgOiBvYmpWYWx1ZTtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiB2YXIgZGVmYXVsdHMgPSBfLnBhcnRpYWxSaWdodChfLmFzc2lnbldpdGgsIGN1c3RvbWl6ZXIpO1xuICAgICAqXG4gICAgICogZGVmYXVsdHMoeyAnYSc6IDEgfSwgeyAnYic6IDIgfSwgeyAnYSc6IDMgfSk7XG4gICAgICogLy8gPT4geyAnYSc6IDEsICdiJzogMiB9XG4gICAgICovXG4gICAgdmFyIGFzc2lnbldpdGggPSBjcmVhdGVBc3NpZ25lcihmdW5jdGlvbihvYmplY3QsIHNvdXJjZSwgc3JjSW5kZXgsIGN1c3RvbWl6ZXIpIHtcbiAgICAgIGNvcHlPYmplY3Qoc291cmNlLCBrZXlzKHNvdXJjZSksIG9iamVjdCwgY3VzdG9taXplcik7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIHZhbHVlcyBjb3JyZXNwb25kaW5nIHRvIGBwYXRoc2Agb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMS4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0gey4uLihzdHJpbmd8c3RyaW5nW10pfSBbcGF0aHNdIFRoZSBwcm9wZXJ0eSBwYXRocyB0byBwaWNrLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgcGlja2VkIHZhbHVlcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiBbeyAnYic6IHsgJ2MnOiAzIH0gfSwgNF0gfTtcbiAgICAgKlxuICAgICAqIF8uYXQob2JqZWN0LCBbJ2FbMF0uYi5jJywgJ2FbMV0nXSk7XG4gICAgICogLy8gPT4gWzMsIDRdXG4gICAgICovXG4gICAgdmFyIGF0ID0gZmxhdFJlc3QoYmFzZUF0KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gb2JqZWN0IHRoYXQgaW5oZXJpdHMgZnJvbSB0aGUgYHByb3RvdHlwZWAgb2JqZWN0LiBJZiBhXG4gICAgICogYHByb3BlcnRpZXNgIG9iamVjdCBpcyBnaXZlbiwgaXRzIG93biBlbnVtZXJhYmxlIHN0cmluZyBrZXllZCBwcm9wZXJ0aWVzXG4gICAgICogYXJlIGFzc2lnbmVkIHRvIHRoZSBjcmVhdGVkIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAyLjMuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gcHJvdG90eXBlIFRoZSBvYmplY3QgdG8gaW5oZXJpdCBmcm9tLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbcHJvcGVydGllc10gVGhlIHByb3BlcnRpZXMgdG8gYXNzaWduIHRvIHRoZSBvYmplY3QuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gU2hhcGUoKSB7XG4gICAgICogICB0aGlzLnggPSAwO1xuICAgICAqICAgdGhpcy55ID0gMDtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBDaXJjbGUoKSB7XG4gICAgICogICBTaGFwZS5jYWxsKHRoaXMpO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIENpcmNsZS5wcm90b3R5cGUgPSBfLmNyZWF0ZShTaGFwZS5wcm90b3R5cGUsIHtcbiAgICAgKiAgICdjb25zdHJ1Y3Rvcic6IENpcmNsZVxuICAgICAqIH0pO1xuICAgICAqXG4gICAgICogdmFyIGNpcmNsZSA9IG5ldyBDaXJjbGU7XG4gICAgICogY2lyY2xlIGluc3RhbmNlb2YgQ2lyY2xlO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIGNpcmNsZSBpbnN0YW5jZW9mIFNoYXBlO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGUocHJvdG90eXBlLCBwcm9wZXJ0aWVzKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gYmFzZUNyZWF0ZShwcm90b3R5cGUpO1xuICAgICAgcmV0dXJuIHByb3BlcnRpZXMgPT0gbnVsbCA/IHJlc3VsdCA6IGJhc2VBc3NpZ24ocmVzdWx0LCBwcm9wZXJ0aWVzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBc3NpZ25zIG93biBhbmQgaW5oZXJpdGVkIGVudW1lcmFibGUgc3RyaW5nIGtleWVkIHByb3BlcnRpZXMgb2Ygc291cmNlXG4gICAgICogb2JqZWN0cyB0byB0aGUgZGVzdGluYXRpb24gb2JqZWN0IGZvciBhbGwgZGVzdGluYXRpb24gcHJvcGVydGllcyB0aGF0XG4gICAgICogcmVzb2x2ZSB0byBgdW5kZWZpbmVkYC4gU291cmNlIG9iamVjdHMgYXJlIGFwcGxpZWQgZnJvbSBsZWZ0IHRvIHJpZ2h0LlxuICAgICAqIE9uY2UgYSBwcm9wZXJ0eSBpcyBzZXQsIGFkZGl0aW9uYWwgdmFsdWVzIG9mIHRoZSBzYW1lIHByb3BlcnR5IGFyZSBpZ25vcmVkLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7Li4uT2JqZWN0fSBbc291cmNlc10gVGhlIHNvdXJjZSBvYmplY3RzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQHNlZSBfLmRlZmF1bHRzRGVlcFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmRlZmF1bHRzKHsgJ2EnOiAxIH0sIHsgJ2InOiAyIH0sIHsgJ2EnOiAzIH0pO1xuICAgICAqIC8vID0+IHsgJ2EnOiAxLCAnYic6IDIgfVxuICAgICAqL1xuICAgIHZhciBkZWZhdWx0cyA9IGJhc2VSZXN0KGZ1bmN0aW9uKG9iamVjdCwgc291cmNlcykge1xuICAgICAgb2JqZWN0ID0gT2JqZWN0KG9iamVjdCk7XG5cbiAgICAgIHZhciBpbmRleCA9IC0xO1xuICAgICAgdmFyIGxlbmd0aCA9IHNvdXJjZXMubGVuZ3RoO1xuICAgICAgdmFyIGd1YXJkID0gbGVuZ3RoID4gMiA/IHNvdXJjZXNbMl0gOiB1bmRlZmluZWQ7XG5cbiAgICAgIGlmIChndWFyZCAmJiBpc0l0ZXJhdGVlQ2FsbChzb3VyY2VzWzBdLCBzb3VyY2VzWzFdLCBndWFyZCkpIHtcbiAgICAgICAgbGVuZ3RoID0gMTtcbiAgICAgIH1cblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIHNvdXJjZSA9IHNvdXJjZXNbaW5kZXhdO1xuICAgICAgICB2YXIgcHJvcHMgPSBrZXlzSW4oc291cmNlKTtcbiAgICAgICAgdmFyIHByb3BzSW5kZXggPSAtMTtcbiAgICAgICAgdmFyIHByb3BzTGVuZ3RoID0gcHJvcHMubGVuZ3RoO1xuXG4gICAgICAgIHdoaWxlICgrK3Byb3BzSW5kZXggPCBwcm9wc0xlbmd0aCkge1xuICAgICAgICAgIHZhciBrZXkgPSBwcm9wc1twcm9wc0luZGV4XTtcbiAgICAgICAgICB2YXIgdmFsdWUgPSBvYmplY3Rba2V5XTtcblxuICAgICAgICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkIHx8XG4gICAgICAgICAgICAgIChlcSh2YWx1ZSwgb2JqZWN0UHJvdG9ba2V5XSkgJiYgIWhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBrZXkpKSkge1xuICAgICAgICAgICAgb2JqZWN0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZGVmYXVsdHNgIGV4Y2VwdCB0aGF0IGl0IHJlY3Vyc2l2ZWx5IGFzc2lnbnNcbiAgICAgKiBkZWZhdWx0IHByb3BlcnRpZXMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjEwLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7Li4uT2JqZWN0fSBbc291cmNlc10gVGhlIHNvdXJjZSBvYmplY3RzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQHNlZSBfLmRlZmF1bHRzXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZGVmYXVsdHNEZWVwKHsgJ2EnOiB7ICdiJzogMiB9IH0sIHsgJ2EnOiB7ICdiJzogMSwgJ2MnOiAzIH0gfSk7XG4gICAgICogLy8gPT4geyAnYSc6IHsgJ2InOiAyLCAnYyc6IDMgfSB9XG4gICAgICovXG4gICAgdmFyIGRlZmF1bHRzRGVlcCA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFyZ3MpIHtcbiAgICAgIGFyZ3MucHVzaCh1bmRlZmluZWQsIGN1c3RvbURlZmF1bHRzTWVyZ2UpO1xuICAgICAgcmV0dXJuIGFwcGx5KG1lcmdlV2l0aCwgdW5kZWZpbmVkLCBhcmdzKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZmluZGAgZXhjZXB0IHRoYXQgaXQgcmV0dXJucyB0aGUga2V5IG9mIHRoZSBmaXJzdFxuICAgICAqIGVsZW1lbnQgYHByZWRpY2F0ZWAgcmV0dXJucyB0cnV0aHkgZm9yIGluc3RlYWQgb2YgdGhlIGVsZW1lbnQgaXRzZWxmLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDEuMS4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfHVuZGVmaW5lZH0gUmV0dXJucyB0aGUga2V5IG9mIHRoZSBtYXRjaGVkIGVsZW1lbnQsXG4gICAgICogIGVsc2UgYHVuZGVmaW5lZGAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IHtcbiAgICAgKiAgICdiYXJuZXknOiAgeyAnYWdlJzogMzYsICdhY3RpdmUnOiB0cnVlIH0sXG4gICAgICogICAnZnJlZCc6ICAgIHsgJ2FnZSc6IDQwLCAnYWN0aXZlJzogZmFsc2UgfSxcbiAgICAgKiAgICdwZWJibGVzJzogeyAnYWdlJzogMSwgICdhY3RpdmUnOiB0cnVlIH1cbiAgICAgKiB9O1xuICAgICAqXG4gICAgICogXy5maW5kS2V5KHVzZXJzLCBmdW5jdGlvbihvKSB7IHJldHVybiBvLmFnZSA8IDQwOyB9KTtcbiAgICAgKiAvLyA9PiAnYmFybmV5JyAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbmRLZXkodXNlcnMsIHsgJ2FnZSc6IDEsICdhY3RpdmUnOiB0cnVlIH0pO1xuICAgICAqIC8vID0+ICdwZWJibGVzJ1xuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmluZEtleSh1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICAgICAqIC8vID0+ICdmcmVkJ1xuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maW5kS2V5KHVzZXJzLCAnYWN0aXZlJyk7XG4gICAgICogLy8gPT4gJ2Jhcm5leSdcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmaW5kS2V5KG9iamVjdCwgcHJlZGljYXRlKSB7XG4gICAgICByZXR1cm4gYmFzZUZpbmRLZXkob2JqZWN0LCBnZXRJdGVyYXRlZShwcmVkaWNhdGUsIDMpLCBiYXNlRm9yT3duKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmZpbmRLZXlgIGV4Y2VwdCB0aGF0IGl0IGl0ZXJhdGVzIG92ZXIgZWxlbWVudHMgb2ZcbiAgICAgKiBhIGNvbGxlY3Rpb24gaW4gdGhlIG9wcG9zaXRlIG9yZGVyLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuMC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfHVuZGVmaW5lZH0gUmV0dXJucyB0aGUga2V5IG9mIHRoZSBtYXRjaGVkIGVsZW1lbnQsXG4gICAgICogIGVsc2UgYHVuZGVmaW5lZGAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IHtcbiAgICAgKiAgICdiYXJuZXknOiAgeyAnYWdlJzogMzYsICdhY3RpdmUnOiB0cnVlIH0sXG4gICAgICogICAnZnJlZCc6ICAgIHsgJ2FnZSc6IDQwLCAnYWN0aXZlJzogZmFsc2UgfSxcbiAgICAgKiAgICdwZWJibGVzJzogeyAnYWdlJzogMSwgICdhY3RpdmUnOiB0cnVlIH1cbiAgICAgKiB9O1xuICAgICAqXG4gICAgICogXy5maW5kTGFzdEtleSh1c2VycywgZnVuY3Rpb24obykgeyByZXR1cm4gby5hZ2UgPCA0MDsgfSk7XG4gICAgICogLy8gPT4gcmV0dXJucyAncGViYmxlcycgYXNzdW1pbmcgYF8uZmluZEtleWAgcmV0dXJucyAnYmFybmV5J1xuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbmRMYXN0S2V5KHVzZXJzLCB7ICdhZ2UnOiAzNiwgJ2FjdGl2ZSc6IHRydWUgfSk7XG4gICAgICogLy8gPT4gJ2Jhcm5leSdcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbmRMYXN0S2V5KHVzZXJzLCBbJ2FjdGl2ZScsIGZhbHNlXSk7XG4gICAgICogLy8gPT4gJ2ZyZWQnXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbmRMYXN0S2V5KHVzZXJzLCAnYWN0aXZlJyk7XG4gICAgICogLy8gPT4gJ3BlYmJsZXMnXG4gICAgICovXG4gICAgZnVuY3Rpb24gZmluZExhc3RLZXkob2JqZWN0LCBwcmVkaWNhdGUpIHtcbiAgICAgIHJldHVybiBiYXNlRmluZEtleShvYmplY3QsIGdldEl0ZXJhdGVlKHByZWRpY2F0ZSwgMyksIGJhc2VGb3JPd25SaWdodCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSXRlcmF0ZXMgb3ZlciBvd24gYW5kIGluaGVyaXRlZCBlbnVtZXJhYmxlIHN0cmluZyBrZXllZCBwcm9wZXJ0aWVzIG9mIGFuXG4gICAgICogb2JqZWN0IGFuZCBpbnZva2VzIGBpdGVyYXRlZWAgZm9yIGVhY2ggcHJvcGVydHkuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkXG4gICAgICogd2l0aCB0aHJlZSBhcmd1bWVudHM6ICh2YWx1ZSwga2V5LCBvYmplY3QpLiBJdGVyYXRlZSBmdW5jdGlvbnMgbWF5IGV4aXRcbiAgICAgKiBpdGVyYXRpb24gZWFybHkgYnkgZXhwbGljaXRseSByZXR1cm5pbmcgYGZhbHNlYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjMuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQHNlZSBfLmZvckluUmlnaHRcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gRm9vKCkge1xuICAgICAqICAgdGhpcy5hID0gMTtcbiAgICAgKiAgIHRoaXMuYiA9IDI7XG4gICAgICogfVxuICAgICAqXG4gICAgICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAgICAgKlxuICAgICAqIF8uZm9ySW4obmV3IEZvbywgZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICAgICAqICAgY29uc29sZS5sb2coa2V5KTtcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiBMb2dzICdhJywgJ2InLCB0aGVuICdjJyAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmb3JJbihvYmplY3QsIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gb2JqZWN0ID09IG51bGxcbiAgICAgICAgPyBvYmplY3RcbiAgICAgICAgOiBiYXNlRm9yKG9iamVjdCwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDMpLCBrZXlzSW4pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZm9ySW5gIGV4Y2VwdCB0aGF0IGl0IGl0ZXJhdGVzIG92ZXIgcHJvcGVydGllcyBvZlxuICAgICAqIGBvYmplY3RgIGluIHRoZSBvcHBvc2l0ZSBvcmRlci5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAyLjAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQHNlZSBfLmZvckluXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYSA9IDE7XG4gICAgICogICB0aGlzLmIgPSAyO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIEZvby5wcm90b3R5cGUuYyA9IDM7XG4gICAgICpcbiAgICAgKiBfLmZvckluUmlnaHQobmV3IEZvbywgZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICAgICAqICAgY29uc29sZS5sb2coa2V5KTtcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiBMb2dzICdjJywgJ2InLCB0aGVuICdhJyBhc3N1bWluZyBgXy5mb3JJbmAgbG9ncyAnYScsICdiJywgdGhlbiAnYycuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZm9ySW5SaWdodChvYmplY3QsIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gb2JqZWN0ID09IG51bGxcbiAgICAgICAgPyBvYmplY3RcbiAgICAgICAgOiBiYXNlRm9yUmlnaHQob2JqZWN0LCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMyksIGtleXNJbik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSXRlcmF0ZXMgb3ZlciBvd24gZW51bWVyYWJsZSBzdHJpbmcga2V5ZWQgcHJvcGVydGllcyBvZiBhbiBvYmplY3QgYW5kXG4gICAgICogaW52b2tlcyBgaXRlcmF0ZWVgIGZvciBlYWNoIHByb3BlcnR5LiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIHRocmVlXG4gICAgICogYXJndW1lbnRzOiAodmFsdWUsIGtleSwgb2JqZWN0KS4gSXRlcmF0ZWUgZnVuY3Rpb25zIG1heSBleGl0IGl0ZXJhdGlvblxuICAgICAqIGVhcmx5IGJ5IGV4cGxpY2l0bHkgcmV0dXJuaW5nIGBmYWxzZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4zLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBzZWUgXy5mb3JPd25SaWdodFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBGb28oKSB7XG4gICAgICogICB0aGlzLmEgPSAxO1xuICAgICAqICAgdGhpcy5iID0gMjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBGb28ucHJvdG90eXBlLmMgPSAzO1xuICAgICAqXG4gICAgICogXy5mb3JPd24obmV3IEZvbywgZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICAgICAqICAgY29uc29sZS5sb2coa2V5KTtcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiBMb2dzICdhJyB0aGVuICdiJyAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmb3JPd24ob2JqZWN0LCBpdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIG9iamVjdCAmJiBiYXNlRm9yT3duKG9iamVjdCwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDMpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmZvck93bmAgZXhjZXB0IHRoYXQgaXQgaXRlcmF0ZXMgb3ZlciBwcm9wZXJ0aWVzIG9mXG4gICAgICogYG9iamVjdGAgaW4gdGhlIG9wcG9zaXRlIG9yZGVyLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuMC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAc2VlIF8uZm9yT3duXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYSA9IDE7XG4gICAgICogICB0aGlzLmIgPSAyO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIEZvby5wcm90b3R5cGUuYyA9IDM7XG4gICAgICpcbiAgICAgKiBfLmZvck93blJpZ2h0KG5ldyBGb28sIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKGtleSk7XG4gICAgICogfSk7XG4gICAgICogLy8gPT4gTG9ncyAnYicgdGhlbiAnYScgYXNzdW1pbmcgYF8uZm9yT3duYCBsb2dzICdhJyB0aGVuICdiJy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmb3JPd25SaWdodChvYmplY3QsIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gb2JqZWN0ICYmIGJhc2VGb3JPd25SaWdodChvYmplY3QsIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAzKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiBmdW5jdGlvbiBwcm9wZXJ0eSBuYW1lcyBmcm9tIG93biBlbnVtZXJhYmxlIHByb3BlcnRpZXNcbiAgICAgKiBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaW5zcGVjdC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGZ1bmN0aW9uIG5hbWVzLlxuICAgICAqIEBzZWUgXy5mdW5jdGlvbnNJblxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBGb28oKSB7XG4gICAgICogICB0aGlzLmEgPSBfLmNvbnN0YW50KCdhJyk7XG4gICAgICogICB0aGlzLmIgPSBfLmNvbnN0YW50KCdiJyk7XG4gICAgICogfVxuICAgICAqXG4gICAgICogRm9vLnByb3RvdHlwZS5jID0gXy5jb25zdGFudCgnYycpO1xuICAgICAqXG4gICAgICogXy5mdW5jdGlvbnMobmV3IEZvbyk7XG4gICAgICogLy8gPT4gWydhJywgJ2InXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZ1bmN0aW9ucyhvYmplY3QpIHtcbiAgICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IFtdIDogYmFzZUZ1bmN0aW9ucyhvYmplY3QsIGtleXMob2JqZWN0KSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiBmdW5jdGlvbiBwcm9wZXJ0eSBuYW1lcyBmcm9tIG93biBhbmQgaW5oZXJpdGVkXG4gICAgICogZW51bWVyYWJsZSBwcm9wZXJ0aWVzIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpbnNwZWN0LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgZnVuY3Rpb24gbmFtZXMuXG4gICAgICogQHNlZSBfLmZ1bmN0aW9uc1xuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBGb28oKSB7XG4gICAgICogICB0aGlzLmEgPSBfLmNvbnN0YW50KCdhJyk7XG4gICAgICogICB0aGlzLmIgPSBfLmNvbnN0YW50KCdiJyk7XG4gICAgICogfVxuICAgICAqXG4gICAgICogRm9vLnByb3RvdHlwZS5jID0gXy5jb25zdGFudCgnYycpO1xuICAgICAqXG4gICAgICogXy5mdW5jdGlvbnNJbihuZXcgRm9vKTtcbiAgICAgKiAvLyA9PiBbJ2EnLCAnYicsICdjJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmdW5jdGlvbnNJbihvYmplY3QpIHtcbiAgICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IFtdIDogYmFzZUZ1bmN0aW9ucyhvYmplY3QsIGtleXNJbihvYmplY3QpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSB2YWx1ZSBhdCBgcGF0aGAgb2YgYG9iamVjdGAuIElmIHRoZSByZXNvbHZlZCB2YWx1ZSBpc1xuICAgICAqIGB1bmRlZmluZWRgLCB0aGUgYGRlZmF1bHRWYWx1ZWAgaXMgcmV0dXJuZWQgaW4gaXRzIHBsYWNlLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuNy4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICAgICAqIEBwYXJhbSB7Kn0gW2RlZmF1bHRWYWx1ZV0gVGhlIHZhbHVlIHJldHVybmVkIGZvciBgdW5kZWZpbmVkYCByZXNvbHZlZCB2YWx1ZXMuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHJlc29sdmVkIHZhbHVlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IFt7ICdiJzogeyAnYyc6IDMgfSB9XSB9O1xuICAgICAqXG4gICAgICogXy5nZXQob2JqZWN0LCAnYVswXS5iLmMnKTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICpcbiAgICAgKiBfLmdldChvYmplY3QsIFsnYScsICcwJywgJ2InLCAnYyddKTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICpcbiAgICAgKiBfLmdldChvYmplY3QsICdhLmIuYycsICdkZWZhdWx0Jyk7XG4gICAgICogLy8gPT4gJ2RlZmF1bHQnXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0KG9iamVjdCwgcGF0aCwgZGVmYXVsdFZhbHVlKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gb2JqZWN0ID09IG51bGwgPyB1bmRlZmluZWQgOiBiYXNlR2V0KG9iamVjdCwgcGF0aCk7XG4gICAgICByZXR1cm4gcmVzdWx0ID09PSB1bmRlZmluZWQgPyBkZWZhdWx0VmFsdWUgOiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGBwYXRoYCBpcyBhIGRpcmVjdCBwcm9wZXJ0eSBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBwYXRoYCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiB7ICdiJzogMiB9IH07XG4gICAgICogdmFyIG90aGVyID0gXy5jcmVhdGUoeyAnYSc6IF8uY3JlYXRlKHsgJ2InOiAyIH0pIH0pO1xuICAgICAqXG4gICAgICogXy5oYXMob2JqZWN0LCAnYScpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaGFzKG9iamVjdCwgJ2EuYicpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaGFzKG9iamVjdCwgWydhJywgJ2InXSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5oYXMob3RoZXIsICdhJyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBoYXMob2JqZWN0LCBwYXRoKSB7XG4gICAgICByZXR1cm4gb2JqZWN0ICE9IG51bGwgJiYgaGFzUGF0aChvYmplY3QsIHBhdGgsIGJhc2VIYXMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgcGF0aGAgaXMgYSBkaXJlY3Qgb3IgaW5oZXJpdGVkIHByb3BlcnR5IG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHBhdGhgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0gXy5jcmVhdGUoeyAnYSc6IF8uY3JlYXRlKHsgJ2InOiAyIH0pIH0pO1xuICAgICAqXG4gICAgICogXy5oYXNJbihvYmplY3QsICdhJyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5oYXNJbihvYmplY3QsICdhLmInKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmhhc0luKG9iamVjdCwgWydhJywgJ2InXSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5oYXNJbihvYmplY3QsICdiJyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBoYXNJbihvYmplY3QsIHBhdGgpIHtcbiAgICAgIHJldHVybiBvYmplY3QgIT0gbnVsbCAmJiBoYXNQYXRoKG9iamVjdCwgcGF0aCwgYmFzZUhhc0luKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIG9iamVjdCBjb21wb3NlZCBvZiB0aGUgaW52ZXJ0ZWQga2V5cyBhbmQgdmFsdWVzIG9mIGBvYmplY3RgLlxuICAgICAqIElmIGBvYmplY3RgIGNvbnRhaW5zIGR1cGxpY2F0ZSB2YWx1ZXMsIHN1YnNlcXVlbnQgdmFsdWVzIG92ZXJ3cml0ZVxuICAgICAqIHByb3BlcnR5IGFzc2lnbm1lbnRzIG9mIHByZXZpb3VzIHZhbHVlcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjcuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaW52ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBpbnZlcnRlZCBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogMSwgJ2InOiAyLCAnYyc6IDEgfTtcbiAgICAgKlxuICAgICAqIF8uaW52ZXJ0KG9iamVjdCk7XG4gICAgICogLy8gPT4geyAnMSc6ICdjJywgJzInOiAnYicgfVxuICAgICAqL1xuICAgIHZhciBpbnZlcnQgPSBjcmVhdGVJbnZlcnRlcihmdW5jdGlvbihyZXN1bHQsIHZhbHVlLCBrZXkpIHtcbiAgICAgIGlmICh2YWx1ZSAhPSBudWxsICYmXG4gICAgICAgICAgdHlwZW9mIHZhbHVlLnRvU3RyaW5nICE9ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdmFsdWUgPSBuYXRpdmVPYmplY3RUb1N0cmluZy5jYWxsKHZhbHVlKTtcbiAgICAgIH1cblxuICAgICAgcmVzdWx0W3ZhbHVlXSA9IGtleTtcbiAgICB9LCBjb25zdGFudChpZGVudGl0eSkpO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5pbnZlcnRgIGV4Y2VwdCB0aGF0IHRoZSBpbnZlcnRlZCBvYmplY3QgaXMgZ2VuZXJhdGVkXG4gICAgICogZnJvbSB0aGUgcmVzdWx0cyBvZiBydW5uaW5nIGVhY2ggZWxlbWVudCBvZiBgb2JqZWN0YCB0aHJ1IGBpdGVyYXRlZWAuIFRoZVxuICAgICAqIGNvcnJlc3BvbmRpbmcgaW52ZXJ0ZWQgdmFsdWUgb2YgZWFjaCBpbnZlcnRlZCBrZXkgaXMgYW4gYXJyYXkgb2Yga2V5c1xuICAgICAqIHJlc3BvbnNpYmxlIGZvciBnZW5lcmF0aW5nIHRoZSBpbnZlcnRlZCB2YWx1ZS4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWRcbiAgICAgKiB3aXRoIG9uZSBhcmd1bWVudDogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjEuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaW52ZXJ0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgaW52ZXJ0ZWQgb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEsICdiJzogMiwgJ2MnOiAxIH07XG4gICAgICpcbiAgICAgKiBfLmludmVydEJ5KG9iamVjdCk7XG4gICAgICogLy8gPT4geyAnMSc6IFsnYScsICdjJ10sICcyJzogWydiJ10gfVxuICAgICAqXG4gICAgICogXy5pbnZlcnRCeShvYmplY3QsIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICogICByZXR1cm4gJ2dyb3VwJyArIHZhbHVlO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IHsgJ2dyb3VwMSc6IFsnYScsICdjJ10sICdncm91cDInOiBbJ2InXSB9XG4gICAgICovXG4gICAgdmFyIGludmVydEJ5ID0gY3JlYXRlSW52ZXJ0ZXIoZnVuY3Rpb24ocmVzdWx0LCB2YWx1ZSwga2V5KSB7XG4gICAgICBpZiAodmFsdWUgIT0gbnVsbCAmJlxuICAgICAgICAgIHR5cGVvZiB2YWx1ZS50b1N0cmluZyAhPSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHZhbHVlID0gbmF0aXZlT2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKHJlc3VsdCwgdmFsdWUpKSB7XG4gICAgICAgIHJlc3VsdFt2YWx1ZV0ucHVzaChrZXkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVzdWx0W3ZhbHVlXSA9IFtrZXldO1xuICAgICAgfVxuICAgIH0sIGdldEl0ZXJhdGVlKTtcblxuICAgIC8qKlxuICAgICAqIEludm9rZXMgdGhlIG1ldGhvZCBhdCBgcGF0aGAgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBtZXRob2QgdG8gaW52b2tlLlxuICAgICAqIEBwYXJhbSB7Li4uKn0gW2FyZ3NdIFRoZSBhcmd1bWVudHMgdG8gaW52b2tlIHRoZSBtZXRob2Qgd2l0aC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmVzdWx0IG9mIHRoZSBpbnZva2VkIG1ldGhvZC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiBbeyAnYic6IHsgJ2MnOiBbMSwgMiwgMywgNF0gfSB9XSB9O1xuICAgICAqXG4gICAgICogXy5pbnZva2Uob2JqZWN0LCAnYVswXS5iLmMuc2xpY2UnLCAxLCAzKTtcbiAgICAgKiAvLyA9PiBbMiwgM11cbiAgICAgKi9cbiAgICB2YXIgaW52b2tlID0gYmFzZVJlc3QoYmFzZUludm9rZSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIHRoZSBvd24gZW51bWVyYWJsZSBwcm9wZXJ0eSBuYW1lcyBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBOb24tb2JqZWN0IHZhbHVlcyBhcmUgY29lcmNlZCB0byBvYmplY3RzLiBTZWUgdGhlXG4gICAgICogW0VTIHNwZWNdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLW9iamVjdC5rZXlzKVxuICAgICAqIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYSA9IDE7XG4gICAgICogICB0aGlzLmIgPSAyO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIEZvby5wcm90b3R5cGUuYyA9IDM7XG4gICAgICpcbiAgICAgKiBfLmtleXMobmV3IEZvbyk7XG4gICAgICogLy8gPT4gWydhJywgJ2InXSAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICAgICAqXG4gICAgICogXy5rZXlzKCdoaScpO1xuICAgICAqIC8vID0+IFsnMCcsICcxJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBrZXlzKG9iamVjdCkge1xuICAgICAgcmV0dXJuIGlzQXJyYXlMaWtlKG9iamVjdCkgPyBhcnJheUxpa2VLZXlzKG9iamVjdCkgOiBiYXNlS2V5cyhvYmplY3QpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdGhlIG93biBhbmQgaW5oZXJpdGVkIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogTm9uLW9iamVjdCB2YWx1ZXMgYXJlIGNvZXJjZWQgdG8gb2JqZWN0cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gRm9vKCkge1xuICAgICAqICAgdGhpcy5hID0gMTtcbiAgICAgKiAgIHRoaXMuYiA9IDI7XG4gICAgICogfVxuICAgICAqXG4gICAgICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAgICAgKlxuICAgICAqIF8ua2V5c0luKG5ldyBGb28pO1xuICAgICAqIC8vID0+IFsnYScsICdiJywgJ2MnXSAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGtleXNJbihvYmplY3QpIHtcbiAgICAgIHJldHVybiBpc0FycmF5TGlrZShvYmplY3QpID8gYXJyYXlMaWtlS2V5cyhvYmplY3QsIHRydWUpIDogYmFzZUtleXNJbihvYmplY3QpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBvcHBvc2l0ZSBvZiBgXy5tYXBWYWx1ZXNgOyB0aGlzIG1ldGhvZCBjcmVhdGVzIGFuIG9iamVjdCB3aXRoIHRoZVxuICAgICAqIHNhbWUgdmFsdWVzIGFzIGBvYmplY3RgIGFuZCBrZXlzIGdlbmVyYXRlZCBieSBydW5uaW5nIGVhY2ggb3duIGVudW1lcmFibGVcbiAgICAgKiBzdHJpbmcga2V5ZWQgcHJvcGVydHkgb2YgYG9iamVjdGAgdGhydSBgaXRlcmF0ZWVgLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZFxuICAgICAqIHdpdGggdGhyZWUgYXJndW1lbnRzOiAodmFsdWUsIGtleSwgb2JqZWN0KS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjguMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBtYXBwZWQgb2JqZWN0LlxuICAgICAqIEBzZWUgXy5tYXBWYWx1ZXNcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5tYXBLZXlzKHsgJ2EnOiAxLCAnYic6IDIgfSwgZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICAgICAqICAgcmV0dXJuIGtleSArIHZhbHVlO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IHsgJ2ExJzogMSwgJ2IyJzogMiB9XG4gICAgICovXG4gICAgZnVuY3Rpb24gbWFwS2V5cyhvYmplY3QsIGl0ZXJhdGVlKSB7XG4gICAgICB2YXIgcmVzdWx0ID0ge307XG4gICAgICBpdGVyYXRlZSA9IGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAzKTtcblxuICAgICAgYmFzZUZvck93bihvYmplY3QsIGZ1bmN0aW9uKHZhbHVlLCBrZXksIG9iamVjdCkge1xuICAgICAgICBiYXNlQXNzaWduVmFsdWUocmVzdWx0LCBpdGVyYXRlZSh2YWx1ZSwga2V5LCBvYmplY3QpLCB2YWx1ZSk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBvYmplY3Qgd2l0aCB0aGUgc2FtZSBrZXlzIGFzIGBvYmplY3RgIGFuZCB2YWx1ZXMgZ2VuZXJhdGVkXG4gICAgICogYnkgcnVubmluZyBlYWNoIG93biBlbnVtZXJhYmxlIHN0cmluZyBrZXllZCBwcm9wZXJ0eSBvZiBgb2JqZWN0YCB0aHJ1XG4gICAgICogYGl0ZXJhdGVlYC4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCB0aHJlZSBhcmd1bWVudHM6XG4gICAgICogKHZhbHVlLCBrZXksIG9iamVjdCkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi40LjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgbWFwcGVkIG9iamVjdC5cbiAgICAgKiBAc2VlIF8ubWFwS2V5c1xuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSB7XG4gICAgICogICAnZnJlZCc6ICAgIHsgJ3VzZXInOiAnZnJlZCcsICAgICdhZ2UnOiA0MCB9LFxuICAgICAqICAgJ3BlYmJsZXMnOiB7ICd1c2VyJzogJ3BlYmJsZXMnLCAnYWdlJzogMSB9XG4gICAgICogfTtcbiAgICAgKlxuICAgICAqIF8ubWFwVmFsdWVzKHVzZXJzLCBmdW5jdGlvbihvKSB7IHJldHVybiBvLmFnZTsgfSk7XG4gICAgICogLy8gPT4geyAnZnJlZCc6IDQwLCAncGViYmxlcyc6IDEgfSAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5tYXBWYWx1ZXModXNlcnMsICdhZ2UnKTtcbiAgICAgKiAvLyA9PiB7ICdmcmVkJzogNDAsICdwZWJibGVzJzogMSB9IChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWFwVmFsdWVzKG9iamVjdCwgaXRlcmF0ZWUpIHtcbiAgICAgIHZhciByZXN1bHQgPSB7fTtcbiAgICAgIGl0ZXJhdGVlID0gZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDMpO1xuXG4gICAgICBiYXNlRm9yT3duKG9iamVjdCwgZnVuY3Rpb24odmFsdWUsIGtleSwgb2JqZWN0KSB7XG4gICAgICAgIGJhc2VBc3NpZ25WYWx1ZShyZXN1bHQsIGtleSwgaXRlcmF0ZWUodmFsdWUsIGtleSwgb2JqZWN0KSk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5hc3NpZ25gIGV4Y2VwdCB0aGF0IGl0IHJlY3Vyc2l2ZWx5IG1lcmdlcyBvd24gYW5kXG4gICAgICogaW5oZXJpdGVkIGVudW1lcmFibGUgc3RyaW5nIGtleWVkIHByb3BlcnRpZXMgb2Ygc291cmNlIG9iamVjdHMgaW50byB0aGVcbiAgICAgKiBkZXN0aW5hdGlvbiBvYmplY3QuIFNvdXJjZSBwcm9wZXJ0aWVzIHRoYXQgcmVzb2x2ZSB0byBgdW5kZWZpbmVkYCBhcmVcbiAgICAgKiBza2lwcGVkIGlmIGEgZGVzdGluYXRpb24gdmFsdWUgZXhpc3RzLiBBcnJheSBhbmQgcGxhaW4gb2JqZWN0IHByb3BlcnRpZXNcbiAgICAgKiBhcmUgbWVyZ2VkIHJlY3Vyc2l2ZWx5LiBPdGhlciBvYmplY3RzIGFuZCB2YWx1ZSB0eXBlcyBhcmUgb3ZlcnJpZGRlbiBieVxuICAgICAqIGFzc2lnbm1lbnQuIFNvdXJjZSBvYmplY3RzIGFyZSBhcHBsaWVkIGZyb20gbGVmdCB0byByaWdodC4gU3Vic2VxdWVudFxuICAgICAqIHNvdXJjZXMgb3ZlcndyaXRlIHByb3BlcnR5IGFzc2lnbm1lbnRzIG9mIHByZXZpb3VzIHNvdXJjZXMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjUuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gICAgICogQHBhcmFtIHsuLi5PYmplY3R9IFtzb3VyY2VzXSBUaGUgc291cmNlIG9iamVjdHMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHtcbiAgICAgKiAgICdhJzogW3sgJ2InOiAyIH0sIHsgJ2QnOiA0IH1dXG4gICAgICogfTtcbiAgICAgKlxuICAgICAqIHZhciBvdGhlciA9IHtcbiAgICAgKiAgICdhJzogW3sgJ2MnOiAzIH0sIHsgJ2UnOiA1IH1dXG4gICAgICogfTtcbiAgICAgKlxuICAgICAqIF8ubWVyZ2Uob2JqZWN0LCBvdGhlcik7XG4gICAgICogLy8gPT4geyAnYSc6IFt7ICdiJzogMiwgJ2MnOiAzIH0sIHsgJ2QnOiA0LCAnZSc6IDUgfV0gfVxuICAgICAqL1xuICAgIHZhciBtZXJnZSA9IGNyZWF0ZUFzc2lnbmVyKGZ1bmN0aW9uKG9iamVjdCwgc291cmNlLCBzcmNJbmRleCkge1xuICAgICAgYmFzZU1lcmdlKG9iamVjdCwgc291cmNlLCBzcmNJbmRleCk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLm1lcmdlYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBjdXN0b21pemVyYCB3aGljaFxuICAgICAqIGlzIGludm9rZWQgdG8gcHJvZHVjZSB0aGUgbWVyZ2VkIHZhbHVlcyBvZiB0aGUgZGVzdGluYXRpb24gYW5kIHNvdXJjZVxuICAgICAqIHByb3BlcnRpZXMuIElmIGBjdXN0b21pemVyYCByZXR1cm5zIGB1bmRlZmluZWRgLCBtZXJnaW5nIGlzIGhhbmRsZWQgYnkgdGhlXG4gICAgICogbWV0aG9kIGluc3RlYWQuIFRoZSBgY3VzdG9taXplcmAgaXMgaW52b2tlZCB3aXRoIHNpeCBhcmd1bWVudHM6XG4gICAgICogKG9ialZhbHVlLCBzcmNWYWx1ZSwga2V5LCBvYmplY3QsIHNvdXJjZSwgc3RhY2spLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7Li4uT2JqZWN0fSBzb3VyY2VzIFRoZSBzb3VyY2Ugb2JqZWN0cy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjdXN0b21pemVyIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgYXNzaWduZWQgdmFsdWVzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIGN1c3RvbWl6ZXIob2JqVmFsdWUsIHNyY1ZhbHVlKSB7XG4gICAgICogICBpZiAoXy5pc0FycmF5KG9ialZhbHVlKSkge1xuICAgICAqICAgICByZXR1cm4gb2JqVmFsdWUuY29uY2F0KHNyY1ZhbHVlKTtcbiAgICAgKiAgIH1cbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IFsxXSwgJ2InOiBbMl0gfTtcbiAgICAgKiB2YXIgb3RoZXIgPSB7ICdhJzogWzNdLCAnYic6IFs0XSB9O1xuICAgICAqXG4gICAgICogXy5tZXJnZVdpdGgob2JqZWN0LCBvdGhlciwgY3VzdG9taXplcik7XG4gICAgICogLy8gPT4geyAnYSc6IFsxLCAzXSwgJ2InOiBbMiwgNF0gfVxuICAgICAqL1xuICAgIHZhciBtZXJnZVdpdGggPSBjcmVhdGVBc3NpZ25lcihmdW5jdGlvbihvYmplY3QsIHNvdXJjZSwgc3JjSW5kZXgsIGN1c3RvbWl6ZXIpIHtcbiAgICAgIGJhc2VNZXJnZShvYmplY3QsIHNvdXJjZSwgc3JjSW5kZXgsIGN1c3RvbWl6ZXIpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhlIG9wcG9zaXRlIG9mIGBfLnBpY2tgOyB0aGlzIG1ldGhvZCBjcmVhdGVzIGFuIG9iamVjdCBjb21wb3NlZCBvZiB0aGVcbiAgICAgKiBvd24gYW5kIGluaGVyaXRlZCBlbnVtZXJhYmxlIHByb3BlcnR5IHBhdGhzIG9mIGBvYmplY3RgIHRoYXQgYXJlIG5vdCBvbWl0dGVkLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGNvbnNpZGVyYWJseSBzbG93ZXIgdGhhbiBgXy5waWNrYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBzb3VyY2Ugb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7Li4uKHN0cmluZ3xzdHJpbmdbXSl9IFtwYXRoc10gVGhlIHByb3BlcnR5IHBhdGhzIHRvIG9taXQuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxLCAnYic6ICcyJywgJ2MnOiAzIH07XG4gICAgICpcbiAgICAgKiBfLm9taXQob2JqZWN0LCBbJ2EnLCAnYyddKTtcbiAgICAgKiAvLyA9PiB7ICdiJzogJzInIH1cbiAgICAgKi9cbiAgICB2YXIgb21pdCA9IGZsYXRSZXN0KGZ1bmN0aW9uKG9iamVjdCwgcGF0aHMpIHtcbiAgICAgIHZhciByZXN1bHQgPSB7fTtcbiAgICAgIGlmIChvYmplY3QgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfVxuICAgICAgdmFyIGlzRGVlcCA9IGZhbHNlO1xuICAgICAgcGF0aHMgPSBhcnJheU1hcChwYXRocywgZnVuY3Rpb24ocGF0aCkge1xuICAgICAgICBwYXRoID0gY2FzdFBhdGgocGF0aCwgb2JqZWN0KTtcbiAgICAgICAgaXNEZWVwIHx8IChpc0RlZXAgPSBwYXRoLmxlbmd0aCA+IDEpO1xuICAgICAgICByZXR1cm4gcGF0aDtcbiAgICAgIH0pO1xuICAgICAgY29weU9iamVjdChvYmplY3QsIGdldEFsbEtleXNJbihvYmplY3QpLCByZXN1bHQpO1xuICAgICAgaWYgKGlzRGVlcCkge1xuICAgICAgICByZXN1bHQgPSBiYXNlQ2xvbmUocmVzdWx0LCBDTE9ORV9ERUVQX0ZMQUcgfCBDTE9ORV9GTEFUX0ZMQUcgfCBDTE9ORV9TWU1CT0xTX0ZMQUcsIGN1c3RvbU9taXRDbG9uZSk7XG4gICAgICB9XG4gICAgICB2YXIgbGVuZ3RoID0gcGF0aHMubGVuZ3RoO1xuICAgICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICAgIGJhc2VVbnNldChyZXN1bHQsIHBhdGhzW2xlbmd0aF0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBvcHBvc2l0ZSBvZiBgXy5waWNrQnlgOyB0aGlzIG1ldGhvZCBjcmVhdGVzIGFuIG9iamVjdCBjb21wb3NlZCBvZlxuICAgICAqIHRoZSBvd24gYW5kIGluaGVyaXRlZCBlbnVtZXJhYmxlIHN0cmluZyBrZXllZCBwcm9wZXJ0aWVzIG9mIGBvYmplY3RgIHRoYXRcbiAgICAgKiBgcHJlZGljYXRlYCBkb2Vzbid0IHJldHVybiB0cnV0aHkgZm9yLiBUaGUgcHJlZGljYXRlIGlzIGludm9rZWQgd2l0aCB0d29cbiAgICAgKiBhcmd1bWVudHM6ICh2YWx1ZSwga2V5KS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBzb3VyY2Ugb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIHByb3BlcnR5LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogMSwgJ2InOiAnMicsICdjJzogMyB9O1xuICAgICAqXG4gICAgICogXy5vbWl0Qnkob2JqZWN0LCBfLmlzTnVtYmVyKTtcbiAgICAgKiAvLyA9PiB7ICdiJzogJzInIH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBvbWl0Qnkob2JqZWN0LCBwcmVkaWNhdGUpIHtcbiAgICAgIHJldHVybiBwaWNrQnkob2JqZWN0LCBuZWdhdGUoZ2V0SXRlcmF0ZWUocHJlZGljYXRlKSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gb2JqZWN0IGNvbXBvc2VkIG9mIHRoZSBwaWNrZWQgYG9iamVjdGAgcHJvcGVydGllcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBzb3VyY2Ugb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7Li4uKHN0cmluZ3xzdHJpbmdbXSl9IFtwYXRoc10gVGhlIHByb3BlcnR5IHBhdGhzIHRvIHBpY2suXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxLCAnYic6ICcyJywgJ2MnOiAzIH07XG4gICAgICpcbiAgICAgKiBfLnBpY2sob2JqZWN0LCBbJ2EnLCAnYyddKTtcbiAgICAgKiAvLyA9PiB7ICdhJzogMSwgJ2MnOiAzIH1cbiAgICAgKi9cbiAgICB2YXIgcGljayA9IGZsYXRSZXN0KGZ1bmN0aW9uKG9iamVjdCwgcGF0aHMpIHtcbiAgICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IHt9IDogYmFzZVBpY2sob2JqZWN0LCBwYXRocyk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIG9iamVjdCBjb21wb3NlZCBvZiB0aGUgYG9iamVjdGAgcHJvcGVydGllcyBgcHJlZGljYXRlYCByZXR1cm5zXG4gICAgICogdHJ1dGh5IGZvci4gVGhlIHByZWRpY2F0ZSBpcyBpbnZva2VkIHdpdGggdHdvIGFyZ3VtZW50czogKHZhbHVlLCBrZXkpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIHNvdXJjZSBvYmplY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgcHJvcGVydHkuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxLCAnYic6ICcyJywgJ2MnOiAzIH07XG4gICAgICpcbiAgICAgKiBfLnBpY2tCeShvYmplY3QsIF8uaXNOdW1iZXIpO1xuICAgICAqIC8vID0+IHsgJ2EnOiAxLCAnYyc6IDMgfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHBpY2tCeShvYmplY3QsIHByZWRpY2F0ZSkge1xuICAgICAgaWYgKG9iamVjdCA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiB7fTtcbiAgICAgIH1cbiAgICAgIHZhciBwcm9wcyA9IGFycmF5TWFwKGdldEFsbEtleXNJbihvYmplY3QpLCBmdW5jdGlvbihwcm9wKSB7XG4gICAgICAgIHJldHVybiBbcHJvcF07XG4gICAgICB9KTtcbiAgICAgIHByZWRpY2F0ZSA9IGdldEl0ZXJhdGVlKHByZWRpY2F0ZSk7XG4gICAgICByZXR1cm4gYmFzZVBpY2tCeShvYmplY3QsIHByb3BzLCBmdW5jdGlvbih2YWx1ZSwgcGF0aCkge1xuICAgICAgICByZXR1cm4gcHJlZGljYXRlKHZhbHVlLCBwYXRoWzBdKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZ2V0YCBleGNlcHQgdGhhdCBpZiB0aGUgcmVzb2x2ZWQgdmFsdWUgaXMgYVxuICAgICAqIGZ1bmN0aW9uIGl0J3MgaW52b2tlZCB3aXRoIHRoZSBgdGhpc2AgYmluZGluZyBvZiBpdHMgcGFyZW50IG9iamVjdCBhbmRcbiAgICAgKiBpdHMgcmVzdWx0IGlzIHJldHVybmVkLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gcmVzb2x2ZS5cbiAgICAgKiBAcGFyYW0geyp9IFtkZWZhdWx0VmFsdWVdIFRoZSB2YWx1ZSByZXR1cm5lZCBmb3IgYHVuZGVmaW5lZGAgcmVzb2x2ZWQgdmFsdWVzLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByZXNvbHZlZCB2YWx1ZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiBbeyAnYic6IHsgJ2MxJzogMywgJ2MyJzogXy5jb25zdGFudCg0KSB9IH1dIH07XG4gICAgICpcbiAgICAgKiBfLnJlc3VsdChvYmplY3QsICdhWzBdLmIuYzEnKTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICpcbiAgICAgKiBfLnJlc3VsdChvYmplY3QsICdhWzBdLmIuYzInKTtcbiAgICAgKiAvLyA9PiA0XG4gICAgICpcbiAgICAgKiBfLnJlc3VsdChvYmplY3QsICdhWzBdLmIuYzMnLCAnZGVmYXVsdCcpO1xuICAgICAqIC8vID0+ICdkZWZhdWx0J1xuICAgICAqXG4gICAgICogXy5yZXN1bHQob2JqZWN0LCAnYVswXS5iLmMzJywgXy5jb25zdGFudCgnZGVmYXVsdCcpKTtcbiAgICAgKiAvLyA9PiAnZGVmYXVsdCdcbiAgICAgKi9cbiAgICBmdW5jdGlvbiByZXN1bHQob2JqZWN0LCBwYXRoLCBkZWZhdWx0VmFsdWUpIHtcbiAgICAgIHBhdGggPSBjYXN0UGF0aChwYXRoLCBvYmplY3QpO1xuXG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBwYXRoLmxlbmd0aDtcblxuICAgICAgLy8gRW5zdXJlIHRoZSBsb29wIGlzIGVudGVyZWQgd2hlbiBwYXRoIGlzIGVtcHR5LlxuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgbGVuZ3RoID0gMTtcbiAgICAgICAgb2JqZWN0ID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gb2JqZWN0ID09IG51bGwgPyB1bmRlZmluZWQgOiBvYmplY3RbdG9LZXkocGF0aFtpbmRleF0pXTtcbiAgICAgICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBpbmRleCA9IGxlbmd0aDtcbiAgICAgICAgICB2YWx1ZSA9IGRlZmF1bHRWYWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBvYmplY3QgPSBpc0Z1bmN0aW9uKHZhbHVlKSA/IHZhbHVlLmNhbGwob2JqZWN0KSA6IHZhbHVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSB2YWx1ZSBhdCBgcGF0aGAgb2YgYG9iamVjdGAuIElmIGEgcG9ydGlvbiBvZiBgcGF0aGAgZG9lc24ndCBleGlzdCxcbiAgICAgKiBpdCdzIGNyZWF0ZWQuIEFycmF5cyBhcmUgY3JlYXRlZCBmb3IgbWlzc2luZyBpbmRleCBwcm9wZXJ0aWVzIHdoaWxlIG9iamVjdHNcbiAgICAgKiBhcmUgY3JlYXRlZCBmb3IgYWxsIG90aGVyIG1pc3NpbmcgcHJvcGVydGllcy4gVXNlIGBfLnNldFdpdGhgIHRvIGN1c3RvbWl6ZVxuICAgICAqIGBwYXRoYCBjcmVhdGlvbi5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuNy4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIHNldC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiBbeyAnYic6IHsgJ2MnOiAzIH0gfV0gfTtcbiAgICAgKlxuICAgICAqIF8uc2V0KG9iamVjdCwgJ2FbMF0uYi5jJywgNCk7XG4gICAgICogY29uc29sZS5sb2cob2JqZWN0LmFbMF0uYi5jKTtcbiAgICAgKiAvLyA9PiA0XG4gICAgICpcbiAgICAgKiBfLnNldChvYmplY3QsIFsneCcsICcwJywgJ3knLCAneiddLCA1KTtcbiAgICAgKiBjb25zb2xlLmxvZyhvYmplY3QueFswXS55LnopO1xuICAgICAqIC8vID0+IDVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzZXQob2JqZWN0LCBwYXRoLCB2YWx1ZSkge1xuICAgICAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gb2JqZWN0IDogYmFzZVNldChvYmplY3QsIHBhdGgsIHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnNldGAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgY3VzdG9taXplcmAgd2hpY2ggaXNcbiAgICAgKiBpbnZva2VkIHRvIHByb2R1Y2UgdGhlIG9iamVjdHMgb2YgYHBhdGhgLiAgSWYgYGN1c3RvbWl6ZXJgIHJldHVybnMgYHVuZGVmaW5lZGBcbiAgICAgKiBwYXRoIGNyZWF0aW9uIGlzIGhhbmRsZWQgYnkgdGhlIG1ldGhvZCBpbnN0ZWFkLiBUaGUgYGN1c3RvbWl6ZXJgIGlzIGludm9rZWRcbiAgICAgKiB3aXRoIHRocmVlIGFyZ3VtZW50czogKG5zVmFsdWUsIGtleSwgbnNPYmplY3QpLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gc2V0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBhc3NpZ25lZCB2YWx1ZXMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHt9O1xuICAgICAqXG4gICAgICogXy5zZXRXaXRoKG9iamVjdCwgJ1swXVsxXScsICdhJywgT2JqZWN0KTtcbiAgICAgKiAvLyA9PiB7ICcwJzogeyAnMSc6ICdhJyB9IH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzZXRXaXRoKG9iamVjdCwgcGF0aCwgdmFsdWUsIGN1c3RvbWl6ZXIpIHtcbiAgICAgIGN1c3RvbWl6ZXIgPSB0eXBlb2YgY3VzdG9taXplciA9PSAnZnVuY3Rpb24nID8gY3VzdG9taXplciA6IHVuZGVmaW5lZDtcbiAgICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IG9iamVjdCA6IGJhc2VTZXQob2JqZWN0LCBwYXRoLCB2YWx1ZSwgY3VzdG9taXplcik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiBvd24gZW51bWVyYWJsZSBzdHJpbmcga2V5ZWQtdmFsdWUgcGFpcnMgZm9yIGBvYmplY3RgXG4gICAgICogd2hpY2ggY2FuIGJlIGNvbnN1bWVkIGJ5IGBfLmZyb21QYWlyc2AuIElmIGBvYmplY3RgIGlzIGEgbWFwIG9yIHNldCwgaXRzXG4gICAgICogZW50cmllcyBhcmUgcmV0dXJuZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAYWxpYXMgZW50cmllc1xuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBrZXktdmFsdWUgcGFpcnMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYSA9IDE7XG4gICAgICogICB0aGlzLmIgPSAyO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIEZvby5wcm90b3R5cGUuYyA9IDM7XG4gICAgICpcbiAgICAgKiBfLnRvUGFpcnMobmV3IEZvbyk7XG4gICAgICogLy8gPT4gW1snYScsIDFdLCBbJ2InLCAyXV0gKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAgICAgKi9cbiAgICB2YXIgdG9QYWlycyA9IGNyZWF0ZVRvUGFpcnMoa2V5cyk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIG93biBhbmQgaW5oZXJpdGVkIGVudW1lcmFibGUgc3RyaW5nIGtleWVkLXZhbHVlIHBhaXJzXG4gICAgICogZm9yIGBvYmplY3RgIHdoaWNoIGNhbiBiZSBjb25zdW1lZCBieSBgXy5mcm9tUGFpcnNgLiBJZiBgb2JqZWN0YCBpcyBhIG1hcFxuICAgICAqIG9yIHNldCwgaXRzIGVudHJpZXMgYXJlIHJldHVybmVkLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGFsaWFzIGVudHJpZXNJblxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBrZXktdmFsdWUgcGFpcnMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYSA9IDE7XG4gICAgICogICB0aGlzLmIgPSAyO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIEZvby5wcm90b3R5cGUuYyA9IDM7XG4gICAgICpcbiAgICAgKiBfLnRvUGFpcnNJbihuZXcgRm9vKTtcbiAgICAgKiAvLyA9PiBbWydhJywgMV0sIFsnYicsIDJdLCBbJ2MnLCAzXV0gKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAgICAgKi9cbiAgICB2YXIgdG9QYWlyc0luID0gY3JlYXRlVG9QYWlycyhrZXlzSW4pO1xuXG4gICAgLyoqXG4gICAgICogQW4gYWx0ZXJuYXRpdmUgdG8gYF8ucmVkdWNlYDsgdGhpcyBtZXRob2QgdHJhbnNmb3JtcyBgb2JqZWN0YCB0byBhIG5ld1xuICAgICAqIGBhY2N1bXVsYXRvcmAgb2JqZWN0IHdoaWNoIGlzIHRoZSByZXN1bHQgb2YgcnVubmluZyBlYWNoIG9mIGl0cyBvd25cbiAgICAgKiBlbnVtZXJhYmxlIHN0cmluZyBrZXllZCBwcm9wZXJ0aWVzIHRocnUgYGl0ZXJhdGVlYCwgd2l0aCBlYWNoIGludm9jYXRpb25cbiAgICAgKiBwb3RlbnRpYWxseSBtdXRhdGluZyB0aGUgYGFjY3VtdWxhdG9yYCBvYmplY3QuIElmIGBhY2N1bXVsYXRvcmAgaXMgbm90XG4gICAgICogcHJvdmlkZWQsIGEgbmV3IG9iamVjdCB3aXRoIHRoZSBzYW1lIGBbW1Byb3RvdHlwZV1dYCB3aWxsIGJlIHVzZWQuIFRoZVxuICAgICAqIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBmb3VyIGFyZ3VtZW50czogKGFjY3VtdWxhdG9yLCB2YWx1ZSwga2V5LCBvYmplY3QpLlxuICAgICAqIEl0ZXJhdGVlIGZ1bmN0aW9ucyBtYXkgZXhpdCBpdGVyYXRpb24gZWFybHkgYnkgZXhwbGljaXRseSByZXR1cm5pbmcgYGZhbHNlYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAxLjMuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7Kn0gW2FjY3VtdWxhdG9yXSBUaGUgY3VzdG9tIGFjY3VtdWxhdG9yIHZhbHVlLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBhY2N1bXVsYXRlZCB2YWx1ZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50cmFuc2Zvcm0oWzIsIDMsIDRdLCBmdW5jdGlvbihyZXN1bHQsIG4pIHtcbiAgICAgKiAgIHJlc3VsdC5wdXNoKG4gKj0gbik7XG4gICAgICogICByZXR1cm4gbiAlIDIgPT0gMDtcbiAgICAgKiB9LCBbXSk7XG4gICAgICogLy8gPT4gWzQsIDldXG4gICAgICpcbiAgICAgKiBfLnRyYW5zZm9ybSh7ICdhJzogMSwgJ2InOiAyLCAnYyc6IDEgfSwgZnVuY3Rpb24ocmVzdWx0LCB2YWx1ZSwga2V5KSB7XG4gICAgICogICAocmVzdWx0W3ZhbHVlXSB8fCAocmVzdWx0W3ZhbHVlXSA9IFtdKSkucHVzaChrZXkpO1xuICAgICAqIH0sIHt9KTtcbiAgICAgKiAvLyA9PiB7ICcxJzogWydhJywgJ2MnXSwgJzInOiBbJ2InXSB9XG4gICAgICovXG4gICAgZnVuY3Rpb24gdHJhbnNmb3JtKG9iamVjdCwgaXRlcmF0ZWUsIGFjY3VtdWxhdG9yKSB7XG4gICAgICB2YXIgaXNBcnIgPSBpc0FycmF5KG9iamVjdCksXG4gICAgICAgICAgaXNBcnJMaWtlID0gaXNBcnIgfHwgaXNCdWZmZXIob2JqZWN0KSB8fCBpc1R5cGVkQXJyYXkob2JqZWN0KTtcblxuICAgICAgaXRlcmF0ZWUgPSBnZXRJdGVyYXRlZShpdGVyYXRlZSwgNCk7XG4gICAgICBpZiAoYWNjdW11bGF0b3IgPT0gbnVsbCkge1xuICAgICAgICB2YXIgQ3RvciA9IG9iamVjdCAmJiBvYmplY3QuY29uc3RydWN0b3I7XG4gICAgICAgIGlmIChpc0Fyckxpa2UpIHtcbiAgICAgICAgICBhY2N1bXVsYXRvciA9IGlzQXJyID8gbmV3IEN0b3IgOiBbXTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChpc09iamVjdChvYmplY3QpKSB7XG4gICAgICAgICAgYWNjdW11bGF0b3IgPSBpc0Z1bmN0aW9uKEN0b3IpID8gYmFzZUNyZWF0ZShnZXRQcm90b3R5cGUob2JqZWN0KSkgOiB7fTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICBhY2N1bXVsYXRvciA9IHt9O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICAoaXNBcnJMaWtlID8gYXJyYXlFYWNoIDogYmFzZUZvck93bikob2JqZWN0LCBmdW5jdGlvbih2YWx1ZSwgaW5kZXgsIG9iamVjdCkge1xuICAgICAgICByZXR1cm4gaXRlcmF0ZWUoYWNjdW11bGF0b3IsIHZhbHVlLCBpbmRleCwgb2JqZWN0KTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGFjY3VtdWxhdG9yO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgdGhlIHByb3BlcnR5IGF0IGBwYXRoYCBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIHVuc2V0LlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgcHJvcGVydHkgaXMgZGVsZXRlZCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IFt7ICdiJzogeyAnYyc6IDcgfSB9XSB9O1xuICAgICAqIF8udW5zZXQob2JqZWN0LCAnYVswXS5iLmMnKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhvYmplY3QpO1xuICAgICAqIC8vID0+IHsgJ2EnOiBbeyAnYic6IHt9IH1dIH07XG4gICAgICpcbiAgICAgKiBfLnVuc2V0KG9iamVjdCwgWydhJywgJzAnLCAnYicsICdjJ10pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKG9iamVjdCk7XG4gICAgICogLy8gPT4geyAnYSc6IFt7ICdiJzoge30gfV0gfTtcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB1bnNldChvYmplY3QsIHBhdGgpIHtcbiAgICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IHRydWUgOiBiYXNlVW5zZXQob2JqZWN0LCBwYXRoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnNldGAgZXhjZXB0IHRoYXQgYWNjZXB0cyBgdXBkYXRlcmAgdG8gcHJvZHVjZSB0aGVcbiAgICAgKiB2YWx1ZSB0byBzZXQuIFVzZSBgXy51cGRhdGVXaXRoYCB0byBjdXN0b21pemUgYHBhdGhgIGNyZWF0aW9uLiBUaGUgYHVwZGF0ZXJgXG4gICAgICogaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuNi4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIHNldC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSB1cGRhdGVyIFRoZSBmdW5jdGlvbiB0byBwcm9kdWNlIHRoZSB1cGRhdGVkIHZhbHVlLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogW3sgJ2InOiB7ICdjJzogMyB9IH1dIH07XG4gICAgICpcbiAgICAgKiBfLnVwZGF0ZShvYmplY3QsICdhWzBdLmIuYycsIGZ1bmN0aW9uKG4pIHsgcmV0dXJuIG4gKiBuOyB9KTtcbiAgICAgKiBjb25zb2xlLmxvZyhvYmplY3QuYVswXS5iLmMpO1xuICAgICAqIC8vID0+IDlcbiAgICAgKlxuICAgICAqIF8udXBkYXRlKG9iamVjdCwgJ3hbMF0ueS56JywgZnVuY3Rpb24obikgeyByZXR1cm4gbiA/IG4gKyAxIDogMDsgfSk7XG4gICAgICogY29uc29sZS5sb2cob2JqZWN0LnhbMF0ueS56KTtcbiAgICAgKiAvLyA9PiAwXG4gICAgICovXG4gICAgZnVuY3Rpb24gdXBkYXRlKG9iamVjdCwgcGF0aCwgdXBkYXRlcikge1xuICAgICAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gb2JqZWN0IDogYmFzZVVwZGF0ZShvYmplY3QsIHBhdGgsIGNhc3RGdW5jdGlvbih1cGRhdGVyKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy51cGRhdGVgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGN1c3RvbWl6ZXJgIHdoaWNoIGlzXG4gICAgICogaW52b2tlZCB0byBwcm9kdWNlIHRoZSBvYmplY3RzIG9mIGBwYXRoYC4gIElmIGBjdXN0b21pemVyYCByZXR1cm5zIGB1bmRlZmluZWRgXG4gICAgICogcGF0aCBjcmVhdGlvbiBpcyBoYW5kbGVkIGJ5IHRoZSBtZXRob2QgaW5zdGVhZC4gVGhlIGBjdXN0b21pemVyYCBpcyBpbnZva2VkXG4gICAgICogd2l0aCB0aHJlZSBhcmd1bWVudHM6IChuc1ZhbHVlLCBrZXksIG5zT2JqZWN0KS5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuNi4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIHNldC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSB1cGRhdGVyIFRoZSBmdW5jdGlvbiB0byBwcm9kdWNlIHRoZSB1cGRhdGVkIHZhbHVlLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGFzc2lnbmVkIHZhbHVlcy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0ge307XG4gICAgICpcbiAgICAgKiBfLnVwZGF0ZVdpdGgob2JqZWN0LCAnWzBdWzFdJywgXy5jb25zdGFudCgnYScpLCBPYmplY3QpO1xuICAgICAqIC8vID0+IHsgJzAnOiB7ICcxJzogJ2EnIH0gfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHVwZGF0ZVdpdGgob2JqZWN0LCBwYXRoLCB1cGRhdGVyLCBjdXN0b21pemVyKSB7XG4gICAgICBjdXN0b21pemVyID0gdHlwZW9mIGN1c3RvbWl6ZXIgPT0gJ2Z1bmN0aW9uJyA/IGN1c3RvbWl6ZXIgOiB1bmRlZmluZWQ7XG4gICAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyBvYmplY3QgOiBiYXNlVXBkYXRlKG9iamVjdCwgcGF0aCwgY2FzdEZ1bmN0aW9uKHVwZGF0ZXIpLCBjdXN0b21pemVyKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIHRoZSBvd24gZW51bWVyYWJsZSBzdHJpbmcga2V5ZWQgcHJvcGVydHkgdmFsdWVzIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIE5vbi1vYmplY3QgdmFsdWVzIGFyZSBjb2VyY2VkIHRvIG9iamVjdHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgdmFsdWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBGb28oKSB7XG4gICAgICogICB0aGlzLmEgPSAxO1xuICAgICAqICAgdGhpcy5iID0gMjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBGb28ucHJvdG90eXBlLmMgPSAzO1xuICAgICAqXG4gICAgICogXy52YWx1ZXMobmV3IEZvbyk7XG4gICAgICogLy8gPT4gWzEsIDJdIChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpXG4gICAgICpcbiAgICAgKiBfLnZhbHVlcygnaGknKTtcbiAgICAgKiAvLyA9PiBbJ2gnLCAnaSddXG4gICAgICovXG4gICAgZnVuY3Rpb24gdmFsdWVzKG9iamVjdCkge1xuICAgICAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gW10gOiBiYXNlVmFsdWVzKG9iamVjdCwga2V5cyhvYmplY3QpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIHRoZSBvd24gYW5kIGluaGVyaXRlZCBlbnVtZXJhYmxlIHN0cmluZyBrZXllZCBwcm9wZXJ0eVxuICAgICAqIHZhbHVlcyBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBOb24tb2JqZWN0IHZhbHVlcyBhcmUgY29lcmNlZCB0byBvYmplY3RzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IHZhbHVlcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gRm9vKCkge1xuICAgICAqICAgdGhpcy5hID0gMTtcbiAgICAgKiAgIHRoaXMuYiA9IDI7XG4gICAgICogfVxuICAgICAqXG4gICAgICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAgICAgKlxuICAgICAqIF8udmFsdWVzSW4obmV3IEZvbyk7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdIChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpXG4gICAgICovXG4gICAgZnVuY3Rpb24gdmFsdWVzSW4ob2JqZWN0KSB7XG4gICAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyBbXSA6IGJhc2VWYWx1ZXMob2JqZWN0LCBrZXlzSW4ob2JqZWN0KSk7XG4gICAgfVxuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQ2xhbXBzIGBudW1iZXJgIHdpdGhpbiB0aGUgaW5jbHVzaXZlIGBsb3dlcmAgYW5kIGB1cHBlcmAgYm91bmRzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IE51bWJlclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBudW1iZXIgVGhlIG51bWJlciB0byBjbGFtcC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2xvd2VyXSBUaGUgbG93ZXIgYm91bmQuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHVwcGVyIFRoZSB1cHBlciBib3VuZC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBjbGFtcGVkIG51bWJlci5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5jbGFtcCgtMTAsIC01LCA1KTtcbiAgICAgKiAvLyA9PiAtNVxuICAgICAqXG4gICAgICogXy5jbGFtcCgxMCwgLTUsIDUpO1xuICAgICAqIC8vID0+IDVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjbGFtcChudW1iZXIsIGxvd2VyLCB1cHBlcikge1xuICAgICAgaWYgKHVwcGVyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdXBwZXIgPSBsb3dlcjtcbiAgICAgICAgbG93ZXIgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICBpZiAodXBwZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICB1cHBlciA9IHRvTnVtYmVyKHVwcGVyKTtcbiAgICAgICAgdXBwZXIgPSB1cHBlciA9PT0gdXBwZXIgPyB1cHBlciA6IDA7XG4gICAgICB9XG4gICAgICBpZiAobG93ZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBsb3dlciA9IHRvTnVtYmVyKGxvd2VyKTtcbiAgICAgICAgbG93ZXIgPSBsb3dlciA9PT0gbG93ZXIgPyBsb3dlciA6IDA7XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZUNsYW1wKHRvTnVtYmVyKG51bWJlciksIGxvd2VyLCB1cHBlcik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGBuYCBpcyBiZXR3ZWVuIGBzdGFydGAgYW5kIHVwIHRvLCBidXQgbm90IGluY2x1ZGluZywgYGVuZGAuIElmXG4gICAgICogYGVuZGAgaXMgbm90IHNwZWNpZmllZCwgaXQncyBzZXQgdG8gYHN0YXJ0YCB3aXRoIGBzdGFydGAgdGhlbiBzZXQgdG8gYDBgLlxuICAgICAqIElmIGBzdGFydGAgaXMgZ3JlYXRlciB0aGFuIGBlbmRgIHRoZSBwYXJhbXMgYXJlIHN3YXBwZWQgdG8gc3VwcG9ydFxuICAgICAqIG5lZ2F0aXZlIHJhbmdlcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjMuMFxuICAgICAqIEBjYXRlZ29yeSBOdW1iZXJcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbnVtYmVyIFRoZSBudW1iZXIgdG8gY2hlY2suXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzdGFydD0wXSBUaGUgc3RhcnQgb2YgdGhlIHJhbmdlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBlbmQgVGhlIGVuZCBvZiB0aGUgcmFuZ2UuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBudW1iZXJgIGlzIGluIHRoZSByYW5nZSwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBzZWUgXy5yYW5nZSwgXy5yYW5nZVJpZ2h0XG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaW5SYW5nZSgzLCAyLCA0KTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmluUmFuZ2UoNCwgOCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pblJhbmdlKDQsIDIpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmluUmFuZ2UoMiwgMik7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaW5SYW5nZSgxLjIsIDIpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaW5SYW5nZSg1LjIsIDQpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmluUmFuZ2UoLTMsIC0yLCAtNik7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGluUmFuZ2UobnVtYmVyLCBzdGFydCwgZW5kKSB7XG4gICAgICBzdGFydCA9IHRvRmluaXRlKHN0YXJ0KTtcbiAgICAgIGlmIChlbmQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBlbmQgPSBzdGFydDtcbiAgICAgICAgc3RhcnQgPSAwO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZW5kID0gdG9GaW5pdGUoZW5kKTtcbiAgICAgIH1cbiAgICAgIG51bWJlciA9IHRvTnVtYmVyKG51bWJlcik7XG4gICAgICByZXR1cm4gYmFzZUluUmFuZ2UobnVtYmVyLCBzdGFydCwgZW5kKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBQcm9kdWNlcyBhIHJhbmRvbSBudW1iZXIgYmV0d2VlbiB0aGUgaW5jbHVzaXZlIGBsb3dlcmAgYW5kIGB1cHBlcmAgYm91bmRzLlxuICAgICAqIElmIG9ubHkgb25lIGFyZ3VtZW50IGlzIHByb3ZpZGVkIGEgbnVtYmVyIGJldHdlZW4gYDBgIGFuZCB0aGUgZ2l2ZW4gbnVtYmVyXG4gICAgICogaXMgcmV0dXJuZWQuIElmIGBmbG9hdGluZ2AgaXMgYHRydWVgLCBvciBlaXRoZXIgYGxvd2VyYCBvciBgdXBwZXJgIGFyZVxuICAgICAqIGZsb2F0cywgYSBmbG9hdGluZy1wb2ludCBudW1iZXIgaXMgcmV0dXJuZWQgaW5zdGVhZCBvZiBhbiBpbnRlZ2VyLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIEphdmFTY3JpcHQgZm9sbG93cyB0aGUgSUVFRS03NTQgc3RhbmRhcmQgZm9yIHJlc29sdmluZ1xuICAgICAqIGZsb2F0aW5nLXBvaW50IHZhbHVlcyB3aGljaCBjYW4gcHJvZHVjZSB1bmV4cGVjdGVkIHJlc3VsdHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC43LjBcbiAgICAgKiBAY2F0ZWdvcnkgTnVtYmVyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtsb3dlcj0wXSBUaGUgbG93ZXIgYm91bmQuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFt1cHBlcj0xXSBUaGUgdXBwZXIgYm91bmQuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbZmxvYXRpbmddIFNwZWNpZnkgcmV0dXJuaW5nIGEgZmxvYXRpbmctcG9pbnQgbnVtYmVyLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHJhbmRvbSBudW1iZXIuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ucmFuZG9tKDAsIDUpO1xuICAgICAqIC8vID0+IGFuIGludGVnZXIgYmV0d2VlbiAwIGFuZCA1XG4gICAgICpcbiAgICAgKiBfLnJhbmRvbSg1KTtcbiAgICAgKiAvLyA9PiBhbHNvIGFuIGludGVnZXIgYmV0d2VlbiAwIGFuZCA1XG4gICAgICpcbiAgICAgKiBfLnJhbmRvbSg1LCB0cnVlKTtcbiAgICAgKiAvLyA9PiBhIGZsb2F0aW5nLXBvaW50IG51bWJlciBiZXR3ZWVuIDAgYW5kIDVcbiAgICAgKlxuICAgICAqIF8ucmFuZG9tKDEuMiwgNS4yKTtcbiAgICAgKiAvLyA9PiBhIGZsb2F0aW5nLXBvaW50IG51bWJlciBiZXR3ZWVuIDEuMiBhbmQgNS4yXG4gICAgICovXG4gICAgZnVuY3Rpb24gcmFuZG9tKGxvd2VyLCB1cHBlciwgZmxvYXRpbmcpIHtcbiAgICAgIGlmIChmbG9hdGluZyAmJiB0eXBlb2YgZmxvYXRpbmcgIT0gJ2Jvb2xlYW4nICYmIGlzSXRlcmF0ZWVDYWxsKGxvd2VyLCB1cHBlciwgZmxvYXRpbmcpKSB7XG4gICAgICAgIHVwcGVyID0gZmxvYXRpbmcgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICBpZiAoZmxvYXRpbmcgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBpZiAodHlwZW9mIHVwcGVyID09ICdib29sZWFuJykge1xuICAgICAgICAgIGZsb2F0aW5nID0gdXBwZXI7XG4gICAgICAgICAgdXBwZXIgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodHlwZW9mIGxvd2VyID09ICdib29sZWFuJykge1xuICAgICAgICAgIGZsb2F0aW5nID0gbG93ZXI7XG4gICAgICAgICAgbG93ZXIgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChsb3dlciA9PT0gdW5kZWZpbmVkICYmIHVwcGVyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgbG93ZXIgPSAwO1xuICAgICAgICB1cHBlciA9IDE7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgbG93ZXIgPSB0b0Zpbml0ZShsb3dlcik7XG4gICAgICAgIGlmICh1cHBlciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgdXBwZXIgPSBsb3dlcjtcbiAgICAgICAgICBsb3dlciA9IDA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdXBwZXIgPSB0b0Zpbml0ZSh1cHBlcik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChsb3dlciA+IHVwcGVyKSB7XG4gICAgICAgIHZhciB0ZW1wID0gbG93ZXI7XG4gICAgICAgIGxvd2VyID0gdXBwZXI7XG4gICAgICAgIHVwcGVyID0gdGVtcDtcbiAgICAgIH1cbiAgICAgIGlmIChmbG9hdGluZyB8fCBsb3dlciAlIDEgfHwgdXBwZXIgJSAxKSB7XG4gICAgICAgIHZhciByYW5kID0gbmF0aXZlUmFuZG9tKCk7XG4gICAgICAgIHJldHVybiBuYXRpdmVNaW4obG93ZXIgKyAocmFuZCAqICh1cHBlciAtIGxvd2VyICsgZnJlZVBhcnNlRmxvYXQoJzFlLScgKyAoKHJhbmQgKyAnJykubGVuZ3RoIC0gMSkpKSksIHVwcGVyKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlUmFuZG9tKGxvd2VyLCB1cHBlcik7XG4gICAgfVxuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHN0cmluZ2AgdG8gW2NhbWVsIGNhc2VdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0NhbWVsQ2FzZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBjYW1lbCBjYXNlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uY2FtZWxDYXNlKCdGb28gQmFyJyk7XG4gICAgICogLy8gPT4gJ2Zvb0JhcidcbiAgICAgKlxuICAgICAqIF8uY2FtZWxDYXNlKCctLWZvby1iYXItLScpO1xuICAgICAqIC8vID0+ICdmb29CYXInXG4gICAgICpcbiAgICAgKiBfLmNhbWVsQ2FzZSgnX19GT09fQkFSX18nKTtcbiAgICAgKiAvLyA9PiAnZm9vQmFyJ1xuICAgICAqL1xuICAgIHZhciBjYW1lbENhc2UgPSBjcmVhdGVDb21wb3VuZGVyKGZ1bmN0aW9uKHJlc3VsdCwgd29yZCwgaW5kZXgpIHtcbiAgICAgIHdvcmQgPSB3b3JkLnRvTG93ZXJDYXNlKCk7XG4gICAgICByZXR1cm4gcmVzdWx0ICsgKGluZGV4ID8gY2FwaXRhbGl6ZSh3b3JkKSA6IHdvcmQpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgdGhlIGZpcnN0IGNoYXJhY3RlciBvZiBgc3RyaW5nYCB0byB1cHBlciBjYXNlIGFuZCB0aGUgcmVtYWluaW5nXG4gICAgICogdG8gbG93ZXIgY2FzZS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBjYXBpdGFsaXplLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGNhcGl0YWxpemVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5jYXBpdGFsaXplKCdGUkVEJyk7XG4gICAgICogLy8gPT4gJ0ZyZWQnXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2FwaXRhbGl6ZShzdHJpbmcpIHtcbiAgICAgIHJldHVybiB1cHBlckZpcnN0KHRvU3RyaW5nKHN0cmluZykudG9Mb3dlckNhc2UoKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRGVidXJycyBgc3RyaW5nYCBieSBjb252ZXJ0aW5nXG4gICAgICogW0xhdGluLTEgU3VwcGxlbWVudF0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvTGF0aW4tMV9TdXBwbGVtZW50XyhVbmljb2RlX2Jsb2NrKSNDaGFyYWN0ZXJfdGFibGUpXG4gICAgICogYW5kIFtMYXRpbiBFeHRlbmRlZC1BXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9MYXRpbl9FeHRlbmRlZC1BKVxuICAgICAqIGxldHRlcnMgdG8gYmFzaWMgTGF0aW4gbGV0dGVycyBhbmQgcmVtb3ZpbmdcbiAgICAgKiBbY29tYmluaW5nIGRpYWNyaXRpY2FsIG1hcmtzXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9Db21iaW5pbmdfRGlhY3JpdGljYWxfTWFya3MpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGRlYnVyci5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBkZWJ1cnJlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZGVidXJyKCdkw6lqw6AgdnUnKTtcbiAgICAgKiAvLyA9PiAnZGVqYSB2dSdcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBkZWJ1cnIoc3RyaW5nKSB7XG4gICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuICAgICAgcmV0dXJuIHN0cmluZyAmJiBzdHJpbmcucmVwbGFjZShyZUxhdGluLCBkZWJ1cnJMZXR0ZXIpLnJlcGxhY2UocmVDb21ib01hcmssICcnKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHN0cmluZ2AgZW5kcyB3aXRoIHRoZSBnaXZlbiB0YXJnZXQgc3RyaW5nLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFt0YXJnZXRdIFRoZSBzdHJpbmcgdG8gc2VhcmNoIGZvci5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3Bvc2l0aW9uPXN0cmluZy5sZW5ndGhdIFRoZSBwb3NpdGlvbiB0byBzZWFyY2ggdXAgdG8uXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBzdHJpbmdgIGVuZHMgd2l0aCBgdGFyZ2V0YCxcbiAgICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmVuZHNXaXRoKCdhYmMnLCAnYycpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uZW5kc1dpdGgoJ2FiYycsICdiJyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uZW5kc1dpdGgoJ2FiYycsICdiJywgMik7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGVuZHNXaXRoKHN0cmluZywgdGFyZ2V0LCBwb3NpdGlvbikge1xuICAgICAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgICAgIHRhcmdldCA9IGJhc2VUb1N0cmluZyh0YXJnZXQpO1xuXG4gICAgICB2YXIgbGVuZ3RoID0gc3RyaW5nLmxlbmd0aDtcbiAgICAgIHBvc2l0aW9uID0gcG9zaXRpb24gPT09IHVuZGVmaW5lZFxuICAgICAgICA/IGxlbmd0aFxuICAgICAgICA6IGJhc2VDbGFtcCh0b0ludGVnZXIocG9zaXRpb24pLCAwLCBsZW5ndGgpO1xuXG4gICAgICB2YXIgZW5kID0gcG9zaXRpb247XG4gICAgICBwb3NpdGlvbiAtPSB0YXJnZXQubGVuZ3RoO1xuICAgICAgcmV0dXJuIHBvc2l0aW9uID49IDAgJiYgc3RyaW5nLnNsaWNlKHBvc2l0aW9uLCBlbmQpID09IHRhcmdldDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyB0aGUgY2hhcmFjdGVycyBcIiZcIiwgXCI8XCIsIFwiPlwiLCAnXCInLCBhbmQgXCInXCIgaW4gYHN0cmluZ2AgdG8gdGhlaXJcbiAgICAgKiBjb3JyZXNwb25kaW5nIEhUTUwgZW50aXRpZXMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogTm8gb3RoZXIgY2hhcmFjdGVycyBhcmUgZXNjYXBlZC4gVG8gZXNjYXBlIGFkZGl0aW9uYWxcbiAgICAgKiBjaGFyYWN0ZXJzIHVzZSBhIHRoaXJkLXBhcnR5IGxpYnJhcnkgbGlrZSBbX2hlX10oaHR0cHM6Ly9tdGhzLmJlL2hlKS5cbiAgICAgKlxuICAgICAqIFRob3VnaCB0aGUgXCI+XCIgY2hhcmFjdGVyIGlzIGVzY2FwZWQgZm9yIHN5bW1ldHJ5LCBjaGFyYWN0ZXJzIGxpa2VcbiAgICAgKiBcIj5cIiBhbmQgXCIvXCIgZG9uJ3QgbmVlZCBlc2NhcGluZyBpbiBIVE1MIGFuZCBoYXZlIG5vIHNwZWNpYWwgbWVhbmluZ1xuICAgICAqIHVubGVzcyB0aGV5J3JlIHBhcnQgb2YgYSB0YWcgb3IgdW5xdW90ZWQgYXR0cmlidXRlIHZhbHVlLiBTZWVcbiAgICAgKiBbTWF0aGlhcyBCeW5lbnMncyBhcnRpY2xlXShodHRwczovL21hdGhpYXNieW5lbnMuYmUvbm90ZXMvYW1iaWd1b3VzLWFtcGVyc2FuZHMpXG4gICAgICogKHVuZGVyIFwic2VtaS1yZWxhdGVkIGZ1biBmYWN0XCIpIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICpcbiAgICAgKiBXaGVuIHdvcmtpbmcgd2l0aCBIVE1MIHlvdSBzaG91bGQgYWx3YXlzXG4gICAgICogW3F1b3RlIGF0dHJpYnV0ZSB2YWx1ZXNdKGh0dHA6Ly93b25rby5jb20vcG9zdC9odG1sLWVzY2FwaW5nKSB0byByZWR1Y2VcbiAgICAgKiBYU1MgdmVjdG9ycy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBlc2NhcGUuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgZXNjYXBlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZXNjYXBlKCdmcmVkLCBiYXJuZXksICYgcGViYmxlcycpO1xuICAgICAqIC8vID0+ICdmcmVkLCBiYXJuZXksICZhbXA7IHBlYmJsZXMnXG4gICAgICovXG4gICAgZnVuY3Rpb24gZXNjYXBlKHN0cmluZykge1xuICAgICAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgICAgIHJldHVybiAoc3RyaW5nICYmIHJlSGFzVW5lc2NhcGVkSHRtbC50ZXN0KHN0cmluZykpXG4gICAgICAgID8gc3RyaW5nLnJlcGxhY2UocmVVbmVzY2FwZWRIdG1sLCBlc2NhcGVIdG1sQ2hhcilcbiAgICAgICAgOiBzdHJpbmc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRXNjYXBlcyB0aGUgYFJlZ0V4cGAgc3BlY2lhbCBjaGFyYWN0ZXJzIFwiXlwiLCBcIiRcIiwgXCJcXFwiLCBcIi5cIiwgXCIqXCIsIFwiK1wiLFxuICAgICAqIFwiP1wiLCBcIihcIiwgXCIpXCIsIFwiW1wiLCBcIl1cIiwgXCJ7XCIsIFwifVwiLCBhbmQgXCJ8XCIgaW4gYHN0cmluZ2AuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gZXNjYXBlLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGVzY2FwZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmVzY2FwZVJlZ0V4cCgnW2xvZGFzaF0oaHR0cHM6Ly9sb2Rhc2guY29tLyknKTtcbiAgICAgKiAvLyA9PiAnXFxbbG9kYXNoXFxdXFwoaHR0cHM6Ly9sb2Rhc2hcXC5jb20vXFwpJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGVzY2FwZVJlZ0V4cChzdHJpbmcpIHtcbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICByZXR1cm4gKHN0cmluZyAmJiByZUhhc1JlZ0V4cENoYXIudGVzdChzdHJpbmcpKVxuICAgICAgICA/IHN0cmluZy5yZXBsYWNlKHJlUmVnRXhwQ2hhciwgJ1xcXFwkJicpXG4gICAgICAgIDogc3RyaW5nO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGBzdHJpbmdgIHRvXG4gICAgICogW2tlYmFiIGNhc2VdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0xldHRlcl9jYXNlI1NwZWNpYWxfY2FzZV9zdHlsZXMpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUga2ViYWIgY2FzZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmtlYmFiQ2FzZSgnRm9vIEJhcicpO1xuICAgICAqIC8vID0+ICdmb28tYmFyJ1xuICAgICAqXG4gICAgICogXy5rZWJhYkNhc2UoJ2Zvb0JhcicpO1xuICAgICAqIC8vID0+ICdmb28tYmFyJ1xuICAgICAqXG4gICAgICogXy5rZWJhYkNhc2UoJ19fRk9PX0JBUl9fJyk7XG4gICAgICogLy8gPT4gJ2Zvby1iYXInXG4gICAgICovXG4gICAgdmFyIGtlYmFiQ2FzZSA9IGNyZWF0ZUNvbXBvdW5kZXIoZnVuY3Rpb24ocmVzdWx0LCB3b3JkLCBpbmRleCkge1xuICAgICAgcmV0dXJuIHJlc3VsdCArIChpbmRleCA/ICctJyA6ICcnKSArIHdvcmQudG9Mb3dlckNhc2UoKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGBzdHJpbmdgLCBhcyBzcGFjZSBzZXBhcmF0ZWQgd29yZHMsIHRvIGxvd2VyIGNhc2UuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBsb3dlciBjYXNlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ubG93ZXJDYXNlKCctLUZvby1CYXItLScpO1xuICAgICAqIC8vID0+ICdmb28gYmFyJ1xuICAgICAqXG4gICAgICogXy5sb3dlckNhc2UoJ2Zvb0JhcicpO1xuICAgICAqIC8vID0+ICdmb28gYmFyJ1xuICAgICAqXG4gICAgICogXy5sb3dlckNhc2UoJ19fRk9PX0JBUl9fJyk7XG4gICAgICogLy8gPT4gJ2ZvbyBiYXInXG4gICAgICovXG4gICAgdmFyIGxvd2VyQ2FzZSA9IGNyZWF0ZUNvbXBvdW5kZXIoZnVuY3Rpb24ocmVzdWx0LCB3b3JkLCBpbmRleCkge1xuICAgICAgcmV0dXJuIHJlc3VsdCArIChpbmRleCA/ICcgJyA6ICcnKSArIHdvcmQudG9Mb3dlckNhc2UoKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIHRoZSBmaXJzdCBjaGFyYWN0ZXIgb2YgYHN0cmluZ2AgdG8gbG93ZXIgY2FzZS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ubG93ZXJGaXJzdCgnRnJlZCcpO1xuICAgICAqIC8vID0+ICdmcmVkJ1xuICAgICAqXG4gICAgICogXy5sb3dlckZpcnN0KCdGUkVEJyk7XG4gICAgICogLy8gPT4gJ2ZSRUQnXG4gICAgICovXG4gICAgdmFyIGxvd2VyRmlyc3QgPSBjcmVhdGVDYXNlRmlyc3QoJ3RvTG93ZXJDYXNlJyk7XG5cbiAgICAvKipcbiAgICAgKiBQYWRzIGBzdHJpbmdgIG9uIHRoZSBsZWZ0IGFuZCByaWdodCBzaWRlcyBpZiBpdCdzIHNob3J0ZXIgdGhhbiBgbGVuZ3RoYC5cbiAgICAgKiBQYWRkaW5nIGNoYXJhY3RlcnMgYXJlIHRydW5jYXRlZCBpZiB0aGV5IGNhbid0IGJlIGV2ZW5seSBkaXZpZGVkIGJ5IGBsZW5ndGhgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIHBhZC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2xlbmd0aD0wXSBUaGUgcGFkZGluZyBsZW5ndGguXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtjaGFycz0nICddIFRoZSBzdHJpbmcgdXNlZCBhcyBwYWRkaW5nLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHBhZGRlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ucGFkKCdhYmMnLCA4KTtcbiAgICAgKiAvLyA9PiAnICBhYmMgICAnXG4gICAgICpcbiAgICAgKiBfLnBhZCgnYWJjJywgOCwgJ18tJyk7XG4gICAgICogLy8gPT4gJ18tYWJjXy1fJ1xuICAgICAqXG4gICAgICogXy5wYWQoJ2FiYycsIDMpO1xuICAgICAqIC8vID0+ICdhYmMnXG4gICAgICovXG4gICAgZnVuY3Rpb24gcGFkKHN0cmluZywgbGVuZ3RoLCBjaGFycykge1xuICAgICAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgICAgIGxlbmd0aCA9IHRvSW50ZWdlcihsZW5ndGgpO1xuXG4gICAgICB2YXIgc3RyTGVuZ3RoID0gbGVuZ3RoID8gc3RyaW5nU2l6ZShzdHJpbmcpIDogMDtcbiAgICAgIGlmICghbGVuZ3RoIHx8IHN0ckxlbmd0aCA+PSBsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIHN0cmluZztcbiAgICAgIH1cbiAgICAgIHZhciBtaWQgPSAobGVuZ3RoIC0gc3RyTGVuZ3RoKSAvIDI7XG4gICAgICByZXR1cm4gKFxuICAgICAgICBjcmVhdGVQYWRkaW5nKG5hdGl2ZUZsb29yKG1pZCksIGNoYXJzKSArXG4gICAgICAgIHN0cmluZyArXG4gICAgICAgIGNyZWF0ZVBhZGRpbmcobmF0aXZlQ2VpbChtaWQpLCBjaGFycylcbiAgICAgICk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUGFkcyBgc3RyaW5nYCBvbiB0aGUgcmlnaHQgc2lkZSBpZiBpdCdzIHNob3J0ZXIgdGhhbiBgbGVuZ3RoYC4gUGFkZGluZ1xuICAgICAqIGNoYXJhY3RlcnMgYXJlIHRydW5jYXRlZCBpZiB0aGV5IGV4Y2VlZCBgbGVuZ3RoYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBwYWQuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtsZW5ndGg9MF0gVGhlIHBhZGRpbmcgbGVuZ3RoLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbY2hhcnM9JyAnXSBUaGUgc3RyaW5nIHVzZWQgYXMgcGFkZGluZy5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBwYWRkZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnBhZEVuZCgnYWJjJywgNik7XG4gICAgICogLy8gPT4gJ2FiYyAgICdcbiAgICAgKlxuICAgICAqIF8ucGFkRW5kKCdhYmMnLCA2LCAnXy0nKTtcbiAgICAgKiAvLyA9PiAnYWJjXy1fJ1xuICAgICAqXG4gICAgICogXy5wYWRFbmQoJ2FiYycsIDMpO1xuICAgICAqIC8vID0+ICdhYmMnXG4gICAgICovXG4gICAgZnVuY3Rpb24gcGFkRW5kKHN0cmluZywgbGVuZ3RoLCBjaGFycykge1xuICAgICAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgICAgIGxlbmd0aCA9IHRvSW50ZWdlcihsZW5ndGgpO1xuXG4gICAgICB2YXIgc3RyTGVuZ3RoID0gbGVuZ3RoID8gc3RyaW5nU2l6ZShzdHJpbmcpIDogMDtcbiAgICAgIHJldHVybiAobGVuZ3RoICYmIHN0ckxlbmd0aCA8IGxlbmd0aClcbiAgICAgICAgPyAoc3RyaW5nICsgY3JlYXRlUGFkZGluZyhsZW5ndGggLSBzdHJMZW5ndGgsIGNoYXJzKSlcbiAgICAgICAgOiBzdHJpbmc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUGFkcyBgc3RyaW5nYCBvbiB0aGUgbGVmdCBzaWRlIGlmIGl0J3Mgc2hvcnRlciB0aGFuIGBsZW5ndGhgLiBQYWRkaW5nXG4gICAgICogY2hhcmFjdGVycyBhcmUgdHJ1bmNhdGVkIGlmIHRoZXkgZXhjZWVkIGBsZW5ndGhgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIHBhZC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2xlbmd0aD0wXSBUaGUgcGFkZGluZyBsZW5ndGguXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtjaGFycz0nICddIFRoZSBzdHJpbmcgdXNlZCBhcyBwYWRkaW5nLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHBhZGRlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ucGFkU3RhcnQoJ2FiYycsIDYpO1xuICAgICAqIC8vID0+ICcgICBhYmMnXG4gICAgICpcbiAgICAgKiBfLnBhZFN0YXJ0KCdhYmMnLCA2LCAnXy0nKTtcbiAgICAgKiAvLyA9PiAnXy1fYWJjJ1xuICAgICAqXG4gICAgICogXy5wYWRTdGFydCgnYWJjJywgMyk7XG4gICAgICogLy8gPT4gJ2FiYydcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBwYWRTdGFydChzdHJpbmcsIGxlbmd0aCwgY2hhcnMpIHtcbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICBsZW5ndGggPSB0b0ludGVnZXIobGVuZ3RoKTtcblxuICAgICAgdmFyIHN0ckxlbmd0aCA9IGxlbmd0aCA/IHN0cmluZ1NpemUoc3RyaW5nKSA6IDA7XG4gICAgICByZXR1cm4gKGxlbmd0aCAmJiBzdHJMZW5ndGggPCBsZW5ndGgpXG4gICAgICAgID8gKGNyZWF0ZVBhZGRpbmcobGVuZ3RoIC0gc3RyTGVuZ3RoLCBjaGFycykgKyBzdHJpbmcpXG4gICAgICAgIDogc3RyaW5nO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGBzdHJpbmdgIHRvIGFuIGludGVnZXIgb2YgdGhlIHNwZWNpZmllZCByYWRpeC4gSWYgYHJhZGl4YCBpc1xuICAgICAqIGB1bmRlZmluZWRgIG9yIGAwYCwgYSBgcmFkaXhgIG9mIGAxMGAgaXMgdXNlZCB1bmxlc3MgYHZhbHVlYCBpcyBhXG4gICAgICogaGV4YWRlY2ltYWwsIGluIHdoaWNoIGNhc2UgYSBgcmFkaXhgIG9mIGAxNmAgaXMgdXNlZC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBhbGlnbnMgd2l0aCB0aGVcbiAgICAgKiBbRVM1IGltcGxlbWVudGF0aW9uXShodHRwczovL2VzNS5naXRodWIuaW8vI3gxNS4xLjIuMikgb2YgYHBhcnNlSW50YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAxLjEuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3JhZGl4PTEwXSBUaGUgcmFkaXggdG8gaW50ZXJwcmV0IGB2YWx1ZWAgYnkuXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgaW50ZWdlci5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5wYXJzZUludCgnMDgnKTtcbiAgICAgKiAvLyA9PiA4XG4gICAgICpcbiAgICAgKiBfLm1hcChbJzYnLCAnMDgnLCAnMTAnXSwgXy5wYXJzZUludCk7XG4gICAgICogLy8gPT4gWzYsIDgsIDEwXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHBhcnNlSW50KHN0cmluZywgcmFkaXgsIGd1YXJkKSB7XG4gICAgICBpZiAoZ3VhcmQgfHwgcmFkaXggPT0gbnVsbCkge1xuICAgICAgICByYWRpeCA9IDA7XG4gICAgICB9IGVsc2UgaWYgKHJhZGl4KSB7XG4gICAgICAgIHJhZGl4ID0gK3JhZGl4O1xuICAgICAgfVxuICAgICAgcmV0dXJuIG5hdGl2ZVBhcnNlSW50KHRvU3RyaW5nKHN0cmluZykucmVwbGFjZShyZVRyaW1TdGFydCwgJycpLCByYWRpeCB8fCAwKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXBlYXRzIHRoZSBnaXZlbiBzdHJpbmcgYG5gIHRpbWVzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIHJlcGVhdC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW249MV0gVGhlIG51bWJlciBvZiB0aW1lcyB0byByZXBlYXQgdGhlIHN0cmluZy5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHJlcGVhdGVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5yZXBlYXQoJyonLCAzKTtcbiAgICAgKiAvLyA9PiAnKioqJ1xuICAgICAqXG4gICAgICogXy5yZXBlYXQoJ2FiYycsIDIpO1xuICAgICAqIC8vID0+ICdhYmNhYmMnXG4gICAgICpcbiAgICAgKiBfLnJlcGVhdCgnYWJjJywgMCk7XG4gICAgICogLy8gPT4gJydcbiAgICAgKi9cbiAgICBmdW5jdGlvbiByZXBlYXQoc3RyaW5nLCBuLCBndWFyZCkge1xuICAgICAgaWYgKChndWFyZCA/IGlzSXRlcmF0ZWVDYWxsKHN0cmluZywgbiwgZ3VhcmQpIDogbiA9PT0gdW5kZWZpbmVkKSkge1xuICAgICAgICBuID0gMTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG4gPSB0b0ludGVnZXIobik7XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZVJlcGVhdCh0b1N0cmluZyhzdHJpbmcpLCBuKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXBsYWNlcyBtYXRjaGVzIGZvciBgcGF0dGVybmAgaW4gYHN0cmluZ2Agd2l0aCBgcmVwbGFjZW1lbnRgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGJhc2VkIG9uXG4gICAgICogW2BTdHJpbmcjcmVwbGFjZWBdKGh0dHBzOi8vbWRuLmlvL1N0cmluZy9yZXBsYWNlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtSZWdFeHB8c3RyaW5nfSBwYXR0ZXJuIFRoZSBwYXR0ZXJuIHRvIHJlcGxhY2UuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbnxzdHJpbmd9IHJlcGxhY2VtZW50IFRoZSBtYXRjaCByZXBsYWNlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBtb2RpZmllZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ucmVwbGFjZSgnSGkgRnJlZCcsICdGcmVkJywgJ0Jhcm5leScpO1xuICAgICAqIC8vID0+ICdIaSBCYXJuZXknXG4gICAgICovXG4gICAgZnVuY3Rpb24gcmVwbGFjZSgpIHtcbiAgICAgIHZhciBhcmdzID0gYXJndW1lbnRzLFxuICAgICAgICAgIHN0cmluZyA9IHRvU3RyaW5nKGFyZ3NbMF0pO1xuXG4gICAgICByZXR1cm4gYXJncy5sZW5ndGggPCAzID8gc3RyaW5nIDogc3RyaW5nLnJlcGxhY2UoYXJnc1sxXSwgYXJnc1syXSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHN0cmluZ2AgdG9cbiAgICAgKiBbc25ha2UgY2FzZV0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvU25ha2VfY2FzZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBzbmFrZSBjYXNlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc25ha2VDYXNlKCdGb28gQmFyJyk7XG4gICAgICogLy8gPT4gJ2Zvb19iYXInXG4gICAgICpcbiAgICAgKiBfLnNuYWtlQ2FzZSgnZm9vQmFyJyk7XG4gICAgICogLy8gPT4gJ2Zvb19iYXInXG4gICAgICpcbiAgICAgKiBfLnNuYWtlQ2FzZSgnLS1GT08tQkFSLS0nKTtcbiAgICAgKiAvLyA9PiAnZm9vX2JhcidcbiAgICAgKi9cbiAgICB2YXIgc25ha2VDYXNlID0gY3JlYXRlQ29tcG91bmRlcihmdW5jdGlvbihyZXN1bHQsIHdvcmQsIGluZGV4KSB7XG4gICAgICByZXR1cm4gcmVzdWx0ICsgKGluZGV4ID8gJ18nIDogJycpICsgd29yZC50b0xvd2VyQ2FzZSgpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogU3BsaXRzIGBzdHJpbmdgIGJ5IGBzZXBhcmF0b3JgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGJhc2VkIG9uXG4gICAgICogW2BTdHJpbmcjc3BsaXRgXShodHRwczovL21kbi5pby9TdHJpbmcvc3BsaXQpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIHNwbGl0LlxuICAgICAqIEBwYXJhbSB7UmVnRXhwfHN0cmluZ30gc2VwYXJhdG9yIFRoZSBzZXBhcmF0b3IgcGF0dGVybiB0byBzcGxpdCBieS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2xpbWl0XSBUaGUgbGVuZ3RoIHRvIHRydW5jYXRlIHJlc3VsdHMgdG8uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzdHJpbmcgc2VnbWVudHMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc3BsaXQoJ2EtYi1jJywgJy0nLCAyKTtcbiAgICAgKiAvLyA9PiBbJ2EnLCAnYiddXG4gICAgICovXG4gICAgZnVuY3Rpb24gc3BsaXQoc3RyaW5nLCBzZXBhcmF0b3IsIGxpbWl0KSB7XG4gICAgICBpZiAobGltaXQgJiYgdHlwZW9mIGxpbWl0ICE9ICdudW1iZXInICYmIGlzSXRlcmF0ZWVDYWxsKHN0cmluZywgc2VwYXJhdG9yLCBsaW1pdCkpIHtcbiAgICAgICAgc2VwYXJhdG9yID0gbGltaXQgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICBsaW1pdCA9IGxpbWl0ID09PSB1bmRlZmluZWQgPyBNQVhfQVJSQVlfTEVOR1RIIDogbGltaXQgPj4+IDA7XG4gICAgICBpZiAoIWxpbWl0KSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICBpZiAoc3RyaW5nICYmIChcbiAgICAgICAgICAgIHR5cGVvZiBzZXBhcmF0b3IgPT0gJ3N0cmluZycgfHxcbiAgICAgICAgICAgIChzZXBhcmF0b3IgIT0gbnVsbCAmJiAhaXNSZWdFeHAoc2VwYXJhdG9yKSlcbiAgICAgICAgICApKSB7XG4gICAgICAgIHNlcGFyYXRvciA9IGJhc2VUb1N0cmluZyhzZXBhcmF0b3IpO1xuICAgICAgICBpZiAoIXNlcGFyYXRvciAmJiBoYXNVbmljb2RlKHN0cmluZykpIHtcbiAgICAgICAgICByZXR1cm4gY2FzdFNsaWNlKHN0cmluZ1RvQXJyYXkoc3RyaW5nKSwgMCwgbGltaXQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gc3RyaW5nLnNwbGl0KHNlcGFyYXRvciwgbGltaXQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGBzdHJpbmdgIHRvXG4gICAgICogW3N0YXJ0IGNhc2VdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0xldHRlcl9jYXNlI1N0eWxpc3RpY19vcl9zcGVjaWFsaXNlZF91c2FnZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBzdGFydCBjYXNlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc3RhcnRDYXNlKCctLWZvby1iYXItLScpO1xuICAgICAqIC8vID0+ICdGb28gQmFyJ1xuICAgICAqXG4gICAgICogXy5zdGFydENhc2UoJ2Zvb0JhcicpO1xuICAgICAqIC8vID0+ICdGb28gQmFyJ1xuICAgICAqXG4gICAgICogXy5zdGFydENhc2UoJ19fRk9PX0JBUl9fJyk7XG4gICAgICogLy8gPT4gJ0ZPTyBCQVInXG4gICAgICovXG4gICAgdmFyIHN0YXJ0Q2FzZSA9IGNyZWF0ZUNvbXBvdW5kZXIoZnVuY3Rpb24ocmVzdWx0LCB3b3JkLCBpbmRleCkge1xuICAgICAgcmV0dXJuIHJlc3VsdCArIChpbmRleCA/ICcgJyA6ICcnKSArIHVwcGVyRmlyc3Qod29yZCk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHN0cmluZ2Agc3RhcnRzIHdpdGggdGhlIGdpdmVuIHRhcmdldCBzdHJpbmcuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3RhcmdldF0gVGhlIHN0cmluZyB0byBzZWFyY2ggZm9yLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbcG9zaXRpb249MF0gVGhlIHBvc2l0aW9uIHRvIHNlYXJjaCBmcm9tLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgc3RyaW5nYCBzdGFydHMgd2l0aCBgdGFyZ2V0YCxcbiAgICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnN0YXJ0c1dpdGgoJ2FiYycsICdhJyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5zdGFydHNXaXRoKCdhYmMnLCAnYicpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLnN0YXJ0c1dpdGgoJ2FiYycsICdiJywgMSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHN0YXJ0c1dpdGgoc3RyaW5nLCB0YXJnZXQsIHBvc2l0aW9uKSB7XG4gICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuICAgICAgcG9zaXRpb24gPSBwb3NpdGlvbiA9PSBudWxsXG4gICAgICAgID8gMFxuICAgICAgICA6IGJhc2VDbGFtcCh0b0ludGVnZXIocG9zaXRpb24pLCAwLCBzdHJpbmcubGVuZ3RoKTtcblxuICAgICAgdGFyZ2V0ID0gYmFzZVRvU3RyaW5nKHRhcmdldCk7XG4gICAgICByZXR1cm4gc3RyaW5nLnNsaWNlKHBvc2l0aW9uLCBwb3NpdGlvbiArIHRhcmdldC5sZW5ndGgpID09IHRhcmdldDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgY29tcGlsZWQgdGVtcGxhdGUgZnVuY3Rpb24gdGhhdCBjYW4gaW50ZXJwb2xhdGUgZGF0YSBwcm9wZXJ0aWVzXG4gICAgICogaW4gXCJpbnRlcnBvbGF0ZVwiIGRlbGltaXRlcnMsIEhUTUwtZXNjYXBlIGludGVycG9sYXRlZCBkYXRhIHByb3BlcnRpZXMgaW5cbiAgICAgKiBcImVzY2FwZVwiIGRlbGltaXRlcnMsIGFuZCBleGVjdXRlIEphdmFTY3JpcHQgaW4gXCJldmFsdWF0ZVwiIGRlbGltaXRlcnMuIERhdGFcbiAgICAgKiBwcm9wZXJ0aWVzIG1heSBiZSBhY2Nlc3NlZCBhcyBmcmVlIHZhcmlhYmxlcyBpbiB0aGUgdGVtcGxhdGUuIElmIGEgc2V0dGluZ1xuICAgICAqIG9iamVjdCBpcyBnaXZlbiwgaXQgdGFrZXMgcHJlY2VkZW5jZSBvdmVyIGBfLnRlbXBsYXRlU2V0dGluZ3NgIHZhbHVlcy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBJbiB0aGUgZGV2ZWxvcG1lbnQgYnVpbGQgYF8udGVtcGxhdGVgIHV0aWxpemVzXG4gICAgICogW3NvdXJjZVVSTHNdKGh0dHA6Ly93d3cuaHRtbDVyb2Nrcy5jb20vZW4vdHV0b3JpYWxzL2RldmVsb3BlcnRvb2xzL3NvdXJjZW1hcHMvI3RvYy1zb3VyY2V1cmwpXG4gICAgICogZm9yIGVhc2llciBkZWJ1Z2dpbmcuXG4gICAgICpcbiAgICAgKiBGb3IgbW9yZSBpbmZvcm1hdGlvbiBvbiBwcmVjb21waWxpbmcgdGVtcGxhdGVzIHNlZVxuICAgICAqIFtsb2Rhc2gncyBjdXN0b20gYnVpbGRzIGRvY3VtZW50YXRpb25dKGh0dHBzOi8vbG9kYXNoLmNvbS9jdXN0b20tYnVpbGRzKS5cbiAgICAgKlxuICAgICAqIEZvciBtb3JlIGluZm9ybWF0aW9uIG9uIENocm9tZSBleHRlbnNpb24gc2FuZGJveGVzIHNlZVxuICAgICAqIFtDaHJvbWUncyBleHRlbnNpb25zIGRvY3VtZW50YXRpb25dKGh0dHBzOi8vZGV2ZWxvcGVyLmNocm9tZS5jb20vZXh0ZW5zaW9ucy9zYW5kYm94aW5nRXZhbCkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSB0ZW1wbGF0ZSBzdHJpbmcuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zPXt9XSBUaGUgb3B0aW9ucyBvYmplY3QuXG4gICAgICogQHBhcmFtIHtSZWdFeHB9IFtvcHRpb25zLmVzY2FwZT1fLnRlbXBsYXRlU2V0dGluZ3MuZXNjYXBlXVxuICAgICAqICBUaGUgSFRNTCBcImVzY2FwZVwiIGRlbGltaXRlci5cbiAgICAgKiBAcGFyYW0ge1JlZ0V4cH0gW29wdGlvbnMuZXZhbHVhdGU9Xy50ZW1wbGF0ZVNldHRpbmdzLmV2YWx1YXRlXVxuICAgICAqICBUaGUgXCJldmFsdWF0ZVwiIGRlbGltaXRlci5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnMuaW1wb3J0cz1fLnRlbXBsYXRlU2V0dGluZ3MuaW1wb3J0c11cbiAgICAgKiAgQW4gb2JqZWN0IHRvIGltcG9ydCBpbnRvIHRoZSB0ZW1wbGF0ZSBhcyBmcmVlIHZhcmlhYmxlcy5cbiAgICAgKiBAcGFyYW0ge1JlZ0V4cH0gW29wdGlvbnMuaW50ZXJwb2xhdGU9Xy50ZW1wbGF0ZVNldHRpbmdzLmludGVycG9sYXRlXVxuICAgICAqICBUaGUgXCJpbnRlcnBvbGF0ZVwiIGRlbGltaXRlci5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMuc291cmNlVVJMPSdsb2Rhc2gudGVtcGxhdGVTb3VyY2VzW25dJ11cbiAgICAgKiAgVGhlIHNvdXJjZVVSTCBvZiB0aGUgY29tcGlsZWQgdGVtcGxhdGUuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLnZhcmlhYmxlPSdvYmonXVxuICAgICAqICBUaGUgZGF0YSBvYmplY3QgdmFyaWFibGUgbmFtZS5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgY29tcGlsZWQgdGVtcGxhdGUgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIC8vIFVzZSB0aGUgXCJpbnRlcnBvbGF0ZVwiIGRlbGltaXRlciB0byBjcmVhdGUgYSBjb21waWxlZCB0ZW1wbGF0ZS5cbiAgICAgKiB2YXIgY29tcGlsZWQgPSBfLnRlbXBsYXRlKCdoZWxsbyA8JT0gdXNlciAlPiEnKTtcbiAgICAgKiBjb21waWxlZCh7ICd1c2VyJzogJ2ZyZWQnIH0pO1xuICAgICAqIC8vID0+ICdoZWxsbyBmcmVkISdcbiAgICAgKlxuICAgICAqIC8vIFVzZSB0aGUgSFRNTCBcImVzY2FwZVwiIGRlbGltaXRlciB0byBlc2NhcGUgZGF0YSBwcm9wZXJ0eSB2YWx1ZXMuXG4gICAgICogdmFyIGNvbXBpbGVkID0gXy50ZW1wbGF0ZSgnPGI+PCUtIHZhbHVlICU+PC9iPicpO1xuICAgICAqIGNvbXBpbGVkKHsgJ3ZhbHVlJzogJzxzY3JpcHQ+JyB9KTtcbiAgICAgKiAvLyA9PiAnPGI+Jmx0O3NjcmlwdCZndDs8L2I+J1xuICAgICAqXG4gICAgICogLy8gVXNlIHRoZSBcImV2YWx1YXRlXCIgZGVsaW1pdGVyIHRvIGV4ZWN1dGUgSmF2YVNjcmlwdCBhbmQgZ2VuZXJhdGUgSFRNTC5cbiAgICAgKiB2YXIgY29tcGlsZWQgPSBfLnRlbXBsYXRlKCc8JSBfLmZvckVhY2godXNlcnMsIGZ1bmN0aW9uKHVzZXIpIHsgJT48bGk+PCUtIHVzZXIgJT48L2xpPjwlIH0pOyAlPicpO1xuICAgICAqIGNvbXBpbGVkKHsgJ3VzZXJzJzogWydmcmVkJywgJ2Jhcm5leSddIH0pO1xuICAgICAqIC8vID0+ICc8bGk+ZnJlZDwvbGk+PGxpPmJhcm5leTwvbGk+J1xuICAgICAqXG4gICAgICogLy8gVXNlIHRoZSBpbnRlcm5hbCBgcHJpbnRgIGZ1bmN0aW9uIGluIFwiZXZhbHVhdGVcIiBkZWxpbWl0ZXJzLlxuICAgICAqIHZhciBjb21waWxlZCA9IF8udGVtcGxhdGUoJzwlIHByaW50KFwiaGVsbG8gXCIgKyB1c2VyKTsgJT4hJyk7XG4gICAgICogY29tcGlsZWQoeyAndXNlcic6ICdiYXJuZXknIH0pO1xuICAgICAqIC8vID0+ICdoZWxsbyBiYXJuZXkhJ1xuICAgICAqXG4gICAgICogLy8gVXNlIHRoZSBFUyB0ZW1wbGF0ZSBsaXRlcmFsIGRlbGltaXRlciBhcyBhbiBcImludGVycG9sYXRlXCIgZGVsaW1pdGVyLlxuICAgICAqIC8vIERpc2FibGUgc3VwcG9ydCBieSByZXBsYWNpbmcgdGhlIFwiaW50ZXJwb2xhdGVcIiBkZWxpbWl0ZXIuXG4gICAgICogdmFyIGNvbXBpbGVkID0gXy50ZW1wbGF0ZSgnaGVsbG8gJHsgdXNlciB9IScpO1xuICAgICAqIGNvbXBpbGVkKHsgJ3VzZXInOiAncGViYmxlcycgfSk7XG4gICAgICogLy8gPT4gJ2hlbGxvIHBlYmJsZXMhJ1xuICAgICAqXG4gICAgICogLy8gVXNlIGJhY2tzbGFzaGVzIHRvIHRyZWF0IGRlbGltaXRlcnMgYXMgcGxhaW4gdGV4dC5cbiAgICAgKiB2YXIgY29tcGlsZWQgPSBfLnRlbXBsYXRlKCc8JT0gXCJcXFxcPCUtIHZhbHVlICVcXFxcPlwiICU+Jyk7XG4gICAgICogY29tcGlsZWQoeyAndmFsdWUnOiAnaWdub3JlZCcgfSk7XG4gICAgICogLy8gPT4gJzwlLSB2YWx1ZSAlPidcbiAgICAgKlxuICAgICAqIC8vIFVzZSB0aGUgYGltcG9ydHNgIG9wdGlvbiB0byBpbXBvcnQgYGpRdWVyeWAgYXMgYGpxYC5cbiAgICAgKiB2YXIgdGV4dCA9ICc8JSBqcS5lYWNoKHVzZXJzLCBmdW5jdGlvbih1c2VyKSB7ICU+PGxpPjwlLSB1c2VyICU+PC9saT48JSB9KTsgJT4nO1xuICAgICAqIHZhciBjb21waWxlZCA9IF8udGVtcGxhdGUodGV4dCwgeyAnaW1wb3J0cyc6IHsgJ2pxJzogalF1ZXJ5IH0gfSk7XG4gICAgICogY29tcGlsZWQoeyAndXNlcnMnOiBbJ2ZyZWQnLCAnYmFybmV5J10gfSk7XG4gICAgICogLy8gPT4gJzxsaT5mcmVkPC9saT48bGk+YmFybmV5PC9saT4nXG4gICAgICpcbiAgICAgKiAvLyBVc2UgdGhlIGBzb3VyY2VVUkxgIG9wdGlvbiB0byBzcGVjaWZ5IGEgY3VzdG9tIHNvdXJjZVVSTCBmb3IgdGhlIHRlbXBsYXRlLlxuICAgICAqIHZhciBjb21waWxlZCA9IF8udGVtcGxhdGUoJ2hlbGxvIDwlPSB1c2VyICU+IScsIHsgJ3NvdXJjZVVSTCc6ICcvYmFzaWMvZ3JlZXRpbmcuanN0JyB9KTtcbiAgICAgKiBjb21waWxlZChkYXRhKTtcbiAgICAgKiAvLyA9PiBGaW5kIHRoZSBzb3VyY2Ugb2YgXCJncmVldGluZy5qc3RcIiB1bmRlciB0aGUgU291cmNlcyB0YWIgb3IgUmVzb3VyY2VzIHBhbmVsIG9mIHRoZSB3ZWIgaW5zcGVjdG9yLlxuICAgICAqXG4gICAgICogLy8gVXNlIHRoZSBgdmFyaWFibGVgIG9wdGlvbiB0byBlbnN1cmUgYSB3aXRoLXN0YXRlbWVudCBpc24ndCB1c2VkIGluIHRoZSBjb21waWxlZCB0ZW1wbGF0ZS5cbiAgICAgKiB2YXIgY29tcGlsZWQgPSBfLnRlbXBsYXRlKCdoaSA8JT0gZGF0YS51c2VyICU+IScsIHsgJ3ZhcmlhYmxlJzogJ2RhdGEnIH0pO1xuICAgICAqIGNvbXBpbGVkLnNvdXJjZTtcbiAgICAgKiAvLyA9PiBmdW5jdGlvbihkYXRhKSB7XG4gICAgICogLy8gICB2YXIgX190LCBfX3AgPSAnJztcbiAgICAgKiAvLyAgIF9fcCArPSAnaGkgJyArICgoX190ID0gKCBkYXRhLnVzZXIgKSkgPT0gbnVsbCA/ICcnIDogX190KSArICchJztcbiAgICAgKiAvLyAgIHJldHVybiBfX3A7XG4gICAgICogLy8gfVxuICAgICAqXG4gICAgICogLy8gVXNlIGN1c3RvbSB0ZW1wbGF0ZSBkZWxpbWl0ZXJzLlxuICAgICAqIF8udGVtcGxhdGVTZXR0aW5ncy5pbnRlcnBvbGF0ZSA9IC97eyhbXFxzXFxTXSs/KX19L2c7XG4gICAgICogdmFyIGNvbXBpbGVkID0gXy50ZW1wbGF0ZSgnaGVsbG8ge3sgdXNlciB9fSEnKTtcbiAgICAgKiBjb21waWxlZCh7ICd1c2VyJzogJ211c3RhY2hlJyB9KTtcbiAgICAgKiAvLyA9PiAnaGVsbG8gbXVzdGFjaGUhJ1xuICAgICAqXG4gICAgICogLy8gVXNlIHRoZSBgc291cmNlYCBwcm9wZXJ0eSB0byBpbmxpbmUgY29tcGlsZWQgdGVtcGxhdGVzIGZvciBtZWFuaW5nZnVsXG4gICAgICogLy8gbGluZSBudW1iZXJzIGluIGVycm9yIG1lc3NhZ2VzIGFuZCBzdGFjayB0cmFjZXMuXG4gICAgICogZnMud3JpdGVGaWxlU3luYyhwYXRoLmpvaW4ocHJvY2Vzcy5jd2QoKSwgJ2pzdC5qcycpLCAnXFxcbiAgICAgKiAgIHZhciBKU1QgPSB7XFxcbiAgICAgKiAgICAgXCJtYWluXCI6ICcgKyBfLnRlbXBsYXRlKG1haW5UZXh0KS5zb3VyY2UgKyAnXFxcbiAgICAgKiAgIH07XFxcbiAgICAgKiAnKTtcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0ZW1wbGF0ZShzdHJpbmcsIG9wdGlvbnMsIGd1YXJkKSB7XG4gICAgICAvLyBCYXNlZCBvbiBKb2huIFJlc2lnJ3MgYHRtcGxgIGltcGxlbWVudGF0aW9uXG4gICAgICAvLyAoaHR0cDovL2Vqb2huLm9yZy9ibG9nL2phdmFzY3JpcHQtbWljcm8tdGVtcGxhdGluZy8pXG4gICAgICAvLyBhbmQgTGF1cmEgRG9rdG9yb3ZhJ3MgZG9ULmpzIChodHRwczovL2dpdGh1Yi5jb20vb2xhZG8vZG9UKS5cbiAgICAgIHZhciBzZXR0aW5ncyA9IGxvZGFzaC50ZW1wbGF0ZVNldHRpbmdzO1xuXG4gICAgICBpZiAoZ3VhcmQgJiYgaXNJdGVyYXRlZUNhbGwoc3RyaW5nLCBvcHRpb25zLCBndWFyZCkpIHtcbiAgICAgICAgb3B0aW9ucyA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICBvcHRpb25zID0gYXNzaWduSW5XaXRoKHt9LCBvcHRpb25zLCBzZXR0aW5ncywgY3VzdG9tRGVmYXVsdHNBc3NpZ25Jbik7XG5cbiAgICAgIHZhciBpbXBvcnRzID0gYXNzaWduSW5XaXRoKHt9LCBvcHRpb25zLmltcG9ydHMsIHNldHRpbmdzLmltcG9ydHMsIGN1c3RvbURlZmF1bHRzQXNzaWduSW4pLFxuICAgICAgICAgIGltcG9ydHNLZXlzID0ga2V5cyhpbXBvcnRzKSxcbiAgICAgICAgICBpbXBvcnRzVmFsdWVzID0gYmFzZVZhbHVlcyhpbXBvcnRzLCBpbXBvcnRzS2V5cyk7XG5cbiAgICAgIHZhciBpc0VzY2FwaW5nLFxuICAgICAgICAgIGlzRXZhbHVhdGluZyxcbiAgICAgICAgICBpbmRleCA9IDAsXG4gICAgICAgICAgaW50ZXJwb2xhdGUgPSBvcHRpb25zLmludGVycG9sYXRlIHx8IHJlTm9NYXRjaCxcbiAgICAgICAgICBzb3VyY2UgPSBcIl9fcCArPSAnXCI7XG5cbiAgICAgIC8vIENvbXBpbGUgdGhlIHJlZ2V4cCB0byBtYXRjaCBlYWNoIGRlbGltaXRlci5cbiAgICAgIHZhciByZURlbGltaXRlcnMgPSBSZWdFeHAoXG4gICAgICAgIChvcHRpb25zLmVzY2FwZSB8fCByZU5vTWF0Y2gpLnNvdXJjZSArICd8JyArXG4gICAgICAgIGludGVycG9sYXRlLnNvdXJjZSArICd8JyArXG4gICAgICAgIChpbnRlcnBvbGF0ZSA9PT0gcmVJbnRlcnBvbGF0ZSA/IHJlRXNUZW1wbGF0ZSA6IHJlTm9NYXRjaCkuc291cmNlICsgJ3wnICtcbiAgICAgICAgKG9wdGlvbnMuZXZhbHVhdGUgfHwgcmVOb01hdGNoKS5zb3VyY2UgKyAnfCQnXG4gICAgICAsICdnJyk7XG5cbiAgICAgIC8vIFVzZSBhIHNvdXJjZVVSTCBmb3IgZWFzaWVyIGRlYnVnZ2luZy5cbiAgICAgIC8vIFRoZSBzb3VyY2VVUkwgZ2V0cyBpbmplY3RlZCBpbnRvIHRoZSBzb3VyY2UgdGhhdCdzIGV2YWwtZWQsIHNvIGJlIGNhcmVmdWxcbiAgICAgIC8vIHdpdGggbG9va3VwIChpbiBjYXNlIG9mIGUuZy4gcHJvdG90eXBlIHBvbGx1dGlvbiksIGFuZCBzdHJpcCBuZXdsaW5lcyBpZiBhbnkuXG4gICAgICAvLyBBIG5ld2xpbmUgd291bGRuJ3QgYmUgYSB2YWxpZCBzb3VyY2VVUkwgYW55d2F5LCBhbmQgaXQnZCBlbmFibGUgY29kZSBpbmplY3Rpb24uXG4gICAgICB2YXIgc291cmNlVVJMID0gJy8vIyBzb3VyY2VVUkw9JyArXG4gICAgICAgIChoYXNPd25Qcm9wZXJ0eS5jYWxsKG9wdGlvbnMsICdzb3VyY2VVUkwnKVxuICAgICAgICAgID8gKG9wdGlvbnMuc291cmNlVVJMICsgJycpLnJlcGxhY2UoL1tcXHJcXG5dL2csICcgJylcbiAgICAgICAgICA6ICgnbG9kYXNoLnRlbXBsYXRlU291cmNlc1snICsgKCsrdGVtcGxhdGVDb3VudGVyKSArICddJylcbiAgICAgICAgKSArICdcXG4nO1xuXG4gICAgICBzdHJpbmcucmVwbGFjZShyZURlbGltaXRlcnMsIGZ1bmN0aW9uKG1hdGNoLCBlc2NhcGVWYWx1ZSwgaW50ZXJwb2xhdGVWYWx1ZSwgZXNUZW1wbGF0ZVZhbHVlLCBldmFsdWF0ZVZhbHVlLCBvZmZzZXQpIHtcbiAgICAgICAgaW50ZXJwb2xhdGVWYWx1ZSB8fCAoaW50ZXJwb2xhdGVWYWx1ZSA9IGVzVGVtcGxhdGVWYWx1ZSk7XG5cbiAgICAgICAgLy8gRXNjYXBlIGNoYXJhY3RlcnMgdGhhdCBjYW4ndCBiZSBpbmNsdWRlZCBpbiBzdHJpbmcgbGl0ZXJhbHMuXG4gICAgICAgIHNvdXJjZSArPSBzdHJpbmcuc2xpY2UoaW5kZXgsIG9mZnNldCkucmVwbGFjZShyZVVuZXNjYXBlZFN0cmluZywgZXNjYXBlU3RyaW5nQ2hhcik7XG5cbiAgICAgICAgLy8gUmVwbGFjZSBkZWxpbWl0ZXJzIHdpdGggc25pcHBldHMuXG4gICAgICAgIGlmIChlc2NhcGVWYWx1ZSkge1xuICAgICAgICAgIGlzRXNjYXBpbmcgPSB0cnVlO1xuICAgICAgICAgIHNvdXJjZSArPSBcIicgK1xcbl9fZShcIiArIGVzY2FwZVZhbHVlICsgXCIpICtcXG4nXCI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGV2YWx1YXRlVmFsdWUpIHtcbiAgICAgICAgICBpc0V2YWx1YXRpbmcgPSB0cnVlO1xuICAgICAgICAgIHNvdXJjZSArPSBcIic7XFxuXCIgKyBldmFsdWF0ZVZhbHVlICsgXCI7XFxuX19wICs9ICdcIjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaW50ZXJwb2xhdGVWYWx1ZSkge1xuICAgICAgICAgIHNvdXJjZSArPSBcIicgK1xcbigoX190ID0gKFwiICsgaW50ZXJwb2xhdGVWYWx1ZSArIFwiKSkgPT0gbnVsbCA/ICcnIDogX190KSArXFxuJ1wiO1xuICAgICAgICB9XG4gICAgICAgIGluZGV4ID0gb2Zmc2V0ICsgbWF0Y2gubGVuZ3RoO1xuXG4gICAgICAgIC8vIFRoZSBKUyBlbmdpbmUgZW1iZWRkZWQgaW4gQWRvYmUgcHJvZHVjdHMgbmVlZHMgYG1hdGNoYCByZXR1cm5lZCBpblxuICAgICAgICAvLyBvcmRlciB0byBwcm9kdWNlIHRoZSBjb3JyZWN0IGBvZmZzZXRgIHZhbHVlLlxuICAgICAgICByZXR1cm4gbWF0Y2g7XG4gICAgICB9KTtcblxuICAgICAgc291cmNlICs9IFwiJztcXG5cIjtcblxuICAgICAgLy8gSWYgYHZhcmlhYmxlYCBpcyBub3Qgc3BlY2lmaWVkIHdyYXAgYSB3aXRoLXN0YXRlbWVudCBhcm91bmQgdGhlIGdlbmVyYXRlZFxuICAgICAgLy8gY29kZSB0byBhZGQgdGhlIGRhdGEgb2JqZWN0IHRvIHRoZSB0b3Agb2YgdGhlIHNjb3BlIGNoYWluLlxuICAgICAgLy8gTGlrZSB3aXRoIHNvdXJjZVVSTCwgd2UgdGFrZSBjYXJlIHRvIG5vdCBjaGVjayB0aGUgb3B0aW9uJ3MgcHJvdG90eXBlLFxuICAgICAgLy8gYXMgdGhpcyBjb25maWd1cmF0aW9uIGlzIGEgY29kZSBpbmplY3Rpb24gdmVjdG9yLlxuICAgICAgdmFyIHZhcmlhYmxlID0gaGFzT3duUHJvcGVydHkuY2FsbChvcHRpb25zLCAndmFyaWFibGUnKSAmJiBvcHRpb25zLnZhcmlhYmxlO1xuICAgICAgaWYgKCF2YXJpYWJsZSkge1xuICAgICAgICBzb3VyY2UgPSAnd2l0aCAob2JqKSB7XFxuJyArIHNvdXJjZSArICdcXG59XFxuJztcbiAgICAgIH1cbiAgICAgIC8vIENsZWFudXAgY29kZSBieSBzdHJpcHBpbmcgZW1wdHkgc3RyaW5ncy5cbiAgICAgIHNvdXJjZSA9IChpc0V2YWx1YXRpbmcgPyBzb3VyY2UucmVwbGFjZShyZUVtcHR5U3RyaW5nTGVhZGluZywgJycpIDogc291cmNlKVxuICAgICAgICAucmVwbGFjZShyZUVtcHR5U3RyaW5nTWlkZGxlLCAnJDEnKVxuICAgICAgICAucmVwbGFjZShyZUVtcHR5U3RyaW5nVHJhaWxpbmcsICckMTsnKTtcblxuICAgICAgLy8gRnJhbWUgY29kZSBhcyB0aGUgZnVuY3Rpb24gYm9keS5cbiAgICAgIHNvdXJjZSA9ICdmdW5jdGlvbignICsgKHZhcmlhYmxlIHx8ICdvYmonKSArICcpIHtcXG4nICtcbiAgICAgICAgKHZhcmlhYmxlXG4gICAgICAgICAgPyAnJ1xuICAgICAgICAgIDogJ29iaiB8fCAob2JqID0ge30pO1xcbidcbiAgICAgICAgKSArXG4gICAgICAgIFwidmFyIF9fdCwgX19wID0gJydcIiArXG4gICAgICAgIChpc0VzY2FwaW5nXG4gICAgICAgICAgID8gJywgX19lID0gXy5lc2NhcGUnXG4gICAgICAgICAgIDogJydcbiAgICAgICAgKSArXG4gICAgICAgIChpc0V2YWx1YXRpbmdcbiAgICAgICAgICA/ICcsIF9faiA9IEFycmF5LnByb3RvdHlwZS5qb2luO1xcbicgK1xuICAgICAgICAgICAgXCJmdW5jdGlvbiBwcmludCgpIHsgX19wICs9IF9fai5jYWxsKGFyZ3VtZW50cywgJycpIH1cXG5cIlxuICAgICAgICAgIDogJztcXG4nXG4gICAgICAgICkgK1xuICAgICAgICBzb3VyY2UgK1xuICAgICAgICAncmV0dXJuIF9fcFxcbn0nO1xuXG4gICAgICB2YXIgcmVzdWx0ID0gYXR0ZW1wdChmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIEZ1bmN0aW9uKGltcG9ydHNLZXlzLCBzb3VyY2VVUkwgKyAncmV0dXJuICcgKyBzb3VyY2UpXG4gICAgICAgICAgLmFwcGx5KHVuZGVmaW5lZCwgaW1wb3J0c1ZhbHVlcyk7XG4gICAgICB9KTtcblxuICAgICAgLy8gUHJvdmlkZSB0aGUgY29tcGlsZWQgZnVuY3Rpb24ncyBzb3VyY2UgYnkgaXRzIGB0b1N0cmluZ2AgbWV0aG9kIG9yXG4gICAgICAvLyB0aGUgYHNvdXJjZWAgcHJvcGVydHkgYXMgYSBjb252ZW5pZW5jZSBmb3IgaW5saW5pbmcgY29tcGlsZWQgdGVtcGxhdGVzLlxuICAgICAgcmVzdWx0LnNvdXJjZSA9IHNvdXJjZTtcbiAgICAgIGlmIChpc0Vycm9yKHJlc3VsdCkpIHtcbiAgICAgICAgdGhyb3cgcmVzdWx0O1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgc3RyaW5nYCwgYXMgYSB3aG9sZSwgdG8gbG93ZXIgY2FzZSBqdXN0IGxpa2VcbiAgICAgKiBbU3RyaW5nI3RvTG93ZXJDYXNlXShodHRwczovL21kbi5pby90b0xvd2VyQ2FzZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBsb3dlciBjYXNlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udG9Mb3dlcignLS1Gb28tQmFyLS0nKTtcbiAgICAgKiAvLyA9PiAnLS1mb28tYmFyLS0nXG4gICAgICpcbiAgICAgKiBfLnRvTG93ZXIoJ2Zvb0JhcicpO1xuICAgICAqIC8vID0+ICdmb29iYXInXG4gICAgICpcbiAgICAgKiBfLnRvTG93ZXIoJ19fRk9PX0JBUl9fJyk7XG4gICAgICogLy8gPT4gJ19fZm9vX2Jhcl9fJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRvTG93ZXIodmFsdWUpIHtcbiAgICAgIHJldHVybiB0b1N0cmluZyh2YWx1ZSkudG9Mb3dlckNhc2UoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgc3RyaW5nYCwgYXMgYSB3aG9sZSwgdG8gdXBwZXIgY2FzZSBqdXN0IGxpa2VcbiAgICAgKiBbU3RyaW5nI3RvVXBwZXJDYXNlXShodHRwczovL21kbi5pby90b1VwcGVyQ2FzZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSB1cHBlciBjYXNlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udG9VcHBlcignLS1mb28tYmFyLS0nKTtcbiAgICAgKiAvLyA9PiAnLS1GT08tQkFSLS0nXG4gICAgICpcbiAgICAgKiBfLnRvVXBwZXIoJ2Zvb0JhcicpO1xuICAgICAqIC8vID0+ICdGT09CQVInXG4gICAgICpcbiAgICAgKiBfLnRvVXBwZXIoJ19fZm9vX2Jhcl9fJyk7XG4gICAgICogLy8gPT4gJ19fRk9PX0JBUl9fJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRvVXBwZXIodmFsdWUpIHtcbiAgICAgIHJldHVybiB0b1N0cmluZyh2YWx1ZSkudG9VcHBlckNhc2UoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGxlYWRpbmcgYW5kIHRyYWlsaW5nIHdoaXRlc3BhY2Ugb3Igc3BlY2lmaWVkIGNoYXJhY3RlcnMgZnJvbSBgc3RyaW5nYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byB0cmltLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbY2hhcnM9d2hpdGVzcGFjZV0gVGhlIGNoYXJhY3RlcnMgdG8gdHJpbS5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHRyaW1tZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRyaW0oJyAgYWJjICAnKTtcbiAgICAgKiAvLyA9PiAnYWJjJ1xuICAgICAqXG4gICAgICogXy50cmltKCctXy1hYmMtXy0nLCAnXy0nKTtcbiAgICAgKiAvLyA9PiAnYWJjJ1xuICAgICAqXG4gICAgICogXy5tYXAoWycgIGZvbyAgJywgJyAgYmFyICAnXSwgXy50cmltKTtcbiAgICAgKiAvLyA9PiBbJ2ZvbycsICdiYXInXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRyaW0oc3RyaW5nLCBjaGFycywgZ3VhcmQpIHtcbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICBpZiAoc3RyaW5nICYmIChndWFyZCB8fCBjaGFycyA9PT0gdW5kZWZpbmVkKSkge1xuICAgICAgICByZXR1cm4gc3RyaW5nLnJlcGxhY2UocmVUcmltLCAnJyk7XG4gICAgICB9XG4gICAgICBpZiAoIXN0cmluZyB8fCAhKGNoYXJzID0gYmFzZVRvU3RyaW5nKGNoYXJzKSkpIHtcbiAgICAgICAgcmV0dXJuIHN0cmluZztcbiAgICAgIH1cbiAgICAgIHZhciBzdHJTeW1ib2xzID0gc3RyaW5nVG9BcnJheShzdHJpbmcpLFxuICAgICAgICAgIGNoclN5bWJvbHMgPSBzdHJpbmdUb0FycmF5KGNoYXJzKSxcbiAgICAgICAgICBzdGFydCA9IGNoYXJzU3RhcnRJbmRleChzdHJTeW1ib2xzLCBjaHJTeW1ib2xzKSxcbiAgICAgICAgICBlbmQgPSBjaGFyc0VuZEluZGV4KHN0clN5bWJvbHMsIGNoclN5bWJvbHMpICsgMTtcblxuICAgICAgcmV0dXJuIGNhc3RTbGljZShzdHJTeW1ib2xzLCBzdGFydCwgZW5kKS5qb2luKCcnKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIHRyYWlsaW5nIHdoaXRlc3BhY2Ugb3Igc3BlY2lmaWVkIGNoYXJhY3RlcnMgZnJvbSBgc3RyaW5nYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byB0cmltLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbY2hhcnM9d2hpdGVzcGFjZV0gVGhlIGNoYXJhY3RlcnMgdG8gdHJpbS5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHRyaW1tZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRyaW1FbmQoJyAgYWJjICAnKTtcbiAgICAgKiAvLyA9PiAnICBhYmMnXG4gICAgICpcbiAgICAgKiBfLnRyaW1FbmQoJy1fLWFiYy1fLScsICdfLScpO1xuICAgICAqIC8vID0+ICctXy1hYmMnXG4gICAgICovXG4gICAgZnVuY3Rpb24gdHJpbUVuZChzdHJpbmcsIGNoYXJzLCBndWFyZCkge1xuICAgICAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgICAgIGlmIChzdHJpbmcgJiYgKGd1YXJkIHx8IGNoYXJzID09PSB1bmRlZmluZWQpKSB7XG4gICAgICAgIHJldHVybiBzdHJpbmcucmVwbGFjZShyZVRyaW1FbmQsICcnKTtcbiAgICAgIH1cbiAgICAgIGlmICghc3RyaW5nIHx8ICEoY2hhcnMgPSBiYXNlVG9TdHJpbmcoY2hhcnMpKSkge1xuICAgICAgICByZXR1cm4gc3RyaW5nO1xuICAgICAgfVxuICAgICAgdmFyIHN0clN5bWJvbHMgPSBzdHJpbmdUb0FycmF5KHN0cmluZyksXG4gICAgICAgICAgZW5kID0gY2hhcnNFbmRJbmRleChzdHJTeW1ib2xzLCBzdHJpbmdUb0FycmF5KGNoYXJzKSkgKyAxO1xuXG4gICAgICByZXR1cm4gY2FzdFNsaWNlKHN0clN5bWJvbHMsIDAsIGVuZCkuam9pbignJyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBsZWFkaW5nIHdoaXRlc3BhY2Ugb3Igc3BlY2lmaWVkIGNoYXJhY3RlcnMgZnJvbSBgc3RyaW5nYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byB0cmltLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbY2hhcnM9d2hpdGVzcGFjZV0gVGhlIGNoYXJhY3RlcnMgdG8gdHJpbS5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHRyaW1tZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRyaW1TdGFydCgnICBhYmMgICcpO1xuICAgICAqIC8vID0+ICdhYmMgICdcbiAgICAgKlxuICAgICAqIF8udHJpbVN0YXJ0KCctXy1hYmMtXy0nLCAnXy0nKTtcbiAgICAgKiAvLyA9PiAnYWJjLV8tJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRyaW1TdGFydChzdHJpbmcsIGNoYXJzLCBndWFyZCkge1xuICAgICAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgICAgIGlmIChzdHJpbmcgJiYgKGd1YXJkIHx8IGNoYXJzID09PSB1bmRlZmluZWQpKSB7XG4gICAgICAgIHJldHVybiBzdHJpbmcucmVwbGFjZShyZVRyaW1TdGFydCwgJycpO1xuICAgICAgfVxuICAgICAgaWYgKCFzdHJpbmcgfHwgIShjaGFycyA9IGJhc2VUb1N0cmluZyhjaGFycykpKSB7XG4gICAgICAgIHJldHVybiBzdHJpbmc7XG4gICAgICB9XG4gICAgICB2YXIgc3RyU3ltYm9scyA9IHN0cmluZ1RvQXJyYXkoc3RyaW5nKSxcbiAgICAgICAgICBzdGFydCA9IGNoYXJzU3RhcnRJbmRleChzdHJTeW1ib2xzLCBzdHJpbmdUb0FycmF5KGNoYXJzKSk7XG5cbiAgICAgIHJldHVybiBjYXN0U2xpY2Uoc3RyU3ltYm9scywgc3RhcnQpLmpvaW4oJycpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRydW5jYXRlcyBgc3RyaW5nYCBpZiBpdCdzIGxvbmdlciB0aGFuIHRoZSBnaXZlbiBtYXhpbXVtIHN0cmluZyBsZW5ndGguXG4gICAgICogVGhlIGxhc3QgY2hhcmFjdGVycyBvZiB0aGUgdHJ1bmNhdGVkIHN0cmluZyBhcmUgcmVwbGFjZWQgd2l0aCB0aGUgb21pc3Npb25cbiAgICAgKiBzdHJpbmcgd2hpY2ggZGVmYXVsdHMgdG8gXCIuLi5cIi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byB0cnVuY2F0ZS5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnM9e31dIFRoZSBvcHRpb25zIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW29wdGlvbnMubGVuZ3RoPTMwXSBUaGUgbWF4aW11bSBzdHJpbmcgbGVuZ3RoLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5vbWlzc2lvbj0nLi4uJ10gVGhlIHN0cmluZyB0byBpbmRpY2F0ZSB0ZXh0IGlzIG9taXR0ZWQuXG4gICAgICogQHBhcmFtIHtSZWdFeHB8c3RyaW5nfSBbb3B0aW9ucy5zZXBhcmF0b3JdIFRoZSBzZXBhcmF0b3IgcGF0dGVybiB0byB0cnVuY2F0ZSB0by5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSB0cnVuY2F0ZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRydW5jYXRlKCdoaS1kaWRkbHktaG8gdGhlcmUsIG5laWdoYm9yaW5vJyk7XG4gICAgICogLy8gPT4gJ2hpLWRpZGRseS1obyB0aGVyZSwgbmVpZ2hiby4uLidcbiAgICAgKlxuICAgICAqIF8udHJ1bmNhdGUoJ2hpLWRpZGRseS1obyB0aGVyZSwgbmVpZ2hib3Jpbm8nLCB7XG4gICAgICogICAnbGVuZ3RoJzogMjQsXG4gICAgICogICAnc2VwYXJhdG9yJzogJyAnXG4gICAgICogfSk7XG4gICAgICogLy8gPT4gJ2hpLWRpZGRseS1obyB0aGVyZSwuLi4nXG4gICAgICpcbiAgICAgKiBfLnRydW5jYXRlKCdoaS1kaWRkbHktaG8gdGhlcmUsIG5laWdoYm9yaW5vJywge1xuICAgICAqICAgJ2xlbmd0aCc6IDI0LFxuICAgICAqICAgJ3NlcGFyYXRvcic6IC8sPyArL1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+ICdoaS1kaWRkbHktaG8gdGhlcmUuLi4nXG4gICAgICpcbiAgICAgKiBfLnRydW5jYXRlKCdoaS1kaWRkbHktaG8gdGhlcmUsIG5laWdoYm9yaW5vJywge1xuICAgICAqICAgJ29taXNzaW9uJzogJyBbLi4uXSdcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiAnaGktZGlkZGx5LWhvIHRoZXJlLCBuZWlnIFsuLi5dJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRydW5jYXRlKHN0cmluZywgb3B0aW9ucykge1xuICAgICAgdmFyIGxlbmd0aCA9IERFRkFVTFRfVFJVTkNfTEVOR1RILFxuICAgICAgICAgIG9taXNzaW9uID0gREVGQVVMVF9UUlVOQ19PTUlTU0lPTjtcblxuICAgICAgaWYgKGlzT2JqZWN0KG9wdGlvbnMpKSB7XG4gICAgICAgIHZhciBzZXBhcmF0b3IgPSAnc2VwYXJhdG9yJyBpbiBvcHRpb25zID8gb3B0aW9ucy5zZXBhcmF0b3IgOiBzZXBhcmF0b3I7XG4gICAgICAgIGxlbmd0aCA9ICdsZW5ndGgnIGluIG9wdGlvbnMgPyB0b0ludGVnZXIob3B0aW9ucy5sZW5ndGgpIDogbGVuZ3RoO1xuICAgICAgICBvbWlzc2lvbiA9ICdvbWlzc2lvbicgaW4gb3B0aW9ucyA/IGJhc2VUb1N0cmluZyhvcHRpb25zLm9taXNzaW9uKSA6IG9taXNzaW9uO1xuICAgICAgfVxuICAgICAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcblxuICAgICAgdmFyIHN0ckxlbmd0aCA9IHN0cmluZy5sZW5ndGg7XG4gICAgICBpZiAoaGFzVW5pY29kZShzdHJpbmcpKSB7XG4gICAgICAgIHZhciBzdHJTeW1ib2xzID0gc3RyaW5nVG9BcnJheShzdHJpbmcpO1xuICAgICAgICBzdHJMZW5ndGggPSBzdHJTeW1ib2xzLmxlbmd0aDtcbiAgICAgIH1cbiAgICAgIGlmIChsZW5ndGggPj0gc3RyTGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBzdHJpbmc7XG4gICAgICB9XG4gICAgICB2YXIgZW5kID0gbGVuZ3RoIC0gc3RyaW5nU2l6ZShvbWlzc2lvbik7XG4gICAgICBpZiAoZW5kIDwgMSkge1xuICAgICAgICByZXR1cm4gb21pc3Npb247XG4gICAgICB9XG4gICAgICB2YXIgcmVzdWx0ID0gc3RyU3ltYm9sc1xuICAgICAgICA/IGNhc3RTbGljZShzdHJTeW1ib2xzLCAwLCBlbmQpLmpvaW4oJycpXG4gICAgICAgIDogc3RyaW5nLnNsaWNlKDAsIGVuZCk7XG5cbiAgICAgIGlmIChzZXBhcmF0b3IgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gcmVzdWx0ICsgb21pc3Npb247XG4gICAgICB9XG4gICAgICBpZiAoc3RyU3ltYm9scykge1xuICAgICAgICBlbmQgKz0gKHJlc3VsdC5sZW5ndGggLSBlbmQpO1xuICAgICAgfVxuICAgICAgaWYgKGlzUmVnRXhwKHNlcGFyYXRvcikpIHtcbiAgICAgICAgaWYgKHN0cmluZy5zbGljZShlbmQpLnNlYXJjaChzZXBhcmF0b3IpKSB7XG4gICAgICAgICAgdmFyIG1hdGNoLFxuICAgICAgICAgICAgICBzdWJzdHJpbmcgPSByZXN1bHQ7XG5cbiAgICAgICAgICBpZiAoIXNlcGFyYXRvci5nbG9iYWwpIHtcbiAgICAgICAgICAgIHNlcGFyYXRvciA9IFJlZ0V4cChzZXBhcmF0b3Iuc291cmNlLCB0b1N0cmluZyhyZUZsYWdzLmV4ZWMoc2VwYXJhdG9yKSkgKyAnZycpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBzZXBhcmF0b3IubGFzdEluZGV4ID0gMDtcbiAgICAgICAgICB3aGlsZSAoKG1hdGNoID0gc2VwYXJhdG9yLmV4ZWMoc3Vic3RyaW5nKSkpIHtcbiAgICAgICAgICAgIHZhciBuZXdFbmQgPSBtYXRjaC5pbmRleDtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmVzdWx0ID0gcmVzdWx0LnNsaWNlKDAsIG5ld0VuZCA9PT0gdW5kZWZpbmVkID8gZW5kIDogbmV3RW5kKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChzdHJpbmcuaW5kZXhPZihiYXNlVG9TdHJpbmcoc2VwYXJhdG9yKSwgZW5kKSAhPSBlbmQpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gcmVzdWx0Lmxhc3RJbmRleE9mKHNlcGFyYXRvcik7XG4gICAgICAgIGlmIChpbmRleCA+IC0xKSB7XG4gICAgICAgICAgcmVzdWx0ID0gcmVzdWx0LnNsaWNlKDAsIGluZGV4KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdCArIG9taXNzaW9uO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBpbnZlcnNlIG9mIGBfLmVzY2FwZWA7IHRoaXMgbWV0aG9kIGNvbnZlcnRzIHRoZSBIVE1MIGVudGl0aWVzXG4gICAgICogYCZhbXA7YCwgYCZsdDtgLCBgJmd0O2AsIGAmcXVvdDtgLCBhbmQgYCYjMzk7YCBpbiBgc3RyaW5nYCB0b1xuICAgICAqIHRoZWlyIGNvcnJlc3BvbmRpbmcgY2hhcmFjdGVycy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBObyBvdGhlciBIVE1MIGVudGl0aWVzIGFyZSB1bmVzY2FwZWQuIFRvIHVuZXNjYXBlIGFkZGl0aW9uYWxcbiAgICAgKiBIVE1MIGVudGl0aWVzIHVzZSBhIHRoaXJkLXBhcnR5IGxpYnJhcnkgbGlrZSBbX2hlX10oaHR0cHM6Ly9tdGhzLmJlL2hlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjYuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byB1bmVzY2FwZS5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSB1bmVzY2FwZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnVuZXNjYXBlKCdmcmVkLCBiYXJuZXksICZhbXA7IHBlYmJsZXMnKTtcbiAgICAgKiAvLyA9PiAnZnJlZCwgYmFybmV5LCAmIHBlYmJsZXMnXG4gICAgICovXG4gICAgZnVuY3Rpb24gdW5lc2NhcGUoc3RyaW5nKSB7XG4gICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuICAgICAgcmV0dXJuIChzdHJpbmcgJiYgcmVIYXNFc2NhcGVkSHRtbC50ZXN0KHN0cmluZykpXG4gICAgICAgID8gc3RyaW5nLnJlcGxhY2UocmVFc2NhcGVkSHRtbCwgdW5lc2NhcGVIdG1sQ2hhcilcbiAgICAgICAgOiBzdHJpbmc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHN0cmluZ2AsIGFzIHNwYWNlIHNlcGFyYXRlZCB3b3JkcywgdG8gdXBwZXIgY2FzZS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHVwcGVyIGNhc2VkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy51cHBlckNhc2UoJy0tZm9vLWJhcicpO1xuICAgICAqIC8vID0+ICdGT08gQkFSJ1xuICAgICAqXG4gICAgICogXy51cHBlckNhc2UoJ2Zvb0JhcicpO1xuICAgICAqIC8vID0+ICdGT08gQkFSJ1xuICAgICAqXG4gICAgICogXy51cHBlckNhc2UoJ19fZm9vX2Jhcl9fJyk7XG4gICAgICogLy8gPT4gJ0ZPTyBCQVInXG4gICAgICovXG4gICAgdmFyIHVwcGVyQ2FzZSA9IGNyZWF0ZUNvbXBvdW5kZXIoZnVuY3Rpb24ocmVzdWx0LCB3b3JkLCBpbmRleCkge1xuICAgICAgcmV0dXJuIHJlc3VsdCArIChpbmRleCA/ICcgJyA6ICcnKSArIHdvcmQudG9VcHBlckNhc2UoKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIHRoZSBmaXJzdCBjaGFyYWN0ZXIgb2YgYHN0cmluZ2AgdG8gdXBwZXIgY2FzZS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udXBwZXJGaXJzdCgnZnJlZCcpO1xuICAgICAqIC8vID0+ICdGcmVkJ1xuICAgICAqXG4gICAgICogXy51cHBlckZpcnN0KCdGUkVEJyk7XG4gICAgICogLy8gPT4gJ0ZSRUQnXG4gICAgICovXG4gICAgdmFyIHVwcGVyRmlyc3QgPSBjcmVhdGVDYXNlRmlyc3QoJ3RvVXBwZXJDYXNlJyk7XG5cbiAgICAvKipcbiAgICAgKiBTcGxpdHMgYHN0cmluZ2AgaW50byBhbiBhcnJheSBvZiBpdHMgd29yZHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge1JlZ0V4cHxzdHJpbmd9IFtwYXR0ZXJuXSBUaGUgcGF0dGVybiB0byBtYXRjaCB3b3Jkcy5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgd29yZHMgb2YgYHN0cmluZ2AuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ud29yZHMoJ2ZyZWQsIGJhcm5leSwgJiBwZWJibGVzJyk7XG4gICAgICogLy8gPT4gWydmcmVkJywgJ2Jhcm5leScsICdwZWJibGVzJ11cbiAgICAgKlxuICAgICAqIF8ud29yZHMoJ2ZyZWQsIGJhcm5leSwgJiBwZWJibGVzJywgL1teLCBdKy9nKTtcbiAgICAgKiAvLyA9PiBbJ2ZyZWQnLCAnYmFybmV5JywgJyYnLCAncGViYmxlcyddXG4gICAgICovXG4gICAgZnVuY3Rpb24gd29yZHMoc3RyaW5nLCBwYXR0ZXJuLCBndWFyZCkge1xuICAgICAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgICAgIHBhdHRlcm4gPSBndWFyZCA/IHVuZGVmaW5lZCA6IHBhdHRlcm47XG5cbiAgICAgIGlmIChwYXR0ZXJuID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIGhhc1VuaWNvZGVXb3JkKHN0cmluZykgPyB1bmljb2RlV29yZHMoc3RyaW5nKSA6IGFzY2lpV29yZHMoc3RyaW5nKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBzdHJpbmcubWF0Y2gocGF0dGVybikgfHwgW107XG4gICAgfVxuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQXR0ZW1wdHMgdG8gaW52b2tlIGBmdW5jYCwgcmV0dXJuaW5nIGVpdGhlciB0aGUgcmVzdWx0IG9yIHRoZSBjYXVnaHQgZXJyb3JcbiAgICAgKiBvYmplY3QuIEFueSBhZGRpdGlvbmFsIGFyZ3VtZW50cyBhcmUgcHJvdmlkZWQgdG8gYGZ1bmNgIHdoZW4gaXQncyBpbnZva2VkLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBhdHRlbXB0LlxuICAgICAqIEBwYXJhbSB7Li4uKn0gW2FyZ3NdIFRoZSBhcmd1bWVudHMgdG8gaW52b2tlIGBmdW5jYCB3aXRoLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBgZnVuY2AgcmVzdWx0IG9yIGVycm9yIG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogLy8gQXZvaWQgdGhyb3dpbmcgZXJyb3JzIGZvciBpbnZhbGlkIHNlbGVjdG9ycy5cbiAgICAgKiB2YXIgZWxlbWVudHMgPSBfLmF0dGVtcHQoZnVuY3Rpb24oc2VsZWN0b3IpIHtcbiAgICAgKiAgIHJldHVybiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKTtcbiAgICAgKiB9LCAnPl8+Jyk7XG4gICAgICpcbiAgICAgKiBpZiAoXy5pc0Vycm9yKGVsZW1lbnRzKSkge1xuICAgICAqICAgZWxlbWVudHMgPSBbXTtcbiAgICAgKiB9XG4gICAgICovXG4gICAgdmFyIGF0dGVtcHQgPSBiYXNlUmVzdChmdW5jdGlvbihmdW5jLCBhcmdzKSB7XG4gICAgICB0cnkge1xuICAgICAgICByZXR1cm4gYXBwbHkoZnVuYywgdW5kZWZpbmVkLCBhcmdzKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgcmV0dXJuIGlzRXJyb3IoZSkgPyBlIDogbmV3IEVycm9yKGUpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQmluZHMgbWV0aG9kcyBvZiBhbiBvYmplY3QgdG8gdGhlIG9iamVjdCBpdHNlbGYsIG92ZXJ3cml0aW5nIHRoZSBleGlzdGluZ1xuICAgICAqIG1ldGhvZC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBkb2Vzbid0IHNldCB0aGUgXCJsZW5ndGhcIiBwcm9wZXJ0eSBvZiBib3VuZCBmdW5jdGlvbnMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBiaW5kIGFuZCBhc3NpZ24gdGhlIGJvdW5kIG1ldGhvZHMgdG8uXG4gICAgICogQHBhcmFtIHsuLi4oc3RyaW5nfHN0cmluZ1tdKX0gbWV0aG9kTmFtZXMgVGhlIG9iamVjdCBtZXRob2QgbmFtZXMgdG8gYmluZC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdmlldyA9IHtcbiAgICAgKiAgICdsYWJlbCc6ICdkb2NzJyxcbiAgICAgKiAgICdjbGljayc6IGZ1bmN0aW9uKCkge1xuICAgICAqICAgICBjb25zb2xlLmxvZygnY2xpY2tlZCAnICsgdGhpcy5sYWJlbCk7XG4gICAgICogICB9XG4gICAgICogfTtcbiAgICAgKlxuICAgICAqIF8uYmluZEFsbCh2aWV3LCBbJ2NsaWNrJ10pO1xuICAgICAqIGpRdWVyeShlbGVtZW50KS5vbignY2xpY2snLCB2aWV3LmNsaWNrKTtcbiAgICAgKiAvLyA9PiBMb2dzICdjbGlja2VkIGRvY3MnIHdoZW4gY2xpY2tlZC5cbiAgICAgKi9cbiAgICB2YXIgYmluZEFsbCA9IGZsYXRSZXN0KGZ1bmN0aW9uKG9iamVjdCwgbWV0aG9kTmFtZXMpIHtcbiAgICAgIGFycmF5RWFjaChtZXRob2ROYW1lcywgZnVuY3Rpb24oa2V5KSB7XG4gICAgICAgIGtleSA9IHRvS2V5KGtleSk7XG4gICAgICAgIGJhc2VBc3NpZ25WYWx1ZShvYmplY3QsIGtleSwgYmluZChvYmplY3Rba2V5XSwgb2JqZWN0KSk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpdGVyYXRlcyBvdmVyIGBwYWlyc2AgYW5kIGludm9rZXMgdGhlIGNvcnJlc3BvbmRpbmdcbiAgICAgKiBmdW5jdGlvbiBvZiB0aGUgZmlyc3QgcHJlZGljYXRlIHRvIHJldHVybiB0cnV0aHkuIFRoZSBwcmVkaWNhdGUtZnVuY3Rpb25cbiAgICAgKiBwYWlycyBhcmUgaW52b2tlZCB3aXRoIHRoZSBgdGhpc2AgYmluZGluZyBhbmQgYXJndW1lbnRzIG9mIHRoZSBjcmVhdGVkXG4gICAgICogZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHBhaXJzIFRoZSBwcmVkaWNhdGUtZnVuY3Rpb24gcGFpcnMuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgY29tcG9zaXRlIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgZnVuYyA9IF8uY29uZChbXG4gICAgICogICBbXy5tYXRjaGVzKHsgJ2EnOiAxIH0pLCAgICAgICAgICAgXy5jb25zdGFudCgnbWF0Y2hlcyBBJyldLFxuICAgICAqICAgW18uY29uZm9ybXMoeyAnYic6IF8uaXNOdW1iZXIgfSksIF8uY29uc3RhbnQoJ21hdGNoZXMgQicpXSxcbiAgICAgKiAgIFtfLnN0dWJUcnVlLCAgICAgICAgICAgICAgICAgICAgICBfLmNvbnN0YW50KCdubyBtYXRjaCcpXVxuICAgICAqIF0pO1xuICAgICAqXG4gICAgICogZnVuYyh7ICdhJzogMSwgJ2InOiAyIH0pO1xuICAgICAqIC8vID0+ICdtYXRjaGVzIEEnXG4gICAgICpcbiAgICAgKiBmdW5jKHsgJ2EnOiAwLCAnYic6IDEgfSk7XG4gICAgICogLy8gPT4gJ21hdGNoZXMgQidcbiAgICAgKlxuICAgICAqIGZ1bmMoeyAnYSc6ICcxJywgJ2InOiAnMicgfSk7XG4gICAgICogLy8gPT4gJ25vIG1hdGNoJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvbmQocGFpcnMpIHtcbiAgICAgIHZhciBsZW5ndGggPSBwYWlycyA9PSBudWxsID8gMCA6IHBhaXJzLmxlbmd0aCxcbiAgICAgICAgICB0b0l0ZXJhdGVlID0gZ2V0SXRlcmF0ZWUoKTtcblxuICAgICAgcGFpcnMgPSAhbGVuZ3RoID8gW10gOiBhcnJheU1hcChwYWlycywgZnVuY3Rpb24ocGFpcikge1xuICAgICAgICBpZiAodHlwZW9mIHBhaXJbMV0gIT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gW3RvSXRlcmF0ZWUocGFpclswXSksIHBhaXJbMV1dO1xuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiBiYXNlUmVzdChmdW5jdGlvbihhcmdzKSB7XG4gICAgICAgIHZhciBpbmRleCA9IC0xO1xuICAgICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICAgIHZhciBwYWlyID0gcGFpcnNbaW5kZXhdO1xuICAgICAgICAgIGlmIChhcHBseShwYWlyWzBdLCB0aGlzLCBhcmdzKSkge1xuICAgICAgICAgICAgcmV0dXJuIGFwcGx5KHBhaXJbMV0sIHRoaXMsIGFyZ3MpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyB0aGUgcHJlZGljYXRlIHByb3BlcnRpZXMgb2YgYHNvdXJjZWAgd2l0aFxuICAgICAqIHRoZSBjb3JyZXNwb25kaW5nIHByb3BlcnR5IHZhbHVlcyBvZiBhIGdpdmVuIG9iamVjdCwgcmV0dXJuaW5nIGB0cnVlYCBpZlxuICAgICAqIGFsbCBwcmVkaWNhdGVzIHJldHVybiB0cnV0aHksIGVsc2UgYGZhbHNlYC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGUgY3JlYXRlZCBmdW5jdGlvbiBpcyBlcXVpdmFsZW50IHRvIGBfLmNvbmZvcm1zVG9gIHdpdGhcbiAgICAgKiBgc291cmNlYCBwYXJ0aWFsbHkgYXBwbGllZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IG9mIHByb3BlcnR5IHByZWRpY2F0ZXMgdG8gY29uZm9ybSB0by5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBzcGVjIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFtcbiAgICAgKiAgIHsgJ2EnOiAyLCAnYic6IDEgfSxcbiAgICAgKiAgIHsgJ2EnOiAxLCAnYic6IDIgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLmZpbHRlcihvYmplY3RzLCBfLmNvbmZvcm1zKHsgJ2InOiBmdW5jdGlvbihuKSB7IHJldHVybiBuID4gMTsgfSB9KSk7XG4gICAgICogLy8gPT4gW3sgJ2EnOiAxLCAnYic6IDIgfV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjb25mb3Jtcyhzb3VyY2UpIHtcbiAgICAgIHJldHVybiBiYXNlQ29uZm9ybXMoYmFzZUNsb25lKHNvdXJjZSwgQ0xPTkVfREVFUF9GTEFHKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBgdmFsdWVgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuNC4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byByZXR1cm4gZnJvbSB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGNvbnN0YW50IGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IF8udGltZXMoMiwgXy5jb25zdGFudCh7ICdhJzogMSB9KSk7XG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhvYmplY3RzKTtcbiAgICAgKiAvLyA9PiBbeyAnYSc6IDEgfSwgeyAnYSc6IDEgfV1cbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKG9iamVjdHNbMF0gPT09IG9iamVjdHNbMV0pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjb25zdGFudCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBgdmFsdWVgIHRvIGRldGVybWluZSB3aGV0aGVyIGEgZGVmYXVsdCB2YWx1ZSBzaG91bGQgYmUgcmV0dXJuZWQgaW5cbiAgICAgKiBpdHMgcGxhY2UuIFRoZSBgZGVmYXVsdFZhbHVlYCBpcyByZXR1cm5lZCBpZiBgdmFsdWVgIGlzIGBOYU5gLCBgbnVsbGAsXG4gICAgICogb3IgYHVuZGVmaW5lZGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4xNC4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcGFyYW0geyp9IGRlZmF1bHRWYWx1ZSBUaGUgZGVmYXVsdCB2YWx1ZS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmVzb2x2ZWQgdmFsdWUuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZGVmYXVsdFRvKDEsIDEwKTtcbiAgICAgKiAvLyA9PiAxXG4gICAgICpcbiAgICAgKiBfLmRlZmF1bHRUbyh1bmRlZmluZWQsIDEwKTtcbiAgICAgKiAvLyA9PiAxMFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGRlZmF1bHRUbyh2YWx1ZSwgZGVmYXVsdFZhbHVlKSB7XG4gICAgICByZXR1cm4gKHZhbHVlID09IG51bGwgfHwgdmFsdWUgIT09IHZhbHVlKSA/IGRlZmF1bHRWYWx1ZSA6IHZhbHVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHJldHVybnMgdGhlIHJlc3VsdCBvZiBpbnZva2luZyB0aGUgZ2l2ZW4gZnVuY3Rpb25zXG4gICAgICogd2l0aCB0aGUgYHRoaXNgIGJpbmRpbmcgb2YgdGhlIGNyZWF0ZWQgZnVuY3Rpb24sIHdoZXJlIGVhY2ggc3VjY2Vzc2l2ZVxuICAgICAqIGludm9jYXRpb24gaXMgc3VwcGxpZWQgdGhlIHJldHVybiB2YWx1ZSBvZiB0aGUgcHJldmlvdXMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7Li4uKEZ1bmN0aW9ufEZ1bmN0aW9uW10pfSBbZnVuY3NdIFRoZSBmdW5jdGlvbnMgdG8gaW52b2tlLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGNvbXBvc2l0ZSBmdW5jdGlvbi5cbiAgICAgKiBAc2VlIF8uZmxvd1JpZ2h0XG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIHNxdWFyZShuKSB7XG4gICAgICogICByZXR1cm4gbiAqIG47XG4gICAgICogfVxuICAgICAqXG4gICAgICogdmFyIGFkZFNxdWFyZSA9IF8uZmxvdyhbXy5hZGQsIHNxdWFyZV0pO1xuICAgICAqIGFkZFNxdWFyZSgxLCAyKTtcbiAgICAgKiAvLyA9PiA5XG4gICAgICovXG4gICAgdmFyIGZsb3cgPSBjcmVhdGVGbG93KCk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmZsb3dgIGV4Y2VwdCB0aGF0IGl0IGNyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0XG4gICAgICogaW52b2tlcyB0aGUgZ2l2ZW4gZnVuY3Rpb25zIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHsuLi4oRnVuY3Rpb258RnVuY3Rpb25bXSl9IFtmdW5jc10gVGhlIGZ1bmN0aW9ucyB0byBpbnZva2UuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgY29tcG9zaXRlIGZ1bmN0aW9uLlxuICAgICAqIEBzZWUgXy5mbG93XG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIHNxdWFyZShuKSB7XG4gICAgICogICByZXR1cm4gbiAqIG47XG4gICAgICogfVxuICAgICAqXG4gICAgICogdmFyIGFkZFNxdWFyZSA9IF8uZmxvd1JpZ2h0KFtzcXVhcmUsIF8uYWRkXSk7XG4gICAgICogYWRkU3F1YXJlKDEsIDIpO1xuICAgICAqIC8vID0+IDlcbiAgICAgKi9cbiAgICB2YXIgZmxvd1JpZ2h0ID0gY3JlYXRlRmxvdyh0cnVlKTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIHJldHVybnMgdGhlIGZpcnN0IGFyZ3VtZW50IGl0IHJlY2VpdmVzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIEFueSB2YWx1ZS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyBgdmFsdWVgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEgfTtcbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKF8uaWRlbnRpdHkob2JqZWN0KSA9PT0gb2JqZWN0KTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaWRlbnRpdHkodmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGBmdW5jYCB3aXRoIHRoZSBhcmd1bWVudHMgb2YgdGhlIGNyZWF0ZWRcbiAgICAgKiBmdW5jdGlvbi4gSWYgYGZ1bmNgIGlzIGEgcHJvcGVydHkgbmFtZSwgdGhlIGNyZWF0ZWQgZnVuY3Rpb24gcmV0dXJucyB0aGVcbiAgICAgKiBwcm9wZXJ0eSB2YWx1ZSBmb3IgYSBnaXZlbiBlbGVtZW50LiBJZiBgZnVuY2AgaXMgYW4gYXJyYXkgb3Igb2JqZWN0LCB0aGVcbiAgICAgKiBjcmVhdGVkIGZ1bmN0aW9uIHJldHVybnMgYHRydWVgIGZvciBlbGVtZW50cyB0aGF0IGNvbnRhaW4gdGhlIGVxdWl2YWxlbnRcbiAgICAgKiBzb3VyY2UgcHJvcGVydGllcywgb3RoZXJ3aXNlIGl0IHJldHVybnMgYGZhbHNlYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHsqfSBbZnVuYz1fLmlkZW50aXR5XSBUaGUgdmFsdWUgdG8gY29udmVydCB0byBhIGNhbGxiYWNrLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgY2FsbGJhY2suXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FnZSc6IDM2LCAnYWN0aXZlJzogdHJ1ZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAnYWdlJzogNDAsICdhY3RpdmUnOiBmYWxzZSB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzYCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maWx0ZXIodXNlcnMsIF8uaXRlcmF0ZWUoeyAndXNlcic6ICdiYXJuZXknLCAnYWN0aXZlJzogdHJ1ZSB9KSk7XG4gICAgICogLy8gPT4gW3sgJ3VzZXInOiAnYmFybmV5JywgJ2FnZSc6IDM2LCAnYWN0aXZlJzogdHJ1ZSB9XVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmlsdGVyKHVzZXJzLCBfLml0ZXJhdGVlKFsndXNlcicsICdmcmVkJ10pKTtcbiAgICAgKiAvLyA9PiBbeyAndXNlcic6ICdmcmVkJywgJ2FnZSc6IDQwIH1dXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLm1hcCh1c2VycywgXy5pdGVyYXRlZSgndXNlcicpKTtcbiAgICAgKiAvLyA9PiBbJ2Jhcm5leScsICdmcmVkJ11cbiAgICAgKlxuICAgICAqIC8vIENyZWF0ZSBjdXN0b20gaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICAgKiBfLml0ZXJhdGVlID0gXy53cmFwKF8uaXRlcmF0ZWUsIGZ1bmN0aW9uKGl0ZXJhdGVlLCBmdW5jKSB7XG4gICAgICogICByZXR1cm4gIV8uaXNSZWdFeHAoZnVuYykgPyBpdGVyYXRlZShmdW5jKSA6IGZ1bmN0aW9uKHN0cmluZykge1xuICAgICAqICAgICByZXR1cm4gZnVuYy50ZXN0KHN0cmluZyk7XG4gICAgICogICB9O1xuICAgICAqIH0pO1xuICAgICAqXG4gICAgICogXy5maWx0ZXIoWydhYmMnLCAnZGVmJ10sIC9lZi8pO1xuICAgICAqIC8vID0+IFsnZGVmJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpdGVyYXRlZShmdW5jKSB7XG4gICAgICByZXR1cm4gYmFzZUl0ZXJhdGVlKHR5cGVvZiBmdW5jID09ICdmdW5jdGlvbicgPyBmdW5jIDogYmFzZUNsb25lKGZ1bmMsIENMT05FX0RFRVBfRkxBRykpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHBlcmZvcm1zIGEgcGFydGlhbCBkZWVwIGNvbXBhcmlzb24gYmV0d2VlbiBhIGdpdmVuXG4gICAgICogb2JqZWN0IGFuZCBgc291cmNlYCwgcmV0dXJuaW5nIGB0cnVlYCBpZiB0aGUgZ2l2ZW4gb2JqZWN0IGhhcyBlcXVpdmFsZW50XG4gICAgICogcHJvcGVydHkgdmFsdWVzLCBlbHNlIGBmYWxzZWAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhlIGNyZWF0ZWQgZnVuY3Rpb24gaXMgZXF1aXZhbGVudCB0byBgXy5pc01hdGNoYCB3aXRoIGBzb3VyY2VgXG4gICAgICogcGFydGlhbGx5IGFwcGxpZWQuXG4gICAgICpcbiAgICAgKiBQYXJ0aWFsIGNvbXBhcmlzb25zIHdpbGwgbWF0Y2ggZW1wdHkgYXJyYXkgYW5kIGVtcHR5IG9iamVjdCBgc291cmNlYFxuICAgICAqIHZhbHVlcyBhZ2FpbnN0IGFueSBhcnJheSBvciBvYmplY3QgdmFsdWUsIHJlc3BlY3RpdmVseS4gU2VlIGBfLmlzRXF1YWxgXG4gICAgICogZm9yIGEgbGlzdCBvZiBzdXBwb3J0ZWQgdmFsdWUgY29tcGFyaXNvbnMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCBvZiBwcm9wZXJ0eSB2YWx1ZXMgdG8gbWF0Y2guXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgc3BlYyBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbXG4gICAgICogICB7ICdhJzogMSwgJ2InOiAyLCAnYyc6IDMgfSxcbiAgICAgKiAgIHsgJ2EnOiA0LCAnYic6IDUsICdjJzogNiB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8uZmlsdGVyKG9iamVjdHMsIF8ubWF0Y2hlcyh7ICdhJzogNCwgJ2MnOiA2IH0pKTtcbiAgICAgKiAvLyA9PiBbeyAnYSc6IDQsICdiJzogNSwgJ2MnOiA2IH1dXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWF0Y2hlcyhzb3VyY2UpIHtcbiAgICAgIHJldHVybiBiYXNlTWF0Y2hlcyhiYXNlQ2xvbmUoc291cmNlLCBDTE9ORV9ERUVQX0ZMQUcpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBwZXJmb3JtcyBhIHBhcnRpYWwgZGVlcCBjb21wYXJpc29uIGJldHdlZW4gdGhlXG4gICAgICogdmFsdWUgYXQgYHBhdGhgIG9mIGEgZ2l2ZW4gb2JqZWN0IHRvIGBzcmNWYWx1ZWAsIHJldHVybmluZyBgdHJ1ZWAgaWYgdGhlXG4gICAgICogb2JqZWN0IHZhbHVlIGlzIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBQYXJ0aWFsIGNvbXBhcmlzb25zIHdpbGwgbWF0Y2ggZW1wdHkgYXJyYXkgYW5kIGVtcHR5IG9iamVjdFxuICAgICAqIGBzcmNWYWx1ZWAgdmFsdWVzIGFnYWluc3QgYW55IGFycmF5IG9yIG9iamVjdCB2YWx1ZSwgcmVzcGVjdGl2ZWx5LiBTZWVcbiAgICAgKiBgXy5pc0VxdWFsYCBmb3IgYSBsaXN0IG9mIHN1cHBvcnRlZCB2YWx1ZSBjb21wYXJpc29ucy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjIuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAgICAgKiBAcGFyYW0geyp9IHNyY1ZhbHVlIFRoZSB2YWx1ZSB0byBtYXRjaC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBzcGVjIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFtcbiAgICAgKiAgIHsgJ2EnOiAxLCAnYic6IDIsICdjJzogMyB9LFxuICAgICAqICAgeyAnYSc6IDQsICdiJzogNSwgJ2MnOiA2IH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5maW5kKG9iamVjdHMsIF8ubWF0Y2hlc1Byb3BlcnR5KCdhJywgNCkpO1xuICAgICAqIC8vID0+IHsgJ2EnOiA0LCAnYic6IDUsICdjJzogNiB9XG4gICAgICovXG4gICAgZnVuY3Rpb24gbWF0Y2hlc1Byb3BlcnR5KHBhdGgsIHNyY1ZhbHVlKSB7XG4gICAgICByZXR1cm4gYmFzZU1hdGNoZXNQcm9wZXJ0eShwYXRoLCBiYXNlQ2xvbmUoc3JjVmFsdWUsIENMT05FX0RFRVBfRkxBRykpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXMgdGhlIG1ldGhvZCBhdCBgcGF0aGAgb2YgYSBnaXZlbiBvYmplY3QuXG4gICAgICogQW55IGFkZGl0aW9uYWwgYXJndW1lbnRzIGFyZSBwcm92aWRlZCB0byB0aGUgaW52b2tlZCBtZXRob2QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy43LjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBtZXRob2QgdG8gaW52b2tlLlxuICAgICAqIEBwYXJhbSB7Li4uKn0gW2FyZ3NdIFRoZSBhcmd1bWVudHMgdG8gaW52b2tlIHRoZSBtZXRob2Qgd2l0aC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBpbnZva2VyIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFtcbiAgICAgKiAgIHsgJ2EnOiB7ICdiJzogXy5jb25zdGFudCgyKSB9IH0sXG4gICAgICogICB7ICdhJzogeyAnYic6IF8uY29uc3RhbnQoMSkgfSB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8ubWFwKG9iamVjdHMsIF8ubWV0aG9kKCdhLmInKSk7XG4gICAgICogLy8gPT4gWzIsIDFdXG4gICAgICpcbiAgICAgKiBfLm1hcChvYmplY3RzLCBfLm1ldGhvZChbJ2EnLCAnYiddKSk7XG4gICAgICogLy8gPT4gWzIsIDFdXG4gICAgICovXG4gICAgdmFyIG1ldGhvZCA9IGJhc2VSZXN0KGZ1bmN0aW9uKHBhdGgsIGFyZ3MpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihvYmplY3QpIHtcbiAgICAgICAgcmV0dXJuIGJhc2VJbnZva2Uob2JqZWN0LCBwYXRoLCBhcmdzKTtcbiAgICAgIH07XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgb3Bwb3NpdGUgb2YgYF8ubWV0aG9kYDsgdGhpcyBtZXRob2QgY3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlc1xuICAgICAqIHRoZSBtZXRob2QgYXQgYSBnaXZlbiBwYXRoIG9mIGBvYmplY3RgLiBBbnkgYWRkaXRpb25hbCBhcmd1bWVudHMgYXJlXG4gICAgICogcHJvdmlkZWQgdG8gdGhlIGludm9rZWQgbWV0aG9kLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuNy4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHsuLi4qfSBbYXJnc10gVGhlIGFyZ3VtZW50cyB0byBpbnZva2UgdGhlIG1ldGhvZCB3aXRoLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGludm9rZXIgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IF8udGltZXMoMywgXy5jb25zdGFudCksXG4gICAgICogICAgIG9iamVjdCA9IHsgJ2EnOiBhcnJheSwgJ2InOiBhcnJheSwgJ2MnOiBhcnJheSB9O1xuICAgICAqXG4gICAgICogXy5tYXAoWydhWzJdJywgJ2NbMF0nXSwgXy5tZXRob2RPZihvYmplY3QpKTtcbiAgICAgKiAvLyA9PiBbMiwgMF1cbiAgICAgKlxuICAgICAqIF8ubWFwKFtbJ2EnLCAnMiddLCBbJ2MnLCAnMCddXSwgXy5tZXRob2RPZihvYmplY3QpKTtcbiAgICAgKiAvLyA9PiBbMiwgMF1cbiAgICAgKi9cbiAgICB2YXIgbWV0aG9kT2YgPSBiYXNlUmVzdChmdW5jdGlvbihvYmplY3QsIGFyZ3MpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihwYXRoKSB7XG4gICAgICAgIHJldHVybiBiYXNlSW52b2tlKG9iamVjdCwgcGF0aCwgYXJncyk7XG4gICAgICB9O1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQWRkcyBhbGwgb3duIGVudW1lcmFibGUgc3RyaW5nIGtleWVkIGZ1bmN0aW9uIHByb3BlcnRpZXMgb2YgYSBzb3VyY2VcbiAgICAgKiBvYmplY3QgdG8gdGhlIGRlc3RpbmF0aW9uIG9iamVjdC4gSWYgYG9iamVjdGAgaXMgYSBmdW5jdGlvbiwgdGhlbiBtZXRob2RzXG4gICAgICogYXJlIGFkZGVkIHRvIGl0cyBwcm90b3R5cGUgYXMgd2VsbC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBVc2UgYF8ucnVuSW5Db250ZXh0YCB0byBjcmVhdGUgYSBwcmlzdGluZSBgbG9kYXNoYCBmdW5jdGlvbiB0b1xuICAgICAqIGF2b2lkIGNvbmZsaWN0cyBjYXVzZWQgYnkgbW9kaWZ5aW5nIHRoZSBvcmlnaW5hbC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbnxPYmplY3R9IFtvYmplY3Q9bG9kYXNoXSBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCBvZiBmdW5jdGlvbnMgdG8gYWRkLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9ucz17fV0gVGhlIG9wdGlvbnMgb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMuY2hhaW49dHJ1ZV0gU3BlY2lmeSB3aGV0aGVyIG1peGlucyBhcmUgY2hhaW5hYmxlLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbnxPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIHZvd2VscyhzdHJpbmcpIHtcbiAgICAgKiAgIHJldHVybiBfLmZpbHRlcihzdHJpbmcsIGZ1bmN0aW9uKHYpIHtcbiAgICAgKiAgICAgcmV0dXJuIC9bYWVpb3VdL2kudGVzdCh2KTtcbiAgICAgKiAgIH0pO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIF8ubWl4aW4oeyAndm93ZWxzJzogdm93ZWxzIH0pO1xuICAgICAqIF8udm93ZWxzKCdmcmVkJyk7XG4gICAgICogLy8gPT4gWydlJ11cbiAgICAgKlxuICAgICAqIF8oJ2ZyZWQnKS52b3dlbHMoKS52YWx1ZSgpO1xuICAgICAqIC8vID0+IFsnZSddXG4gICAgICpcbiAgICAgKiBfLm1peGluKHsgJ3Zvd2Vscyc6IHZvd2VscyB9LCB7ICdjaGFpbic6IGZhbHNlIH0pO1xuICAgICAqIF8oJ2ZyZWQnKS52b3dlbHMoKTtcbiAgICAgKiAvLyA9PiBbJ2UnXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1peGluKG9iamVjdCwgc291cmNlLCBvcHRpb25zKSB7XG4gICAgICB2YXIgcHJvcHMgPSBrZXlzKHNvdXJjZSksXG4gICAgICAgICAgbWV0aG9kTmFtZXMgPSBiYXNlRnVuY3Rpb25zKHNvdXJjZSwgcHJvcHMpO1xuXG4gICAgICBpZiAob3B0aW9ucyA9PSBudWxsICYmXG4gICAgICAgICAgIShpc09iamVjdChzb3VyY2UpICYmIChtZXRob2ROYW1lcy5sZW5ndGggfHwgIXByb3BzLmxlbmd0aCkpKSB7XG4gICAgICAgIG9wdGlvbnMgPSBzb3VyY2U7XG4gICAgICAgIHNvdXJjZSA9IG9iamVjdDtcbiAgICAgICAgb2JqZWN0ID0gdGhpcztcbiAgICAgICAgbWV0aG9kTmFtZXMgPSBiYXNlRnVuY3Rpb25zKHNvdXJjZSwga2V5cyhzb3VyY2UpKTtcbiAgICAgIH1cbiAgICAgIHZhciBjaGFpbiA9ICEoaXNPYmplY3Qob3B0aW9ucykgJiYgJ2NoYWluJyBpbiBvcHRpb25zKSB8fCAhIW9wdGlvbnMuY2hhaW4sXG4gICAgICAgICAgaXNGdW5jID0gaXNGdW5jdGlvbihvYmplY3QpO1xuXG4gICAgICBhcnJheUVhY2gobWV0aG9kTmFtZXMsIGZ1bmN0aW9uKG1ldGhvZE5hbWUpIHtcbiAgICAgICAgdmFyIGZ1bmMgPSBzb3VyY2VbbWV0aG9kTmFtZV07XG4gICAgICAgIG9iamVjdFttZXRob2ROYW1lXSA9IGZ1bmM7XG4gICAgICAgIGlmIChpc0Z1bmMpIHtcbiAgICAgICAgICBvYmplY3QucHJvdG90eXBlW21ldGhvZE5hbWVdID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgY2hhaW5BbGwgPSB0aGlzLl9fY2hhaW5fXztcbiAgICAgICAgICAgIGlmIChjaGFpbiB8fCBjaGFpbkFsbCkge1xuICAgICAgICAgICAgICB2YXIgcmVzdWx0ID0gb2JqZWN0KHRoaXMuX193cmFwcGVkX18pLFxuICAgICAgICAgICAgICAgICAgYWN0aW9ucyA9IHJlc3VsdC5fX2FjdGlvbnNfXyA9IGNvcHlBcnJheSh0aGlzLl9fYWN0aW9uc19fKTtcblxuICAgICAgICAgICAgICBhY3Rpb25zLnB1c2goeyAnZnVuYyc6IGZ1bmMsICdhcmdzJzogYXJndW1lbnRzLCAndGhpc0FyZyc6IG9iamVjdCB9KTtcbiAgICAgICAgICAgICAgcmVzdWx0Ll9fY2hhaW5fXyA9IGNoYWluQWxsO1xuICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGZ1bmMuYXBwbHkob2JqZWN0LCBhcnJheVB1c2goW3RoaXMudmFsdWUoKV0sIGFyZ3VtZW50cykpO1xuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gb2JqZWN0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldmVydHMgdGhlIGBfYCB2YXJpYWJsZSB0byBpdHMgcHJldmlvdXMgdmFsdWUgYW5kIHJldHVybnMgYSByZWZlcmVuY2UgdG9cbiAgICAgKiB0aGUgYGxvZGFzaGAgZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgYGxvZGFzaGAgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBsb2Rhc2ggPSBfLm5vQ29uZmxpY3QoKTtcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBub0NvbmZsaWN0KCkge1xuICAgICAgaWYgKHJvb3QuXyA9PT0gdGhpcykge1xuICAgICAgICByb290Ll8gPSBvbGREYXNoO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgcmV0dXJucyBgdW5kZWZpbmVkYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAyLjMuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udGltZXMoMiwgXy5ub29wKTtcbiAgICAgKiAvLyA9PiBbdW5kZWZpbmVkLCB1bmRlZmluZWRdXG4gICAgICovXG4gICAgZnVuY3Rpb24gbm9vcCgpIHtcbiAgICAgIC8vIE5vIG9wZXJhdGlvbiBwZXJmb3JtZWQuXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgZ2V0cyB0aGUgYXJndW1lbnQgYXQgaW5kZXggYG5gLiBJZiBgbmAgaXMgbmVnYXRpdmUsXG4gICAgICogdGhlIG50aCBhcmd1bWVudCBmcm9tIHRoZSBlbmQgaXMgcmV0dXJuZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbj0wXSBUaGUgaW5kZXggb2YgdGhlIGFyZ3VtZW50IHRvIHJldHVybi5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBwYXNzLXRocnUgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBmdW5jID0gXy5udGhBcmcoMSk7XG4gICAgICogZnVuYygnYScsICdiJywgJ2MnLCAnZCcpO1xuICAgICAqIC8vID0+ICdiJ1xuICAgICAqXG4gICAgICogdmFyIGZ1bmMgPSBfLm50aEFyZygtMik7XG4gICAgICogZnVuYygnYScsICdiJywgJ2MnLCAnZCcpO1xuICAgICAqIC8vID0+ICdjJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIG50aEFyZyhuKSB7XG4gICAgICBuID0gdG9JbnRlZ2VyKG4pO1xuICAgICAgcmV0dXJuIGJhc2VSZXN0KGZ1bmN0aW9uKGFyZ3MpIHtcbiAgICAgICAgcmV0dXJuIGJhc2VOdGgoYXJncywgbik7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGBpdGVyYXRlZXNgIHdpdGggdGhlIGFyZ3VtZW50cyBpdCByZWNlaXZlc1xuICAgICAqIGFuZCByZXR1cm5zIHRoZWlyIHJlc3VsdHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7Li4uKEZ1bmN0aW9ufEZ1bmN0aW9uW10pfSBbaXRlcmF0ZWVzPVtfLmlkZW50aXR5XV1cbiAgICAgKiAgVGhlIGl0ZXJhdGVlcyB0byBpbnZva2UuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBmdW5jID0gXy5vdmVyKFtNYXRoLm1heCwgTWF0aC5taW5dKTtcbiAgICAgKlxuICAgICAqIGZ1bmMoMSwgMiwgMywgNCk7XG4gICAgICogLy8gPT4gWzQsIDFdXG4gICAgICovXG4gICAgdmFyIG92ZXIgPSBjcmVhdGVPdmVyKGFycmF5TWFwKTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGNoZWNrcyBpZiAqKmFsbCoqIG9mIHRoZSBgcHJlZGljYXRlc2AgcmV0dXJuXG4gICAgICogdHJ1dGh5IHdoZW4gaW52b2tlZCB3aXRoIHRoZSBhcmd1bWVudHMgaXQgcmVjZWl2ZXMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7Li4uKEZ1bmN0aW9ufEZ1bmN0aW9uW10pfSBbcHJlZGljYXRlcz1bXy5pZGVudGl0eV1dXG4gICAgICogIFRoZSBwcmVkaWNhdGVzIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgZnVuYyA9IF8ub3ZlckV2ZXJ5KFtCb29sZWFuLCBpc0Zpbml0ZV0pO1xuICAgICAqXG4gICAgICogZnVuYygnMScpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIGZ1bmMobnVsbCk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIGZ1bmMoTmFOKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIHZhciBvdmVyRXZlcnkgPSBjcmVhdGVPdmVyKGFycmF5RXZlcnkpO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgY2hlY2tzIGlmICoqYW55Kiogb2YgdGhlIGBwcmVkaWNhdGVzYCByZXR1cm5cbiAgICAgKiB0cnV0aHkgd2hlbiBpbnZva2VkIHdpdGggdGhlIGFyZ3VtZW50cyBpdCByZWNlaXZlcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHsuLi4oRnVuY3Rpb258RnVuY3Rpb25bXSl9IFtwcmVkaWNhdGVzPVtfLmlkZW50aXR5XV1cbiAgICAgKiAgVGhlIHByZWRpY2F0ZXMgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBmdW5jID0gXy5vdmVyU29tZShbQm9vbGVhbiwgaXNGaW5pdGVdKTtcbiAgICAgKlxuICAgICAqIGZ1bmMoJzEnKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBmdW5jKG51bGwpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIGZ1bmMoTmFOKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIHZhciBvdmVyU29tZSA9IGNyZWF0ZU92ZXIoYXJyYXlTb21lKTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHJldHVybnMgdGhlIHZhbHVlIGF0IGBwYXRoYCBvZiBhIGdpdmVuIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAyLjQuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBhY2Nlc3NvciBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbXG4gICAgICogICB7ICdhJzogeyAnYic6IDIgfSB9LFxuICAgICAqICAgeyAnYSc6IHsgJ2InOiAxIH0gfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLm1hcChvYmplY3RzLCBfLnByb3BlcnR5KCdhLmInKSk7XG4gICAgICogLy8gPT4gWzIsIDFdXG4gICAgICpcbiAgICAgKiBfLm1hcChfLnNvcnRCeShvYmplY3RzLCBfLnByb3BlcnR5KFsnYScsICdiJ10pKSwgJ2EuYicpO1xuICAgICAqIC8vID0+IFsxLCAyXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHByb3BlcnR5KHBhdGgpIHtcbiAgICAgIHJldHVybiBpc0tleShwYXRoKSA/IGJhc2VQcm9wZXJ0eSh0b0tleShwYXRoKSkgOiBiYXNlUHJvcGVydHlEZWVwKHBhdGgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBvcHBvc2l0ZSBvZiBgXy5wcm9wZXJ0eWA7IHRoaXMgbWV0aG9kIGNyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHJldHVybnNcbiAgICAgKiB0aGUgdmFsdWUgYXQgYSBnaXZlbiBwYXRoIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYWNjZXNzb3IgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFswLCAxLCAyXSxcbiAgICAgKiAgICAgb2JqZWN0ID0geyAnYSc6IGFycmF5LCAnYic6IGFycmF5LCAnYyc6IGFycmF5IH07XG4gICAgICpcbiAgICAgKiBfLm1hcChbJ2FbMl0nLCAnY1swXSddLCBfLnByb3BlcnR5T2Yob2JqZWN0KSk7XG4gICAgICogLy8gPT4gWzIsIDBdXG4gICAgICpcbiAgICAgKiBfLm1hcChbWydhJywgJzInXSwgWydjJywgJzAnXV0sIF8ucHJvcGVydHlPZihvYmplY3QpKTtcbiAgICAgKiAvLyA9PiBbMiwgMF1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBwcm9wZXJ0eU9mKG9iamVjdCkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKHBhdGgpIHtcbiAgICAgICAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gdW5kZWZpbmVkIDogYmFzZUdldChvYmplY3QsIHBhdGgpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIG51bWJlcnMgKHBvc2l0aXZlIGFuZC9vciBuZWdhdGl2ZSkgcHJvZ3Jlc3NpbmcgZnJvbVxuICAgICAqIGBzdGFydGAgdXAgdG8sIGJ1dCBub3QgaW5jbHVkaW5nLCBgZW5kYC4gQSBzdGVwIG9mIGAtMWAgaXMgdXNlZCBpZiBhIG5lZ2F0aXZlXG4gICAgICogYHN0YXJ0YCBpcyBzcGVjaWZpZWQgd2l0aG91dCBhbiBgZW5kYCBvciBgc3RlcGAuIElmIGBlbmRgIGlzIG5vdCBzcGVjaWZpZWQsXG4gICAgICogaXQncyBzZXQgdG8gYHN0YXJ0YCB3aXRoIGBzdGFydGAgdGhlbiBzZXQgdG8gYDBgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIEphdmFTY3JpcHQgZm9sbG93cyB0aGUgSUVFRS03NTQgc3RhbmRhcmQgZm9yIHJlc29sdmluZ1xuICAgICAqIGZsb2F0aW5nLXBvaW50IHZhbHVlcyB3aGljaCBjYW4gcHJvZHVjZSB1bmV4cGVjdGVkIHJlc3VsdHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbc3RhcnQ9MF0gVGhlIHN0YXJ0IG9mIHRoZSByYW5nZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gZW5kIFRoZSBlbmQgb2YgdGhlIHJhbmdlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbc3RlcD0xXSBUaGUgdmFsdWUgdG8gaW5jcmVtZW50IG9yIGRlY3JlbWVudCBieS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHJhbmdlIG9mIG51bWJlcnMuXG4gICAgICogQHNlZSBfLmluUmFuZ2UsIF8ucmFuZ2VSaWdodFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnJhbmdlKDQpO1xuICAgICAqIC8vID0+IFswLCAxLCAyLCAzXVxuICAgICAqXG4gICAgICogXy5yYW5nZSgtNCk7XG4gICAgICogLy8gPT4gWzAsIC0xLCAtMiwgLTNdXG4gICAgICpcbiAgICAgKiBfLnJhbmdlKDEsIDUpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzLCA0XVxuICAgICAqXG4gICAgICogXy5yYW5nZSgwLCAyMCwgNSk7XG4gICAgICogLy8gPT4gWzAsIDUsIDEwLCAxNV1cbiAgICAgKlxuICAgICAqIF8ucmFuZ2UoMCwgLTQsIC0xKTtcbiAgICAgKiAvLyA9PiBbMCwgLTEsIC0yLCAtM11cbiAgICAgKlxuICAgICAqIF8ucmFuZ2UoMSwgNCwgMCk7XG4gICAgICogLy8gPT4gWzEsIDEsIDFdXG4gICAgICpcbiAgICAgKiBfLnJhbmdlKDApO1xuICAgICAqIC8vID0+IFtdXG4gICAgICovXG4gICAgdmFyIHJhbmdlID0gY3JlYXRlUmFuZ2UoKTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8ucmFuZ2VgIGV4Y2VwdCB0aGF0IGl0IHBvcHVsYXRlcyB2YWx1ZXMgaW5cbiAgICAgKiBkZXNjZW5kaW5nIG9yZGVyLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3N0YXJ0PTBdIFRoZSBzdGFydCBvZiB0aGUgcmFuZ2UuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGVuZCBUaGUgZW5kIG9mIHRoZSByYW5nZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3N0ZXA9MV0gVGhlIHZhbHVlIHRvIGluY3JlbWVudCBvciBkZWNyZW1lbnQgYnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSByYW5nZSBvZiBudW1iZXJzLlxuICAgICAqIEBzZWUgXy5pblJhbmdlLCBfLnJhbmdlXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ucmFuZ2VSaWdodCg0KTtcbiAgICAgKiAvLyA9PiBbMywgMiwgMSwgMF1cbiAgICAgKlxuICAgICAqIF8ucmFuZ2VSaWdodCgtNCk7XG4gICAgICogLy8gPT4gWy0zLCAtMiwgLTEsIDBdXG4gICAgICpcbiAgICAgKiBfLnJhbmdlUmlnaHQoMSwgNSk7XG4gICAgICogLy8gPT4gWzQsIDMsIDIsIDFdXG4gICAgICpcbiAgICAgKiBfLnJhbmdlUmlnaHQoMCwgMjAsIDUpO1xuICAgICAqIC8vID0+IFsxNSwgMTAsIDUsIDBdXG4gICAgICpcbiAgICAgKiBfLnJhbmdlUmlnaHQoMCwgLTQsIC0xKTtcbiAgICAgKiAvLyA9PiBbLTMsIC0yLCAtMSwgMF1cbiAgICAgKlxuICAgICAqIF8ucmFuZ2VSaWdodCgxLCA0LCAwKTtcbiAgICAgKiAvLyA9PiBbMSwgMSwgMV1cbiAgICAgKlxuICAgICAqIF8ucmFuZ2VSaWdodCgwKTtcbiAgICAgKiAvLyA9PiBbXVxuICAgICAqL1xuICAgIHZhciByYW5nZVJpZ2h0ID0gY3JlYXRlUmFuZ2UodHJ1ZSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCByZXR1cm5zIGEgbmV3IGVtcHR5IGFycmF5LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMTMuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZW1wdHkgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheXMgPSBfLnRpbWVzKDIsIF8uc3R1YkFycmF5KTtcbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKGFycmF5cyk7XG4gICAgICogLy8gPT4gW1tdLCBbXV1cbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKGFycmF5c1swXSA9PT0gYXJyYXlzWzFdKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHN0dWJBcnJheSgpIHtcbiAgICAgIHJldHVybiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCByZXR1cm5zIGBmYWxzZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4xMy4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRpbWVzKDIsIF8uc3R1YkZhbHNlKTtcbiAgICAgKiAvLyA9PiBbZmFsc2UsIGZhbHNlXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHN0dWJGYWxzZSgpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCByZXR1cm5zIGEgbmV3IGVtcHR5IG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjEzLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBlbXB0eSBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gXy50aW1lcygyLCBfLnN0dWJPYmplY3QpO1xuICAgICAqXG4gICAgICogY29uc29sZS5sb2cob2JqZWN0cyk7XG4gICAgICogLy8gPT4gW3t9LCB7fV1cbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKG9iamVjdHNbMF0gPT09IG9iamVjdHNbMV0pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gc3R1Yk9iamVjdCgpIHtcbiAgICAgIHJldHVybiB7fTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCByZXR1cm5zIGFuIGVtcHR5IHN0cmluZy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjEzLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGVtcHR5IHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50aW1lcygyLCBfLnN0dWJTdHJpbmcpO1xuICAgICAqIC8vID0+IFsnJywgJyddXG4gICAgICovXG4gICAgZnVuY3Rpb24gc3R1YlN0cmluZygpIHtcbiAgICAgIHJldHVybiAnJztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCByZXR1cm5zIGB0cnVlYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjEzLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50aW1lcygyLCBfLnN0dWJUcnVlKTtcbiAgICAgKiAvLyA9PiBbdHJ1ZSwgdHJ1ZV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzdHViVHJ1ZSgpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEludm9rZXMgdGhlIGl0ZXJhdGVlIGBuYCB0aW1lcywgcmV0dXJuaW5nIGFuIGFycmF5IG9mIHRoZSByZXN1bHRzIG9mXG4gICAgICogZWFjaCBpbnZvY2F0aW9uLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDsgKGluZGV4KS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG4gVGhlIG51bWJlciBvZiB0aW1lcyB0byBpbnZva2UgYGl0ZXJhdGVlYC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHJlc3VsdHMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udGltZXMoMywgU3RyaW5nKTtcbiAgICAgKiAvLyA9PiBbJzAnLCAnMScsICcyJ11cbiAgICAgKlxuICAgICAqICBfLnRpbWVzKDQsIF8uY29uc3RhbnQoMCkpO1xuICAgICAqIC8vID0+IFswLCAwLCAwLCAwXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRpbWVzKG4sIGl0ZXJhdGVlKSB7XG4gICAgICBuID0gdG9JbnRlZ2VyKG4pO1xuICAgICAgaWYgKG4gPCAxIHx8IG4gPiBNQVhfU0FGRV9JTlRFR0VSKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIHZhciBpbmRleCA9IE1BWF9BUlJBWV9MRU5HVEgsXG4gICAgICAgICAgbGVuZ3RoID0gbmF0aXZlTWluKG4sIE1BWF9BUlJBWV9MRU5HVEgpO1xuXG4gICAgICBpdGVyYXRlZSA9IGdldEl0ZXJhdGVlKGl0ZXJhdGVlKTtcbiAgICAgIG4gLT0gTUFYX0FSUkFZX0xFTkdUSDtcblxuICAgICAgdmFyIHJlc3VsdCA9IGJhc2VUaW1lcyhsZW5ndGgsIGl0ZXJhdGVlKTtcbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbikge1xuICAgICAgICBpdGVyYXRlZShpbmRleCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBwcm9wZXJ0eSBwYXRoIGFycmF5LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IHByb3BlcnR5IHBhdGggYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udG9QYXRoKCdhLmIuYycpO1xuICAgICAqIC8vID0+IFsnYScsICdiJywgJ2MnXVxuICAgICAqXG4gICAgICogXy50b1BhdGgoJ2FbMF0uYi5jJyk7XG4gICAgICogLy8gPT4gWydhJywgJzAnLCAnYicsICdjJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0b1BhdGgodmFsdWUpIHtcbiAgICAgIGlmIChpc0FycmF5KHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gYXJyYXlNYXAodmFsdWUsIHRvS2V5KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBpc1N5bWJvbCh2YWx1ZSkgPyBbdmFsdWVdIDogY29weUFycmF5KHN0cmluZ1RvUGF0aCh0b1N0cmluZyh2YWx1ZSkpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZW5lcmF0ZXMgYSB1bmlxdWUgSUQuIElmIGBwcmVmaXhgIGlzIGdpdmVuLCB0aGUgSUQgaXMgYXBwZW5kZWQgdG8gaXQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbcHJlZml4PScnXSBUaGUgdmFsdWUgdG8gcHJlZml4IHRoZSBJRCB3aXRoLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHVuaXF1ZSBJRC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy51bmlxdWVJZCgnY29udGFjdF8nKTtcbiAgICAgKiAvLyA9PiAnY29udGFjdF8xMDQnXG4gICAgICpcbiAgICAgKiBfLnVuaXF1ZUlkKCk7XG4gICAgICogLy8gPT4gJzEwNSdcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB1bmlxdWVJZChwcmVmaXgpIHtcbiAgICAgIHZhciBpZCA9ICsraWRDb3VudGVyO1xuICAgICAgcmV0dXJuIHRvU3RyaW5nKHByZWZpeCkgKyBpZDtcbiAgICB9XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBBZGRzIHR3byBudW1iZXJzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuNC4wXG4gICAgICogQGNhdGVnb3J5IE1hdGhcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYXVnZW5kIFRoZSBmaXJzdCBudW1iZXIgaW4gYW4gYWRkaXRpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGFkZGVuZCBUaGUgc2Vjb25kIG51bWJlciBpbiBhbiBhZGRpdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSB0b3RhbC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5hZGQoNiwgNCk7XG4gICAgICogLy8gPT4gMTBcbiAgICAgKi9cbiAgICB2YXIgYWRkID0gY3JlYXRlTWF0aE9wZXJhdGlvbihmdW5jdGlvbihhdWdlbmQsIGFkZGVuZCkge1xuICAgICAgcmV0dXJuIGF1Z2VuZCArIGFkZGVuZDtcbiAgICB9LCAwKTtcblxuICAgIC8qKlxuICAgICAqIENvbXB1dGVzIGBudW1iZXJgIHJvdW5kZWQgdXAgdG8gYHByZWNpc2lvbmAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4xMC4wXG4gICAgICogQGNhdGVnb3J5IE1hdGhcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbnVtYmVyIFRoZSBudW1iZXIgdG8gcm91bmQgdXAuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtwcmVjaXNpb249MF0gVGhlIHByZWNpc2lvbiB0byByb3VuZCB1cCB0by5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSByb3VuZGVkIHVwIG51bWJlci5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5jZWlsKDQuMDA2KTtcbiAgICAgKiAvLyA9PiA1XG4gICAgICpcbiAgICAgKiBfLmNlaWwoNi4wMDQsIDIpO1xuICAgICAqIC8vID0+IDYuMDFcbiAgICAgKlxuICAgICAqIF8uY2VpbCg2MDQwLCAtMik7XG4gICAgICogLy8gPT4gNjEwMFxuICAgICAqL1xuICAgIHZhciBjZWlsID0gY3JlYXRlUm91bmQoJ2NlaWwnKTtcblxuICAgIC8qKlxuICAgICAqIERpdmlkZSB0d28gbnVtYmVycy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjcuMFxuICAgICAqIEBjYXRlZ29yeSBNYXRoXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGRpdmlkZW5kIFRoZSBmaXJzdCBudW1iZXIgaW4gYSBkaXZpc2lvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gZGl2aXNvciBUaGUgc2Vjb25kIG51bWJlciBpbiBhIGRpdmlzaW9uLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHF1b3RpZW50LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmRpdmlkZSg2LCA0KTtcbiAgICAgKiAvLyA9PiAxLjVcbiAgICAgKi9cbiAgICB2YXIgZGl2aWRlID0gY3JlYXRlTWF0aE9wZXJhdGlvbihmdW5jdGlvbihkaXZpZGVuZCwgZGl2aXNvcikge1xuICAgICAgcmV0dXJuIGRpdmlkZW5kIC8gZGl2aXNvcjtcbiAgICB9LCAxKTtcblxuICAgIC8qKlxuICAgICAqIENvbXB1dGVzIGBudW1iZXJgIHJvdW5kZWQgZG93biB0byBgcHJlY2lzaW9uYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjEwLjBcbiAgICAgKiBAY2F0ZWdvcnkgTWF0aFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBudW1iZXIgVGhlIG51bWJlciB0byByb3VuZCBkb3duLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbcHJlY2lzaW9uPTBdIFRoZSBwcmVjaXNpb24gdG8gcm91bmQgZG93biB0by5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSByb3VuZGVkIGRvd24gbnVtYmVyLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmZsb29yKDQuMDA2KTtcbiAgICAgKiAvLyA9PiA0XG4gICAgICpcbiAgICAgKiBfLmZsb29yKDAuMDQ2LCAyKTtcbiAgICAgKiAvLyA9PiAwLjA0XG4gICAgICpcbiAgICAgKiBfLmZsb29yKDQwNjAsIC0yKTtcbiAgICAgKiAvLyA9PiA0MDAwXG4gICAgICovXG4gICAgdmFyIGZsb29yID0gY3JlYXRlUm91bmQoJ2Zsb29yJyk7XG5cbiAgICAvKipcbiAgICAgKiBDb21wdXRlcyB0aGUgbWF4aW11bSB2YWx1ZSBvZiBgYXJyYXlgLiBJZiBgYXJyYXlgIGlzIGVtcHR5IG9yIGZhbHNleSxcbiAgICAgKiBgdW5kZWZpbmVkYCBpcyByZXR1cm5lZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBNYXRoXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgbWF4aW11bSB2YWx1ZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5tYXgoWzQsIDIsIDgsIDZdKTtcbiAgICAgKiAvLyA9PiA4XG4gICAgICpcbiAgICAgKiBfLm1heChbXSk7XG4gICAgICogLy8gPT4gdW5kZWZpbmVkXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWF4KGFycmF5KSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aClcbiAgICAgICAgPyBiYXNlRXh0cmVtdW0oYXJyYXksIGlkZW50aXR5LCBiYXNlR3QpXG4gICAgICAgIDogdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8ubWF4YCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBpdGVyYXRlZWAgd2hpY2ggaXNcbiAgICAgKiBpbnZva2VkIGZvciBlYWNoIGVsZW1lbnQgaW4gYGFycmF5YCB0byBnZW5lcmF0ZSB0aGUgY3JpdGVyaW9uIGJ5IHdoaWNoXG4gICAgICogdGhlIHZhbHVlIGlzIHJhbmtlZC4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTWF0aFxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBtYXhpbXVtIHZhbHVlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFt7ICduJzogMSB9LCB7ICduJzogMiB9XTtcbiAgICAgKlxuICAgICAqIF8ubWF4Qnkob2JqZWN0cywgZnVuY3Rpb24obykgeyByZXR1cm4gby5uOyB9KTtcbiAgICAgKiAvLyA9PiB7ICduJzogMiB9XG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLm1heEJ5KG9iamVjdHMsICduJyk7XG4gICAgICogLy8gPT4geyAnbic6IDIgfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1heEJ5KGFycmF5LCBpdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpXG4gICAgICAgID8gYmFzZUV4dHJlbXVtKGFycmF5LCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMiksIGJhc2VHdClcbiAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29tcHV0ZXMgdGhlIG1lYW4gb2YgdGhlIHZhbHVlcyBpbiBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IE1hdGhcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIG1lYW4uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ubWVhbihbNCwgMiwgOCwgNl0pO1xuICAgICAqIC8vID0+IDVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtZWFuKGFycmF5KSB7XG4gICAgICByZXR1cm4gYmFzZU1lYW4oYXJyYXksIGlkZW50aXR5KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLm1lYW5gIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGl0ZXJhdGVlYCB3aGljaCBpc1xuICAgICAqIGludm9rZWQgZm9yIGVhY2ggZWxlbWVudCBpbiBgYXJyYXlgIHRvIGdlbmVyYXRlIHRoZSB2YWx1ZSB0byBiZSBhdmVyYWdlZC5cbiAgICAgKiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjcuMFxuICAgICAqIEBjYXRlZ29yeSBNYXRoXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgbWVhbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbeyAnbic6IDQgfSwgeyAnbic6IDIgfSwgeyAnbic6IDggfSwgeyAnbic6IDYgfV07XG4gICAgICpcbiAgICAgKiBfLm1lYW5CeShvYmplY3RzLCBmdW5jdGlvbihvKSB7IHJldHVybiBvLm47IH0pO1xuICAgICAqIC8vID0+IDVcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8ubWVhbkJ5KG9iamVjdHMsICduJyk7XG4gICAgICogLy8gPT4gNVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1lYW5CeShhcnJheSwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiBiYXNlTWVhbihhcnJheSwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDIpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb21wdXRlcyB0aGUgbWluaW11bSB2YWx1ZSBvZiBgYXJyYXlgLiBJZiBgYXJyYXlgIGlzIGVtcHR5IG9yIGZhbHNleSxcbiAgICAgKiBgdW5kZWZpbmVkYCBpcyByZXR1cm5lZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBNYXRoXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgbWluaW11bSB2YWx1ZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5taW4oWzQsIDIsIDgsIDZdKTtcbiAgICAgKiAvLyA9PiAyXG4gICAgICpcbiAgICAgKiBfLm1pbihbXSk7XG4gICAgICogLy8gPT4gdW5kZWZpbmVkXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWluKGFycmF5KSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aClcbiAgICAgICAgPyBiYXNlRXh0cmVtdW0oYXJyYXksIGlkZW50aXR5LCBiYXNlTHQpXG4gICAgICAgIDogdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8ubWluYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBpdGVyYXRlZWAgd2hpY2ggaXNcbiAgICAgKiBpbnZva2VkIGZvciBlYWNoIGVsZW1lbnQgaW4gYGFycmF5YCB0byBnZW5lcmF0ZSB0aGUgY3JpdGVyaW9uIGJ5IHdoaWNoXG4gICAgICogdGhlIHZhbHVlIGlzIHJhbmtlZC4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTWF0aFxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBtaW5pbXVtIHZhbHVlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFt7ICduJzogMSB9LCB7ICduJzogMiB9XTtcbiAgICAgKlxuICAgICAqIF8ubWluQnkob2JqZWN0cywgZnVuY3Rpb24obykgeyByZXR1cm4gby5uOyB9KTtcbiAgICAgKiAvLyA9PiB7ICduJzogMSB9XG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLm1pbkJ5KG9iamVjdHMsICduJyk7XG4gICAgICogLy8gPT4geyAnbic6IDEgfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1pbkJ5KGFycmF5LCBpdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpXG4gICAgICAgID8gYmFzZUV4dHJlbXVtKGFycmF5LCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMiksIGJhc2VMdClcbiAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogTXVsdGlwbHkgdHdvIG51bWJlcnMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC43LjBcbiAgICAgKiBAY2F0ZWdvcnkgTWF0aFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBtdWx0aXBsaWVyIFRoZSBmaXJzdCBudW1iZXIgaW4gYSBtdWx0aXBsaWNhdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbXVsdGlwbGljYW5kIFRoZSBzZWNvbmQgbnVtYmVyIGluIGEgbXVsdGlwbGljYXRpb24uXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgcHJvZHVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5tdWx0aXBseSg2LCA0KTtcbiAgICAgKiAvLyA9PiAyNFxuICAgICAqL1xuICAgIHZhciBtdWx0aXBseSA9IGNyZWF0ZU1hdGhPcGVyYXRpb24oZnVuY3Rpb24obXVsdGlwbGllciwgbXVsdGlwbGljYW5kKSB7XG4gICAgICByZXR1cm4gbXVsdGlwbGllciAqIG11bHRpcGxpY2FuZDtcbiAgICB9LCAxKTtcblxuICAgIC8qKlxuICAgICAqIENvbXB1dGVzIGBudW1iZXJgIHJvdW5kZWQgdG8gYHByZWNpc2lvbmAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4xMC4wXG4gICAgICogQGNhdGVnb3J5IE1hdGhcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbnVtYmVyIFRoZSBudW1iZXIgdG8gcm91bmQuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtwcmVjaXNpb249MF0gVGhlIHByZWNpc2lvbiB0byByb3VuZCB0by5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSByb3VuZGVkIG51bWJlci5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5yb3VuZCg0LjAwNik7XG4gICAgICogLy8gPT4gNFxuICAgICAqXG4gICAgICogXy5yb3VuZCg0LjAwNiwgMik7XG4gICAgICogLy8gPT4gNC4wMVxuICAgICAqXG4gICAgICogXy5yb3VuZCg0MDYwLCAtMik7XG4gICAgICogLy8gPT4gNDEwMFxuICAgICAqL1xuICAgIHZhciByb3VuZCA9IGNyZWF0ZVJvdW5kKCdyb3VuZCcpO1xuXG4gICAgLyoqXG4gICAgICogU3VidHJhY3QgdHdvIG51bWJlcnMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTWF0aFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBtaW51ZW5kIFRoZSBmaXJzdCBudW1iZXIgaW4gYSBzdWJ0cmFjdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gc3VidHJhaGVuZCBUaGUgc2Vjb25kIG51bWJlciBpbiBhIHN1YnRyYWN0aW9uLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGRpZmZlcmVuY2UuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc3VidHJhY3QoNiwgNCk7XG4gICAgICogLy8gPT4gMlxuICAgICAqL1xuICAgIHZhciBzdWJ0cmFjdCA9IGNyZWF0ZU1hdGhPcGVyYXRpb24oZnVuY3Rpb24obWludWVuZCwgc3VidHJhaGVuZCkge1xuICAgICAgcmV0dXJuIG1pbnVlbmQgLSBzdWJ0cmFoZW5kO1xuICAgIH0sIDApO1xuXG4gICAgLyoqXG4gICAgICogQ29tcHV0ZXMgdGhlIHN1bSBvZiB0aGUgdmFsdWVzIGluIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy40LjBcbiAgICAgKiBAY2F0ZWdvcnkgTWF0aFxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgc3VtLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnN1bShbNCwgMiwgOCwgNl0pO1xuICAgICAqIC8vID0+IDIwXG4gICAgICovXG4gICAgZnVuY3Rpb24gc3VtKGFycmF5KSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aClcbiAgICAgICAgPyBiYXNlU3VtKGFycmF5LCBpZGVudGl0eSlcbiAgICAgICAgOiAwO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uc3VtYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBpdGVyYXRlZWAgd2hpY2ggaXNcbiAgICAgKiBpbnZva2VkIGZvciBlYWNoIGVsZW1lbnQgaW4gYGFycmF5YCB0byBnZW5lcmF0ZSB0aGUgdmFsdWUgdG8gYmUgc3VtbWVkLlxuICAgICAqIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OiAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IE1hdGhcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBzdW0uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW3sgJ24nOiA0IH0sIHsgJ24nOiAyIH0sIHsgJ24nOiA4IH0sIHsgJ24nOiA2IH1dO1xuICAgICAqXG4gICAgICogXy5zdW1CeShvYmplY3RzLCBmdW5jdGlvbihvKSB7IHJldHVybiBvLm47IH0pO1xuICAgICAqIC8vID0+IDIwXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnN1bUJ5KG9iamVjdHMsICduJyk7XG4gICAgICogLy8gPT4gMjBcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzdW1CeShhcnJheSwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKVxuICAgICAgICA/IGJhc2VTdW0oYXJyYXksIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAyKSlcbiAgICAgICAgOiAwO1xuICAgIH1cblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8vIEFkZCBtZXRob2RzIHRoYXQgcmV0dXJuIHdyYXBwZWQgdmFsdWVzIGluIGNoYWluIHNlcXVlbmNlcy5cbiAgICBsb2Rhc2guYWZ0ZXIgPSBhZnRlcjtcbiAgICBsb2Rhc2guYXJ5ID0gYXJ5O1xuICAgIGxvZGFzaC5hc3NpZ24gPSBhc3NpZ247XG4gICAgbG9kYXNoLmFzc2lnbkluID0gYXNzaWduSW47XG4gICAgbG9kYXNoLmFzc2lnbkluV2l0aCA9IGFzc2lnbkluV2l0aDtcbiAgICBsb2Rhc2guYXNzaWduV2l0aCA9IGFzc2lnbldpdGg7XG4gICAgbG9kYXNoLmF0ID0gYXQ7XG4gICAgbG9kYXNoLmJlZm9yZSA9IGJlZm9yZTtcbiAgICBsb2Rhc2guYmluZCA9IGJpbmQ7XG4gICAgbG9kYXNoLmJpbmRBbGwgPSBiaW5kQWxsO1xuICAgIGxvZGFzaC5iaW5kS2V5ID0gYmluZEtleTtcbiAgICBsb2Rhc2guY2FzdEFycmF5ID0gY2FzdEFycmF5O1xuICAgIGxvZGFzaC5jaGFpbiA9IGNoYWluO1xuICAgIGxvZGFzaC5jaHVuayA9IGNodW5rO1xuICAgIGxvZGFzaC5jb21wYWN0ID0gY29tcGFjdDtcbiAgICBsb2Rhc2guY29uY2F0ID0gY29uY2F0O1xuICAgIGxvZGFzaC5jb25kID0gY29uZDtcbiAgICBsb2Rhc2guY29uZm9ybXMgPSBjb25mb3JtcztcbiAgICBsb2Rhc2guY29uc3RhbnQgPSBjb25zdGFudDtcbiAgICBsb2Rhc2guY291bnRCeSA9IGNvdW50Qnk7XG4gICAgbG9kYXNoLmNyZWF0ZSA9IGNyZWF0ZTtcbiAgICBsb2Rhc2guY3VycnkgPSBjdXJyeTtcbiAgICBsb2Rhc2guY3VycnlSaWdodCA9IGN1cnJ5UmlnaHQ7XG4gICAgbG9kYXNoLmRlYm91bmNlID0gZGVib3VuY2U7XG4gICAgbG9kYXNoLmRlZmF1bHRzID0gZGVmYXVsdHM7XG4gICAgbG9kYXNoLmRlZmF1bHRzRGVlcCA9IGRlZmF1bHRzRGVlcDtcbiAgICBsb2Rhc2guZGVmZXIgPSBkZWZlcjtcbiAgICBsb2Rhc2guZGVsYXkgPSBkZWxheTtcbiAgICBsb2Rhc2guZGlmZmVyZW5jZSA9IGRpZmZlcmVuY2U7XG4gICAgbG9kYXNoLmRpZmZlcmVuY2VCeSA9IGRpZmZlcmVuY2VCeTtcbiAgICBsb2Rhc2guZGlmZmVyZW5jZVdpdGggPSBkaWZmZXJlbmNlV2l0aDtcbiAgICBsb2Rhc2guZHJvcCA9IGRyb3A7XG4gICAgbG9kYXNoLmRyb3BSaWdodCA9IGRyb3BSaWdodDtcbiAgICBsb2Rhc2guZHJvcFJpZ2h0V2hpbGUgPSBkcm9wUmlnaHRXaGlsZTtcbiAgICBsb2Rhc2guZHJvcFdoaWxlID0gZHJvcFdoaWxlO1xuICAgIGxvZGFzaC5maWxsID0gZmlsbDtcbiAgICBsb2Rhc2guZmlsdGVyID0gZmlsdGVyO1xuICAgIGxvZGFzaC5mbGF0TWFwID0gZmxhdE1hcDtcbiAgICBsb2Rhc2guZmxhdE1hcERlZXAgPSBmbGF0TWFwRGVlcDtcbiAgICBsb2Rhc2guZmxhdE1hcERlcHRoID0gZmxhdE1hcERlcHRoO1xuICAgIGxvZGFzaC5mbGF0dGVuID0gZmxhdHRlbjtcbiAgICBsb2Rhc2guZmxhdHRlbkRlZXAgPSBmbGF0dGVuRGVlcDtcbiAgICBsb2Rhc2guZmxhdHRlbkRlcHRoID0gZmxhdHRlbkRlcHRoO1xuICAgIGxvZGFzaC5mbGlwID0gZmxpcDtcbiAgICBsb2Rhc2guZmxvdyA9IGZsb3c7XG4gICAgbG9kYXNoLmZsb3dSaWdodCA9IGZsb3dSaWdodDtcbiAgICBsb2Rhc2guZnJvbVBhaXJzID0gZnJvbVBhaXJzO1xuICAgIGxvZGFzaC5mdW5jdGlvbnMgPSBmdW5jdGlvbnM7XG4gICAgbG9kYXNoLmZ1bmN0aW9uc0luID0gZnVuY3Rpb25zSW47XG4gICAgbG9kYXNoLmdyb3VwQnkgPSBncm91cEJ5O1xuICAgIGxvZGFzaC5pbml0aWFsID0gaW5pdGlhbDtcbiAgICBsb2Rhc2guaW50ZXJzZWN0aW9uID0gaW50ZXJzZWN0aW9uO1xuICAgIGxvZGFzaC5pbnRlcnNlY3Rpb25CeSA9IGludGVyc2VjdGlvbkJ5O1xuICAgIGxvZGFzaC5pbnRlcnNlY3Rpb25XaXRoID0gaW50ZXJzZWN0aW9uV2l0aDtcbiAgICBsb2Rhc2guaW52ZXJ0ID0gaW52ZXJ0O1xuICAgIGxvZGFzaC5pbnZlcnRCeSA9IGludmVydEJ5O1xuICAgIGxvZGFzaC5pbnZva2VNYXAgPSBpbnZva2VNYXA7XG4gICAgbG9kYXNoLml0ZXJhdGVlID0gaXRlcmF0ZWU7XG4gICAgbG9kYXNoLmtleUJ5ID0ga2V5Qnk7XG4gICAgbG9kYXNoLmtleXMgPSBrZXlzO1xuICAgIGxvZGFzaC5rZXlzSW4gPSBrZXlzSW47XG4gICAgbG9kYXNoLm1hcCA9IG1hcDtcbiAgICBsb2Rhc2gubWFwS2V5cyA9IG1hcEtleXM7XG4gICAgbG9kYXNoLm1hcFZhbHVlcyA9IG1hcFZhbHVlcztcbiAgICBsb2Rhc2gubWF0Y2hlcyA9IG1hdGNoZXM7XG4gICAgbG9kYXNoLm1hdGNoZXNQcm9wZXJ0eSA9IG1hdGNoZXNQcm9wZXJ0eTtcbiAgICBsb2Rhc2gubWVtb2l6ZSA9IG1lbW9pemU7XG4gICAgbG9kYXNoLm1lcmdlID0gbWVyZ2U7XG4gICAgbG9kYXNoLm1lcmdlV2l0aCA9IG1lcmdlV2l0aDtcbiAgICBsb2Rhc2gubWV0aG9kID0gbWV0aG9kO1xuICAgIGxvZGFzaC5tZXRob2RPZiA9IG1ldGhvZE9mO1xuICAgIGxvZGFzaC5taXhpbiA9IG1peGluO1xuICAgIGxvZGFzaC5uZWdhdGUgPSBuZWdhdGU7XG4gICAgbG9kYXNoLm50aEFyZyA9IG50aEFyZztcbiAgICBsb2Rhc2gub21pdCA9IG9taXQ7XG4gICAgbG9kYXNoLm9taXRCeSA9IG9taXRCeTtcbiAgICBsb2Rhc2gub25jZSA9IG9uY2U7XG4gICAgbG9kYXNoLm9yZGVyQnkgPSBvcmRlckJ5O1xuICAgIGxvZGFzaC5vdmVyID0gb3ZlcjtcbiAgICBsb2Rhc2gub3ZlckFyZ3MgPSBvdmVyQXJncztcbiAgICBsb2Rhc2gub3ZlckV2ZXJ5ID0gb3ZlckV2ZXJ5O1xuICAgIGxvZGFzaC5vdmVyU29tZSA9IG92ZXJTb21lO1xuICAgIGxvZGFzaC5wYXJ0aWFsID0gcGFydGlhbDtcbiAgICBsb2Rhc2gucGFydGlhbFJpZ2h0ID0gcGFydGlhbFJpZ2h0O1xuICAgIGxvZGFzaC5wYXJ0aXRpb24gPSBwYXJ0aXRpb247XG4gICAgbG9kYXNoLnBpY2sgPSBwaWNrO1xuICAgIGxvZGFzaC5waWNrQnkgPSBwaWNrQnk7XG4gICAgbG9kYXNoLnByb3BlcnR5ID0gcHJvcGVydHk7XG4gICAgbG9kYXNoLnByb3BlcnR5T2YgPSBwcm9wZXJ0eU9mO1xuICAgIGxvZGFzaC5wdWxsID0gcHVsbDtcbiAgICBsb2Rhc2gucHVsbEFsbCA9IHB1bGxBbGw7XG4gICAgbG9kYXNoLnB1bGxBbGxCeSA9IHB1bGxBbGxCeTtcbiAgICBsb2Rhc2gucHVsbEFsbFdpdGggPSBwdWxsQWxsV2l0aDtcbiAgICBsb2Rhc2gucHVsbEF0ID0gcHVsbEF0O1xuICAgIGxvZGFzaC5yYW5nZSA9IHJhbmdlO1xuICAgIGxvZGFzaC5yYW5nZVJpZ2h0ID0gcmFuZ2VSaWdodDtcbiAgICBsb2Rhc2gucmVhcmcgPSByZWFyZztcbiAgICBsb2Rhc2gucmVqZWN0ID0gcmVqZWN0O1xuICAgIGxvZGFzaC5yZW1vdmUgPSByZW1vdmU7XG4gICAgbG9kYXNoLnJlc3QgPSByZXN0O1xuICAgIGxvZGFzaC5yZXZlcnNlID0gcmV2ZXJzZTtcbiAgICBsb2Rhc2guc2FtcGxlU2l6ZSA9IHNhbXBsZVNpemU7XG4gICAgbG9kYXNoLnNldCA9IHNldDtcbiAgICBsb2Rhc2guc2V0V2l0aCA9IHNldFdpdGg7XG4gICAgbG9kYXNoLnNodWZmbGUgPSBzaHVmZmxlO1xuICAgIGxvZGFzaC5zbGljZSA9IHNsaWNlO1xuICAgIGxvZGFzaC5zb3J0QnkgPSBzb3J0Qnk7XG4gICAgbG9kYXNoLnNvcnRlZFVuaXEgPSBzb3J0ZWRVbmlxO1xuICAgIGxvZGFzaC5zb3J0ZWRVbmlxQnkgPSBzb3J0ZWRVbmlxQnk7XG4gICAgbG9kYXNoLnNwbGl0ID0gc3BsaXQ7XG4gICAgbG9kYXNoLnNwcmVhZCA9IHNwcmVhZDtcbiAgICBsb2Rhc2gudGFpbCA9IHRhaWw7XG4gICAgbG9kYXNoLnRha2UgPSB0YWtlO1xuICAgIGxvZGFzaC50YWtlUmlnaHQgPSB0YWtlUmlnaHQ7XG4gICAgbG9kYXNoLnRha2VSaWdodFdoaWxlID0gdGFrZVJpZ2h0V2hpbGU7XG4gICAgbG9kYXNoLnRha2VXaGlsZSA9IHRha2VXaGlsZTtcbiAgICBsb2Rhc2gudGFwID0gdGFwO1xuICAgIGxvZGFzaC50aHJvdHRsZSA9IHRocm90dGxlO1xuICAgIGxvZGFzaC50aHJ1ID0gdGhydTtcbiAgICBsb2Rhc2gudG9BcnJheSA9IHRvQXJyYXk7XG4gICAgbG9kYXNoLnRvUGFpcnMgPSB0b1BhaXJzO1xuICAgIGxvZGFzaC50b1BhaXJzSW4gPSB0b1BhaXJzSW47XG4gICAgbG9kYXNoLnRvUGF0aCA9IHRvUGF0aDtcbiAgICBsb2Rhc2gudG9QbGFpbk9iamVjdCA9IHRvUGxhaW5PYmplY3Q7XG4gICAgbG9kYXNoLnRyYW5zZm9ybSA9IHRyYW5zZm9ybTtcbiAgICBsb2Rhc2gudW5hcnkgPSB1bmFyeTtcbiAgICBsb2Rhc2gudW5pb24gPSB1bmlvbjtcbiAgICBsb2Rhc2gudW5pb25CeSA9IHVuaW9uQnk7XG4gICAgbG9kYXNoLnVuaW9uV2l0aCA9IHVuaW9uV2l0aDtcbiAgICBsb2Rhc2gudW5pcSA9IHVuaXE7XG4gICAgbG9kYXNoLnVuaXFCeSA9IHVuaXFCeTtcbiAgICBsb2Rhc2gudW5pcVdpdGggPSB1bmlxV2l0aDtcbiAgICBsb2Rhc2gudW5zZXQgPSB1bnNldDtcbiAgICBsb2Rhc2gudW56aXAgPSB1bnppcDtcbiAgICBsb2Rhc2gudW56aXBXaXRoID0gdW56aXBXaXRoO1xuICAgIGxvZGFzaC51cGRhdGUgPSB1cGRhdGU7XG4gICAgbG9kYXNoLnVwZGF0ZVdpdGggPSB1cGRhdGVXaXRoO1xuICAgIGxvZGFzaC52YWx1ZXMgPSB2YWx1ZXM7XG4gICAgbG9kYXNoLnZhbHVlc0luID0gdmFsdWVzSW47XG4gICAgbG9kYXNoLndpdGhvdXQgPSB3aXRob3V0O1xuICAgIGxvZGFzaC53b3JkcyA9IHdvcmRzO1xuICAgIGxvZGFzaC53cmFwID0gd3JhcDtcbiAgICBsb2Rhc2gueG9yID0geG9yO1xuICAgIGxvZGFzaC54b3JCeSA9IHhvckJ5O1xuICAgIGxvZGFzaC54b3JXaXRoID0geG9yV2l0aDtcbiAgICBsb2Rhc2guemlwID0gemlwO1xuICAgIGxvZGFzaC56aXBPYmplY3QgPSB6aXBPYmplY3Q7XG4gICAgbG9kYXNoLnppcE9iamVjdERlZXAgPSB6aXBPYmplY3REZWVwO1xuICAgIGxvZGFzaC56aXBXaXRoID0gemlwV2l0aDtcblxuICAgIC8vIEFkZCBhbGlhc2VzLlxuICAgIGxvZGFzaC5lbnRyaWVzID0gdG9QYWlycztcbiAgICBsb2Rhc2guZW50cmllc0luID0gdG9QYWlyc0luO1xuICAgIGxvZGFzaC5leHRlbmQgPSBhc3NpZ25JbjtcbiAgICBsb2Rhc2guZXh0ZW5kV2l0aCA9IGFzc2lnbkluV2l0aDtcblxuICAgIC8vIEFkZCBtZXRob2RzIHRvIGBsb2Rhc2gucHJvdG90eXBlYC5cbiAgICBtaXhpbihsb2Rhc2gsIGxvZGFzaCk7XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvLyBBZGQgbWV0aG9kcyB0aGF0IHJldHVybiB1bndyYXBwZWQgdmFsdWVzIGluIGNoYWluIHNlcXVlbmNlcy5cbiAgICBsb2Rhc2guYWRkID0gYWRkO1xuICAgIGxvZGFzaC5hdHRlbXB0ID0gYXR0ZW1wdDtcbiAgICBsb2Rhc2guY2FtZWxDYXNlID0gY2FtZWxDYXNlO1xuICAgIGxvZGFzaC5jYXBpdGFsaXplID0gY2FwaXRhbGl6ZTtcbiAgICBsb2Rhc2guY2VpbCA9IGNlaWw7XG4gICAgbG9kYXNoLmNsYW1wID0gY2xhbXA7XG4gICAgbG9kYXNoLmNsb25lID0gY2xvbmU7XG4gICAgbG9kYXNoLmNsb25lRGVlcCA9IGNsb25lRGVlcDtcbiAgICBsb2Rhc2guY2xvbmVEZWVwV2l0aCA9IGNsb25lRGVlcFdpdGg7XG4gICAgbG9kYXNoLmNsb25lV2l0aCA9IGNsb25lV2l0aDtcbiAgICBsb2Rhc2guY29uZm9ybXNUbyA9IGNvbmZvcm1zVG87XG4gICAgbG9kYXNoLmRlYnVyciA9IGRlYnVycjtcbiAgICBsb2Rhc2guZGVmYXVsdFRvID0gZGVmYXVsdFRvO1xuICAgIGxvZGFzaC5kaXZpZGUgPSBkaXZpZGU7XG4gICAgbG9kYXNoLmVuZHNXaXRoID0gZW5kc1dpdGg7XG4gICAgbG9kYXNoLmVxID0gZXE7XG4gICAgbG9kYXNoLmVzY2FwZSA9IGVzY2FwZTtcbiAgICBsb2Rhc2guZXNjYXBlUmVnRXhwID0gZXNjYXBlUmVnRXhwO1xuICAgIGxvZGFzaC5ldmVyeSA9IGV2ZXJ5O1xuICAgIGxvZGFzaC5maW5kID0gZmluZDtcbiAgICBsb2Rhc2guZmluZEluZGV4ID0gZmluZEluZGV4O1xuICAgIGxvZGFzaC5maW5kS2V5ID0gZmluZEtleTtcbiAgICBsb2Rhc2guZmluZExhc3QgPSBmaW5kTGFzdDtcbiAgICBsb2Rhc2guZmluZExhc3RJbmRleCA9IGZpbmRMYXN0SW5kZXg7XG4gICAgbG9kYXNoLmZpbmRMYXN0S2V5ID0gZmluZExhc3RLZXk7XG4gICAgbG9kYXNoLmZsb29yID0gZmxvb3I7XG4gICAgbG9kYXNoLmZvckVhY2ggPSBmb3JFYWNoO1xuICAgIGxvZGFzaC5mb3JFYWNoUmlnaHQgPSBmb3JFYWNoUmlnaHQ7XG4gICAgbG9kYXNoLmZvckluID0gZm9ySW47XG4gICAgbG9kYXNoLmZvckluUmlnaHQgPSBmb3JJblJpZ2h0O1xuICAgIGxvZGFzaC5mb3JPd24gPSBmb3JPd247XG4gICAgbG9kYXNoLmZvck93blJpZ2h0ID0gZm9yT3duUmlnaHQ7XG4gICAgbG9kYXNoLmdldCA9IGdldDtcbiAgICBsb2Rhc2guZ3QgPSBndDtcbiAgICBsb2Rhc2guZ3RlID0gZ3RlO1xuICAgIGxvZGFzaC5oYXMgPSBoYXM7XG4gICAgbG9kYXNoLmhhc0luID0gaGFzSW47XG4gICAgbG9kYXNoLmhlYWQgPSBoZWFkO1xuICAgIGxvZGFzaC5pZGVudGl0eSA9IGlkZW50aXR5O1xuICAgIGxvZGFzaC5pbmNsdWRlcyA9IGluY2x1ZGVzO1xuICAgIGxvZGFzaC5pbmRleE9mID0gaW5kZXhPZjtcbiAgICBsb2Rhc2guaW5SYW5nZSA9IGluUmFuZ2U7XG4gICAgbG9kYXNoLmludm9rZSA9IGludm9rZTtcbiAgICBsb2Rhc2guaXNBcmd1bWVudHMgPSBpc0FyZ3VtZW50cztcbiAgICBsb2Rhc2guaXNBcnJheSA9IGlzQXJyYXk7XG4gICAgbG9kYXNoLmlzQXJyYXlCdWZmZXIgPSBpc0FycmF5QnVmZmVyO1xuICAgIGxvZGFzaC5pc0FycmF5TGlrZSA9IGlzQXJyYXlMaWtlO1xuICAgIGxvZGFzaC5pc0FycmF5TGlrZU9iamVjdCA9IGlzQXJyYXlMaWtlT2JqZWN0O1xuICAgIGxvZGFzaC5pc0Jvb2xlYW4gPSBpc0Jvb2xlYW47XG4gICAgbG9kYXNoLmlzQnVmZmVyID0gaXNCdWZmZXI7XG4gICAgbG9kYXNoLmlzRGF0ZSA9IGlzRGF0ZTtcbiAgICBsb2Rhc2guaXNFbGVtZW50ID0gaXNFbGVtZW50O1xuICAgIGxvZGFzaC5pc0VtcHR5ID0gaXNFbXB0eTtcbiAgICBsb2Rhc2guaXNFcXVhbCA9IGlzRXF1YWw7XG4gICAgbG9kYXNoLmlzRXF1YWxXaXRoID0gaXNFcXVhbFdpdGg7XG4gICAgbG9kYXNoLmlzRXJyb3IgPSBpc0Vycm9yO1xuICAgIGxvZGFzaC5pc0Zpbml0ZSA9IGlzRmluaXRlO1xuICAgIGxvZGFzaC5pc0Z1bmN0aW9uID0gaXNGdW5jdGlvbjtcbiAgICBsb2Rhc2guaXNJbnRlZ2VyID0gaXNJbnRlZ2VyO1xuICAgIGxvZGFzaC5pc0xlbmd0aCA9IGlzTGVuZ3RoO1xuICAgIGxvZGFzaC5pc01hcCA9IGlzTWFwO1xuICAgIGxvZGFzaC5pc01hdGNoID0gaXNNYXRjaDtcbiAgICBsb2Rhc2guaXNNYXRjaFdpdGggPSBpc01hdGNoV2l0aDtcbiAgICBsb2Rhc2guaXNOYU4gPSBpc05hTjtcbiAgICBsb2Rhc2guaXNOYXRpdmUgPSBpc05hdGl2ZTtcbiAgICBsb2Rhc2guaXNOaWwgPSBpc05pbDtcbiAgICBsb2Rhc2guaXNOdWxsID0gaXNOdWxsO1xuICAgIGxvZGFzaC5pc051bWJlciA9IGlzTnVtYmVyO1xuICAgIGxvZGFzaC5pc09iamVjdCA9IGlzT2JqZWN0O1xuICAgIGxvZGFzaC5pc09iamVjdExpa2UgPSBpc09iamVjdExpa2U7XG4gICAgbG9kYXNoLmlzUGxhaW5PYmplY3QgPSBpc1BsYWluT2JqZWN0O1xuICAgIGxvZGFzaC5pc1JlZ0V4cCA9IGlzUmVnRXhwO1xuICAgIGxvZGFzaC5pc1NhZmVJbnRlZ2VyID0gaXNTYWZlSW50ZWdlcjtcbiAgICBsb2Rhc2guaXNTZXQgPSBpc1NldDtcbiAgICBsb2Rhc2guaXNTdHJpbmcgPSBpc1N0cmluZztcbiAgICBsb2Rhc2guaXNTeW1ib2wgPSBpc1N5bWJvbDtcbiAgICBsb2Rhc2guaXNUeXBlZEFycmF5ID0gaXNUeXBlZEFycmF5O1xuICAgIGxvZGFzaC5pc1VuZGVmaW5lZCA9IGlzVW5kZWZpbmVkO1xuICAgIGxvZGFzaC5pc1dlYWtNYXAgPSBpc1dlYWtNYXA7XG4gICAgbG9kYXNoLmlzV2Vha1NldCA9IGlzV2Vha1NldDtcbiAgICBsb2Rhc2guam9pbiA9IGpvaW47XG4gICAgbG9kYXNoLmtlYmFiQ2FzZSA9IGtlYmFiQ2FzZTtcbiAgICBsb2Rhc2gubGFzdCA9IGxhc3Q7XG4gICAgbG9kYXNoLmxhc3RJbmRleE9mID0gbGFzdEluZGV4T2Y7XG4gICAgbG9kYXNoLmxvd2VyQ2FzZSA9IGxvd2VyQ2FzZTtcbiAgICBsb2Rhc2gubG93ZXJGaXJzdCA9IGxvd2VyRmlyc3Q7XG4gICAgbG9kYXNoLmx0ID0gbHQ7XG4gICAgbG9kYXNoLmx0ZSA9IGx0ZTtcbiAgICBsb2Rhc2gubWF4ID0gbWF4O1xuICAgIGxvZGFzaC5tYXhCeSA9IG1heEJ5O1xuICAgIGxvZGFzaC5tZWFuID0gbWVhbjtcbiAgICBsb2Rhc2gubWVhbkJ5ID0gbWVhbkJ5O1xuICAgIGxvZGFzaC5taW4gPSBtaW47XG4gICAgbG9kYXNoLm1pbkJ5ID0gbWluQnk7XG4gICAgbG9kYXNoLnN0dWJBcnJheSA9IHN0dWJBcnJheTtcbiAgICBsb2Rhc2guc3R1YkZhbHNlID0gc3R1YkZhbHNlO1xuICAgIGxvZGFzaC5zdHViT2JqZWN0ID0gc3R1Yk9iamVjdDtcbiAgICBsb2Rhc2guc3R1YlN0cmluZyA9IHN0dWJTdHJpbmc7XG4gICAgbG9kYXNoLnN0dWJUcnVlID0gc3R1YlRydWU7XG4gICAgbG9kYXNoLm11bHRpcGx5ID0gbXVsdGlwbHk7XG4gICAgbG9kYXNoLm50aCA9IG50aDtcbiAgICBsb2Rhc2gubm9Db25mbGljdCA9IG5vQ29uZmxpY3Q7XG4gICAgbG9kYXNoLm5vb3AgPSBub29wO1xuICAgIGxvZGFzaC5ub3cgPSBub3c7XG4gICAgbG9kYXNoLnBhZCA9IHBhZDtcbiAgICBsb2Rhc2gucGFkRW5kID0gcGFkRW5kO1xuICAgIGxvZGFzaC5wYWRTdGFydCA9IHBhZFN0YXJ0O1xuICAgIGxvZGFzaC5wYXJzZUludCA9IHBhcnNlSW50O1xuICAgIGxvZGFzaC5yYW5kb20gPSByYW5kb207XG4gICAgbG9kYXNoLnJlZHVjZSA9IHJlZHVjZTtcbiAgICBsb2Rhc2gucmVkdWNlUmlnaHQgPSByZWR1Y2VSaWdodDtcbiAgICBsb2Rhc2gucmVwZWF0ID0gcmVwZWF0O1xuICAgIGxvZGFzaC5yZXBsYWNlID0gcmVwbGFjZTtcbiAgICBsb2Rhc2gucmVzdWx0ID0gcmVzdWx0O1xuICAgIGxvZGFzaC5yb3VuZCA9IHJvdW5kO1xuICAgIGxvZGFzaC5ydW5JbkNvbnRleHQgPSBydW5JbkNvbnRleHQ7XG4gICAgbG9kYXNoLnNhbXBsZSA9IHNhbXBsZTtcbiAgICBsb2Rhc2guc2l6ZSA9IHNpemU7XG4gICAgbG9kYXNoLnNuYWtlQ2FzZSA9IHNuYWtlQ2FzZTtcbiAgICBsb2Rhc2guc29tZSA9IHNvbWU7XG4gICAgbG9kYXNoLnNvcnRlZEluZGV4ID0gc29ydGVkSW5kZXg7XG4gICAgbG9kYXNoLnNvcnRlZEluZGV4QnkgPSBzb3J0ZWRJbmRleEJ5O1xuICAgIGxvZGFzaC5zb3J0ZWRJbmRleE9mID0gc29ydGVkSW5kZXhPZjtcbiAgICBsb2Rhc2guc29ydGVkTGFzdEluZGV4ID0gc29ydGVkTGFzdEluZGV4O1xuICAgIGxvZGFzaC5zb3J0ZWRMYXN0SW5kZXhCeSA9IHNvcnRlZExhc3RJbmRleEJ5O1xuICAgIGxvZGFzaC5zb3J0ZWRMYXN0SW5kZXhPZiA9IHNvcnRlZExhc3RJbmRleE9mO1xuICAgIGxvZGFzaC5zdGFydENhc2UgPSBzdGFydENhc2U7XG4gICAgbG9kYXNoLnN0YXJ0c1dpdGggPSBzdGFydHNXaXRoO1xuICAgIGxvZGFzaC5zdWJ0cmFjdCA9IHN1YnRyYWN0O1xuICAgIGxvZGFzaC5zdW0gPSBzdW07XG4gICAgbG9kYXNoLnN1bUJ5ID0gc3VtQnk7XG4gICAgbG9kYXNoLnRlbXBsYXRlID0gdGVtcGxhdGU7XG4gICAgbG9kYXNoLnRpbWVzID0gdGltZXM7XG4gICAgbG9kYXNoLnRvRmluaXRlID0gdG9GaW5pdGU7XG4gICAgbG9kYXNoLnRvSW50ZWdlciA9IHRvSW50ZWdlcjtcbiAgICBsb2Rhc2gudG9MZW5ndGggPSB0b0xlbmd0aDtcbiAgICBsb2Rhc2gudG9Mb3dlciA9IHRvTG93ZXI7XG4gICAgbG9kYXNoLnRvTnVtYmVyID0gdG9OdW1iZXI7XG4gICAgbG9kYXNoLnRvU2FmZUludGVnZXIgPSB0b1NhZmVJbnRlZ2VyO1xuICAgIGxvZGFzaC50b1N0cmluZyA9IHRvU3RyaW5nO1xuICAgIGxvZGFzaC50b1VwcGVyID0gdG9VcHBlcjtcbiAgICBsb2Rhc2gudHJpbSA9IHRyaW07XG4gICAgbG9kYXNoLnRyaW1FbmQgPSB0cmltRW5kO1xuICAgIGxvZGFzaC50cmltU3RhcnQgPSB0cmltU3RhcnQ7XG4gICAgbG9kYXNoLnRydW5jYXRlID0gdHJ1bmNhdGU7XG4gICAgbG9kYXNoLnVuZXNjYXBlID0gdW5lc2NhcGU7XG4gICAgbG9kYXNoLnVuaXF1ZUlkID0gdW5pcXVlSWQ7XG4gICAgbG9kYXNoLnVwcGVyQ2FzZSA9IHVwcGVyQ2FzZTtcbiAgICBsb2Rhc2gudXBwZXJGaXJzdCA9IHVwcGVyRmlyc3Q7XG5cbiAgICAvLyBBZGQgYWxpYXNlcy5cbiAgICBsb2Rhc2guZWFjaCA9IGZvckVhY2g7XG4gICAgbG9kYXNoLmVhY2hSaWdodCA9IGZvckVhY2hSaWdodDtcbiAgICBsb2Rhc2guZmlyc3QgPSBoZWFkO1xuXG4gICAgbWl4aW4obG9kYXNoLCAoZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgc291cmNlID0ge307XG4gICAgICBiYXNlRm9yT3duKGxvZGFzaCwgZnVuY3Rpb24oZnVuYywgbWV0aG9kTmFtZSkge1xuICAgICAgICBpZiAoIWhhc093blByb3BlcnR5LmNhbGwobG9kYXNoLnByb3RvdHlwZSwgbWV0aG9kTmFtZSkpIHtcbiAgICAgICAgICBzb3VyY2VbbWV0aG9kTmFtZV0gPSBmdW5jO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBzb3VyY2U7XG4gICAgfSgpKSwgeyAnY2hhaW4nOiBmYWxzZSB9KTtcblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIFRoZSBzZW1hbnRpYyB2ZXJzaW9uIG51bWJlci5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICovXG4gICAgbG9kYXNoLlZFUlNJT04gPSBWRVJTSU9OO1xuXG4gICAgLy8gQXNzaWduIGRlZmF1bHQgcGxhY2Vob2xkZXJzLlxuICAgIGFycmF5RWFjaChbJ2JpbmQnLCAnYmluZEtleScsICdjdXJyeScsICdjdXJyeVJpZ2h0JywgJ3BhcnRpYWwnLCAncGFydGlhbFJpZ2h0J10sIGZ1bmN0aW9uKG1ldGhvZE5hbWUpIHtcbiAgICAgIGxvZGFzaFttZXRob2ROYW1lXS5wbGFjZWhvbGRlciA9IGxvZGFzaDtcbiAgICB9KTtcblxuICAgIC8vIEFkZCBgTGF6eVdyYXBwZXJgIG1ldGhvZHMgZm9yIGBfLmRyb3BgIGFuZCBgXy50YWtlYCB2YXJpYW50cy5cbiAgICBhcnJheUVhY2goWydkcm9wJywgJ3Rha2UnXSwgZnVuY3Rpb24obWV0aG9kTmFtZSwgaW5kZXgpIHtcbiAgICAgIExhenlXcmFwcGVyLnByb3RvdHlwZVttZXRob2ROYW1lXSA9IGZ1bmN0aW9uKG4pIHtcbiAgICAgICAgbiA9IG4gPT09IHVuZGVmaW5lZCA/IDEgOiBuYXRpdmVNYXgodG9JbnRlZ2VyKG4pLCAwKTtcblxuICAgICAgICB2YXIgcmVzdWx0ID0gKHRoaXMuX19maWx0ZXJlZF9fICYmICFpbmRleClcbiAgICAgICAgICA/IG5ldyBMYXp5V3JhcHBlcih0aGlzKVxuICAgICAgICAgIDogdGhpcy5jbG9uZSgpO1xuXG4gICAgICAgIGlmIChyZXN1bHQuX19maWx0ZXJlZF9fKSB7XG4gICAgICAgICAgcmVzdWx0Ll9fdGFrZUNvdW50X18gPSBuYXRpdmVNaW4obiwgcmVzdWx0Ll9fdGFrZUNvdW50X18pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlc3VsdC5fX3ZpZXdzX18ucHVzaCh7XG4gICAgICAgICAgICAnc2l6ZSc6IG5hdGl2ZU1pbihuLCBNQVhfQVJSQVlfTEVOR1RIKSxcbiAgICAgICAgICAgICd0eXBlJzogbWV0aG9kTmFtZSArIChyZXN1bHQuX19kaXJfXyA8IDAgPyAnUmlnaHQnIDogJycpXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH07XG5cbiAgICAgIExhenlXcmFwcGVyLnByb3RvdHlwZVttZXRob2ROYW1lICsgJ1JpZ2h0J10gPSBmdW5jdGlvbihuKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJldmVyc2UoKVttZXRob2ROYW1lXShuKS5yZXZlcnNlKCk7XG4gICAgICB9O1xuICAgIH0pO1xuXG4gICAgLy8gQWRkIGBMYXp5V3JhcHBlcmAgbWV0aG9kcyB0aGF0IGFjY2VwdCBhbiBgaXRlcmF0ZWVgIHZhbHVlLlxuICAgIGFycmF5RWFjaChbJ2ZpbHRlcicsICdtYXAnLCAndGFrZVdoaWxlJ10sIGZ1bmN0aW9uKG1ldGhvZE5hbWUsIGluZGV4KSB7XG4gICAgICB2YXIgdHlwZSA9IGluZGV4ICsgMSxcbiAgICAgICAgICBpc0ZpbHRlciA9IHR5cGUgPT0gTEFaWV9GSUxURVJfRkxBRyB8fCB0eXBlID09IExBWllfV0hJTEVfRkxBRztcblxuICAgICAgTGF6eVdyYXBwZXIucHJvdG90eXBlW21ldGhvZE5hbWVdID0gZnVuY3Rpb24oaXRlcmF0ZWUpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IHRoaXMuY2xvbmUoKTtcbiAgICAgICAgcmVzdWx0Ll9faXRlcmF0ZWVzX18ucHVzaCh7XG4gICAgICAgICAgJ2l0ZXJhdGVlJzogZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDMpLFxuICAgICAgICAgICd0eXBlJzogdHlwZVxuICAgICAgICB9KTtcbiAgICAgICAgcmVzdWx0Ll9fZmlsdGVyZWRfXyA9IHJlc3VsdC5fX2ZpbHRlcmVkX18gfHwgaXNGaWx0ZXI7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9O1xuICAgIH0pO1xuXG4gICAgLy8gQWRkIGBMYXp5V3JhcHBlcmAgbWV0aG9kcyBmb3IgYF8uaGVhZGAgYW5kIGBfLmxhc3RgLlxuICAgIGFycmF5RWFjaChbJ2hlYWQnLCAnbGFzdCddLCBmdW5jdGlvbihtZXRob2ROYW1lLCBpbmRleCkge1xuICAgICAgdmFyIHRha2VOYW1lID0gJ3Rha2UnICsgKGluZGV4ID8gJ1JpZ2h0JyA6ICcnKTtcblxuICAgICAgTGF6eVdyYXBwZXIucHJvdG90eXBlW21ldGhvZE5hbWVdID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzW3Rha2VOYW1lXSgxKS52YWx1ZSgpWzBdO1xuICAgICAgfTtcbiAgICB9KTtcblxuICAgIC8vIEFkZCBgTGF6eVdyYXBwZXJgIG1ldGhvZHMgZm9yIGBfLmluaXRpYWxgIGFuZCBgXy50YWlsYC5cbiAgICBhcnJheUVhY2goWydpbml0aWFsJywgJ3RhaWwnXSwgZnVuY3Rpb24obWV0aG9kTmFtZSwgaW5kZXgpIHtcbiAgICAgIHZhciBkcm9wTmFtZSA9ICdkcm9wJyArIChpbmRleCA/ICcnIDogJ1JpZ2h0Jyk7XG5cbiAgICAgIExhenlXcmFwcGVyLnByb3RvdHlwZVttZXRob2ROYW1lXSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fX2ZpbHRlcmVkX18gPyBuZXcgTGF6eVdyYXBwZXIodGhpcykgOiB0aGlzW2Ryb3BOYW1lXSgxKTtcbiAgICAgIH07XG4gICAgfSk7XG5cbiAgICBMYXp5V3JhcHBlci5wcm90b3R5cGUuY29tcGFjdCA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuZmlsdGVyKGlkZW50aXR5KTtcbiAgICB9O1xuXG4gICAgTGF6eVdyYXBwZXIucHJvdG90eXBlLmZpbmQgPSBmdW5jdGlvbihwcmVkaWNhdGUpIHtcbiAgICAgIHJldHVybiB0aGlzLmZpbHRlcihwcmVkaWNhdGUpLmhlYWQoKTtcbiAgICB9O1xuXG4gICAgTGF6eVdyYXBwZXIucHJvdG90eXBlLmZpbmRMYXN0ID0gZnVuY3Rpb24ocHJlZGljYXRlKSB7XG4gICAgICByZXR1cm4gdGhpcy5yZXZlcnNlKCkuZmluZChwcmVkaWNhdGUpO1xuICAgIH07XG5cbiAgICBMYXp5V3JhcHBlci5wcm90b3R5cGUuaW52b2tlTWFwID0gYmFzZVJlc3QoZnVuY3Rpb24ocGF0aCwgYXJncykge1xuICAgICAgaWYgKHR5cGVvZiBwYXRoID09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBMYXp5V3JhcHBlcih0aGlzKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzLm1hcChmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICByZXR1cm4gYmFzZUludm9rZSh2YWx1ZSwgcGF0aCwgYXJncyk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIExhenlXcmFwcGVyLnByb3RvdHlwZS5yZWplY3QgPSBmdW5jdGlvbihwcmVkaWNhdGUpIHtcbiAgICAgIHJldHVybiB0aGlzLmZpbHRlcihuZWdhdGUoZ2V0SXRlcmF0ZWUocHJlZGljYXRlKSkpO1xuICAgIH07XG5cbiAgICBMYXp5V3JhcHBlci5wcm90b3R5cGUuc2xpY2UgPSBmdW5jdGlvbihzdGFydCwgZW5kKSB7XG4gICAgICBzdGFydCA9IHRvSW50ZWdlcihzdGFydCk7XG5cbiAgICAgIHZhciByZXN1bHQgPSB0aGlzO1xuICAgICAgaWYgKHJlc3VsdC5fX2ZpbHRlcmVkX18gJiYgKHN0YXJ0ID4gMCB8fCBlbmQgPCAwKSkge1xuICAgICAgICByZXR1cm4gbmV3IExhenlXcmFwcGVyKHJlc3VsdCk7XG4gICAgICB9XG4gICAgICBpZiAoc3RhcnQgPCAwKSB7XG4gICAgICAgIHJlc3VsdCA9IHJlc3VsdC50YWtlUmlnaHQoLXN0YXJ0KTtcbiAgICAgIH0gZWxzZSBpZiAoc3RhcnQpIHtcbiAgICAgICAgcmVzdWx0ID0gcmVzdWx0LmRyb3Aoc3RhcnQpO1xuICAgICAgfVxuICAgICAgaWYgKGVuZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGVuZCA9IHRvSW50ZWdlcihlbmQpO1xuICAgICAgICByZXN1bHQgPSBlbmQgPCAwID8gcmVzdWx0LmRyb3BSaWdodCgtZW5kKSA6IHJlc3VsdC50YWtlKGVuZCAtIHN0YXJ0KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTtcblxuICAgIExhenlXcmFwcGVyLnByb3RvdHlwZS50YWtlUmlnaHRXaGlsZSA9IGZ1bmN0aW9uKHByZWRpY2F0ZSkge1xuICAgICAgcmV0dXJuIHRoaXMucmV2ZXJzZSgpLnRha2VXaGlsZShwcmVkaWNhdGUpLnJldmVyc2UoKTtcbiAgICB9O1xuXG4gICAgTGF6eVdyYXBwZXIucHJvdG90eXBlLnRvQXJyYXkgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLnRha2UoTUFYX0FSUkFZX0xFTkdUSCk7XG4gICAgfTtcblxuICAgIC8vIEFkZCBgTGF6eVdyYXBwZXJgIG1ldGhvZHMgdG8gYGxvZGFzaC5wcm90b3R5cGVgLlxuICAgIGJhc2VGb3JPd24oTGF6eVdyYXBwZXIucHJvdG90eXBlLCBmdW5jdGlvbihmdW5jLCBtZXRob2ROYW1lKSB7XG4gICAgICB2YXIgY2hlY2tJdGVyYXRlZSA9IC9eKD86ZmlsdGVyfGZpbmR8bWFwfHJlamVjdCl8V2hpbGUkLy50ZXN0KG1ldGhvZE5hbWUpLFxuICAgICAgICAgIGlzVGFrZXIgPSAvXig/OmhlYWR8bGFzdCkkLy50ZXN0KG1ldGhvZE5hbWUpLFxuICAgICAgICAgIGxvZGFzaEZ1bmMgPSBsb2Rhc2hbaXNUYWtlciA/ICgndGFrZScgKyAobWV0aG9kTmFtZSA9PSAnbGFzdCcgPyAnUmlnaHQnIDogJycpKSA6IG1ldGhvZE5hbWVdLFxuICAgICAgICAgIHJldFVud3JhcHBlZCA9IGlzVGFrZXIgfHwgL15maW5kLy50ZXN0KG1ldGhvZE5hbWUpO1xuXG4gICAgICBpZiAoIWxvZGFzaEZ1bmMpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgbG9kYXNoLnByb3RvdHlwZVttZXRob2ROYW1lXSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgdmFsdWUgPSB0aGlzLl9fd3JhcHBlZF9fLFxuICAgICAgICAgICAgYXJncyA9IGlzVGFrZXIgPyBbMV0gOiBhcmd1bWVudHMsXG4gICAgICAgICAgICBpc0xhenkgPSB2YWx1ZSBpbnN0YW5jZW9mIExhenlXcmFwcGVyLFxuICAgICAgICAgICAgaXRlcmF0ZWUgPSBhcmdzWzBdLFxuICAgICAgICAgICAgdXNlTGF6eSA9IGlzTGF6eSB8fCBpc0FycmF5KHZhbHVlKTtcblxuICAgICAgICB2YXIgaW50ZXJjZXB0b3IgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgIHZhciByZXN1bHQgPSBsb2Rhc2hGdW5jLmFwcGx5KGxvZGFzaCwgYXJyYXlQdXNoKFt2YWx1ZV0sIGFyZ3MpKTtcbiAgICAgICAgICByZXR1cm4gKGlzVGFrZXIgJiYgY2hhaW5BbGwpID8gcmVzdWx0WzBdIDogcmVzdWx0O1xuICAgICAgICB9O1xuXG4gICAgICAgIGlmICh1c2VMYXp5ICYmIGNoZWNrSXRlcmF0ZWUgJiYgdHlwZW9mIGl0ZXJhdGVlID09ICdmdW5jdGlvbicgJiYgaXRlcmF0ZWUubGVuZ3RoICE9IDEpIHtcbiAgICAgICAgICAvLyBBdm9pZCBsYXp5IHVzZSBpZiB0aGUgaXRlcmF0ZWUgaGFzIGEgXCJsZW5ndGhcIiB2YWx1ZSBvdGhlciB0aGFuIGAxYC5cbiAgICAgICAgICBpc0xhenkgPSB1c2VMYXp5ID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGNoYWluQWxsID0gdGhpcy5fX2NoYWluX18sXG4gICAgICAgICAgICBpc0h5YnJpZCA9ICEhdGhpcy5fX2FjdGlvbnNfXy5sZW5ndGgsXG4gICAgICAgICAgICBpc1Vud3JhcHBlZCA9IHJldFVud3JhcHBlZCAmJiAhY2hhaW5BbGwsXG4gICAgICAgICAgICBvbmx5TGF6eSA9IGlzTGF6eSAmJiAhaXNIeWJyaWQ7XG5cbiAgICAgICAgaWYgKCFyZXRVbndyYXBwZWQgJiYgdXNlTGF6eSkge1xuICAgICAgICAgIHZhbHVlID0gb25seUxhenkgPyB2YWx1ZSA6IG5ldyBMYXp5V3JhcHBlcih0aGlzKTtcbiAgICAgICAgICB2YXIgcmVzdWx0ID0gZnVuYy5hcHBseSh2YWx1ZSwgYXJncyk7XG4gICAgICAgICAgcmVzdWx0Ll9fYWN0aW9uc19fLnB1c2goeyAnZnVuYyc6IHRocnUsICdhcmdzJzogW2ludGVyY2VwdG9yXSwgJ3RoaXNBcmcnOiB1bmRlZmluZWQgfSk7XG4gICAgICAgICAgcmV0dXJuIG5ldyBMb2Rhc2hXcmFwcGVyKHJlc3VsdCwgY2hhaW5BbGwpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc1Vud3JhcHBlZCAmJiBvbmx5TGF6eSkge1xuICAgICAgICAgIHJldHVybiBmdW5jLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgICAgICB9XG4gICAgICAgIHJlc3VsdCA9IHRoaXMudGhydShpbnRlcmNlcHRvcik7XG4gICAgICAgIHJldHVybiBpc1Vud3JhcHBlZCA/IChpc1Rha2VyID8gcmVzdWx0LnZhbHVlKClbMF0gOiByZXN1bHQudmFsdWUoKSkgOiByZXN1bHQ7XG4gICAgICB9O1xuICAgIH0pO1xuXG4gICAgLy8gQWRkIGBBcnJheWAgbWV0aG9kcyB0byBgbG9kYXNoLnByb3RvdHlwZWAuXG4gICAgYXJyYXlFYWNoKFsncG9wJywgJ3B1c2gnLCAnc2hpZnQnLCAnc29ydCcsICdzcGxpY2UnLCAndW5zaGlmdCddLCBmdW5jdGlvbihtZXRob2ROYW1lKSB7XG4gICAgICB2YXIgZnVuYyA9IGFycmF5UHJvdG9bbWV0aG9kTmFtZV0sXG4gICAgICAgICAgY2hhaW5OYW1lID0gL14oPzpwdXNofHNvcnR8dW5zaGlmdCkkLy50ZXN0KG1ldGhvZE5hbWUpID8gJ3RhcCcgOiAndGhydScsXG4gICAgICAgICAgcmV0VW53cmFwcGVkID0gL14oPzpwb3B8c2hpZnQpJC8udGVzdChtZXRob2ROYW1lKTtcblxuICAgICAgbG9kYXNoLnByb3RvdHlwZVttZXRob2ROYW1lXSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgYXJncyA9IGFyZ3VtZW50cztcbiAgICAgICAgaWYgKHJldFVud3JhcHBlZCAmJiAhdGhpcy5fX2NoYWluX18pIHtcbiAgICAgICAgICB2YXIgdmFsdWUgPSB0aGlzLnZhbHVlKCk7XG4gICAgICAgICAgcmV0dXJuIGZ1bmMuYXBwbHkoaXNBcnJheSh2YWx1ZSkgPyB2YWx1ZSA6IFtdLCBhcmdzKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpc1tjaGFpbk5hbWVdKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgcmV0dXJuIGZ1bmMuYXBwbHkoaXNBcnJheSh2YWx1ZSkgPyB2YWx1ZSA6IFtdLCBhcmdzKTtcbiAgICAgICAgfSk7XG4gICAgICB9O1xuICAgIH0pO1xuXG4gICAgLy8gTWFwIG1pbmlmaWVkIG1ldGhvZCBuYW1lcyB0byB0aGVpciByZWFsIG5hbWVzLlxuICAgIGJhc2VGb3JPd24oTGF6eVdyYXBwZXIucHJvdG90eXBlLCBmdW5jdGlvbihmdW5jLCBtZXRob2ROYW1lKSB7XG4gICAgICB2YXIgbG9kYXNoRnVuYyA9IGxvZGFzaFttZXRob2ROYW1lXTtcbiAgICAgIGlmIChsb2Rhc2hGdW5jKSB7XG4gICAgICAgIHZhciBrZXkgPSBsb2Rhc2hGdW5jLm5hbWUgKyAnJztcbiAgICAgICAgaWYgKCFoYXNPd25Qcm9wZXJ0eS5jYWxsKHJlYWxOYW1lcywga2V5KSkge1xuICAgICAgICAgIHJlYWxOYW1lc1trZXldID0gW107XG4gICAgICAgIH1cbiAgICAgICAgcmVhbE5hbWVzW2tleV0ucHVzaCh7ICduYW1lJzogbWV0aG9kTmFtZSwgJ2Z1bmMnOiBsb2Rhc2hGdW5jIH0pO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmVhbE5hbWVzW2NyZWF0ZUh5YnJpZCh1bmRlZmluZWQsIFdSQVBfQklORF9LRVlfRkxBRykubmFtZV0gPSBbe1xuICAgICAgJ25hbWUnOiAnd3JhcHBlcicsXG4gICAgICAnZnVuYyc6IHVuZGVmaW5lZFxuICAgIH1dO1xuXG4gICAgLy8gQWRkIG1ldGhvZHMgdG8gYExhenlXcmFwcGVyYC5cbiAgICBMYXp5V3JhcHBlci5wcm90b3R5cGUuY2xvbmUgPSBsYXp5Q2xvbmU7XG4gICAgTGF6eVdyYXBwZXIucHJvdG90eXBlLnJldmVyc2UgPSBsYXp5UmV2ZXJzZTtcbiAgICBMYXp5V3JhcHBlci5wcm90b3R5cGUudmFsdWUgPSBsYXp5VmFsdWU7XG5cbiAgICAvLyBBZGQgY2hhaW4gc2VxdWVuY2UgbWV0aG9kcyB0byB0aGUgYGxvZGFzaGAgd3JhcHBlci5cbiAgICBsb2Rhc2gucHJvdG90eXBlLmF0ID0gd3JhcHBlckF0O1xuICAgIGxvZGFzaC5wcm90b3R5cGUuY2hhaW4gPSB3cmFwcGVyQ2hhaW47XG4gICAgbG9kYXNoLnByb3RvdHlwZS5jb21taXQgPSB3cmFwcGVyQ29tbWl0O1xuICAgIGxvZGFzaC5wcm90b3R5cGUubmV4dCA9IHdyYXBwZXJOZXh0O1xuICAgIGxvZGFzaC5wcm90b3R5cGUucGxhbnQgPSB3cmFwcGVyUGxhbnQ7XG4gICAgbG9kYXNoLnByb3RvdHlwZS5yZXZlcnNlID0gd3JhcHBlclJldmVyc2U7XG4gICAgbG9kYXNoLnByb3RvdHlwZS50b0pTT04gPSBsb2Rhc2gucHJvdG90eXBlLnZhbHVlT2YgPSBsb2Rhc2gucHJvdG90eXBlLnZhbHVlID0gd3JhcHBlclZhbHVlO1xuXG4gICAgLy8gQWRkIGxhenkgYWxpYXNlcy5cbiAgICBsb2Rhc2gucHJvdG90eXBlLmZpcnN0ID0gbG9kYXNoLnByb3RvdHlwZS5oZWFkO1xuXG4gICAgaWYgKHN5bUl0ZXJhdG9yKSB7XG4gICAgICBsb2Rhc2gucHJvdG90eXBlW3N5bUl0ZXJhdG9yXSA9IHdyYXBwZXJUb0l0ZXJhdG9yO1xuICAgIH1cbiAgICByZXR1cm4gbG9kYXNoO1xuICB9KTtcblxuICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAvLyBFeHBvcnQgbG9kYXNoLlxuICB2YXIgXyA9IHJ1bkluQ29udGV4dCgpO1xuXG4gIC8vIFNvbWUgQU1EIGJ1aWxkIG9wdGltaXplcnMsIGxpa2Ugci5qcywgY2hlY2sgZm9yIGNvbmRpdGlvbiBwYXR0ZXJucyBsaWtlOlxuICBpZiAodHlwZW9mIGRlZmluZSA9PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBkZWZpbmUuYW1kID09ICdvYmplY3QnICYmIGRlZmluZS5hbWQpIHtcbiAgICAvLyBFeHBvc2UgTG9kYXNoIG9uIHRoZSBnbG9iYWwgb2JqZWN0IHRvIHByZXZlbnQgZXJyb3JzIHdoZW4gTG9kYXNoIGlzXG4gICAgLy8gbG9hZGVkIGJ5IGEgc2NyaXB0IHRhZyBpbiB0aGUgcHJlc2VuY2Ugb2YgYW4gQU1EIGxvYWRlci5cbiAgICAvLyBTZWUgaHR0cDovL3JlcXVpcmVqcy5vcmcvZG9jcy9lcnJvcnMuaHRtbCNtaXNtYXRjaCBmb3IgbW9yZSBkZXRhaWxzLlxuICAgIC8vIFVzZSBgXy5ub0NvbmZsaWN0YCB0byByZW1vdmUgTG9kYXNoIGZyb20gdGhlIGdsb2JhbCBvYmplY3QuXG4gICAgcm9vdC5fID0gXztcblxuICAgIC8vIERlZmluZSBhcyBhbiBhbm9ueW1vdXMgbW9kdWxlIHNvLCB0aHJvdWdoIHBhdGggbWFwcGluZywgaXQgY2FuIGJlXG4gICAgLy8gcmVmZXJlbmNlZCBhcyB0aGUgXCJ1bmRlcnNjb3JlXCIgbW9kdWxlLlxuICAgIGRlZmluZShmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBfO1xuICAgIH0pO1xuICB9XG4gIC8vIENoZWNrIGZvciBgZXhwb3J0c2AgYWZ0ZXIgYGRlZmluZWAgaW4gY2FzZSBhIGJ1aWxkIG9wdGltaXplciBhZGRzIGl0LlxuICBlbHNlIGlmIChmcmVlTW9kdWxlKSB7XG4gICAgLy8gRXhwb3J0IGZvciBOb2RlLmpzLlxuICAgIChmcmVlTW9kdWxlLmV4cG9ydHMgPSBfKS5fID0gXztcbiAgICAvLyBFeHBvcnQgZm9yIENvbW1vbkpTIHN1cHBvcnQuXG4gICAgZnJlZUV4cG9ydHMuXyA9IF87XG4gIH1cbiAgZWxzZSB7XG4gICAgLy8gRXhwb3J0IHRvIHRoZSBnbG9iYWwgb2JqZWN0LlxuICAgIHJvb3QuXyA9IF87XG4gIH1cbn0uY2FsbCh0aGlzKSk7XG4iLCIvKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIHRoZVxuICogW2xhbmd1YWdlIHR5cGVdKGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1lY21hc2NyaXB0LWxhbmd1YWdlLXR5cGVzKVxuICogb2YgYE9iamVjdGAuIChlLmcuIGFycmF5cywgZnVuY3Rpb25zLCBvYmplY3RzLCByZWdleGVzLCBgbmV3IE51bWJlcigwKWAsIGFuZCBgbmV3IFN0cmluZygnJylgKVxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIG9iamVjdCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzT2JqZWN0KHt9KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0KFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdChfLm5vb3ApO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3QobnVsbCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc09iamVjdCh2YWx1ZSkge1xuICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgcmV0dXJuIHZhbHVlICE9IG51bGwgJiYgKHR5cGUgPT0gJ29iamVjdCcgfHwgdHlwZSA9PSAnZnVuY3Rpb24nKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc09iamVjdDtcbiIsInZhciBmcmVlR2xvYmFsID0gcmVxdWlyZSgnLi9fZnJlZUdsb2JhbCcpO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYHNlbGZgLiAqL1xudmFyIGZyZWVTZWxmID0gdHlwZW9mIHNlbGYgPT0gJ29iamVjdCcgJiYgc2VsZiAmJiBzZWxmLk9iamVjdCA9PT0gT2JqZWN0ICYmIHNlbGY7XG5cbi8qKiBVc2VkIGFzIGEgcmVmZXJlbmNlIHRvIHRoZSBnbG9iYWwgb2JqZWN0LiAqL1xudmFyIHJvb3QgPSBmcmVlR2xvYmFsIHx8IGZyZWVTZWxmIHx8IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5cbm1vZHVsZS5leHBvcnRzID0gcm9vdDtcbiIsInZhciBnO1xuXG4vLyBUaGlzIHdvcmtzIGluIG5vbi1zdHJpY3QgbW9kZVxuZyA9IChmdW5jdGlvbigpIHtcblx0cmV0dXJuIHRoaXM7XG59KSgpO1xuXG50cnkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIGV2YWwgaXMgYWxsb3dlZCAoc2VlIENTUClcblx0ZyA9IGcgfHwgbmV3IEZ1bmN0aW9uKFwicmV0dXJuIHRoaXNcIikoKTtcbn0gY2F0Y2ggKGUpIHtcblx0Ly8gVGhpcyB3b3JrcyBpZiB0aGUgd2luZG93IHJlZmVyZW5jZSBpcyBhdmFpbGFibGVcblx0aWYgKHR5cGVvZiB3aW5kb3cgPT09IFwib2JqZWN0XCIpIGcgPSB3aW5kb3c7XG59XG5cbi8vIGcgY2FuIHN0aWxsIGJlIHVuZGVmaW5lZCwgYnV0IG5vdGhpbmcgdG8gZG8gYWJvdXQgaXQuLi5cbi8vIFdlIHJldHVybiB1bmRlZmluZWQsIGluc3RlYWQgb2Ygbm90aGluZyBoZXJlLCBzbyBpdCdzXG4vLyBlYXNpZXIgdG8gaGFuZGxlIHRoaXMgY2FzZS4gaWYoIWdsb2JhbCkgeyAuLi59XG5cbm1vZHVsZS5leHBvcnRzID0gZztcbiIsIi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgb2JqZWN0LWxpa2UuIEEgdmFsdWUgaXMgb2JqZWN0LWxpa2UgaWYgaXQncyBub3QgYG51bGxgXG4gKiBhbmQgaGFzIGEgYHR5cGVvZmAgcmVzdWx0IG9mIFwib2JqZWN0XCIuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgb2JqZWN0LWxpa2UsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc09iamVjdExpa2Uoe30pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdExpa2UoXy5ub29wKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc09iamVjdExpa2UobnVsbCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc09iamVjdExpa2UodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlICE9IG51bGwgJiYgdHlwZW9mIHZhbHVlID09ICdvYmplY3QnO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzT2JqZWN0TGlrZTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBDb3B5cmlnaHQgMjAxNSwgWWFob28hIEluYy5cbiAqIENvcHlyaWdodHMgbGljZW5zZWQgdW5kZXIgdGhlIE5ldyBCU0QgTGljZW5zZS4gU2VlIHRoZSBhY2NvbXBhbnlpbmcgTElDRU5TRSBmaWxlIGZvciB0ZXJtcy5cbiAqL1xudmFyIFJlYWN0SXMgPSByZXF1aXJlKCdyZWFjdC1pcycpO1xudmFyIFJFQUNUX1NUQVRJQ1MgPSB7XG4gICAgY2hpbGRDb250ZXh0VHlwZXM6IHRydWUsXG4gICAgY29udGV4dFR5cGU6IHRydWUsXG4gICAgY29udGV4dFR5cGVzOiB0cnVlLFxuICAgIGRlZmF1bHRQcm9wczogdHJ1ZSxcbiAgICBkaXNwbGF5TmFtZTogdHJ1ZSxcbiAgICBnZXREZWZhdWx0UHJvcHM6IHRydWUsXG4gICAgZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yOiB0cnVlLFxuICAgIGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wczogdHJ1ZSxcbiAgICBtaXhpbnM6IHRydWUsXG4gICAgcHJvcFR5cGVzOiB0cnVlLFxuICAgIHR5cGU6IHRydWVcbn07XG5cbnZhciBLTk9XTl9TVEFUSUNTID0ge1xuICAgIG5hbWU6IHRydWUsXG4gICAgbGVuZ3RoOiB0cnVlLFxuICAgIHByb3RvdHlwZTogdHJ1ZSxcbiAgICBjYWxsZXI6IHRydWUsXG4gICAgY2FsbGVlOiB0cnVlLFxuICAgIGFyZ3VtZW50czogdHJ1ZSxcbiAgICBhcml0eTogdHJ1ZVxufTtcblxudmFyIEZPUldBUkRfUkVGX1NUQVRJQ1MgPSB7XG4gICAgJyQkdHlwZW9mJzogdHJ1ZSxcbiAgICByZW5kZXI6IHRydWUsXG4gICAgZGVmYXVsdFByb3BzOiB0cnVlLFxuICAgIGRpc3BsYXlOYW1lOiB0cnVlLFxuICAgIHByb3BUeXBlczogdHJ1ZVxufTtcblxudmFyIE1FTU9fU1RBVElDUyA9IHtcbiAgICAnJCR0eXBlb2YnOiB0cnVlLFxuICAgIGNvbXBhcmU6IHRydWUsXG4gICAgZGVmYXVsdFByb3BzOiB0cnVlLFxuICAgIGRpc3BsYXlOYW1lOiB0cnVlLFxuICAgIHByb3BUeXBlczogdHJ1ZSxcbiAgICB0eXBlOiB0cnVlXG59O1xuXG52YXIgVFlQRV9TVEFUSUNTID0ge307XG5UWVBFX1NUQVRJQ1NbUmVhY3RJcy5Gb3J3YXJkUmVmXSA9IEZPUldBUkRfUkVGX1NUQVRJQ1M7XG5cbmZ1bmN0aW9uIGdldFN0YXRpY3MoY29tcG9uZW50KSB7XG4gICAgaWYgKFJlYWN0SXMuaXNNZW1vKGNvbXBvbmVudCkpIHtcbiAgICAgICAgcmV0dXJuIE1FTU9fU1RBVElDUztcbiAgICB9XG4gICAgcmV0dXJuIFRZUEVfU1RBVElDU1tjb21wb25lbnRbJyQkdHlwZW9mJ11dIHx8IFJFQUNUX1NUQVRJQ1M7XG59XG5cbnZhciBkZWZpbmVQcm9wZXJ0eSA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBnZXRPd25Qcm9wZXJ0eU5hbWVzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXM7XG52YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xudmFyIGdldFByb3RvdHlwZU9mID0gT2JqZWN0LmdldFByb3RvdHlwZU9mO1xudmFyIG9iamVjdFByb3RvdHlwZSA9IE9iamVjdC5wcm90b3R5cGU7XG5cbmZ1bmN0aW9uIGhvaXN0Tm9uUmVhY3RTdGF0aWNzKHRhcmdldENvbXBvbmVudCwgc291cmNlQ29tcG9uZW50LCBibGFja2xpc3QpIHtcbiAgICBpZiAodHlwZW9mIHNvdXJjZUNvbXBvbmVudCAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgLy8gZG9uJ3QgaG9pc3Qgb3ZlciBzdHJpbmcgKGh0bWwpIGNvbXBvbmVudHNcblxuICAgICAgICBpZiAob2JqZWN0UHJvdG90eXBlKSB7XG4gICAgICAgICAgICB2YXIgaW5oZXJpdGVkQ29tcG9uZW50ID0gZ2V0UHJvdG90eXBlT2Yoc291cmNlQ29tcG9uZW50KTtcbiAgICAgICAgICAgIGlmIChpbmhlcml0ZWRDb21wb25lbnQgJiYgaW5oZXJpdGVkQ29tcG9uZW50ICE9PSBvYmplY3RQcm90b3R5cGUpIHtcbiAgICAgICAgICAgICAgICBob2lzdE5vblJlYWN0U3RhdGljcyh0YXJnZXRDb21wb25lbnQsIGluaGVyaXRlZENvbXBvbmVudCwgYmxhY2tsaXN0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBrZXlzID0gZ2V0T3duUHJvcGVydHlOYW1lcyhzb3VyY2VDb21wb25lbnQpO1xuXG4gICAgICAgIGlmIChnZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcbiAgICAgICAgICAgIGtleXMgPSBrZXlzLmNvbmNhdChnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoc291cmNlQ29tcG9uZW50KSk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgdGFyZ2V0U3RhdGljcyA9IGdldFN0YXRpY3ModGFyZ2V0Q29tcG9uZW50KTtcbiAgICAgICAgdmFyIHNvdXJjZVN0YXRpY3MgPSBnZXRTdGF0aWNzKHNvdXJjZUNvbXBvbmVudCk7XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICB2YXIga2V5ID0ga2V5c1tpXTtcbiAgICAgICAgICAgIGlmICghS05PV05fU1RBVElDU1trZXldICYmICEoYmxhY2tsaXN0ICYmIGJsYWNrbGlzdFtrZXldKSAmJiAhKHNvdXJjZVN0YXRpY3MgJiYgc291cmNlU3RhdGljc1trZXldKSAmJiAhKHRhcmdldFN0YXRpY3MgJiYgdGFyZ2V0U3RhdGljc1trZXldKSkge1xuICAgICAgICAgICAgICAgIHZhciBkZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZUNvbXBvbmVudCwga2V5KTtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAvLyBBdm9pZCBmYWlsdXJlcyBmcm9tIHJlYWQtb25seSBwcm9wZXJ0aWVzXG4gICAgICAgICAgICAgICAgICAgIGRlZmluZVByb3BlcnR5KHRhcmdldENvbXBvbmVudCwga2V5LCBkZXNjcmlwdG9yKTtcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7fVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRhcmdldENvbXBvbmVudDtcbiAgICB9XG5cbiAgICByZXR1cm4gdGFyZ2V0Q29tcG9uZW50O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGhvaXN0Tm9uUmVhY3RTdGF0aWNzO1xuIiwidmFyIGxpc3RDYWNoZUNsZWFyID0gcmVxdWlyZSgnLi9fbGlzdENhY2hlQ2xlYXInKSxcbiAgICBsaXN0Q2FjaGVEZWxldGUgPSByZXF1aXJlKCcuL19saXN0Q2FjaGVEZWxldGUnKSxcbiAgICBsaXN0Q2FjaGVHZXQgPSByZXF1aXJlKCcuL19saXN0Q2FjaGVHZXQnKSxcbiAgICBsaXN0Q2FjaGVIYXMgPSByZXF1aXJlKCcuL19saXN0Q2FjaGVIYXMnKSxcbiAgICBsaXN0Q2FjaGVTZXQgPSByZXF1aXJlKCcuL19saXN0Q2FjaGVTZXQnKTtcblxuLyoqXG4gKiBDcmVhdGVzIGFuIGxpc3QgY2FjaGUgb2JqZWN0LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7QXJyYXl9IFtlbnRyaWVzXSBUaGUga2V5LXZhbHVlIHBhaXJzIHRvIGNhY2hlLlxuICovXG5mdW5jdGlvbiBMaXN0Q2FjaGUoZW50cmllcykge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IGVudHJpZXMgPT0gbnVsbCA/IDAgOiBlbnRyaWVzLmxlbmd0aDtcblxuICB0aGlzLmNsZWFyKCk7XG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgdmFyIGVudHJ5ID0gZW50cmllc1tpbmRleF07XG4gICAgdGhpcy5zZXQoZW50cnlbMF0sIGVudHJ5WzFdKTtcbiAgfVxufVxuXG4vLyBBZGQgbWV0aG9kcyB0byBgTGlzdENhY2hlYC5cbkxpc3RDYWNoZS5wcm90b3R5cGUuY2xlYXIgPSBsaXN0Q2FjaGVDbGVhcjtcbkxpc3RDYWNoZS5wcm90b3R5cGVbJ2RlbGV0ZSddID0gbGlzdENhY2hlRGVsZXRlO1xuTGlzdENhY2hlLnByb3RvdHlwZS5nZXQgPSBsaXN0Q2FjaGVHZXQ7XG5MaXN0Q2FjaGUucHJvdG90eXBlLmhhcyA9IGxpc3RDYWNoZUhhcztcbkxpc3RDYWNoZS5wcm90b3R5cGUuc2V0ID0gbGlzdENhY2hlU2V0O1xuXG5tb2R1bGUuZXhwb3J0cyA9IExpc3RDYWNoZTtcbiIsInZhciBlcSA9IHJlcXVpcmUoJy4vZXEnKTtcblxuLyoqXG4gKiBHZXRzIHRoZSBpbmRleCBhdCB3aGljaCB0aGUgYGtleWAgaXMgZm91bmQgaW4gYGFycmF5YCBvZiBrZXktdmFsdWUgcGFpcnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICogQHBhcmFtIHsqfSBrZXkgVGhlIGtleSB0byBzZWFyY2ggZm9yLlxuICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIG1hdGNoZWQgdmFsdWUsIGVsc2UgYC0xYC5cbiAqL1xuZnVuY3Rpb24gYXNzb2NJbmRleE9mKGFycmF5LCBrZXkpIHtcbiAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcbiAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgaWYgKGVxKGFycmF5W2xlbmd0aF1bMF0sIGtleSkpIHtcbiAgICAgIHJldHVybiBsZW5ndGg7XG4gICAgfVxuICB9XG4gIHJldHVybiAtMTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBhc3NvY0luZGV4T2Y7XG4iLCIvKipcbiAqIFBlcmZvcm1zIGFcbiAqIFtgU2FtZVZhbHVlWmVyb2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXNhbWV2YWx1ZXplcm8pXG4gKiBjb21wYXJpc29uIGJldHdlZW4gdHdvIHZhbHVlcyB0byBkZXRlcm1pbmUgaWYgdGhleSBhcmUgZXF1aXZhbGVudC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIHZhbHVlcyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEgfTtcbiAqIHZhciBvdGhlciA9IHsgJ2EnOiAxIH07XG4gKlxuICogXy5lcShvYmplY3QsIG9iamVjdCk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5lcShvYmplY3QsIG90aGVyKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5lcSgnYScsICdhJyk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5lcSgnYScsIE9iamVjdCgnYScpKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5lcShOYU4sIE5hTik7XG4gKiAvLyA9PiB0cnVlXG4gKi9cbmZ1bmN0aW9uIGVxKHZhbHVlLCBvdGhlcikge1xuICByZXR1cm4gdmFsdWUgPT09IG90aGVyIHx8ICh2YWx1ZSAhPT0gdmFsdWUgJiYgb3RoZXIgIT09IG90aGVyKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBlcTtcbiIsInZhciBTeW1ib2wgPSByZXF1aXJlKCcuL19TeW1ib2wnKSxcbiAgICBnZXRSYXdUYWcgPSByZXF1aXJlKCcuL19nZXRSYXdUYWcnKSxcbiAgICBvYmplY3RUb1N0cmluZyA9IHJlcXVpcmUoJy4vX29iamVjdFRvU3RyaW5nJyk7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBudWxsVGFnID0gJ1tvYmplY3QgTnVsbF0nLFxuICAgIHVuZGVmaW5lZFRhZyA9ICdbb2JqZWN0IFVuZGVmaW5lZF0nO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBzeW1Ub1N0cmluZ1RhZyA9IFN5bWJvbCA/IFN5bWJvbC50b1N0cmluZ1RhZyA6IHVuZGVmaW5lZDtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgZ2V0VGFnYCB3aXRob3V0IGZhbGxiYWNrcyBmb3IgYnVnZ3kgZW52aXJvbm1lbnRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGB0b1N0cmluZ1RhZ2AuXG4gKi9cbmZ1bmN0aW9uIGJhc2VHZXRUYWcodmFsdWUpIHtcbiAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICByZXR1cm4gdmFsdWUgPT09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZFRhZyA6IG51bGxUYWc7XG4gIH1cbiAgcmV0dXJuIChzeW1Ub1N0cmluZ1RhZyAmJiBzeW1Ub1N0cmluZ1RhZyBpbiBPYmplY3QodmFsdWUpKVxuICAgID8gZ2V0UmF3VGFnKHZhbHVlKVxuICAgIDogb2JqZWN0VG9TdHJpbmcodmFsdWUpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VHZXRUYWc7XG4iLCJ2YXIgZ2V0TmF0aXZlID0gcmVxdWlyZSgnLi9fZ2V0TmF0aXZlJyk7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIHRoYXQgYXJlIHZlcmlmaWVkIHRvIGJlIG5hdGl2ZS4gKi9cbnZhciBuYXRpdmVDcmVhdGUgPSBnZXROYXRpdmUoT2JqZWN0LCAnY3JlYXRlJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gbmF0aXZlQ3JlYXRlO1xuIiwidmFyIGlzS2V5YWJsZSA9IHJlcXVpcmUoJy4vX2lzS2V5YWJsZScpO1xuXG4vKipcbiAqIEdldHMgdGhlIGRhdGEgZm9yIGBtYXBgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gbWFwIFRoZSBtYXAgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSByZWZlcmVuY2Uga2V5LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIG1hcCBkYXRhLlxuICovXG5mdW5jdGlvbiBnZXRNYXBEYXRhKG1hcCwga2V5KSB7XG4gIHZhciBkYXRhID0gbWFwLl9fZGF0YV9fO1xuICByZXR1cm4gaXNLZXlhYmxlKGtleSlcbiAgICA/IGRhdGFbdHlwZW9mIGtleSA9PSAnc3RyaW5nJyA/ICdzdHJpbmcnIDogJ2hhc2gnXVxuICAgIDogZGF0YS5tYXA7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0TWFwRGF0YTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24obW9kdWxlKSB7XG5cdGlmICghbW9kdWxlLndlYnBhY2tQb2x5ZmlsbCkge1xuXHRcdG1vZHVsZS5kZXByZWNhdGUgPSBmdW5jdGlvbigpIHt9O1xuXHRcdG1vZHVsZS5wYXRocyA9IFtdO1xuXHRcdC8vIG1vZHVsZS5wYXJlbnQgPSB1bmRlZmluZWQgYnkgZGVmYXVsdFxuXHRcdGlmICghbW9kdWxlLmNoaWxkcmVuKSBtb2R1bGUuY2hpbGRyZW4gPSBbXTtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImxvYWRlZFwiLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIG1vZHVsZS5sO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwiaWRcIiwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdGdldDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiBtb2R1bGUuaTtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRtb2R1bGUud2VicGFja1BvbHlmaWxsID0gMTtcblx0fVxuXHRyZXR1cm4gbW9kdWxlO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gY2hlY2tEQ0UoKSB7XG4gIC8qIGdsb2JhbCBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18gKi9cbiAgaWYgKFxuICAgIHR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18gPT09ICd1bmRlZmluZWQnIHx8XG4gICAgdHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXy5jaGVja0RDRSAhPT0gJ2Z1bmN0aW9uJ1xuICApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAvLyBUaGlzIGJyYW5jaCBpcyB1bnJlYWNoYWJsZSBiZWNhdXNlIHRoaXMgZnVuY3Rpb24gaXMgb25seSBjYWxsZWRcbiAgICAvLyBpbiBwcm9kdWN0aW9uLCBidXQgdGhlIGNvbmRpdGlvbiBpcyB0cnVlIG9ubHkgaW4gZGV2ZWxvcG1lbnQuXG4gICAgLy8gVGhlcmVmb3JlIGlmIHRoZSBicmFuY2ggaXMgc3RpbGwgaGVyZSwgZGVhZCBjb2RlIGVsaW1pbmF0aW9uIHdhc24ndFxuICAgIC8vIHByb3Blcmx5IGFwcGxpZWQuXG4gICAgLy8gRG9uJ3QgY2hhbmdlIHRoZSBtZXNzYWdlLiBSZWFjdCBEZXZUb29scyByZWxpZXMgb24gaXQuIEFsc28gbWFrZSBzdXJlXG4gICAgLy8gdGhpcyBtZXNzYWdlIGRvZXNuJ3Qgb2NjdXIgZWxzZXdoZXJlIGluIHRoaXMgZnVuY3Rpb24sIG9yIGl0IHdpbGwgY2F1c2VcbiAgICAvLyBhIGZhbHNlIHBvc2l0aXZlLlxuICAgIHRocm93IG5ldyBFcnJvcignXl9eJyk7XG4gIH1cbiAgdHJ5IHtcbiAgICAvLyBWZXJpZnkgdGhhdCB0aGUgY29kZSBhYm92ZSBoYXMgYmVlbiBkZWFkIGNvZGUgZWxpbWluYXRlZCAoRENFJ2QpLlxuICAgIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXy5jaGVja0RDRShjaGVja0RDRSk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIC8vIERldlRvb2xzIHNob3VsZG4ndCBjcmFzaCBSZWFjdCwgbm8gbWF0dGVyIHdoYXQuXG4gICAgLy8gV2Ugc2hvdWxkIHN0aWxsIHJlcG9ydCBpbiBjYXNlIHdlIGJyZWFrIHRoaXMgY29kZS5cbiAgICBjb25zb2xlLmVycm9yKGVycik7XG4gIH1cbn1cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgLy8gRENFIGNoZWNrIHNob3VsZCBoYXBwZW4gYmVmb3JlIFJlYWN0RE9NIGJ1bmRsZSBleGVjdXRlcyBzbyB0aGF0XG4gIC8vIERldlRvb2xzIGNhbiByZXBvcnQgYmFkIG1pbmlmaWNhdGlvbiBkdXJpbmcgaW5qZWN0aW9uLlxuICBjaGVja0RDRSgpO1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1kb20uZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1pcy5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1pcy5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwidmFyIGJhc2VJc05hdGl2ZSA9IHJlcXVpcmUoJy4vX2Jhc2VJc05hdGl2ZScpLFxuICAgIGdldFZhbHVlID0gcmVxdWlyZSgnLi9fZ2V0VmFsdWUnKTtcblxuLyoqXG4gKiBHZXRzIHRoZSBuYXRpdmUgZnVuY3Rpb24gYXQgYGtleWAgb2YgYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgbWV0aG9kIHRvIGdldC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBmdW5jdGlvbiBpZiBpdCdzIG5hdGl2ZSwgZWxzZSBgdW5kZWZpbmVkYC5cbiAqL1xuZnVuY3Rpb24gZ2V0TmF0aXZlKG9iamVjdCwga2V5KSB7XG4gIHZhciB2YWx1ZSA9IGdldFZhbHVlKG9iamVjdCwga2V5KTtcbiAgcmV0dXJuIGJhc2VJc05hdGl2ZSh2YWx1ZSkgPyB2YWx1ZSA6IHVuZGVmaW5lZDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXROYXRpdmU7XG4iLCJ2YXIgYmFzZUdldFRhZyA9IHJlcXVpcmUoJy4vX2Jhc2VHZXRUYWcnKSxcbiAgICBpc09iamVjdCA9IHJlcXVpcmUoJy4vaXNPYmplY3QnKTtcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIGFzeW5jVGFnID0gJ1tvYmplY3QgQXN5bmNGdW5jdGlvbl0nLFxuICAgIGZ1bmNUYWcgPSAnW29iamVjdCBGdW5jdGlvbl0nLFxuICAgIGdlblRhZyA9ICdbb2JqZWN0IEdlbmVyYXRvckZ1bmN0aW9uXScsXG4gICAgcHJveHlUYWcgPSAnW29iamVjdCBQcm94eV0nO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgRnVuY3Rpb25gIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIGZ1bmN0aW9uLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNGdW5jdGlvbihfKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzRnVuY3Rpb24oL2FiYy8pO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNGdW5jdGlvbih2YWx1ZSkge1xuICBpZiAoIWlzT2JqZWN0KHZhbHVlKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICAvLyBUaGUgdXNlIG9mIGBPYmplY3QjdG9TdHJpbmdgIGF2b2lkcyBpc3N1ZXMgd2l0aCB0aGUgYHR5cGVvZmAgb3BlcmF0b3JcbiAgLy8gaW4gU2FmYXJpIDkgd2hpY2ggcmV0dXJucyAnb2JqZWN0JyBmb3IgdHlwZWQgYXJyYXlzIGFuZCBvdGhlciBjb25zdHJ1Y3RvcnMuXG4gIHZhciB0YWcgPSBiYXNlR2V0VGFnKHZhbHVlKTtcbiAgcmV0dXJuIHRhZyA9PSBmdW5jVGFnIHx8IHRhZyA9PSBnZW5UYWcgfHwgdGFnID09IGFzeW5jVGFnIHx8IHRhZyA9PSBwcm94eVRhZztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc0Z1bmN0aW9uO1xuIiwidmFyIGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi9fZGVmaW5lUHJvcGVydHknKTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgYXNzaWduVmFsdWVgIGFuZCBgYXNzaWduTWVyZ2VWYWx1ZWAgd2l0aG91dFxuICogdmFsdWUgY2hlY2tzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gbW9kaWZ5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBhc3NpZ24uXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBhc3NpZ24uXG4gKi9cbmZ1bmN0aW9uIGJhc2VBc3NpZ25WYWx1ZShvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgaWYgKGtleSA9PSAnX19wcm90b19fJyAmJiBkZWZpbmVQcm9wZXJ0eSkge1xuICAgIGRlZmluZVByb3BlcnR5KG9iamVjdCwga2V5LCB7XG4gICAgICAnY29uZmlndXJhYmxlJzogdHJ1ZSxcbiAgICAgICdlbnVtZXJhYmxlJzogdHJ1ZSxcbiAgICAgICd2YWx1ZSc6IHZhbHVlLFxuICAgICAgJ3dyaXRhYmxlJzogdHJ1ZVxuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIG9iamVjdFtrZXldID0gdmFsdWU7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlQXNzaWduVmFsdWU7XG4iLCJ2YXIgaXNGdW5jdGlvbiA9IHJlcXVpcmUoJy4vaXNGdW5jdGlvbicpLFxuICAgIGlzTGVuZ3RoID0gcmVxdWlyZSgnLi9pc0xlbmd0aCcpO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGFycmF5LWxpa2UuIEEgdmFsdWUgaXMgY29uc2lkZXJlZCBhcnJheS1saWtlIGlmIGl0J3NcbiAqIG5vdCBhIGZ1bmN0aW9uIGFuZCBoYXMgYSBgdmFsdWUubGVuZ3RoYCB0aGF0J3MgYW4gaW50ZWdlciBncmVhdGVyIHRoYW4gb3JcbiAqIGVxdWFsIHRvIGAwYCBhbmQgbGVzcyB0aGFuIG9yIGVxdWFsIHRvIGBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUmAuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYXJyYXktbGlrZSwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzQXJyYXlMaWtlKFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FycmF5TGlrZShkb2N1bWVudC5ib2R5LmNoaWxkcmVuKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQXJyYXlMaWtlKCdhYmMnKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQXJyYXlMaWtlKF8ubm9vcCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0FycmF5TGlrZSh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgIT0gbnVsbCAmJiBpc0xlbmd0aCh2YWx1ZS5sZW5ndGgpICYmICFpc0Z1bmN0aW9uKHZhbHVlKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc0FycmF5TGlrZTtcbiIsIi8qIGdsb2JhbCB3aW5kb3cgKi9cbmltcG9ydCBwb255ZmlsbCBmcm9tICcuL3BvbnlmaWxsLmpzJztcblxudmFyIHJvb3Q7XG5cbmlmICh0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgcm9vdCA9IHNlbGY7XG59IGVsc2UgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XG4gIHJvb3QgPSB3aW5kb3c7XG59IGVsc2UgaWYgKHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnKSB7XG4gIHJvb3QgPSBnbG9iYWw7XG59IGVsc2UgaWYgKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnKSB7XG4gIHJvb3QgPSBtb2R1bGU7XG59IGVsc2Uge1xuICByb290ID0gRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcbn1cblxudmFyIHJlc3VsdCA9IHBvbnlmaWxsKHJvb3QpO1xuZXhwb3J0IGRlZmF1bHQgcmVzdWx0O1xuIiwiZnVuY3Rpb24gX2luaGVyaXRzTG9vc2Uoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHtcbiAgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzLnByb3RvdHlwZSk7XG4gIHN1YkNsYXNzLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IHN1YkNsYXNzO1xuICBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9pbmhlcml0c0xvb3NlOyIsInZhciBpc2FycmF5ID0gcmVxdWlyZSgnaXNhcnJheScpXG5cbi8qKlxuICogRXhwb3NlIGBwYXRoVG9SZWdleHBgLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IHBhdGhUb1JlZ2V4cFxubW9kdWxlLmV4cG9ydHMucGFyc2UgPSBwYXJzZVxubW9kdWxlLmV4cG9ydHMuY29tcGlsZSA9IGNvbXBpbGVcbm1vZHVsZS5leHBvcnRzLnRva2Vuc1RvRnVuY3Rpb24gPSB0b2tlbnNUb0Z1bmN0aW9uXG5tb2R1bGUuZXhwb3J0cy50b2tlbnNUb1JlZ0V4cCA9IHRva2Vuc1RvUmVnRXhwXG5cbi8qKlxuICogVGhlIG1haW4gcGF0aCBtYXRjaGluZyByZWdleHAgdXRpbGl0eS5cbiAqXG4gKiBAdHlwZSB7UmVnRXhwfVxuICovXG52YXIgUEFUSF9SRUdFWFAgPSBuZXcgUmVnRXhwKFtcbiAgLy8gTWF0Y2ggZXNjYXBlZCBjaGFyYWN0ZXJzIHRoYXQgd291bGQgb3RoZXJ3aXNlIGFwcGVhciBpbiBmdXR1cmUgbWF0Y2hlcy5cbiAgLy8gVGhpcyBhbGxvd3MgdGhlIHVzZXIgdG8gZXNjYXBlIHNwZWNpYWwgY2hhcmFjdGVycyB0aGF0IHdvbid0IHRyYW5zZm9ybS5cbiAgJyhcXFxcXFxcXC4pJyxcbiAgLy8gTWF0Y2ggRXhwcmVzcy1zdHlsZSBwYXJhbWV0ZXJzIGFuZCB1bi1uYW1lZCBwYXJhbWV0ZXJzIHdpdGggYSBwcmVmaXhcbiAgLy8gYW5kIG9wdGlvbmFsIHN1ZmZpeGVzLiBNYXRjaGVzIGFwcGVhciBhczpcbiAgLy9cbiAgLy8gXCIvOnRlc3QoXFxcXGQrKT9cIiA9PiBbXCIvXCIsIFwidGVzdFwiLCBcIlxcZCtcIiwgdW5kZWZpbmVkLCBcIj9cIiwgdW5kZWZpbmVkXVxuICAvLyBcIi9yb3V0ZShcXFxcZCspXCIgID0+IFt1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBcIlxcZCtcIiwgdW5kZWZpbmVkLCB1bmRlZmluZWRdXG4gIC8vIFwiLypcIiAgICAgICAgICAgID0+IFtcIi9cIiwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBcIipcIl1cbiAgJyhbXFxcXC8uXSk/KD86KD86XFxcXDooXFxcXHcrKSg/OlxcXFwoKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcKCldKSspXFxcXCkpP3xcXFxcKCgoPzpcXFxcXFxcXC58W15cXFxcXFxcXCgpXSkrKVxcXFwpKShbKyo/XSk/fChcXFxcKikpJ1xuXS5qb2luKCd8JyksICdnJylcblxuLyoqXG4gKiBQYXJzZSBhIHN0cmluZyBmb3IgdGhlIHJhdyB0b2tlbnMuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSAgc3RyXG4gKiBAcGFyYW0gIHtPYmplY3Q9fSBvcHRpb25zXG4gKiBAcmV0dXJuIHshQXJyYXl9XG4gKi9cbmZ1bmN0aW9uIHBhcnNlIChzdHIsIG9wdGlvbnMpIHtcbiAgdmFyIHRva2VucyA9IFtdXG4gIHZhciBrZXkgPSAwXG4gIHZhciBpbmRleCA9IDBcbiAgdmFyIHBhdGggPSAnJ1xuICB2YXIgZGVmYXVsdERlbGltaXRlciA9IG9wdGlvbnMgJiYgb3B0aW9ucy5kZWxpbWl0ZXIgfHwgJy8nXG4gIHZhciByZXNcblxuICB3aGlsZSAoKHJlcyA9IFBBVEhfUkVHRVhQLmV4ZWMoc3RyKSkgIT0gbnVsbCkge1xuICAgIHZhciBtID0gcmVzWzBdXG4gICAgdmFyIGVzY2FwZWQgPSByZXNbMV1cbiAgICB2YXIgb2Zmc2V0ID0gcmVzLmluZGV4XG4gICAgcGF0aCArPSBzdHIuc2xpY2UoaW5kZXgsIG9mZnNldClcbiAgICBpbmRleCA9IG9mZnNldCArIG0ubGVuZ3RoXG5cbiAgICAvLyBJZ25vcmUgYWxyZWFkeSBlc2NhcGVkIHNlcXVlbmNlcy5cbiAgICBpZiAoZXNjYXBlZCkge1xuICAgICAgcGF0aCArPSBlc2NhcGVkWzFdXG4gICAgICBjb250aW51ZVxuICAgIH1cblxuICAgIHZhciBuZXh0ID0gc3RyW2luZGV4XVxuICAgIHZhciBwcmVmaXggPSByZXNbMl1cbiAgICB2YXIgbmFtZSA9IHJlc1szXVxuICAgIHZhciBjYXB0dXJlID0gcmVzWzRdXG4gICAgdmFyIGdyb3VwID0gcmVzWzVdXG4gICAgdmFyIG1vZGlmaWVyID0gcmVzWzZdXG4gICAgdmFyIGFzdGVyaXNrID0gcmVzWzddXG5cbiAgICAvLyBQdXNoIHRoZSBjdXJyZW50IHBhdGggb250byB0aGUgdG9rZW5zLlxuICAgIGlmIChwYXRoKSB7XG4gICAgICB0b2tlbnMucHVzaChwYXRoKVxuICAgICAgcGF0aCA9ICcnXG4gICAgfVxuXG4gICAgdmFyIHBhcnRpYWwgPSBwcmVmaXggIT0gbnVsbCAmJiBuZXh0ICE9IG51bGwgJiYgbmV4dCAhPT0gcHJlZml4XG4gICAgdmFyIHJlcGVhdCA9IG1vZGlmaWVyID09PSAnKycgfHwgbW9kaWZpZXIgPT09ICcqJ1xuICAgIHZhciBvcHRpb25hbCA9IG1vZGlmaWVyID09PSAnPycgfHwgbW9kaWZpZXIgPT09ICcqJ1xuICAgIHZhciBkZWxpbWl0ZXIgPSByZXNbMl0gfHwgZGVmYXVsdERlbGltaXRlclxuICAgIHZhciBwYXR0ZXJuID0gY2FwdHVyZSB8fCBncm91cFxuXG4gICAgdG9rZW5zLnB1c2goe1xuICAgICAgbmFtZTogbmFtZSB8fCBrZXkrKyxcbiAgICAgIHByZWZpeDogcHJlZml4IHx8ICcnLFxuICAgICAgZGVsaW1pdGVyOiBkZWxpbWl0ZXIsXG4gICAgICBvcHRpb25hbDogb3B0aW9uYWwsXG4gICAgICByZXBlYXQ6IHJlcGVhdCxcbiAgICAgIHBhcnRpYWw6IHBhcnRpYWwsXG4gICAgICBhc3RlcmlzazogISFhc3RlcmlzayxcbiAgICAgIHBhdHRlcm46IHBhdHRlcm4gPyBlc2NhcGVHcm91cChwYXR0ZXJuKSA6IChhc3RlcmlzayA/ICcuKicgOiAnW14nICsgZXNjYXBlU3RyaW5nKGRlbGltaXRlcikgKyAnXSs/JylcbiAgICB9KVxuICB9XG5cbiAgLy8gTWF0Y2ggYW55IGNoYXJhY3RlcnMgc3RpbGwgcmVtYWluaW5nLlxuICBpZiAoaW5kZXggPCBzdHIubGVuZ3RoKSB7XG4gICAgcGF0aCArPSBzdHIuc3Vic3RyKGluZGV4KVxuICB9XG5cbiAgLy8gSWYgdGhlIHBhdGggZXhpc3RzLCBwdXNoIGl0IG9udG8gdGhlIGVuZC5cbiAgaWYgKHBhdGgpIHtcbiAgICB0b2tlbnMucHVzaChwYXRoKVxuICB9XG5cbiAgcmV0dXJuIHRva2Vuc1xufVxuXG4vKipcbiAqIENvbXBpbGUgYSBzdHJpbmcgdG8gYSB0ZW1wbGF0ZSBmdW5jdGlvbiBmb3IgdGhlIHBhdGguXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSAgICAgICAgICAgICBzdHJcbiAqIEBwYXJhbSAge09iamVjdD19ICAgICAgICAgICAgb3B0aW9uc1xuICogQHJldHVybiB7IWZ1bmN0aW9uKE9iamVjdD0sIE9iamVjdD0pfVxuICovXG5mdW5jdGlvbiBjb21waWxlIChzdHIsIG9wdGlvbnMpIHtcbiAgcmV0dXJuIHRva2Vuc1RvRnVuY3Rpb24ocGFyc2Uoc3RyLCBvcHRpb25zKSlcbn1cblxuLyoqXG4gKiBQcmV0dGllciBlbmNvZGluZyBvZiBVUkkgcGF0aCBzZWdtZW50cy5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9XG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGVuY29kZVVSSUNvbXBvbmVudFByZXR0eSAoc3RyKSB7XG4gIHJldHVybiBlbmNvZGVVUkkoc3RyKS5yZXBsYWNlKC9bXFwvPyNdL2csIGZ1bmN0aW9uIChjKSB7XG4gICAgcmV0dXJuICclJyArIGMuY2hhckNvZGVBdCgwKS50b1N0cmluZygxNikudG9VcHBlckNhc2UoKVxuICB9KVxufVxuXG4vKipcbiAqIEVuY29kZSB0aGUgYXN0ZXJpc2sgcGFyYW1ldGVyLiBTaW1pbGFyIHRvIGBwcmV0dHlgLCBidXQgYWxsb3dzIHNsYXNoZXMuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfVxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBlbmNvZGVBc3RlcmlzayAoc3RyKSB7XG4gIHJldHVybiBlbmNvZGVVUkkoc3RyKS5yZXBsYWNlKC9bPyNdL2csIGZ1bmN0aW9uIChjKSB7XG4gICAgcmV0dXJuICclJyArIGMuY2hhckNvZGVBdCgwKS50b1N0cmluZygxNikudG9VcHBlckNhc2UoKVxuICB9KVxufVxuXG4vKipcbiAqIEV4cG9zZSBhIG1ldGhvZCBmb3IgdHJhbnNmb3JtaW5nIHRva2VucyBpbnRvIHRoZSBwYXRoIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiB0b2tlbnNUb0Z1bmN0aW9uICh0b2tlbnMpIHtcbiAgLy8gQ29tcGlsZSBhbGwgdGhlIHRva2VucyBpbnRvIHJlZ2V4cHMuXG4gIHZhciBtYXRjaGVzID0gbmV3IEFycmF5KHRva2Vucy5sZW5ndGgpXG5cbiAgLy8gQ29tcGlsZSBhbGwgdGhlIHBhdHRlcm5zIGJlZm9yZSBjb21waWxhdGlvbi5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB0b2tlbnMubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAodHlwZW9mIHRva2Vuc1tpXSA9PT0gJ29iamVjdCcpIHtcbiAgICAgIG1hdGNoZXNbaV0gPSBuZXcgUmVnRXhwKCdeKD86JyArIHRva2Vuc1tpXS5wYXR0ZXJuICsgJykkJylcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKG9iaiwgb3B0cykge1xuICAgIHZhciBwYXRoID0gJydcbiAgICB2YXIgZGF0YSA9IG9iaiB8fCB7fVxuICAgIHZhciBvcHRpb25zID0gb3B0cyB8fCB7fVxuICAgIHZhciBlbmNvZGUgPSBvcHRpb25zLnByZXR0eSA/IGVuY29kZVVSSUNvbXBvbmVudFByZXR0eSA6IGVuY29kZVVSSUNvbXBvbmVudFxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0b2tlbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciB0b2tlbiA9IHRva2Vuc1tpXVxuXG4gICAgICBpZiAodHlwZW9mIHRva2VuID09PSAnc3RyaW5nJykge1xuICAgICAgICBwYXRoICs9IHRva2VuXG5cbiAgICAgICAgY29udGludWVcbiAgICAgIH1cblxuICAgICAgdmFyIHZhbHVlID0gZGF0YVt0b2tlbi5uYW1lXVxuICAgICAgdmFyIHNlZ21lbnRcblxuICAgICAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICAgICAgaWYgKHRva2VuLm9wdGlvbmFsKSB7XG4gICAgICAgICAgLy8gUHJlcGVuZCBwYXJ0aWFsIHNlZ21lbnQgcHJlZml4ZXMuXG4gICAgICAgICAgaWYgKHRva2VuLnBhcnRpYWwpIHtcbiAgICAgICAgICAgIHBhdGggKz0gdG9rZW4ucHJlZml4XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29udGludWVcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBcIicgKyB0b2tlbi5uYW1lICsgJ1wiIHRvIGJlIGRlZmluZWQnKVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChpc2FycmF5KHZhbHVlKSkge1xuICAgICAgICBpZiAoIXRva2VuLnJlcGVhdCkge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIFwiJyArIHRva2VuLm5hbWUgKyAnXCIgdG8gbm90IHJlcGVhdCwgYnV0IHJlY2VpdmVkIGAnICsgSlNPTi5zdHJpbmdpZnkodmFsdWUpICsgJ2AnKVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHZhbHVlLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgIGlmICh0b2tlbi5vcHRpb25hbCkge1xuICAgICAgICAgICAgY29udGludWVcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgXCInICsgdG9rZW4ubmFtZSArICdcIiB0byBub3QgYmUgZW1wdHknKVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgdmFsdWUubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICBzZWdtZW50ID0gZW5jb2RlKHZhbHVlW2pdKVxuXG4gICAgICAgICAgaWYgKCFtYXRjaGVzW2ldLnRlc3Qoc2VnbWVudCkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIGFsbCBcIicgKyB0b2tlbi5uYW1lICsgJ1wiIHRvIG1hdGNoIFwiJyArIHRva2VuLnBhdHRlcm4gKyAnXCIsIGJ1dCByZWNlaXZlZCBgJyArIEpTT04uc3RyaW5naWZ5KHNlZ21lbnQpICsgJ2AnKVxuICAgICAgICAgIH1cblxuICAgICAgICAgIHBhdGggKz0gKGogPT09IDAgPyB0b2tlbi5wcmVmaXggOiB0b2tlbi5kZWxpbWl0ZXIpICsgc2VnbWVudFxuICAgICAgICB9XG5cbiAgICAgICAgY29udGludWVcbiAgICAgIH1cblxuICAgICAgc2VnbWVudCA9IHRva2VuLmFzdGVyaXNrID8gZW5jb2RlQXN0ZXJpc2sodmFsdWUpIDogZW5jb2RlKHZhbHVlKVxuXG4gICAgICBpZiAoIW1hdGNoZXNbaV0udGVzdChzZWdtZW50KSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBcIicgKyB0b2tlbi5uYW1lICsgJ1wiIHRvIG1hdGNoIFwiJyArIHRva2VuLnBhdHRlcm4gKyAnXCIsIGJ1dCByZWNlaXZlZCBcIicgKyBzZWdtZW50ICsgJ1wiJylcbiAgICAgIH1cblxuICAgICAgcGF0aCArPSB0b2tlbi5wcmVmaXggKyBzZWdtZW50XG4gICAgfVxuXG4gICAgcmV0dXJuIHBhdGhcbiAgfVxufVxuXG4vKipcbiAqIEVzY2FwZSBhIHJlZ3VsYXIgZXhwcmVzc2lvbiBzdHJpbmcuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSBzdHJcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gZXNjYXBlU3RyaW5nIChzdHIpIHtcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKC8oWy4rKj89XiE6JHt9KClbXFxdfFxcL1xcXFxdKS9nLCAnXFxcXCQxJylcbn1cblxuLyoqXG4gKiBFc2NhcGUgdGhlIGNhcHR1cmluZyBncm91cCBieSBlc2NhcGluZyBzcGVjaWFsIGNoYXJhY3RlcnMgYW5kIG1lYW5pbmcuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSBncm91cFxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBlc2NhcGVHcm91cCAoZ3JvdXApIHtcbiAgcmV0dXJuIGdyb3VwLnJlcGxhY2UoLyhbPSE6JFxcLygpXSkvZywgJ1xcXFwkMScpXG59XG5cbi8qKlxuICogQXR0YWNoIHRoZSBrZXlzIGFzIGEgcHJvcGVydHkgb2YgdGhlIHJlZ2V4cC5cbiAqXG4gKiBAcGFyYW0gIHshUmVnRXhwfSByZVxuICogQHBhcmFtICB7QXJyYXl9ICAga2V5c1xuICogQHJldHVybiB7IVJlZ0V4cH1cbiAqL1xuZnVuY3Rpb24gYXR0YWNoS2V5cyAocmUsIGtleXMpIHtcbiAgcmUua2V5cyA9IGtleXNcbiAgcmV0dXJuIHJlXG59XG5cbi8qKlxuICogR2V0IHRoZSBmbGFncyBmb3IgYSByZWdleHAgZnJvbSB0aGUgb3B0aW9ucy5cbiAqXG4gKiBAcGFyYW0gIHtPYmplY3R9IG9wdGlvbnNcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gZmxhZ3MgKG9wdGlvbnMpIHtcbiAgcmV0dXJuIG9wdGlvbnMuc2Vuc2l0aXZlID8gJycgOiAnaSdcbn1cblxuLyoqXG4gKiBQdWxsIG91dCBrZXlzIGZyb20gYSByZWdleHAuXG4gKlxuICogQHBhcmFtICB7IVJlZ0V4cH0gcGF0aFxuICogQHBhcmFtICB7IUFycmF5fSAga2V5c1xuICogQHJldHVybiB7IVJlZ0V4cH1cbiAqL1xuZnVuY3Rpb24gcmVnZXhwVG9SZWdleHAgKHBhdGgsIGtleXMpIHtcbiAgLy8gVXNlIGEgbmVnYXRpdmUgbG9va2FoZWFkIHRvIG1hdGNoIG9ubHkgY2FwdHVyaW5nIGdyb3Vwcy5cbiAgdmFyIGdyb3VwcyA9IHBhdGguc291cmNlLm1hdGNoKC9cXCgoPyFcXD8pL2cpXG5cbiAgaWYgKGdyb3Vwcykge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZ3JvdXBzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBrZXlzLnB1c2goe1xuICAgICAgICBuYW1lOiBpLFxuICAgICAgICBwcmVmaXg6IG51bGwsXG4gICAgICAgIGRlbGltaXRlcjogbnVsbCxcbiAgICAgICAgb3B0aW9uYWw6IGZhbHNlLFxuICAgICAgICByZXBlYXQ6IGZhbHNlLFxuICAgICAgICBwYXJ0aWFsOiBmYWxzZSxcbiAgICAgICAgYXN0ZXJpc2s6IGZhbHNlLFxuICAgICAgICBwYXR0ZXJuOiBudWxsXG4gICAgICB9KVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBhdHRhY2hLZXlzKHBhdGgsIGtleXMpXG59XG5cbi8qKlxuICogVHJhbnNmb3JtIGFuIGFycmF5IGludG8gYSByZWdleHAuXG4gKlxuICogQHBhcmFtICB7IUFycmF5fSAgcGF0aFxuICogQHBhcmFtICB7QXJyYXl9ICAga2V5c1xuICogQHBhcmFtICB7IU9iamVjdH0gb3B0aW9uc1xuICogQHJldHVybiB7IVJlZ0V4cH1cbiAqL1xuZnVuY3Rpb24gYXJyYXlUb1JlZ2V4cCAocGF0aCwga2V5cywgb3B0aW9ucykge1xuICB2YXIgcGFydHMgPSBbXVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcGF0aC5sZW5ndGg7IGkrKykge1xuICAgIHBhcnRzLnB1c2gocGF0aFRvUmVnZXhwKHBhdGhbaV0sIGtleXMsIG9wdGlvbnMpLnNvdXJjZSlcbiAgfVxuXG4gIHZhciByZWdleHAgPSBuZXcgUmVnRXhwKCcoPzonICsgcGFydHMuam9pbignfCcpICsgJyknLCBmbGFncyhvcHRpb25zKSlcblxuICByZXR1cm4gYXR0YWNoS2V5cyhyZWdleHAsIGtleXMpXG59XG5cbi8qKlxuICogQ3JlYXRlIGEgcGF0aCByZWdleHAgZnJvbSBzdHJpbmcgaW5wdXQuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSAgcGF0aFxuICogQHBhcmFtICB7IUFycmF5fSAga2V5c1xuICogQHBhcmFtICB7IU9iamVjdH0gb3B0aW9uc1xuICogQHJldHVybiB7IVJlZ0V4cH1cbiAqL1xuZnVuY3Rpb24gc3RyaW5nVG9SZWdleHAgKHBhdGgsIGtleXMsIG9wdGlvbnMpIHtcbiAgcmV0dXJuIHRva2Vuc1RvUmVnRXhwKHBhcnNlKHBhdGgsIG9wdGlvbnMpLCBrZXlzLCBvcHRpb25zKVxufVxuXG4vKipcbiAqIEV4cG9zZSBhIGZ1bmN0aW9uIGZvciB0YWtpbmcgdG9rZW5zIGFuZCByZXR1cm5pbmcgYSBSZWdFeHAuXG4gKlxuICogQHBhcmFtICB7IUFycmF5fSAgICAgICAgICB0b2tlbnNcbiAqIEBwYXJhbSAgeyhBcnJheXxPYmplY3QpPX0ga2V5c1xuICogQHBhcmFtICB7T2JqZWN0PX0gICAgICAgICBvcHRpb25zXG4gKiBAcmV0dXJuIHshUmVnRXhwfVxuICovXG5mdW5jdGlvbiB0b2tlbnNUb1JlZ0V4cCAodG9rZW5zLCBrZXlzLCBvcHRpb25zKSB7XG4gIGlmICghaXNhcnJheShrZXlzKSkge1xuICAgIG9wdGlvbnMgPSAvKiogQHR5cGUgeyFPYmplY3R9ICovIChrZXlzIHx8IG9wdGlvbnMpXG4gICAga2V5cyA9IFtdXG4gIH1cblxuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fVxuXG4gIHZhciBzdHJpY3QgPSBvcHRpb25zLnN0cmljdFxuICB2YXIgZW5kID0gb3B0aW9ucy5lbmQgIT09IGZhbHNlXG4gIHZhciByb3V0ZSA9ICcnXG5cbiAgLy8gSXRlcmF0ZSBvdmVyIHRoZSB0b2tlbnMgYW5kIGNyZWF0ZSBvdXIgcmVnZXhwIHN0cmluZy5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB0b2tlbnMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgdG9rZW4gPSB0b2tlbnNbaV1cblxuICAgIGlmICh0eXBlb2YgdG9rZW4gPT09ICdzdHJpbmcnKSB7XG4gICAgICByb3V0ZSArPSBlc2NhcGVTdHJpbmcodG9rZW4pXG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBwcmVmaXggPSBlc2NhcGVTdHJpbmcodG9rZW4ucHJlZml4KVxuICAgICAgdmFyIGNhcHR1cmUgPSAnKD86JyArIHRva2VuLnBhdHRlcm4gKyAnKSdcblxuICAgICAga2V5cy5wdXNoKHRva2VuKVxuXG4gICAgICBpZiAodG9rZW4ucmVwZWF0KSB7XG4gICAgICAgIGNhcHR1cmUgKz0gJyg/OicgKyBwcmVmaXggKyBjYXB0dXJlICsgJykqJ1xuICAgICAgfVxuXG4gICAgICBpZiAodG9rZW4ub3B0aW9uYWwpIHtcbiAgICAgICAgaWYgKCF0b2tlbi5wYXJ0aWFsKSB7XG4gICAgICAgICAgY2FwdHVyZSA9ICcoPzonICsgcHJlZml4ICsgJygnICsgY2FwdHVyZSArICcpKT8nXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY2FwdHVyZSA9IHByZWZpeCArICcoJyArIGNhcHR1cmUgKyAnKT8nXG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNhcHR1cmUgPSBwcmVmaXggKyAnKCcgKyBjYXB0dXJlICsgJyknXG4gICAgICB9XG5cbiAgICAgIHJvdXRlICs9IGNhcHR1cmVcbiAgICB9XG4gIH1cblxuICB2YXIgZGVsaW1pdGVyID0gZXNjYXBlU3RyaW5nKG9wdGlvbnMuZGVsaW1pdGVyIHx8ICcvJylcbiAgdmFyIGVuZHNXaXRoRGVsaW1pdGVyID0gcm91dGUuc2xpY2UoLWRlbGltaXRlci5sZW5ndGgpID09PSBkZWxpbWl0ZXJcblxuICAvLyBJbiBub24tc3RyaWN0IG1vZGUgd2UgYWxsb3cgYSBzbGFzaCBhdCB0aGUgZW5kIG9mIG1hdGNoLiBJZiB0aGUgcGF0aCB0b1xuICAvLyBtYXRjaCBhbHJlYWR5IGVuZHMgd2l0aCBhIHNsYXNoLCB3ZSByZW1vdmUgaXQgZm9yIGNvbnNpc3RlbmN5LiBUaGUgc2xhc2hcbiAgLy8gaXMgdmFsaWQgYXQgdGhlIGVuZCBvZiBhIHBhdGggbWF0Y2gsIG5vdCBpbiB0aGUgbWlkZGxlLiBUaGlzIGlzIGltcG9ydGFudFxuICAvLyBpbiBub24tZW5kaW5nIG1vZGUsIHdoZXJlIFwiL3Rlc3QvXCIgc2hvdWxkbid0IG1hdGNoIFwiL3Rlc3QvL3JvdXRlXCIuXG4gIGlmICghc3RyaWN0KSB7XG4gICAgcm91dGUgPSAoZW5kc1dpdGhEZWxpbWl0ZXIgPyByb3V0ZS5zbGljZSgwLCAtZGVsaW1pdGVyLmxlbmd0aCkgOiByb3V0ZSkgKyAnKD86JyArIGRlbGltaXRlciArICcoPz0kKSk/J1xuICB9XG5cbiAgaWYgKGVuZCkge1xuICAgIHJvdXRlICs9ICckJ1xuICB9IGVsc2Uge1xuICAgIC8vIEluIG5vbi1lbmRpbmcgbW9kZSwgd2UgbmVlZCB0aGUgY2FwdHVyaW5nIGdyb3VwcyB0byBtYXRjaCBhcyBtdWNoIGFzXG4gICAgLy8gcG9zc2libGUgYnkgdXNpbmcgYSBwb3NpdGl2ZSBsb29rYWhlYWQgdG8gdGhlIGVuZCBvciBuZXh0IHBhdGggc2VnbWVudC5cbiAgICByb3V0ZSArPSBzdHJpY3QgJiYgZW5kc1dpdGhEZWxpbWl0ZXIgPyAnJyA6ICcoPz0nICsgZGVsaW1pdGVyICsgJ3wkKSdcbiAgfVxuXG4gIHJldHVybiBhdHRhY2hLZXlzKG5ldyBSZWdFeHAoJ14nICsgcm91dGUsIGZsYWdzKG9wdGlvbnMpKSwga2V5cylcbn1cblxuLyoqXG4gKiBOb3JtYWxpemUgdGhlIGdpdmVuIHBhdGggc3RyaW5nLCByZXR1cm5pbmcgYSByZWd1bGFyIGV4cHJlc3Npb24uXG4gKlxuICogQW4gZW1wdHkgYXJyYXkgY2FuIGJlIHBhc3NlZCBpbiBmb3IgdGhlIGtleXMsIHdoaWNoIHdpbGwgaG9sZCB0aGVcbiAqIHBsYWNlaG9sZGVyIGtleSBkZXNjcmlwdGlvbnMuIEZvciBleGFtcGxlLCB1c2luZyBgL3VzZXIvOmlkYCwgYGtleXNgIHdpbGxcbiAqIGNvbnRhaW4gYFt7IG5hbWU6ICdpZCcsIGRlbGltaXRlcjogJy8nLCBvcHRpb25hbDogZmFsc2UsIHJlcGVhdDogZmFsc2UgfV1gLlxuICpcbiAqIEBwYXJhbSAgeyhzdHJpbmd8UmVnRXhwfEFycmF5KX0gcGF0aFxuICogQHBhcmFtICB7KEFycmF5fE9iamVjdCk9fSAgICAgICBrZXlzXG4gKiBAcGFyYW0gIHtPYmplY3Q9fSAgICAgICAgICAgICAgIG9wdGlvbnNcbiAqIEByZXR1cm4geyFSZWdFeHB9XG4gKi9cbmZ1bmN0aW9uIHBhdGhUb1JlZ2V4cCAocGF0aCwga2V5cywgb3B0aW9ucykge1xuICBpZiAoIWlzYXJyYXkoa2V5cykpIHtcbiAgICBvcHRpb25zID0gLyoqIEB0eXBlIHshT2JqZWN0fSAqLyAoa2V5cyB8fCBvcHRpb25zKVxuICAgIGtleXMgPSBbXVxuICB9XG5cbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge31cblxuICBpZiAocGF0aCBpbnN0YW5jZW9mIFJlZ0V4cCkge1xuICAgIHJldHVybiByZWdleHBUb1JlZ2V4cChwYXRoLCAvKiogQHR5cGUgeyFBcnJheX0gKi8gKGtleXMpKVxuICB9XG5cbiAgaWYgKGlzYXJyYXkocGF0aCkpIHtcbiAgICByZXR1cm4gYXJyYXlUb1JlZ2V4cCgvKiogQHR5cGUgeyFBcnJheX0gKi8gKHBhdGgpLCAvKiogQHR5cGUgeyFBcnJheX0gKi8gKGtleXMpLCBvcHRpb25zKVxuICB9XG5cbiAgcmV0dXJuIHN0cmluZ1RvUmVnZXhwKC8qKiBAdHlwZSB7c3RyaW5nfSAqLyAocGF0aCksIC8qKiBAdHlwZSB7IUFycmF5fSAqLyAoa2V5cyksIG9wdGlvbnMpXG59XG4iLCIvKlxub2JqZWN0LWFzc2lnblxuKGMpIFNpbmRyZSBTb3JodXNcbkBsaWNlbnNlIE1JVFxuKi9cblxuJ3VzZSBzdHJpY3QnO1xuLyogZXNsaW50LWRpc2FibGUgbm8tdW51c2VkLXZhcnMgKi9cbnZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xudmFyIGhhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBwcm9wSXNFbnVtZXJhYmxlID0gT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcblxuZnVuY3Rpb24gdG9PYmplY3QodmFsKSB7XG5cdGlmICh2YWwgPT09IG51bGwgfHwgdmFsID09PSB1bmRlZmluZWQpIHtcblx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdPYmplY3QuYXNzaWduIGNhbm5vdCBiZSBjYWxsZWQgd2l0aCBudWxsIG9yIHVuZGVmaW5lZCcpO1xuXHR9XG5cblx0cmV0dXJuIE9iamVjdCh2YWwpO1xufVxuXG5mdW5jdGlvbiBzaG91bGRVc2VOYXRpdmUoKSB7XG5cdHRyeSB7XG5cdFx0aWYgKCFPYmplY3QuYXNzaWduKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gRGV0ZWN0IGJ1Z2d5IHByb3BlcnR5IGVudW1lcmF0aW9uIG9yZGVyIGluIG9sZGVyIFY4IHZlcnNpb25zLlxuXG5cdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9NDExOFxuXHRcdHZhciB0ZXN0MSA9IG5ldyBTdHJpbmcoJ2FiYycpOyAgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXctd3JhcHBlcnNcblx0XHR0ZXN0MVs1XSA9ICdkZSc7XG5cdFx0aWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRlc3QxKVswXSA9PT0gJzUnKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MzA1NlxuXHRcdHZhciB0ZXN0MiA9IHt9O1xuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgMTA7IGkrKykge1xuXHRcdFx0dGVzdDJbJ18nICsgU3RyaW5nLmZyb21DaGFyQ29kZShpKV0gPSBpO1xuXHRcdH1cblx0XHR2YXIgb3JkZXIyID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGVzdDIpLm1hcChmdW5jdGlvbiAobikge1xuXHRcdFx0cmV0dXJuIHRlc3QyW25dO1xuXHRcdH0pO1xuXHRcdGlmIChvcmRlcjIuam9pbignJykgIT09ICcwMTIzNDU2Nzg5Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTMwNTZcblx0XHR2YXIgdGVzdDMgPSB7fTtcblx0XHQnYWJjZGVmZ2hpamtsbW5vcHFyc3QnLnNwbGl0KCcnKS5mb3JFYWNoKGZ1bmN0aW9uIChsZXR0ZXIpIHtcblx0XHRcdHRlc3QzW2xldHRlcl0gPSBsZXR0ZXI7XG5cdFx0fSk7XG5cdFx0aWYgKE9iamVjdC5rZXlzKE9iamVjdC5hc3NpZ24oe30sIHRlc3QzKSkuam9pbignJykgIT09XG5cdFx0XHRcdCdhYmNkZWZnaGlqa2xtbm9wcXJzdCcpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdHJ1ZTtcblx0fSBjYXRjaCAoZXJyKSB7XG5cdFx0Ly8gV2UgZG9uJ3QgZXhwZWN0IGFueSBvZiB0aGUgYWJvdmUgdG8gdGhyb3csIGJ1dCBiZXR0ZXIgdG8gYmUgc2FmZS5cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzaG91bGRVc2VOYXRpdmUoKSA/IE9iamVjdC5hc3NpZ24gOiBmdW5jdGlvbiAodGFyZ2V0LCBzb3VyY2UpIHtcblx0dmFyIGZyb207XG5cdHZhciB0byA9IHRvT2JqZWN0KHRhcmdldCk7XG5cdHZhciBzeW1ib2xzO1xuXG5cdGZvciAodmFyIHMgPSAxOyBzIDwgYXJndW1lbnRzLmxlbmd0aDsgcysrKSB7XG5cdFx0ZnJvbSA9IE9iamVjdChhcmd1bWVudHNbc10pO1xuXG5cdFx0Zm9yICh2YXIga2V5IGluIGZyb20pIHtcblx0XHRcdGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKGZyb20sIGtleSkpIHtcblx0XHRcdFx0dG9ba2V5XSA9IGZyb21ba2V5XTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG5cdFx0XHRzeW1ib2xzID0gZ2V0T3duUHJvcGVydHlTeW1ib2xzKGZyb20pO1xuXHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBzeW1ib2xzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdGlmIChwcm9wSXNFbnVtZXJhYmxlLmNhbGwoZnJvbSwgc3ltYm9sc1tpXSkpIHtcblx0XHRcdFx0XHR0b1tzeW1ib2xzW2ldXSA9IGZyb21bc3ltYm9sc1tpXV07XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gdG87XG59O1xuIiwidmFyIGdldE5hdGl2ZSA9IHJlcXVpcmUoJy4vX2dldE5hdGl2ZScpLFxuICAgIHJvb3QgPSByZXF1aXJlKCcuL19yb290Jyk7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIHRoYXQgYXJlIHZlcmlmaWVkIHRvIGJlIG5hdGl2ZS4gKi9cbnZhciBNYXAgPSBnZXROYXRpdmUocm9vdCwgJ01hcCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IE1hcDtcbiIsInZhciByb290ID0gcmVxdWlyZSgnLi9fcm9vdCcpO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBTeW1ib2wgPSByb290LlN5bWJvbDtcblxubW9kdWxlLmV4cG9ydHMgPSBTeW1ib2w7XG4iLCIvKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYGdsb2JhbGAgZnJvbSBOb2RlLmpzLiAqL1xudmFyIGZyZWVHbG9iYWwgPSB0eXBlb2YgZ2xvYmFsID09ICdvYmplY3QnICYmIGdsb2JhbCAmJiBnbG9iYWwuT2JqZWN0ID09PSBPYmplY3QgJiYgZ2xvYmFsO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZyZWVHbG9iYWw7XG4iLCJ2YXIgYmFzZUFzc2lnblZhbHVlID0gcmVxdWlyZSgnLi9fYmFzZUFzc2lnblZhbHVlJyksXG4gICAgZXEgPSByZXF1aXJlKCcuL2VxJyk7XG5cbi8qKlxuICogVGhpcyBmdW5jdGlvbiBpcyBsaWtlIGBhc3NpZ25WYWx1ZWAgZXhjZXB0IHRoYXQgaXQgZG9lc24ndCBhc3NpZ25cbiAqIGB1bmRlZmluZWRgIHZhbHVlcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIG1vZGlmeS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gYXNzaWduLlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gYXNzaWduLlxuICovXG5mdW5jdGlvbiBhc3NpZ25NZXJnZVZhbHVlKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICBpZiAoKHZhbHVlICE9PSB1bmRlZmluZWQgJiYgIWVxKG9iamVjdFtrZXldLCB2YWx1ZSkpIHx8XG4gICAgICAodmFsdWUgPT09IHVuZGVmaW5lZCAmJiAhKGtleSBpbiBvYmplY3QpKSkge1xuICAgIGJhc2VBc3NpZ25WYWx1ZShvYmplY3QsIGtleSwgdmFsdWUpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYXNzaWduTWVyZ2VWYWx1ZTtcbiIsInZhciBnZXROYXRpdmUgPSByZXF1aXJlKCcuL19nZXROYXRpdmUnKTtcblxudmFyIGRlZmluZVByb3BlcnR5ID0gKGZ1bmN0aW9uKCkge1xuICB0cnkge1xuICAgIHZhciBmdW5jID0gZ2V0TmF0aXZlKE9iamVjdCwgJ2RlZmluZVByb3BlcnR5Jyk7XG4gICAgZnVuYyh7fSwgJycsIHt9KTtcbiAgICByZXR1cm4gZnVuYztcbiAgfSBjYXRjaCAoZSkge31cbn0oKSk7XG5cbm1vZHVsZS5leHBvcnRzID0gZGVmaW5lUHJvcGVydHk7XG4iLCJ2YXIgb3ZlckFyZyA9IHJlcXVpcmUoJy4vX292ZXJBcmcnKTtcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgZ2V0UHJvdG90eXBlID0gb3ZlckFyZyhPYmplY3QuZ2V0UHJvdG90eXBlT2YsIE9iamVjdCk7XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0UHJvdG90eXBlO1xuIiwiLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBsaWtlbHkgYSBwcm90b3R5cGUgb2JqZWN0LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgcHJvdG90eXBlLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGlzUHJvdG90eXBlKHZhbHVlKSB7XG4gIHZhciBDdG9yID0gdmFsdWUgJiYgdmFsdWUuY29uc3RydWN0b3IsXG4gICAgICBwcm90byA9ICh0eXBlb2YgQ3RvciA9PSAnZnVuY3Rpb24nICYmIEN0b3IucHJvdG90eXBlKSB8fCBvYmplY3RQcm90bztcblxuICByZXR1cm4gdmFsdWUgPT09IHByb3RvO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzUHJvdG90eXBlO1xuIiwidmFyIGJhc2VJc0FyZ3VtZW50cyA9IHJlcXVpcmUoJy4vX2Jhc2VJc0FyZ3VtZW50cycpLFxuICAgIGlzT2JqZWN0TGlrZSA9IHJlcXVpcmUoJy4vaXNPYmplY3RMaWtlJyk7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIHByb3BlcnR5SXNFbnVtZXJhYmxlID0gb2JqZWN0UHJvdG8ucHJvcGVydHlJc0VudW1lcmFibGU7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgbGlrZWx5IGFuIGBhcmd1bWVudHNgIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBgYXJndW1lbnRzYCBvYmplY3QsXG4gKiAgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzQXJndW1lbnRzKGZ1bmN0aW9uKCkgeyByZXR1cm4gYXJndW1lbnRzOyB9KCkpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNBcmd1bWVudHMoWzEsIDIsIDNdKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbnZhciBpc0FyZ3VtZW50cyA9IGJhc2VJc0FyZ3VtZW50cyhmdW5jdGlvbigpIHsgcmV0dXJuIGFyZ3VtZW50czsgfSgpKSA/IGJhc2VJc0FyZ3VtZW50cyA6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIGhhc093blByb3BlcnR5LmNhbGwodmFsdWUsICdjYWxsZWUnKSAmJlxuICAgICFwcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHZhbHVlLCAnY2FsbGVlJyk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGlzQXJndW1lbnRzO1xuIiwiLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGFuIGBBcnJheWAgb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGFycmF5LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNBcnJheShbMSwgMiwgM10pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNBcnJheShkb2N1bWVudC5ib2R5LmNoaWxkcmVuKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc0FycmF5KCdhYmMnKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc0FycmF5KF8ubm9vcCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG52YXIgaXNBcnJheSA9IEFycmF5LmlzQXJyYXk7XG5cbm1vZHVsZS5leHBvcnRzID0gaXNBcnJheTtcbiIsIi8qKiBVc2VkIGFzIHJlZmVyZW5jZXMgZm9yIHZhcmlvdXMgYE51bWJlcmAgY29uc3RhbnRzLiAqL1xudmFyIE1BWF9TQUZFX0lOVEVHRVIgPSA5MDA3MTk5MjU0NzQwOTkxO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgdmFsaWQgYXJyYXktbGlrZSBsZW5ndGguXG4gKlxuICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGxvb3NlbHkgYmFzZWQgb25cbiAqIFtgVG9MZW5ndGhgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy10b2xlbmd0aCkuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSB2YWxpZCBsZW5ndGgsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0xlbmd0aCgzKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzTGVuZ3RoKE51bWJlci5NSU5fVkFMVUUpO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzTGVuZ3RoKEluZmluaXR5KTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc0xlbmd0aCgnMycpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNMZW5ndGgodmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnbnVtYmVyJyAmJlxuICAgIHZhbHVlID4gLTEgJiYgdmFsdWUgJSAxID09IDAgJiYgdmFsdWUgPD0gTUFYX1NBRkVfSU5URUdFUjtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc0xlbmd0aDtcbiIsInZhciByb290ID0gcmVxdWlyZSgnLi9fcm9vdCcpLFxuICAgIHN0dWJGYWxzZSA9IHJlcXVpcmUoJy4vc3R1YkZhbHNlJyk7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgZXhwb3J0c2AuICovXG52YXIgZnJlZUV4cG9ydHMgPSB0eXBlb2YgZXhwb3J0cyA9PSAnb2JqZWN0JyAmJiBleHBvcnRzICYmICFleHBvcnRzLm5vZGVUeXBlICYmIGV4cG9ydHM7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgbW9kdWxlYC4gKi9cbnZhciBmcmVlTW9kdWxlID0gZnJlZUV4cG9ydHMgJiYgdHlwZW9mIG1vZHVsZSA9PSAnb2JqZWN0JyAmJiBtb2R1bGUgJiYgIW1vZHVsZS5ub2RlVHlwZSAmJiBtb2R1bGU7XG5cbi8qKiBEZXRlY3QgdGhlIHBvcHVsYXIgQ29tbW9uSlMgZXh0ZW5zaW9uIGBtb2R1bGUuZXhwb3J0c2AuICovXG52YXIgbW9kdWxlRXhwb3J0cyA9IGZyZWVNb2R1bGUgJiYgZnJlZU1vZHVsZS5leHBvcnRzID09PSBmcmVlRXhwb3J0cztcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgQnVmZmVyID0gbW9kdWxlRXhwb3J0cyA/IHJvb3QuQnVmZmVyIDogdW5kZWZpbmVkO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyBmb3IgdGhvc2Ugd2l0aCB0aGUgc2FtZSBuYW1lIGFzIG90aGVyIGBsb2Rhc2hgIG1ldGhvZHMuICovXG52YXIgbmF0aXZlSXNCdWZmZXIgPSBCdWZmZXIgPyBCdWZmZXIuaXNCdWZmZXIgOiB1bmRlZmluZWQ7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSBidWZmZXIuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjMuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBidWZmZXIsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0J1ZmZlcihuZXcgQnVmZmVyKDIpKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQnVmZmVyKG5ldyBVaW50OEFycmF5KDIpKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbnZhciBpc0J1ZmZlciA9IG5hdGl2ZUlzQnVmZmVyIHx8IHN0dWJGYWxzZTtcblxubW9kdWxlLmV4cG9ydHMgPSBpc0J1ZmZlcjtcbiIsInZhciBiYXNlSXNUeXBlZEFycmF5ID0gcmVxdWlyZSgnLi9fYmFzZUlzVHlwZWRBcnJheScpLFxuICAgIGJhc2VVbmFyeSA9IHJlcXVpcmUoJy4vX2Jhc2VVbmFyeScpLFxuICAgIG5vZGVVdGlsID0gcmVxdWlyZSgnLi9fbm9kZVV0aWwnKTtcblxuLyogTm9kZS5qcyBoZWxwZXIgcmVmZXJlbmNlcy4gKi9cbnZhciBub2RlSXNUeXBlZEFycmF5ID0gbm9kZVV0aWwgJiYgbm9kZVV0aWwuaXNUeXBlZEFycmF5O1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSB0eXBlZCBhcnJheS5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDMuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHR5cGVkIGFycmF5LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNUeXBlZEFycmF5KG5ldyBVaW50OEFycmF5KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzVHlwZWRBcnJheShbXSk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG52YXIgaXNUeXBlZEFycmF5ID0gbm9kZUlzVHlwZWRBcnJheSA/IGJhc2VVbmFyeShub2RlSXNUeXBlZEFycmF5KSA6IGJhc2VJc1R5cGVkQXJyYXk7XG5cbm1vZHVsZS5leHBvcnRzID0gaXNUeXBlZEFycmF5O1xuIiwiLyoqXG4gKiBHZXRzIHRoZSB2YWx1ZSBhdCBga2V5YCwgdW5sZXNzIGBrZXlgIGlzIFwiX19wcm90b19fXCIgb3IgXCJjb25zdHJ1Y3RvclwiLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBwcm9wZXJ0eSB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gc2FmZUdldChvYmplY3QsIGtleSkge1xuICBpZiAoa2V5ID09PSAnY29uc3RydWN0b3InICYmIHR5cGVvZiBvYmplY3Rba2V5XSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmIChrZXkgPT0gJ19fcHJvdG9fXycpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICByZXR1cm4gb2JqZWN0W2tleV07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2FmZUdldDtcbiIsInZhciBhcnJheUxpa2VLZXlzID0gcmVxdWlyZSgnLi9fYXJyYXlMaWtlS2V5cycpLFxuICAgIGJhc2VLZXlzSW4gPSByZXF1aXJlKCcuL19iYXNlS2V5c0luJyksXG4gICAgaXNBcnJheUxpa2UgPSByZXF1aXJlKCcuL2lzQXJyYXlMaWtlJyk7XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBhcnJheSBvZiB0aGUgb3duIGFuZCBpbmhlcml0ZWQgZW51bWVyYWJsZSBwcm9wZXJ0eSBuYW1lcyBvZiBgb2JqZWN0YC5cbiAqXG4gKiAqKk5vdGU6KiogTm9uLW9iamVjdCB2YWx1ZXMgYXJlIGNvZXJjZWQgdG8gb2JqZWN0cy5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDMuMC4wXG4gKiBAY2F0ZWdvcnkgT2JqZWN0XG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICogQGV4YW1wbGVcbiAqXG4gKiBmdW5jdGlvbiBGb28oKSB7XG4gKiAgIHRoaXMuYSA9IDE7XG4gKiAgIHRoaXMuYiA9IDI7XG4gKiB9XG4gKlxuICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAqXG4gKiBfLmtleXNJbihuZXcgRm9vKTtcbiAqIC8vID0+IFsnYScsICdiJywgJ2MnXSAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICovXG5mdW5jdGlvbiBrZXlzSW4ob2JqZWN0KSB7XG4gIHJldHVybiBpc0FycmF5TGlrZShvYmplY3QpID8gYXJyYXlMaWtlS2V5cyhvYmplY3QsIHRydWUpIDogYmFzZUtleXNJbihvYmplY3QpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGtleXNJbjtcbiIsIi8qKiBVc2VkIGFzIHJlZmVyZW5jZXMgZm9yIHZhcmlvdXMgYE51bWJlcmAgY29uc3RhbnRzLiAqL1xudmFyIE1BWF9TQUZFX0lOVEVHRVIgPSA5MDA3MTk5MjU0NzQwOTkxO1xuXG4vKiogVXNlZCB0byBkZXRlY3QgdW5zaWduZWQgaW50ZWdlciB2YWx1ZXMuICovXG52YXIgcmVJc1VpbnQgPSAvXig/OjB8WzEtOV1cXGQqKSQvO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgdmFsaWQgYXJyYXktbGlrZSBpbmRleC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcGFyYW0ge251bWJlcn0gW2xlbmd0aD1NQVhfU0FGRV9JTlRFR0VSXSBUaGUgdXBwZXIgYm91bmRzIG9mIGEgdmFsaWQgaW5kZXguXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHZhbGlkIGluZGV4LCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGlzSW5kZXgodmFsdWUsIGxlbmd0aCkge1xuICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgbGVuZ3RoID0gbGVuZ3RoID09IG51bGwgPyBNQVhfU0FGRV9JTlRFR0VSIDogbGVuZ3RoO1xuXG4gIHJldHVybiAhIWxlbmd0aCAmJlxuICAgICh0eXBlID09ICdudW1iZXInIHx8XG4gICAgICAodHlwZSAhPSAnc3ltYm9sJyAmJiByZUlzVWludC50ZXN0KHZhbHVlKSkpICYmXG4gICAgICAgICh2YWx1ZSA+IC0xICYmIHZhbHVlICUgMSA9PSAwICYmIHZhbHVlIDwgbGVuZ3RoKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc0luZGV4O1xuIiwiLyoqXG4gKiBUaGlzIG1ldGhvZCByZXR1cm5zIHRoZSBmaXJzdCBhcmd1bWVudCBpdCByZWNlaXZlcy5cbiAqXG4gKiBAc3RhdGljXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBtZW1iZXJPZiBfXG4gKiBAY2F0ZWdvcnkgVXRpbFxuICogQHBhcmFtIHsqfSB2YWx1ZSBBbnkgdmFsdWUuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyBgdmFsdWVgLlxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEgfTtcbiAqXG4gKiBjb25zb2xlLmxvZyhfLmlkZW50aXR5KG9iamVjdCkgPT09IG9iamVjdCk7XG4gKiAvLyA9PiB0cnVlXG4gKi9cbmZ1bmN0aW9uIGlkZW50aXR5KHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpZGVudGl0eTtcbiIsIiFmdW5jdGlvbihlLHQpe1wib2JqZWN0XCI9PXR5cGVvZiBleHBvcnRzJiZcInVuZGVmaW5lZFwiIT10eXBlb2YgbW9kdWxlP3QoZXhwb3J0cyk6XCJmdW5jdGlvblwiPT10eXBlb2YgZGVmaW5lJiZkZWZpbmUuYW1kP2RlZmluZShbXCJleHBvcnRzXCJdLHQpOnQoZS5yZWR1eExvZ2dlcj1lLnJlZHV4TG9nZ2VyfHx7fSl9KHRoaXMsZnVuY3Rpb24oZSl7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gdChlLHQpe2Uuc3VwZXJfPXQsZS5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZSh0LnByb3RvdHlwZSx7Y29uc3RydWN0b3I6e3ZhbHVlOmUsZW51bWVyYWJsZTohMSx3cml0YWJsZTohMCxjb25maWd1cmFibGU6ITB9fSl9ZnVuY3Rpb24gcihlLHQpe09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLFwia2luZFwiLHt2YWx1ZTplLGVudW1lcmFibGU6ITB9KSx0JiZ0Lmxlbmd0aCYmT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsXCJwYXRoXCIse3ZhbHVlOnQsZW51bWVyYWJsZTohMH0pfWZ1bmN0aW9uIG4oZSx0LHIpe24uc3VwZXJfLmNhbGwodGhpcyxcIkVcIixlKSxPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcyxcImxoc1wiLHt2YWx1ZTp0LGVudW1lcmFibGU6ITB9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcyxcInJoc1wiLHt2YWx1ZTpyLGVudW1lcmFibGU6ITB9KX1mdW5jdGlvbiBvKGUsdCl7by5zdXBlcl8uY2FsbCh0aGlzLFwiTlwiLGUpLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLFwicmhzXCIse3ZhbHVlOnQsZW51bWVyYWJsZTohMH0pfWZ1bmN0aW9uIGkoZSx0KXtpLnN1cGVyXy5jYWxsKHRoaXMsXCJEXCIsZSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsXCJsaHNcIix7dmFsdWU6dCxlbnVtZXJhYmxlOiEwfSl9ZnVuY3Rpb24gYShlLHQscil7YS5zdXBlcl8uY2FsbCh0aGlzLFwiQVwiLGUpLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLFwiaW5kZXhcIix7dmFsdWU6dCxlbnVtZXJhYmxlOiEwfSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsXCJpdGVtXCIse3ZhbHVlOnIsZW51bWVyYWJsZTohMH0pfWZ1bmN0aW9uIGYoZSx0LHIpe3ZhciBuPWUuc2xpY2UoKHJ8fHQpKzF8fGUubGVuZ3RoKTtyZXR1cm4gZS5sZW5ndGg9dDwwP2UubGVuZ3RoK3Q6dCxlLnB1c2guYXBwbHkoZSxuKSxlfWZ1bmN0aW9uIHUoZSl7dmFyIHQ9XCJ1bmRlZmluZWRcIj09dHlwZW9mIGU/XCJ1bmRlZmluZWRcIjpOKGUpO3JldHVyblwib2JqZWN0XCIhPT10P3Q6ZT09PU1hdGg/XCJtYXRoXCI6bnVsbD09PWU/XCJudWxsXCI6QXJyYXkuaXNBcnJheShlKT9cImFycmF5XCI6XCJbb2JqZWN0IERhdGVdXCI9PT1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoZSk/XCJkYXRlXCI6XCJmdW5jdGlvblwiPT10eXBlb2YgZS50b1N0cmluZyYmL15cXC8uKlxcLy8udGVzdChlLnRvU3RyaW5nKCkpP1wicmVnZXhwXCI6XCJvYmplY3RcIn1mdW5jdGlvbiBsKGUsdCxyLGMscyxkLHApe3M9c3x8W10scD1wfHxbXTt2YXIgZz1zLnNsaWNlKDApO2lmKFwidW5kZWZpbmVkXCIhPXR5cGVvZiBkKXtpZihjKXtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBjJiZjKGcsZCkpcmV0dXJuO2lmKFwib2JqZWN0XCI9PT0oXCJ1bmRlZmluZWRcIj09dHlwZW9mIGM/XCJ1bmRlZmluZWRcIjpOKGMpKSl7aWYoYy5wcmVmaWx0ZXImJmMucHJlZmlsdGVyKGcsZCkpcmV0dXJuO2lmKGMubm9ybWFsaXplKXt2YXIgaD1jLm5vcm1hbGl6ZShnLGQsZSx0KTtoJiYoZT1oWzBdLHQ9aFsxXSl9fX1nLnB1c2goZCl9XCJyZWdleHBcIj09PXUoZSkmJlwicmVnZXhwXCI9PT11KHQpJiYoZT1lLnRvU3RyaW5nKCksdD10LnRvU3RyaW5nKCkpO3ZhciB5PVwidW5kZWZpbmVkXCI9PXR5cGVvZiBlP1widW5kZWZpbmVkXCI6TihlKSx2PVwidW5kZWZpbmVkXCI9PXR5cGVvZiB0P1widW5kZWZpbmVkXCI6Tih0KSxiPVwidW5kZWZpbmVkXCIhPT15fHxwJiZwW3AubGVuZ3RoLTFdLmxocyYmcFtwLmxlbmd0aC0xXS5saHMuaGFzT3duUHJvcGVydHkoZCksbT1cInVuZGVmaW5lZFwiIT09dnx8cCYmcFtwLmxlbmd0aC0xXS5yaHMmJnBbcC5sZW5ndGgtMV0ucmhzLmhhc093blByb3BlcnR5KGQpO2lmKCFiJiZtKXIobmV3IG8oZyx0KSk7ZWxzZSBpZighbSYmYilyKG5ldyBpKGcsZSkpO2Vsc2UgaWYodShlKSE9PXUodCkpcihuZXcgbihnLGUsdCkpO2Vsc2UgaWYoXCJkYXRlXCI9PT11KGUpJiZlLXQhPT0wKXIobmV3IG4oZyxlLHQpKTtlbHNlIGlmKFwib2JqZWN0XCI9PT15JiZudWxsIT09ZSYmbnVsbCE9PXQpaWYocC5maWx0ZXIoZnVuY3Rpb24odCl7cmV0dXJuIHQubGhzPT09ZX0pLmxlbmd0aCllIT09dCYmcihuZXcgbihnLGUsdCkpO2Vsc2V7aWYocC5wdXNoKHtsaHM6ZSxyaHM6dH0pLEFycmF5LmlzQXJyYXkoZSkpe3ZhciB3O2UubGVuZ3RoO2Zvcih3PTA7dzxlLmxlbmd0aDt3Kyspdz49dC5sZW5ndGg/cihuZXcgYShnLHcsbmV3IGkodm9pZCAwLGVbd10pKSk6bChlW3ddLHRbd10scixjLGcsdyxwKTtmb3IoO3c8dC5sZW5ndGg7KXIobmV3IGEoZyx3LG5ldyBvKHZvaWQgMCx0W3crK10pKSl9ZWxzZXt2YXIgeD1PYmplY3Qua2V5cyhlKSxTPU9iamVjdC5rZXlzKHQpO3guZm9yRWFjaChmdW5jdGlvbihuLG8pe3ZhciBpPVMuaW5kZXhPZihuKTtpPj0wPyhsKGVbbl0sdFtuXSxyLGMsZyxuLHApLFM9ZihTLGkpKTpsKGVbbl0sdm9pZCAwLHIsYyxnLG4scCl9KSxTLmZvckVhY2goZnVuY3Rpb24oZSl7bCh2b2lkIDAsdFtlXSxyLGMsZyxlLHApfSl9cC5sZW5ndGg9cC5sZW5ndGgtMX1lbHNlIGUhPT10JiYoXCJudW1iZXJcIj09PXkmJmlzTmFOKGUpJiZpc05hTih0KXx8cihuZXcgbihnLGUsdCkpKX1mdW5jdGlvbiBjKGUsdCxyLG4pe3JldHVybiBuPW58fFtdLGwoZSx0LGZ1bmN0aW9uKGUpe2UmJm4ucHVzaChlKX0sciksbi5sZW5ndGg/bjp2b2lkIDB9ZnVuY3Rpb24gcyhlLHQscil7aWYoci5wYXRoJiZyLnBhdGgubGVuZ3RoKXt2YXIgbixvPWVbdF0saT1yLnBhdGgubGVuZ3RoLTE7Zm9yKG49MDtuPGk7bisrKW89b1tyLnBhdGhbbl1dO3N3aXRjaChyLmtpbmQpe2Nhc2VcIkFcIjpzKG9bci5wYXRoW25dXSxyLmluZGV4LHIuaXRlbSk7YnJlYWs7Y2FzZVwiRFwiOmRlbGV0ZSBvW3IucGF0aFtuXV07YnJlYWs7Y2FzZVwiRVwiOmNhc2VcIk5cIjpvW3IucGF0aFtuXV09ci5yaHN9fWVsc2Ugc3dpdGNoKHIua2luZCl7Y2FzZVwiQVwiOnMoZVt0XSxyLmluZGV4LHIuaXRlbSk7YnJlYWs7Y2FzZVwiRFwiOmU9ZihlLHQpO2JyZWFrO2Nhc2VcIkVcIjpjYXNlXCJOXCI6ZVt0XT1yLnJoc31yZXR1cm4gZX1mdW5jdGlvbiBkKGUsdCxyKXtpZihlJiZ0JiZyJiZyLmtpbmQpe2Zvcih2YXIgbj1lLG89LTEsaT1yLnBhdGg/ci5wYXRoLmxlbmd0aC0xOjA7KytvPGk7KVwidW5kZWZpbmVkXCI9PXR5cGVvZiBuW3IucGF0aFtvXV0mJihuW3IucGF0aFtvXV09XCJudW1iZXJcIj09dHlwZW9mIHIucGF0aFtvXT9bXTp7fSksbj1uW3IucGF0aFtvXV07c3dpdGNoKHIua2luZCl7Y2FzZVwiQVwiOnMoci5wYXRoP25bci5wYXRoW29dXTpuLHIuaW5kZXgsci5pdGVtKTticmVhaztjYXNlXCJEXCI6ZGVsZXRlIG5bci5wYXRoW29dXTticmVhaztjYXNlXCJFXCI6Y2FzZVwiTlwiOm5bci5wYXRoW29dXT1yLnJoc319fWZ1bmN0aW9uIHAoZSx0LHIpe2lmKHIucGF0aCYmci5wYXRoLmxlbmd0aCl7dmFyIG4sbz1lW3RdLGk9ci5wYXRoLmxlbmd0aC0xO2ZvcihuPTA7bjxpO24rKylvPW9bci5wYXRoW25dXTtzd2l0Y2goci5raW5kKXtjYXNlXCJBXCI6cChvW3IucGF0aFtuXV0sci5pbmRleCxyLml0ZW0pO2JyZWFrO2Nhc2VcIkRcIjpvW3IucGF0aFtuXV09ci5saHM7YnJlYWs7Y2FzZVwiRVwiOm9bci5wYXRoW25dXT1yLmxoczticmVhaztjYXNlXCJOXCI6ZGVsZXRlIG9bci5wYXRoW25dXX19ZWxzZSBzd2l0Y2goci5raW5kKXtjYXNlXCJBXCI6cChlW3RdLHIuaW5kZXgsci5pdGVtKTticmVhaztjYXNlXCJEXCI6ZVt0XT1yLmxoczticmVhaztjYXNlXCJFXCI6ZVt0XT1yLmxoczticmVhaztjYXNlXCJOXCI6ZT1mKGUsdCl9cmV0dXJuIGV9ZnVuY3Rpb24gZyhlLHQscil7aWYoZSYmdCYmciYmci5raW5kKXt2YXIgbixvLGk9ZTtmb3Iobz1yLnBhdGgubGVuZ3RoLTEsbj0wO248bztuKyspXCJ1bmRlZmluZWRcIj09dHlwZW9mIGlbci5wYXRoW25dXSYmKGlbci5wYXRoW25dXT17fSksaT1pW3IucGF0aFtuXV07c3dpdGNoKHIua2luZCl7Y2FzZVwiQVwiOnAoaVtyLnBhdGhbbl1dLHIuaW5kZXgsci5pdGVtKTticmVhaztjYXNlXCJEXCI6aVtyLnBhdGhbbl1dPXIubGhzO2JyZWFrO2Nhc2VcIkVcIjppW3IucGF0aFtuXV09ci5saHM7YnJlYWs7Y2FzZVwiTlwiOmRlbGV0ZSBpW3IucGF0aFtuXV19fX1mdW5jdGlvbiBoKGUsdCxyKXtpZihlJiZ0KXt2YXIgbj1mdW5jdGlvbihuKXtyJiYhcihlLHQsbil8fGQoZSx0LG4pfTtsKGUsdCxuKX19ZnVuY3Rpb24geShlKXtyZXR1cm5cImNvbG9yOiBcIitGW2VdLmNvbG9yK1wiOyBmb250LXdlaWdodDogYm9sZFwifWZ1bmN0aW9uIHYoZSl7dmFyIHQ9ZS5raW5kLHI9ZS5wYXRoLG49ZS5saHMsbz1lLnJocyxpPWUuaW5kZXgsYT1lLml0ZW07c3dpdGNoKHQpe2Nhc2VcIkVcIjpyZXR1cm5bci5qb2luKFwiLlwiKSxuLFwi4oaSXCIsb107Y2FzZVwiTlwiOnJldHVybltyLmpvaW4oXCIuXCIpLG9dO2Nhc2VcIkRcIjpyZXR1cm5bci5qb2luKFwiLlwiKV07Y2FzZVwiQVwiOnJldHVybltyLmpvaW4oXCIuXCIpK1wiW1wiK2krXCJdXCIsYV07ZGVmYXVsdDpyZXR1cm5bXX19ZnVuY3Rpb24gYihlLHQscixuKXt2YXIgbz1jKGUsdCk7dHJ5e24/ci5ncm91cENvbGxhcHNlZChcImRpZmZcIik6ci5ncm91cChcImRpZmZcIil9Y2F0Y2goZSl7ci5sb2coXCJkaWZmXCIpfW8/by5mb3JFYWNoKGZ1bmN0aW9uKGUpe3ZhciB0PWUua2luZCxuPXYoZSk7ci5sb2cuYXBwbHkocixbXCIlYyBcIitGW3RdLnRleHQseSh0KV0uY29uY2F0KFAobikpKX0pOnIubG9nKFwi4oCU4oCUIG5vIGRpZmYg4oCU4oCUXCIpO3RyeXtyLmdyb3VwRW5kKCl9Y2F0Y2goZSl7ci5sb2coXCLigJTigJQgZGlmZiBlbmQg4oCU4oCUIFwiKX19ZnVuY3Rpb24gbShlLHQscixuKXtzd2l0Y2goXCJ1bmRlZmluZWRcIj09dHlwZW9mIGU/XCJ1bmRlZmluZWRcIjpOKGUpKXtjYXNlXCJvYmplY3RcIjpyZXR1cm5cImZ1bmN0aW9uXCI9PXR5cGVvZiBlW25dP2Vbbl0uYXBwbHkoZSxQKHIpKTplW25dO2Nhc2VcImZ1bmN0aW9uXCI6cmV0dXJuIGUodCk7ZGVmYXVsdDpyZXR1cm4gZX19ZnVuY3Rpb24gdyhlKXt2YXIgdD1lLnRpbWVzdGFtcCxyPWUuZHVyYXRpb247cmV0dXJuIGZ1bmN0aW9uKGUsbixvKXt2YXIgaT1bXCJhY3Rpb25cIl07cmV0dXJuIGkucHVzaChcIiVjXCIrU3RyaW5nKGUudHlwZSkpLHQmJmkucHVzaChcIiVjQCBcIituKSxyJiZpLnB1c2goXCIlYyhpbiBcIitvLnRvRml4ZWQoMikrXCIgbXMpXCIpLGkuam9pbihcIiBcIil9fWZ1bmN0aW9uIHgoZSx0KXt2YXIgcj10LmxvZ2dlcixuPXQuYWN0aW9uVHJhbnNmb3JtZXIsbz10LnRpdGxlRm9ybWF0dGVyLGk9dm9pZCAwPT09bz93KHQpOm8sYT10LmNvbGxhcHNlZCxmPXQuY29sb3JzLHU9dC5sZXZlbCxsPXQuZGlmZixjPVwidW5kZWZpbmVkXCI9PXR5cGVvZiB0LnRpdGxlRm9ybWF0dGVyO2UuZm9yRWFjaChmdW5jdGlvbihvLHMpe3ZhciBkPW8uc3RhcnRlZCxwPW8uc3RhcnRlZFRpbWUsZz1vLmFjdGlvbixoPW8ucHJldlN0YXRlLHk9by5lcnJvcix2PW8udG9vayx3PW8ubmV4dFN0YXRlLHg9ZVtzKzFdO3gmJih3PXgucHJldlN0YXRlLHY9eC5zdGFydGVkLWQpO3ZhciBTPW4oZyksaz1cImZ1bmN0aW9uXCI9PXR5cGVvZiBhP2EoZnVuY3Rpb24oKXtyZXR1cm4gd30sZyxvKTphLGo9RChwKSxFPWYudGl0bGU/XCJjb2xvcjogXCIrZi50aXRsZShTKStcIjtcIjpcIlwiLEE9W1wiY29sb3I6IGdyYXk7IGZvbnQtd2VpZ2h0OiBsaWdodGVyO1wiXTtBLnB1c2goRSksdC50aW1lc3RhbXAmJkEucHVzaChcImNvbG9yOiBncmF5OyBmb250LXdlaWdodDogbGlnaHRlcjtcIiksdC5kdXJhdGlvbiYmQS5wdXNoKFwiY29sb3I6IGdyYXk7IGZvbnQtd2VpZ2h0OiBsaWdodGVyO1wiKTt2YXIgTz1pKFMsaix2KTt0cnl7az9mLnRpdGxlJiZjP3IuZ3JvdXBDb2xsYXBzZWQuYXBwbHkocixbXCIlYyBcIitPXS5jb25jYXQoQSkpOnIuZ3JvdXBDb2xsYXBzZWQoTyk6Zi50aXRsZSYmYz9yLmdyb3VwLmFwcGx5KHIsW1wiJWMgXCIrT10uY29uY2F0KEEpKTpyLmdyb3VwKE8pfWNhdGNoKGUpe3IubG9nKE8pfXZhciBOPW0odSxTLFtoXSxcInByZXZTdGF0ZVwiKSxQPW0odSxTLFtTXSxcImFjdGlvblwiKSxDPW0odSxTLFt5LGhdLFwiZXJyb3JcIiksRj1tKHUsUyxbd10sXCJuZXh0U3RhdGVcIik7aWYoTilpZihmLnByZXZTdGF0ZSl7dmFyIEw9XCJjb2xvcjogXCIrZi5wcmV2U3RhdGUoaCkrXCI7IGZvbnQtd2VpZ2h0OiBib2xkXCI7cltOXShcIiVjIHByZXYgc3RhdGVcIixMLGgpfWVsc2UgcltOXShcInByZXYgc3RhdGVcIixoKTtpZihQKWlmKGYuYWN0aW9uKXt2YXIgVD1cImNvbG9yOiBcIitmLmFjdGlvbihTKStcIjsgZm9udC13ZWlnaHQ6IGJvbGRcIjtyW1BdKFwiJWMgYWN0aW9uICAgIFwiLFQsUyl9ZWxzZSByW1BdKFwiYWN0aW9uICAgIFwiLFMpO2lmKHkmJkMpaWYoZi5lcnJvcil7dmFyIE09XCJjb2xvcjogXCIrZi5lcnJvcih5LGgpK1wiOyBmb250LXdlaWdodDogYm9sZDtcIjtyW0NdKFwiJWMgZXJyb3IgICAgIFwiLE0seSl9ZWxzZSByW0NdKFwiZXJyb3IgICAgIFwiLHkpO2lmKEYpaWYoZi5uZXh0U3RhdGUpe3ZhciBfPVwiY29sb3I6IFwiK2YubmV4dFN0YXRlKHcpK1wiOyBmb250LXdlaWdodDogYm9sZFwiO3JbRl0oXCIlYyBuZXh0IHN0YXRlXCIsXyx3KX1lbHNlIHJbRl0oXCJuZXh0IHN0YXRlXCIsdyk7bCYmYihoLHcscixrKTt0cnl7ci5ncm91cEVuZCgpfWNhdGNoKGUpe3IubG9nKFwi4oCU4oCUIGxvZyBlbmQg4oCU4oCUXCIpfX0pfWZ1bmN0aW9uIFMoKXt2YXIgZT1hcmd1bWVudHMubGVuZ3RoPjAmJnZvaWQgMCE9PWFyZ3VtZW50c1swXT9hcmd1bWVudHNbMF06e30sdD1PYmplY3QuYXNzaWduKHt9LEwsZSkscj10LmxvZ2dlcixuPXQuc3RhdGVUcmFuc2Zvcm1lcixvPXQuZXJyb3JUcmFuc2Zvcm1lcixpPXQucHJlZGljYXRlLGE9dC5sb2dFcnJvcnMsZj10LmRpZmZQcmVkaWNhdGU7aWYoXCJ1bmRlZmluZWRcIj09dHlwZW9mIHIpcmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIGZ1bmN0aW9uKGUpe3JldHVybiBmdW5jdGlvbih0KXtyZXR1cm4gZSh0KX19fTtpZihlLmdldFN0YXRlJiZlLmRpc3BhdGNoKXJldHVybiBjb25zb2xlLmVycm9yKFwiW3JlZHV4LWxvZ2dlcl0gcmVkdXgtbG9nZ2VyIG5vdCBpbnN0YWxsZWQuIE1ha2Ugc3VyZSB0byBwYXNzIGxvZ2dlciBpbnN0YW5jZSBhcyBtaWRkbGV3YXJlOlxcbi8vIExvZ2dlciB3aXRoIGRlZmF1bHQgb3B0aW9uc1xcbmltcG9ydCB7IGxvZ2dlciB9IGZyb20gJ3JlZHV4LWxvZ2dlcidcXG5jb25zdCBzdG9yZSA9IGNyZWF0ZVN0b3JlKFxcbiAgcmVkdWNlcixcXG4gIGFwcGx5TWlkZGxld2FyZShsb2dnZXIpXFxuKVxcbi8vIE9yIHlvdSBjYW4gY3JlYXRlIHlvdXIgb3duIGxvZ2dlciB3aXRoIGN1c3RvbSBvcHRpb25zIGh0dHA6Ly9iaXQubHkvcmVkdXgtbG9nZ2VyLW9wdGlvbnNcXG5pbXBvcnQgY3JlYXRlTG9nZ2VyIGZyb20gJ3JlZHV4LWxvZ2dlcidcXG5jb25zdCBsb2dnZXIgPSBjcmVhdGVMb2dnZXIoe1xcbiAgLy8gLi4ub3B0aW9uc1xcbn0pO1xcbmNvbnN0IHN0b3JlID0gY3JlYXRlU3RvcmUoXFxuICByZWR1Y2VyLFxcbiAgYXBwbHlNaWRkbGV3YXJlKGxvZ2dlcilcXG4pXFxuXCIpLGZ1bmN0aW9uKCl7cmV0dXJuIGZ1bmN0aW9uKGUpe3JldHVybiBmdW5jdGlvbih0KXtyZXR1cm4gZSh0KX19fTt2YXIgdT1bXTtyZXR1cm4gZnVuY3Rpb24oZSl7dmFyIHI9ZS5nZXRTdGF0ZTtyZXR1cm4gZnVuY3Rpb24oZSl7cmV0dXJuIGZ1bmN0aW9uKGwpe2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIGkmJiFpKHIsbCkpcmV0dXJuIGUobCk7dmFyIGM9e307dS5wdXNoKGMpLGMuc3RhcnRlZD1PLm5vdygpLGMuc3RhcnRlZFRpbWU9bmV3IERhdGUsYy5wcmV2U3RhdGU9bihyKCkpLGMuYWN0aW9uPWw7dmFyIHM9dm9pZCAwO2lmKGEpdHJ5e3M9ZShsKX1jYXRjaChlKXtjLmVycm9yPW8oZSl9ZWxzZSBzPWUobCk7Yy50b29rPU8ubm93KCktYy5zdGFydGVkLGMubmV4dFN0YXRlPW4ocigpKTt2YXIgZD10LmRpZmYmJlwiZnVuY3Rpb25cIj09dHlwZW9mIGY/ZihyLGwpOnQuZGlmZjtpZih4KHUsT2JqZWN0LmFzc2lnbih7fSx0LHtkaWZmOmR9KSksdS5sZW5ndGg9MCxjLmVycm9yKXRocm93IGMuZXJyb3I7cmV0dXJuIHN9fX19dmFyIGssaixFPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIG5ldyBBcnJheSh0KzEpLmpvaW4oZSl9LEE9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gRShcIjBcIix0LWUudG9TdHJpbmcoKS5sZW5ndGgpK2V9LEQ9ZnVuY3Rpb24oZSl7cmV0dXJuIEEoZS5nZXRIb3VycygpLDIpK1wiOlwiK0EoZS5nZXRNaW51dGVzKCksMikrXCI6XCIrQShlLmdldFNlY29uZHMoKSwyKStcIi5cIitBKGUuZ2V0TWlsbGlzZWNvbmRzKCksMyl9LE89XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHBlcmZvcm1hbmNlJiZudWxsIT09cGVyZm9ybWFuY2UmJlwiZnVuY3Rpb25cIj09dHlwZW9mIHBlcmZvcm1hbmNlLm5vdz9wZXJmb3JtYW5jZTpEYXRlLE49XCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZcInN5bWJvbFwiPT10eXBlb2YgU3ltYm9sLml0ZXJhdG9yP2Z1bmN0aW9uKGUpe3JldHVybiB0eXBlb2YgZX06ZnVuY3Rpb24oZSl7cmV0dXJuIGUmJlwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmZS5jb25zdHJ1Y3Rvcj09PVN5bWJvbCYmZSE9PVN5bWJvbC5wcm90b3R5cGU/XCJzeW1ib2xcIjp0eXBlb2YgZX0sUD1mdW5jdGlvbihlKXtpZihBcnJheS5pc0FycmF5KGUpKXtmb3IodmFyIHQ9MCxyPUFycmF5KGUubGVuZ3RoKTt0PGUubGVuZ3RoO3QrKylyW3RdPWVbdF07cmV0dXJuIHJ9cmV0dXJuIEFycmF5LmZyb20oZSl9LEM9W107az1cIm9iamVjdFwiPT09KFwidW5kZWZpbmVkXCI9PXR5cGVvZiBnbG9iYWw/XCJ1bmRlZmluZWRcIjpOKGdsb2JhbCkpJiZnbG9iYWw/Z2xvYmFsOlwidW5kZWZpbmVkXCIhPXR5cGVvZiB3aW5kb3c/d2luZG93Ont9LGo9ay5EZWVwRGlmZixqJiZDLnB1c2goZnVuY3Rpb24oKXtcInVuZGVmaW5lZFwiIT10eXBlb2YgaiYmay5EZWVwRGlmZj09PWMmJihrLkRlZXBEaWZmPWosaj12b2lkIDApfSksdChuLHIpLHQobyxyKSx0KGksciksdChhLHIpLE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKGMse2RpZmY6e3ZhbHVlOmMsZW51bWVyYWJsZTohMH0sb2JzZXJ2YWJsZURpZmY6e3ZhbHVlOmwsZW51bWVyYWJsZTohMH0sYXBwbHlEaWZmOnt2YWx1ZTpoLGVudW1lcmFibGU6ITB9LGFwcGx5Q2hhbmdlOnt2YWx1ZTpkLGVudW1lcmFibGU6ITB9LHJldmVydENoYW5nZTp7dmFsdWU6ZyxlbnVtZXJhYmxlOiEwfSxpc0NvbmZsaWN0Ont2YWx1ZTpmdW5jdGlvbigpe3JldHVyblwidW5kZWZpbmVkXCIhPXR5cGVvZiBqfSxlbnVtZXJhYmxlOiEwfSxub0NvbmZsaWN0Ont2YWx1ZTpmdW5jdGlvbigpe3JldHVybiBDJiYoQy5mb3JFYWNoKGZ1bmN0aW9uKGUpe2UoKX0pLEM9bnVsbCksY30sZW51bWVyYWJsZTohMH19KTt2YXIgRj17RTp7Y29sb3I6XCIjMjE5NkYzXCIsdGV4dDpcIkNIQU5HRUQ6XCJ9LE46e2NvbG9yOlwiIzRDQUY1MFwiLHRleHQ6XCJBRERFRDpcIn0sRDp7Y29sb3I6XCIjRjQ0MzM2XCIsdGV4dDpcIkRFTEVURUQ6XCJ9LEE6e2NvbG9yOlwiIzIxOTZGM1wiLHRleHQ6XCJBUlJBWTpcIn19LEw9e2xldmVsOlwibG9nXCIsbG9nZ2VyOmNvbnNvbGUsbG9nRXJyb3JzOiEwLGNvbGxhcHNlZDp2b2lkIDAscHJlZGljYXRlOnZvaWQgMCxkdXJhdGlvbjohMSx0aW1lc3RhbXA6ITAsc3RhdGVUcmFuc2Zvcm1lcjpmdW5jdGlvbihlKXtyZXR1cm4gZX0sYWN0aW9uVHJhbnNmb3JtZXI6ZnVuY3Rpb24oZSl7cmV0dXJuIGV9LGVycm9yVHJhbnNmb3JtZXI6ZnVuY3Rpb24oZSl7cmV0dXJuIGV9LGNvbG9yczp7dGl0bGU6ZnVuY3Rpb24oKXtyZXR1cm5cImluaGVyaXRcIn0scHJldlN0YXRlOmZ1bmN0aW9uKCl7cmV0dXJuXCIjOUU5RTlFXCJ9LGFjdGlvbjpmdW5jdGlvbigpe3JldHVyblwiIzAzQTlGNFwifSxuZXh0U3RhdGU6ZnVuY3Rpb24oKXtyZXR1cm5cIiM0Q0FGNTBcIn0sZXJyb3I6ZnVuY3Rpb24oKXtyZXR1cm5cIiNGMjA0MDRcIn19LGRpZmY6ITEsZGlmZlByZWRpY2F0ZTp2b2lkIDAsdHJhbnNmb3JtZXI6dm9pZCAwfSxUPWZ1bmN0aW9uKCl7dmFyIGU9YXJndW1lbnRzLmxlbmd0aD4wJiZ2b2lkIDAhPT1hcmd1bWVudHNbMF0/YXJndW1lbnRzWzBdOnt9LHQ9ZS5kaXNwYXRjaCxyPWUuZ2V0U3RhdGU7cmV0dXJuXCJmdW5jdGlvblwiPT10eXBlb2YgdHx8XCJmdW5jdGlvblwiPT10eXBlb2Ygcj9TKCkoe2Rpc3BhdGNoOnQsZ2V0U3RhdGU6cn0pOnZvaWQgY29uc29sZS5lcnJvcihcIlxcbltyZWR1eC1sb2dnZXIgdjNdIEJSRUFLSU5HIENIQU5HRVxcbltyZWR1eC1sb2dnZXIgdjNdIFNpbmNlIDMuMC4wIHJlZHV4LWxvZ2dlciBleHBvcnRzIGJ5IGRlZmF1bHQgbG9nZ2VyIHdpdGggZGVmYXVsdCBzZXR0aW5ncy5cXG5bcmVkdXgtbG9nZ2VyIHYzXSBDaGFuZ2VcXG5bcmVkdXgtbG9nZ2VyIHYzXSBpbXBvcnQgY3JlYXRlTG9nZ2VyIGZyb20gJ3JlZHV4LWxvZ2dlcidcXG5bcmVkdXgtbG9nZ2VyIHYzXSB0b1xcbltyZWR1eC1sb2dnZXIgdjNdIGltcG9ydCB7IGNyZWF0ZUxvZ2dlciB9IGZyb20gJ3JlZHV4LWxvZ2dlcidcXG5cIil9O2UuZGVmYXVsdHM9TCxlLmNyZWF0ZUxvZ2dlcj1TLGUubG9nZ2VyPVQsZS5kZWZhdWx0PVQsT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSl9KTtcbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHN5bWJvbE9ic2VydmFibGVQb255ZmlsbChyb290KSB7XG5cdHZhciByZXN1bHQ7XG5cdHZhciBTeW1ib2wgPSByb290LlN5bWJvbDtcblxuXHRpZiAodHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJykge1xuXHRcdGlmIChTeW1ib2wub2JzZXJ2YWJsZSkge1xuXHRcdFx0cmVzdWx0ID0gU3ltYm9sLm9ic2VydmFibGU7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHJlc3VsdCA9IFN5bWJvbCgnb2JzZXJ2YWJsZScpO1xuXHRcdFx0U3ltYm9sLm9ic2VydmFibGUgPSByZXN1bHQ7XG5cdFx0fVxuXHR9IGVsc2Uge1xuXHRcdHJlc3VsdCA9ICdAQG9ic2VydmFibGUnO1xuXHR9XG5cblx0cmV0dXJuIHJlc3VsdDtcbn07XG4iLCIvLyBAZmxvd1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIga2V5ID0gJ19fZ2xvYmFsX3VuaXF1ZV9pZF9fJztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIGdsb2JhbFtrZXldID0gKGdsb2JhbFtrZXldIHx8IDApICsgMTtcbn07XG4iLCIvKiogQGxpY2Vuc2UgUmVhY3QgdjE2LjkuMFxuICogcmVhY3QucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7dmFyIGg9cmVxdWlyZShcIm9iamVjdC1hc3NpZ25cIiksbj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuZm9yLHA9bj9TeW1ib2wuZm9yKFwicmVhY3QuZWxlbWVudFwiKTo2MDEwMyxxPW4/U3ltYm9sLmZvcihcInJlYWN0LnBvcnRhbFwiKTo2MDEwNixyPW4/U3ltYm9sLmZvcihcInJlYWN0LmZyYWdtZW50XCIpOjYwMTA3LHQ9bj9TeW1ib2wuZm9yKFwicmVhY3Quc3RyaWN0X21vZGVcIik6NjAxMDgsdT1uP1N5bWJvbC5mb3IoXCJyZWFjdC5wcm9maWxlclwiKTo2MDExNCx2PW4/U3ltYm9sLmZvcihcInJlYWN0LnByb3ZpZGVyXCIpOjYwMTA5LHc9bj9TeW1ib2wuZm9yKFwicmVhY3QuY29udGV4dFwiKTo2MDExMCx4PW4/U3ltYm9sLmZvcihcInJlYWN0LmZvcndhcmRfcmVmXCIpOjYwMTEyLHk9bj9TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VcIik6NjAxMTMsYWE9bj9TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VfbGlzdFwiKTo2MDEyMCxiYT1uP1N5bWJvbC5mb3IoXCJyZWFjdC5tZW1vXCIpOlxuNjAxMTUsY2E9bj9TeW1ib2wuZm9yKFwicmVhY3QubGF6eVwiKTo2MDExNjtuJiZTeW1ib2wuZm9yKFwicmVhY3QuZnVuZGFtZW50YWxcIik7biYmU3ltYm9sLmZvcihcInJlYWN0LnJlc3BvbmRlclwiKTt2YXIgej1cImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuaXRlcmF0b3I7XG5mdW5jdGlvbiBBKGEpe2Zvcih2YXIgYj1hLm1lc3NhZ2UsZD1cImh0dHBzOi8vcmVhY3Rqcy5vcmcvZG9jcy9lcnJvci1kZWNvZGVyLmh0bWw/aW52YXJpYW50PVwiK2IsYz0xO2M8YXJndW1lbnRzLmxlbmd0aDtjKyspZCs9XCImYXJnc1tdPVwiK2VuY29kZVVSSUNvbXBvbmVudChhcmd1bWVudHNbY10pO2EubWVzc2FnZT1cIk1pbmlmaWVkIFJlYWN0IGVycm9yICNcIitiK1wiOyB2aXNpdCBcIitkK1wiIGZvciB0aGUgZnVsbCBtZXNzYWdlIG9yIHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCBmb3IgZnVsbCBlcnJvcnMgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy4gXCI7cmV0dXJuIGF9dmFyIEI9e2lzTW91bnRlZDpmdW5jdGlvbigpe3JldHVybiExfSxlbnF1ZXVlRm9yY2VVcGRhdGU6ZnVuY3Rpb24oKXt9LGVucXVldWVSZXBsYWNlU3RhdGU6ZnVuY3Rpb24oKXt9LGVucXVldWVTZXRTdGF0ZTpmdW5jdGlvbigpe319LEM9e307XG5mdW5jdGlvbiBEKGEsYixkKXt0aGlzLnByb3BzPWE7dGhpcy5jb250ZXh0PWI7dGhpcy5yZWZzPUM7dGhpcy51cGRhdGVyPWR8fEJ9RC5wcm90b3R5cGUuaXNSZWFjdENvbXBvbmVudD17fTtELnByb3RvdHlwZS5zZXRTdGF0ZT1mdW5jdGlvbihhLGIpe2lmKFwib2JqZWN0XCIhPT10eXBlb2YgYSYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGEmJm51bGwhPWEpdGhyb3cgQShFcnJvcig4NSkpO3RoaXMudXBkYXRlci5lbnF1ZXVlU2V0U3RhdGUodGhpcyxhLGIsXCJzZXRTdGF0ZVwiKX07RC5wcm90b3R5cGUuZm9yY2VVcGRhdGU9ZnVuY3Rpb24oYSl7dGhpcy51cGRhdGVyLmVucXVldWVGb3JjZVVwZGF0ZSh0aGlzLGEsXCJmb3JjZVVwZGF0ZVwiKX07ZnVuY3Rpb24gRSgpe31FLnByb3RvdHlwZT1ELnByb3RvdHlwZTtmdW5jdGlvbiBGKGEsYixkKXt0aGlzLnByb3BzPWE7dGhpcy5jb250ZXh0PWI7dGhpcy5yZWZzPUM7dGhpcy51cGRhdGVyPWR8fEJ9dmFyIEc9Ri5wcm90b3R5cGU9bmV3IEU7XG5HLmNvbnN0cnVjdG9yPUY7aChHLEQucHJvdG90eXBlKTtHLmlzUHVyZVJlYWN0Q29tcG9uZW50PSEwO3ZhciBIPXtjdXJyZW50Om51bGx9LEk9e3N1c3BlbnNlOm51bGx9LEo9e2N1cnJlbnQ6bnVsbH0sSz1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LEw9e2tleTohMCxyZWY6ITAsX19zZWxmOiEwLF9fc291cmNlOiEwfTtcbmZ1bmN0aW9uIE0oYSxiLGQpe3ZhciBjPXZvaWQgMCxlPXt9LGc9bnVsbCxrPW51bGw7aWYobnVsbCE9Yilmb3IoYyBpbiB2b2lkIDAhPT1iLnJlZiYmKGs9Yi5yZWYpLHZvaWQgMCE9PWIua2V5JiYoZz1cIlwiK2Iua2V5KSxiKUsuY2FsbChiLGMpJiYhTC5oYXNPd25Qcm9wZXJ0eShjKSYmKGVbY109YltjXSk7dmFyIGY9YXJndW1lbnRzLmxlbmd0aC0yO2lmKDE9PT1mKWUuY2hpbGRyZW49ZDtlbHNlIGlmKDE8Zil7Zm9yKHZhciBsPUFycmF5KGYpLG09MDttPGY7bSsrKWxbbV09YXJndW1lbnRzW20rMl07ZS5jaGlsZHJlbj1sfWlmKGEmJmEuZGVmYXVsdFByb3BzKWZvcihjIGluIGY9YS5kZWZhdWx0UHJvcHMsZil2b2lkIDA9PT1lW2NdJiYoZVtjXT1mW2NdKTtyZXR1cm57JCR0eXBlb2Y6cCx0eXBlOmEsa2V5OmcscmVmOmsscHJvcHM6ZSxfb3duZXI6Si5jdXJyZW50fX1cbmZ1bmN0aW9uIGRhKGEsYil7cmV0dXJueyQkdHlwZW9mOnAsdHlwZTphLnR5cGUsa2V5OmIscmVmOmEucmVmLHByb3BzOmEucHJvcHMsX293bmVyOmEuX293bmVyfX1mdW5jdGlvbiBOKGEpe3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJmEuJCR0eXBlb2Y9PT1wfWZ1bmN0aW9uIGVzY2FwZShhKXt2YXIgYj17XCI9XCI6XCI9MFwiLFwiOlwiOlwiPTJcIn07cmV0dXJuXCIkXCIrKFwiXCIrYSkucmVwbGFjZSgvWz06XS9nLGZ1bmN0aW9uKGEpe3JldHVybiBiW2FdfSl9dmFyIE89L1xcLysvZyxQPVtdO2Z1bmN0aW9uIFEoYSxiLGQsYyl7aWYoUC5sZW5ndGgpe3ZhciBlPVAucG9wKCk7ZS5yZXN1bHQ9YTtlLmtleVByZWZpeD1iO2UuZnVuYz1kO2UuY29udGV4dD1jO2UuY291bnQ9MDtyZXR1cm4gZX1yZXR1cm57cmVzdWx0OmEsa2V5UHJlZml4OmIsZnVuYzpkLGNvbnRleHQ6Yyxjb3VudDowfX1cbmZ1bmN0aW9uIFIoYSl7YS5yZXN1bHQ9bnVsbDthLmtleVByZWZpeD1udWxsO2EuZnVuYz1udWxsO2EuY29udGV4dD1udWxsO2EuY291bnQ9MDsxMD5QLmxlbmd0aCYmUC5wdXNoKGEpfVxuZnVuY3Rpb24gUyhhLGIsZCxjKXt2YXIgZT10eXBlb2YgYTtpZihcInVuZGVmaW5lZFwiPT09ZXx8XCJib29sZWFuXCI9PT1lKWE9bnVsbDt2YXIgZz0hMTtpZihudWxsPT09YSlnPSEwO2Vsc2Ugc3dpdGNoKGUpe2Nhc2UgXCJzdHJpbmdcIjpjYXNlIFwibnVtYmVyXCI6Zz0hMDticmVhaztjYXNlIFwib2JqZWN0XCI6c3dpdGNoKGEuJCR0eXBlb2Ype2Nhc2UgcDpjYXNlIHE6Zz0hMH19aWYoZylyZXR1cm4gZChjLGEsXCJcIj09PWI/XCIuXCIrVChhLDApOmIpLDE7Zz0wO2I9XCJcIj09PWI/XCIuXCI6YitcIjpcIjtpZihBcnJheS5pc0FycmF5KGEpKWZvcih2YXIgaz0wO2s8YS5sZW5ndGg7aysrKXtlPWFba107dmFyIGY9YitUKGUsayk7Zys9UyhlLGYsZCxjKX1lbHNlIGlmKG51bGw9PT1hfHxcIm9iamVjdFwiIT09dHlwZW9mIGE/Zj1udWxsOihmPXomJmFbel18fGFbXCJAQGl0ZXJhdG9yXCJdLGY9XCJmdW5jdGlvblwiPT09dHlwZW9mIGY/ZjpudWxsKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZilmb3IoYT1mLmNhbGwoYSksaz1cbjA7IShlPWEubmV4dCgpKS5kb25lOyllPWUudmFsdWUsZj1iK1QoZSxrKyspLGcrPVMoZSxmLGQsYyk7ZWxzZSBpZihcIm9iamVjdFwiPT09ZSl0aHJvdyBkPVwiXCIrYSxBKEVycm9yKDMxKSxcIltvYmplY3QgT2JqZWN0XVwiPT09ZD9cIm9iamVjdCB3aXRoIGtleXMge1wiK09iamVjdC5rZXlzKGEpLmpvaW4oXCIsIFwiKStcIn1cIjpkLFwiXCIpO3JldHVybiBnfWZ1bmN0aW9uIFUoYSxiLGQpe3JldHVybiBudWxsPT1hPzA6UyhhLFwiXCIsYixkKX1mdW5jdGlvbiBUKGEsYil7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmbnVsbCE9YS5rZXk/ZXNjYXBlKGEua2V5KTpiLnRvU3RyaW5nKDM2KX1mdW5jdGlvbiBlYShhLGIpe2EuZnVuYy5jYWxsKGEuY29udGV4dCxiLGEuY291bnQrKyl9XG5mdW5jdGlvbiBmYShhLGIsZCl7dmFyIGM9YS5yZXN1bHQsZT1hLmtleVByZWZpeDthPWEuZnVuYy5jYWxsKGEuY29udGV4dCxiLGEuY291bnQrKyk7QXJyYXkuaXNBcnJheShhKT9WKGEsYyxkLGZ1bmN0aW9uKGEpe3JldHVybiBhfSk6bnVsbCE9YSYmKE4oYSkmJihhPWRhKGEsZSsoIWEua2V5fHxiJiZiLmtleT09PWEua2V5P1wiXCI6KFwiXCIrYS5rZXkpLnJlcGxhY2UoTyxcIiQmL1wiKStcIi9cIikrZCkpLGMucHVzaChhKSl9ZnVuY3Rpb24gVihhLGIsZCxjLGUpe3ZhciBnPVwiXCI7bnVsbCE9ZCYmKGc9KFwiXCIrZCkucmVwbGFjZShPLFwiJCYvXCIpK1wiL1wiKTtiPVEoYixnLGMsZSk7VShhLGZhLGIpO1IoYil9ZnVuY3Rpb24gVygpe3ZhciBhPUguY3VycmVudDtpZihudWxsPT09YSl0aHJvdyBBKEVycm9yKDMyMSkpO3JldHVybiBhfVxudmFyIFg9e0NoaWxkcmVuOnttYXA6ZnVuY3Rpb24oYSxiLGQpe2lmKG51bGw9PWEpcmV0dXJuIGE7dmFyIGM9W107VihhLGMsbnVsbCxiLGQpO3JldHVybiBjfSxmb3JFYWNoOmZ1bmN0aW9uKGEsYixkKXtpZihudWxsPT1hKXJldHVybiBhO2I9UShudWxsLG51bGwsYixkKTtVKGEsZWEsYik7UihiKX0sY291bnQ6ZnVuY3Rpb24oYSl7cmV0dXJuIFUoYSxmdW5jdGlvbigpe3JldHVybiBudWxsfSxudWxsKX0sdG9BcnJheTpmdW5jdGlvbihhKXt2YXIgYj1bXTtWKGEsYixudWxsLGZ1bmN0aW9uKGEpe3JldHVybiBhfSk7cmV0dXJuIGJ9LG9ubHk6ZnVuY3Rpb24oYSl7aWYoIU4oYSkpdGhyb3cgQShFcnJvcigxNDMpKTtyZXR1cm4gYX19LGNyZWF0ZVJlZjpmdW5jdGlvbigpe3JldHVybntjdXJyZW50Om51bGx9fSxDb21wb25lbnQ6RCxQdXJlQ29tcG9uZW50OkYsY3JlYXRlQ29udGV4dDpmdW5jdGlvbihhLGIpe3ZvaWQgMD09PWImJihiPW51bGwpO2E9eyQkdHlwZW9mOncsX2NhbGN1bGF0ZUNoYW5nZWRCaXRzOmIsXG5fY3VycmVudFZhbHVlOmEsX2N1cnJlbnRWYWx1ZTI6YSxfdGhyZWFkQ291bnQ6MCxQcm92aWRlcjpudWxsLENvbnN1bWVyOm51bGx9O2EuUHJvdmlkZXI9eyQkdHlwZW9mOnYsX2NvbnRleHQ6YX07cmV0dXJuIGEuQ29uc3VtZXI9YX0sZm9yd2FyZFJlZjpmdW5jdGlvbihhKXtyZXR1cm57JCR0eXBlb2Y6eCxyZW5kZXI6YX19LGxhenk6ZnVuY3Rpb24oYSl7cmV0dXJueyQkdHlwZW9mOmNhLF9jdG9yOmEsX3N0YXR1czotMSxfcmVzdWx0Om51bGx9fSxtZW1vOmZ1bmN0aW9uKGEsYil7cmV0dXJueyQkdHlwZW9mOmJhLHR5cGU6YSxjb21wYXJlOnZvaWQgMD09PWI/bnVsbDpifX0sdXNlQ2FsbGJhY2s6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gVygpLnVzZUNhbGxiYWNrKGEsYil9LHVzZUNvbnRleHQ6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gVygpLnVzZUNvbnRleHQoYSxiKX0sdXNlRWZmZWN0OmZ1bmN0aW9uKGEsYil7cmV0dXJuIFcoKS51c2VFZmZlY3QoYSxiKX0sdXNlSW1wZXJhdGl2ZUhhbmRsZTpmdW5jdGlvbihhLFxuYixkKXtyZXR1cm4gVygpLnVzZUltcGVyYXRpdmVIYW5kbGUoYSxiLGQpfSx1c2VEZWJ1Z1ZhbHVlOmZ1bmN0aW9uKCl7fSx1c2VMYXlvdXRFZmZlY3Q6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gVygpLnVzZUxheW91dEVmZmVjdChhLGIpfSx1c2VNZW1vOmZ1bmN0aW9uKGEsYil7cmV0dXJuIFcoKS51c2VNZW1vKGEsYil9LHVzZVJlZHVjZXI6ZnVuY3Rpb24oYSxiLGQpe3JldHVybiBXKCkudXNlUmVkdWNlcihhLGIsZCl9LHVzZVJlZjpmdW5jdGlvbihhKXtyZXR1cm4gVygpLnVzZVJlZihhKX0sdXNlU3RhdGU6ZnVuY3Rpb24oYSl7cmV0dXJuIFcoKS51c2VTdGF0ZShhKX0sRnJhZ21lbnQ6cixQcm9maWxlcjp1LFN0cmljdE1vZGU6dCxTdXNwZW5zZTp5LHVuc3RhYmxlX1N1c3BlbnNlTGlzdDphYSxjcmVhdGVFbGVtZW50Ok0sY2xvbmVFbGVtZW50OmZ1bmN0aW9uKGEsYixkKXtpZihudWxsPT09YXx8dm9pZCAwPT09YSl0aHJvdyBBKEVycm9yKDI2NyksYSk7dmFyIGM9dm9pZCAwLGU9XG5oKHt9LGEucHJvcHMpLGc9YS5rZXksaz1hLnJlZixmPWEuX293bmVyO2lmKG51bGwhPWIpe3ZvaWQgMCE9PWIucmVmJiYoaz1iLnJlZixmPUouY3VycmVudCk7dm9pZCAwIT09Yi5rZXkmJihnPVwiXCIrYi5rZXkpO3ZhciBsPXZvaWQgMDthLnR5cGUmJmEudHlwZS5kZWZhdWx0UHJvcHMmJihsPWEudHlwZS5kZWZhdWx0UHJvcHMpO2ZvcihjIGluIGIpSy5jYWxsKGIsYykmJiFMLmhhc093blByb3BlcnR5KGMpJiYoZVtjXT12b2lkIDA9PT1iW2NdJiZ2b2lkIDAhPT1sP2xbY106YltjXSl9Yz1hcmd1bWVudHMubGVuZ3RoLTI7aWYoMT09PWMpZS5jaGlsZHJlbj1kO2Vsc2UgaWYoMTxjKXtsPUFycmF5KGMpO2Zvcih2YXIgbT0wO208YzttKyspbFttXT1hcmd1bWVudHNbbSsyXTtlLmNoaWxkcmVuPWx9cmV0dXJueyQkdHlwZW9mOnAsdHlwZTphLnR5cGUsa2V5OmcscmVmOmsscHJvcHM6ZSxfb3duZXI6Zn19LGNyZWF0ZUZhY3Rvcnk6ZnVuY3Rpb24oYSl7dmFyIGI9TS5iaW5kKG51bGwsYSk7XG5iLnR5cGU9YTtyZXR1cm4gYn0saXNWYWxpZEVsZW1lbnQ6Tix2ZXJzaW9uOlwiMTYuOS4wXCIsdW5zdGFibGVfd2l0aFN1c3BlbnNlQ29uZmlnOmZ1bmN0aW9uKGEsYil7dmFyIGQ9SS5zdXNwZW5zZTtJLnN1c3BlbnNlPXZvaWQgMD09PWI/bnVsbDpiO3RyeXthKCl9ZmluYWxseXtJLnN1c3BlbnNlPWR9fSxfX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRDp7UmVhY3RDdXJyZW50RGlzcGF0Y2hlcjpILFJlYWN0Q3VycmVudEJhdGNoQ29uZmlnOkksUmVhY3RDdXJyZW50T3duZXI6SixJc1NvbWVSZW5kZXJlckFjdGluZzp7Y3VycmVudDohMX0sYXNzaWduOmh9fSxZPXtkZWZhdWx0Olh9LFo9WSYmWHx8WTttb2R1bGUuZXhwb3J0cz1aLmRlZmF1bHR8fFo7XG4iLCIvKiogQGxpY2Vuc2UgUmVhY3QgdjE2LjkuMFxuICogcmVhY3QtZG9tLnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuLypcbiBNb2Rlcm5penIgMy4wLjBwcmUgKEN1c3RvbSBCdWlsZCkgfCBNSVRcbiovXG4ndXNlIHN0cmljdCc7dmFyIGFhPXJlcXVpcmUoXCJyZWFjdFwiKSxtPXJlcXVpcmUoXCJvYmplY3QtYXNzaWduXCIpLHE9cmVxdWlyZShcInNjaGVkdWxlclwiKTtmdW5jdGlvbiB0KGEpe2Zvcih2YXIgYj1hLm1lc3NhZ2UsYz1cImh0dHBzOi8vcmVhY3Rqcy5vcmcvZG9jcy9lcnJvci1kZWNvZGVyLmh0bWw/aW52YXJpYW50PVwiK2IsZD0xO2Q8YXJndW1lbnRzLmxlbmd0aDtkKyspYys9XCImYXJnc1tdPVwiK2VuY29kZVVSSUNvbXBvbmVudChhcmd1bWVudHNbZF0pO2EubWVzc2FnZT1cIk1pbmlmaWVkIFJlYWN0IGVycm9yICNcIitiK1wiOyB2aXNpdCBcIitjK1wiIGZvciB0aGUgZnVsbCBtZXNzYWdlIG9yIHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCBmb3IgZnVsbCBlcnJvcnMgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy4gXCI7cmV0dXJuIGF9aWYoIWFhKXRocm93IHQoRXJyb3IoMjI3KSk7dmFyIGJhPW51bGwsY2E9e307XG5mdW5jdGlvbiBkYSgpe2lmKGJhKWZvcih2YXIgYSBpbiBjYSl7dmFyIGI9Y2FbYV0sYz1iYS5pbmRleE9mKGEpO2lmKCEoLTE8YykpdGhyb3cgdChFcnJvcig5NiksYSk7aWYoIWVhW2NdKXtpZighYi5leHRyYWN0RXZlbnRzKXRocm93IHQoRXJyb3IoOTcpLGEpO2VhW2NdPWI7Yz1iLmV2ZW50VHlwZXM7Zm9yKHZhciBkIGluIGMpe3ZhciBlPXZvaWQgMDt2YXIgZj1jW2RdLGg9YixnPWQ7aWYoZmEuaGFzT3duUHJvcGVydHkoZykpdGhyb3cgdChFcnJvcig5OSksZyk7ZmFbZ109Zjt2YXIgaz1mLnBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzO2lmKGspe2ZvcihlIGluIGspay5oYXNPd25Qcm9wZXJ0eShlKSYmaGEoa1tlXSxoLGcpO2U9ITB9ZWxzZSBmLnJlZ2lzdHJhdGlvbk5hbWU/KGhhKGYucmVnaXN0cmF0aW9uTmFtZSxoLGcpLGU9ITApOmU9ITE7aWYoIWUpdGhyb3cgdChFcnJvcig5OCksZCxhKTt9fX19XG5mdW5jdGlvbiBoYShhLGIsYyl7aWYoaWFbYV0pdGhyb3cgdChFcnJvcigxMDApLGEpO2lhW2FdPWI7amFbYV09Yi5ldmVudFR5cGVzW2NdLmRlcGVuZGVuY2llc312YXIgZWE9W10sZmE9e30saWE9e30samE9e307ZnVuY3Rpb24ga2EoYSxiLGMsZCxlLGYsaCxnLGspe3ZhciBsPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywzKTt0cnl7Yi5hcHBseShjLGwpfWNhdGNoKG4pe3RoaXMub25FcnJvcihuKX19dmFyIGxhPSExLG1hPW51bGwsbmE9ITEsb2E9bnVsbCxwYT17b25FcnJvcjpmdW5jdGlvbihhKXtsYT0hMDttYT1hfX07ZnVuY3Rpb24gcWEoYSxiLGMsZCxlLGYsaCxnLGspe2xhPSExO21hPW51bGw7a2EuYXBwbHkocGEsYXJndW1lbnRzKX1cbmZ1bmN0aW9uIHJhKGEsYixjLGQsZSxmLGgsZyxrKXtxYS5hcHBseSh0aGlzLGFyZ3VtZW50cyk7aWYobGEpe2lmKGxhKXt2YXIgbD1tYTtsYT0hMTttYT1udWxsfWVsc2UgdGhyb3cgdChFcnJvcigxOTgpKTtuYXx8KG5hPSEwLG9hPWwpfX12YXIgc2E9bnVsbCx0YT1udWxsLHZhPW51bGw7ZnVuY3Rpb24gd2EoYSxiLGMpe3ZhciBkPWEudHlwZXx8XCJ1bmtub3duLWV2ZW50XCI7YS5jdXJyZW50VGFyZ2V0PXZhKGMpO3JhKGQsYix2b2lkIDAsYSk7YS5jdXJyZW50VGFyZ2V0PW51bGx9ZnVuY3Rpb24geGEoYSxiKXtpZihudWxsPT1iKXRocm93IHQoRXJyb3IoMzApKTtpZihudWxsPT1hKXJldHVybiBiO2lmKEFycmF5LmlzQXJyYXkoYSkpe2lmKEFycmF5LmlzQXJyYXkoYikpcmV0dXJuIGEucHVzaC5hcHBseShhLGIpLGE7YS5wdXNoKGIpO3JldHVybiBhfXJldHVybiBBcnJheS5pc0FycmF5KGIpP1thXS5jb25jYXQoYik6W2EsYl19XG5mdW5jdGlvbiB5YShhLGIsYyl7QXJyYXkuaXNBcnJheShhKT9hLmZvckVhY2goYixjKTphJiZiLmNhbGwoYyxhKX12YXIgemE9bnVsbDtmdW5jdGlvbiBBYShhKXtpZihhKXt2YXIgYj1hLl9kaXNwYXRjaExpc3RlbmVycyxjPWEuX2Rpc3BhdGNoSW5zdGFuY2VzO2lmKEFycmF5LmlzQXJyYXkoYikpZm9yKHZhciBkPTA7ZDxiLmxlbmd0aCYmIWEuaXNQcm9wYWdhdGlvblN0b3BwZWQoKTtkKyspd2EoYSxiW2RdLGNbZF0pO2Vsc2UgYiYmd2EoYSxiLGMpO2EuX2Rpc3BhdGNoTGlzdGVuZXJzPW51bGw7YS5fZGlzcGF0Y2hJbnN0YW5jZXM9bnVsbDthLmlzUGVyc2lzdGVudCgpfHxhLmNvbnN0cnVjdG9yLnJlbGVhc2UoYSl9fWZ1bmN0aW9uIEJhKGEpe251bGwhPT1hJiYoemE9eGEoemEsYSkpO2E9emE7emE9bnVsbDtpZihhKXt5YShhLEFhKTtpZih6YSl0aHJvdyB0KEVycm9yKDk1KSk7aWYobmEpdGhyb3cgYT1vYSxuYT0hMSxvYT1udWxsLGE7fX1cbnZhciBDYT17aW5qZWN0RXZlbnRQbHVnaW5PcmRlcjpmdW5jdGlvbihhKXtpZihiYSl0aHJvdyB0KEVycm9yKDEwMSkpO2JhPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGEpO2RhKCl9LGluamVjdEV2ZW50UGx1Z2luc0J5TmFtZTpmdW5jdGlvbihhKXt2YXIgYj0hMSxjO2ZvcihjIGluIGEpaWYoYS5oYXNPd25Qcm9wZXJ0eShjKSl7dmFyIGQ9YVtjXTtpZighY2EuaGFzT3duUHJvcGVydHkoYyl8fGNhW2NdIT09ZCl7aWYoY2FbY10pdGhyb3cgdChFcnJvcigxMDIpLGMpO2NhW2NdPWQ7Yj0hMH19YiYmZGEoKX19O1xuZnVuY3Rpb24gRGEoYSxiKXt2YXIgYz1hLnN0YXRlTm9kZTtpZighYylyZXR1cm4gbnVsbDt2YXIgZD1zYShjKTtpZighZClyZXR1cm4gbnVsbDtjPWRbYl07YTpzd2l0Y2goYil7Y2FzZSBcIm9uQ2xpY2tcIjpjYXNlIFwib25DbGlja0NhcHR1cmVcIjpjYXNlIFwib25Eb3VibGVDbGlja1wiOmNhc2UgXCJvbkRvdWJsZUNsaWNrQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlRG93blwiOmNhc2UgXCJvbk1vdXNlRG93bkNhcHR1cmVcIjpjYXNlIFwib25Nb3VzZU1vdmVcIjpjYXNlIFwib25Nb3VzZU1vdmVDYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VVcFwiOmNhc2UgXCJvbk1vdXNlVXBDYXB0dXJlXCI6KGQ9IWQuZGlzYWJsZWQpfHwoYT1hLnR5cGUsZD0hKFwiYnV0dG9uXCI9PT1hfHxcImlucHV0XCI9PT1hfHxcInNlbGVjdFwiPT09YXx8XCJ0ZXh0YXJlYVwiPT09YSkpO2E9IWQ7YnJlYWsgYTtkZWZhdWx0OmE9ITF9aWYoYSlyZXR1cm4gbnVsbDtpZihjJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYyl0aHJvdyB0KEVycm9yKDIzMSksYix0eXBlb2YgYyk7XG5yZXR1cm4gY312YXIgRWE9TWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc2xpY2UoMiksRmE9XCJfX3JlYWN0SW50ZXJuYWxJbnN0YW5jZSRcIitFYSxHYT1cIl9fcmVhY3RFdmVudEhhbmRsZXJzJFwiK0VhO2Z1bmN0aW9uIEhhKGEpe2lmKGFbRmFdKXJldHVybiBhW0ZhXTtmb3IoOyFhW0ZhXTspaWYoYS5wYXJlbnROb2RlKWE9YS5wYXJlbnROb2RlO2Vsc2UgcmV0dXJuIG51bGw7YT1hW0ZhXTtyZXR1cm4gNT09PWEudGFnfHw2PT09YS50YWc/YTpudWxsfWZ1bmN0aW9uIElhKGEpe2E9YVtGYV07cmV0dXJuIWF8fDUhPT1hLnRhZyYmNiE9PWEudGFnP251bGw6YX1mdW5jdGlvbiBKYShhKXtpZig1PT09YS50YWd8fDY9PT1hLnRhZylyZXR1cm4gYS5zdGF0ZU5vZGU7dGhyb3cgdChFcnJvcigzMykpO31mdW5jdGlvbiBLYShhKXtyZXR1cm4gYVtHYV18fG51bGx9ZnVuY3Rpb24gTGEoYSl7ZG8gYT1hLnJldHVybjt3aGlsZShhJiY1IT09YS50YWcpO3JldHVybiBhP2E6bnVsbH1cbmZ1bmN0aW9uIE1hKGEsYixjKXtpZihiPURhKGEsYy5kaXNwYXRjaENvbmZpZy5waGFzZWRSZWdpc3RyYXRpb25OYW1lc1tiXSkpYy5fZGlzcGF0Y2hMaXN0ZW5lcnM9eGEoYy5fZGlzcGF0Y2hMaXN0ZW5lcnMsYiksYy5fZGlzcGF0Y2hJbnN0YW5jZXM9eGEoYy5fZGlzcGF0Y2hJbnN0YW5jZXMsYSl9ZnVuY3Rpb24gTmEoYSl7aWYoYSYmYS5kaXNwYXRjaENvbmZpZy5waGFzZWRSZWdpc3RyYXRpb25OYW1lcyl7Zm9yKHZhciBiPWEuX3RhcmdldEluc3QsYz1bXTtiOyljLnB1c2goYiksYj1MYShiKTtmb3IoYj1jLmxlbmd0aDswPGItLTspTWEoY1tiXSxcImNhcHR1cmVkXCIsYSk7Zm9yKGI9MDtiPGMubGVuZ3RoO2IrKylNYShjW2JdLFwiYnViYmxlZFwiLGEpfX1cbmZ1bmN0aW9uIE9hKGEsYixjKXthJiZjJiZjLmRpc3BhdGNoQ29uZmlnLnJlZ2lzdHJhdGlvbk5hbWUmJihiPURhKGEsYy5kaXNwYXRjaENvbmZpZy5yZWdpc3RyYXRpb25OYW1lKSkmJihjLl9kaXNwYXRjaExpc3RlbmVycz14YShjLl9kaXNwYXRjaExpc3RlbmVycyxiKSxjLl9kaXNwYXRjaEluc3RhbmNlcz14YShjLl9kaXNwYXRjaEluc3RhbmNlcyxhKSl9ZnVuY3Rpb24gUGEoYSl7YSYmYS5kaXNwYXRjaENvbmZpZy5yZWdpc3RyYXRpb25OYW1lJiZPYShhLl90YXJnZXRJbnN0LG51bGwsYSl9ZnVuY3Rpb24gUWEoYSl7eWEoYSxOYSl9dmFyIFJhPSEoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiB3aW5kb3d8fFwidW5kZWZpbmVkXCI9PT10eXBlb2Ygd2luZG93LmRvY3VtZW50fHxcInVuZGVmaW5lZFwiPT09dHlwZW9mIHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KTtcbmZ1bmN0aW9uIFNhKGEsYil7dmFyIGM9e307Y1thLnRvTG93ZXJDYXNlKCldPWIudG9Mb3dlckNhc2UoKTtjW1wiV2Via2l0XCIrYV09XCJ3ZWJraXRcIitiO2NbXCJNb3pcIithXT1cIm1velwiK2I7cmV0dXJuIGN9dmFyIFRhPXthbmltYXRpb25lbmQ6U2EoXCJBbmltYXRpb25cIixcIkFuaW1hdGlvbkVuZFwiKSxhbmltYXRpb25pdGVyYXRpb246U2EoXCJBbmltYXRpb25cIixcIkFuaW1hdGlvbkl0ZXJhdGlvblwiKSxhbmltYXRpb25zdGFydDpTYShcIkFuaW1hdGlvblwiLFwiQW5pbWF0aW9uU3RhcnRcIiksdHJhbnNpdGlvbmVuZDpTYShcIlRyYW5zaXRpb25cIixcIlRyYW5zaXRpb25FbmRcIil9LFVhPXt9LFZhPXt9O1xuUmEmJihWYT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLnN0eWxlLFwiQW5pbWF0aW9uRXZlbnRcImluIHdpbmRvd3x8KGRlbGV0ZSBUYS5hbmltYXRpb25lbmQuYW5pbWF0aW9uLGRlbGV0ZSBUYS5hbmltYXRpb25pdGVyYXRpb24uYW5pbWF0aW9uLGRlbGV0ZSBUYS5hbmltYXRpb25zdGFydC5hbmltYXRpb24pLFwiVHJhbnNpdGlvbkV2ZW50XCJpbiB3aW5kb3d8fGRlbGV0ZSBUYS50cmFuc2l0aW9uZW5kLnRyYW5zaXRpb24pO2Z1bmN0aW9uIFdhKGEpe2lmKFVhW2FdKXJldHVybiBVYVthXTtpZighVGFbYV0pcmV0dXJuIGE7dmFyIGI9VGFbYV0sYztmb3IoYyBpbiBiKWlmKGIuaGFzT3duUHJvcGVydHkoYykmJmMgaW4gVmEpcmV0dXJuIFVhW2FdPWJbY107cmV0dXJuIGF9XG52YXIgWGE9V2EoXCJhbmltYXRpb25lbmRcIiksWWE9V2EoXCJhbmltYXRpb25pdGVyYXRpb25cIiksWmE9V2EoXCJhbmltYXRpb25zdGFydFwiKSxhYj1XYShcInRyYW5zaXRpb25lbmRcIiksYmI9XCJhYm9ydCBjYW5wbGF5IGNhbnBsYXl0aHJvdWdoIGR1cmF0aW9uY2hhbmdlIGVtcHRpZWQgZW5jcnlwdGVkIGVuZGVkIGVycm9yIGxvYWRlZGRhdGEgbG9hZGVkbWV0YWRhdGEgbG9hZHN0YXJ0IHBhdXNlIHBsYXkgcGxheWluZyBwcm9ncmVzcyByYXRlY2hhbmdlIHNlZWtlZCBzZWVraW5nIHN0YWxsZWQgc3VzcGVuZCB0aW1ldXBkYXRlIHZvbHVtZWNoYW5nZSB3YWl0aW5nXCIuc3BsaXQoXCIgXCIpLGNiPW51bGwsZGI9bnVsbCxlYj1udWxsO1xuZnVuY3Rpb24gZmIoKXtpZihlYilyZXR1cm4gZWI7dmFyIGEsYj1kYixjPWIubGVuZ3RoLGQsZT1cInZhbHVlXCJpbiBjYj9jYi52YWx1ZTpjYi50ZXh0Q29udGVudCxmPWUubGVuZ3RoO2ZvcihhPTA7YTxjJiZiW2FdPT09ZVthXTthKyspO3ZhciBoPWMtYTtmb3IoZD0xO2Q8PWgmJmJbYy1kXT09PWVbZi1kXTtkKyspO3JldHVybiBlYj1lLnNsaWNlKGEsMTxkPzEtZDp2b2lkIDApfWZ1bmN0aW9uIGdiKCl7cmV0dXJuITB9ZnVuY3Rpb24gaGIoKXtyZXR1cm4hMX1cbmZ1bmN0aW9uIHkoYSxiLGMsZCl7dGhpcy5kaXNwYXRjaENvbmZpZz1hO3RoaXMuX3RhcmdldEluc3Q9Yjt0aGlzLm5hdGl2ZUV2ZW50PWM7YT10aGlzLmNvbnN0cnVjdG9yLkludGVyZmFjZTtmb3IodmFyIGUgaW4gYSlhLmhhc093blByb3BlcnR5KGUpJiYoKGI9YVtlXSk/dGhpc1tlXT1iKGMpOlwidGFyZ2V0XCI9PT1lP3RoaXMudGFyZ2V0PWQ6dGhpc1tlXT1jW2VdKTt0aGlzLmlzRGVmYXVsdFByZXZlbnRlZD0obnVsbCE9Yy5kZWZhdWx0UHJldmVudGVkP2MuZGVmYXVsdFByZXZlbnRlZDohMT09PWMucmV0dXJuVmFsdWUpP2diOmhiO3RoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQ9aGI7cmV0dXJuIHRoaXN9XG5tKHkucHJvdG90eXBlLHtwcmV2ZW50RGVmYXVsdDpmdW5jdGlvbigpe3RoaXMuZGVmYXVsdFByZXZlbnRlZD0hMDt2YXIgYT10aGlzLm5hdGl2ZUV2ZW50O2EmJihhLnByZXZlbnREZWZhdWx0P2EucHJldmVudERlZmF1bHQoKTpcInVua25vd25cIiE9PXR5cGVvZiBhLnJldHVyblZhbHVlJiYoYS5yZXR1cm5WYWx1ZT0hMSksdGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQ9Z2IpfSxzdG9wUHJvcGFnYXRpb246ZnVuY3Rpb24oKXt2YXIgYT10aGlzLm5hdGl2ZUV2ZW50O2EmJihhLnN0b3BQcm9wYWdhdGlvbj9hLnN0b3BQcm9wYWdhdGlvbigpOlwidW5rbm93blwiIT09dHlwZW9mIGEuY2FuY2VsQnViYmxlJiYoYS5jYW5jZWxCdWJibGU9ITApLHRoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQ9Z2IpfSxwZXJzaXN0OmZ1bmN0aW9uKCl7dGhpcy5pc1BlcnNpc3RlbnQ9Z2J9LGlzUGVyc2lzdGVudDpoYixkZXN0cnVjdG9yOmZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5jb25zdHJ1Y3Rvci5JbnRlcmZhY2UsXG5iO2ZvcihiIGluIGEpdGhpc1tiXT1udWxsO3RoaXMubmF0aXZlRXZlbnQ9dGhpcy5fdGFyZ2V0SW5zdD10aGlzLmRpc3BhdGNoQ29uZmlnPW51bGw7dGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZD10aGlzLmlzRGVmYXVsdFByZXZlbnRlZD1oYjt0aGlzLl9kaXNwYXRjaEluc3RhbmNlcz10aGlzLl9kaXNwYXRjaExpc3RlbmVycz1udWxsfX0pO3kuSW50ZXJmYWNlPXt0eXBlOm51bGwsdGFyZ2V0Om51bGwsY3VycmVudFRhcmdldDpmdW5jdGlvbigpe3JldHVybiBudWxsfSxldmVudFBoYXNlOm51bGwsYnViYmxlczpudWxsLGNhbmNlbGFibGU6bnVsbCx0aW1lU3RhbXA6ZnVuY3Rpb24oYSl7cmV0dXJuIGEudGltZVN0YW1wfHxEYXRlLm5vdygpfSxkZWZhdWx0UHJldmVudGVkOm51bGwsaXNUcnVzdGVkOm51bGx9O1xueS5leHRlbmQ9ZnVuY3Rpb24oYSl7ZnVuY3Rpb24gYigpe31mdW5jdGlvbiBjKCl7cmV0dXJuIGQuYXBwbHkodGhpcyxhcmd1bWVudHMpfXZhciBkPXRoaXM7Yi5wcm90b3R5cGU9ZC5wcm90b3R5cGU7dmFyIGU9bmV3IGI7bShlLGMucHJvdG90eXBlKTtjLnByb3RvdHlwZT1lO2MucHJvdG90eXBlLmNvbnN0cnVjdG9yPWM7Yy5JbnRlcmZhY2U9bSh7fSxkLkludGVyZmFjZSxhKTtjLmV4dGVuZD1kLmV4dGVuZDtpYihjKTtyZXR1cm4gY307aWIoeSk7ZnVuY3Rpb24gamIoYSxiLGMsZCl7aWYodGhpcy5ldmVudFBvb2wubGVuZ3RoKXt2YXIgZT10aGlzLmV2ZW50UG9vbC5wb3AoKTt0aGlzLmNhbGwoZSxhLGIsYyxkKTtyZXR1cm4gZX1yZXR1cm4gbmV3IHRoaXMoYSxiLGMsZCl9XG5mdW5jdGlvbiBrYihhKXtpZighKGEgaW5zdGFuY2VvZiB0aGlzKSl0aHJvdyB0KEVycm9yKDI3OSkpO2EuZGVzdHJ1Y3RvcigpOzEwPnRoaXMuZXZlbnRQb29sLmxlbmd0aCYmdGhpcy5ldmVudFBvb2wucHVzaChhKX1mdW5jdGlvbiBpYihhKXthLmV2ZW50UG9vbD1bXTthLmdldFBvb2xlZD1qYjthLnJlbGVhc2U9a2J9dmFyIGxiPXkuZXh0ZW5kKHtkYXRhOm51bGx9KSxtYj15LmV4dGVuZCh7ZGF0YTpudWxsfSksbmI9WzksMTMsMjcsMzJdLG9iPVJhJiZcIkNvbXBvc2l0aW9uRXZlbnRcImluIHdpbmRvdyxwYj1udWxsO1JhJiZcImRvY3VtZW50TW9kZVwiaW4gZG9jdW1lbnQmJihwYj1kb2N1bWVudC5kb2N1bWVudE1vZGUpO1xudmFyIHFiPVJhJiZcIlRleHRFdmVudFwiaW4gd2luZG93JiYhcGIsc2I9UmEmJighb2J8fHBiJiY4PHBiJiYxMT49cGIpLHRiPVN0cmluZy5mcm9tQ2hhckNvZGUoMzIpLHViPXtiZWZvcmVJbnB1dDp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6XCJvbkJlZm9yZUlucHV0XCIsY2FwdHVyZWQ6XCJvbkJlZm9yZUlucHV0Q2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6W1wiY29tcG9zaXRpb25lbmRcIixcImtleXByZXNzXCIsXCJ0ZXh0SW5wdXRcIixcInBhc3RlXCJdfSxjb21wb3NpdGlvbkVuZDp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6XCJvbkNvbXBvc2l0aW9uRW5kXCIsY2FwdHVyZWQ6XCJvbkNvbXBvc2l0aW9uRW5kQ2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6XCJibHVyIGNvbXBvc2l0aW9uZW5kIGtleWRvd24ga2V5cHJlc3Mga2V5dXAgbW91c2Vkb3duXCIuc3BsaXQoXCIgXCIpfSxjb21wb3NpdGlvblN0YXJ0OntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uQ29tcG9zaXRpb25TdGFydFwiLFxuY2FwdHVyZWQ6XCJvbkNvbXBvc2l0aW9uU3RhcnRDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpcImJsdXIgY29tcG9zaXRpb25zdGFydCBrZXlkb3duIGtleXByZXNzIGtleXVwIG1vdXNlZG93blwiLnNwbGl0KFwiIFwiKX0sY29tcG9zaXRpb25VcGRhdGU6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25Db21wb3NpdGlvblVwZGF0ZVwiLGNhcHR1cmVkOlwib25Db21wb3NpdGlvblVwZGF0ZUNhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOlwiYmx1ciBjb21wb3NpdGlvbnVwZGF0ZSBrZXlkb3duIGtleXByZXNzIGtleXVwIG1vdXNlZG93blwiLnNwbGl0KFwiIFwiKX19LHZiPSExO1xuZnVuY3Rpb24gd2IoYSxiKXtzd2l0Y2goYSl7Y2FzZSBcImtleXVwXCI6cmV0dXJuLTEhPT1uYi5pbmRleE9mKGIua2V5Q29kZSk7Y2FzZSBcImtleWRvd25cIjpyZXR1cm4gMjI5IT09Yi5rZXlDb2RlO2Nhc2UgXCJrZXlwcmVzc1wiOmNhc2UgXCJtb3VzZWRvd25cIjpjYXNlIFwiYmx1clwiOnJldHVybiEwO2RlZmF1bHQ6cmV0dXJuITF9fWZ1bmN0aW9uIHhiKGEpe2E9YS5kZXRhaWw7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZcImRhdGFcImluIGE/YS5kYXRhOm51bGx9dmFyIHliPSExO2Z1bmN0aW9uIEFiKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJjb21wb3NpdGlvbmVuZFwiOnJldHVybiB4YihiKTtjYXNlIFwia2V5cHJlc3NcIjppZigzMiE9PWIud2hpY2gpcmV0dXJuIG51bGw7dmI9ITA7cmV0dXJuIHRiO2Nhc2UgXCJ0ZXh0SW5wdXRcIjpyZXR1cm4gYT1iLmRhdGEsYT09PXRiJiZ2Yj9udWxsOmE7ZGVmYXVsdDpyZXR1cm4gbnVsbH19XG5mdW5jdGlvbiBCYihhLGIpe2lmKHliKXJldHVyblwiY29tcG9zaXRpb25lbmRcIj09PWF8fCFvYiYmd2IoYSxiKT8oYT1mYigpLGViPWRiPWNiPW51bGwseWI9ITEsYSk6bnVsbDtzd2l0Y2goYSl7Y2FzZSBcInBhc3RlXCI6cmV0dXJuIG51bGw7Y2FzZSBcImtleXByZXNzXCI6aWYoIShiLmN0cmxLZXl8fGIuYWx0S2V5fHxiLm1ldGFLZXkpfHxiLmN0cmxLZXkmJmIuYWx0S2V5KXtpZihiLmNoYXImJjE8Yi5jaGFyLmxlbmd0aClyZXR1cm4gYi5jaGFyO2lmKGIud2hpY2gpcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoYi53aGljaCl9cmV0dXJuIG51bGw7Y2FzZSBcImNvbXBvc2l0aW9uZW5kXCI6cmV0dXJuIHNiJiZcImtvXCIhPT1iLmxvY2FsZT9udWxsOmIuZGF0YTtkZWZhdWx0OnJldHVybiBudWxsfX1cbnZhciBDYj17ZXZlbnRUeXBlczp1YixleHRyYWN0RXZlbnRzOmZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlPXZvaWQgMDt2YXIgZj12b2lkIDA7aWYob2IpYjp7c3dpdGNoKGEpe2Nhc2UgXCJjb21wb3NpdGlvbnN0YXJ0XCI6ZT11Yi5jb21wb3NpdGlvblN0YXJ0O2JyZWFrIGI7Y2FzZSBcImNvbXBvc2l0aW9uZW5kXCI6ZT11Yi5jb21wb3NpdGlvbkVuZDticmVhayBiO2Nhc2UgXCJjb21wb3NpdGlvbnVwZGF0ZVwiOmU9dWIuY29tcG9zaXRpb25VcGRhdGU7YnJlYWsgYn1lPXZvaWQgMH1lbHNlIHliP3diKGEsYykmJihlPXViLmNvbXBvc2l0aW9uRW5kKTpcImtleWRvd25cIj09PWEmJjIyOT09PWMua2V5Q29kZSYmKGU9dWIuY29tcG9zaXRpb25TdGFydCk7ZT8oc2ImJlwia29cIiE9PWMubG9jYWxlJiYoeWJ8fGUhPT11Yi5jb21wb3NpdGlvblN0YXJ0P2U9PT11Yi5jb21wb3NpdGlvbkVuZCYmeWImJihmPWZiKCkpOihjYj1kLGRiPVwidmFsdWVcImluIGNiP2NiLnZhbHVlOmNiLnRleHRDb250ZW50LHliPVxuITApKSxlPWxiLmdldFBvb2xlZChlLGIsYyxkKSxmP2UuZGF0YT1mOihmPXhiKGMpLG51bGwhPT1mJiYoZS5kYXRhPWYpKSxRYShlKSxmPWUpOmY9bnVsbDsoYT1xYj9BYihhLGMpOkJiKGEsYykpPyhiPW1iLmdldFBvb2xlZCh1Yi5iZWZvcmVJbnB1dCxiLGMsZCksYi5kYXRhPWEsUWEoYikpOmI9bnVsbDtyZXR1cm4gbnVsbD09PWY/YjpudWxsPT09Yj9mOltmLGJdfX0sRGI9bnVsbCxFYj1udWxsLEZiPW51bGw7ZnVuY3Rpb24gR2IoYSl7aWYoYT10YShhKSl7aWYoXCJmdW5jdGlvblwiIT09dHlwZW9mIERiKXRocm93IHQoRXJyb3IoMjgwKSk7dmFyIGI9c2EoYS5zdGF0ZU5vZGUpO0RiKGEuc3RhdGVOb2RlLGEudHlwZSxiKX19ZnVuY3Rpb24gSGIoYSl7RWI/RmI/RmIucHVzaChhKTpGYj1bYV06RWI9YX1mdW5jdGlvbiBJYigpe2lmKEViKXt2YXIgYT1FYixiPUZiO0ZiPUViPW51bGw7R2IoYSk7aWYoYilmb3IoYT0wO2E8Yi5sZW5ndGg7YSsrKUdiKGJbYV0pfX1cbmZ1bmN0aW9uIEpiKGEsYil7cmV0dXJuIGEoYil9ZnVuY3Rpb24gS2IoYSxiLGMsZCl7cmV0dXJuIGEoYixjLGQpfWZ1bmN0aW9uIExiKCl7fXZhciBNYj1KYixOYj0hMTtmdW5jdGlvbiBPYigpe2lmKG51bGwhPT1FYnx8bnVsbCE9PUZiKUxiKCksSWIoKX12YXIgUGI9e2NvbG9yOiEwLGRhdGU6ITAsZGF0ZXRpbWU6ITAsXCJkYXRldGltZS1sb2NhbFwiOiEwLGVtYWlsOiEwLG1vbnRoOiEwLG51bWJlcjohMCxwYXNzd29yZDohMCxyYW5nZTohMCxzZWFyY2g6ITAsdGVsOiEwLHRleHQ6ITAsdGltZTohMCx1cmw6ITAsd2VlazohMH07ZnVuY3Rpb24gUWIoYSl7dmFyIGI9YSYmYS5ub2RlTmFtZSYmYS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO3JldHVyblwiaW5wdXRcIj09PWI/ISFQYlthLnR5cGVdOlwidGV4dGFyZWFcIj09PWI/ITA6ITF9XG5mdW5jdGlvbiBSYihhKXthPWEudGFyZ2V0fHxhLnNyY0VsZW1lbnR8fHdpbmRvdzthLmNvcnJlc3BvbmRpbmdVc2VFbGVtZW50JiYoYT1hLmNvcnJlc3BvbmRpbmdVc2VFbGVtZW50KTtyZXR1cm4gMz09PWEubm9kZVR5cGU/YS5wYXJlbnROb2RlOmF9ZnVuY3Rpb24gU2IoYSl7aWYoIVJhKXJldHVybiExO2E9XCJvblwiK2E7dmFyIGI9YSBpbiBkb2N1bWVudDtifHwoYj1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLGIuc2V0QXR0cmlidXRlKGEsXCJyZXR1cm47XCIpLGI9XCJmdW5jdGlvblwiPT09dHlwZW9mIGJbYV0pO3JldHVybiBifWZ1bmN0aW9uIFRiKGEpe3ZhciBiPWEudHlwZTtyZXR1cm4oYT1hLm5vZGVOYW1lKSYmXCJpbnB1dFwiPT09YS50b0xvd2VyQ2FzZSgpJiYoXCJjaGVja2JveFwiPT09Ynx8XCJyYWRpb1wiPT09Yil9XG5mdW5jdGlvbiBVYihhKXt2YXIgYj1UYihhKT9cImNoZWNrZWRcIjpcInZhbHVlXCIsYz1PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGEuY29uc3RydWN0b3IucHJvdG90eXBlLGIpLGQ9XCJcIithW2JdO2lmKCFhLmhhc093blByb3BlcnR5KGIpJiZcInVuZGVmaW5lZFwiIT09dHlwZW9mIGMmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLmdldCYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGMuc2V0KXt2YXIgZT1jLmdldCxmPWMuc2V0O09iamVjdC5kZWZpbmVQcm9wZXJ0eShhLGIse2NvbmZpZ3VyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gZS5jYWxsKHRoaXMpfSxzZXQ6ZnVuY3Rpb24oYSl7ZD1cIlwiK2E7Zi5jYWxsKHRoaXMsYSl9fSk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGEsYix7ZW51bWVyYWJsZTpjLmVudW1lcmFibGV9KTtyZXR1cm57Z2V0VmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gZH0sc2V0VmFsdWU6ZnVuY3Rpb24oYSl7ZD1cIlwiK2F9LHN0b3BUcmFja2luZzpmdW5jdGlvbigpe2EuX3ZhbHVlVHJhY2tlcj1cbm51bGw7ZGVsZXRlIGFbYl19fX19ZnVuY3Rpb24gVmIoYSl7YS5fdmFsdWVUcmFja2VyfHwoYS5fdmFsdWVUcmFja2VyPVViKGEpKX1mdW5jdGlvbiBXYihhKXtpZighYSlyZXR1cm4hMTt2YXIgYj1hLl92YWx1ZVRyYWNrZXI7aWYoIWIpcmV0dXJuITA7dmFyIGM9Yi5nZXRWYWx1ZSgpO3ZhciBkPVwiXCI7YSYmKGQ9VGIoYSk/YS5jaGVja2VkP1widHJ1ZVwiOlwiZmFsc2VcIjphLnZhbHVlKTthPWQ7cmV0dXJuIGEhPT1jPyhiLnNldFZhbHVlKGEpLCEwKTohMX12YXIgWGI9YWEuX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQ7WGIuaGFzT3duUHJvcGVydHkoXCJSZWFjdEN1cnJlbnREaXNwYXRjaGVyXCIpfHwoWGIuUmVhY3RDdXJyZW50RGlzcGF0Y2hlcj17Y3VycmVudDpudWxsfSk7WGIuaGFzT3duUHJvcGVydHkoXCJSZWFjdEN1cnJlbnRCYXRjaENvbmZpZ1wiKXx8KFhiLlJlYWN0Q3VycmVudEJhdGNoQ29uZmlnPXtzdXNwZW5zZTpudWxsfSk7XG52YXIgWWI9L14oLiopW1xcXFxcXC9dLyxCPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5mb3IsWmI9Qj9TeW1ib2wuZm9yKFwicmVhY3QuZWxlbWVudFwiKTo2MDEwMywkYj1CP1N5bWJvbC5mb3IoXCJyZWFjdC5wb3J0YWxcIik6NjAxMDYsYWM9Qj9TeW1ib2wuZm9yKFwicmVhY3QuZnJhZ21lbnRcIik6NjAxMDcsYmM9Qj9TeW1ib2wuZm9yKFwicmVhY3Quc3RyaWN0X21vZGVcIik6NjAxMDgsY2M9Qj9TeW1ib2wuZm9yKFwicmVhY3QucHJvZmlsZXJcIik6NjAxMTQsZGM9Qj9TeW1ib2wuZm9yKFwicmVhY3QucHJvdmlkZXJcIik6NjAxMDksZWM9Qj9TeW1ib2wuZm9yKFwicmVhY3QuY29udGV4dFwiKTo2MDExMCxmYz1CP1N5bWJvbC5mb3IoXCJyZWFjdC5jb25jdXJyZW50X21vZGVcIik6NjAxMTEsZ2M9Qj9TeW1ib2wuZm9yKFwicmVhY3QuZm9yd2FyZF9yZWZcIik6NjAxMTIsaGM9Qj9TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VcIik6NjAxMTMsaWM9Qj9TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VfbGlzdFwiKTpcbjYwMTIwLGpjPUI/U3ltYm9sLmZvcihcInJlYWN0Lm1lbW9cIik6NjAxMTUsa2M9Qj9TeW1ib2wuZm9yKFwicmVhY3QubGF6eVwiKTo2MDExNjtCJiZTeW1ib2wuZm9yKFwicmVhY3QuZnVuZGFtZW50YWxcIik7QiYmU3ltYm9sLmZvcihcInJlYWN0LnJlc3BvbmRlclwiKTt2YXIgbGM9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLml0ZXJhdG9yO2Z1bmN0aW9uIG1jKGEpe2lmKG51bGw9PT1hfHxcIm9iamVjdFwiIT09dHlwZW9mIGEpcmV0dXJuIG51bGw7YT1sYyYmYVtsY118fGFbXCJAQGl0ZXJhdG9yXCJdO3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBhP2E6bnVsbH1cbmZ1bmN0aW9uIG9jKGEpe2lmKG51bGw9PWEpcmV0dXJuIG51bGw7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEpcmV0dXJuIGEuZGlzcGxheU5hbWV8fGEubmFtZXx8bnVsbDtpZihcInN0cmluZ1wiPT09dHlwZW9mIGEpcmV0dXJuIGE7c3dpdGNoKGEpe2Nhc2UgYWM6cmV0dXJuXCJGcmFnbWVudFwiO2Nhc2UgJGI6cmV0dXJuXCJQb3J0YWxcIjtjYXNlIGNjOnJldHVyblwiUHJvZmlsZXJcIjtjYXNlIGJjOnJldHVyblwiU3RyaWN0TW9kZVwiO2Nhc2UgaGM6cmV0dXJuXCJTdXNwZW5zZVwiO2Nhc2UgaWM6cmV0dXJuXCJTdXNwZW5zZUxpc3RcIn1pZihcIm9iamVjdFwiPT09dHlwZW9mIGEpc3dpdGNoKGEuJCR0eXBlb2Ype2Nhc2UgZWM6cmV0dXJuXCJDb250ZXh0LkNvbnN1bWVyXCI7Y2FzZSBkYzpyZXR1cm5cIkNvbnRleHQuUHJvdmlkZXJcIjtjYXNlIGdjOnZhciBiPWEucmVuZGVyO2I9Yi5kaXNwbGF5TmFtZXx8Yi5uYW1lfHxcIlwiO3JldHVybiBhLmRpc3BsYXlOYW1lfHwoXCJcIiE9PWI/XCJGb3J3YXJkUmVmKFwiK2IrXCIpXCI6XG5cIkZvcndhcmRSZWZcIik7Y2FzZSBqYzpyZXR1cm4gb2MoYS50eXBlKTtjYXNlIGtjOmlmKGE9MT09PWEuX3N0YXR1cz9hLl9yZXN1bHQ6bnVsbClyZXR1cm4gb2MoYSl9cmV0dXJuIG51bGx9ZnVuY3Rpb24gcGMoYSl7dmFyIGI9XCJcIjtkb3thOnN3aXRjaChhLnRhZyl7Y2FzZSAzOmNhc2UgNDpjYXNlIDY6Y2FzZSA3OmNhc2UgMTA6Y2FzZSA5OnZhciBjPVwiXCI7YnJlYWsgYTtkZWZhdWx0OnZhciBkPWEuX2RlYnVnT3duZXIsZT1hLl9kZWJ1Z1NvdXJjZSxmPW9jKGEudHlwZSk7Yz1udWxsO2QmJihjPW9jKGQudHlwZSkpO2Q9ZjtmPVwiXCI7ZT9mPVwiIChhdCBcIitlLmZpbGVOYW1lLnJlcGxhY2UoWWIsXCJcIikrXCI6XCIrZS5saW5lTnVtYmVyK1wiKVwiOmMmJihmPVwiIChjcmVhdGVkIGJ5IFwiK2MrXCIpXCIpO2M9XCJcXG4gICAgaW4gXCIrKGR8fFwiVW5rbm93blwiKStmfWIrPWM7YT1hLnJldHVybn13aGlsZShhKTtyZXR1cm4gYn1cbnZhciBxYz0vXls6QS1aX2EtelxcdTAwQzAtXFx1MDBENlxcdTAwRDgtXFx1MDBGNlxcdTAwRjgtXFx1MDJGRlxcdTAzNzAtXFx1MDM3RFxcdTAzN0YtXFx1MUZGRlxcdTIwMEMtXFx1MjAwRFxcdTIwNzAtXFx1MjE4RlxcdTJDMDAtXFx1MkZFRlxcdTMwMDEtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZGRF1bOkEtWl9hLXpcXHUwMEMwLVxcdTAwRDZcXHUwMEQ4LVxcdTAwRjZcXHUwMEY4LVxcdTAyRkZcXHUwMzcwLVxcdTAzN0RcXHUwMzdGLVxcdTFGRkZcXHUyMDBDLVxcdTIwMERcXHUyMDcwLVxcdTIxOEZcXHUyQzAwLVxcdTJGRUZcXHUzMDAxLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRkRcXC0uMC05XFx1MDBCN1xcdTAzMDAtXFx1MDM2RlxcdTIwM0YtXFx1MjA0MF0qJC8scmM9T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSxzYz17fSx0Yz17fTtcbmZ1bmN0aW9uIHVjKGEpe2lmKHJjLmNhbGwodGMsYSkpcmV0dXJuITA7aWYocmMuY2FsbChzYyxhKSlyZXR1cm4hMTtpZihxYy50ZXN0KGEpKXJldHVybiB0Y1thXT0hMDtzY1thXT0hMDtyZXR1cm4hMX1mdW5jdGlvbiB2YyhhLGIsYyxkKXtpZihudWxsIT09YyYmMD09PWMudHlwZSlyZXR1cm4hMTtzd2l0Y2godHlwZW9mIGIpe2Nhc2UgXCJmdW5jdGlvblwiOmNhc2UgXCJzeW1ib2xcIjpyZXR1cm4hMDtjYXNlIFwiYm9vbGVhblwiOmlmKGQpcmV0dXJuITE7aWYobnVsbCE9PWMpcmV0dXJuIWMuYWNjZXB0c0Jvb2xlYW5zO2E9YS50b0xvd2VyQ2FzZSgpLnNsaWNlKDAsNSk7cmV0dXJuXCJkYXRhLVwiIT09YSYmXCJhcmlhLVwiIT09YTtkZWZhdWx0OnJldHVybiExfX1cbmZ1bmN0aW9uIHdjKGEsYixjLGQpe2lmKG51bGw9PT1ifHxcInVuZGVmaW5lZFwiPT09dHlwZW9mIGJ8fHZjKGEsYixjLGQpKXJldHVybiEwO2lmKGQpcmV0dXJuITE7aWYobnVsbCE9PWMpc3dpdGNoKGMudHlwZSl7Y2FzZSAzOnJldHVybiFiO2Nhc2UgNDpyZXR1cm4hMT09PWI7Y2FzZSA1OnJldHVybiBpc05hTihiKTtjYXNlIDY6cmV0dXJuIGlzTmFOKGIpfHwxPmJ9cmV0dXJuITF9ZnVuY3Rpb24gRChhLGIsYyxkLGUsZil7dGhpcy5hY2NlcHRzQm9vbGVhbnM9Mj09PWJ8fDM9PT1ifHw0PT09Yjt0aGlzLmF0dHJpYnV0ZU5hbWU9ZDt0aGlzLmF0dHJpYnV0ZU5hbWVzcGFjZT1lO3RoaXMubXVzdFVzZVByb3BlcnR5PWM7dGhpcy5wcm9wZXJ0eU5hbWU9YTt0aGlzLnR5cGU9Yjt0aGlzLnNhbml0aXplVVJMPWZ9dmFyIEY9e307XG5cImNoaWxkcmVuIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MIGRlZmF1bHRWYWx1ZSBkZWZhdWx0Q2hlY2tlZCBpbm5lckhUTUwgc3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nIHN1cHByZXNzSHlkcmF0aW9uV2FybmluZyBzdHlsZVwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0ZbYV09bmV3IEQoYSwwLCExLGEsbnVsbCwhMSl9KTtbW1wiYWNjZXB0Q2hhcnNldFwiLFwiYWNjZXB0LWNoYXJzZXRcIl0sW1wiY2xhc3NOYW1lXCIsXCJjbGFzc1wiXSxbXCJodG1sRm9yXCIsXCJmb3JcIl0sW1wiaHR0cEVxdWl2XCIsXCJodHRwLWVxdWl2XCJdXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWFbMF07RltiXT1uZXcgRChiLDEsITEsYVsxXSxudWxsLCExKX0pO1tcImNvbnRlbnRFZGl0YWJsZVwiLFwiZHJhZ2dhYmxlXCIsXCJzcGVsbENoZWNrXCIsXCJ2YWx1ZVwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0ZbYV09bmV3IEQoYSwyLCExLGEudG9Mb3dlckNhc2UoKSxudWxsLCExKX0pO1xuW1wiYXV0b1JldmVyc2VcIixcImV4dGVybmFsUmVzb3VyY2VzUmVxdWlyZWRcIixcImZvY3VzYWJsZVwiLFwicHJlc2VydmVBbHBoYVwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0ZbYV09bmV3IEQoYSwyLCExLGEsbnVsbCwhMSl9KTtcImFsbG93RnVsbFNjcmVlbiBhc3luYyBhdXRvRm9jdXMgYXV0b1BsYXkgY29udHJvbHMgZGVmYXVsdCBkZWZlciBkaXNhYmxlZCBkaXNhYmxlUGljdHVyZUluUGljdHVyZSBmb3JtTm9WYWxpZGF0ZSBoaWRkZW4gbG9vcCBub01vZHVsZSBub1ZhbGlkYXRlIG9wZW4gcGxheXNJbmxpbmUgcmVhZE9ubHkgcmVxdWlyZWQgcmV2ZXJzZWQgc2NvcGVkIHNlYW1sZXNzIGl0ZW1TY29wZVwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0ZbYV09bmV3IEQoYSwzLCExLGEudG9Mb3dlckNhc2UoKSxudWxsLCExKX0pO1xuW1wiY2hlY2tlZFwiLFwibXVsdGlwbGVcIixcIm11dGVkXCIsXCJzZWxlY3RlZFwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0ZbYV09bmV3IEQoYSwzLCEwLGEsbnVsbCwhMSl9KTtbXCJjYXB0dXJlXCIsXCJkb3dubG9hZFwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0ZbYV09bmV3IEQoYSw0LCExLGEsbnVsbCwhMSl9KTtbXCJjb2xzXCIsXCJyb3dzXCIsXCJzaXplXCIsXCJzcGFuXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7RlthXT1uZXcgRChhLDYsITEsYSxudWxsLCExKX0pO1tcInJvd1NwYW5cIixcInN0YXJ0XCJdLmZvckVhY2goZnVuY3Rpb24oYSl7RlthXT1uZXcgRChhLDUsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITEpfSk7dmFyIHhjPS9bXFwtOl0oW2Etel0pL2c7ZnVuY3Rpb24geWMoYSl7cmV0dXJuIGFbMV0udG9VcHBlckNhc2UoKX1cblwiYWNjZW50LWhlaWdodCBhbGlnbm1lbnQtYmFzZWxpbmUgYXJhYmljLWZvcm0gYmFzZWxpbmUtc2hpZnQgY2FwLWhlaWdodCBjbGlwLXBhdGggY2xpcC1ydWxlIGNvbG9yLWludGVycG9sYXRpb24gY29sb3ItaW50ZXJwb2xhdGlvbi1maWx0ZXJzIGNvbG9yLXByb2ZpbGUgY29sb3ItcmVuZGVyaW5nIGRvbWluYW50LWJhc2VsaW5lIGVuYWJsZS1iYWNrZ3JvdW5kIGZpbGwtb3BhY2l0eSBmaWxsLXJ1bGUgZmxvb2QtY29sb3IgZmxvb2Qtb3BhY2l0eSBmb250LWZhbWlseSBmb250LXNpemUgZm9udC1zaXplLWFkanVzdCBmb250LXN0cmV0Y2ggZm9udC1zdHlsZSBmb250LXZhcmlhbnQgZm9udC13ZWlnaHQgZ2x5cGgtbmFtZSBnbHlwaC1vcmllbnRhdGlvbi1ob3Jpem9udGFsIGdseXBoLW9yaWVudGF0aW9uLXZlcnRpY2FsIGhvcml6LWFkdi14IGhvcml6LW9yaWdpbi14IGltYWdlLXJlbmRlcmluZyBsZXR0ZXItc3BhY2luZyBsaWdodGluZy1jb2xvciBtYXJrZXItZW5kIG1hcmtlci1taWQgbWFya2VyLXN0YXJ0IG92ZXJsaW5lLXBvc2l0aW9uIG92ZXJsaW5lLXRoaWNrbmVzcyBwYWludC1vcmRlciBwYW5vc2UtMSBwb2ludGVyLWV2ZW50cyByZW5kZXJpbmctaW50ZW50IHNoYXBlLXJlbmRlcmluZyBzdG9wLWNvbG9yIHN0b3Atb3BhY2l0eSBzdHJpa2V0aHJvdWdoLXBvc2l0aW9uIHN0cmlrZXRocm91Z2gtdGhpY2tuZXNzIHN0cm9rZS1kYXNoYXJyYXkgc3Ryb2tlLWRhc2hvZmZzZXQgc3Ryb2tlLWxpbmVjYXAgc3Ryb2tlLWxpbmVqb2luIHN0cm9rZS1taXRlcmxpbWl0IHN0cm9rZS1vcGFjaXR5IHN0cm9rZS13aWR0aCB0ZXh0LWFuY2hvciB0ZXh0LWRlY29yYXRpb24gdGV4dC1yZW5kZXJpbmcgdW5kZXJsaW5lLXBvc2l0aW9uIHVuZGVybGluZS10aGlja25lc3MgdW5pY29kZS1iaWRpIHVuaWNvZGUtcmFuZ2UgdW5pdHMtcGVyLWVtIHYtYWxwaGFiZXRpYyB2LWhhbmdpbmcgdi1pZGVvZ3JhcGhpYyB2LW1hdGhlbWF0aWNhbCB2ZWN0b3ItZWZmZWN0IHZlcnQtYWR2LXkgdmVydC1vcmlnaW4teCB2ZXJ0LW9yaWdpbi15IHdvcmQtc3BhY2luZyB3cml0aW5nLW1vZGUgeG1sbnM6eGxpbmsgeC1oZWlnaHRcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2UoeGMsXG55Yyk7RltiXT1uZXcgRChiLDEsITEsYSxudWxsLCExKX0pO1wieGxpbms6YWN0dWF0ZSB4bGluazphcmNyb2xlIHhsaW5rOnJvbGUgeGxpbms6c2hvdyB4bGluazp0aXRsZSB4bGluazp0eXBlXCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YS5yZXBsYWNlKHhjLHljKTtGW2JdPW5ldyBEKGIsMSwhMSxhLFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiLCExKX0pO1tcInhtbDpiYXNlXCIsXCJ4bWw6bGFuZ1wiLFwieG1sOnNwYWNlXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YS5yZXBsYWNlKHhjLHljKTtGW2JdPW5ldyBEKGIsMSwhMSxhLFwiaHR0cDovL3d3dy53My5vcmcvWE1MLzE5OTgvbmFtZXNwYWNlXCIsITEpfSk7W1widGFiSW5kZXhcIixcImNyb3NzT3JpZ2luXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7RlthXT1uZXcgRChhLDEsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITEpfSk7XG5GLnhsaW5rSHJlZj1uZXcgRChcInhsaW5rSHJlZlwiLDEsITEsXCJ4bGluazpocmVmXCIsXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIsITApO1tcInNyY1wiLFwiaHJlZlwiLFwiYWN0aW9uXCIsXCJmb3JtQWN0aW9uXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7RlthXT1uZXcgRChhLDEsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITApfSk7XG5mdW5jdGlvbiB6YyhhLGIsYyxkKXt2YXIgZT1GLmhhc093blByb3BlcnR5KGIpP0ZbYl06bnVsbDt2YXIgZj1udWxsIT09ZT8wPT09ZS50eXBlOmQ/ITE6ISgyPGIubGVuZ3RoKXx8XCJvXCIhPT1iWzBdJiZcIk9cIiE9PWJbMF18fFwiblwiIT09YlsxXSYmXCJOXCIhPT1iWzFdPyExOiEwO2Z8fCh3YyhiLGMsZSxkKSYmKGM9bnVsbCksZHx8bnVsbD09PWU/dWMoYikmJihudWxsPT09Yz9hLnJlbW92ZUF0dHJpYnV0ZShiKTphLnNldEF0dHJpYnV0ZShiLFwiXCIrYykpOmUubXVzdFVzZVByb3BlcnR5P2FbZS5wcm9wZXJ0eU5hbWVdPW51bGw9PT1jPzM9PT1lLnR5cGU/ITE6XCJcIjpjOihiPWUuYXR0cmlidXRlTmFtZSxkPWUuYXR0cmlidXRlTmFtZXNwYWNlLG51bGw9PT1jP2EucmVtb3ZlQXR0cmlidXRlKGIpOihlPWUudHlwZSxjPTM9PT1lfHw0PT09ZSYmITA9PT1jP1wiXCI6XCJcIitjLGQ/YS5zZXRBdHRyaWJ1dGVOUyhkLGIsYyk6YS5zZXRBdHRyaWJ1dGUoYixjKSkpKX1cbmZ1bmN0aW9uIEFjKGEpe3N3aXRjaCh0eXBlb2YgYSl7Y2FzZSBcImJvb2xlYW5cIjpjYXNlIFwibnVtYmVyXCI6Y2FzZSBcIm9iamVjdFwiOmNhc2UgXCJzdHJpbmdcIjpjYXNlIFwidW5kZWZpbmVkXCI6cmV0dXJuIGE7ZGVmYXVsdDpyZXR1cm5cIlwifX1mdW5jdGlvbiBCYyhhLGIpe3ZhciBjPWIuY2hlY2tlZDtyZXR1cm4gbSh7fSxiLHtkZWZhdWx0Q2hlY2tlZDp2b2lkIDAsZGVmYXVsdFZhbHVlOnZvaWQgMCx2YWx1ZTp2b2lkIDAsY2hlY2tlZDpudWxsIT1jP2M6YS5fd3JhcHBlclN0YXRlLmluaXRpYWxDaGVja2VkfSl9XG5mdW5jdGlvbiBDYyhhLGIpe3ZhciBjPW51bGw9PWIuZGVmYXVsdFZhbHVlP1wiXCI6Yi5kZWZhdWx0VmFsdWUsZD1udWxsIT1iLmNoZWNrZWQ/Yi5jaGVja2VkOmIuZGVmYXVsdENoZWNrZWQ7Yz1BYyhudWxsIT1iLnZhbHVlP2IudmFsdWU6Yyk7YS5fd3JhcHBlclN0YXRlPXtpbml0aWFsQ2hlY2tlZDpkLGluaXRpYWxWYWx1ZTpjLGNvbnRyb2xsZWQ6XCJjaGVja2JveFwiPT09Yi50eXBlfHxcInJhZGlvXCI9PT1iLnR5cGU/bnVsbCE9Yi5jaGVja2VkOm51bGwhPWIudmFsdWV9fWZ1bmN0aW9uIERjKGEsYil7Yj1iLmNoZWNrZWQ7bnVsbCE9YiYmemMoYSxcImNoZWNrZWRcIixiLCExKX1cbmZ1bmN0aW9uIEVjKGEsYil7RGMoYSxiKTt2YXIgYz1BYyhiLnZhbHVlKSxkPWIudHlwZTtpZihudWxsIT1jKWlmKFwibnVtYmVyXCI9PT1kKXtpZigwPT09YyYmXCJcIj09PWEudmFsdWV8fGEudmFsdWUhPWMpYS52YWx1ZT1cIlwiK2N9ZWxzZSBhLnZhbHVlIT09XCJcIitjJiYoYS52YWx1ZT1cIlwiK2MpO2Vsc2UgaWYoXCJzdWJtaXRcIj09PWR8fFwicmVzZXRcIj09PWQpe2EucmVtb3ZlQXR0cmlidXRlKFwidmFsdWVcIik7cmV0dXJufWIuaGFzT3duUHJvcGVydHkoXCJ2YWx1ZVwiKT9GYyhhLGIudHlwZSxjKTpiLmhhc093blByb3BlcnR5KFwiZGVmYXVsdFZhbHVlXCIpJiZGYyhhLGIudHlwZSxBYyhiLmRlZmF1bHRWYWx1ZSkpO251bGw9PWIuY2hlY2tlZCYmbnVsbCE9Yi5kZWZhdWx0Q2hlY2tlZCYmKGEuZGVmYXVsdENoZWNrZWQ9ISFiLmRlZmF1bHRDaGVja2VkKX1cbmZ1bmN0aW9uIEdjKGEsYixjKXtpZihiLmhhc093blByb3BlcnR5KFwidmFsdWVcIil8fGIuaGFzT3duUHJvcGVydHkoXCJkZWZhdWx0VmFsdWVcIikpe3ZhciBkPWIudHlwZTtpZighKFwic3VibWl0XCIhPT1kJiZcInJlc2V0XCIhPT1kfHx2b2lkIDAhPT1iLnZhbHVlJiZudWxsIT09Yi52YWx1ZSkpcmV0dXJuO2I9XCJcIithLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlO2N8fGI9PT1hLnZhbHVlfHwoYS52YWx1ZT1iKTthLmRlZmF1bHRWYWx1ZT1ifWM9YS5uYW1lO1wiXCIhPT1jJiYoYS5uYW1lPVwiXCIpO2EuZGVmYXVsdENoZWNrZWQ9IWEuZGVmYXVsdENoZWNrZWQ7YS5kZWZhdWx0Q2hlY2tlZD0hIWEuX3dyYXBwZXJTdGF0ZS5pbml0aWFsQ2hlY2tlZDtcIlwiIT09YyYmKGEubmFtZT1jKX1cbmZ1bmN0aW9uIEZjKGEsYixjKXtpZihcIm51bWJlclwiIT09Ynx8YS5vd25lckRvY3VtZW50LmFjdGl2ZUVsZW1lbnQhPT1hKW51bGw9PWM/YS5kZWZhdWx0VmFsdWU9XCJcIithLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlOmEuZGVmYXVsdFZhbHVlIT09XCJcIitjJiYoYS5kZWZhdWx0VmFsdWU9XCJcIitjKX12YXIgSGM9e2NoYW5nZTp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6XCJvbkNoYW5nZVwiLGNhcHR1cmVkOlwib25DaGFuZ2VDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpcImJsdXIgY2hhbmdlIGNsaWNrIGZvY3VzIGlucHV0IGtleWRvd24ga2V5dXAgc2VsZWN0aW9uY2hhbmdlXCIuc3BsaXQoXCIgXCIpfX07ZnVuY3Rpb24gSWMoYSxiLGMpe2E9eS5nZXRQb29sZWQoSGMuY2hhbmdlLGEsYixjKTthLnR5cGU9XCJjaGFuZ2VcIjtIYihjKTtRYShhKTtyZXR1cm4gYX12YXIgSmM9bnVsbCxLYz1udWxsO2Z1bmN0aW9uIExjKGEpe0JhKGEpfVxuZnVuY3Rpb24gTWMoYSl7dmFyIGI9SmEoYSk7aWYoV2IoYikpcmV0dXJuIGF9ZnVuY3Rpb24gTmMoYSxiKXtpZihcImNoYW5nZVwiPT09YSlyZXR1cm4gYn12YXIgT2M9ITE7UmEmJihPYz1TYihcImlucHV0XCIpJiYoIWRvY3VtZW50LmRvY3VtZW50TW9kZXx8OTxkb2N1bWVudC5kb2N1bWVudE1vZGUpKTtmdW5jdGlvbiBQYygpe0pjJiYoSmMuZGV0YWNoRXZlbnQoXCJvbnByb3BlcnR5Y2hhbmdlXCIsUWMpLEtjPUpjPW51bGwpfWZ1bmN0aW9uIFFjKGEpe2lmKFwidmFsdWVcIj09PWEucHJvcGVydHlOYW1lJiZNYyhLYykpaWYoYT1JYyhLYyxhLFJiKGEpKSxOYilCYShhKTtlbHNle05iPSEwO3RyeXtKYihMYyxhKX1maW5hbGx5e05iPSExLE9iKCl9fX1mdW5jdGlvbiBSYyhhLGIsYyl7XCJmb2N1c1wiPT09YT8oUGMoKSxKYz1iLEtjPWMsSmMuYXR0YWNoRXZlbnQoXCJvbnByb3BlcnR5Y2hhbmdlXCIsUWMpKTpcImJsdXJcIj09PWEmJlBjKCl9XG5mdW5jdGlvbiBTYyhhKXtpZihcInNlbGVjdGlvbmNoYW5nZVwiPT09YXx8XCJrZXl1cFwiPT09YXx8XCJrZXlkb3duXCI9PT1hKXJldHVybiBNYyhLYyl9ZnVuY3Rpb24gVGMoYSxiKXtpZihcImNsaWNrXCI9PT1hKXJldHVybiBNYyhiKX1mdW5jdGlvbiBVYyhhLGIpe2lmKFwiaW5wdXRcIj09PWF8fFwiY2hhbmdlXCI9PT1hKXJldHVybiBNYyhiKX1cbnZhciBWYz17ZXZlbnRUeXBlczpIYyxfaXNJbnB1dEV2ZW50U3VwcG9ydGVkOk9jLGV4dHJhY3RFdmVudHM6ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9Yj9KYShiKTp3aW5kb3csZj12b2lkIDAsaD12b2lkIDAsZz1lLm5vZGVOYW1lJiZlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XCJzZWxlY3RcIj09PWd8fFwiaW5wdXRcIj09PWcmJlwiZmlsZVwiPT09ZS50eXBlP2Y9TmM6UWIoZSk/T2M/Zj1VYzooZj1TYyxoPVJjKTooZz1lLm5vZGVOYW1lKSYmXCJpbnB1dFwiPT09Zy50b0xvd2VyQ2FzZSgpJiYoXCJjaGVja2JveFwiPT09ZS50eXBlfHxcInJhZGlvXCI9PT1lLnR5cGUpJiYoZj1UYyk7aWYoZiYmKGY9ZihhLGIpKSlyZXR1cm4gSWMoZixjLGQpO2gmJmgoYSxlLGIpO1wiYmx1clwiPT09YSYmKGE9ZS5fd3JhcHBlclN0YXRlKSYmYS5jb250cm9sbGVkJiZcIm51bWJlclwiPT09ZS50eXBlJiZGYyhlLFwibnVtYmVyXCIsZS52YWx1ZSl9fSxXYz15LmV4dGVuZCh7dmlldzpudWxsLGRldGFpbDpudWxsfSksWGM9e0FsdDpcImFsdEtleVwiLFxuQ29udHJvbDpcImN0cmxLZXlcIixNZXRhOlwibWV0YUtleVwiLFNoaWZ0Olwic2hpZnRLZXlcIn07ZnVuY3Rpb24gWWMoYSl7dmFyIGI9dGhpcy5uYXRpdmVFdmVudDtyZXR1cm4gYi5nZXRNb2RpZmllclN0YXRlP2IuZ2V0TW9kaWZpZXJTdGF0ZShhKTooYT1YY1thXSk/ISFiW2FdOiExfWZ1bmN0aW9uIFpjKCl7cmV0dXJuIFljfVxudmFyICRjPTAsYWQ9MCxiZD0hMSxjZD0hMSxkZD1XYy5leHRlbmQoe3NjcmVlblg6bnVsbCxzY3JlZW5ZOm51bGwsY2xpZW50WDpudWxsLGNsaWVudFk6bnVsbCxwYWdlWDpudWxsLHBhZ2VZOm51bGwsY3RybEtleTpudWxsLHNoaWZ0S2V5Om51bGwsYWx0S2V5Om51bGwsbWV0YUtleTpudWxsLGdldE1vZGlmaWVyU3RhdGU6WmMsYnV0dG9uOm51bGwsYnV0dG9uczpudWxsLHJlbGF0ZWRUYXJnZXQ6ZnVuY3Rpb24oYSl7cmV0dXJuIGEucmVsYXRlZFRhcmdldHx8KGEuZnJvbUVsZW1lbnQ9PT1hLnNyY0VsZW1lbnQ/YS50b0VsZW1lbnQ6YS5mcm9tRWxlbWVudCl9LG1vdmVtZW50WDpmdW5jdGlvbihhKXtpZihcIm1vdmVtZW50WFwiaW4gYSlyZXR1cm4gYS5tb3ZlbWVudFg7dmFyIGI9JGM7JGM9YS5zY3JlZW5YO3JldHVybiBiZD9cIm1vdXNlbW92ZVwiPT09YS50eXBlP2Euc2NyZWVuWC1iOjA6KGJkPSEwLDApfSxtb3ZlbWVudFk6ZnVuY3Rpb24oYSl7aWYoXCJtb3ZlbWVudFlcImluIGEpcmV0dXJuIGEubW92ZW1lbnRZO1xudmFyIGI9YWQ7YWQ9YS5zY3JlZW5ZO3JldHVybiBjZD9cIm1vdXNlbW92ZVwiPT09YS50eXBlP2Euc2NyZWVuWS1iOjA6KGNkPSEwLDApfX0pLGVkPWRkLmV4dGVuZCh7cG9pbnRlcklkOm51bGwsd2lkdGg6bnVsbCxoZWlnaHQ6bnVsbCxwcmVzc3VyZTpudWxsLHRhbmdlbnRpYWxQcmVzc3VyZTpudWxsLHRpbHRYOm51bGwsdGlsdFk6bnVsbCx0d2lzdDpudWxsLHBvaW50ZXJUeXBlOm51bGwsaXNQcmltYXJ5Om51bGx9KSxmZD17bW91c2VFbnRlcjp7cmVnaXN0cmF0aW9uTmFtZTpcIm9uTW91c2VFbnRlclwiLGRlcGVuZGVuY2llczpbXCJtb3VzZW91dFwiLFwibW91c2VvdmVyXCJdfSxtb3VzZUxlYXZlOntyZWdpc3RyYXRpb25OYW1lOlwib25Nb3VzZUxlYXZlXCIsZGVwZW5kZW5jaWVzOltcIm1vdXNlb3V0XCIsXCJtb3VzZW92ZXJcIl19LHBvaW50ZXJFbnRlcjp7cmVnaXN0cmF0aW9uTmFtZTpcIm9uUG9pbnRlckVudGVyXCIsZGVwZW5kZW5jaWVzOltcInBvaW50ZXJvdXRcIixcInBvaW50ZXJvdmVyXCJdfSxwb2ludGVyTGVhdmU6e3JlZ2lzdHJhdGlvbk5hbWU6XCJvblBvaW50ZXJMZWF2ZVwiLFxuZGVwZW5kZW5jaWVzOltcInBvaW50ZXJvdXRcIixcInBvaW50ZXJvdmVyXCJdfX0sZ2Q9e2V2ZW50VHlwZXM6ZmQsZXh0cmFjdEV2ZW50czpmdW5jdGlvbihhLGIsYyxkKXt2YXIgZT1cIm1vdXNlb3ZlclwiPT09YXx8XCJwb2ludGVyb3ZlclwiPT09YSxmPVwibW91c2VvdXRcIj09PWF8fFwicG9pbnRlcm91dFwiPT09YTtpZihlJiYoYy5yZWxhdGVkVGFyZ2V0fHxjLmZyb21FbGVtZW50KXx8IWYmJiFlKXJldHVybiBudWxsO2U9ZC53aW5kb3c9PT1kP2Q6KGU9ZC5vd25lckRvY3VtZW50KT9lLmRlZmF1bHRWaWV3fHxlLnBhcmVudFdpbmRvdzp3aW5kb3c7Zj8oZj1iLGI9KGI9Yy5yZWxhdGVkVGFyZ2V0fHxjLnRvRWxlbWVudCk/SGEoYik6bnVsbCk6Zj1udWxsO2lmKGY9PT1iKXJldHVybiBudWxsO3ZhciBoPXZvaWQgMCxnPXZvaWQgMCxrPXZvaWQgMCxsPXZvaWQgMDtpZihcIm1vdXNlb3V0XCI9PT1hfHxcIm1vdXNlb3ZlclwiPT09YSloPWRkLGc9ZmQubW91c2VMZWF2ZSxrPWZkLm1vdXNlRW50ZXIsbD1cIm1vdXNlXCI7XG5lbHNlIGlmKFwicG9pbnRlcm91dFwiPT09YXx8XCJwb2ludGVyb3ZlclwiPT09YSloPWVkLGc9ZmQucG9pbnRlckxlYXZlLGs9ZmQucG9pbnRlckVudGVyLGw9XCJwb2ludGVyXCI7dmFyIG49bnVsbD09Zj9lOkphKGYpO2U9bnVsbD09Yj9lOkphKGIpO2E9aC5nZXRQb29sZWQoZyxmLGMsZCk7YS50eXBlPWwrXCJsZWF2ZVwiO2EudGFyZ2V0PW47YS5yZWxhdGVkVGFyZ2V0PWU7Yz1oLmdldFBvb2xlZChrLGIsYyxkKTtjLnR5cGU9bCtcImVudGVyXCI7Yy50YXJnZXQ9ZTtjLnJlbGF0ZWRUYXJnZXQ9bjtkPWI7aWYoZiYmZClhOntiPWY7ZT1kO2w9MDtmb3IoaD1iO2g7aD1MYShoKSlsKys7aD0wO2ZvcihrPWU7aztrPUxhKGspKWgrKztmb3IoOzA8bC1oOyliPUxhKGIpLGwtLTtmb3IoOzA8aC1sOyllPUxhKGUpLGgtLTtmb3IoO2wtLTspe2lmKGI9PT1lfHxiPT09ZS5hbHRlcm5hdGUpYnJlYWsgYTtiPUxhKGIpO2U9TGEoZSl9Yj1udWxsfWVsc2UgYj1udWxsO2U9Yjtmb3IoYj1bXTtmJiZmIT09ZTspe2w9XG5mLmFsdGVybmF0ZTtpZihudWxsIT09bCYmbD09PWUpYnJlYWs7Yi5wdXNoKGYpO2Y9TGEoZil9Zm9yKGY9W107ZCYmZCE9PWU7KXtsPWQuYWx0ZXJuYXRlO2lmKG51bGwhPT1sJiZsPT09ZSlicmVhaztmLnB1c2goZCk7ZD1MYShkKX1mb3IoZD0wO2Q8Yi5sZW5ndGg7ZCsrKU9hKGJbZF0sXCJidWJibGVkXCIsYSk7Zm9yKGQ9Zi5sZW5ndGg7MDxkLS07KU9hKGZbZF0sXCJjYXB0dXJlZFwiLGMpO3JldHVyblthLGNdfX07ZnVuY3Rpb24gaGQoYSxiKXtyZXR1cm4gYT09PWImJigwIT09YXx8MS9hPT09MS9iKXx8YSE9PWEmJmIhPT1ifXZhciBpZD1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuZnVuY3Rpb24gamQoYSxiKXtpZihoZChhLGIpKXJldHVybiEwO2lmKFwib2JqZWN0XCIhPT10eXBlb2YgYXx8bnVsbD09PWF8fFwib2JqZWN0XCIhPT10eXBlb2YgYnx8bnVsbD09PWIpcmV0dXJuITE7dmFyIGM9T2JqZWN0LmtleXMoYSksZD1PYmplY3Qua2V5cyhiKTtpZihjLmxlbmd0aCE9PWQubGVuZ3RoKXJldHVybiExO2ZvcihkPTA7ZDxjLmxlbmd0aDtkKyspaWYoIWlkLmNhbGwoYixjW2RdKXx8IWhkKGFbY1tkXV0sYltjW2RdXSkpcmV0dXJuITE7cmV0dXJuITB9ZnVuY3Rpb24ga2QoYSxiKXtyZXR1cm57cmVzcG9uZGVyOmEscHJvcHM6Yn19bmV3IE1hcDtuZXcgTWFwO25ldyBTZXQ7bmV3IE1hcDtcbmZ1bmN0aW9uIGxkKGEpe3ZhciBiPWE7aWYoYS5hbHRlcm5hdGUpZm9yKDtiLnJldHVybjspYj1iLnJldHVybjtlbHNle2lmKDAhPT0oYi5lZmZlY3RUYWcmMikpcmV0dXJuIDE7Zm9yKDtiLnJldHVybjspaWYoYj1iLnJldHVybiwwIT09KGIuZWZmZWN0VGFnJjIpKXJldHVybiAxfXJldHVybiAzPT09Yi50YWc/MjozfWZ1bmN0aW9uIG9kKGEpe2lmKDIhPT1sZChhKSl0aHJvdyB0KEVycm9yKDE4OCkpO31cbmZ1bmN0aW9uIHBkKGEpe3ZhciBiPWEuYWx0ZXJuYXRlO2lmKCFiKXtiPWxkKGEpO2lmKDM9PT1iKXRocm93IHQoRXJyb3IoMTg4KSk7cmV0dXJuIDE9PT1iP251bGw6YX1mb3IodmFyIGM9YSxkPWI7Oyl7dmFyIGU9Yy5yZXR1cm47aWYobnVsbD09PWUpYnJlYWs7dmFyIGY9ZS5hbHRlcm5hdGU7aWYobnVsbD09PWYpe2Q9ZS5yZXR1cm47aWYobnVsbCE9PWQpe2M9ZDtjb250aW51ZX1icmVha31pZihlLmNoaWxkPT09Zi5jaGlsZCl7Zm9yKGY9ZS5jaGlsZDtmOyl7aWYoZj09PWMpcmV0dXJuIG9kKGUpLGE7aWYoZj09PWQpcmV0dXJuIG9kKGUpLGI7Zj1mLnNpYmxpbmd9dGhyb3cgdChFcnJvcigxODgpKTt9aWYoYy5yZXR1cm4hPT1kLnJldHVybiljPWUsZD1mO2Vsc2V7Zm9yKHZhciBoPSExLGc9ZS5jaGlsZDtnOyl7aWYoZz09PWMpe2g9ITA7Yz1lO2Q9ZjticmVha31pZihnPT09ZCl7aD0hMDtkPWU7Yz1mO2JyZWFrfWc9Zy5zaWJsaW5nfWlmKCFoKXtmb3IoZz1mLmNoaWxkO2c7KXtpZihnPT09XG5jKXtoPSEwO2M9ZjtkPWU7YnJlYWt9aWYoZz09PWQpe2g9ITA7ZD1mO2M9ZTticmVha31nPWcuc2libGluZ31pZighaCl0aHJvdyB0KEVycm9yKDE4OSkpO319aWYoYy5hbHRlcm5hdGUhPT1kKXRocm93IHQoRXJyb3IoMTkwKSk7fWlmKDMhPT1jLnRhZyl0aHJvdyB0KEVycm9yKDE4OCkpO3JldHVybiBjLnN0YXRlTm9kZS5jdXJyZW50PT09Yz9hOmJ9ZnVuY3Rpb24gcWQoYSl7YT1wZChhKTtpZighYSlyZXR1cm4gbnVsbDtmb3IodmFyIGI9YTs7KXtpZig1PT09Yi50YWd8fDY9PT1iLnRhZylyZXR1cm4gYjtpZihiLmNoaWxkKWIuY2hpbGQucmV0dXJuPWIsYj1iLmNoaWxkO2Vsc2V7aWYoYj09PWEpYnJlYWs7Zm9yKDshYi5zaWJsaW5nOyl7aWYoIWIucmV0dXJufHxiLnJldHVybj09PWEpcmV0dXJuIG51bGw7Yj1iLnJldHVybn1iLnNpYmxpbmcucmV0dXJuPWIucmV0dXJuO2I9Yi5zaWJsaW5nfX1yZXR1cm4gbnVsbH1cbnZhciByZD15LmV4dGVuZCh7YW5pbWF0aW9uTmFtZTpudWxsLGVsYXBzZWRUaW1lOm51bGwscHNldWRvRWxlbWVudDpudWxsfSksc2Q9eS5leHRlbmQoe2NsaXBib2FyZERhdGE6ZnVuY3Rpb24oYSl7cmV0dXJuXCJjbGlwYm9hcmREYXRhXCJpbiBhP2EuY2xpcGJvYXJkRGF0YTp3aW5kb3cuY2xpcGJvYXJkRGF0YX19KSx0ZD1XYy5leHRlbmQoe3JlbGF0ZWRUYXJnZXQ6bnVsbH0pO2Z1bmN0aW9uIHVkKGEpe3ZhciBiPWEua2V5Q29kZTtcImNoYXJDb2RlXCJpbiBhPyhhPWEuY2hhckNvZGUsMD09PWEmJjEzPT09YiYmKGE9MTMpKTphPWI7MTA9PT1hJiYoYT0xMyk7cmV0dXJuIDMyPD1hfHwxMz09PWE/YTowfVxudmFyIHZkPXtFc2M6XCJFc2NhcGVcIixTcGFjZWJhcjpcIiBcIixMZWZ0OlwiQXJyb3dMZWZ0XCIsVXA6XCJBcnJvd1VwXCIsUmlnaHQ6XCJBcnJvd1JpZ2h0XCIsRG93bjpcIkFycm93RG93blwiLERlbDpcIkRlbGV0ZVwiLFdpbjpcIk9TXCIsTWVudTpcIkNvbnRleHRNZW51XCIsQXBwczpcIkNvbnRleHRNZW51XCIsU2Nyb2xsOlwiU2Nyb2xsTG9ja1wiLE1velByaW50YWJsZUtleTpcIlVuaWRlbnRpZmllZFwifSx3ZD17ODpcIkJhY2tzcGFjZVwiLDk6XCJUYWJcIiwxMjpcIkNsZWFyXCIsMTM6XCJFbnRlclwiLDE2OlwiU2hpZnRcIiwxNzpcIkNvbnRyb2xcIiwxODpcIkFsdFwiLDE5OlwiUGF1c2VcIiwyMDpcIkNhcHNMb2NrXCIsMjc6XCJFc2NhcGVcIiwzMjpcIiBcIiwzMzpcIlBhZ2VVcFwiLDM0OlwiUGFnZURvd25cIiwzNTpcIkVuZFwiLDM2OlwiSG9tZVwiLDM3OlwiQXJyb3dMZWZ0XCIsMzg6XCJBcnJvd1VwXCIsMzk6XCJBcnJvd1JpZ2h0XCIsNDA6XCJBcnJvd0Rvd25cIiw0NTpcIkluc2VydFwiLDQ2OlwiRGVsZXRlXCIsMTEyOlwiRjFcIiwxMTM6XCJGMlwiLDExNDpcIkYzXCIsMTE1OlwiRjRcIixcbjExNjpcIkY1XCIsMTE3OlwiRjZcIiwxMTg6XCJGN1wiLDExOTpcIkY4XCIsMTIwOlwiRjlcIiwxMjE6XCJGMTBcIiwxMjI6XCJGMTFcIiwxMjM6XCJGMTJcIiwxNDQ6XCJOdW1Mb2NrXCIsMTQ1OlwiU2Nyb2xsTG9ja1wiLDIyNDpcIk1ldGFcIn0seGQ9V2MuZXh0ZW5kKHtrZXk6ZnVuY3Rpb24oYSl7aWYoYS5rZXkpe3ZhciBiPXZkW2Eua2V5XXx8YS5rZXk7aWYoXCJVbmlkZW50aWZpZWRcIiE9PWIpcmV0dXJuIGJ9cmV0dXJuXCJrZXlwcmVzc1wiPT09YS50eXBlPyhhPXVkKGEpLDEzPT09YT9cIkVudGVyXCI6U3RyaW5nLmZyb21DaGFyQ29kZShhKSk6XCJrZXlkb3duXCI9PT1hLnR5cGV8fFwia2V5dXBcIj09PWEudHlwZT93ZFthLmtleUNvZGVdfHxcIlVuaWRlbnRpZmllZFwiOlwiXCJ9LGxvY2F0aW9uOm51bGwsY3RybEtleTpudWxsLHNoaWZ0S2V5Om51bGwsYWx0S2V5Om51bGwsbWV0YUtleTpudWxsLHJlcGVhdDpudWxsLGxvY2FsZTpudWxsLGdldE1vZGlmaWVyU3RhdGU6WmMsY2hhckNvZGU6ZnVuY3Rpb24oYSl7cmV0dXJuXCJrZXlwcmVzc1wiPT09XG5hLnR5cGU/dWQoYSk6MH0sa2V5Q29kZTpmdW5jdGlvbihhKXtyZXR1cm5cImtleWRvd25cIj09PWEudHlwZXx8XCJrZXl1cFwiPT09YS50eXBlP2Eua2V5Q29kZTowfSx3aGljaDpmdW5jdGlvbihhKXtyZXR1cm5cImtleXByZXNzXCI9PT1hLnR5cGU/dWQoYSk6XCJrZXlkb3duXCI9PT1hLnR5cGV8fFwia2V5dXBcIj09PWEudHlwZT9hLmtleUNvZGU6MH19KSx5ZD1kZC5leHRlbmQoe2RhdGFUcmFuc2ZlcjpudWxsfSksemQ9V2MuZXh0ZW5kKHt0b3VjaGVzOm51bGwsdGFyZ2V0VG91Y2hlczpudWxsLGNoYW5nZWRUb3VjaGVzOm51bGwsYWx0S2V5Om51bGwsbWV0YUtleTpudWxsLGN0cmxLZXk6bnVsbCxzaGlmdEtleTpudWxsLGdldE1vZGlmaWVyU3RhdGU6WmN9KSxBZD15LmV4dGVuZCh7cHJvcGVydHlOYW1lOm51bGwsZWxhcHNlZFRpbWU6bnVsbCxwc2V1ZG9FbGVtZW50Om51bGx9KSxCZD1kZC5leHRlbmQoe2RlbHRhWDpmdW5jdGlvbihhKXtyZXR1cm5cImRlbHRhWFwiaW4gYT9hLmRlbHRhWDpcIndoZWVsRGVsdGFYXCJpblxuYT8tYS53aGVlbERlbHRhWDowfSxkZWx0YVk6ZnVuY3Rpb24oYSl7cmV0dXJuXCJkZWx0YVlcImluIGE/YS5kZWx0YVk6XCJ3aGVlbERlbHRhWVwiaW4gYT8tYS53aGVlbERlbHRhWTpcIndoZWVsRGVsdGFcImluIGE/LWEud2hlZWxEZWx0YTowfSxkZWx0YVo6bnVsbCxkZWx0YU1vZGU6bnVsbH0pLENkPVtbXCJibHVyXCIsXCJibHVyXCIsMF0sW1wiY2FuY2VsXCIsXCJjYW5jZWxcIiwwXSxbXCJjbGlja1wiLFwiY2xpY2tcIiwwXSxbXCJjbG9zZVwiLFwiY2xvc2VcIiwwXSxbXCJjb250ZXh0bWVudVwiLFwiY29udGV4dE1lbnVcIiwwXSxbXCJjb3B5XCIsXCJjb3B5XCIsMF0sW1wiY3V0XCIsXCJjdXRcIiwwXSxbXCJhdXhjbGlja1wiLFwiYXV4Q2xpY2tcIiwwXSxbXCJkYmxjbGlja1wiLFwiZG91YmxlQ2xpY2tcIiwwXSxbXCJkcmFnZW5kXCIsXCJkcmFnRW5kXCIsMF0sW1wiZHJhZ3N0YXJ0XCIsXCJkcmFnU3RhcnRcIiwwXSxbXCJkcm9wXCIsXCJkcm9wXCIsMF0sW1wiZm9jdXNcIixcImZvY3VzXCIsMF0sW1wiaW5wdXRcIixcImlucHV0XCIsMF0sW1wiaW52YWxpZFwiLFwiaW52YWxpZFwiLDBdLFxuW1wia2V5ZG93blwiLFwia2V5RG93blwiLDBdLFtcImtleXByZXNzXCIsXCJrZXlQcmVzc1wiLDBdLFtcImtleXVwXCIsXCJrZXlVcFwiLDBdLFtcIm1vdXNlZG93blwiLFwibW91c2VEb3duXCIsMF0sW1wibW91c2V1cFwiLFwibW91c2VVcFwiLDBdLFtcInBhc3RlXCIsXCJwYXN0ZVwiLDBdLFtcInBhdXNlXCIsXCJwYXVzZVwiLDBdLFtcInBsYXlcIixcInBsYXlcIiwwXSxbXCJwb2ludGVyY2FuY2VsXCIsXCJwb2ludGVyQ2FuY2VsXCIsMF0sW1wicG9pbnRlcmRvd25cIixcInBvaW50ZXJEb3duXCIsMF0sW1wicG9pbnRlcnVwXCIsXCJwb2ludGVyVXBcIiwwXSxbXCJyYXRlY2hhbmdlXCIsXCJyYXRlQ2hhbmdlXCIsMF0sW1wicmVzZXRcIixcInJlc2V0XCIsMF0sW1wic2Vla2VkXCIsXCJzZWVrZWRcIiwwXSxbXCJzdWJtaXRcIixcInN1Ym1pdFwiLDBdLFtcInRvdWNoY2FuY2VsXCIsXCJ0b3VjaENhbmNlbFwiLDBdLFtcInRvdWNoZW5kXCIsXCJ0b3VjaEVuZFwiLDBdLFtcInRvdWNoc3RhcnRcIixcInRvdWNoU3RhcnRcIiwwXSxbXCJ2b2x1bWVjaGFuZ2VcIixcInZvbHVtZUNoYW5nZVwiLDBdLFtcImRyYWdcIixcImRyYWdcIixcbjFdLFtcImRyYWdlbnRlclwiLFwiZHJhZ0VudGVyXCIsMV0sW1wiZHJhZ2V4aXRcIixcImRyYWdFeGl0XCIsMV0sW1wiZHJhZ2xlYXZlXCIsXCJkcmFnTGVhdmVcIiwxXSxbXCJkcmFnb3ZlclwiLFwiZHJhZ092ZXJcIiwxXSxbXCJtb3VzZW1vdmVcIixcIm1vdXNlTW92ZVwiLDFdLFtcIm1vdXNlb3V0XCIsXCJtb3VzZU91dFwiLDFdLFtcIm1vdXNlb3ZlclwiLFwibW91c2VPdmVyXCIsMV0sW1wicG9pbnRlcm1vdmVcIixcInBvaW50ZXJNb3ZlXCIsMV0sW1wicG9pbnRlcm91dFwiLFwicG9pbnRlck91dFwiLDFdLFtcInBvaW50ZXJvdmVyXCIsXCJwb2ludGVyT3ZlclwiLDFdLFtcInNjcm9sbFwiLFwic2Nyb2xsXCIsMV0sW1widG9nZ2xlXCIsXCJ0b2dnbGVcIiwxXSxbXCJ0b3VjaG1vdmVcIixcInRvdWNoTW92ZVwiLDFdLFtcIndoZWVsXCIsXCJ3aGVlbFwiLDFdLFtcImFib3J0XCIsXCJhYm9ydFwiLDJdLFtYYSxcImFuaW1hdGlvbkVuZFwiLDJdLFtZYSxcImFuaW1hdGlvbkl0ZXJhdGlvblwiLDJdLFtaYSxcImFuaW1hdGlvblN0YXJ0XCIsMl0sW1wiY2FucGxheVwiLFwiY2FuUGxheVwiLDJdLFtcImNhbnBsYXl0aHJvdWdoXCIsXG5cImNhblBsYXlUaHJvdWdoXCIsMl0sW1wiZHVyYXRpb25jaGFuZ2VcIixcImR1cmF0aW9uQ2hhbmdlXCIsMl0sW1wiZW1wdGllZFwiLFwiZW1wdGllZFwiLDJdLFtcImVuY3J5cHRlZFwiLFwiZW5jcnlwdGVkXCIsMl0sW1wiZW5kZWRcIixcImVuZGVkXCIsMl0sW1wiZXJyb3JcIixcImVycm9yXCIsMl0sW1wiZ290cG9pbnRlcmNhcHR1cmVcIixcImdvdFBvaW50ZXJDYXB0dXJlXCIsMl0sW1wibG9hZFwiLFwibG9hZFwiLDJdLFtcImxvYWRlZGRhdGFcIixcImxvYWRlZERhdGFcIiwyXSxbXCJsb2FkZWRtZXRhZGF0YVwiLFwibG9hZGVkTWV0YWRhdGFcIiwyXSxbXCJsb2Fkc3RhcnRcIixcImxvYWRTdGFydFwiLDJdLFtcImxvc3Rwb2ludGVyY2FwdHVyZVwiLFwibG9zdFBvaW50ZXJDYXB0dXJlXCIsMl0sW1wicGxheWluZ1wiLFwicGxheWluZ1wiLDJdLFtcInByb2dyZXNzXCIsXCJwcm9ncmVzc1wiLDJdLFtcInNlZWtpbmdcIixcInNlZWtpbmdcIiwyXSxbXCJzdGFsbGVkXCIsXCJzdGFsbGVkXCIsMl0sW1wic3VzcGVuZFwiLFwic3VzcGVuZFwiLDJdLFtcInRpbWV1cGRhdGVcIixcInRpbWVVcGRhdGVcIixcbjJdLFthYixcInRyYW5zaXRpb25FbmRcIiwyXSxbXCJ3YWl0aW5nXCIsXCJ3YWl0aW5nXCIsMl1dLERkPXt9LEVkPXt9LEZkPTA7Zm9yKDtGZDxDZC5sZW5ndGg7RmQrKyl7dmFyIEdkPUNkW0ZkXSxIZD1HZFswXSxJZD1HZFsxXSxKZD1HZFsyXSxLZD1cIm9uXCIrKElkWzBdLnRvVXBwZXJDYXNlKCkrSWQuc2xpY2UoMSkpLExkPXtwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpLZCxjYXB0dXJlZDpLZCtcIkNhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOltIZF0sZXZlbnRQcmlvcml0eTpKZH07RGRbSWRdPUxkO0VkW0hkXT1MZH1cbnZhciBNZD17ZXZlbnRUeXBlczpEZCxnZXRFdmVudFByaW9yaXR5OmZ1bmN0aW9uKGEpe2E9RWRbYV07cmV0dXJuIHZvaWQgMCE9PWE/YS5ldmVudFByaW9yaXR5OjJ9LGV4dHJhY3RFdmVudHM6ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9RWRbYV07aWYoIWUpcmV0dXJuIG51bGw7c3dpdGNoKGEpe2Nhc2UgXCJrZXlwcmVzc1wiOmlmKDA9PT11ZChjKSlyZXR1cm4gbnVsbDtjYXNlIFwia2V5ZG93blwiOmNhc2UgXCJrZXl1cFwiOmE9eGQ7YnJlYWs7Y2FzZSBcImJsdXJcIjpjYXNlIFwiZm9jdXNcIjphPXRkO2JyZWFrO2Nhc2UgXCJjbGlja1wiOmlmKDI9PT1jLmJ1dHRvbilyZXR1cm4gbnVsbDtjYXNlIFwiYXV4Y2xpY2tcIjpjYXNlIFwiZGJsY2xpY2tcIjpjYXNlIFwibW91c2Vkb3duXCI6Y2FzZSBcIm1vdXNlbW92ZVwiOmNhc2UgXCJtb3VzZXVwXCI6Y2FzZSBcIm1vdXNlb3V0XCI6Y2FzZSBcIm1vdXNlb3ZlclwiOmNhc2UgXCJjb250ZXh0bWVudVwiOmE9ZGQ7YnJlYWs7Y2FzZSBcImRyYWdcIjpjYXNlIFwiZHJhZ2VuZFwiOmNhc2UgXCJkcmFnZW50ZXJcIjpjYXNlIFwiZHJhZ2V4aXRcIjpjYXNlIFwiZHJhZ2xlYXZlXCI6Y2FzZSBcImRyYWdvdmVyXCI6Y2FzZSBcImRyYWdzdGFydFwiOmNhc2UgXCJkcm9wXCI6YT1cbnlkO2JyZWFrO2Nhc2UgXCJ0b3VjaGNhbmNlbFwiOmNhc2UgXCJ0b3VjaGVuZFwiOmNhc2UgXCJ0b3VjaG1vdmVcIjpjYXNlIFwidG91Y2hzdGFydFwiOmE9emQ7YnJlYWs7Y2FzZSBYYTpjYXNlIFlhOmNhc2UgWmE6YT1yZDticmVhaztjYXNlIGFiOmE9QWQ7YnJlYWs7Y2FzZSBcInNjcm9sbFwiOmE9V2M7YnJlYWs7Y2FzZSBcIndoZWVsXCI6YT1CZDticmVhaztjYXNlIFwiY29weVwiOmNhc2UgXCJjdXRcIjpjYXNlIFwicGFzdGVcIjphPXNkO2JyZWFrO2Nhc2UgXCJnb3Rwb2ludGVyY2FwdHVyZVwiOmNhc2UgXCJsb3N0cG9pbnRlcmNhcHR1cmVcIjpjYXNlIFwicG9pbnRlcmNhbmNlbFwiOmNhc2UgXCJwb2ludGVyZG93blwiOmNhc2UgXCJwb2ludGVybW92ZVwiOmNhc2UgXCJwb2ludGVyb3V0XCI6Y2FzZSBcInBvaW50ZXJvdmVyXCI6Y2FzZSBcInBvaW50ZXJ1cFwiOmE9ZWQ7YnJlYWs7ZGVmYXVsdDphPXl9Yj1hLmdldFBvb2xlZChlLGIsYyxkKTtRYShiKTtyZXR1cm4gYn19LE5kPU1kLmdldEV2ZW50UHJpb3JpdHksT2Q9W107XG5mdW5jdGlvbiBQZChhKXt2YXIgYj1hLnRhcmdldEluc3QsYz1iO2Rve2lmKCFjKXthLmFuY2VzdG9ycy5wdXNoKGMpO2JyZWFrfXZhciBkO2ZvcihkPWM7ZC5yZXR1cm47KWQ9ZC5yZXR1cm47ZD0zIT09ZC50YWc/bnVsbDpkLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO2lmKCFkKWJyZWFrO2EuYW5jZXN0b3JzLnB1c2goYyk7Yz1IYShkKX13aGlsZShjKTtmb3IoYz0wO2M8YS5hbmNlc3RvcnMubGVuZ3RoO2MrKyl7Yj1hLmFuY2VzdG9yc1tjXTt2YXIgZT1SYihhLm5hdGl2ZUV2ZW50KTtkPWEudG9wTGV2ZWxUeXBlO2Zvcih2YXIgZj1hLm5hdGl2ZUV2ZW50LGg9bnVsbCxnPTA7ZzxlYS5sZW5ndGg7ZysrKXt2YXIgaz1lYVtnXTtrJiYoaz1rLmV4dHJhY3RFdmVudHMoZCxiLGYsZSkpJiYoaD14YShoLGspKX1CYShoKX19dmFyIFFkPSEwO2Z1bmN0aW9uIEcoYSxiKXtSZChiLGEsITEpfVxuZnVuY3Rpb24gUmQoYSxiLGMpe3N3aXRjaChOZChiKSl7Y2FzZSAwOnZhciBkPVNkLmJpbmQobnVsbCxiLDEpO2JyZWFrO2Nhc2UgMTpkPVRkLmJpbmQobnVsbCxiLDEpO2JyZWFrO2RlZmF1bHQ6ZD1VZC5iaW5kKG51bGwsYiwxKX1jP2EuYWRkRXZlbnRMaXN0ZW5lcihiLGQsITApOmEuYWRkRXZlbnRMaXN0ZW5lcihiLGQsITEpfWZ1bmN0aW9uIFNkKGEsYixjKXtOYnx8TGIoKTt2YXIgZD1VZCxlPU5iO05iPSEwO3RyeXtLYihkLGEsYixjKX1maW5hbGx5eyhOYj1lKXx8T2IoKX19ZnVuY3Rpb24gVGQoYSxiLGMpe1VkKGEsYixjKX1cbmZ1bmN0aW9uIFVkKGEsYixjKXtpZihRZCl7Yj1SYihjKTtiPUhhKGIpO251bGw9PT1ifHxcIm51bWJlclwiIT09dHlwZW9mIGIudGFnfHwyPT09bGQoYil8fChiPW51bGwpO2lmKE9kLmxlbmd0aCl7dmFyIGQ9T2QucG9wKCk7ZC50b3BMZXZlbFR5cGU9YTtkLm5hdGl2ZUV2ZW50PWM7ZC50YXJnZXRJbnN0PWI7YT1kfWVsc2UgYT17dG9wTGV2ZWxUeXBlOmEsbmF0aXZlRXZlbnQ6Yyx0YXJnZXRJbnN0OmIsYW5jZXN0b3JzOltdfTt0cnl7aWYoYz1hLE5iKVBkKGMsdm9pZCAwKTtlbHNle05iPSEwO3RyeXtNYihQZCxjLHZvaWQgMCl9ZmluYWxseXtOYj0hMSxPYigpfX19ZmluYWxseXthLnRvcExldmVsVHlwZT1udWxsLGEubmF0aXZlRXZlbnQ9bnVsbCxhLnRhcmdldEluc3Q9bnVsbCxhLmFuY2VzdG9ycy5sZW5ndGg9MCwxMD5PZC5sZW5ndGgmJk9kLnB1c2goYSl9fX12YXIgVmQ9bmV3IChcImZ1bmN0aW9uXCI9PT10eXBlb2YgV2Vha01hcD9XZWFrTWFwOk1hcCk7XG5mdW5jdGlvbiBXZChhKXt2YXIgYj1WZC5nZXQoYSk7dm9pZCAwPT09YiYmKGI9bmV3IFNldCxWZC5zZXQoYSxiKSk7cmV0dXJuIGJ9ZnVuY3Rpb24gWGQoYSl7YT1hfHwoXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBkb2N1bWVudD9kb2N1bWVudDp2b2lkIDApO2lmKFwidW5kZWZpbmVkXCI9PT10eXBlb2YgYSlyZXR1cm4gbnVsbDt0cnl7cmV0dXJuIGEuYWN0aXZlRWxlbWVudHx8YS5ib2R5fWNhdGNoKGIpe3JldHVybiBhLmJvZHl9fWZ1bmN0aW9uIFlkKGEpe2Zvcig7YSYmYS5maXJzdENoaWxkOylhPWEuZmlyc3RDaGlsZDtyZXR1cm4gYX1cbmZ1bmN0aW9uIFpkKGEsYil7dmFyIGM9WWQoYSk7YT0wO2Zvcih2YXIgZDtjOyl7aWYoMz09PWMubm9kZVR5cGUpe2Q9YStjLnRleHRDb250ZW50Lmxlbmd0aDtpZihhPD1iJiZkPj1iKXJldHVybntub2RlOmMsb2Zmc2V0OmItYX07YT1kfWE6e2Zvcig7Yzspe2lmKGMubmV4dFNpYmxpbmcpe2M9Yy5uZXh0U2libGluZzticmVhayBhfWM9Yy5wYXJlbnROb2RlfWM9dm9pZCAwfWM9WWQoYyl9fWZ1bmN0aW9uICRkKGEsYil7cmV0dXJuIGEmJmI/YT09PWI/ITA6YSYmMz09PWEubm9kZVR5cGU/ITE6YiYmMz09PWIubm9kZVR5cGU/JGQoYSxiLnBhcmVudE5vZGUpOlwiY29udGFpbnNcImluIGE/YS5jb250YWlucyhiKTphLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uPyEhKGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24oYikmMTYpOiExOiExfVxuZnVuY3Rpb24gYWUoKXtmb3IodmFyIGE9d2luZG93LGI9WGQoKTtiIGluc3RhbmNlb2YgYS5IVE1MSUZyYW1lRWxlbWVudDspe3RyeXt2YXIgYz1cInN0cmluZ1wiPT09dHlwZW9mIGIuY29udGVudFdpbmRvdy5sb2NhdGlvbi5ocmVmfWNhdGNoKGQpe2M9ITF9aWYoYylhPWIuY29udGVudFdpbmRvdztlbHNlIGJyZWFrO2I9WGQoYS5kb2N1bWVudCl9cmV0dXJuIGJ9ZnVuY3Rpb24gYmUoYSl7dmFyIGI9YSYmYS5ub2RlTmFtZSYmYS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO3JldHVybiBiJiYoXCJpbnB1dFwiPT09YiYmKFwidGV4dFwiPT09YS50eXBlfHxcInNlYXJjaFwiPT09YS50eXBlfHxcInRlbFwiPT09YS50eXBlfHxcInVybFwiPT09YS50eXBlfHxcInBhc3N3b3JkXCI9PT1hLnR5cGUpfHxcInRleHRhcmVhXCI9PT1ifHxcInRydWVcIj09PWEuY29udGVudEVkaXRhYmxlKX1cbnZhciBjZT1SYSYmXCJkb2N1bWVudE1vZGVcImluIGRvY3VtZW50JiYxMT49ZG9jdW1lbnQuZG9jdW1lbnRNb2RlLGRlPXtzZWxlY3Q6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25TZWxlY3RcIixjYXB0dXJlZDpcIm9uU2VsZWN0Q2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6XCJibHVyIGNvbnRleHRtZW51IGRyYWdlbmQgZm9jdXMga2V5ZG93biBrZXl1cCBtb3VzZWRvd24gbW91c2V1cCBzZWxlY3Rpb25jaGFuZ2VcIi5zcGxpdChcIiBcIil9fSxlZT1udWxsLGZlPW51bGwsZ2U9bnVsbCxoZT0hMTtcbmZ1bmN0aW9uIGllKGEsYil7dmFyIGM9Yi53aW5kb3c9PT1iP2IuZG9jdW1lbnQ6OT09PWIubm9kZVR5cGU/YjpiLm93bmVyRG9jdW1lbnQ7aWYoaGV8fG51bGw9PWVlfHxlZSE9PVhkKGMpKXJldHVybiBudWxsO2M9ZWU7XCJzZWxlY3Rpb25TdGFydFwiaW4gYyYmYmUoYyk/Yz17c3RhcnQ6Yy5zZWxlY3Rpb25TdGFydCxlbmQ6Yy5zZWxlY3Rpb25FbmR9OihjPShjLm93bmVyRG9jdW1lbnQmJmMub3duZXJEb2N1bWVudC5kZWZhdWx0Vmlld3x8d2luZG93KS5nZXRTZWxlY3Rpb24oKSxjPXthbmNob3JOb2RlOmMuYW5jaG9yTm9kZSxhbmNob3JPZmZzZXQ6Yy5hbmNob3JPZmZzZXQsZm9jdXNOb2RlOmMuZm9jdXNOb2RlLGZvY3VzT2Zmc2V0OmMuZm9jdXNPZmZzZXR9KTtyZXR1cm4gZ2UmJmpkKGdlLGMpP251bGw6KGdlPWMsYT15LmdldFBvb2xlZChkZS5zZWxlY3QsZmUsYSxiKSxhLnR5cGU9XCJzZWxlY3RcIixhLnRhcmdldD1lZSxRYShhKSxhKX1cbnZhciBqZT17ZXZlbnRUeXBlczpkZSxleHRyYWN0RXZlbnRzOmZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlPWQud2luZG93PT09ZD9kLmRvY3VtZW50Ojk9PT1kLm5vZGVUeXBlP2Q6ZC5vd25lckRvY3VtZW50LGY7aWYoIShmPSFlKSl7YTp7ZT1XZChlKTtmPWphLm9uU2VsZWN0O2Zvcih2YXIgaD0wO2g8Zi5sZW5ndGg7aCsrKWlmKCFlLmhhcyhmW2hdKSl7ZT0hMTticmVhayBhfWU9ITB9Zj0hZX1pZihmKXJldHVybiBudWxsO2U9Yj9KYShiKTp3aW5kb3c7c3dpdGNoKGEpe2Nhc2UgXCJmb2N1c1wiOmlmKFFiKGUpfHxcInRydWVcIj09PWUuY29udGVudEVkaXRhYmxlKWVlPWUsZmU9YixnZT1udWxsO2JyZWFrO2Nhc2UgXCJibHVyXCI6Z2U9ZmU9ZWU9bnVsbDticmVhaztjYXNlIFwibW91c2Vkb3duXCI6aGU9ITA7YnJlYWs7Y2FzZSBcImNvbnRleHRtZW51XCI6Y2FzZSBcIm1vdXNldXBcIjpjYXNlIFwiZHJhZ2VuZFwiOnJldHVybiBoZT0hMSxpZShjLGQpO2Nhc2UgXCJzZWxlY3Rpb25jaGFuZ2VcIjppZihjZSlicmVhaztcbmNhc2UgXCJrZXlkb3duXCI6Y2FzZSBcImtleXVwXCI6cmV0dXJuIGllKGMsZCl9cmV0dXJuIG51bGx9fTtDYS5pbmplY3RFdmVudFBsdWdpbk9yZGVyKFwiUmVzcG9uZGVyRXZlbnRQbHVnaW4gU2ltcGxlRXZlbnRQbHVnaW4gRW50ZXJMZWF2ZUV2ZW50UGx1Z2luIENoYW5nZUV2ZW50UGx1Z2luIFNlbGVjdEV2ZW50UGx1Z2luIEJlZm9yZUlucHV0RXZlbnRQbHVnaW5cIi5zcGxpdChcIiBcIikpO3NhPUthO3RhPUlhO3ZhPUphO0NhLmluamVjdEV2ZW50UGx1Z2luc0J5TmFtZSh7U2ltcGxlRXZlbnRQbHVnaW46TWQsRW50ZXJMZWF2ZUV2ZW50UGx1Z2luOmdkLENoYW5nZUV2ZW50UGx1Z2luOlZjLFNlbGVjdEV2ZW50UGx1Z2luOmplLEJlZm9yZUlucHV0RXZlbnRQbHVnaW46Q2J9KTtmdW5jdGlvbiBrZShhKXt2YXIgYj1cIlwiO2FhLkNoaWxkcmVuLmZvckVhY2goYSxmdW5jdGlvbihhKXtudWxsIT1hJiYoYis9YSl9KTtyZXR1cm4gYn1cbmZ1bmN0aW9uIGxlKGEsYil7YT1tKHtjaGlsZHJlbjp2b2lkIDB9LGIpO2lmKGI9a2UoYi5jaGlsZHJlbikpYS5jaGlsZHJlbj1iO3JldHVybiBhfWZ1bmN0aW9uIG1lKGEsYixjLGQpe2E9YS5vcHRpb25zO2lmKGIpe2I9e307Zm9yKHZhciBlPTA7ZTxjLmxlbmd0aDtlKyspYltcIiRcIitjW2VdXT0hMDtmb3IoYz0wO2M8YS5sZW5ndGg7YysrKWU9Yi5oYXNPd25Qcm9wZXJ0eShcIiRcIithW2NdLnZhbHVlKSxhW2NdLnNlbGVjdGVkIT09ZSYmKGFbY10uc2VsZWN0ZWQ9ZSksZSYmZCYmKGFbY10uZGVmYXVsdFNlbGVjdGVkPSEwKX1lbHNle2M9XCJcIitBYyhjKTtiPW51bGw7Zm9yKGU9MDtlPGEubGVuZ3RoO2UrKyl7aWYoYVtlXS52YWx1ZT09PWMpe2FbZV0uc2VsZWN0ZWQ9ITA7ZCYmKGFbZV0uZGVmYXVsdFNlbGVjdGVkPSEwKTtyZXR1cm59bnVsbCE9PWJ8fGFbZV0uZGlzYWJsZWR8fChiPWFbZV0pfW51bGwhPT1iJiYoYi5zZWxlY3RlZD0hMCl9fVxuZnVuY3Rpb24gbmUoYSxiKXtpZihudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MKXRocm93IHQoRXJyb3IoOTEpKTtyZXR1cm4gbSh7fSxiLHt2YWx1ZTp2b2lkIDAsZGVmYXVsdFZhbHVlOnZvaWQgMCxjaGlsZHJlbjpcIlwiK2EuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWV9KX1mdW5jdGlvbiBvZShhLGIpe3ZhciBjPWIudmFsdWU7aWYobnVsbD09Yyl7Yz1iLmRlZmF1bHRWYWx1ZTtiPWIuY2hpbGRyZW47aWYobnVsbCE9Yil7aWYobnVsbCE9Yyl0aHJvdyB0KEVycm9yKDkyKSk7aWYoQXJyYXkuaXNBcnJheShiKSl7aWYoISgxPj1iLmxlbmd0aCkpdGhyb3cgdChFcnJvcig5MykpO2I9YlswXX1jPWJ9bnVsbD09YyYmKGM9XCJcIil9YS5fd3JhcHBlclN0YXRlPXtpbml0aWFsVmFsdWU6QWMoYyl9fVxuZnVuY3Rpb24gcGUoYSxiKXt2YXIgYz1BYyhiLnZhbHVlKSxkPUFjKGIuZGVmYXVsdFZhbHVlKTtudWxsIT1jJiYoYz1cIlwiK2MsYyE9PWEudmFsdWUmJihhLnZhbHVlPWMpLG51bGw9PWIuZGVmYXVsdFZhbHVlJiZhLmRlZmF1bHRWYWx1ZSE9PWMmJihhLmRlZmF1bHRWYWx1ZT1jKSk7bnVsbCE9ZCYmKGEuZGVmYXVsdFZhbHVlPVwiXCIrZCl9ZnVuY3Rpb24gcWUoYSl7dmFyIGI9YS50ZXh0Q29udGVudDtiPT09YS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZSYmKGEudmFsdWU9Yil9dmFyIHJlPXtodG1sOlwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiLG1hdGhtbDpcImh0dHA6Ly93d3cudzMub3JnLzE5OTgvTWF0aC9NYXRoTUxcIixzdmc6XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wifTtcbmZ1bmN0aW9uIHNlKGEpe3N3aXRjaChhKXtjYXNlIFwic3ZnXCI6cmV0dXJuXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiO2Nhc2UgXCJtYXRoXCI6cmV0dXJuXCJodHRwOi8vd3d3LnczLm9yZy8xOTk4L01hdGgvTWF0aE1MXCI7ZGVmYXVsdDpyZXR1cm5cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIn19ZnVuY3Rpb24gdGUoYSxiKXtyZXR1cm4gbnVsbD09YXx8XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCI9PT1hP3NlKGIpOlwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIj09PWEmJlwiZm9yZWlnbk9iamVjdFwiPT09Yj9cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIjphfVxudmFyIHVlPXZvaWQgMCx2ZT1mdW5jdGlvbihhKXtyZXR1cm5cInVuZGVmaW5lZFwiIT09dHlwZW9mIE1TQXBwJiZNU0FwcC5leGVjVW5zYWZlTG9jYWxGdW5jdGlvbj9mdW5jdGlvbihiLGMsZCxlKXtNU0FwcC5leGVjVW5zYWZlTG9jYWxGdW5jdGlvbihmdW5jdGlvbigpe3JldHVybiBhKGIsYyxkLGUpfSl9OmF9KGZ1bmN0aW9uKGEsYil7aWYoYS5uYW1lc3BhY2VVUkkhPT1yZS5zdmd8fFwiaW5uZXJIVE1MXCJpbiBhKWEuaW5uZXJIVE1MPWI7ZWxzZXt1ZT11ZXx8ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTt1ZS5pbm5lckhUTUw9XCI8c3ZnPlwiK2IrXCI8L3N2Zz5cIjtmb3IoYj11ZS5maXJzdENoaWxkO2EuZmlyc3RDaGlsZDspYS5yZW1vdmVDaGlsZChhLmZpcnN0Q2hpbGQpO2Zvcig7Yi5maXJzdENoaWxkOylhLmFwcGVuZENoaWxkKGIuZmlyc3RDaGlsZCl9fSk7XG5mdW5jdGlvbiB3ZShhLGIpe2lmKGIpe3ZhciBjPWEuZmlyc3RDaGlsZDtpZihjJiZjPT09YS5sYXN0Q2hpbGQmJjM9PT1jLm5vZGVUeXBlKXtjLm5vZGVWYWx1ZT1iO3JldHVybn19YS50ZXh0Q29udGVudD1ifVxudmFyIHhlPXthbmltYXRpb25JdGVyYXRpb25Db3VudDohMCxib3JkZXJJbWFnZU91dHNldDohMCxib3JkZXJJbWFnZVNsaWNlOiEwLGJvcmRlckltYWdlV2lkdGg6ITAsYm94RmxleDohMCxib3hGbGV4R3JvdXA6ITAsYm94T3JkaW5hbEdyb3VwOiEwLGNvbHVtbkNvdW50OiEwLGNvbHVtbnM6ITAsZmxleDohMCxmbGV4R3JvdzohMCxmbGV4UG9zaXRpdmU6ITAsZmxleFNocmluazohMCxmbGV4TmVnYXRpdmU6ITAsZmxleE9yZGVyOiEwLGdyaWRBcmVhOiEwLGdyaWRSb3c6ITAsZ3JpZFJvd0VuZDohMCxncmlkUm93U3BhbjohMCxncmlkUm93U3RhcnQ6ITAsZ3JpZENvbHVtbjohMCxncmlkQ29sdW1uRW5kOiEwLGdyaWRDb2x1bW5TcGFuOiEwLGdyaWRDb2x1bW5TdGFydDohMCxmb250V2VpZ2h0OiEwLGxpbmVDbGFtcDohMCxsaW5lSGVpZ2h0OiEwLG9wYWNpdHk6ITAsb3JkZXI6ITAsb3JwaGFuczohMCx0YWJTaXplOiEwLHdpZG93czohMCx6SW5kZXg6ITAsem9vbTohMCxmaWxsT3BhY2l0eTohMCxcbmZsb29kT3BhY2l0eTohMCxzdG9wT3BhY2l0eTohMCxzdHJva2VEYXNoYXJyYXk6ITAsc3Ryb2tlRGFzaG9mZnNldDohMCxzdHJva2VNaXRlcmxpbWl0OiEwLHN0cm9rZU9wYWNpdHk6ITAsc3Ryb2tlV2lkdGg6ITB9LHllPVtcIldlYmtpdFwiLFwibXNcIixcIk1velwiLFwiT1wiXTtPYmplY3Qua2V5cyh4ZSkuZm9yRWFjaChmdW5jdGlvbihhKXt5ZS5mb3JFYWNoKGZ1bmN0aW9uKGIpe2I9YithLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpK2Euc3Vic3RyaW5nKDEpO3hlW2JdPXhlW2FdfSl9KTtmdW5jdGlvbiB6ZShhLGIsYyl7cmV0dXJuIG51bGw9PWJ8fFwiYm9vbGVhblwiPT09dHlwZW9mIGJ8fFwiXCI9PT1iP1wiXCI6Y3x8XCJudW1iZXJcIiE9PXR5cGVvZiBifHwwPT09Ynx8eGUuaGFzT3duUHJvcGVydHkoYSkmJnhlW2FdPyhcIlwiK2IpLnRyaW0oKTpiK1wicHhcIn1cbmZ1bmN0aW9uIEFlKGEsYil7YT1hLnN0eWxlO2Zvcih2YXIgYyBpbiBiKWlmKGIuaGFzT3duUHJvcGVydHkoYykpe3ZhciBkPTA9PT1jLmluZGV4T2YoXCItLVwiKSxlPXplKGMsYltjXSxkKTtcImZsb2F0XCI9PT1jJiYoYz1cImNzc0Zsb2F0XCIpO2Q/YS5zZXRQcm9wZXJ0eShjLGUpOmFbY109ZX19dmFyIENlPW0oe21lbnVpdGVtOiEwfSx7YXJlYTohMCxiYXNlOiEwLGJyOiEwLGNvbDohMCxlbWJlZDohMCxocjohMCxpbWc6ITAsaW5wdXQ6ITAsa2V5Z2VuOiEwLGxpbms6ITAsbWV0YTohMCxwYXJhbTohMCxzb3VyY2U6ITAsdHJhY2s6ITAsd2JyOiEwfSk7XG5mdW5jdGlvbiBEZShhLGIpe2lmKGIpe2lmKENlW2FdJiYobnVsbCE9Yi5jaGlsZHJlbnx8bnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTCkpdGhyb3cgdChFcnJvcigxMzcpLGEsXCJcIik7aWYobnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTCl7aWYobnVsbCE9Yi5jaGlsZHJlbil0aHJvdyB0KEVycm9yKDYwKSk7aWYoIShcIm9iamVjdFwiPT09dHlwZW9mIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwmJlwiX19odG1sXCJpbiBiLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MKSl0aHJvdyB0KEVycm9yKDYxKSk7fWlmKG51bGwhPWIuc3R5bGUmJlwib2JqZWN0XCIhPT10eXBlb2YgYi5zdHlsZSl0aHJvdyB0KEVycm9yKDYyKSxcIlwiKTt9fVxuZnVuY3Rpb24gRWUoYSxiKXtpZigtMT09PWEuaW5kZXhPZihcIi1cIikpcmV0dXJuXCJzdHJpbmdcIj09PXR5cGVvZiBiLmlzO3N3aXRjaChhKXtjYXNlIFwiYW5ub3RhdGlvbi14bWxcIjpjYXNlIFwiY29sb3ItcHJvZmlsZVwiOmNhc2UgXCJmb250LWZhY2VcIjpjYXNlIFwiZm9udC1mYWNlLXNyY1wiOmNhc2UgXCJmb250LWZhY2UtdXJpXCI6Y2FzZSBcImZvbnQtZmFjZS1mb3JtYXRcIjpjYXNlIFwiZm9udC1mYWNlLW5hbWVcIjpjYXNlIFwibWlzc2luZy1nbHlwaFwiOnJldHVybiExO2RlZmF1bHQ6cmV0dXJuITB9fVxuZnVuY3Rpb24gRmUoYSxiKXthPTk9PT1hLm5vZGVUeXBlfHwxMT09PWEubm9kZVR5cGU/YTphLm93bmVyRG9jdW1lbnQ7dmFyIGM9V2QoYSk7Yj1qYVtiXTtmb3IodmFyIGQ9MDtkPGIubGVuZ3RoO2QrKyl7dmFyIGU9YltkXTtpZighYy5oYXMoZSkpe3N3aXRjaChlKXtjYXNlIFwic2Nyb2xsXCI6UmQoYSxcInNjcm9sbFwiLCEwKTticmVhaztjYXNlIFwiZm9jdXNcIjpjYXNlIFwiYmx1clwiOlJkKGEsXCJmb2N1c1wiLCEwKTtSZChhLFwiYmx1clwiLCEwKTtjLmFkZChcImJsdXJcIik7Yy5hZGQoXCJmb2N1c1wiKTticmVhaztjYXNlIFwiY2FuY2VsXCI6Y2FzZSBcImNsb3NlXCI6U2IoZSkmJlJkKGEsZSwhMCk7YnJlYWs7Y2FzZSBcImludmFsaWRcIjpjYXNlIFwic3VibWl0XCI6Y2FzZSBcInJlc2V0XCI6YnJlYWs7ZGVmYXVsdDotMT09PWJiLmluZGV4T2YoZSkmJkcoZSxhKX1jLmFkZChlKX19fWZ1bmN0aW9uIEdlKCl7fXZhciBIZT1udWxsLEllPW51bGw7XG5mdW5jdGlvbiBKZShhLGIpe3N3aXRjaChhKXtjYXNlIFwiYnV0dG9uXCI6Y2FzZSBcImlucHV0XCI6Y2FzZSBcInNlbGVjdFwiOmNhc2UgXCJ0ZXh0YXJlYVwiOnJldHVybiEhYi5hdXRvRm9jdXN9cmV0dXJuITF9ZnVuY3Rpb24gS2UoYSxiKXtyZXR1cm5cInRleHRhcmVhXCI9PT1hfHxcIm9wdGlvblwiPT09YXx8XCJub3NjcmlwdFwiPT09YXx8XCJzdHJpbmdcIj09PXR5cGVvZiBiLmNoaWxkcmVufHxcIm51bWJlclwiPT09dHlwZW9mIGIuY2hpbGRyZW58fFwib2JqZWN0XCI9PT10eXBlb2YgYi5kYW5nZXJvdXNseVNldElubmVySFRNTCYmbnVsbCE9PWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwmJm51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwuX19odG1sfXZhciBMZT1cImZ1bmN0aW9uXCI9PT10eXBlb2Ygc2V0VGltZW91dD9zZXRUaW1lb3V0OnZvaWQgMCxNZT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgY2xlYXJUaW1lb3V0P2NsZWFyVGltZW91dDp2b2lkIDA7XG5mdW5jdGlvbiBOZShhKXtmb3IoO251bGwhPWE7YT1hLm5leHRTaWJsaW5nKXt2YXIgYj1hLm5vZGVUeXBlO2lmKDE9PT1ifHwzPT09YilicmVha31yZXR1cm4gYX1uZXcgU2V0O3ZhciBPZT1bXSxQZT0tMTtmdW5jdGlvbiBIKGEpezA+UGV8fChhLmN1cnJlbnQ9T2VbUGVdLE9lW1BlXT1udWxsLFBlLS0pfWZ1bmN0aW9uIEooYSxiKXtQZSsrO09lW1BlXT1hLmN1cnJlbnQ7YS5jdXJyZW50PWJ9dmFyIFFlPXt9LEw9e2N1cnJlbnQ6UWV9LE09e2N1cnJlbnQ6ITF9LFJlPVFlO1xuZnVuY3Rpb24gU2UoYSxiKXt2YXIgYz1hLnR5cGUuY29udGV4dFR5cGVzO2lmKCFjKXJldHVybiBRZTt2YXIgZD1hLnN0YXRlTm9kZTtpZihkJiZkLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQ9PT1iKXJldHVybiBkLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0O3ZhciBlPXt9LGY7Zm9yKGYgaW4gYyllW2ZdPWJbZl07ZCYmKGE9YS5zdGF0ZU5vZGUsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0PWIsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dD1lKTtyZXR1cm4gZX1mdW5jdGlvbiBOKGEpe2E9YS5jaGlsZENvbnRleHRUeXBlcztyZXR1cm4gbnVsbCE9PWEmJnZvaWQgMCE9PWF9ZnVuY3Rpb24gVGUoYSl7SChNLGEpO0goTCxhKX1mdW5jdGlvbiBVZShhKXtIKE0sYSk7SChMLGEpfVxuZnVuY3Rpb24gVmUoYSxiLGMpe2lmKEwuY3VycmVudCE9PVFlKXRocm93IHQoRXJyb3IoMTY4KSk7SihMLGIsYSk7SihNLGMsYSl9ZnVuY3Rpb24gV2UoYSxiLGMpe3ZhciBkPWEuc3RhdGVOb2RlO2E9Yi5jaGlsZENvbnRleHRUeXBlcztpZihcImZ1bmN0aW9uXCIhPT10eXBlb2YgZC5nZXRDaGlsZENvbnRleHQpcmV0dXJuIGM7ZD1kLmdldENoaWxkQ29udGV4dCgpO2Zvcih2YXIgZSBpbiBkKWlmKCEoZSBpbiBhKSl0aHJvdyB0KEVycm9yKDEwOCksb2MoYil8fFwiVW5rbm93blwiLGUpO3JldHVybiBtKHt9LGMsZCl9ZnVuY3Rpb24gWGUoYSl7dmFyIGI9YS5zdGF0ZU5vZGU7Yj1iJiZiLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0fHxRZTtSZT1MLmN1cnJlbnQ7SihMLGIsYSk7SihNLE0uY3VycmVudCxhKTtyZXR1cm4hMH1cbmZ1bmN0aW9uIFllKGEsYixjKXt2YXIgZD1hLnN0YXRlTm9kZTtpZighZCl0aHJvdyB0KEVycm9yKDE2OSkpO2M/KGI9V2UoYSxiLFJlKSxkLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0PWIsSChNLGEpLEgoTCxhKSxKKEwsYixhKSk6SChNLGEpO0ooTSxjLGEpfVxudmFyIFplPXEudW5zdGFibGVfcnVuV2l0aFByaW9yaXR5LCRlPXEudW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjayxhZj1xLnVuc3RhYmxlX2NhbmNlbENhbGxiYWNrLGJmPXEudW5zdGFibGVfc2hvdWxkWWllbGQsY2Y9cS51bnN0YWJsZV9yZXF1ZXN0UGFpbnQsZGY9cS51bnN0YWJsZV9ub3csZWY9cS51bnN0YWJsZV9nZXRDdXJyZW50UHJpb3JpdHlMZXZlbCxmZj1xLnVuc3RhYmxlX0ltbWVkaWF0ZVByaW9yaXR5LGhmPXEudW5zdGFibGVfVXNlckJsb2NraW5nUHJpb3JpdHksamY9cS51bnN0YWJsZV9Ob3JtYWxQcmlvcml0eSxrZj1xLnVuc3RhYmxlX0xvd1ByaW9yaXR5LGxmPXEudW5zdGFibGVfSWRsZVByaW9yaXR5LG1mPXt9LG5mPXZvaWQgMCE9PWNmP2NmOmZ1bmN0aW9uKCl7fSxvZj1udWxsLHBmPW51bGwscWY9ITEscmY9ZGYoKSxzZj0xRTQ+cmY/ZGY6ZnVuY3Rpb24oKXtyZXR1cm4gZGYoKS1yZn07XG5mdW5jdGlvbiB0Zigpe3N3aXRjaChlZigpKXtjYXNlIGZmOnJldHVybiA5OTtjYXNlIGhmOnJldHVybiA5ODtjYXNlIGpmOnJldHVybiA5NztjYXNlIGtmOnJldHVybiA5NjtjYXNlIGxmOnJldHVybiA5NTtkZWZhdWx0OnRocm93IHQoRXJyb3IoMzMyKSk7fX1mdW5jdGlvbiB1ZihhKXtzd2l0Y2goYSl7Y2FzZSA5OTpyZXR1cm4gZmY7Y2FzZSA5ODpyZXR1cm4gaGY7Y2FzZSA5NzpyZXR1cm4gamY7Y2FzZSA5NjpyZXR1cm4ga2Y7Y2FzZSA5NTpyZXR1cm4gbGY7ZGVmYXVsdDp0aHJvdyB0KEVycm9yKDMzMikpO319ZnVuY3Rpb24gdmYoYSxiKXthPXVmKGEpO3JldHVybiBaZShhLGIpfWZ1bmN0aW9uIHdmKGEsYixjKXthPXVmKGEpO3JldHVybiAkZShhLGIsYyl9ZnVuY3Rpb24geGYoYSl7bnVsbD09PW9mPyhvZj1bYV0scGY9JGUoZmYseWYpKTpvZi5wdXNoKGEpO3JldHVybiBtZn1mdW5jdGlvbiBPKCl7bnVsbCE9PXBmJiZhZihwZik7eWYoKX1cbmZ1bmN0aW9uIHlmKCl7aWYoIXFmJiZudWxsIT09b2Ype3FmPSEwO3ZhciBhPTA7dHJ5e3ZhciBiPW9mO3ZmKDk5LGZ1bmN0aW9uKCl7Zm9yKDthPGIubGVuZ3RoO2ErKyl7dmFyIGM9YlthXTtkbyBjPWMoITApO3doaWxlKG51bGwhPT1jKX19KTtvZj1udWxsfWNhdGNoKGMpe3Rocm93IG51bGwhPT1vZiYmKG9mPW9mLnNsaWNlKGErMSkpLCRlKGZmLE8pLGM7fWZpbmFsbHl7cWY9ITF9fX1mdW5jdGlvbiB6ZihhLGIpe2lmKDEwNzM3NDE4MjM9PT1iKXJldHVybiA5OTtpZigxPT09YilyZXR1cm4gOTU7YT0xMCooMTA3Mzc0MTgyMS1iKS0xMCooMTA3Mzc0MTgyMS1hKTtyZXR1cm4gMD49YT85OToyNTA+PWE/OTg6NTI1MD49YT85Nzo5NX1mdW5jdGlvbiBBZihhLGIpe2lmKGEmJmEuZGVmYXVsdFByb3BzKXtiPW0oe30sYik7YT1hLmRlZmF1bHRQcm9wcztmb3IodmFyIGMgaW4gYSl2b2lkIDA9PT1iW2NdJiYoYltjXT1hW2NdKX1yZXR1cm4gYn1cbmZ1bmN0aW9uIEJmKGEpe3ZhciBiPWEuX3Jlc3VsdDtzd2l0Y2goYS5fc3RhdHVzKXtjYXNlIDE6cmV0dXJuIGI7Y2FzZSAyOnRocm93IGI7Y2FzZSAwOnRocm93IGI7ZGVmYXVsdDphLl9zdGF0dXM9MDtiPWEuX2N0b3I7Yj1iKCk7Yi50aGVuKGZ1bmN0aW9uKGIpezA9PT1hLl9zdGF0dXMmJihiPWIuZGVmYXVsdCxhLl9zdGF0dXM9MSxhLl9yZXN1bHQ9Yil9LGZ1bmN0aW9uKGIpezA9PT1hLl9zdGF0dXMmJihhLl9zdGF0dXM9MixhLl9yZXN1bHQ9Yil9KTtzd2l0Y2goYS5fc3RhdHVzKXtjYXNlIDE6cmV0dXJuIGEuX3Jlc3VsdDtjYXNlIDI6dGhyb3cgYS5fcmVzdWx0O31hLl9yZXN1bHQ9Yjt0aHJvdyBiO319dmFyIENmPXtjdXJyZW50Om51bGx9LERmPW51bGwsRWY9bnVsbCxGZj1udWxsO2Z1bmN0aW9uIEdmKCl7RmY9RWY9RGY9bnVsbH1cbmZ1bmN0aW9uIEhmKGEsYil7dmFyIGM9YS50eXBlLl9jb250ZXh0O0ooQ2YsYy5fY3VycmVudFZhbHVlLGEpO2MuX2N1cnJlbnRWYWx1ZT1ifWZ1bmN0aW9uIElmKGEpe3ZhciBiPUNmLmN1cnJlbnQ7SChDZixhKTthLnR5cGUuX2NvbnRleHQuX2N1cnJlbnRWYWx1ZT1ifWZ1bmN0aW9uIEpmKGEsYil7Zm9yKDtudWxsIT09YTspe3ZhciBjPWEuYWx0ZXJuYXRlO2lmKGEuY2hpbGRFeHBpcmF0aW9uVGltZTxiKWEuY2hpbGRFeHBpcmF0aW9uVGltZT1iLG51bGwhPT1jJiZjLmNoaWxkRXhwaXJhdGlvblRpbWU8YiYmKGMuY2hpbGRFeHBpcmF0aW9uVGltZT1iKTtlbHNlIGlmKG51bGwhPT1jJiZjLmNoaWxkRXhwaXJhdGlvblRpbWU8YiljLmNoaWxkRXhwaXJhdGlvblRpbWU9YjtlbHNlIGJyZWFrO2E9YS5yZXR1cm59fVxuZnVuY3Rpb24gS2YoYSxiKXtEZj1hO0ZmPUVmPW51bGw7YT1hLmRlcGVuZGVuY2llcztudWxsIT09YSYmbnVsbCE9PWEuZmlyc3RDb250ZXh0JiYoYS5leHBpcmF0aW9uVGltZT49YiYmKExmPSEwKSxhLmZpcnN0Q29udGV4dD1udWxsKX1mdW5jdGlvbiBNZihhLGIpe2lmKEZmIT09YSYmITEhPT1iJiYwIT09Yil7aWYoXCJudW1iZXJcIiE9PXR5cGVvZiBifHwxMDczNzQxODIzPT09YilGZj1hLGI9MTA3Mzc0MTgyMztiPXtjb250ZXh0OmEsb2JzZXJ2ZWRCaXRzOmIsbmV4dDpudWxsfTtpZihudWxsPT09RWYpe2lmKG51bGw9PT1EZil0aHJvdyB0KEVycm9yKDMwOCkpO0VmPWI7RGYuZGVwZW5kZW5jaWVzPXtleHBpcmF0aW9uVGltZTowLGZpcnN0Q29udGV4dDpiLHJlc3BvbmRlcnM6bnVsbH19ZWxzZSBFZj1FZi5uZXh0PWJ9cmV0dXJuIGEuX2N1cnJlbnRWYWx1ZX12YXIgTmY9ITE7XG5mdW5jdGlvbiBPZihhKXtyZXR1cm57YmFzZVN0YXRlOmEsZmlyc3RVcGRhdGU6bnVsbCxsYXN0VXBkYXRlOm51bGwsZmlyc3RDYXB0dXJlZFVwZGF0ZTpudWxsLGxhc3RDYXB0dXJlZFVwZGF0ZTpudWxsLGZpcnN0RWZmZWN0Om51bGwsbGFzdEVmZmVjdDpudWxsLGZpcnN0Q2FwdHVyZWRFZmZlY3Q6bnVsbCxsYXN0Q2FwdHVyZWRFZmZlY3Q6bnVsbH19ZnVuY3Rpb24gUGYoYSl7cmV0dXJue2Jhc2VTdGF0ZTphLmJhc2VTdGF0ZSxmaXJzdFVwZGF0ZTphLmZpcnN0VXBkYXRlLGxhc3RVcGRhdGU6YS5sYXN0VXBkYXRlLGZpcnN0Q2FwdHVyZWRVcGRhdGU6bnVsbCxsYXN0Q2FwdHVyZWRVcGRhdGU6bnVsbCxmaXJzdEVmZmVjdDpudWxsLGxhc3RFZmZlY3Q6bnVsbCxmaXJzdENhcHR1cmVkRWZmZWN0Om51bGwsbGFzdENhcHR1cmVkRWZmZWN0Om51bGx9fVxuZnVuY3Rpb24gUWYoYSxiKXtyZXR1cm57ZXhwaXJhdGlvblRpbWU6YSxzdXNwZW5zZUNvbmZpZzpiLHRhZzowLHBheWxvYWQ6bnVsbCxjYWxsYmFjazpudWxsLG5leHQ6bnVsbCxuZXh0RWZmZWN0Om51bGx9fWZ1bmN0aW9uIFJmKGEsYil7bnVsbD09PWEubGFzdFVwZGF0ZT9hLmZpcnN0VXBkYXRlPWEubGFzdFVwZGF0ZT1iOihhLmxhc3RVcGRhdGUubmV4dD1iLGEubGFzdFVwZGF0ZT1iKX1cbmZ1bmN0aW9uIFNmKGEsYil7dmFyIGM9YS5hbHRlcm5hdGU7aWYobnVsbD09PWMpe3ZhciBkPWEudXBkYXRlUXVldWU7dmFyIGU9bnVsbDtudWxsPT09ZCYmKGQ9YS51cGRhdGVRdWV1ZT1PZihhLm1lbW9pemVkU3RhdGUpKX1lbHNlIGQ9YS51cGRhdGVRdWV1ZSxlPWMudXBkYXRlUXVldWUsbnVsbD09PWQ/bnVsbD09PWU/KGQ9YS51cGRhdGVRdWV1ZT1PZihhLm1lbW9pemVkU3RhdGUpLGU9Yy51cGRhdGVRdWV1ZT1PZihjLm1lbW9pemVkU3RhdGUpKTpkPWEudXBkYXRlUXVldWU9UGYoZSk6bnVsbD09PWUmJihlPWMudXBkYXRlUXVldWU9UGYoZCkpO251bGw9PT1lfHxkPT09ZT9SZihkLGIpOm51bGw9PT1kLmxhc3RVcGRhdGV8fG51bGw9PT1lLmxhc3RVcGRhdGU/KFJmKGQsYiksUmYoZSxiKSk6KFJmKGQsYiksZS5sYXN0VXBkYXRlPWIpfVxuZnVuY3Rpb24gVGYoYSxiKXt2YXIgYz1hLnVwZGF0ZVF1ZXVlO2M9bnVsbD09PWM/YS51cGRhdGVRdWV1ZT1PZihhLm1lbW9pemVkU3RhdGUpOlVmKGEsYyk7bnVsbD09PWMubGFzdENhcHR1cmVkVXBkYXRlP2MuZmlyc3RDYXB0dXJlZFVwZGF0ZT1jLmxhc3RDYXB0dXJlZFVwZGF0ZT1iOihjLmxhc3RDYXB0dXJlZFVwZGF0ZS5uZXh0PWIsYy5sYXN0Q2FwdHVyZWRVcGRhdGU9Yil9ZnVuY3Rpb24gVWYoYSxiKXt2YXIgYz1hLmFsdGVybmF0ZTtudWxsIT09YyYmYj09PWMudXBkYXRlUXVldWUmJihiPWEudXBkYXRlUXVldWU9UGYoYikpO3JldHVybiBifVxuZnVuY3Rpb24gVmYoYSxiLGMsZCxlLGYpe3N3aXRjaChjLnRhZyl7Y2FzZSAxOnJldHVybiBhPWMucGF5bG9hZCxcImZ1bmN0aW9uXCI9PT10eXBlb2YgYT9hLmNhbGwoZixkLGUpOmE7Y2FzZSAzOmEuZWZmZWN0VGFnPWEuZWZmZWN0VGFnJi0yMDQ5fDY0O2Nhc2UgMDphPWMucGF5bG9hZDtlPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBhP2EuY2FsbChmLGQsZSk6YTtpZihudWxsPT09ZXx8dm9pZCAwPT09ZSlicmVhaztyZXR1cm4gbSh7fSxkLGUpO2Nhc2UgMjpOZj0hMH1yZXR1cm4gZH1cbmZ1bmN0aW9uIFdmKGEsYixjLGQsZSl7TmY9ITE7Yj1VZihhLGIpO2Zvcih2YXIgZj1iLmJhc2VTdGF0ZSxoPW51bGwsZz0wLGs9Yi5maXJzdFVwZGF0ZSxsPWY7bnVsbCE9PWs7KXt2YXIgbj1rLmV4cGlyYXRpb25UaW1lO248ZT8obnVsbD09PWgmJihoPWssZj1sKSxnPG4mJihnPW4pKTooWGYobixrLnN1c3BlbnNlQ29uZmlnKSxsPVZmKGEsYixrLGwsYyxkKSxudWxsIT09ay5jYWxsYmFjayYmKGEuZWZmZWN0VGFnfD0zMixrLm5leHRFZmZlY3Q9bnVsbCxudWxsPT09Yi5sYXN0RWZmZWN0P2IuZmlyc3RFZmZlY3Q9Yi5sYXN0RWZmZWN0PWs6KGIubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWssYi5sYXN0RWZmZWN0PWspKSk7az1rLm5leHR9bj1udWxsO2ZvcihrPWIuZmlyc3RDYXB0dXJlZFVwZGF0ZTtudWxsIT09azspe3ZhciB6PWsuZXhwaXJhdGlvblRpbWU7ejxlPyhudWxsPT09biYmKG49ayxudWxsPT09aCYmKGY9bCkpLGc8eiYmKGc9eikpOihsPVZmKGEsYixrLGwsYyxkKSxudWxsIT09XG5rLmNhbGxiYWNrJiYoYS5lZmZlY3RUYWd8PTMyLGsubmV4dEVmZmVjdD1udWxsLG51bGw9PT1iLmxhc3RDYXB0dXJlZEVmZmVjdD9iLmZpcnN0Q2FwdHVyZWRFZmZlY3Q9Yi5sYXN0Q2FwdHVyZWRFZmZlY3Q9azooYi5sYXN0Q2FwdHVyZWRFZmZlY3QubmV4dEVmZmVjdD1rLGIubGFzdENhcHR1cmVkRWZmZWN0PWspKSk7az1rLm5leHR9bnVsbD09PWgmJihiLmxhc3RVcGRhdGU9bnVsbCk7bnVsbD09PW4/Yi5sYXN0Q2FwdHVyZWRVcGRhdGU9bnVsbDphLmVmZmVjdFRhZ3w9MzI7bnVsbD09PWgmJm51bGw9PT1uJiYoZj1sKTtiLmJhc2VTdGF0ZT1mO2IuZmlyc3RVcGRhdGU9aDtiLmZpcnN0Q2FwdHVyZWRVcGRhdGU9bjthLmV4cGlyYXRpb25UaW1lPWc7YS5tZW1vaXplZFN0YXRlPWx9XG5mdW5jdGlvbiBZZihhLGIsYyl7bnVsbCE9PWIuZmlyc3RDYXB0dXJlZFVwZGF0ZSYmKG51bGwhPT1iLmxhc3RVcGRhdGUmJihiLmxhc3RVcGRhdGUubmV4dD1iLmZpcnN0Q2FwdHVyZWRVcGRhdGUsYi5sYXN0VXBkYXRlPWIubGFzdENhcHR1cmVkVXBkYXRlKSxiLmZpcnN0Q2FwdHVyZWRVcGRhdGU9Yi5sYXN0Q2FwdHVyZWRVcGRhdGU9bnVsbCk7WmYoYi5maXJzdEVmZmVjdCxjKTtiLmZpcnN0RWZmZWN0PWIubGFzdEVmZmVjdD1udWxsO1pmKGIuZmlyc3RDYXB0dXJlZEVmZmVjdCxjKTtiLmZpcnN0Q2FwdHVyZWRFZmZlY3Q9Yi5sYXN0Q2FwdHVyZWRFZmZlY3Q9bnVsbH1mdW5jdGlvbiBaZihhLGIpe2Zvcig7bnVsbCE9PWE7KXt2YXIgYz1hLmNhbGxiYWNrO2lmKG51bGwhPT1jKXthLmNhbGxiYWNrPW51bGw7dmFyIGQ9YjtpZihcImZ1bmN0aW9uXCIhPT10eXBlb2YgYyl0aHJvdyB0KEVycm9yKDE5MSksYyk7Yy5jYWxsKGQpfWE9YS5uZXh0RWZmZWN0fX1cbnZhciAkZj1YYi5SZWFjdEN1cnJlbnRCYXRjaENvbmZpZyxhZz0obmV3IGFhLkNvbXBvbmVudCkucmVmcztmdW5jdGlvbiBiZyhhLGIsYyxkKXtiPWEubWVtb2l6ZWRTdGF0ZTtjPWMoZCxiKTtjPW51bGw9PT1jfHx2b2lkIDA9PT1jP2I6bSh7fSxiLGMpO2EubWVtb2l6ZWRTdGF0ZT1jO2Q9YS51cGRhdGVRdWV1ZTtudWxsIT09ZCYmMD09PWEuZXhwaXJhdGlvblRpbWUmJihkLmJhc2VTdGF0ZT1jKX1cbnZhciBmZz17aXNNb3VudGVkOmZ1bmN0aW9uKGEpe3JldHVybihhPWEuX3JlYWN0SW50ZXJuYWxGaWJlcik/Mj09PWxkKGEpOiExfSxlbnF1ZXVlU2V0U3RhdGU6ZnVuY3Rpb24oYSxiLGMpe2E9YS5fcmVhY3RJbnRlcm5hbEZpYmVyO3ZhciBkPWNnKCksZT0kZi5zdXNwZW5zZTtkPWRnKGQsYSxlKTtlPVFmKGQsZSk7ZS5wYXlsb2FkPWI7dm9pZCAwIT09YyYmbnVsbCE9PWMmJihlLmNhbGxiYWNrPWMpO1NmKGEsZSk7ZWcoYSxkKX0sZW5xdWV1ZVJlcGxhY2VTdGF0ZTpmdW5jdGlvbihhLGIsYyl7YT1hLl9yZWFjdEludGVybmFsRmliZXI7dmFyIGQ9Y2coKSxlPSRmLnN1c3BlbnNlO2Q9ZGcoZCxhLGUpO2U9UWYoZCxlKTtlLnRhZz0xO2UucGF5bG9hZD1iO3ZvaWQgMCE9PWMmJm51bGwhPT1jJiYoZS5jYWxsYmFjaz1jKTtTZihhLGUpO2VnKGEsZCl9LGVucXVldWVGb3JjZVVwZGF0ZTpmdW5jdGlvbihhLGIpe2E9YS5fcmVhY3RJbnRlcm5hbEZpYmVyO3ZhciBjPWNnKCksZD0kZi5zdXNwZW5zZTtcbmM9ZGcoYyxhLGQpO2Q9UWYoYyxkKTtkLnRhZz0yO3ZvaWQgMCE9PWImJm51bGwhPT1iJiYoZC5jYWxsYmFjaz1iKTtTZihhLGQpO2VnKGEsYyl9fTtmdW5jdGlvbiBnZyhhLGIsYyxkLGUsZixoKXthPWEuc3RhdGVOb2RlO3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBhLnNob3VsZENvbXBvbmVudFVwZGF0ZT9hLnNob3VsZENvbXBvbmVudFVwZGF0ZShkLGYsaCk6Yi5wcm90b3R5cGUmJmIucHJvdG90eXBlLmlzUHVyZVJlYWN0Q29tcG9uZW50PyFqZChjLGQpfHwhamQoZSxmKTohMH1cbmZ1bmN0aW9uIGhnKGEsYixjKXt2YXIgZD0hMSxlPVFlO3ZhciBmPWIuY29udGV4dFR5cGU7XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09Zj9mPU1mKGYpOihlPU4oYik/UmU6TC5jdXJyZW50LGQ9Yi5jb250ZXh0VHlwZXMsZj0oZD1udWxsIT09ZCYmdm9pZCAwIT09ZCk/U2UoYSxlKTpRZSk7Yj1uZXcgYihjLGYpO2EubWVtb2l6ZWRTdGF0ZT1udWxsIT09Yi5zdGF0ZSYmdm9pZCAwIT09Yi5zdGF0ZT9iLnN0YXRlOm51bGw7Yi51cGRhdGVyPWZnO2Euc3RhdGVOb2RlPWI7Yi5fcmVhY3RJbnRlcm5hbEZpYmVyPWE7ZCYmKGE9YS5zdGF0ZU5vZGUsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0PWUsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dD1mKTtyZXR1cm4gYn1cbmZ1bmN0aW9uIGlnKGEsYixjLGQpe2E9Yi5zdGF0ZTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZiLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMoYyxkKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmYi5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhjLGQpO2Iuc3RhdGUhPT1hJiZmZy5lbnF1ZXVlUmVwbGFjZVN0YXRlKGIsYi5zdGF0ZSxudWxsKX1cbmZ1bmN0aW9uIGpnKGEsYixjLGQpe3ZhciBlPWEuc3RhdGVOb2RlO2UucHJvcHM9YztlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZTtlLnJlZnM9YWc7dmFyIGY9Yi5jb250ZXh0VHlwZTtcIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mP2UuY29udGV4dD1NZihmKTooZj1OKGIpP1JlOkwuY3VycmVudCxlLmNvbnRleHQ9U2UoYSxmKSk7Zj1hLnVwZGF0ZVF1ZXVlO251bGwhPT1mJiYoV2YoYSxmLGMsZSxkKSxlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZSk7Zj1iLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcztcImZ1bmN0aW9uXCI9PT10eXBlb2YgZiYmKGJnKGEsYixmLGMpLGUuc3RhdGU9YS5tZW1vaXplZFN0YXRlKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHN8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZS5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZcImZ1bmN0aW9uXCIhPT1cbnR5cGVvZiBlLmNvbXBvbmVudFdpbGxNb3VudHx8KGI9ZS5zdGF0ZSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5jb21wb25lbnRXaWxsTW91bnQmJmUuY29tcG9uZW50V2lsbE1vdW50KCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGUuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmZS5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50KCksYiE9PWUuc3RhdGUmJmZnLmVucXVldWVSZXBsYWNlU3RhdGUoZSxlLnN0YXRlLG51bGwpLGY9YS51cGRhdGVRdWV1ZSxudWxsIT09ZiYmKFdmKGEsZixjLGUsZCksZS5zdGF0ZT1hLm1lbW9pemVkU3RhdGUpKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5jb21wb25lbnREaWRNb3VudCYmKGEuZWZmZWN0VGFnfD00KX12YXIga2c9QXJyYXkuaXNBcnJheTtcbmZ1bmN0aW9uIGxnKGEsYixjKXthPWMucmVmO2lmKG51bGwhPT1hJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYSYmXCJvYmplY3RcIiE9PXR5cGVvZiBhKXtpZihjLl9vd25lcil7Yz1jLl9vd25lcjt2YXIgZD12b2lkIDA7aWYoYyl7aWYoMSE9PWMudGFnKXRocm93IHQoRXJyb3IoMzA5KSk7ZD1jLnN0YXRlTm9kZX1pZighZCl0aHJvdyB0KEVycm9yKDE0NyksYSk7dmFyIGU9XCJcIithO2lmKG51bGwhPT1iJiZudWxsIT09Yi5yZWYmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBiLnJlZiYmYi5yZWYuX3N0cmluZ1JlZj09PWUpcmV0dXJuIGIucmVmO2I9ZnVuY3Rpb24oYSl7dmFyIGI9ZC5yZWZzO2I9PT1hZyYmKGI9ZC5yZWZzPXt9KTtudWxsPT09YT9kZWxldGUgYltlXTpiW2VdPWF9O2IuX3N0cmluZ1JlZj1lO3JldHVybiBifWlmKFwic3RyaW5nXCIhPT10eXBlb2YgYSl0aHJvdyB0KEVycm9yKDI4NCkpO2lmKCFjLl9vd25lcil0aHJvdyB0KEVycm9yKDI5MCksYSk7fXJldHVybiBhfVxuZnVuY3Rpb24gbWcoYSxiKXtpZihcInRleHRhcmVhXCIhPT1hLnR5cGUpdGhyb3cgdChFcnJvcigzMSksXCJbb2JqZWN0IE9iamVjdF1cIj09PU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChiKT9cIm9iamVjdCB3aXRoIGtleXMge1wiK09iamVjdC5rZXlzKGIpLmpvaW4oXCIsIFwiKStcIn1cIjpiLFwiXCIpO31cbmZ1bmN0aW9uIG5nKGEpe2Z1bmN0aW9uIGIoYixjKXtpZihhKXt2YXIgZD1iLmxhc3RFZmZlY3Q7bnVsbCE9PWQ/KGQubmV4dEVmZmVjdD1jLGIubGFzdEVmZmVjdD1jKTpiLmZpcnN0RWZmZWN0PWIubGFzdEVmZmVjdD1jO2MubmV4dEVmZmVjdD1udWxsO2MuZWZmZWN0VGFnPTh9fWZ1bmN0aW9uIGMoYyxkKXtpZighYSlyZXR1cm4gbnVsbDtmb3IoO251bGwhPT1kOyliKGMsZCksZD1kLnNpYmxpbmc7cmV0dXJuIG51bGx9ZnVuY3Rpb24gZChhLGIpe2ZvcihhPW5ldyBNYXA7bnVsbCE9PWI7KW51bGwhPT1iLmtleT9hLnNldChiLmtleSxiKTphLnNldChiLmluZGV4LGIpLGI9Yi5zaWJsaW5nO3JldHVybiBhfWZ1bmN0aW9uIGUoYSxiLGMpe2E9b2coYSxiLGMpO2EuaW5kZXg9MDthLnNpYmxpbmc9bnVsbDtyZXR1cm4gYX1mdW5jdGlvbiBmKGIsYyxkKXtiLmluZGV4PWQ7aWYoIWEpcmV0dXJuIGM7ZD1iLmFsdGVybmF0ZTtpZihudWxsIT09ZClyZXR1cm4gZD1kLmluZGV4LGQ8Yz8oYi5lZmZlY3RUYWc9XG4yLGMpOmQ7Yi5lZmZlY3RUYWc9MjtyZXR1cm4gY31mdW5jdGlvbiBoKGIpe2EmJm51bGw9PT1iLmFsdGVybmF0ZSYmKGIuZWZmZWN0VGFnPTIpO3JldHVybiBifWZ1bmN0aW9uIGcoYSxiLGMsZCl7aWYobnVsbD09PWJ8fDYhPT1iLnRhZylyZXR1cm4gYj1wZyhjLGEubW9kZSxkKSxiLnJldHVybj1hLGI7Yj1lKGIsYyxkKTtiLnJldHVybj1hO3JldHVybiBifWZ1bmN0aW9uIGsoYSxiLGMsZCl7aWYobnVsbCE9PWImJmIuZWxlbWVudFR5cGU9PT1jLnR5cGUpcmV0dXJuIGQ9ZShiLGMucHJvcHMsZCksZC5yZWY9bGcoYSxiLGMpLGQucmV0dXJuPWEsZDtkPXFnKGMudHlwZSxjLmtleSxjLnByb3BzLG51bGwsYS5tb2RlLGQpO2QucmVmPWxnKGEsYixjKTtkLnJldHVybj1hO3JldHVybiBkfWZ1bmN0aW9uIGwoYSxiLGMsZCl7aWYobnVsbD09PWJ8fDQhPT1iLnRhZ3x8Yi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyE9PWMuY29udGFpbmVySW5mb3x8Yi5zdGF0ZU5vZGUuaW1wbGVtZW50YXRpb24hPT1cbmMuaW1wbGVtZW50YXRpb24pcmV0dXJuIGI9cmcoYyxhLm1vZGUsZCksYi5yZXR1cm49YSxiO2I9ZShiLGMuY2hpbGRyZW58fFtdLGQpO2IucmV0dXJuPWE7cmV0dXJuIGJ9ZnVuY3Rpb24gbihhLGIsYyxkLGYpe2lmKG51bGw9PT1ifHw3IT09Yi50YWcpcmV0dXJuIGI9c2coYyxhLm1vZGUsZCxmKSxiLnJldHVybj1hLGI7Yj1lKGIsYyxkKTtiLnJldHVybj1hO3JldHVybiBifWZ1bmN0aW9uIHooYSxiLGMpe2lmKFwic3RyaW5nXCI9PT10eXBlb2YgYnx8XCJudW1iZXJcIj09PXR5cGVvZiBiKXJldHVybiBiPXBnKFwiXCIrYixhLm1vZGUsYyksYi5yZXR1cm49YSxiO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgYiYmbnVsbCE9PWIpe3N3aXRjaChiLiQkdHlwZW9mKXtjYXNlIFpiOnJldHVybiBjPXFnKGIudHlwZSxiLmtleSxiLnByb3BzLG51bGwsYS5tb2RlLGMpLGMucmVmPWxnKGEsbnVsbCxiKSxjLnJldHVybj1hLGM7Y2FzZSAkYjpyZXR1cm4gYj1yZyhiLGEubW9kZSxjKSxiLnJldHVybj1hLGJ9aWYoa2coYil8fFxubWMoYikpcmV0dXJuIGI9c2coYixhLm1vZGUsYyxudWxsKSxiLnJldHVybj1hLGI7bWcoYSxiKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiB4KGEsYixjLGQpe3ZhciBlPW51bGwhPT1iP2Iua2V5Om51bGw7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBjfHxcIm51bWJlclwiPT09dHlwZW9mIGMpcmV0dXJuIG51bGwhPT1lP251bGw6ZyhhLGIsXCJcIitjLGQpO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgYyYmbnVsbCE9PWMpe3N3aXRjaChjLiQkdHlwZW9mKXtjYXNlIFpiOnJldHVybiBjLmtleT09PWU/Yy50eXBlPT09YWM/bihhLGIsYy5wcm9wcy5jaGlsZHJlbixkLGUpOmsoYSxiLGMsZCk6bnVsbDtjYXNlICRiOnJldHVybiBjLmtleT09PWU/bChhLGIsYyxkKTpudWxsfWlmKGtnKGMpfHxtYyhjKSlyZXR1cm4gbnVsbCE9PWU/bnVsbDpuKGEsYixjLGQsbnVsbCk7bWcoYSxjKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiB2KGEsYixjLGQsZSl7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBkfHxcIm51bWJlclwiPT09dHlwZW9mIGQpcmV0dXJuIGE9XG5hLmdldChjKXx8bnVsbCxnKGIsYSxcIlwiK2QsZSk7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBkJiZudWxsIT09ZCl7c3dpdGNoKGQuJCR0eXBlb2Ype2Nhc2UgWmI6cmV0dXJuIGE9YS5nZXQobnVsbD09PWQua2V5P2M6ZC5rZXkpfHxudWxsLGQudHlwZT09PWFjP24oYixhLGQucHJvcHMuY2hpbGRyZW4sZSxkLmtleSk6ayhiLGEsZCxlKTtjYXNlICRiOnJldHVybiBhPWEuZ2V0KG51bGw9PT1kLmtleT9jOmQua2V5KXx8bnVsbCxsKGIsYSxkLGUpfWlmKGtnKGQpfHxtYyhkKSlyZXR1cm4gYT1hLmdldChjKXx8bnVsbCxuKGIsYSxkLGUsbnVsbCk7bWcoYixkKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiByYihlLGgsZyxrKXtmb3IodmFyIGw9bnVsbCx1PW51bGwsbj1oLHc9aD0wLEM9bnVsbDtudWxsIT09biYmdzxnLmxlbmd0aDt3Kyspe24uaW5kZXg+dz8oQz1uLG49bnVsbCk6Qz1uLnNpYmxpbmc7dmFyIHA9eChlLG4sZ1t3XSxrKTtpZihudWxsPT09cCl7bnVsbD09PW4mJihuPUMpO2JyZWFrfWEmJlxubiYmbnVsbD09PXAuYWx0ZXJuYXRlJiZiKGUsbik7aD1mKHAsaCx3KTtudWxsPT09dT9sPXA6dS5zaWJsaW5nPXA7dT1wO249Q31pZih3PT09Zy5sZW5ndGgpcmV0dXJuIGMoZSxuKSxsO2lmKG51bGw9PT1uKXtmb3IoO3c8Zy5sZW5ndGg7dysrKW49eihlLGdbd10sayksbnVsbCE9PW4mJihoPWYobixoLHcpLG51bGw9PT11P2w9bjp1LnNpYmxpbmc9bix1PW4pO3JldHVybiBsfWZvcihuPWQoZSxuKTt3PGcubGVuZ3RoO3crKylDPXYobixlLHcsZ1t3XSxrKSxudWxsIT09QyYmKGEmJm51bGwhPT1DLmFsdGVybmF0ZSYmbi5kZWxldGUobnVsbD09PUMua2V5P3c6Qy5rZXkpLGg9ZihDLGgsdyksbnVsbD09PXU/bD1DOnUuc2libGluZz1DLHU9Qyk7YSYmbi5mb3JFYWNoKGZ1bmN0aW9uKGEpe3JldHVybiBiKGUsYSl9KTtyZXR1cm4gbH1mdW5jdGlvbiBCZShlLGgsZyxrKXt2YXIgbD1tYyhnKTtpZihcImZ1bmN0aW9uXCIhPT10eXBlb2YgbCl0aHJvdyB0KEVycm9yKDE1MCkpO2c9bC5jYWxsKGcpO1xuaWYobnVsbD09Zyl0aHJvdyB0KEVycm9yKDE1MSkpO2Zvcih2YXIgbj1sPW51bGwsdT1oLHc9aD0wLEM9bnVsbCxwPWcubmV4dCgpO251bGwhPT11JiYhcC5kb25lO3crKyxwPWcubmV4dCgpKXt1LmluZGV4Pnc/KEM9dSx1PW51bGwpOkM9dS5zaWJsaW5nO3ZhciByPXgoZSx1LHAudmFsdWUsayk7aWYobnVsbD09PXIpe251bGw9PT11JiYodT1DKTticmVha31hJiZ1JiZudWxsPT09ci5hbHRlcm5hdGUmJmIoZSx1KTtoPWYocixoLHcpO251bGw9PT1uP2w9cjpuLnNpYmxpbmc9cjtuPXI7dT1DfWlmKHAuZG9uZSlyZXR1cm4gYyhlLHUpLGw7aWYobnVsbD09PXUpe2Zvcig7IXAuZG9uZTt3KysscD1nLm5leHQoKSlwPXooZSxwLnZhbHVlLGspLG51bGwhPT1wJiYoaD1mKHAsaCx3KSxudWxsPT09bj9sPXA6bi5zaWJsaW5nPXAsbj1wKTtyZXR1cm4gbH1mb3IodT1kKGUsdSk7IXAuZG9uZTt3KysscD1nLm5leHQoKSlwPXYodSxlLHcscC52YWx1ZSxrKSxudWxsIT09cCYmKGEmJm51bGwhPT1cbnAuYWx0ZXJuYXRlJiZ1LmRlbGV0ZShudWxsPT09cC5rZXk/dzpwLmtleSksaD1mKHAsaCx3KSxudWxsPT09bj9sPXA6bi5zaWJsaW5nPXAsbj1wKTthJiZ1LmZvckVhY2goZnVuY3Rpb24oYSl7cmV0dXJuIGIoZSxhKX0pO3JldHVybiBsfXJldHVybiBmdW5jdGlvbihhLGQsZixnKXt2YXIgaz1cIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mJiZmLnR5cGU9PT1hYyYmbnVsbD09PWYua2V5O2smJihmPWYucHJvcHMuY2hpbGRyZW4pO3ZhciBsPVwib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWY7aWYobClzd2l0Y2goZi4kJHR5cGVvZil7Y2FzZSBaYjphOntsPWYua2V5O2ZvcihrPWQ7bnVsbCE9PWs7KXtpZihrLmtleT09PWwpe2lmKDc9PT1rLnRhZz9mLnR5cGU9PT1hYzprLmVsZW1lbnRUeXBlPT09Zi50eXBlKXtjKGEsay5zaWJsaW5nKTtkPWUoayxmLnR5cGU9PT1hYz9mLnByb3BzLmNoaWxkcmVuOmYucHJvcHMsZyk7ZC5yZWY9bGcoYSxrLGYpO2QucmV0dXJuPWE7YT1kO2JyZWFrIGF9YyhhLFxuayk7YnJlYWt9ZWxzZSBiKGEsayk7az1rLnNpYmxpbmd9Zi50eXBlPT09YWM/KGQ9c2coZi5wcm9wcy5jaGlsZHJlbixhLm1vZGUsZyxmLmtleSksZC5yZXR1cm49YSxhPWQpOihnPXFnKGYudHlwZSxmLmtleSxmLnByb3BzLG51bGwsYS5tb2RlLGcpLGcucmVmPWxnKGEsZCxmKSxnLnJldHVybj1hLGE9Zyl9cmV0dXJuIGgoYSk7Y2FzZSAkYjphOntmb3Ioaz1mLmtleTtudWxsIT09ZDspe2lmKGQua2V5PT09ayl7aWYoND09PWQudGFnJiZkLnN0YXRlTm9kZS5jb250YWluZXJJbmZvPT09Zi5jb250YWluZXJJbmZvJiZkLnN0YXRlTm9kZS5pbXBsZW1lbnRhdGlvbj09PWYuaW1wbGVtZW50YXRpb24pe2MoYSxkLnNpYmxpbmcpO2Q9ZShkLGYuY2hpbGRyZW58fFtdLGcpO2QucmV0dXJuPWE7YT1kO2JyZWFrIGF9YyhhLGQpO2JyZWFrfWVsc2UgYihhLGQpO2Q9ZC5zaWJsaW5nfWQ9cmcoZixhLm1vZGUsZyk7ZC5yZXR1cm49YTthPWR9cmV0dXJuIGgoYSl9aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBmfHxcblwibnVtYmVyXCI9PT10eXBlb2YgZilyZXR1cm4gZj1cIlwiK2YsbnVsbCE9PWQmJjY9PT1kLnRhZz8oYyhhLGQuc2libGluZyksZD1lKGQsZixnKSxkLnJldHVybj1hLGE9ZCk6KGMoYSxkKSxkPXBnKGYsYS5tb2RlLGcpLGQucmV0dXJuPWEsYT1kKSxoKGEpO2lmKGtnKGYpKXJldHVybiByYihhLGQsZixnKTtpZihtYyhmKSlyZXR1cm4gQmUoYSxkLGYsZyk7bCYmbWcoYSxmKTtpZihcInVuZGVmaW5lZFwiPT09dHlwZW9mIGYmJiFrKXN3aXRjaChhLnRhZyl7Y2FzZSAxOmNhc2UgMDp0aHJvdyBhPWEudHlwZSx0KEVycm9yKDE1MiksYS5kaXNwbGF5TmFtZXx8YS5uYW1lfHxcIkNvbXBvbmVudFwiKTt9cmV0dXJuIGMoYSxkKX19dmFyIHRnPW5nKCEwKSx1Zz1uZyghMSksdmc9e30sd2c9e2N1cnJlbnQ6dmd9LHhnPXtjdXJyZW50OnZnfSx5Zz17Y3VycmVudDp2Z307ZnVuY3Rpb24gemcoYSl7aWYoYT09PXZnKXRocm93IHQoRXJyb3IoMTc0KSk7cmV0dXJuIGF9XG5mdW5jdGlvbiBBZyhhLGIpe0ooeWcsYixhKTtKKHhnLGEsYSk7Sih3Zyx2ZyxhKTt2YXIgYz1iLm5vZGVUeXBlO3N3aXRjaChjKXtjYXNlIDk6Y2FzZSAxMTpiPShiPWIuZG9jdW1lbnRFbGVtZW50KT9iLm5hbWVzcGFjZVVSSTp0ZShudWxsLFwiXCIpO2JyZWFrO2RlZmF1bHQ6Yz04PT09Yz9iLnBhcmVudE5vZGU6YixiPWMubmFtZXNwYWNlVVJJfHxudWxsLGM9Yy50YWdOYW1lLGI9dGUoYixjKX1IKHdnLGEpO0ood2csYixhKX1mdW5jdGlvbiBCZyhhKXtIKHdnLGEpO0goeGcsYSk7SCh5ZyxhKX1mdW5jdGlvbiBDZyhhKXt6Zyh5Zy5jdXJyZW50KTt2YXIgYj16Zyh3Zy5jdXJyZW50KTt2YXIgYz10ZShiLGEudHlwZSk7YiE9PWMmJihKKHhnLGEsYSksSih3ZyxjLGEpKX1mdW5jdGlvbiBEZyhhKXt4Zy5jdXJyZW50PT09YSYmKEgod2csYSksSCh4ZyxhKSl9dmFyIEVnPTEsRmc9MSxHZz0yLFA9e2N1cnJlbnQ6MH07XG5mdW5jdGlvbiBIZyhhKXtmb3IodmFyIGI9YTtudWxsIT09Yjspe2lmKDEzPT09Yi50YWcpe2lmKG51bGwhPT1iLm1lbW9pemVkU3RhdGUpcmV0dXJuIGJ9ZWxzZSBpZigxOT09PWIudGFnJiZ2b2lkIDAhPT1iLm1lbW9pemVkUHJvcHMucmV2ZWFsT3JkZXIpe2lmKDAhPT0oYi5lZmZlY3RUYWcmNjQpKXJldHVybiBifWVsc2UgaWYobnVsbCE9PWIuY2hpbGQpe2IuY2hpbGQucmV0dXJuPWI7Yj1iLmNoaWxkO2NvbnRpbnVlfWlmKGI9PT1hKWJyZWFrO2Zvcig7bnVsbD09PWIuc2libGluZzspe2lmKG51bGw9PT1iLnJldHVybnx8Yi5yZXR1cm49PT1hKXJldHVybiBudWxsO2I9Yi5yZXR1cm59Yi5zaWJsaW5nLnJldHVybj1iLnJldHVybjtiPWIuc2libGluZ31yZXR1cm4gbnVsbH1cbnZhciBJZz0wLEpnPTIsS2c9NCxMZz04LE1nPTE2LE5nPTMyLE9nPTY0LFBnPTEyOCxRZz1YYi5SZWFjdEN1cnJlbnREaXNwYXRjaGVyLFJnPTAsU2c9bnVsbCxRPW51bGwsVGc9bnVsbCxVZz1udWxsLFI9bnVsbCxWZz1udWxsLFdnPTAsWGc9bnVsbCxZZz0wLFpnPSExLCRnPW51bGwsYWg9MDtmdW5jdGlvbiBiaCgpe3Rocm93IHQoRXJyb3IoMzIxKSk7fWZ1bmN0aW9uIGNoKGEsYil7aWYobnVsbD09PWIpcmV0dXJuITE7Zm9yKHZhciBjPTA7YzxiLmxlbmd0aCYmYzxhLmxlbmd0aDtjKyspaWYoIWhkKGFbY10sYltjXSkpcmV0dXJuITE7cmV0dXJuITB9XG5mdW5jdGlvbiBkaChhLGIsYyxkLGUsZil7Umc9ZjtTZz1iO1RnPW51bGwhPT1hP2EubWVtb2l6ZWRTdGF0ZTpudWxsO1FnLmN1cnJlbnQ9bnVsbD09PVRnP2VoOmZoO2I9YyhkLGUpO2lmKFpnKXtkbyBaZz0hMSxhaCs9MSxUZz1udWxsIT09YT9hLm1lbW9pemVkU3RhdGU6bnVsbCxWZz1VZyxYZz1SPVE9bnVsbCxRZy5jdXJyZW50PWZoLGI9YyhkLGUpO3doaWxlKFpnKTskZz1udWxsO2FoPTB9UWcuY3VycmVudD1oaDthPVNnO2EubWVtb2l6ZWRTdGF0ZT1VZzthLmV4cGlyYXRpb25UaW1lPVdnO2EudXBkYXRlUXVldWU9WGc7YS5lZmZlY3RUYWd8PVlnO2E9bnVsbCE9PVEmJm51bGwhPT1RLm5leHQ7Umc9MDtWZz1SPVVnPVRnPVE9U2c9bnVsbDtXZz0wO1hnPW51bGw7WWc9MDtpZihhKXRocm93IHQoRXJyb3IoMzAwKSk7cmV0dXJuIGJ9XG5mdW5jdGlvbiBpaCgpe1FnLmN1cnJlbnQ9aGg7Umc9MDtWZz1SPVVnPVRnPVE9U2c9bnVsbDtXZz0wO1hnPW51bGw7WWc9MDtaZz0hMTskZz1udWxsO2FoPTB9ZnVuY3Rpb24gamgoKXt2YXIgYT17bWVtb2l6ZWRTdGF0ZTpudWxsLGJhc2VTdGF0ZTpudWxsLHF1ZXVlOm51bGwsYmFzZVVwZGF0ZTpudWxsLG5leHQ6bnVsbH07bnVsbD09PVI/VWc9Uj1hOlI9Ui5uZXh0PWE7cmV0dXJuIFJ9ZnVuY3Rpb24ga2goKXtpZihudWxsIT09VmcpUj1WZyxWZz1SLm5leHQsUT1UZyxUZz1udWxsIT09UT9RLm5leHQ6bnVsbDtlbHNle2lmKG51bGw9PT1UZyl0aHJvdyB0KEVycm9yKDMxMCkpO1E9VGc7dmFyIGE9e21lbW9pemVkU3RhdGU6US5tZW1vaXplZFN0YXRlLGJhc2VTdGF0ZTpRLmJhc2VTdGF0ZSxxdWV1ZTpRLnF1ZXVlLGJhc2VVcGRhdGU6US5iYXNlVXBkYXRlLG5leHQ6bnVsbH07Uj1udWxsPT09Uj9VZz1hOlIubmV4dD1hO1RnPVEubmV4dH1yZXR1cm4gUn1cbmZ1bmN0aW9uIGxoKGEsYil7cmV0dXJuXCJmdW5jdGlvblwiPT09dHlwZW9mIGI/YihhKTpifVxuZnVuY3Rpb24gbWgoYSl7dmFyIGI9a2goKSxjPWIucXVldWU7aWYobnVsbD09PWMpdGhyb3cgdChFcnJvcigzMTEpKTtjLmxhc3RSZW5kZXJlZFJlZHVjZXI9YTtpZigwPGFoKXt2YXIgZD1jLmRpc3BhdGNoO2lmKG51bGwhPT0kZyl7dmFyIGU9JGcuZ2V0KGMpO2lmKHZvaWQgMCE9PWUpeyRnLmRlbGV0ZShjKTt2YXIgZj1iLm1lbW9pemVkU3RhdGU7ZG8gZj1hKGYsZS5hY3Rpb24pLGU9ZS5uZXh0O3doaWxlKG51bGwhPT1lKTtoZChmLGIubWVtb2l6ZWRTdGF0ZSl8fChMZj0hMCk7Yi5tZW1vaXplZFN0YXRlPWY7Yi5iYXNlVXBkYXRlPT09Yy5sYXN0JiYoYi5iYXNlU3RhdGU9Zik7Yy5sYXN0UmVuZGVyZWRTdGF0ZT1mO3JldHVybltmLGRdfX1yZXR1cm5bYi5tZW1vaXplZFN0YXRlLGRdfWQ9Yy5sYXN0O3ZhciBoPWIuYmFzZVVwZGF0ZTtmPWIuYmFzZVN0YXRlO251bGwhPT1oPyhudWxsIT09ZCYmKGQubmV4dD1udWxsKSxkPWgubmV4dCk6ZD1udWxsIT09ZD9kLm5leHQ6bnVsbDtpZihudWxsIT09XG5kKXt2YXIgZz1lPW51bGwsaz1kLGw9ITE7ZG97dmFyIG49ay5leHBpcmF0aW9uVGltZTtuPFJnPyhsfHwobD0hMCxnPWgsZT1mKSxuPldnJiYoV2c9bikpOihYZihuLGsuc3VzcGVuc2VDb25maWcpLGY9ay5lYWdlclJlZHVjZXI9PT1hP2suZWFnZXJTdGF0ZTphKGYsay5hY3Rpb24pKTtoPWs7az1rLm5leHR9d2hpbGUobnVsbCE9PWsmJmshPT1kKTtsfHwoZz1oLGU9Zik7aGQoZixiLm1lbW9pemVkU3RhdGUpfHwoTGY9ITApO2IubWVtb2l6ZWRTdGF0ZT1mO2IuYmFzZVVwZGF0ZT1nO2IuYmFzZVN0YXRlPWU7Yy5sYXN0UmVuZGVyZWRTdGF0ZT1mfXJldHVybltiLm1lbW9pemVkU3RhdGUsYy5kaXNwYXRjaF19XG5mdW5jdGlvbiBuaChhLGIsYyxkKXthPXt0YWc6YSxjcmVhdGU6YixkZXN0cm95OmMsZGVwczpkLG5leHQ6bnVsbH07bnVsbD09PVhnPyhYZz17bGFzdEVmZmVjdDpudWxsfSxYZy5sYXN0RWZmZWN0PWEubmV4dD1hKTooYj1YZy5sYXN0RWZmZWN0LG51bGw9PT1iP1hnLmxhc3RFZmZlY3Q9YS5uZXh0PWE6KGM9Yi5uZXh0LGIubmV4dD1hLGEubmV4dD1jLFhnLmxhc3RFZmZlY3Q9YSkpO3JldHVybiBhfWZ1bmN0aW9uIG9oKGEsYixjLGQpe3ZhciBlPWpoKCk7WWd8PWE7ZS5tZW1vaXplZFN0YXRlPW5oKGIsYyx2b2lkIDAsdm9pZCAwPT09ZD9udWxsOmQpfVxuZnVuY3Rpb24gcGgoYSxiLGMsZCl7dmFyIGU9a2goKTtkPXZvaWQgMD09PWQ/bnVsbDpkO3ZhciBmPXZvaWQgMDtpZihudWxsIT09USl7dmFyIGg9US5tZW1vaXplZFN0YXRlO2Y9aC5kZXN0cm95O2lmKG51bGwhPT1kJiZjaChkLGguZGVwcykpe25oKElnLGMsZixkKTtyZXR1cm59fVlnfD1hO2UubWVtb2l6ZWRTdGF0ZT1uaChiLGMsZixkKX1mdW5jdGlvbiBxaChhLGIpe2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBiKXJldHVybiBhPWEoKSxiKGEpLGZ1bmN0aW9uKCl7YihudWxsKX07aWYobnVsbCE9PWImJnZvaWQgMCE9PWIpcmV0dXJuIGE9YSgpLGIuY3VycmVudD1hLGZ1bmN0aW9uKCl7Yi5jdXJyZW50PW51bGx9fWZ1bmN0aW9uIHJoKCl7fVxuZnVuY3Rpb24gc2goYSxiLGMpe2lmKCEoMjU+YWgpKXRocm93IHQoRXJyb3IoMzAxKSk7dmFyIGQ9YS5hbHRlcm5hdGU7aWYoYT09PVNnfHxudWxsIT09ZCYmZD09PVNnKWlmKFpnPSEwLGE9e2V4cGlyYXRpb25UaW1lOlJnLHN1c3BlbnNlQ29uZmlnOm51bGwsYWN0aW9uOmMsZWFnZXJSZWR1Y2VyOm51bGwsZWFnZXJTdGF0ZTpudWxsLG5leHQ6bnVsbH0sbnVsbD09PSRnJiYoJGc9bmV3IE1hcCksYz0kZy5nZXQoYiksdm9pZCAwPT09YykkZy5zZXQoYixhKTtlbHNle2ZvcihiPWM7bnVsbCE9PWIubmV4dDspYj1iLm5leHQ7Yi5uZXh0PWF9ZWxzZXt2YXIgZT1jZygpLGY9JGYuc3VzcGVuc2U7ZT1kZyhlLGEsZik7Zj17ZXhwaXJhdGlvblRpbWU6ZSxzdXNwZW5zZUNvbmZpZzpmLGFjdGlvbjpjLGVhZ2VyUmVkdWNlcjpudWxsLGVhZ2VyU3RhdGU6bnVsbCxuZXh0Om51bGx9O3ZhciBoPWIubGFzdDtpZihudWxsPT09aClmLm5leHQ9ZjtlbHNle3ZhciBnPWgubmV4dDtudWxsIT09ZyYmXG4oZi5uZXh0PWcpO2gubmV4dD1mfWIubGFzdD1mO2lmKDA9PT1hLmV4cGlyYXRpb25UaW1lJiYobnVsbD09PWR8fDA9PT1kLmV4cGlyYXRpb25UaW1lKSYmKGQ9Yi5sYXN0UmVuZGVyZWRSZWR1Y2VyLG51bGwhPT1kKSl0cnl7dmFyIGs9Yi5sYXN0UmVuZGVyZWRTdGF0ZSxsPWQoayxjKTtmLmVhZ2VyUmVkdWNlcj1kO2YuZWFnZXJTdGF0ZT1sO2lmKGhkKGwsaykpcmV0dXJufWNhdGNoKG4pe31maW5hbGx5e31lZyhhLGUpfX1cbnZhciBoaD17cmVhZENvbnRleHQ6TWYsdXNlQ2FsbGJhY2s6YmgsdXNlQ29udGV4dDpiaCx1c2VFZmZlY3Q6YmgsdXNlSW1wZXJhdGl2ZUhhbmRsZTpiaCx1c2VMYXlvdXRFZmZlY3Q6YmgsdXNlTWVtbzpiaCx1c2VSZWR1Y2VyOmJoLHVzZVJlZjpiaCx1c2VTdGF0ZTpiaCx1c2VEZWJ1Z1ZhbHVlOmJoLHVzZVJlc3BvbmRlcjpiaH0sZWg9e3JlYWRDb250ZXh0Ok1mLHVzZUNhbGxiYWNrOmZ1bmN0aW9uKGEsYil7amgoKS5tZW1vaXplZFN0YXRlPVthLHZvaWQgMD09PWI/bnVsbDpiXTtyZXR1cm4gYX0sdXNlQ29udGV4dDpNZix1c2VFZmZlY3Q6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gb2goNTE2LFBnfE9nLGEsYil9LHVzZUltcGVyYXRpdmVIYW5kbGU6ZnVuY3Rpb24oYSxiLGMpe2M9bnVsbCE9PWMmJnZvaWQgMCE9PWM/Yy5jb25jYXQoW2FdKTpudWxsO3JldHVybiBvaCg0LEtnfE5nLHFoLmJpbmQobnVsbCxiLGEpLGMpfSx1c2VMYXlvdXRFZmZlY3Q6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gb2goNCxcbktnfE5nLGEsYil9LHVzZU1lbW86ZnVuY3Rpb24oYSxiKXt2YXIgYz1qaCgpO2I9dm9pZCAwPT09Yj9udWxsOmI7YT1hKCk7Yy5tZW1vaXplZFN0YXRlPVthLGJdO3JldHVybiBhfSx1c2VSZWR1Y2VyOmZ1bmN0aW9uKGEsYixjKXt2YXIgZD1qaCgpO2I9dm9pZCAwIT09Yz9jKGIpOmI7ZC5tZW1vaXplZFN0YXRlPWQuYmFzZVN0YXRlPWI7YT1kLnF1ZXVlPXtsYXN0Om51bGwsZGlzcGF0Y2g6bnVsbCxsYXN0UmVuZGVyZWRSZWR1Y2VyOmEsbGFzdFJlbmRlcmVkU3RhdGU6Yn07YT1hLmRpc3BhdGNoPXNoLmJpbmQobnVsbCxTZyxhKTtyZXR1cm5bZC5tZW1vaXplZFN0YXRlLGFdfSx1c2VSZWY6ZnVuY3Rpb24oYSl7dmFyIGI9amgoKTthPXtjdXJyZW50OmF9O3JldHVybiBiLm1lbW9pemVkU3RhdGU9YX0sdXNlU3RhdGU6ZnVuY3Rpb24oYSl7dmFyIGI9amgoKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSYmKGE9YSgpKTtiLm1lbW9pemVkU3RhdGU9Yi5iYXNlU3RhdGU9YTthPWIucXVldWU9XG57bGFzdDpudWxsLGRpc3BhdGNoOm51bGwsbGFzdFJlbmRlcmVkUmVkdWNlcjpsaCxsYXN0UmVuZGVyZWRTdGF0ZTphfTthPWEuZGlzcGF0Y2g9c2guYmluZChudWxsLFNnLGEpO3JldHVybltiLm1lbW9pemVkU3RhdGUsYV19LHVzZURlYnVnVmFsdWU6cmgsdXNlUmVzcG9uZGVyOmtkfSxmaD17cmVhZENvbnRleHQ6TWYsdXNlQ2FsbGJhY2s6ZnVuY3Rpb24oYSxiKXt2YXIgYz1raCgpO2I9dm9pZCAwPT09Yj9udWxsOmI7dmFyIGQ9Yy5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1kJiZudWxsIT09YiYmY2goYixkWzFdKSlyZXR1cm4gZFswXTtjLm1lbW9pemVkU3RhdGU9W2EsYl07cmV0dXJuIGF9LHVzZUNvbnRleHQ6TWYsdXNlRWZmZWN0OmZ1bmN0aW9uKGEsYil7cmV0dXJuIHBoKDUxNixQZ3xPZyxhLGIpfSx1c2VJbXBlcmF0aXZlSGFuZGxlOmZ1bmN0aW9uKGEsYixjKXtjPW51bGwhPT1jJiZ2b2lkIDAhPT1jP2MuY29uY2F0KFthXSk6bnVsbDtyZXR1cm4gcGgoNCxLZ3xOZyxxaC5iaW5kKG51bGwsXG5iLGEpLGMpfSx1c2VMYXlvdXRFZmZlY3Q6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gcGgoNCxLZ3xOZyxhLGIpfSx1c2VNZW1vOmZ1bmN0aW9uKGEsYil7dmFyIGM9a2goKTtiPXZvaWQgMD09PWI/bnVsbDpiO3ZhciBkPWMubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09ZCYmbnVsbCE9PWImJmNoKGIsZFsxXSkpcmV0dXJuIGRbMF07YT1hKCk7Yy5tZW1vaXplZFN0YXRlPVthLGJdO3JldHVybiBhfSx1c2VSZWR1Y2VyOm1oLHVzZVJlZjpmdW5jdGlvbigpe3JldHVybiBraCgpLm1lbW9pemVkU3RhdGV9LHVzZVN0YXRlOmZ1bmN0aW9uKGEpe3JldHVybiBtaChsaCxhKX0sdXNlRGVidWdWYWx1ZTpyaCx1c2VSZXNwb25kZXI6a2R9LHRoPW51bGwsdWg9bnVsbCx2aD0hMTtcbmZ1bmN0aW9uIHdoKGEsYil7dmFyIGM9eGgoNSxudWxsLG51bGwsMCk7Yy5lbGVtZW50VHlwZT1cIkRFTEVURURcIjtjLnR5cGU9XCJERUxFVEVEXCI7Yy5zdGF0ZU5vZGU9YjtjLnJldHVybj1hO2MuZWZmZWN0VGFnPTg7bnVsbCE9PWEubGFzdEVmZmVjdD8oYS5sYXN0RWZmZWN0Lm5leHRFZmZlY3Q9YyxhLmxhc3RFZmZlY3Q9Yyk6YS5maXJzdEVmZmVjdD1hLmxhc3RFZmZlY3Q9Y31mdW5jdGlvbiB5aChhLGIpe3N3aXRjaChhLnRhZyl7Y2FzZSA1OnZhciBjPWEudHlwZTtiPTEhPT1iLm5vZGVUeXBlfHxjLnRvTG93ZXJDYXNlKCkhPT1iLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk/bnVsbDpiO3JldHVybiBudWxsIT09Yj8oYS5zdGF0ZU5vZGU9YiwhMCk6ITE7Y2FzZSA2OnJldHVybiBiPVwiXCI9PT1hLnBlbmRpbmdQcm9wc3x8MyE9PWIubm9kZVR5cGU/bnVsbDpiLG51bGwhPT1iPyhhLnN0YXRlTm9kZT1iLCEwKTohMTtjYXNlIDEzOnJldHVybiExO2RlZmF1bHQ6cmV0dXJuITF9fVxuZnVuY3Rpb24gemgoYSl7aWYodmgpe3ZhciBiPXVoO2lmKGIpe3ZhciBjPWI7aWYoIXloKGEsYikpe2I9TmUoYy5uZXh0U2libGluZyk7aWYoIWJ8fCF5aChhLGIpKXthLmVmZmVjdFRhZ3w9Mjt2aD0hMTt0aD1hO3JldHVybn13aCh0aCxjKX10aD1hO3VoPU5lKGIuZmlyc3RDaGlsZCl9ZWxzZSBhLmVmZmVjdFRhZ3w9Mix2aD0hMSx0aD1hfX1mdW5jdGlvbiBBaChhKXtmb3IoYT1hLnJldHVybjtudWxsIT09YSYmNSE9PWEudGFnJiYzIT09YS50YWcmJjE4IT09YS50YWc7KWE9YS5yZXR1cm47dGg9YX1cbmZ1bmN0aW9uIEJoKGEpe2lmKGEhPT10aClyZXR1cm4hMTtpZighdmgpcmV0dXJuIEFoKGEpLHZoPSEwLCExO3ZhciBiPWEudHlwZTtpZig1IT09YS50YWd8fFwiaGVhZFwiIT09YiYmXCJib2R5XCIhPT1iJiYhS2UoYixhLm1lbW9pemVkUHJvcHMpKWZvcihiPXVoO2I7KXdoKGEsYiksYj1OZShiLm5leHRTaWJsaW5nKTtBaChhKTt1aD10aD9OZShhLnN0YXRlTm9kZS5uZXh0U2libGluZyk6bnVsbDtyZXR1cm4hMH1mdW5jdGlvbiBDaCgpe3VoPXRoPW51bGw7dmg9ITF9dmFyIERoPVhiLlJlYWN0Q3VycmVudE93bmVyLExmPSExO2Z1bmN0aW9uIFMoYSxiLGMsZCl7Yi5jaGlsZD1udWxsPT09YT91ZyhiLG51bGwsYyxkKTp0ZyhiLGEuY2hpbGQsYyxkKX1cbmZ1bmN0aW9uIEVoKGEsYixjLGQsZSl7Yz1jLnJlbmRlcjt2YXIgZj1iLnJlZjtLZihiLGUpO2Q9ZGgoYSxiLGMsZCxmLGUpO2lmKG51bGwhPT1hJiYhTGYpcmV0dXJuIGIudXBkYXRlUXVldWU9YS51cGRhdGVRdWV1ZSxiLmVmZmVjdFRhZyY9LTUxNyxhLmV4cGlyYXRpb25UaW1lPD1lJiYoYS5leHBpcmF0aW9uVGltZT0wKSxGaChhLGIsZSk7Yi5lZmZlY3RUYWd8PTE7UyhhLGIsZCxlKTtyZXR1cm4gYi5jaGlsZH1cbmZ1bmN0aW9uIEdoKGEsYixjLGQsZSxmKXtpZihudWxsPT09YSl7dmFyIGg9Yy50eXBlO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBoJiYhSGgoaCkmJnZvaWQgMD09PWguZGVmYXVsdFByb3BzJiZudWxsPT09Yy5jb21wYXJlJiZ2b2lkIDA9PT1jLmRlZmF1bHRQcm9wcylyZXR1cm4gYi50YWc9MTUsYi50eXBlPWgsSWgoYSxiLGgsZCxlLGYpO2E9cWcoYy50eXBlLG51bGwsZCxudWxsLGIubW9kZSxmKTthLnJlZj1iLnJlZjthLnJldHVybj1iO3JldHVybiBiLmNoaWxkPWF9aD1hLmNoaWxkO2lmKGU8ZiYmKGU9aC5tZW1vaXplZFByb3BzLGM9Yy5jb21wYXJlLGM9bnVsbCE9PWM/YzpqZCxjKGUsZCkmJmEucmVmPT09Yi5yZWYpKXJldHVybiBGaChhLGIsZik7Yi5lZmZlY3RUYWd8PTE7YT1vZyhoLGQsZik7YS5yZWY9Yi5yZWY7YS5yZXR1cm49YjtyZXR1cm4gYi5jaGlsZD1hfVxuZnVuY3Rpb24gSWgoYSxiLGMsZCxlLGYpe3JldHVybiBudWxsIT09YSYmamQoYS5tZW1vaXplZFByb3BzLGQpJiZhLnJlZj09PWIucmVmJiYoTGY9ITEsZTxmKT9GaChhLGIsZik6SmgoYSxiLGMsZCxmKX1mdW5jdGlvbiBLaChhLGIpe3ZhciBjPWIucmVmO2lmKG51bGw9PT1hJiZudWxsIT09Y3x8bnVsbCE9PWEmJmEucmVmIT09YyliLmVmZmVjdFRhZ3w9MTI4fWZ1bmN0aW9uIEpoKGEsYixjLGQsZSl7dmFyIGY9TihjKT9SZTpMLmN1cnJlbnQ7Zj1TZShiLGYpO0tmKGIsZSk7Yz1kaChhLGIsYyxkLGYsZSk7aWYobnVsbCE9PWEmJiFMZilyZXR1cm4gYi51cGRhdGVRdWV1ZT1hLnVwZGF0ZVF1ZXVlLGIuZWZmZWN0VGFnJj0tNTE3LGEuZXhwaXJhdGlvblRpbWU8PWUmJihhLmV4cGlyYXRpb25UaW1lPTApLEZoKGEsYixlKTtiLmVmZmVjdFRhZ3w9MTtTKGEsYixjLGUpO3JldHVybiBiLmNoaWxkfVxuZnVuY3Rpb24gTGgoYSxiLGMsZCxlKXtpZihOKGMpKXt2YXIgZj0hMDtYZShiKX1lbHNlIGY9ITE7S2YoYixlKTtpZihudWxsPT09Yi5zdGF0ZU5vZGUpbnVsbCE9PWEmJihhLmFsdGVybmF0ZT1udWxsLGIuYWx0ZXJuYXRlPW51bGwsYi5lZmZlY3RUYWd8PTIpLGhnKGIsYyxkLGUpLGpnKGIsYyxkLGUpLGQ9ITA7ZWxzZSBpZihudWxsPT09YSl7dmFyIGg9Yi5zdGF0ZU5vZGUsZz1iLm1lbW9pemVkUHJvcHM7aC5wcm9wcz1nO3ZhciBrPWguY29udGV4dCxsPWMuY29udGV4dFR5cGU7XCJvYmplY3RcIj09PXR5cGVvZiBsJiZudWxsIT09bD9sPU1mKGwpOihsPU4oYyk/UmU6TC5jdXJyZW50LGw9U2UoYixsKSk7dmFyIG49Yy5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMsej1cImZ1bmN0aW9uXCI9PT10eXBlb2Ygbnx8XCJmdW5jdGlvblwiPT09dHlwZW9mIGguZ2V0U25hcHNob3RCZWZvcmVVcGRhdGU7enx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGguVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJlxuXCJmdW5jdGlvblwiIT09dHlwZW9mIGguY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wc3x8KGchPT1kfHxrIT09bCkmJmlnKGIsaCxkLGwpO05mPSExO3ZhciB4PWIubWVtb2l6ZWRTdGF0ZTtrPWguc3RhdGU9eDt2YXIgdj1iLnVwZGF0ZVF1ZXVlO251bGwhPT12JiYoV2YoYix2LGQsaCxlKSxrPWIubWVtb2l6ZWRTdGF0ZSk7ZyE9PWR8fHghPT1rfHxNLmN1cnJlbnR8fE5mPyhcImZ1bmN0aW9uXCI9PT10eXBlb2YgbiYmKGJnKGIsYyxuLGQpLGs9Yi5tZW1vaXplZFN0YXRlKSwoZz1OZnx8Z2coYixjLGcsZCx4LGssbCkpPyh6fHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgaC5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgaC5jb21wb25lbnRXaWxsTW91bnR8fChcImZ1bmN0aW9uXCI9PT10eXBlb2YgaC5jb21wb25lbnRXaWxsTW91bnQmJmguY29tcG9uZW50V2lsbE1vdW50KCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGguVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmXG5oLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQoKSksXCJmdW5jdGlvblwiPT09dHlwZW9mIGguY29tcG9uZW50RGlkTW91bnQmJihiLmVmZmVjdFRhZ3w9NCkpOihcImZ1bmN0aW9uXCI9PT10eXBlb2YgaC5jb21wb25lbnREaWRNb3VudCYmKGIuZWZmZWN0VGFnfD00KSxiLm1lbW9pemVkUHJvcHM9ZCxiLm1lbW9pemVkU3RhdGU9ayksaC5wcm9wcz1kLGguc3RhdGU9ayxoLmNvbnRleHQ9bCxkPWcpOihcImZ1bmN0aW9uXCI9PT10eXBlb2YgaC5jb21wb25lbnREaWRNb3VudCYmKGIuZWZmZWN0VGFnfD00KSxkPSExKX1lbHNlIGg9Yi5zdGF0ZU5vZGUsZz1iLm1lbW9pemVkUHJvcHMsaC5wcm9wcz1iLnR5cGU9PT1iLmVsZW1lbnRUeXBlP2c6QWYoYi50eXBlLGcpLGs9aC5jb250ZXh0LGw9Yy5jb250ZXh0VHlwZSxcIm9iamVjdFwiPT09dHlwZW9mIGwmJm51bGwhPT1sP2w9TWYobCk6KGw9TihjKT9SZTpMLmN1cnJlbnQsbD1TZShiLGwpKSxuPWMuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzLCh6PVxuXCJmdW5jdGlvblwiPT09dHlwZW9mIG58fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBoLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlKXx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGguVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBoLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHN8fChnIT09ZHx8ayE9PWwpJiZpZyhiLGgsZCxsKSxOZj0hMSxrPWIubWVtb2l6ZWRTdGF0ZSx4PWguc3RhdGU9ayx2PWIudXBkYXRlUXVldWUsbnVsbCE9PXYmJihXZihiLHYsZCxoLGUpLHg9Yi5tZW1vaXplZFN0YXRlKSxnIT09ZHx8ayE9PXh8fE0uY3VycmVudHx8TmY/KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBuJiYoYmcoYixjLG4sZCkseD1iLm1lbW9pemVkU3RhdGUpLChuPU5mfHxnZyhiLGMsZyxkLGsseCxsKSk/KHp8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBoLlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgaC5jb21wb25lbnRXaWxsVXBkYXRlfHxcbihcImZ1bmN0aW9uXCI9PT10eXBlb2YgaC5jb21wb25lbnRXaWxsVXBkYXRlJiZoLmNvbXBvbmVudFdpbGxVcGRhdGUoZCx4LGwpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBoLlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlJiZoLlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlKGQseCxsKSksXCJmdW5jdGlvblwiPT09dHlwZW9mIGguY29tcG9uZW50RGlkVXBkYXRlJiYoYi5lZmZlY3RUYWd8PTQpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBoLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlJiYoYi5lZmZlY3RUYWd8PTI1NikpOihcImZ1bmN0aW9uXCIhPT10eXBlb2YgaC5jb21wb25lbnREaWRVcGRhdGV8fGc9PT1hLm1lbW9pemVkUHJvcHMmJms9PT1hLm1lbW9pemVkU3RhdGV8fChiLmVmZmVjdFRhZ3w9NCksXCJmdW5jdGlvblwiIT09dHlwZW9mIGguZ2V0U25hcHNob3RCZWZvcmVVcGRhdGV8fGc9PT1hLm1lbW9pemVkUHJvcHMmJms9PT1hLm1lbW9pemVkU3RhdGV8fChiLmVmZmVjdFRhZ3w9MjU2KSxiLm1lbW9pemVkUHJvcHM9XG5kLGIubWVtb2l6ZWRTdGF0ZT14KSxoLnByb3BzPWQsaC5zdGF0ZT14LGguY29udGV4dD1sLGQ9bik6KFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBoLmNvbXBvbmVudERpZFVwZGF0ZXx8Zz09PWEubWVtb2l6ZWRQcm9wcyYmaz09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZWZmZWN0VGFnfD00KSxcImZ1bmN0aW9uXCIhPT10eXBlb2YgaC5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZXx8Zz09PWEubWVtb2l6ZWRQcm9wcyYmaz09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZWZmZWN0VGFnfD0yNTYpLGQ9ITEpO3JldHVybiBNaChhLGIsYyxkLGYsZSl9XG5mdW5jdGlvbiBNaChhLGIsYyxkLGUsZil7S2goYSxiKTt2YXIgaD0wIT09KGIuZWZmZWN0VGFnJjY0KTtpZighZCYmIWgpcmV0dXJuIGUmJlllKGIsYywhMSksRmgoYSxiLGYpO2Q9Yi5zdGF0ZU5vZGU7RGguY3VycmVudD1iO3ZhciBnPWgmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBjLmdldERlcml2ZWRTdGF0ZUZyb21FcnJvcj9udWxsOmQucmVuZGVyKCk7Yi5lZmZlY3RUYWd8PTE7bnVsbCE9PWEmJmg/KGIuY2hpbGQ9dGcoYixhLmNoaWxkLG51bGwsZiksYi5jaGlsZD10ZyhiLG51bGwsZyxmKSk6UyhhLGIsZyxmKTtiLm1lbW9pemVkU3RhdGU9ZC5zdGF0ZTtlJiZZZShiLGMsITApO3JldHVybiBiLmNoaWxkfWZ1bmN0aW9uIE5oKGEpe3ZhciBiPWEuc3RhdGVOb2RlO2IucGVuZGluZ0NvbnRleHQ/VmUoYSxiLnBlbmRpbmdDb250ZXh0LGIucGVuZGluZ0NvbnRleHQhPT1iLmNvbnRleHQpOmIuY29udGV4dCYmVmUoYSxiLmNvbnRleHQsITEpO0FnKGEsYi5jb250YWluZXJJbmZvKX1cbnZhciBPaD17fTtcbmZ1bmN0aW9uIFBoKGEsYixjKXt2YXIgZD1iLm1vZGUsZT1iLnBlbmRpbmdQcm9wcyxmPVAuY3VycmVudCxoPW51bGwsZz0hMSxrOyhrPTAhPT0oYi5lZmZlY3RUYWcmNjQpKXx8KGs9MCE9PShmJkdnKSYmKG51bGw9PT1hfHxudWxsIT09YS5tZW1vaXplZFN0YXRlKSk7az8oaD1PaCxnPSEwLGIuZWZmZWN0VGFnJj0tNjUpOm51bGwhPT1hJiZudWxsPT09YS5tZW1vaXplZFN0YXRlfHx2b2lkIDA9PT1lLmZhbGxiYWNrfHwhMD09PWUudW5zdGFibGVfYXZvaWRUaGlzRmFsbGJhY2t8fChmfD1GZyk7ZiY9RWc7SihQLGYsYik7aWYobnVsbD09PWEpaWYoZyl7ZT1lLmZhbGxiYWNrO2E9c2cobnVsbCxkLDAsbnVsbCk7YS5yZXR1cm49YjtpZigwPT09KGIubW9kZSYyKSlmb3IoZz1udWxsIT09Yi5tZW1vaXplZFN0YXRlP2IuY2hpbGQuY2hpbGQ6Yi5jaGlsZCxhLmNoaWxkPWc7bnVsbCE9PWc7KWcucmV0dXJuPWEsZz1nLnNpYmxpbmc7Yz1zZyhlLGQsYyxudWxsKTtjLnJldHVybj1iO2Euc2libGluZz1cbmM7ZD1hfWVsc2UgZD1jPXVnKGIsbnVsbCxlLmNoaWxkcmVuLGMpO2Vsc2V7aWYobnVsbCE9PWEubWVtb2l6ZWRTdGF0ZSlpZihmPWEuY2hpbGQsZD1mLnNpYmxpbmcsZyl7ZT1lLmZhbGxiYWNrO2M9b2coZixmLnBlbmRpbmdQcm9wcywwKTtjLnJldHVybj1iO2lmKDA9PT0oYi5tb2RlJjIpJiYoZz1udWxsIT09Yi5tZW1vaXplZFN0YXRlP2IuY2hpbGQuY2hpbGQ6Yi5jaGlsZCxnIT09Zi5jaGlsZCkpZm9yKGMuY2hpbGQ9ZztudWxsIT09ZzspZy5yZXR1cm49YyxnPWcuc2libGluZztlPW9nKGQsZSxkLmV4cGlyYXRpb25UaW1lKTtlLnJldHVybj1iO2Muc2libGluZz1lO2Q9YztjLmNoaWxkRXhwaXJhdGlvblRpbWU9MDtjPWV9ZWxzZSBkPWM9dGcoYixmLmNoaWxkLGUuY2hpbGRyZW4sYyk7ZWxzZSBpZihmPWEuY2hpbGQsZyl7Zz1lLmZhbGxiYWNrO2U9c2cobnVsbCxkLDAsbnVsbCk7ZS5yZXR1cm49YjtlLmNoaWxkPWY7bnVsbCE9PWYmJihmLnJldHVybj1lKTtpZigwPT09KGIubW9kZSZcbjIpKWZvcihmPW51bGwhPT1iLm1lbW9pemVkU3RhdGU/Yi5jaGlsZC5jaGlsZDpiLmNoaWxkLGUuY2hpbGQ9ZjtudWxsIT09ZjspZi5yZXR1cm49ZSxmPWYuc2libGluZztjPXNnKGcsZCxjLG51bGwpO2MucmV0dXJuPWI7ZS5zaWJsaW5nPWM7Yy5lZmZlY3RUYWd8PTI7ZD1lO2UuY2hpbGRFeHBpcmF0aW9uVGltZT0wfWVsc2UgYz1kPXRnKGIsZixlLmNoaWxkcmVuLGMpO2Iuc3RhdGVOb2RlPWEuc3RhdGVOb2RlfWIubWVtb2l6ZWRTdGF0ZT1oO2IuY2hpbGQ9ZDtyZXR1cm4gY31mdW5jdGlvbiBRaChhLGIsYyxkLGUpe3ZhciBmPWEubWVtb2l6ZWRTdGF0ZTtudWxsPT09Zj9hLm1lbW9pemVkU3RhdGU9e2lzQmFja3dhcmRzOmIscmVuZGVyaW5nOm51bGwsbGFzdDpkLHRhaWw6Yyx0YWlsRXhwaXJhdGlvbjowLHRhaWxNb2RlOmV9OihmLmlzQmFja3dhcmRzPWIsZi5yZW5kZXJpbmc9bnVsbCxmLmxhc3Q9ZCxmLnRhaWw9YyxmLnRhaWxFeHBpcmF0aW9uPTAsZi50YWlsTW9kZT1lKX1cbmZ1bmN0aW9uIFJoKGEsYixjKXt2YXIgZD1iLnBlbmRpbmdQcm9wcyxlPWQucmV2ZWFsT3JkZXIsZj1kLnRhaWw7UyhhLGIsZC5jaGlsZHJlbixjKTtkPVAuY3VycmVudDtpZigwIT09KGQmR2cpKWQ9ZCZFZ3xHZyxiLmVmZmVjdFRhZ3w9NjQ7ZWxzZXtpZihudWxsIT09YSYmMCE9PShhLmVmZmVjdFRhZyY2NCkpYTpmb3IoYT1iLmNoaWxkO251bGwhPT1hOyl7aWYoMTM9PT1hLnRhZyl7aWYobnVsbCE9PWEubWVtb2l6ZWRTdGF0ZSl7YS5leHBpcmF0aW9uVGltZTxjJiYoYS5leHBpcmF0aW9uVGltZT1jKTt2YXIgaD1hLmFsdGVybmF0ZTtudWxsIT09aCYmaC5leHBpcmF0aW9uVGltZTxjJiYoaC5leHBpcmF0aW9uVGltZT1jKTtKZihhLnJldHVybixjKX19ZWxzZSBpZihudWxsIT09YS5jaGlsZCl7YS5jaGlsZC5yZXR1cm49YTthPWEuY2hpbGQ7Y29udGludWV9aWYoYT09PWIpYnJlYWsgYTtmb3IoO251bGw9PT1hLnNpYmxpbmc7KXtpZihudWxsPT09YS5yZXR1cm58fGEucmV0dXJuPT09XG5iKWJyZWFrIGE7YT1hLnJldHVybn1hLnNpYmxpbmcucmV0dXJuPWEucmV0dXJuO2E9YS5zaWJsaW5nfWQmPUVnfUooUCxkLGIpO2lmKDA9PT0oYi5tb2RlJjIpKWIubWVtb2l6ZWRTdGF0ZT1udWxsO2Vsc2Ugc3dpdGNoKGUpe2Nhc2UgXCJmb3J3YXJkc1wiOmM9Yi5jaGlsZDtmb3IoZT1udWxsO251bGwhPT1jOylkPWMuYWx0ZXJuYXRlLG51bGwhPT1kJiZudWxsPT09SGcoZCkmJihlPWMpLGM9Yy5zaWJsaW5nO2M9ZTtudWxsPT09Yz8oZT1iLmNoaWxkLGIuY2hpbGQ9bnVsbCk6KGU9Yy5zaWJsaW5nLGMuc2libGluZz1udWxsKTtRaChiLCExLGUsYyxmKTticmVhaztjYXNlIFwiYmFja3dhcmRzXCI6Yz1udWxsO2U9Yi5jaGlsZDtmb3IoYi5jaGlsZD1udWxsO251bGwhPT1lOyl7ZD1lLmFsdGVybmF0ZTtpZihudWxsIT09ZCYmbnVsbD09PUhnKGQpKXtiLmNoaWxkPWU7YnJlYWt9ZD1lLnNpYmxpbmc7ZS5zaWJsaW5nPWM7Yz1lO2U9ZH1RaChiLCEwLGMsbnVsbCxmKTticmVhaztjYXNlIFwidG9nZXRoZXJcIjpRaChiLFxuITEsbnVsbCxudWxsLHZvaWQgMCk7YnJlYWs7ZGVmYXVsdDpiLm1lbW9pemVkU3RhdGU9bnVsbH1yZXR1cm4gYi5jaGlsZH1mdW5jdGlvbiBGaChhLGIsYyl7bnVsbCE9PWEmJihiLmRlcGVuZGVuY2llcz1hLmRlcGVuZGVuY2llcyk7aWYoYi5jaGlsZEV4cGlyYXRpb25UaW1lPGMpcmV0dXJuIG51bGw7aWYobnVsbCE9PWEmJmIuY2hpbGQhPT1hLmNoaWxkKXRocm93IHQoRXJyb3IoMTUzKSk7aWYobnVsbCE9PWIuY2hpbGQpe2E9Yi5jaGlsZDtjPW9nKGEsYS5wZW5kaW5nUHJvcHMsYS5leHBpcmF0aW9uVGltZSk7Yi5jaGlsZD1jO2ZvcihjLnJldHVybj1iO251bGwhPT1hLnNpYmxpbmc7KWE9YS5zaWJsaW5nLGM9Yy5zaWJsaW5nPW9nKGEsYS5wZW5kaW5nUHJvcHMsYS5leHBpcmF0aW9uVGltZSksYy5yZXR1cm49YjtjLnNpYmxpbmc9bnVsbH1yZXR1cm4gYi5jaGlsZH1mdW5jdGlvbiBTaChhKXthLmVmZmVjdFRhZ3w9NH1cbnZhciBUaD12b2lkIDAsVWg9dm9pZCAwLFZoPXZvaWQgMCxXaD12b2lkIDA7VGg9ZnVuY3Rpb24oYSxiKXtmb3IodmFyIGM9Yi5jaGlsZDtudWxsIT09Yzspe2lmKDU9PT1jLnRhZ3x8Nj09PWMudGFnKWEuYXBwZW5kQ2hpbGQoYy5zdGF0ZU5vZGUpO2Vsc2UgaWYoMjA9PT1jLnRhZylhLmFwcGVuZENoaWxkKGMuc3RhdGVOb2RlLmluc3RhbmNlKTtlbHNlIGlmKDQhPT1jLnRhZyYmbnVsbCE9PWMuY2hpbGQpe2MuY2hpbGQucmV0dXJuPWM7Yz1jLmNoaWxkO2NvbnRpbnVlfWlmKGM9PT1iKWJyZWFrO2Zvcig7bnVsbD09PWMuc2libGluZzspe2lmKG51bGw9PT1jLnJldHVybnx8Yy5yZXR1cm49PT1iKXJldHVybjtjPWMucmV0dXJufWMuc2libGluZy5yZXR1cm49Yy5yZXR1cm47Yz1jLnNpYmxpbmd9fTtVaD1mdW5jdGlvbigpe307XG5WaD1mdW5jdGlvbihhLGIsYyxkLGUpe3ZhciBmPWEubWVtb2l6ZWRQcm9wcztpZihmIT09ZCl7dmFyIGg9Yi5zdGF0ZU5vZGU7emcod2cuY3VycmVudCk7YT1udWxsO3N3aXRjaChjKXtjYXNlIFwiaW5wdXRcIjpmPUJjKGgsZik7ZD1CYyhoLGQpO2E9W107YnJlYWs7Y2FzZSBcIm9wdGlvblwiOmY9bGUoaCxmKTtkPWxlKGgsZCk7YT1bXTticmVhaztjYXNlIFwic2VsZWN0XCI6Zj1tKHt9LGYse3ZhbHVlOnZvaWQgMH0pO2Q9bSh7fSxkLHt2YWx1ZTp2b2lkIDB9KTthPVtdO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmY9bmUoaCxmKTtkPW5lKGgsZCk7YT1bXTticmVhaztkZWZhdWx0OlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBmLm9uQ2xpY2smJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLm9uQ2xpY2smJihoLm9uY2xpY2s9R2UpfURlKGMsZCk7aD1jPXZvaWQgMDt2YXIgZz1udWxsO2ZvcihjIGluIGYpaWYoIWQuaGFzT3duUHJvcGVydHkoYykmJmYuaGFzT3duUHJvcGVydHkoYykmJm51bGwhPWZbY10paWYoXCJzdHlsZVwiPT09XG5jKXt2YXIgaz1mW2NdO2ZvcihoIGluIGspay5oYXNPd25Qcm9wZXJ0eShoKSYmKGd8fChnPXt9KSxnW2hdPVwiXCIpfWVsc2VcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCIhPT1jJiZcImNoaWxkcmVuXCIhPT1jJiZcInN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZ1wiIT09YyYmXCJzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmdcIiE9PWMmJlwiYXV0b0ZvY3VzXCIhPT1jJiYoaWEuaGFzT3duUHJvcGVydHkoYyk/YXx8KGE9W10pOihhPWF8fFtdKS5wdXNoKGMsbnVsbCkpO2ZvcihjIGluIGQpe3ZhciBsPWRbY107az1udWxsIT1mP2ZbY106dm9pZCAwO2lmKGQuaGFzT3duUHJvcGVydHkoYykmJmwhPT1rJiYobnVsbCE9bHx8bnVsbCE9aykpaWYoXCJzdHlsZVwiPT09YylpZihrKXtmb3IoaCBpbiBrKSFrLmhhc093blByb3BlcnR5KGgpfHxsJiZsLmhhc093blByb3BlcnR5KGgpfHwoZ3x8KGc9e30pLGdbaF09XCJcIik7Zm9yKGggaW4gbClsLmhhc093blByb3BlcnR5KGgpJiZrW2hdIT09bFtoXSYmKGd8fFxuKGc9e30pLGdbaF09bFtoXSl9ZWxzZSBnfHwoYXx8KGE9W10pLGEucHVzaChjLGcpKSxnPWw7ZWxzZVwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIj09PWM/KGw9bD9sLl9faHRtbDp2b2lkIDAsaz1rP2suX19odG1sOnZvaWQgMCxudWxsIT1sJiZrIT09bCYmKGE9YXx8W10pLnB1c2goYyxcIlwiK2wpKTpcImNoaWxkcmVuXCI9PT1jP2s9PT1sfHxcInN0cmluZ1wiIT09dHlwZW9mIGwmJlwibnVtYmVyXCIhPT10eXBlb2YgbHx8KGE9YXx8W10pLnB1c2goYyxcIlwiK2wpOlwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nXCIhPT1jJiZcInN1cHByZXNzSHlkcmF0aW9uV2FybmluZ1wiIT09YyYmKGlhLmhhc093blByb3BlcnR5KGMpPyhudWxsIT1sJiZGZShlLGMpLGF8fGs9PT1sfHwoYT1bXSkpOihhPWF8fFtdKS5wdXNoKGMsbCkpfWcmJihhPWF8fFtdKS5wdXNoKFwic3R5bGVcIixnKTtlPWE7KGIudXBkYXRlUXVldWU9ZSkmJlNoKGIpfX07V2g9ZnVuY3Rpb24oYSxiLGMsZCl7YyE9PWQmJlNoKGIpfTtcbmZ1bmN0aW9uICRoKGEsYil7c3dpdGNoKGEudGFpbE1vZGUpe2Nhc2UgXCJoaWRkZW5cIjpiPWEudGFpbDtmb3IodmFyIGM9bnVsbDtudWxsIT09YjspbnVsbCE9PWIuYWx0ZXJuYXRlJiYoYz1iKSxiPWIuc2libGluZztudWxsPT09Yz9hLnRhaWw9bnVsbDpjLnNpYmxpbmc9bnVsbDticmVhaztjYXNlIFwiY29sbGFwc2VkXCI6Yz1hLnRhaWw7Zm9yKHZhciBkPW51bGw7bnVsbCE9PWM7KW51bGwhPT1jLmFsdGVybmF0ZSYmKGQ9YyksYz1jLnNpYmxpbmc7bnVsbD09PWQ/Ynx8bnVsbD09PWEudGFpbD9hLnRhaWw9bnVsbDphLnRhaWwuc2libGluZz1udWxsOmQuc2libGluZz1udWxsfX1cbmZ1bmN0aW9uIGFpKGEpe3N3aXRjaChhLnRhZyl7Y2FzZSAxOk4oYS50eXBlKSYmVGUoYSk7dmFyIGI9YS5lZmZlY3RUYWc7cmV0dXJuIGImMjA0OD8oYS5lZmZlY3RUYWc9YiYtMjA0OXw2NCxhKTpudWxsO2Nhc2UgMzpCZyhhKTtVZShhKTtiPWEuZWZmZWN0VGFnO2lmKDAhPT0oYiY2NCkpdGhyb3cgdChFcnJvcigyODUpKTthLmVmZmVjdFRhZz1iJi0yMDQ5fDY0O3JldHVybiBhO2Nhc2UgNTpyZXR1cm4gRGcoYSksbnVsbDtjYXNlIDEzOnJldHVybiBIKFAsYSksYj1hLmVmZmVjdFRhZyxiJjIwNDg/KGEuZWZmZWN0VGFnPWImLTIwNDl8NjQsYSk6bnVsbDtjYXNlIDE4OnJldHVybiBudWxsO2Nhc2UgMTk6cmV0dXJuIEgoUCxhKSxudWxsO2Nhc2UgNDpyZXR1cm4gQmcoYSksbnVsbDtjYXNlIDEwOnJldHVybiBJZihhKSxudWxsO2RlZmF1bHQ6cmV0dXJuIG51bGx9fWZ1bmN0aW9uIGJpKGEsYil7cmV0dXJue3ZhbHVlOmEsc291cmNlOmIsc3RhY2s6cGMoYil9fVxudmFyIGNpPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBXZWFrU2V0P1dlYWtTZXQ6U2V0O2Z1bmN0aW9uIGRpKGEsYil7dmFyIGM9Yi5zb3VyY2UsZD1iLnN0YWNrO251bGw9PT1kJiZudWxsIT09YyYmKGQ9cGMoYykpO251bGwhPT1jJiZvYyhjLnR5cGUpO2I9Yi52YWx1ZTtudWxsIT09YSYmMT09PWEudGFnJiZvYyhhLnR5cGUpO3RyeXtjb25zb2xlLmVycm9yKGIpfWNhdGNoKGUpe3NldFRpbWVvdXQoZnVuY3Rpb24oKXt0aHJvdyBlO30pfX1mdW5jdGlvbiBlaShhLGIpe3RyeXtiLnByb3BzPWEubWVtb2l6ZWRQcm9wcyxiLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZSxiLmNvbXBvbmVudFdpbGxVbm1vdW50KCl9Y2F0Y2goYyl7ZmkoYSxjKX19ZnVuY3Rpb24gZ2koYSl7dmFyIGI9YS5yZWY7aWYobnVsbCE9PWIpaWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGIpdHJ5e2IobnVsbCl9Y2F0Y2goYyl7ZmkoYSxjKX1lbHNlIGIuY3VycmVudD1udWxsfVxuZnVuY3Rpb24gaGkoYSxiLGMpe2M9Yy51cGRhdGVRdWV1ZTtjPW51bGwhPT1jP2MubGFzdEVmZmVjdDpudWxsO2lmKG51bGwhPT1jKXt2YXIgZD1jPWMubmV4dDtkb3tpZigoZC50YWcmYSkhPT1JZyl7dmFyIGU9ZC5kZXN0cm95O2QuZGVzdHJveT12b2lkIDA7dm9pZCAwIT09ZSYmZSgpfShkLnRhZyZiKSE9PUlnJiYoZT1kLmNyZWF0ZSxkLmRlc3Ryb3k9ZSgpKTtkPWQubmV4dH13aGlsZShkIT09Yyl9fVxuZnVuY3Rpb24gaWkoYSxiKXtcImZ1bmN0aW9uXCI9PT10eXBlb2YgamkmJmppKGEpO3N3aXRjaChhLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNDpjYXNlIDE1OnZhciBjPWEudXBkYXRlUXVldWU7aWYobnVsbCE9PWMmJihjPWMubGFzdEVmZmVjdCxudWxsIT09Yykpe3ZhciBkPWMubmV4dDt2Zig5NzxiPzk3OmIsZnVuY3Rpb24oKXt2YXIgYj1kO2Rve3ZhciBjPWIuZGVzdHJveTtpZih2b2lkIDAhPT1jKXt2YXIgaD1hO3RyeXtjKCl9Y2F0Y2goZyl7ZmkoaCxnKX19Yj1iLm5leHR9d2hpbGUoYiE9PWQpfSl9YnJlYWs7Y2FzZSAxOmdpKGEpO2I9YS5zdGF0ZU5vZGU7XCJmdW5jdGlvblwiPT09dHlwZW9mIGIuY29tcG9uZW50V2lsbFVubW91bnQmJmVpKGEsYik7YnJlYWs7Y2FzZSA1OmdpKGEpO2JyZWFrO2Nhc2UgNDpraShhLGIpfX1cbmZ1bmN0aW9uIGxpKGEsYil7Zm9yKHZhciBjPWE7OylpZihpaShjLGIpLG51bGwhPT1jLmNoaWxkJiY0IT09Yy50YWcpYy5jaGlsZC5yZXR1cm49YyxjPWMuY2hpbGQ7ZWxzZXtpZihjPT09YSlicmVhaztmb3IoO251bGw9PT1jLnNpYmxpbmc7KXtpZihudWxsPT09Yy5yZXR1cm58fGMucmV0dXJuPT09YSlyZXR1cm47Yz1jLnJldHVybn1jLnNpYmxpbmcucmV0dXJuPWMucmV0dXJuO2M9Yy5zaWJsaW5nfX1mdW5jdGlvbiBtaShhKXtyZXR1cm4gNT09PWEudGFnfHwzPT09YS50YWd8fDQ9PT1hLnRhZ31cbmZ1bmN0aW9uIG5pKGEpe2E6e2Zvcih2YXIgYj1hLnJldHVybjtudWxsIT09Yjspe2lmKG1pKGIpKXt2YXIgYz1iO2JyZWFrIGF9Yj1iLnJldHVybn10aHJvdyB0KEVycm9yKDE2MCkpO31iPWMuc3RhdGVOb2RlO3N3aXRjaChjLnRhZyl7Y2FzZSA1OnZhciBkPSExO2JyZWFrO2Nhc2UgMzpiPWIuY29udGFpbmVySW5mbztkPSEwO2JyZWFrO2Nhc2UgNDpiPWIuY29udGFpbmVySW5mbztkPSEwO2JyZWFrO2RlZmF1bHQ6dGhyb3cgdChFcnJvcigxNjEpKTt9Yy5lZmZlY3RUYWcmMTYmJih3ZShiLFwiXCIpLGMuZWZmZWN0VGFnJj0tMTcpO2E6Yjpmb3IoYz1hOzspe2Zvcig7bnVsbD09PWMuc2libGluZzspe2lmKG51bGw9PT1jLnJldHVybnx8bWkoYy5yZXR1cm4pKXtjPW51bGw7YnJlYWsgYX1jPWMucmV0dXJufWMuc2libGluZy5yZXR1cm49Yy5yZXR1cm47Zm9yKGM9Yy5zaWJsaW5nOzUhPT1jLnRhZyYmNiE9PWMudGFnJiYxOCE9PWMudGFnOyl7aWYoYy5lZmZlY3RUYWcmMiljb250aW51ZSBiO1xuaWYobnVsbD09PWMuY2hpbGR8fDQ9PT1jLnRhZyljb250aW51ZSBiO2Vsc2UgYy5jaGlsZC5yZXR1cm49YyxjPWMuY2hpbGR9aWYoIShjLmVmZmVjdFRhZyYyKSl7Yz1jLnN0YXRlTm9kZTticmVhayBhfX1mb3IodmFyIGU9YTs7KXt2YXIgZj01PT09ZS50YWd8fDY9PT1lLnRhZztpZihmfHwyMD09PWUudGFnKXt2YXIgaD1mP2Uuc3RhdGVOb2RlOmUuc3RhdGVOb2RlLmluc3RhbmNlO2lmKGMpaWYoZCl7Zj1iO3ZhciBnPWg7aD1jOzg9PT1mLm5vZGVUeXBlP2YucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoZyxoKTpmLmluc2VydEJlZm9yZShnLGgpfWVsc2UgYi5pbnNlcnRCZWZvcmUoaCxjKTtlbHNlIGQ/KGc9Yiw4PT09Zy5ub2RlVHlwZT8oZj1nLnBhcmVudE5vZGUsZi5pbnNlcnRCZWZvcmUoaCxnKSk6KGY9ZyxmLmFwcGVuZENoaWxkKGgpKSxnPWcuX3JlYWN0Um9vdENvbnRhaW5lcixudWxsIT09ZyYmdm9pZCAwIT09Z3x8bnVsbCE9PWYub25jbGlja3x8KGYub25jbGljaz1HZSkpOlxuYi5hcHBlbmRDaGlsZChoKX1lbHNlIGlmKDQhPT1lLnRhZyYmbnVsbCE9PWUuY2hpbGQpe2UuY2hpbGQucmV0dXJuPWU7ZT1lLmNoaWxkO2NvbnRpbnVlfWlmKGU9PT1hKWJyZWFrO2Zvcig7bnVsbD09PWUuc2libGluZzspe2lmKG51bGw9PT1lLnJldHVybnx8ZS5yZXR1cm49PT1hKXJldHVybjtlPWUucmV0dXJufWUuc2libGluZy5yZXR1cm49ZS5yZXR1cm47ZT1lLnNpYmxpbmd9fVxuZnVuY3Rpb24ga2koYSxiKXtmb3IodmFyIGM9YSxkPSExLGU9dm9pZCAwLGY9dm9pZCAwOzspe2lmKCFkKXtkPWMucmV0dXJuO2E6Zm9yKDs7KXtpZihudWxsPT09ZCl0aHJvdyB0KEVycm9yKDE2MCkpO2U9ZC5zdGF0ZU5vZGU7c3dpdGNoKGQudGFnKXtjYXNlIDU6Zj0hMTticmVhayBhO2Nhc2UgMzplPWUuY29udGFpbmVySW5mbztmPSEwO2JyZWFrIGE7Y2FzZSA0OmU9ZS5jb250YWluZXJJbmZvO2Y9ITA7YnJlYWsgYX1kPWQucmV0dXJufWQ9ITB9aWYoNT09PWMudGFnfHw2PT09Yy50YWcpaWYobGkoYyxiKSxmKXt2YXIgaD1lLGc9Yy5zdGF0ZU5vZGU7OD09PWgubm9kZVR5cGU/aC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGcpOmgucmVtb3ZlQ2hpbGQoZyl9ZWxzZSBlLnJlbW92ZUNoaWxkKGMuc3RhdGVOb2RlKTtlbHNlIGlmKDIwPT09Yy50YWcpZz1jLnN0YXRlTm9kZS5pbnN0YW5jZSxsaShjLGIpLGY/KGg9ZSw4PT09aC5ub2RlVHlwZT9oLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZyk6XG5oLnJlbW92ZUNoaWxkKGcpKTplLnJlbW92ZUNoaWxkKGcpO2Vsc2UgaWYoND09PWMudGFnKXtpZihudWxsIT09Yy5jaGlsZCl7ZT1jLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO2Y9ITA7Yy5jaGlsZC5yZXR1cm49YztjPWMuY2hpbGQ7Y29udGludWV9fWVsc2UgaWYoaWkoYyxiKSxudWxsIT09Yy5jaGlsZCl7Yy5jaGlsZC5yZXR1cm49YztjPWMuY2hpbGQ7Y29udGludWV9aWYoYz09PWEpYnJlYWs7Zm9yKDtudWxsPT09Yy5zaWJsaW5nOyl7aWYobnVsbD09PWMucmV0dXJufHxjLnJldHVybj09PWEpcmV0dXJuO2M9Yy5yZXR1cm47ND09PWMudGFnJiYoZD0hMSl9Yy5zaWJsaW5nLnJldHVybj1jLnJldHVybjtjPWMuc2libGluZ319XG5mdW5jdGlvbiBvaShhLGIpe3N3aXRjaChiLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNDpjYXNlIDE1OmhpKEtnLExnLGIpO2JyZWFrO2Nhc2UgMTpicmVhaztjYXNlIDU6dmFyIGM9Yi5zdGF0ZU5vZGU7aWYobnVsbCE9Yyl7dmFyIGQ9Yi5tZW1vaXplZFByb3BzLGU9bnVsbCE9PWE/YS5tZW1vaXplZFByb3BzOmQ7YT1iLnR5cGU7dmFyIGY9Yi51cGRhdGVRdWV1ZTtiLnVwZGF0ZVF1ZXVlPW51bGw7aWYobnVsbCE9PWYpe2NbR2FdPWQ7XCJpbnB1dFwiPT09YSYmXCJyYWRpb1wiPT09ZC50eXBlJiZudWxsIT1kLm5hbWUmJkRjKGMsZCk7RWUoYSxlKTtiPUVlKGEsZCk7Zm9yKGU9MDtlPGYubGVuZ3RoO2UrPTIpe3ZhciBoPWZbZV0sZz1mW2UrMV07XCJzdHlsZVwiPT09aD9BZShjLGcpOlwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIj09PWg/dmUoYyxnKTpcImNoaWxkcmVuXCI9PT1oP3dlKGMsZyk6emMoYyxoLGcsYil9c3dpdGNoKGEpe2Nhc2UgXCJpbnB1dFwiOkVjKGMsZCk7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6cGUoYyxcbmQpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpiPWMuX3dyYXBwZXJTdGF0ZS53YXNNdWx0aXBsZSxjLl93cmFwcGVyU3RhdGUud2FzTXVsdGlwbGU9ISFkLm11bHRpcGxlLGE9ZC52YWx1ZSxudWxsIT1hP21lKGMsISFkLm11bHRpcGxlLGEsITEpOmIhPT0hIWQubXVsdGlwbGUmJihudWxsIT1kLmRlZmF1bHRWYWx1ZT9tZShjLCEhZC5tdWx0aXBsZSxkLmRlZmF1bHRWYWx1ZSwhMCk6bWUoYywhIWQubXVsdGlwbGUsZC5tdWx0aXBsZT9bXTpcIlwiLCExKSl9fX1icmVhaztjYXNlIDY6aWYobnVsbD09PWIuc3RhdGVOb2RlKXRocm93IHQoRXJyb3IoMTYyKSk7Yi5zdGF0ZU5vZGUubm9kZVZhbHVlPWIubWVtb2l6ZWRQcm9wczticmVhaztjYXNlIDM6YnJlYWs7Y2FzZSAxMjpicmVhaztjYXNlIDEzOmM9YjtudWxsPT09Yi5tZW1vaXplZFN0YXRlP2Q9ITE6KGQ9ITAsYz1iLmNoaWxkLHBpPXNmKCkpO2lmKG51bGwhPT1jKWE6Zm9yKGE9Yzs7KXtpZig1PT09YS50YWcpZj1hLnN0YXRlTm9kZSxkPyhmPVxuZi5zdHlsZSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZi5zZXRQcm9wZXJ0eT9mLnNldFByb3BlcnR5KFwiZGlzcGxheVwiLFwibm9uZVwiLFwiaW1wb3J0YW50XCIpOmYuZGlzcGxheT1cIm5vbmVcIik6KGY9YS5zdGF0ZU5vZGUsZT1hLm1lbW9pemVkUHJvcHMuc3R5bGUsZT12b2lkIDAhPT1lJiZudWxsIT09ZSYmZS5oYXNPd25Qcm9wZXJ0eShcImRpc3BsYXlcIik/ZS5kaXNwbGF5Om51bGwsZi5zdHlsZS5kaXNwbGF5PXplKFwiZGlzcGxheVwiLGUpKTtlbHNlIGlmKDY9PT1hLnRhZylhLnN0YXRlTm9kZS5ub2RlVmFsdWU9ZD9cIlwiOmEubWVtb2l6ZWRQcm9wcztlbHNlIGlmKDEzPT09YS50YWcmJm51bGwhPT1hLm1lbW9pemVkU3RhdGUpe2Y9YS5jaGlsZC5zaWJsaW5nO2YucmV0dXJuPWE7YT1mO2NvbnRpbnVlfWVsc2UgaWYobnVsbCE9PWEuY2hpbGQpe2EuY2hpbGQucmV0dXJuPWE7YT1hLmNoaWxkO2NvbnRpbnVlfWlmKGE9PT1jKWJyZWFrIGE7Zm9yKDtudWxsPT09YS5zaWJsaW5nOyl7aWYobnVsbD09PVxuYS5yZXR1cm58fGEucmV0dXJuPT09YylicmVhayBhO2E9YS5yZXR1cm59YS5zaWJsaW5nLnJldHVybj1hLnJldHVybjthPWEuc2libGluZ31xaShiKTticmVhaztjYXNlIDE5OnFpKGIpO2JyZWFrO2Nhc2UgMTc6YnJlYWs7Y2FzZSAyMDpicmVhaztkZWZhdWx0OnRocm93IHQoRXJyb3IoMTYzKSk7fX1mdW5jdGlvbiBxaShhKXt2YXIgYj1hLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1iKXthLnVwZGF0ZVF1ZXVlPW51bGw7dmFyIGM9YS5zdGF0ZU5vZGU7bnVsbD09PWMmJihjPWEuc3RhdGVOb2RlPW5ldyBjaSk7Yi5mb3JFYWNoKGZ1bmN0aW9uKGIpe3ZhciBkPXJpLmJpbmQobnVsbCxhLGIpO2MuaGFzKGIpfHwoYy5hZGQoYiksYi50aGVuKGQsZCkpfSl9fXZhciBzaT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgV2Vha01hcD9XZWFrTWFwOk1hcDtcbmZ1bmN0aW9uIHRpKGEsYixjKXtjPVFmKGMsbnVsbCk7Yy50YWc9MztjLnBheWxvYWQ9e2VsZW1lbnQ6bnVsbH07dmFyIGQ9Yi52YWx1ZTtjLmNhbGxiYWNrPWZ1bmN0aW9uKCl7dWl8fCh1aT0hMCx2aT1kKTtkaShhLGIpfTtyZXR1cm4gY31cbmZ1bmN0aW9uIHdpKGEsYixjKXtjPVFmKGMsbnVsbCk7Yy50YWc9Mzt2YXIgZD1hLnR5cGUuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkKXt2YXIgZT1iLnZhbHVlO2MucGF5bG9hZD1mdW5jdGlvbigpe2RpKGEsYik7cmV0dXJuIGQoZSl9fXZhciBmPWEuc3RhdGVOb2RlO251bGwhPT1mJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgZi5jb21wb25lbnREaWRDYXRjaCYmKGMuY2FsbGJhY2s9ZnVuY3Rpb24oKXtcImZ1bmN0aW9uXCIhPT10eXBlb2YgZCYmKG51bGw9PT14aT94aT1uZXcgU2V0KFt0aGlzXSk6eGkuYWRkKHRoaXMpLGRpKGEsYikpO3ZhciBjPWIuc3RhY2s7dGhpcy5jb21wb25lbnREaWRDYXRjaChiLnZhbHVlLHtjb21wb25lbnRTdGFjazpudWxsIT09Yz9jOlwiXCJ9KX0pO3JldHVybiBjfVxudmFyIHlpPU1hdGguY2VpbCx6aT1YYi5SZWFjdEN1cnJlbnREaXNwYXRjaGVyLEFpPVhiLlJlYWN0Q3VycmVudE93bmVyLFQ9MCxCaT04LENpPTE2LERpPTMyLEVpPTAsRmk9MSxHaT0yLEhpPTMsSWk9NCxVPVQsSmk9bnVsbCxWPW51bGwsVz0wLFg9RWksS2k9MTA3Mzc0MTgyMyxMaT0xMDczNzQxODIzLE1pPW51bGwsTmk9ITEscGk9MCxPaT01MDAsWT1udWxsLHVpPSExLHZpPW51bGwseGk9bnVsbCxQaT0hMSxRaT1udWxsLFJpPTkwLFNpPTAsVGk9bnVsbCxVaT0wLFZpPW51bGwsV2k9MDtmdW5jdGlvbiBjZygpe3JldHVybihVJihDaXxEaSkpIT09VD8xMDczNzQxODIxLShzZigpLzEwfDApOjAhPT1XaT9XaTpXaT0xMDczNzQxODIxLShzZigpLzEwfDApfVxuZnVuY3Rpb24gZGcoYSxiLGMpe2I9Yi5tb2RlO2lmKDA9PT0oYiYyKSlyZXR1cm4gMTA3Mzc0MTgyMzt2YXIgZD10ZigpO2lmKDA9PT0oYiY0KSlyZXR1cm4gOTk9PT1kPzEwNzM3NDE4MjM6MTA3Mzc0MTgyMjtpZigoVSZDaSkhPT1UKXJldHVybiBXO2lmKG51bGwhPT1jKWE9MTA3Mzc0MTgyMS0yNSooKCgxMDczNzQxODIxLWErKGMudGltZW91dE1zfDB8fDVFMykvMTApLzI1fDApKzEpO2Vsc2Ugc3dpdGNoKGQpe2Nhc2UgOTk6YT0xMDczNzQxODIzO2JyZWFrO2Nhc2UgOTg6YT0xMDczNzQxODIxLTEwKigoKDEwNzM3NDE4MjEtYSsxNSkvMTB8MCkrMSk7YnJlYWs7Y2FzZSA5NzpjYXNlIDk2OmE9MTA3Mzc0MTgyMS0yNSooKCgxMDczNzQxODIxLWErNTAwKS8yNXwwKSsxKTticmVhaztjYXNlIDk1OmE9MTticmVhaztkZWZhdWx0OnRocm93IHQoRXJyb3IoMzI2KSk7fW51bGwhPT1KaSYmYT09PVcmJi0tYTtyZXR1cm4gYX12YXIgWGk9MDtcbmZ1bmN0aW9uIGVnKGEsYil7aWYoNTA8VWkpdGhyb3cgVWk9MCxWaT1udWxsLHQoRXJyb3IoMTg1KSk7YT1ZaShhLGIpO2lmKG51bGwhPT1hKXthLnBpbmdUaW1lPTA7dmFyIGM9dGYoKTtpZigxMDczNzQxODIzPT09YilpZigoVSZCaSkhPT1UJiYoVSYoQ2l8RGkpKT09PVQpZm9yKHZhciBkPVooYSwxMDczNzQxODIzLCEwKTtudWxsIT09ZDspZD1kKCEwKTtlbHNlIFppKGEsOTksMTA3Mzc0MTgyMyksVT09PVQmJk8oKTtlbHNlIFppKGEsYyxiKTsoVSY0KT09PVR8fDk4IT09YyYmOTkhPT1jfHwobnVsbD09PVRpP1RpPW5ldyBNYXAoW1thLGJdXSk6KGM9VGkuZ2V0KGEpLCh2b2lkIDA9PT1jfHxjPmIpJiZUaS5zZXQoYSxiKSkpfX1cbmZ1bmN0aW9uIFlpKGEsYil7YS5leHBpcmF0aW9uVGltZTxiJiYoYS5leHBpcmF0aW9uVGltZT1iKTt2YXIgYz1hLmFsdGVybmF0ZTtudWxsIT09YyYmYy5leHBpcmF0aW9uVGltZTxiJiYoYy5leHBpcmF0aW9uVGltZT1iKTt2YXIgZD1hLnJldHVybixlPW51bGw7aWYobnVsbD09PWQmJjM9PT1hLnRhZyllPWEuc3RhdGVOb2RlO2Vsc2UgZm9yKDtudWxsIT09ZDspe2M9ZC5hbHRlcm5hdGU7ZC5jaGlsZEV4cGlyYXRpb25UaW1lPGImJihkLmNoaWxkRXhwaXJhdGlvblRpbWU9Yik7bnVsbCE9PWMmJmMuY2hpbGRFeHBpcmF0aW9uVGltZTxiJiYoYy5jaGlsZEV4cGlyYXRpb25UaW1lPWIpO2lmKG51bGw9PT1kLnJldHVybiYmMz09PWQudGFnKXtlPWQuc3RhdGVOb2RlO2JyZWFrfWQ9ZC5yZXR1cm59bnVsbCE9PWUmJihiPmUuZmlyc3RQZW5kaW5nVGltZSYmKGUuZmlyc3RQZW5kaW5nVGltZT1iKSxhPWUubGFzdFBlbmRpbmdUaW1lLDA9PT1hfHxiPGEpJiYoZS5sYXN0UGVuZGluZ1RpbWU9XG5iKTtyZXR1cm4gZX1mdW5jdGlvbiBaaShhLGIsYyl7aWYoYS5jYWxsYmFja0V4cGlyYXRpb25UaW1lPGMpe3ZhciBkPWEuY2FsbGJhY2tOb2RlO251bGwhPT1kJiZkIT09bWYmJmFmKGQpO2EuY2FsbGJhY2tFeHBpcmF0aW9uVGltZT1jOzEwNzM3NDE4MjM9PT1jP2EuY2FsbGJhY2tOb2RlPXhmKCRpLmJpbmQobnVsbCxhLFouYmluZChudWxsLGEsYykpKTooZD1udWxsLDEhPT1jJiYoZD17dGltZW91dDoxMCooMTA3Mzc0MTgyMS1jKS1zZigpfSksYS5jYWxsYmFja05vZGU9d2YoYiwkaS5iaW5kKG51bGwsYSxaLmJpbmQobnVsbCxhLGMpKSxkKSl9fWZ1bmN0aW9uICRpKGEsYixjKXt2YXIgZD1hLmNhbGxiYWNrTm9kZSxlPW51bGw7dHJ5e3JldHVybiBlPWIoYyksbnVsbCE9PWU/JGkuYmluZChudWxsLGEsZSk6bnVsbH1maW5hbGx5e251bGw9PT1lJiZkPT09YS5jYWxsYmFja05vZGUmJihhLmNhbGxiYWNrTm9kZT1udWxsLGEuY2FsbGJhY2tFeHBpcmF0aW9uVGltZT0wKX19XG5mdW5jdGlvbiBhaigpeyhVJigxfENpfERpKSk9PT1UJiYoYmooKSxjaigpKX1mdW5jdGlvbiBkaihhLGIpe3ZhciBjPWEuZmlyc3RCYXRjaDtyZXR1cm4gbnVsbCE9PWMmJmMuX2RlZmVyJiZjLl9leHBpcmF0aW9uVGltZT49Yj8od2YoOTcsZnVuY3Rpb24oKXtjLl9vbkNvbXBsZXRlKCk7cmV0dXJuIG51bGx9KSwhMCk6ITF9ZnVuY3Rpb24gYmooKXtpZihudWxsIT09VGkpe3ZhciBhPVRpO1RpPW51bGw7YS5mb3JFYWNoKGZ1bmN0aW9uKGEsYyl7eGYoWi5iaW5kKG51bGwsYyxhKSl9KTtPKCl9fWZ1bmN0aW9uIGVqKGEsYil7dmFyIGM9VTtVfD0xO3RyeXtyZXR1cm4gYShiKX1maW5hbGx5e1U9YyxVPT09VCYmTygpfX1mdW5jdGlvbiBmaihhLGIsYyxkKXt2YXIgZT1VO1V8PTQ7dHJ5e3JldHVybiB2Zig5OCxhLmJpbmQobnVsbCxiLGMsZCkpfWZpbmFsbHl7VT1lLFU9PT1UJiZPKCl9fVxuZnVuY3Rpb24gZ2ooYSxiKXt2YXIgYz1VO1UmPS0yO1V8PUJpO3RyeXtyZXR1cm4gYShiKX1maW5hbGx5e1U9YyxVPT09VCYmTygpfX1cbmZ1bmN0aW9uIGhqKGEsYil7YS5maW5pc2hlZFdvcms9bnVsbDthLmZpbmlzaGVkRXhwaXJhdGlvblRpbWU9MDt2YXIgYz1hLnRpbWVvdXRIYW5kbGU7LTEhPT1jJiYoYS50aW1lb3V0SGFuZGxlPS0xLE1lKGMpKTtpZihudWxsIT09Vilmb3IoYz1WLnJldHVybjtudWxsIT09Yzspe3ZhciBkPWM7c3dpdGNoKGQudGFnKXtjYXNlIDE6dmFyIGU9ZC50eXBlLmNoaWxkQ29udGV4dFR5cGVzO251bGwhPT1lJiZ2b2lkIDAhPT1lJiZUZShkKTticmVhaztjYXNlIDM6QmcoZCk7VWUoZCk7YnJlYWs7Y2FzZSA1OkRnKGQpO2JyZWFrO2Nhc2UgNDpCZyhkKTticmVhaztjYXNlIDEzOkgoUCxkKTticmVhaztjYXNlIDE5OkgoUCxkKTticmVhaztjYXNlIDEwOklmKGQpfWM9Yy5yZXR1cm59Smk9YTtWPW9nKGEuY3VycmVudCxudWxsLGIpO1c9YjtYPUVpO0xpPUtpPTEwNzM3NDE4MjM7TWk9bnVsbDtOaT0hMX1cbmZ1bmN0aW9uIFooYSxiLGMpe2lmKChVJihDaXxEaSkpIT09VCl0aHJvdyB0KEVycm9yKDMyNykpO2lmKGEuZmlyc3RQZW5kaW5nVGltZTxiKXJldHVybiBudWxsO2lmKGMmJmEuZmluaXNoZWRFeHBpcmF0aW9uVGltZT09PWIpcmV0dXJuIGlqLmJpbmQobnVsbCxhKTtjaigpO2lmKGEhPT1KaXx8YiE9PVcpaGooYSxiKTtlbHNlIGlmKFg9PT1IaSlpZihOaSloaihhLGIpO2Vsc2V7dmFyIGQ9YS5sYXN0UGVuZGluZ1RpbWU7aWYoZDxiKXJldHVybiBaLmJpbmQobnVsbCxhLGQpfWlmKG51bGwhPT1WKXtkPVU7VXw9Q2k7dmFyIGU9emkuY3VycmVudDtudWxsPT09ZSYmKGU9aGgpO3ppLmN1cnJlbnQ9aGg7aWYoYyl7aWYoMTA3Mzc0MTgyMyE9PWIpe3ZhciBmPWNnKCk7aWYoZjxiKXJldHVybiBVPWQsR2YoKSx6aS5jdXJyZW50PWUsWi5iaW5kKG51bGwsYSxmKX19ZWxzZSBXaT0wO2RvIHRyeXtpZihjKWZvcig7bnVsbCE9PVY7KVY9amooVik7ZWxzZSBmb3IoO251bGwhPT1WJiYhYmYoKTspVj1cbmpqKFYpO2JyZWFrfWNhdGNoKHJiKXtHZigpO2loKCk7Zj1WO2lmKG51bGw9PT1mfHxudWxsPT09Zi5yZXR1cm4pdGhyb3cgaGooYSxiKSxVPWQscmI7YTp7dmFyIGg9YSxnPWYucmV0dXJuLGs9ZixsPXJiLG49VztrLmVmZmVjdFRhZ3w9MTAyNDtrLmZpcnN0RWZmZWN0PWsubGFzdEVmZmVjdD1udWxsO2lmKG51bGwhPT1sJiZcIm9iamVjdFwiPT09dHlwZW9mIGwmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBsLnRoZW4pe3ZhciB6PWwseD0wIT09KFAuY3VycmVudCZGZyk7bD1nO2Rve3ZhciB2O2lmKHY9MTM9PT1sLnRhZyludWxsIT09bC5tZW1vaXplZFN0YXRlP3Y9ITE6KHY9bC5tZW1vaXplZFByb3BzLHY9dm9pZCAwPT09di5mYWxsYmFjaz8hMTohMCE9PXYudW5zdGFibGVfYXZvaWRUaGlzRmFsbGJhY2s/ITA6eD8hMTohMCk7aWYodil7Zz1sLnVwZGF0ZVF1ZXVlO251bGw9PT1nPyhnPW5ldyBTZXQsZy5hZGQoeiksbC51cGRhdGVRdWV1ZT1nKTpnLmFkZCh6KTtpZigwPT09KGwubW9kZSZcbjIpKXtsLmVmZmVjdFRhZ3w9NjQ7ay5lZmZlY3RUYWcmPS0xOTU3OzE9PT1rLnRhZyYmKG51bGw9PT1rLmFsdGVybmF0ZT9rLnRhZz0xNzoobj1RZigxMDczNzQxODIzLG51bGwpLG4udGFnPTIsU2YoayxuKSkpO2suZXhwaXJhdGlvblRpbWU9MTA3Mzc0MTgyMzticmVhayBhfWs9aDtoPW47eD1rLnBpbmdDYWNoZTtudWxsPT09eD8oeD1rLnBpbmdDYWNoZT1uZXcgc2ksZz1uZXcgU2V0LHguc2V0KHosZykpOihnPXguZ2V0KHopLHZvaWQgMD09PWcmJihnPW5ldyBTZXQseC5zZXQoeixnKSkpO2cuaGFzKGgpfHwoZy5hZGQoaCksaz1rai5iaW5kKG51bGwsayx6LGgpLHoudGhlbihrLGspKTtsLmVmZmVjdFRhZ3w9MjA0ODtsLmV4cGlyYXRpb25UaW1lPW47YnJlYWsgYX1sPWwucmV0dXJufXdoaWxlKG51bGwhPT1sKTtsPUVycm9yKChvYyhrLnR5cGUpfHxcIkEgUmVhY3QgY29tcG9uZW50XCIpK1wiIHN1c3BlbmRlZCB3aGlsZSByZW5kZXJpbmcsIGJ1dCBubyBmYWxsYmFjayBVSSB3YXMgc3BlY2lmaWVkLlxcblxcbkFkZCBhIDxTdXNwZW5zZSBmYWxsYmFjaz0uLi4+IGNvbXBvbmVudCBoaWdoZXIgaW4gdGhlIHRyZWUgdG8gcHJvdmlkZSBhIGxvYWRpbmcgaW5kaWNhdG9yIG9yIHBsYWNlaG9sZGVyIHRvIGRpc3BsYXkuXCIrXG5wYyhrKSl9WCE9PUlpJiYoWD1GaSk7bD1iaShsLGspO2s9Zztkb3tzd2l0Y2goay50YWcpe2Nhc2UgMzprLmVmZmVjdFRhZ3w9MjA0ODtrLmV4cGlyYXRpb25UaW1lPW47bj10aShrLGwsbik7VGYoayxuKTticmVhayBhO2Nhc2UgMTppZih6PWwsaD1rLnR5cGUsZz1rLnN0YXRlTm9kZSwwPT09KGsuZWZmZWN0VGFnJjY0KSYmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBoLmdldERlcml2ZWRTdGF0ZUZyb21FcnJvcnx8bnVsbCE9PWcmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudERpZENhdGNoJiYobnVsbD09PXhpfHwheGkuaGFzKGcpKSkpe2suZWZmZWN0VGFnfD0yMDQ4O2suZXhwaXJhdGlvblRpbWU9bjtuPXdpKGsseixuKTtUZihrLG4pO2JyZWFrIGF9fWs9ay5yZXR1cm59d2hpbGUobnVsbCE9PWspfVY9bGooZil9d2hpbGUoMSk7VT1kO0dmKCk7emkuY3VycmVudD1lO2lmKG51bGwhPT1WKXJldHVybiBaLmJpbmQobnVsbCxhLGIpfWEuZmluaXNoZWRXb3JrPWEuY3VycmVudC5hbHRlcm5hdGU7XG5hLmZpbmlzaGVkRXhwaXJhdGlvblRpbWU9YjtpZihkaihhLGIpKXJldHVybiBudWxsO0ppPW51bGw7c3dpdGNoKFgpe2Nhc2UgRWk6dGhyb3cgdChFcnJvcigzMjgpKTtjYXNlIEZpOnJldHVybiBkPWEubGFzdFBlbmRpbmdUaW1lLGQ8Yj9aLmJpbmQobnVsbCxhLGQpOmM/aWouYmluZChudWxsLGEpOihoaihhLGIpLHhmKFouYmluZChudWxsLGEsYikpLG51bGwpO2Nhc2UgR2k6aWYoMTA3Mzc0MTgyMz09PUtpJiYhYyYmKGM9cGkrT2ktc2YoKSwxMDxjKSl7aWYoTmkpcmV0dXJuIGhqKGEsYiksWi5iaW5kKG51bGwsYSxiKTtkPWEubGFzdFBlbmRpbmdUaW1lO2lmKGQ8YilyZXR1cm4gWi5iaW5kKG51bGwsYSxkKTthLnRpbWVvdXRIYW5kbGU9TGUoaWouYmluZChudWxsLGEpLGMpO3JldHVybiBudWxsfXJldHVybiBpai5iaW5kKG51bGwsYSk7Y2FzZSBIaTppZighYyl7aWYoTmkpcmV0dXJuIGhqKGEsYiksWi5iaW5kKG51bGwsYSxiKTtjPWEubGFzdFBlbmRpbmdUaW1lO2lmKGM8YilyZXR1cm4gWi5iaW5kKG51bGwsXG5hLGMpOzEwNzM3NDE4MjMhPT1MaT9jPTEwKigxMDczNzQxODIxLUxpKS1zZigpOjEwNzM3NDE4MjM9PT1LaT9jPTA6KGM9MTAqKDEwNzM3NDE4MjEtS2kpLTVFMyxkPXNmKCksYj0xMCooMTA3Mzc0MTgyMS1iKS1kLGM9ZC1jLDA+YyYmKGM9MCksYz0oMTIwPmM/MTIwOjQ4MD5jPzQ4MDoxMDgwPmM/MTA4MDoxOTIwPmM/MTkyMDozRTM+Yz8zRTM6NDMyMD5jPzQzMjA6MTk2MCp5aShjLzE5NjApKS1jLGI8YyYmKGM9YikpO2lmKDEwPGMpcmV0dXJuIGEudGltZW91dEhhbmRsZT1MZShpai5iaW5kKG51bGwsYSksYyksbnVsbH1yZXR1cm4gaWouYmluZChudWxsLGEpO2Nhc2UgSWk6cmV0dXJuIWMmJjEwNzM3NDE4MjMhPT1LaSYmbnVsbCE9PU1pJiYoZD1LaSxlPU1pLGI9ZS5idXN5TWluRHVyYXRpb25Nc3wwLDA+PWI/Yj0wOihjPWUuYnVzeURlbGF5TXN8MCxkPXNmKCktKDEwKigxMDczNzQxODIxLWQpLShlLnRpbWVvdXRNc3wwfHw1RTMpKSxiPWQ8PWM/MDpjK2ItZCksMTA8Yik/KGEudGltZW91dEhhbmRsZT1cbkxlKGlqLmJpbmQobnVsbCxhKSxiKSxudWxsKTppai5iaW5kKG51bGwsYSk7ZGVmYXVsdDp0aHJvdyB0KEVycm9yKDMyOSkpO319ZnVuY3Rpb24gWGYoYSxiKXthPEtpJiYxPGEmJihLaT1hKTtudWxsIT09YiYmYTxMaSYmMTxhJiYoTGk9YSxNaT1iKX1mdW5jdGlvbiBqaihhKXt2YXIgYj1taihhLmFsdGVybmF0ZSxhLFcpO2EubWVtb2l6ZWRQcm9wcz1hLnBlbmRpbmdQcm9wcztudWxsPT09YiYmKGI9bGooYSkpO0FpLmN1cnJlbnQ9bnVsbDtyZXR1cm4gYn1cbmZ1bmN0aW9uIGxqKGEpe1Y9YTtkb3t2YXIgYj1WLmFsdGVybmF0ZTthPVYucmV0dXJuO2lmKDA9PT0oVi5lZmZlY3RUYWcmMTAyNCkpe2E6e3ZhciBjPWI7Yj1WO3ZhciBkPVcsZT1iLnBlbmRpbmdQcm9wcztzd2l0Y2goYi50YWcpe2Nhc2UgMjpicmVhaztjYXNlIDE2OmJyZWFrO2Nhc2UgMTU6Y2FzZSAwOmJyZWFrO2Nhc2UgMTpOKGIudHlwZSkmJlRlKGIpO2JyZWFrO2Nhc2UgMzpCZyhiKTtVZShiKTtkPWIuc3RhdGVOb2RlO2QucGVuZGluZ0NvbnRleHQmJihkLmNvbnRleHQ9ZC5wZW5kaW5nQ29udGV4dCxkLnBlbmRpbmdDb250ZXh0PW51bGwpO2lmKG51bGw9PT1jfHxudWxsPT09Yy5jaGlsZClCaChiKSxiLmVmZmVjdFRhZyY9LTM7VWgoYik7YnJlYWs7Y2FzZSA1OkRnKGIpO2Q9emcoeWcuY3VycmVudCk7dmFyIGY9Yi50eXBlO2lmKG51bGwhPT1jJiZudWxsIT1iLnN0YXRlTm9kZSlWaChjLGIsZixlLGQpLGMucmVmIT09Yi5yZWYmJihiLmVmZmVjdFRhZ3w9MTI4KTtlbHNlIGlmKGUpe3ZhciBoPVxuemcod2cuY3VycmVudCk7aWYoQmgoYikpe2M9YjtlPXZvaWQgMDtmPWMuc3RhdGVOb2RlO3ZhciBnPWMudHlwZSxrPWMubWVtb2l6ZWRQcm9wcztmW0ZhXT1jO2ZbR2FdPWs7c3dpdGNoKGcpe2Nhc2UgXCJpZnJhbWVcIjpjYXNlIFwib2JqZWN0XCI6Y2FzZSBcImVtYmVkXCI6RyhcImxvYWRcIixmKTticmVhaztjYXNlIFwidmlkZW9cIjpjYXNlIFwiYXVkaW9cIjpmb3IodmFyIGw9MDtsPGJiLmxlbmd0aDtsKyspRyhiYltsXSxmKTticmVhaztjYXNlIFwic291cmNlXCI6RyhcImVycm9yXCIsZik7YnJlYWs7Y2FzZSBcImltZ1wiOmNhc2UgXCJpbWFnZVwiOmNhc2UgXCJsaW5rXCI6RyhcImVycm9yXCIsZik7RyhcImxvYWRcIixmKTticmVhaztjYXNlIFwiZm9ybVwiOkcoXCJyZXNldFwiLGYpO0coXCJzdWJtaXRcIixmKTticmVhaztjYXNlIFwiZGV0YWlsc1wiOkcoXCJ0b2dnbGVcIixmKTticmVhaztjYXNlIFwiaW5wdXRcIjpDYyhmLGspO0coXCJpbnZhbGlkXCIsZik7RmUoZCxcIm9uQ2hhbmdlXCIpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpmLl93cmFwcGVyU3RhdGU9XG57d2FzTXVsdGlwbGU6ISFrLm11bHRpcGxlfTtHKFwiaW52YWxpZFwiLGYpO0ZlKGQsXCJvbkNoYW5nZVwiKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpvZShmLGspLEcoXCJpbnZhbGlkXCIsZiksRmUoZCxcIm9uQ2hhbmdlXCIpfURlKGcsayk7bD1udWxsO2ZvcihlIGluIGspay5oYXNPd25Qcm9wZXJ0eShlKSYmKGg9a1tlXSxcImNoaWxkcmVuXCI9PT1lP1wic3RyaW5nXCI9PT10eXBlb2YgaD9mLnRleHRDb250ZW50IT09aCYmKGw9W1wiY2hpbGRyZW5cIixoXSk6XCJudW1iZXJcIj09PXR5cGVvZiBoJiZmLnRleHRDb250ZW50IT09XCJcIitoJiYobD1bXCJjaGlsZHJlblwiLFwiXCIraF0pOmlhLmhhc093blByb3BlcnR5KGUpJiZudWxsIT1oJiZGZShkLGUpKTtzd2l0Y2goZyl7Y2FzZSBcImlucHV0XCI6VmIoZik7R2MoZixrLCEwKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpWYihmKTtxZShmLGspO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpjYXNlIFwib3B0aW9uXCI6YnJlYWs7ZGVmYXVsdDpcImZ1bmN0aW9uXCI9PT10eXBlb2Ygay5vbkNsaWNrJiZcbihmLm9uY2xpY2s9R2UpfWQ9bDtjLnVwZGF0ZVF1ZXVlPWQ7bnVsbCE9PWQmJlNoKGIpfWVsc2V7az1mO2M9ZTtnPWI7bD05PT09ZC5ub2RlVHlwZT9kOmQub3duZXJEb2N1bWVudDtoPT09cmUuaHRtbCYmKGg9c2UoaykpO2g9PT1yZS5odG1sP1wic2NyaXB0XCI9PT1rPyhrPWwuY3JlYXRlRWxlbWVudChcImRpdlwiKSxrLmlubmVySFRNTD1cIjxzY3JpcHQ+XFx4M2Mvc2NyaXB0PlwiLGw9ay5yZW1vdmVDaGlsZChrLmZpcnN0Q2hpbGQpKTpcInN0cmluZ1wiPT09dHlwZW9mIGMuaXM/bD1sLmNyZWF0ZUVsZW1lbnQoayx7aXM6Yy5pc30pOihsPWwuY3JlYXRlRWxlbWVudChrKSxcInNlbGVjdFwiPT09ayYmKGs9bCxjLm11bHRpcGxlP2subXVsdGlwbGU9ITA6Yy5zaXplJiYoay5zaXplPWMuc2l6ZSkpKTpsPWwuY3JlYXRlRWxlbWVudE5TKGgsayk7az1sO2tbRmFdPWc7a1tHYV09YztjPWs7VGgoYyxiLCExLCExKTtnPWM7dmFyIG49ZCx6PUVlKGYsZSk7c3dpdGNoKGYpe2Nhc2UgXCJpZnJhbWVcIjpjYXNlIFwib2JqZWN0XCI6Y2FzZSBcImVtYmVkXCI6RyhcImxvYWRcIixcbmcpO2Q9ZTticmVhaztjYXNlIFwidmlkZW9cIjpjYXNlIFwiYXVkaW9cIjpmb3IoZD0wO2Q8YmIubGVuZ3RoO2QrKylHKGJiW2RdLGcpO2Q9ZTticmVhaztjYXNlIFwic291cmNlXCI6RyhcImVycm9yXCIsZyk7ZD1lO2JyZWFrO2Nhc2UgXCJpbWdcIjpjYXNlIFwiaW1hZ2VcIjpjYXNlIFwibGlua1wiOkcoXCJlcnJvclwiLGcpO0coXCJsb2FkXCIsZyk7ZD1lO2JyZWFrO2Nhc2UgXCJmb3JtXCI6RyhcInJlc2V0XCIsZyk7RyhcInN1Ym1pdFwiLGcpO2Q9ZTticmVhaztjYXNlIFwiZGV0YWlsc1wiOkcoXCJ0b2dnbGVcIixnKTtkPWU7YnJlYWs7Y2FzZSBcImlucHV0XCI6Q2MoZyxlKTtkPUJjKGcsZSk7RyhcImludmFsaWRcIixnKTtGZShuLFwib25DaGFuZ2VcIik7YnJlYWs7Y2FzZSBcIm9wdGlvblwiOmQ9bGUoZyxlKTticmVhaztjYXNlIFwic2VsZWN0XCI6Zy5fd3JhcHBlclN0YXRlPXt3YXNNdWx0aXBsZTohIWUubXVsdGlwbGV9O2Q9bSh7fSxlLHt2YWx1ZTp2b2lkIDB9KTtHKFwiaW52YWxpZFwiLGcpO0ZlKG4sXCJvbkNoYW5nZVwiKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpvZShnLFxuZSk7ZD1uZShnLGUpO0coXCJpbnZhbGlkXCIsZyk7RmUobixcIm9uQ2hhbmdlXCIpO2JyZWFrO2RlZmF1bHQ6ZD1lfURlKGYsZCk7az12b2lkIDA7bD1mO2g9Zzt2YXIgeD1kO2ZvcihrIGluIHgpaWYoeC5oYXNPd25Qcm9wZXJ0eShrKSl7dmFyIHY9eFtrXTtcInN0eWxlXCI9PT1rP0FlKGgsdik6XCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiPT09az8odj12P3YuX19odG1sOnZvaWQgMCxudWxsIT12JiZ2ZShoLHYpKTpcImNoaWxkcmVuXCI9PT1rP1wic3RyaW5nXCI9PT10eXBlb2Ygdj8oXCJ0ZXh0YXJlYVwiIT09bHx8XCJcIiE9PXYpJiZ3ZShoLHYpOlwibnVtYmVyXCI9PT10eXBlb2YgdiYmd2UoaCxcIlwiK3YpOlwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nXCIhPT1rJiZcInN1cHByZXNzSHlkcmF0aW9uV2FybmluZ1wiIT09ayYmXCJhdXRvRm9jdXNcIiE9PWsmJihpYS5oYXNPd25Qcm9wZXJ0eShrKT9udWxsIT12JiZGZShuLGspOm51bGwhPXYmJnpjKGgsayx2LHopKX1zd2l0Y2goZil7Y2FzZSBcImlucHV0XCI6VmIoZyk7XG5HYyhnLGUsITEpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOlZiKGcpO3FlKGcsZSk7YnJlYWs7Y2FzZSBcIm9wdGlvblwiOm51bGwhPWUudmFsdWUmJmcuc2V0QXR0cmlidXRlKFwidmFsdWVcIixcIlwiK0FjKGUudmFsdWUpKTticmVhaztjYXNlIFwic2VsZWN0XCI6ZD1nO2c9ZTtkLm11bHRpcGxlPSEhZy5tdWx0aXBsZTtrPWcudmFsdWU7bnVsbCE9az9tZShkLCEhZy5tdWx0aXBsZSxrLCExKTpudWxsIT1nLmRlZmF1bHRWYWx1ZSYmbWUoZCwhIWcubXVsdGlwbGUsZy5kZWZhdWx0VmFsdWUsITApO2JyZWFrO2RlZmF1bHQ6XCJmdW5jdGlvblwiPT09dHlwZW9mIGQub25DbGljayYmKGcub25jbGljaz1HZSl9SmUoZixlKSYmU2goYik7Yi5zdGF0ZU5vZGU9Y31udWxsIT09Yi5yZWYmJihiLmVmZmVjdFRhZ3w9MTI4KX1lbHNlIGlmKG51bGw9PT1iLnN0YXRlTm9kZSl0aHJvdyB0KEVycm9yKDE2NikpO2JyZWFrO2Nhc2UgNjppZihjJiZudWxsIT1iLnN0YXRlTm9kZSlXaChjLGIsYy5tZW1vaXplZFByb3BzLFxuZSk7ZWxzZXtpZihcInN0cmluZ1wiIT09dHlwZW9mIGUmJm51bGw9PT1iLnN0YXRlTm9kZSl0aHJvdyB0KEVycm9yKDE2NikpO2M9emcoeWcuY3VycmVudCk7emcod2cuY3VycmVudCk7QmgoYik/KGQ9Yi5zdGF0ZU5vZGUsYz1iLm1lbW9pemVkUHJvcHMsZFtGYV09YixkLm5vZGVWYWx1ZSE9PWMmJlNoKGIpKTooZD1iLGM9KDk9PT1jLm5vZGVUeXBlP2M6Yy5vd25lckRvY3VtZW50KS5jcmVhdGVUZXh0Tm9kZShlKSxjW0ZhXT1iLGQuc3RhdGVOb2RlPWMpfWJyZWFrO2Nhc2UgMTE6YnJlYWs7Y2FzZSAxMzpIKFAsYik7ZT1iLm1lbW9pemVkU3RhdGU7aWYoMCE9PShiLmVmZmVjdFRhZyY2NCkpe2IuZXhwaXJhdGlvblRpbWU9ZDticmVhayBhfWQ9bnVsbCE9PWU7ZT0hMTtudWxsPT09Yz9CaChiKTooZj1jLm1lbW9pemVkU3RhdGUsZT1udWxsIT09ZixkfHxudWxsPT09Znx8KGY9Yy5jaGlsZC5zaWJsaW5nLG51bGwhPT1mJiYoZz1iLmZpcnN0RWZmZWN0LG51bGwhPT1nPyhiLmZpcnN0RWZmZWN0PVxuZixmLm5leHRFZmZlY3Q9Zyk6KGIuZmlyc3RFZmZlY3Q9Yi5sYXN0RWZmZWN0PWYsZi5uZXh0RWZmZWN0PW51bGwpLGYuZWZmZWN0VGFnPTgpKSk7aWYoZCYmIWUmJjAhPT0oYi5tb2RlJjIpKWlmKG51bGw9PT1jJiYhMCE9PWIubWVtb2l6ZWRQcm9wcy51bnN0YWJsZV9hdm9pZFRoaXNGYWxsYmFja3x8MCE9PShQLmN1cnJlbnQmRmcpKVg9PT1FaSYmKFg9R2kpO2Vsc2UgaWYoWD09PUVpfHxYPT09R2kpWD1IaTtpZihkfHxlKWIuZWZmZWN0VGFnfD00O2JyZWFrO2Nhc2UgNzpicmVhaztjYXNlIDg6YnJlYWs7Y2FzZSAxMjpicmVhaztjYXNlIDQ6QmcoYik7VWgoYik7YnJlYWs7Y2FzZSAxMDpJZihiKTticmVhaztjYXNlIDk6YnJlYWs7Y2FzZSAxNDpicmVhaztjYXNlIDE3Ok4oYi50eXBlKSYmVGUoYik7YnJlYWs7Y2FzZSAxODpicmVhaztjYXNlIDE5OkgoUCxiKTtlPWIubWVtb2l6ZWRTdGF0ZTtpZihudWxsPT09ZSlicmVhaztmPTAhPT0oYi5lZmZlY3RUYWcmNjQpO2c9ZS5yZW5kZXJpbmc7XG5pZihudWxsPT09ZylpZihmKSRoKGUsITEpO2Vsc2V7aWYoWCE9PUVpfHxudWxsIT09YyYmMCE9PShjLmVmZmVjdFRhZyY2NCkpZm9yKGM9Yi5jaGlsZDtudWxsIT09Yzspe2c9SGcoYyk7aWYobnVsbCE9PWcpe2IuZWZmZWN0VGFnfD02NDskaChlLCExKTtjPWcudXBkYXRlUXVldWU7bnVsbCE9PWMmJihiLnVwZGF0ZVF1ZXVlPWMsYi5lZmZlY3RUYWd8PTQpO2IuZmlyc3RFZmZlY3Q9Yi5sYXN0RWZmZWN0PW51bGw7Zm9yKGM9Yi5jaGlsZDtudWxsIT09YzspZT1jLGY9ZCxlLmVmZmVjdFRhZyY9MixlLm5leHRFZmZlY3Q9bnVsbCxlLmZpcnN0RWZmZWN0PW51bGwsZS5sYXN0RWZmZWN0PW51bGwsZz1lLmFsdGVybmF0ZSxudWxsPT09Zz8oZS5jaGlsZEV4cGlyYXRpb25UaW1lPTAsZS5leHBpcmF0aW9uVGltZT1mLGUuY2hpbGQ9bnVsbCxlLm1lbW9pemVkUHJvcHM9bnVsbCxlLm1lbW9pemVkU3RhdGU9bnVsbCxlLnVwZGF0ZVF1ZXVlPW51bGwsZS5kZXBlbmRlbmNpZXM9bnVsbCk6KGUuY2hpbGRFeHBpcmF0aW9uVGltZT1cbmcuY2hpbGRFeHBpcmF0aW9uVGltZSxlLmV4cGlyYXRpb25UaW1lPWcuZXhwaXJhdGlvblRpbWUsZS5jaGlsZD1nLmNoaWxkLGUubWVtb2l6ZWRQcm9wcz1nLm1lbW9pemVkUHJvcHMsZS5tZW1vaXplZFN0YXRlPWcubWVtb2l6ZWRTdGF0ZSxlLnVwZGF0ZVF1ZXVlPWcudXBkYXRlUXVldWUsZj1nLmRlcGVuZGVuY2llcyxlLmRlcGVuZGVuY2llcz1udWxsPT09Zj9udWxsOntleHBpcmF0aW9uVGltZTpmLmV4cGlyYXRpb25UaW1lLGZpcnN0Q29udGV4dDpmLmZpcnN0Q29udGV4dCxyZXNwb25kZXJzOmYucmVzcG9uZGVyc30pLGM9Yy5zaWJsaW5nO0ooUCxQLmN1cnJlbnQmRWd8R2csYik7Yj1iLmNoaWxkO2JyZWFrIGF9Yz1jLnNpYmxpbmd9fWVsc2V7aWYoIWYpaWYoYz1IZyhnKSxudWxsIT09Yyl7aWYoYi5lZmZlY3RUYWd8PTY0LGY9ITAsJGgoZSwhMCksbnVsbD09PWUudGFpbCYmXCJoaWRkZW5cIj09PWUudGFpbE1vZGUpe2Q9Yy51cGRhdGVRdWV1ZTtudWxsIT09ZCYmKGIudXBkYXRlUXVldWU9XG5kLGIuZWZmZWN0VGFnfD00KTtiPWIubGFzdEVmZmVjdD1lLmxhc3RFZmZlY3Q7bnVsbCE9PWImJihiLm5leHRFZmZlY3Q9bnVsbCk7YnJlYWt9fWVsc2Ugc2YoKT5lLnRhaWxFeHBpcmF0aW9uJiYxPGQmJihiLmVmZmVjdFRhZ3w9NjQsZj0hMCwkaChlLCExKSxiLmV4cGlyYXRpb25UaW1lPWIuY2hpbGRFeHBpcmF0aW9uVGltZT1kLTEpO2UuaXNCYWNrd2FyZHM/KGcuc2libGluZz1iLmNoaWxkLGIuY2hpbGQ9Zyk6KGQ9ZS5sYXN0LG51bGwhPT1kP2Quc2libGluZz1nOmIuY2hpbGQ9ZyxlLmxhc3Q9Zyl9aWYobnVsbCE9PWUudGFpbCl7MD09PWUudGFpbEV4cGlyYXRpb24mJihlLnRhaWxFeHBpcmF0aW9uPXNmKCkrNTAwKTtkPWUudGFpbDtlLnJlbmRlcmluZz1kO2UudGFpbD1kLnNpYmxpbmc7ZS5sYXN0RWZmZWN0PWIubGFzdEVmZmVjdDtkLnNpYmxpbmc9bnVsbDtjPVAuY3VycmVudDtjPWY/YyZFZ3xHZzpjJkVnO0ooUCxjLGIpO2I9ZDticmVhayBhfWJyZWFrO2Nhc2UgMjA6YnJlYWs7XG5kZWZhdWx0OnRocm93IHQoRXJyb3IoMTU2KSk7fWI9bnVsbH1kPVY7aWYoMT09PVd8fDEhPT1kLmNoaWxkRXhwaXJhdGlvblRpbWUpe2M9MDtmb3IoZT1kLmNoaWxkO251bGwhPT1lOylmPWUuZXhwaXJhdGlvblRpbWUsZz1lLmNoaWxkRXhwaXJhdGlvblRpbWUsZj5jJiYoYz1mKSxnPmMmJihjPWcpLGU9ZS5zaWJsaW5nO2QuY2hpbGRFeHBpcmF0aW9uVGltZT1jfWlmKG51bGwhPT1iKXJldHVybiBiO251bGwhPT1hJiYwPT09KGEuZWZmZWN0VGFnJjEwMjQpJiYobnVsbD09PWEuZmlyc3RFZmZlY3QmJihhLmZpcnN0RWZmZWN0PVYuZmlyc3RFZmZlY3QpLG51bGwhPT1WLmxhc3RFZmZlY3QmJihudWxsIT09YS5sYXN0RWZmZWN0JiYoYS5sYXN0RWZmZWN0Lm5leHRFZmZlY3Q9Vi5maXJzdEVmZmVjdCksYS5sYXN0RWZmZWN0PVYubGFzdEVmZmVjdCksMTxWLmVmZmVjdFRhZyYmKG51bGwhPT1hLmxhc3RFZmZlY3Q/YS5sYXN0RWZmZWN0Lm5leHRFZmZlY3Q9VjphLmZpcnN0RWZmZWN0PVYsXG5hLmxhc3RFZmZlY3Q9VikpfWVsc2V7Yj1haShWLFcpO2lmKG51bGwhPT1iKXJldHVybiBiLmVmZmVjdFRhZyY9MTAyMyxiO251bGwhPT1hJiYoYS5maXJzdEVmZmVjdD1hLmxhc3RFZmZlY3Q9bnVsbCxhLmVmZmVjdFRhZ3w9MTAyNCl9Yj1WLnNpYmxpbmc7aWYobnVsbCE9PWIpcmV0dXJuIGI7Vj1hfXdoaWxlKG51bGwhPT1WKTtYPT09RWkmJihYPUlpKTtyZXR1cm4gbnVsbH1mdW5jdGlvbiBpaihhKXt2YXIgYj10ZigpO3ZmKDk5LG5qLmJpbmQobnVsbCxhLGIpKTtudWxsIT09UWkmJndmKDk3LGZ1bmN0aW9uKCl7Y2ooKTtyZXR1cm4gbnVsbH0pO3JldHVybiBudWxsfVxuZnVuY3Rpb24gbmooYSxiKXtjaigpO2lmKChVJihDaXxEaSkpIT09VCl0aHJvdyB0KEVycm9yKDMyNykpO3ZhciBjPWEuZmluaXNoZWRXb3JrLGQ9YS5maW5pc2hlZEV4cGlyYXRpb25UaW1lO2lmKG51bGw9PT1jKXJldHVybiBudWxsO2EuZmluaXNoZWRXb3JrPW51bGw7YS5maW5pc2hlZEV4cGlyYXRpb25UaW1lPTA7aWYoYz09PWEuY3VycmVudCl0aHJvdyB0KEVycm9yKDE3NykpO2EuY2FsbGJhY2tOb2RlPW51bGw7YS5jYWxsYmFja0V4cGlyYXRpb25UaW1lPTA7dmFyIGU9Yy5leHBpcmF0aW9uVGltZSxmPWMuY2hpbGRFeHBpcmF0aW9uVGltZTtlPWY+ZT9mOmU7YS5maXJzdFBlbmRpbmdUaW1lPWU7ZTxhLmxhc3RQZW5kaW5nVGltZSYmKGEubGFzdFBlbmRpbmdUaW1lPWUpO2E9PT1KaSYmKFY9Smk9bnVsbCxXPTApOzE8Yy5lZmZlY3RUYWc/bnVsbCE9PWMubGFzdEVmZmVjdD8oYy5sYXN0RWZmZWN0Lm5leHRFZmZlY3Q9YyxlPWMuZmlyc3RFZmZlY3QpOmU9YzplPWMuZmlyc3RFZmZlY3Q7XG5pZihudWxsIT09ZSl7Zj1VO1V8PURpO0FpLmN1cnJlbnQ9bnVsbDtIZT1RZDt2YXIgaD1hZSgpO2lmKGJlKGgpKXtpZihcInNlbGVjdGlvblN0YXJ0XCJpbiBoKXZhciBnPXtzdGFydDpoLnNlbGVjdGlvblN0YXJ0LGVuZDpoLnNlbGVjdGlvbkVuZH07ZWxzZSBhOntnPShnPWgub3duZXJEb2N1bWVudCkmJmcuZGVmYXVsdFZpZXd8fHdpbmRvdzt2YXIgaz1nLmdldFNlbGVjdGlvbiYmZy5nZXRTZWxlY3Rpb24oKTtpZihrJiYwIT09ay5yYW5nZUNvdW50KXtnPWsuYW5jaG9yTm9kZTt2YXIgbD1rLmFuY2hvck9mZnNldCxuPWsuZm9jdXNOb2RlO2s9ay5mb2N1c09mZnNldDt0cnl7Zy5ub2RlVHlwZSxuLm5vZGVUeXBlfWNhdGNoKHpiKXtnPW51bGw7YnJlYWsgYX12YXIgej0wLHg9LTEsdj0tMSxyYj0wLEJlPTAsdT1oLHc9bnVsbDtiOmZvcig7Oyl7Zm9yKHZhciBDOzspe3UhPT1nfHwwIT09bCYmMyE9PXUubm9kZVR5cGV8fCh4PXorbCk7dSE9PW58fDAhPT1rJiYzIT09dS5ub2RlVHlwZXx8XG4odj16K2spOzM9PT11Lm5vZGVUeXBlJiYoeis9dS5ub2RlVmFsdWUubGVuZ3RoKTtpZihudWxsPT09KEM9dS5maXJzdENoaWxkKSlicmVhazt3PXU7dT1DfWZvcig7Oyl7aWYodT09PWgpYnJlYWsgYjt3PT09ZyYmKytyYj09PWwmJih4PXopO3c9PT1uJiYrK0JlPT09ayYmKHY9eik7aWYobnVsbCE9PShDPXUubmV4dFNpYmxpbmcpKWJyZWFrO3U9dzt3PXUucGFyZW50Tm9kZX11PUN9Zz0tMT09PXh8fC0xPT09dj9udWxsOntzdGFydDp4LGVuZDp2fX1lbHNlIGc9bnVsbH1nPWd8fHtzdGFydDowLGVuZDowfX1lbHNlIGc9bnVsbDtJZT17Zm9jdXNlZEVsZW06aCxzZWxlY3Rpb25SYW5nZTpnfTtRZD0hMTtZPWU7ZG8gdHJ5e2Zvcig7bnVsbCE9PVk7KXtpZigwIT09KFkuZWZmZWN0VGFnJjI1Nikpe3ZhciBJPVkuYWx0ZXJuYXRlO2g9WTtzd2l0Y2goaC50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTU6aGkoSmcsSWcsaCk7YnJlYWs7Y2FzZSAxOmlmKGguZWZmZWN0VGFnJjI1NiYmbnVsbCE9PVxuSSl7dmFyIEU9SS5tZW1vaXplZFByb3BzLHVhPUkubWVtb2l6ZWRTdGF0ZSxnaD1oLnN0YXRlTm9kZSxvaj1naC5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZShoLmVsZW1lbnRUeXBlPT09aC50eXBlP0U6QWYoaC50eXBlLEUpLHVhKTtnaC5fX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEJlZm9yZVVwZGF0ZT1van1icmVhaztjYXNlIDM6Y2FzZSA1OmNhc2UgNjpjYXNlIDQ6Y2FzZSAxNzpicmVhaztkZWZhdWx0OnRocm93IHQoRXJyb3IoMTYzKSk7fX1ZPVkubmV4dEVmZmVjdH19Y2F0Y2goemIpe2lmKG51bGw9PT1ZKXRocm93IHQoRXJyb3IoMzMwKSk7ZmkoWSx6Yik7WT1ZLm5leHRFZmZlY3R9d2hpbGUobnVsbCE9PVkpO1k9ZTtkbyB0cnl7Zm9yKEk9YjtudWxsIT09WTspe3ZhciBBPVkuZWZmZWN0VGFnO0EmMTYmJndlKFkuc3RhdGVOb2RlLFwiXCIpO2lmKEEmMTI4KXt2YXIgcD1ZLmFsdGVybmF0ZTtpZihudWxsIT09cCl7dmFyIHI9cC5yZWY7bnVsbCE9PXImJihcImZ1bmN0aW9uXCI9PT10eXBlb2Ygcj9cbnIobnVsbCk6ci5jdXJyZW50PW51bGwpfX1zd2l0Y2goQSYxNCl7Y2FzZSAyOm5pKFkpO1kuZWZmZWN0VGFnJj0tMzticmVhaztjYXNlIDY6bmkoWSk7WS5lZmZlY3RUYWcmPS0zO29pKFkuYWx0ZXJuYXRlLFkpO2JyZWFrO2Nhc2UgNDpvaShZLmFsdGVybmF0ZSxZKTticmVhaztjYXNlIDg6RT1ZO2tpKEUsSSk7RS5yZXR1cm49bnVsbDtFLmNoaWxkPW51bGw7RS5tZW1vaXplZFN0YXRlPW51bGw7RS51cGRhdGVRdWV1ZT1udWxsO0UuZGVwZW5kZW5jaWVzPW51bGw7dmFyIEs9RS5hbHRlcm5hdGU7bnVsbCE9PUsmJihLLnJldHVybj1udWxsLEsuY2hpbGQ9bnVsbCxLLm1lbW9pemVkU3RhdGU9bnVsbCxLLnVwZGF0ZVF1ZXVlPW51bGwsSy5kZXBlbmRlbmNpZXM9bnVsbCl9WT1ZLm5leHRFZmZlY3R9fWNhdGNoKHpiKXtpZihudWxsPT09WSl0aHJvdyB0KEVycm9yKDMzMCkpO2ZpKFksemIpO1k9WS5uZXh0RWZmZWN0fXdoaWxlKG51bGwhPT1ZKTtyPUllO3A9YWUoKTtBPXIuZm9jdXNlZEVsZW07XG5JPXIuc2VsZWN0aW9uUmFuZ2U7aWYocCE9PUEmJkEmJkEub3duZXJEb2N1bWVudCYmJGQoQS5vd25lckRvY3VtZW50LmRvY3VtZW50RWxlbWVudCxBKSl7bnVsbCE9PUkmJmJlKEEpJiYocD1JLnN0YXJ0LHI9SS5lbmQsdm9pZCAwPT09ciYmKHI9cCksXCJzZWxlY3Rpb25TdGFydFwiaW4gQT8oQS5zZWxlY3Rpb25TdGFydD1wLEEuc2VsZWN0aW9uRW5kPU1hdGgubWluKHIsQS52YWx1ZS5sZW5ndGgpKToocj0ocD1BLm93bmVyRG9jdW1lbnR8fGRvY3VtZW50KSYmcC5kZWZhdWx0Vmlld3x8d2luZG93LHIuZ2V0U2VsZWN0aW9uJiYocj1yLmdldFNlbGVjdGlvbigpLEU9QS50ZXh0Q29udGVudC5sZW5ndGgsSz1NYXRoLm1pbihJLnN0YXJ0LEUpLEk9dm9pZCAwPT09SS5lbmQ/SzpNYXRoLm1pbihJLmVuZCxFKSwhci5leHRlbmQmJks+SSYmKEU9SSxJPUssSz1FKSxFPVpkKEEsSyksdWE9WmQoQSxJKSxFJiZ1YSYmKDEhPT1yLnJhbmdlQ291bnR8fHIuYW5jaG9yTm9kZSE9PUUubm9kZXx8ci5hbmNob3JPZmZzZXQhPT1cbkUub2Zmc2V0fHxyLmZvY3VzTm9kZSE9PXVhLm5vZGV8fHIuZm9jdXNPZmZzZXQhPT11YS5vZmZzZXQpJiYocD1wLmNyZWF0ZVJhbmdlKCkscC5zZXRTdGFydChFLm5vZGUsRS5vZmZzZXQpLHIucmVtb3ZlQWxsUmFuZ2VzKCksSz5JPyhyLmFkZFJhbmdlKHApLHIuZXh0ZW5kKHVhLm5vZGUsdWEub2Zmc2V0KSk6KHAuc2V0RW5kKHVhLm5vZGUsdWEub2Zmc2V0KSxyLmFkZFJhbmdlKHApKSkpKSk7cD1bXTtmb3Iocj1BO3I9ci5wYXJlbnROb2RlOykxPT09ci5ub2RlVHlwZSYmcC5wdXNoKHtlbGVtZW50OnIsbGVmdDpyLnNjcm9sbExlZnQsdG9wOnIuc2Nyb2xsVG9wfSk7XCJmdW5jdGlvblwiPT09dHlwZW9mIEEuZm9jdXMmJkEuZm9jdXMoKTtmb3IoQT0wO0E8cC5sZW5ndGg7QSsrKXI9cFtBXSxyLmVsZW1lbnQuc2Nyb2xsTGVmdD1yLmxlZnQsci5lbGVtZW50LnNjcm9sbFRvcD1yLnRvcH1JZT1udWxsO1FkPSEhSGU7SGU9bnVsbDthLmN1cnJlbnQ9YztZPWU7ZG8gdHJ5e2ZvcihBPWQ7bnVsbCE9PVxuWTspe3ZhciAkYT1ZLmVmZmVjdFRhZztpZigkYSYzNil7dmFyIG5jPVkuYWx0ZXJuYXRlO3A9WTtyPUE7c3dpdGNoKHAudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE1OmhpKE1nLE5nLHApO2JyZWFrO2Nhc2UgMTp2YXIgbWQ9cC5zdGF0ZU5vZGU7aWYocC5lZmZlY3RUYWcmNClpZihudWxsPT09bmMpbWQuY29tcG9uZW50RGlkTW91bnQoKTtlbHNle3ZhciBGaj1wLmVsZW1lbnRUeXBlPT09cC50eXBlP25jLm1lbW9pemVkUHJvcHM6QWYocC50eXBlLG5jLm1lbW9pemVkUHJvcHMpO21kLmNvbXBvbmVudERpZFVwZGF0ZShGaixuYy5tZW1vaXplZFN0YXRlLG1kLl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90QmVmb3JlVXBkYXRlKX12YXIgWGg9cC51cGRhdGVRdWV1ZTtudWxsIT09WGgmJllmKHAsWGgsbWQscik7YnJlYWs7Y2FzZSAzOnZhciBZaD1wLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1ZaCl7Sz1udWxsO2lmKG51bGwhPT1wLmNoaWxkKXN3aXRjaChwLmNoaWxkLnRhZyl7Y2FzZSA1Oks9XG5wLmNoaWxkLnN0YXRlTm9kZTticmVhaztjYXNlIDE6Sz1wLmNoaWxkLnN0YXRlTm9kZX1ZZihwLFloLEsscil9YnJlYWs7Y2FzZSA1OnZhciBHaj1wLnN0YXRlTm9kZTtudWxsPT09bmMmJnAuZWZmZWN0VGFnJjQmJihyPUdqLEplKHAudHlwZSxwLm1lbW9pemVkUHJvcHMpJiZyLmZvY3VzKCkpO2JyZWFrO2Nhc2UgNjpicmVhaztjYXNlIDQ6YnJlYWs7Y2FzZSAxMjpicmVhaztjYXNlIDEzOmNhc2UgMTk6Y2FzZSAxNzpjYXNlIDIwOmJyZWFrO2RlZmF1bHQ6dGhyb3cgdChFcnJvcigxNjMpKTt9fWlmKCRhJjEyOCl7dmFyIG5kPVkucmVmO2lmKG51bGwhPT1uZCl7dmFyIFpoPVkuc3RhdGVOb2RlO3N3aXRjaChZLnRhZyl7Y2FzZSA1OnZhciBnZj1aaDticmVhaztkZWZhdWx0OmdmPVpofVwiZnVuY3Rpb25cIj09PXR5cGVvZiBuZD9uZChnZik6bmQuY3VycmVudD1nZn19JGEmNTEyJiYoUGk9ITApO1k9WS5uZXh0RWZmZWN0fX1jYXRjaCh6Yil7aWYobnVsbD09PVkpdGhyb3cgdChFcnJvcigzMzApKTtcbmZpKFksemIpO1k9WS5uZXh0RWZmZWN0fXdoaWxlKG51bGwhPT1ZKTtZPW51bGw7bmYoKTtVPWZ9ZWxzZSBhLmN1cnJlbnQ9YztpZihQaSlQaT0hMSxRaT1hLFNpPWQsUmk9YjtlbHNlIGZvcihZPWU7bnVsbCE9PVk7KWI9WS5uZXh0RWZmZWN0LFkubmV4dEVmZmVjdD1udWxsLFk9YjtiPWEuZmlyc3RQZW5kaW5nVGltZTswIT09Yj8oJGE9Y2coKSwkYT16ZigkYSxiKSxaaShhLCRhLGIpKTp4aT1udWxsO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBwaiYmcGooYy5zdGF0ZU5vZGUsZCk7MTA3Mzc0MTgyMz09PWI/YT09PVZpP1VpKys6KFVpPTAsVmk9YSk6VWk9MDtpZih1aSl0aHJvdyB1aT0hMSxhPXZpLHZpPW51bGwsYTtpZigoVSZCaSkhPT1UKXJldHVybiBudWxsO08oKTtyZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIGNqKCl7aWYobnVsbD09PVFpKXJldHVybiExO3ZhciBhPVFpLGI9U2ksYz1SaTtRaT1udWxsO1NpPTA7Umk9OTA7cmV0dXJuIHZmKDk3PGM/OTc6Yyxxai5iaW5kKG51bGwsYSxiKSl9ZnVuY3Rpb24gcWooYSl7aWYoKFUmKENpfERpKSkhPT1UKXRocm93IHQoRXJyb3IoMzMxKSk7dmFyIGI9VTtVfD1EaTtmb3IoYT1hLmN1cnJlbnQuZmlyc3RFZmZlY3Q7bnVsbCE9PWE7KXt0cnl7dmFyIGM9YTtpZigwIT09KGMuZWZmZWN0VGFnJjUxMikpc3dpdGNoKGMudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE1OmhpKFBnLElnLGMpLGhpKElnLE9nLGMpfX1jYXRjaChkKXtpZihudWxsPT09YSl0aHJvdyB0KEVycm9yKDMzMCkpO2ZpKGEsZCl9Yz1hLm5leHRFZmZlY3Q7YS5uZXh0RWZmZWN0PW51bGw7YT1jfVU9YjtPKCk7cmV0dXJuITB9XG5mdW5jdGlvbiByaihhLGIsYyl7Yj1iaShjLGIpO2I9dGkoYSxiLDEwNzM3NDE4MjMpO1NmKGEsYik7YT1ZaShhLDEwNzM3NDE4MjMpO251bGwhPT1hJiZaaShhLDk5LDEwNzM3NDE4MjMpfWZ1bmN0aW9uIGZpKGEsYil7aWYoMz09PWEudGFnKXJqKGEsYSxiKTtlbHNlIGZvcih2YXIgYz1hLnJldHVybjtudWxsIT09Yzspe2lmKDM9PT1jLnRhZyl7cmooYyxhLGIpO2JyZWFrfWVsc2UgaWYoMT09PWMudGFnKXt2YXIgZD1jLnN0YXRlTm9kZTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy50eXBlLmdldERlcml2ZWRTdGF0ZUZyb21FcnJvcnx8XCJmdW5jdGlvblwiPT09dHlwZW9mIGQuY29tcG9uZW50RGlkQ2F0Y2gmJihudWxsPT09eGl8fCF4aS5oYXMoZCkpKXthPWJpKGIsYSk7YT13aShjLGEsMTA3Mzc0MTgyMyk7U2YoYyxhKTtjPVlpKGMsMTA3Mzc0MTgyMyk7bnVsbCE9PWMmJlppKGMsOTksMTA3Mzc0MTgyMyk7YnJlYWt9fWM9Yy5yZXR1cm59fVxuZnVuY3Rpb24ga2ooYSxiLGMpe3ZhciBkPWEucGluZ0NhY2hlO251bGwhPT1kJiZkLmRlbGV0ZShiKTtKaT09PWEmJlc9PT1jP1g9PT1IaXx8WD09PUdpJiYxMDczNzQxODIzPT09S2kmJnNmKCktcGk8T2k/aGooYSxXKTpOaT0hMDphLmxhc3RQZW5kaW5nVGltZTxjfHwoYj1hLnBpbmdUaW1lLDAhPT1iJiZiPGN8fChhLnBpbmdUaW1lPWMsYS5maW5pc2hlZEV4cGlyYXRpb25UaW1lPT09YyYmKGEuZmluaXNoZWRFeHBpcmF0aW9uVGltZT0wLGEuZmluaXNoZWRXb3JrPW51bGwpLGI9Y2coKSxiPXpmKGIsYyksWmkoYSxiLGMpKSl9ZnVuY3Rpb24gcmkoYSxiKXt2YXIgYz1hLnN0YXRlTm9kZTtudWxsIT09YyYmYy5kZWxldGUoYik7Yz1jZygpO2I9ZGcoYyxhLG51bGwpO2M9emYoYyxiKTthPVlpKGEsYik7bnVsbCE9PWEmJlppKGEsYyxiKX12YXIgbWo9dm9pZCAwO1xubWo9ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPWIuZXhwaXJhdGlvblRpbWU7aWYobnVsbCE9PWEpe3ZhciBlPWIucGVuZGluZ1Byb3BzO2lmKGEubWVtb2l6ZWRQcm9wcyE9PWV8fE0uY3VycmVudClMZj0hMDtlbHNlIGlmKGQ8Yyl7TGY9ITE7c3dpdGNoKGIudGFnKXtjYXNlIDM6TmgoYik7Q2goKTticmVhaztjYXNlIDU6Q2coYik7aWYoYi5tb2RlJjQmJjEhPT1jJiZlLmhpZGRlbilyZXR1cm4gYi5leHBpcmF0aW9uVGltZT1iLmNoaWxkRXhwaXJhdGlvblRpbWU9MSxudWxsO2JyZWFrO2Nhc2UgMTpOKGIudHlwZSkmJlhlKGIpO2JyZWFrO2Nhc2UgNDpBZyhiLGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pO2JyZWFrO2Nhc2UgMTA6SGYoYixiLm1lbW9pemVkUHJvcHMudmFsdWUpO2JyZWFrO2Nhc2UgMTM6aWYobnVsbCE9PWIubWVtb2l6ZWRTdGF0ZSl7ZD1iLmNoaWxkLmNoaWxkRXhwaXJhdGlvblRpbWU7aWYoMCE9PWQmJmQ+PWMpcmV0dXJuIFBoKGEsYixjKTtKKFAsUC5jdXJyZW50JlxuRWcsYik7Yj1GaChhLGIsYyk7cmV0dXJuIG51bGwhPT1iP2Iuc2libGluZzpudWxsfUooUCxQLmN1cnJlbnQmRWcsYik7YnJlYWs7Y2FzZSAxOTpkPWIuY2hpbGRFeHBpcmF0aW9uVGltZT49YztpZigwIT09KGEuZWZmZWN0VGFnJjY0KSl7aWYoZClyZXR1cm4gUmgoYSxiLGMpO2IuZWZmZWN0VGFnfD02NH1lPWIubWVtb2l6ZWRTdGF0ZTtudWxsIT09ZSYmKGUucmVuZGVyaW5nPW51bGwsZS50YWlsPW51bGwpO0ooUCxQLmN1cnJlbnQsYik7aWYoIWQpcmV0dXJuIG51bGx9cmV0dXJuIEZoKGEsYixjKX19ZWxzZSBMZj0hMTtiLmV4cGlyYXRpb25UaW1lPTA7c3dpdGNoKGIudGFnKXtjYXNlIDI6ZD1iLnR5cGU7bnVsbCE9PWEmJihhLmFsdGVybmF0ZT1udWxsLGIuYWx0ZXJuYXRlPW51bGwsYi5lZmZlY3RUYWd8PTIpO2E9Yi5wZW5kaW5nUHJvcHM7ZT1TZShiLEwuY3VycmVudCk7S2YoYixjKTtlPWRoKG51bGwsYixkLGEsZSxjKTtiLmVmZmVjdFRhZ3w9MTtpZihcIm9iamVjdFwiPT09dHlwZW9mIGUmJlxubnVsbCE9PWUmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLnJlbmRlciYmdm9pZCAwPT09ZS4kJHR5cGVvZil7Yi50YWc9MTtpaCgpO2lmKE4oZCkpe3ZhciBmPSEwO1hlKGIpfWVsc2UgZj0hMTtiLm1lbW9pemVkU3RhdGU9bnVsbCE9PWUuc3RhdGUmJnZvaWQgMCE9PWUuc3RhdGU/ZS5zdGF0ZTpudWxsO3ZhciBoPWQuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBoJiZiZyhiLGQsaCxhKTtlLnVwZGF0ZXI9Zmc7Yi5zdGF0ZU5vZGU9ZTtlLl9yZWFjdEludGVybmFsRmliZXI9YjtqZyhiLGQsYSxjKTtiPU1oKG51bGwsYixkLCEwLGYsYyl9ZWxzZSBiLnRhZz0wLFMobnVsbCxiLGUsYyksYj1iLmNoaWxkO3JldHVybiBiO2Nhc2UgMTY6ZT1iLmVsZW1lbnRUeXBlO251bGwhPT1hJiYoYS5hbHRlcm5hdGU9bnVsbCxiLmFsdGVybmF0ZT1udWxsLGIuZWZmZWN0VGFnfD0yKTthPWIucGVuZGluZ1Byb3BzO2U9QmYoZSk7Yi50eXBlPWU7Zj1iLnRhZz1zaihlKTtcbmE9QWYoZSxhKTtzd2l0Y2goZil7Y2FzZSAwOmI9SmgobnVsbCxiLGUsYSxjKTticmVhaztjYXNlIDE6Yj1MaChudWxsLGIsZSxhLGMpO2JyZWFrO2Nhc2UgMTE6Yj1FaChudWxsLGIsZSxhLGMpO2JyZWFrO2Nhc2UgMTQ6Yj1HaChudWxsLGIsZSxBZihlLnR5cGUsYSksZCxjKTticmVhaztkZWZhdWx0OnRocm93IHQoRXJyb3IoMzA2KSxlLFwiXCIpO31yZXR1cm4gYjtjYXNlIDA6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09ZD9lOkFmKGQsZSksSmgoYSxiLGQsZSxjKTtjYXNlIDE6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09ZD9lOkFmKGQsZSksTGgoYSxiLGQsZSxjKTtjYXNlIDM6TmgoYik7ZD1iLnVwZGF0ZVF1ZXVlO2lmKG51bGw9PT1kKXRocm93IHQoRXJyb3IoMjgyKSk7ZT1iLm1lbW9pemVkU3RhdGU7ZT1udWxsIT09ZT9lLmVsZW1lbnQ6bnVsbDtXZihiLGQsYi5wZW5kaW5nUHJvcHMsXG5udWxsLGMpO2Q9Yi5tZW1vaXplZFN0YXRlLmVsZW1lbnQ7aWYoZD09PWUpQ2goKSxiPUZoKGEsYixjKTtlbHNle2U9Yi5zdGF0ZU5vZGU7aWYoZT0obnVsbD09PWF8fG51bGw9PT1hLmNoaWxkKSYmZS5oeWRyYXRlKXVoPU5lKGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8uZmlyc3RDaGlsZCksdGg9YixlPXZoPSEwO2U/KGIuZWZmZWN0VGFnfD0yLGIuY2hpbGQ9dWcoYixudWxsLGQsYykpOihTKGEsYixkLGMpLENoKCkpO2I9Yi5jaGlsZH1yZXR1cm4gYjtjYXNlIDU6cmV0dXJuIENnKGIpLG51bGw9PT1hJiZ6aChiKSxkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGY9bnVsbCE9PWE/YS5tZW1vaXplZFByb3BzOm51bGwsaD1lLmNoaWxkcmVuLEtlKGQsZSk/aD1udWxsOm51bGwhPT1mJiZLZShkLGYpJiYoYi5lZmZlY3RUYWd8PTE2KSxLaChhLGIpLGIubW9kZSY0JiYxIT09YyYmZS5oaWRkZW4/KGIuZXhwaXJhdGlvblRpbWU9Yi5jaGlsZEV4cGlyYXRpb25UaW1lPTEsYj1udWxsKTpcbihTKGEsYixoLGMpLGI9Yi5jaGlsZCksYjtjYXNlIDY6cmV0dXJuIG51bGw9PT1hJiZ6aChiKSxudWxsO2Nhc2UgMTM6cmV0dXJuIFBoKGEsYixjKTtjYXNlIDQ6cmV0dXJuIEFnKGIsYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyksZD1iLnBlbmRpbmdQcm9wcyxudWxsPT09YT9iLmNoaWxkPXRnKGIsbnVsbCxkLGMpOlMoYSxiLGQsYyksYi5jaGlsZDtjYXNlIDExOnJldHVybiBkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGU9Yi5lbGVtZW50VHlwZT09PWQ/ZTpBZihkLGUpLEVoKGEsYixkLGUsYyk7Y2FzZSA3OnJldHVybiBTKGEsYixiLnBlbmRpbmdQcm9wcyxjKSxiLmNoaWxkO2Nhc2UgODpyZXR1cm4gUyhhLGIsYi5wZW5kaW5nUHJvcHMuY2hpbGRyZW4sYyksYi5jaGlsZDtjYXNlIDEyOnJldHVybiBTKGEsYixiLnBlbmRpbmdQcm9wcy5jaGlsZHJlbixjKSxiLmNoaWxkO2Nhc2UgMTA6YTp7ZD1iLnR5cGUuX2NvbnRleHQ7ZT1iLnBlbmRpbmdQcm9wcztoPWIubWVtb2l6ZWRQcm9wcztcbmY9ZS52YWx1ZTtIZihiLGYpO2lmKG51bGwhPT1oKXt2YXIgZz1oLnZhbHVlO2Y9aGQoZyxmKT8wOihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5fY2FsY3VsYXRlQ2hhbmdlZEJpdHM/ZC5fY2FsY3VsYXRlQ2hhbmdlZEJpdHMoZyxmKToxMDczNzQxODIzKXwwO2lmKDA9PT1mKXtpZihoLmNoaWxkcmVuPT09ZS5jaGlsZHJlbiYmIU0uY3VycmVudCl7Yj1GaChhLGIsYyk7YnJlYWsgYX19ZWxzZSBmb3IoZz1iLmNoaWxkLG51bGwhPT1nJiYoZy5yZXR1cm49Yik7bnVsbCE9PWc7KXt2YXIgaz1nLmRlcGVuZGVuY2llcztpZihudWxsIT09ayl7aD1nLmNoaWxkO2Zvcih2YXIgbD1rLmZpcnN0Q29udGV4dDtudWxsIT09bDspe2lmKGwuY29udGV4dD09PWQmJjAhPT0obC5vYnNlcnZlZEJpdHMmZikpezE9PT1nLnRhZyYmKGw9UWYoYyxudWxsKSxsLnRhZz0yLFNmKGcsbCkpO2cuZXhwaXJhdGlvblRpbWU8YyYmKGcuZXhwaXJhdGlvblRpbWU9Yyk7bD1nLmFsdGVybmF0ZTtudWxsIT09bCYmbC5leHBpcmF0aW9uVGltZTxcbmMmJihsLmV4cGlyYXRpb25UaW1lPWMpO0pmKGcucmV0dXJuLGMpO2suZXhwaXJhdGlvblRpbWU8YyYmKGsuZXhwaXJhdGlvblRpbWU9Yyk7YnJlYWt9bD1sLm5leHR9fWVsc2UgaD0xMD09PWcudGFnP2cudHlwZT09PWIudHlwZT9udWxsOmcuY2hpbGQ6Zy5jaGlsZDtpZihudWxsIT09aCloLnJldHVybj1nO2Vsc2UgZm9yKGg9ZztudWxsIT09aDspe2lmKGg9PT1iKXtoPW51bGw7YnJlYWt9Zz1oLnNpYmxpbmc7aWYobnVsbCE9PWcpe2cucmV0dXJuPWgucmV0dXJuO2g9ZzticmVha31oPWgucmV0dXJufWc9aH19UyhhLGIsZS5jaGlsZHJlbixjKTtiPWIuY2hpbGR9cmV0dXJuIGI7Y2FzZSA5OnJldHVybiBlPWIudHlwZSxmPWIucGVuZGluZ1Byb3BzLGQ9Zi5jaGlsZHJlbixLZihiLGMpLGU9TWYoZSxmLnVuc3RhYmxlX29ic2VydmVkQml0cyksZD1kKGUpLGIuZWZmZWN0VGFnfD0xLFMoYSxiLGQsYyksYi5jaGlsZDtjYXNlIDE0OnJldHVybiBlPWIudHlwZSxmPUFmKGUsYi5wZW5kaW5nUHJvcHMpLFxuZj1BZihlLnR5cGUsZiksR2goYSxiLGUsZixkLGMpO2Nhc2UgMTU6cmV0dXJuIEloKGEsYixiLnR5cGUsYi5wZW5kaW5nUHJvcHMsZCxjKTtjYXNlIDE3OnJldHVybiBkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGU9Yi5lbGVtZW50VHlwZT09PWQ/ZTpBZihkLGUpLG51bGwhPT1hJiYoYS5hbHRlcm5hdGU9bnVsbCxiLmFsdGVybmF0ZT1udWxsLGIuZWZmZWN0VGFnfD0yKSxiLnRhZz0xLE4oZCk/KGE9ITAsWGUoYikpOmE9ITEsS2YoYixjKSxoZyhiLGQsZSxjKSxqZyhiLGQsZSxjKSxNaChudWxsLGIsZCwhMCxhLGMpO2Nhc2UgMTk6cmV0dXJuIFJoKGEsYixjKX10aHJvdyB0KEVycm9yKDE1NikpO307dmFyIHBqPW51bGwsamk9bnVsbDtcbmZ1bmN0aW9uIHRqKGEpe2lmKFwidW5kZWZpbmVkXCI9PT10eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fKXJldHVybiExO3ZhciBiPV9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXztpZihiLmlzRGlzYWJsZWR8fCFiLnN1cHBvcnRzRmliZXIpcmV0dXJuITA7dHJ5e3ZhciBjPWIuaW5qZWN0KGEpO3BqPWZ1bmN0aW9uKGEpe3RyeXtiLm9uQ29tbWl0RmliZXJSb290KGMsYSx2b2lkIDAsNjQ9PT0oYS5jdXJyZW50LmVmZmVjdFRhZyY2NCkpfWNhdGNoKGUpe319O2ppPWZ1bmN0aW9uKGEpe3RyeXtiLm9uQ29tbWl0RmliZXJVbm1vdW50KGMsYSl9Y2F0Y2goZSl7fX19Y2F0Y2goZCl7fXJldHVybiEwfVxuZnVuY3Rpb24gdWooYSxiLGMsZCl7dGhpcy50YWc9YTt0aGlzLmtleT1jO3RoaXMuc2libGluZz10aGlzLmNoaWxkPXRoaXMucmV0dXJuPXRoaXMuc3RhdGVOb2RlPXRoaXMudHlwZT10aGlzLmVsZW1lbnRUeXBlPW51bGw7dGhpcy5pbmRleD0wO3RoaXMucmVmPW51bGw7dGhpcy5wZW5kaW5nUHJvcHM9Yjt0aGlzLmRlcGVuZGVuY2llcz10aGlzLm1lbW9pemVkU3RhdGU9dGhpcy51cGRhdGVRdWV1ZT10aGlzLm1lbW9pemVkUHJvcHM9bnVsbDt0aGlzLm1vZGU9ZDt0aGlzLmVmZmVjdFRhZz0wO3RoaXMubGFzdEVmZmVjdD10aGlzLmZpcnN0RWZmZWN0PXRoaXMubmV4dEVmZmVjdD1udWxsO3RoaXMuY2hpbGRFeHBpcmF0aW9uVGltZT10aGlzLmV4cGlyYXRpb25UaW1lPTA7dGhpcy5hbHRlcm5hdGU9bnVsbH1mdW5jdGlvbiB4aChhLGIsYyxkKXtyZXR1cm4gbmV3IHVqKGEsYixjLGQpfVxuZnVuY3Rpb24gSGgoYSl7YT1hLnByb3RvdHlwZTtyZXR1cm4hKCFhfHwhYS5pc1JlYWN0Q29tcG9uZW50KX1mdW5jdGlvbiBzaihhKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSlyZXR1cm4gSGgoYSk/MTowO2lmKHZvaWQgMCE9PWEmJm51bGwhPT1hKXthPWEuJCR0eXBlb2Y7aWYoYT09PWdjKXJldHVybiAxMTtpZihhPT09amMpcmV0dXJuIDE0fXJldHVybiAyfVxuZnVuY3Rpb24gb2coYSxiKXt2YXIgYz1hLmFsdGVybmF0ZTtudWxsPT09Yz8oYz14aChhLnRhZyxiLGEua2V5LGEubW9kZSksYy5lbGVtZW50VHlwZT1hLmVsZW1lbnRUeXBlLGMudHlwZT1hLnR5cGUsYy5zdGF0ZU5vZGU9YS5zdGF0ZU5vZGUsYy5hbHRlcm5hdGU9YSxhLmFsdGVybmF0ZT1jKTooYy5wZW5kaW5nUHJvcHM9YixjLmVmZmVjdFRhZz0wLGMubmV4dEVmZmVjdD1udWxsLGMuZmlyc3RFZmZlY3Q9bnVsbCxjLmxhc3RFZmZlY3Q9bnVsbCk7Yy5jaGlsZEV4cGlyYXRpb25UaW1lPWEuY2hpbGRFeHBpcmF0aW9uVGltZTtjLmV4cGlyYXRpb25UaW1lPWEuZXhwaXJhdGlvblRpbWU7Yy5jaGlsZD1hLmNoaWxkO2MubWVtb2l6ZWRQcm9wcz1hLm1lbW9pemVkUHJvcHM7Yy5tZW1vaXplZFN0YXRlPWEubWVtb2l6ZWRTdGF0ZTtjLnVwZGF0ZVF1ZXVlPWEudXBkYXRlUXVldWU7Yj1hLmRlcGVuZGVuY2llcztjLmRlcGVuZGVuY2llcz1udWxsPT09Yj9udWxsOntleHBpcmF0aW9uVGltZTpiLmV4cGlyYXRpb25UaW1lLFxuZmlyc3RDb250ZXh0OmIuZmlyc3RDb250ZXh0LHJlc3BvbmRlcnM6Yi5yZXNwb25kZXJzfTtjLnNpYmxpbmc9YS5zaWJsaW5nO2MuaW5kZXg9YS5pbmRleDtjLnJlZj1hLnJlZjtyZXR1cm4gY31cbmZ1bmN0aW9uIHFnKGEsYixjLGQsZSxmKXt2YXIgaD0yO2Q9YTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSlIaChhKSYmKGg9MSk7ZWxzZSBpZihcInN0cmluZ1wiPT09dHlwZW9mIGEpaD01O2Vsc2UgYTpzd2l0Y2goYSl7Y2FzZSBhYzpyZXR1cm4gc2coYy5jaGlsZHJlbixlLGYsYik7Y2FzZSBmYzpoPTg7ZXw9NzticmVhaztjYXNlIGJjOmg9ODtlfD0xO2JyZWFrO2Nhc2UgY2M6cmV0dXJuIGE9eGgoMTIsYyxiLGV8OCksYS5lbGVtZW50VHlwZT1jYyxhLnR5cGU9Y2MsYS5leHBpcmF0aW9uVGltZT1mLGE7Y2FzZSBoYzpyZXR1cm4gYT14aCgxMyxjLGIsZSksYS50eXBlPWhjLGEuZWxlbWVudFR5cGU9aGMsYS5leHBpcmF0aW9uVGltZT1mLGE7Y2FzZSBpYzpyZXR1cm4gYT14aCgxOSxjLGIsZSksYS5lbGVtZW50VHlwZT1pYyxhLmV4cGlyYXRpb25UaW1lPWYsYTtkZWZhdWx0OmlmKFwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEpc3dpdGNoKGEuJCR0eXBlb2Ype2Nhc2UgZGM6aD1cbjEwO2JyZWFrIGE7Y2FzZSBlYzpoPTk7YnJlYWsgYTtjYXNlIGdjOmg9MTE7YnJlYWsgYTtjYXNlIGpjOmg9MTQ7YnJlYWsgYTtjYXNlIGtjOmg9MTY7ZD1udWxsO2JyZWFrIGF9dGhyb3cgdChFcnJvcigxMzApLG51bGw9PWE/YTp0eXBlb2YgYSxcIlwiKTt9Yj14aChoLGMsYixlKTtiLmVsZW1lbnRUeXBlPWE7Yi50eXBlPWQ7Yi5leHBpcmF0aW9uVGltZT1mO3JldHVybiBifWZ1bmN0aW9uIHNnKGEsYixjLGQpe2E9eGgoNyxhLGQsYik7YS5leHBpcmF0aW9uVGltZT1jO3JldHVybiBhfWZ1bmN0aW9uIHBnKGEsYixjKXthPXhoKDYsYSxudWxsLGIpO2EuZXhwaXJhdGlvblRpbWU9YztyZXR1cm4gYX1cbmZ1bmN0aW9uIHJnKGEsYixjKXtiPXhoKDQsbnVsbCE9PWEuY2hpbGRyZW4/YS5jaGlsZHJlbjpbXSxhLmtleSxiKTtiLmV4cGlyYXRpb25UaW1lPWM7Yi5zdGF0ZU5vZGU9e2NvbnRhaW5lckluZm86YS5jb250YWluZXJJbmZvLHBlbmRpbmdDaGlsZHJlbjpudWxsLGltcGxlbWVudGF0aW9uOmEuaW1wbGVtZW50YXRpb259O3JldHVybiBifVxuZnVuY3Rpb24gdmooYSxiLGMpe3RoaXMudGFnPWI7dGhpcy5jdXJyZW50PW51bGw7dGhpcy5jb250YWluZXJJbmZvPWE7dGhpcy5waW5nQ2FjaGU9dGhpcy5wZW5kaW5nQ2hpbGRyZW49bnVsbDt0aGlzLmZpbmlzaGVkRXhwaXJhdGlvblRpbWU9MDt0aGlzLmZpbmlzaGVkV29yaz1udWxsO3RoaXMudGltZW91dEhhbmRsZT0tMTt0aGlzLnBlbmRpbmdDb250ZXh0PXRoaXMuY29udGV4dD1udWxsO3RoaXMuaHlkcmF0ZT1jO3RoaXMuY2FsbGJhY2tOb2RlPXRoaXMuZmlyc3RCYXRjaD1udWxsO3RoaXMucGluZ1RpbWU9dGhpcy5sYXN0UGVuZGluZ1RpbWU9dGhpcy5maXJzdFBlbmRpbmdUaW1lPXRoaXMuY2FsbGJhY2tFeHBpcmF0aW9uVGltZT0wfWZ1bmN0aW9uIHdqKGEsYixjKXthPW5ldyB2aihhLGIsYyk7Yj14aCgzLG51bGwsbnVsbCwyPT09Yj83OjE9PT1iPzM6MCk7YS5jdXJyZW50PWI7cmV0dXJuIGIuc3RhdGVOb2RlPWF9XG5mdW5jdGlvbiB4aihhLGIsYyxkLGUsZil7dmFyIGg9Yi5jdXJyZW50O2E6aWYoYyl7Yz1jLl9yZWFjdEludGVybmFsRmliZXI7Yjp7aWYoMiE9PWxkKGMpfHwxIT09Yy50YWcpdGhyb3cgdChFcnJvcigxNzApKTt2YXIgZz1jO2Rve3N3aXRjaChnLnRhZyl7Y2FzZSAzOmc9Zy5zdGF0ZU5vZGUuY29udGV4dDticmVhayBiO2Nhc2UgMTppZihOKGcudHlwZSkpe2c9Zy5zdGF0ZU5vZGUuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQ7YnJlYWsgYn19Zz1nLnJldHVybn13aGlsZShudWxsIT09Zyk7dGhyb3cgdChFcnJvcigxNzEpKTt9aWYoMT09PWMudGFnKXt2YXIgaz1jLnR5cGU7aWYoTihrKSl7Yz1XZShjLGssZyk7YnJlYWsgYX19Yz1nfWVsc2UgYz1RZTtudWxsPT09Yi5jb250ZXh0P2IuY29udGV4dD1jOmIucGVuZGluZ0NvbnRleHQ9YztiPWY7ZT1RZihkLGUpO2UucGF5bG9hZD17ZWxlbWVudDphfTtiPXZvaWQgMD09PWI/bnVsbDpiO251bGwhPT1iJiZcbihlLmNhbGxiYWNrPWIpO1NmKGgsZSk7ZWcoaCxkKTtyZXR1cm4gZH1mdW5jdGlvbiB5aihhLGIsYyxkKXt2YXIgZT1iLmN1cnJlbnQsZj1jZygpLGg9JGYuc3VzcGVuc2U7ZT1kZyhmLGUsaCk7cmV0dXJuIHhqKGEsYixjLGUsaCxkKX1mdW5jdGlvbiB6aihhKXthPWEuY3VycmVudDtpZighYS5jaGlsZClyZXR1cm4gbnVsbDtzd2l0Y2goYS5jaGlsZC50YWcpe2Nhc2UgNTpyZXR1cm4gYS5jaGlsZC5zdGF0ZU5vZGU7ZGVmYXVsdDpyZXR1cm4gYS5jaGlsZC5zdGF0ZU5vZGV9fWZ1bmN0aW9uIEFqKGEsYixjKXt2YXIgZD0zPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1szXT9hcmd1bWVudHNbM106bnVsbDtyZXR1cm57JCR0eXBlb2Y6JGIsa2V5Om51bGw9PWQ/bnVsbDpcIlwiK2QsY2hpbGRyZW46YSxjb250YWluZXJJbmZvOmIsaW1wbGVtZW50YXRpb246Y319XG5EYj1mdW5jdGlvbihhLGIsYyl7c3dpdGNoKGIpe2Nhc2UgXCJpbnB1dFwiOkVjKGEsYyk7Yj1jLm5hbWU7aWYoXCJyYWRpb1wiPT09Yy50eXBlJiZudWxsIT1iKXtmb3IoYz1hO2MucGFyZW50Tm9kZTspYz1jLnBhcmVudE5vZGU7Yz1jLnF1ZXJ5U2VsZWN0b3JBbGwoXCJpbnB1dFtuYW1lPVwiK0pTT04uc3RyaW5naWZ5KFwiXCIrYikrJ11bdHlwZT1cInJhZGlvXCJdJyk7Zm9yKGI9MDtiPGMubGVuZ3RoO2IrKyl7dmFyIGQ9Y1tiXTtpZihkIT09YSYmZC5mb3JtPT09YS5mb3JtKXt2YXIgZT1LYShkKTtpZighZSl0aHJvdyB0KEVycm9yKDkwKSk7V2IoZCk7RWMoZCxlKX19fWJyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOnBlKGEsYyk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmI9Yy52YWx1ZSxudWxsIT1iJiZtZShhLCEhYy5tdWx0aXBsZSxiLCExKX19O1xuZnVuY3Rpb24gQmooYSl7dmFyIGI9MTA3Mzc0MTgyMS0yNSooKCgxMDczNzQxODIxLWNnKCkrNTAwKS8yNXwwKSsxKTtiPD1YaSYmLS1iO3RoaXMuX2V4cGlyYXRpb25UaW1lPVhpPWI7dGhpcy5fcm9vdD1hO3RoaXMuX2NhbGxiYWNrcz10aGlzLl9uZXh0PW51bGw7dGhpcy5faGFzQ2hpbGRyZW49dGhpcy5fZGlkQ29tcGxldGU9ITE7dGhpcy5fY2hpbGRyZW49bnVsbDt0aGlzLl9kZWZlcj0hMH1Cai5wcm90b3R5cGUucmVuZGVyPWZ1bmN0aW9uKGEpe2lmKCF0aGlzLl9kZWZlcil0aHJvdyB0KEVycm9yKDI1MCkpO3RoaXMuX2hhc0NoaWxkcmVuPSEwO3RoaXMuX2NoaWxkcmVuPWE7dmFyIGI9dGhpcy5fcm9vdC5faW50ZXJuYWxSb290LGM9dGhpcy5fZXhwaXJhdGlvblRpbWUsZD1uZXcgQ2o7eGooYSxiLG51bGwsYyxudWxsLGQuX29uQ29tbWl0KTtyZXR1cm4gZH07XG5Cai5wcm90b3R5cGUudGhlbj1mdW5jdGlvbihhKXtpZih0aGlzLl9kaWRDb21wbGV0ZSlhKCk7ZWxzZXt2YXIgYj10aGlzLl9jYWxsYmFja3M7bnVsbD09PWImJihiPXRoaXMuX2NhbGxiYWNrcz1bXSk7Yi5wdXNoKGEpfX07XG5Cai5wcm90b3R5cGUuY29tbWl0PWZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5fcm9vdC5faW50ZXJuYWxSb290LGI9YS5maXJzdEJhdGNoO2lmKCF0aGlzLl9kZWZlcnx8bnVsbD09PWIpdGhyb3cgdChFcnJvcigyNTEpKTtpZih0aGlzLl9oYXNDaGlsZHJlbil7dmFyIGM9dGhpcy5fZXhwaXJhdGlvblRpbWU7aWYoYiE9PXRoaXMpe3RoaXMuX2hhc0NoaWxkcmVuJiYoYz10aGlzLl9leHBpcmF0aW9uVGltZT1iLl9leHBpcmF0aW9uVGltZSx0aGlzLnJlbmRlcih0aGlzLl9jaGlsZHJlbikpO2Zvcih2YXIgZD1udWxsLGU9YjtlIT09dGhpczspZD1lLGU9ZS5fbmV4dDtpZihudWxsPT09ZCl0aHJvdyB0KEVycm9yKDI1MSkpO2QuX25leHQ9ZS5fbmV4dDt0aGlzLl9uZXh0PWI7YS5maXJzdEJhdGNoPXRoaXN9dGhpcy5fZGVmZXI9ITE7Yj1jO2lmKChVJihDaXxEaSkpIT09VCl0aHJvdyB0KEVycm9yKDI1MykpO3hmKFouYmluZChudWxsLGEsYikpO08oKTtiPXRoaXMuX25leHQ7dGhpcy5fbmV4dD1cbm51bGw7Yj1hLmZpcnN0QmF0Y2g9YjtudWxsIT09YiYmYi5faGFzQ2hpbGRyZW4mJmIucmVuZGVyKGIuX2NoaWxkcmVuKX1lbHNlIHRoaXMuX25leHQ9bnVsbCx0aGlzLl9kZWZlcj0hMX07QmoucHJvdG90eXBlLl9vbkNvbXBsZXRlPWZ1bmN0aW9uKCl7aWYoIXRoaXMuX2RpZENvbXBsZXRlKXt0aGlzLl9kaWRDb21wbGV0ZT0hMDt2YXIgYT10aGlzLl9jYWxsYmFja3M7aWYobnVsbCE9PWEpZm9yKHZhciBiPTA7YjxhLmxlbmd0aDtiKyspKDAsYVtiXSkoKX19O2Z1bmN0aW9uIENqKCl7dGhpcy5fY2FsbGJhY2tzPW51bGw7dGhpcy5fZGlkQ29tbWl0PSExO3RoaXMuX29uQ29tbWl0PXRoaXMuX29uQ29tbWl0LmJpbmQodGhpcyl9Q2oucHJvdG90eXBlLnRoZW49ZnVuY3Rpb24oYSl7aWYodGhpcy5fZGlkQ29tbWl0KWEoKTtlbHNle3ZhciBiPXRoaXMuX2NhbGxiYWNrcztudWxsPT09YiYmKGI9dGhpcy5fY2FsbGJhY2tzPVtdKTtiLnB1c2goYSl9fTtcbkNqLnByb3RvdHlwZS5fb25Db21taXQ9ZnVuY3Rpb24oKXtpZighdGhpcy5fZGlkQ29tbWl0KXt0aGlzLl9kaWRDb21taXQ9ITA7dmFyIGE9dGhpcy5fY2FsbGJhY2tzO2lmKG51bGwhPT1hKWZvcih2YXIgYj0wO2I8YS5sZW5ndGg7YisrKXt2YXIgYz1hW2JdO2lmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBjKXRocm93IHQoRXJyb3IoMTkxKSxjKTtjKCl9fX07ZnVuY3Rpb24gRGooYSxiLGMpe3RoaXMuX2ludGVybmFsUm9vdD13aihhLGIsYyl9ZnVuY3Rpb24gRWooYSxiKXt0aGlzLl9pbnRlcm5hbFJvb3Q9d2ooYSwyLGIpfUVqLnByb3RvdHlwZS5yZW5kZXI9RGoucHJvdG90eXBlLnJlbmRlcj1mdW5jdGlvbihhLGIpe3ZhciBjPXRoaXMuX2ludGVybmFsUm9vdCxkPW5ldyBDajtiPXZvaWQgMD09PWI/bnVsbDpiO251bGwhPT1iJiZkLnRoZW4oYik7eWooYSxjLG51bGwsZC5fb25Db21taXQpO3JldHVybiBkfTtcbkVqLnByb3RvdHlwZS51bm1vdW50PURqLnByb3RvdHlwZS51bm1vdW50PWZ1bmN0aW9uKGEpe3ZhciBiPXRoaXMuX2ludGVybmFsUm9vdCxjPW5ldyBDajthPXZvaWQgMD09PWE/bnVsbDphO251bGwhPT1hJiZjLnRoZW4oYSk7eWoobnVsbCxiLG51bGwsYy5fb25Db21taXQpO3JldHVybiBjfTtFai5wcm90b3R5cGUuY3JlYXRlQmF0Y2g9ZnVuY3Rpb24oKXt2YXIgYT1uZXcgQmoodGhpcyksYj1hLl9leHBpcmF0aW9uVGltZSxjPXRoaXMuX2ludGVybmFsUm9vdCxkPWMuZmlyc3RCYXRjaDtpZihudWxsPT09ZCljLmZpcnN0QmF0Y2g9YSxhLl9uZXh0PW51bGw7ZWxzZXtmb3IoYz1udWxsO251bGwhPT1kJiZkLl9leHBpcmF0aW9uVGltZT49YjspYz1kLGQ9ZC5fbmV4dDthLl9uZXh0PWQ7bnVsbCE9PWMmJihjLl9uZXh0PWEpfXJldHVybiBhfTtcbmZ1bmN0aW9uIEhqKGEpe3JldHVybiEoIWF8fDEhPT1hLm5vZGVUeXBlJiY5IT09YS5ub2RlVHlwZSYmMTEhPT1hLm5vZGVUeXBlJiYoOCE9PWEubm9kZVR5cGV8fFwiIHJlYWN0LW1vdW50LXBvaW50LXVuc3RhYmxlIFwiIT09YS5ub2RlVmFsdWUpKX1KYj1lajtLYj1majtMYj1hajtNYj1mdW5jdGlvbihhLGIpe3ZhciBjPVU7VXw9Mjt0cnl7cmV0dXJuIGEoYil9ZmluYWxseXtVPWMsVT09PVQmJk8oKX19O2Z1bmN0aW9uIElqKGEsYil7Ynx8KGI9YT85PT09YS5ub2RlVHlwZT9hLmRvY3VtZW50RWxlbWVudDphLmZpcnN0Q2hpbGQ6bnVsbCxiPSEoIWJ8fDEhPT1iLm5vZGVUeXBlfHwhYi5oYXNBdHRyaWJ1dGUoXCJkYXRhLXJlYWN0cm9vdFwiKSkpO2lmKCFiKWZvcih2YXIgYztjPWEubGFzdENoaWxkOylhLnJlbW92ZUNoaWxkKGMpO3JldHVybiBuZXcgRGooYSwwLGIpfVxuZnVuY3Rpb24gSmooYSxiLGMsZCxlKXt2YXIgZj1jLl9yZWFjdFJvb3RDb250YWluZXIsaD12b2lkIDA7aWYoZil7aD1mLl9pbnRlcm5hbFJvb3Q7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGUpe3ZhciBnPWU7ZT1mdW5jdGlvbigpe3ZhciBhPXpqKGgpO2cuY2FsbChhKX19eWooYixoLGEsZSl9ZWxzZXtmPWMuX3JlYWN0Um9vdENvbnRhaW5lcj1JaihjLGQpO2g9Zi5faW50ZXJuYWxSb290O2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlKXt2YXIgaz1lO2U9ZnVuY3Rpb24oKXt2YXIgYT16aihoKTtrLmNhbGwoYSl9fWdqKGZ1bmN0aW9uKCl7eWooYixoLGEsZSl9KX1yZXR1cm4gemooaCl9ZnVuY3Rpb24gS2ooYSxiKXt2YXIgYz0yPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1syXT9hcmd1bWVudHNbMl06bnVsbDtpZighSGooYikpdGhyb3cgdChFcnJvcigyMDApKTtyZXR1cm4gQWooYSxiLG51bGwsYyl9XG52YXIgTmo9e2NyZWF0ZVBvcnRhbDpLaixmaW5kRE9NTm9kZTpmdW5jdGlvbihhKXtpZihudWxsPT1hKWE9bnVsbDtlbHNlIGlmKDEhPT1hLm5vZGVUeXBlKXt2YXIgYj1hLl9yZWFjdEludGVybmFsRmliZXI7aWYodm9pZCAwPT09Yil7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEucmVuZGVyKXRocm93IHQoRXJyb3IoMTg4KSk7dGhyb3cgdChFcnJvcigyNjgpLE9iamVjdC5rZXlzKGEpKTt9YT1xZChiKTthPW51bGw9PT1hP251bGw6YS5zdGF0ZU5vZGV9cmV0dXJuIGF9LGh5ZHJhdGU6ZnVuY3Rpb24oYSxiLGMpe2lmKCFIaihiKSl0aHJvdyB0KEVycm9yKDIwMCkpO3JldHVybiBKaihudWxsLGEsYiwhMCxjKX0scmVuZGVyOmZ1bmN0aW9uKGEsYixjKXtpZighSGooYikpdGhyb3cgdChFcnJvcigyMDApKTtyZXR1cm4gSmoobnVsbCxhLGIsITEsYyl9LHVuc3RhYmxlX3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyOmZ1bmN0aW9uKGEsYixjLGQpe2lmKCFIaihjKSl0aHJvdyB0KEVycm9yKDIwMCkpO1xuaWYobnVsbD09YXx8dm9pZCAwPT09YS5fcmVhY3RJbnRlcm5hbEZpYmVyKXRocm93IHQoRXJyb3IoMzgpKTtyZXR1cm4gSmooYSxiLGMsITEsZCl9LHVubW91bnRDb21wb25lbnRBdE5vZGU6ZnVuY3Rpb24oYSl7aWYoIUhqKGEpKXRocm93IHQoRXJyb3IoNDApKTtyZXR1cm4gYS5fcmVhY3RSb290Q29udGFpbmVyPyhnaihmdW5jdGlvbigpe0pqKG51bGwsbnVsbCxhLCExLGZ1bmN0aW9uKCl7YS5fcmVhY3RSb290Q29udGFpbmVyPW51bGx9KX0pLCEwKTohMX0sdW5zdGFibGVfY3JlYXRlUG9ydGFsOmZ1bmN0aW9uKCl7cmV0dXJuIEtqLmFwcGx5KHZvaWQgMCxhcmd1bWVudHMpfSx1bnN0YWJsZV9iYXRjaGVkVXBkYXRlczplaix1bnN0YWJsZV9pbnRlcmFjdGl2ZVVwZGF0ZXM6ZnVuY3Rpb24oYSxiLGMsZCl7YWooKTtyZXR1cm4gZmooYSxiLGMsZCl9LHVuc3RhYmxlX2Rpc2NyZXRlVXBkYXRlczpmaix1bnN0YWJsZV9mbHVzaERpc2NyZXRlVXBkYXRlczphaixmbHVzaFN5bmM6ZnVuY3Rpb24oYSxcbmIpe2lmKChVJihDaXxEaSkpIT09VCl0aHJvdyB0KEVycm9yKDE4NykpO3ZhciBjPVU7VXw9MTt0cnl7cmV0dXJuIHZmKDk5LGEuYmluZChudWxsLGIpKX1maW5hbGx5e1U9YyxPKCl9fSx1bnN0YWJsZV9jcmVhdGVSb290OkxqLHVuc3RhYmxlX2NyZWF0ZVN5bmNSb290Ok1qLHVuc3RhYmxlX2ZsdXNoQ29udHJvbGxlZDpmdW5jdGlvbihhKXt2YXIgYj1VO1V8PTE7dHJ5e3ZmKDk5LGEpfWZpbmFsbHl7VT1iLFU9PT1UJiZPKCl9fSxfX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRDp7RXZlbnRzOltJYSxKYSxLYSxDYS5pbmplY3RFdmVudFBsdWdpbnNCeU5hbWUsZmEsUWEsZnVuY3Rpb24oYSl7eWEoYSxQYSl9LEhiLEliLFVkLEJhLGNqLHtjdXJyZW50OiExfV19fTtcbmZ1bmN0aW9uIExqKGEsYil7aWYoIUhqKGEpKXRocm93IHQoRXJyb3IoMjk5KSxcInVuc3RhYmxlX2NyZWF0ZVJvb3RcIik7cmV0dXJuIG5ldyBFaihhLG51bGwhPWImJiEwPT09Yi5oeWRyYXRlKX1mdW5jdGlvbiBNaihhLGIpe2lmKCFIaihhKSl0aHJvdyB0KEVycm9yKDI5OSksXCJ1bnN0YWJsZV9jcmVhdGVSb290XCIpO3JldHVybiBuZXcgRGooYSwxLG51bGwhPWImJiEwPT09Yi5oeWRyYXRlKX1cbihmdW5jdGlvbihhKXt2YXIgYj1hLmZpbmRGaWJlckJ5SG9zdEluc3RhbmNlO3JldHVybiB0aihtKHt9LGEse292ZXJyaWRlSG9va1N0YXRlOm51bGwsb3ZlcnJpZGVQcm9wczpudWxsLHNldFN1c3BlbnNlSGFuZGxlcjpudWxsLHNjaGVkdWxlVXBkYXRlOm51bGwsY3VycmVudERpc3BhdGNoZXJSZWY6WGIuUmVhY3RDdXJyZW50RGlzcGF0Y2hlcixmaW5kSG9zdEluc3RhbmNlQnlGaWJlcjpmdW5jdGlvbihhKXthPXFkKGEpO3JldHVybiBudWxsPT09YT9udWxsOmEuc3RhdGVOb2RlfSxmaW5kRmliZXJCeUhvc3RJbnN0YW5jZTpmdW5jdGlvbihhKXtyZXR1cm4gYj9iKGEpOm51bGx9LGZpbmRIb3N0SW5zdGFuY2VzRm9yUmVmcmVzaDpudWxsLHNjaGVkdWxlUmVmcmVzaDpudWxsLHNjaGVkdWxlUm9vdDpudWxsLHNldFJlZnJlc2hIYW5kbGVyOm51bGwsZ2V0Q3VycmVudEZpYmVyOm51bGx9KSl9KSh7ZmluZEZpYmVyQnlIb3N0SW5zdGFuY2U6SGEsYnVuZGxlVHlwZTowLHZlcnNpb246XCIxNi45LjBcIixcbnJlbmRlcmVyUGFja2FnZU5hbWU6XCJyZWFjdC1kb21cIn0pO3ZhciBPaj17ZGVmYXVsdDpOan0sUGo9T2omJk5qfHxPajttb2R1bGUuZXhwb3J0cz1Qai5kZWZhdWx0fHxQajtcbiIsIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9zY2hlZHVsZXIucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvc2NoZWR1bGVyLmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCIvKiogQGxpY2Vuc2UgUmVhY3QgdjAuMTUuMFxuICogc2NoZWR1bGVyLnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO09iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBkPXZvaWQgMCxlPXZvaWQgMCxnPXZvaWQgMCxtPXZvaWQgMCxuPXZvaWQgMDtleHBvcnRzLnVuc3RhYmxlX25vdz12b2lkIDA7ZXhwb3J0cy51bnN0YWJsZV9mb3JjZUZyYW1lUmF0ZT12b2lkIDA7XG5pZihcInVuZGVmaW5lZFwiPT09dHlwZW9mIHdpbmRvd3x8XCJmdW5jdGlvblwiIT09dHlwZW9mIE1lc3NhZ2VDaGFubmVsKXt2YXIgcD1udWxsLHE9bnVsbCxyPWZ1bmN0aW9uKCl7aWYobnVsbCE9PXApdHJ5e3ZhciBhPWV4cG9ydHMudW5zdGFibGVfbm93KCk7cCghMCxhKTtwPW51bGx9Y2F0Y2goYil7dGhyb3cgc2V0VGltZW91dChyLDApLGI7fX07ZXhwb3J0cy51bnN0YWJsZV9ub3c9ZnVuY3Rpb24oKXtyZXR1cm4gRGF0ZS5ub3coKX07ZD1mdW5jdGlvbihhKXtudWxsIT09cD9zZXRUaW1lb3V0KGQsMCxhKToocD1hLHNldFRpbWVvdXQociwwKSl9O2U9ZnVuY3Rpb24oYSxiKXtxPXNldFRpbWVvdXQoYSxiKX07Zz1mdW5jdGlvbigpe2NsZWFyVGltZW91dChxKX07bT1mdW5jdGlvbigpe3JldHVybiExfTtuPWV4cG9ydHMudW5zdGFibGVfZm9yY2VGcmFtZVJhdGU9ZnVuY3Rpb24oKXt9fWVsc2V7dmFyIHQ9d2luZG93LnBlcmZvcm1hbmNlLHU9d2luZG93LkRhdGUsdj13aW5kb3cuc2V0VGltZW91dCxcbnc9d2luZG93LmNsZWFyVGltZW91dCx4PXdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUseT13aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWU7XCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBjb25zb2xlJiYoXCJmdW5jdGlvblwiIT09dHlwZW9mIHgmJmNvbnNvbGUuZXJyb3IoXCJUaGlzIGJyb3dzZXIgZG9lc24ndCBzdXBwb3J0IHJlcXVlc3RBbmltYXRpb25GcmFtZS4gTWFrZSBzdXJlIHRoYXQgeW91IGxvYWQgYSBwb2x5ZmlsbCBpbiBvbGRlciBicm93c2Vycy4gaHR0cHM6Ly9mYi5tZS9yZWFjdC1wb2x5ZmlsbHNcIiksXCJmdW5jdGlvblwiIT09dHlwZW9mIHkmJmNvbnNvbGUuZXJyb3IoXCJUaGlzIGJyb3dzZXIgZG9lc24ndCBzdXBwb3J0IGNhbmNlbEFuaW1hdGlvbkZyYW1lLiBNYWtlIHN1cmUgdGhhdCB5b3UgbG9hZCBhIHBvbHlmaWxsIGluIG9sZGVyIGJyb3dzZXJzLiBodHRwczovL2ZiLm1lL3JlYWN0LXBvbHlmaWxsc1wiKSk7ZXhwb3J0cy51bnN0YWJsZV9ub3c9XCJvYmplY3RcIj09PXR5cGVvZiB0JiZcblwiZnVuY3Rpb25cIj09PXR5cGVvZiB0Lm5vdz9mdW5jdGlvbigpe3JldHVybiB0Lm5vdygpfTpmdW5jdGlvbigpe3JldHVybiB1Lm5vdygpfTt2YXIgej0hMSxBPW51bGwsQj0tMSxDPS0xLEQ9MzMuMzMsRT0tMSxGPS0xLEc9MCxIPSExO209ZnVuY3Rpb24oKXtyZXR1cm4gZXhwb3J0cy51bnN0YWJsZV9ub3coKT49R307bj1mdW5jdGlvbigpe307ZXhwb3J0cy51bnN0YWJsZV9mb3JjZUZyYW1lUmF0ZT1mdW5jdGlvbihhKXswPmF8fDEyNTxhP2NvbnNvbGUuZXJyb3IoXCJmb3JjZUZyYW1lUmF0ZSB0YWtlcyBhIHBvc2l0aXZlIGludCBiZXR3ZWVuIDAgYW5kIDEyNSwgZm9yY2luZyBmcmFtZXJhdGVzIGhpZ2hlciB0aGFuIDEyNSBmcHMgaXMgbm90IHVuc3VwcG9ydGVkXCIpOjA8YT8oRD1NYXRoLmZsb29yKDFFMy9hKSxIPSEwKTooRD0zMy4zMyxIPSExKX07dmFyIEo9ZnVuY3Rpb24oKXtpZihudWxsIT09QSl7dmFyIGE9ZXhwb3J0cy51bnN0YWJsZV9ub3coKSxiPTA8Ry1hO3RyeXtBKGIsXG5hKXx8KEE9bnVsbCl9Y2F0Y2goYyl7dGhyb3cgSS5wb3N0TWVzc2FnZShudWxsKSxjO319fSxLPW5ldyBNZXNzYWdlQ2hhbm5lbCxJPUsucG9ydDI7Sy5wb3J0MS5vbm1lc3NhZ2U9Sjt2YXIgTD1mdW5jdGlvbihhKXtpZihudWxsPT09QSlGPUU9LTEsej0hMTtlbHNle3o9ITA7eChmdW5jdGlvbihhKXt3KEIpO0woYSl9KTt2YXIgYj1mdW5jdGlvbigpe0c9ZXhwb3J0cy51bnN0YWJsZV9ub3coKStELzI7SigpO0I9dihiLDMqRCl9O0I9dihiLDMqRCk7aWYoLTEhPT1FJiYuMTxhLUUpe3ZhciBjPWEtRTshSCYmLTEhPT1GJiZjPEQmJkY8RCYmKEQ9YzxGP0Y6Yyw4LjMzPkQmJihEPTguMzMpKTtGPWN9RT1hO0c9YStEO0kucG9zdE1lc3NhZ2UobnVsbCl9fTtkPWZ1bmN0aW9uKGEpe0E9YTt6fHwoej0hMCx4KGZ1bmN0aW9uKGEpe0woYSl9KSl9O2U9ZnVuY3Rpb24oYSxiKXtDPXYoZnVuY3Rpb24oKXthKGV4cG9ydHMudW5zdGFibGVfbm93KCkpfSxiKX07Zz1mdW5jdGlvbigpe3coQyk7XG5DPS0xfX12YXIgTT1udWxsLE49bnVsbCxPPW51bGwsUD0zLFE9ITEsUj0hMSxTPSExO1xuZnVuY3Rpb24gVChhLGIpe3ZhciBjPWEubmV4dDtpZihjPT09YSlNPW51bGw7ZWxzZXthPT09TSYmKE09Yyk7dmFyIGY9YS5wcmV2aW91cztmLm5leHQ9YztjLnByZXZpb3VzPWZ9YS5uZXh0PWEucHJldmlvdXM9bnVsbDtjPWEuY2FsbGJhY2s7Zj1QO3ZhciBsPU87UD1hLnByaW9yaXR5TGV2ZWw7Tz1hO3RyeXt2YXIgaD1hLmV4cGlyYXRpb25UaW1lPD1iO3N3aXRjaChQKXtjYXNlIDE6dmFyIGs9YyhoKTticmVhaztjYXNlIDI6az1jKGgpO2JyZWFrO2Nhc2UgMzprPWMoaCk7YnJlYWs7Y2FzZSA0Oms9YyhoKTticmVhaztjYXNlIDU6az1jKGgpfX1jYXRjaChaKXt0aHJvdyBaO31maW5hbGx5e1A9ZixPPWx9aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGspaWYoYj1hLmV4cGlyYXRpb25UaW1lLGEuY2FsbGJhY2s9ayxudWxsPT09TSlNPWEubmV4dD1hLnByZXZpb3VzPWE7ZWxzZXtrPW51bGw7aD1NO2Rve2lmKGI8PWguZXhwaXJhdGlvblRpbWUpe2s9aDticmVha31oPWgubmV4dH13aGlsZShoIT09XG5NKTtudWxsPT09az9rPU06az09PU0mJihNPWEpO2I9ay5wcmV2aW91cztiLm5leHQ9ay5wcmV2aW91cz1hO2EubmV4dD1rO2EucHJldmlvdXM9Yn19ZnVuY3Rpb24gVShhKXtpZihudWxsIT09TiYmTi5zdGFydFRpbWU8PWEpe2Rve3ZhciBiPU4sYz1iLm5leHQ7aWYoYj09PWMpTj1udWxsO2Vsc2V7Tj1jO3ZhciBmPWIucHJldmlvdXM7Zi5uZXh0PWM7Yy5wcmV2aW91cz1mfWIubmV4dD1iLnByZXZpb3VzPW51bGw7VihiLGIuZXhwaXJhdGlvblRpbWUpfXdoaWxlKG51bGwhPT1OJiZOLnN0YXJ0VGltZTw9YSl9fWZ1bmN0aW9uIFcoYSl7Uz0hMTtVKGEpO1J8fChudWxsIT09TT8oUj0hMCxkKFgpKTpudWxsIT09TiYmZShXLE4uc3RhcnRUaW1lLWEpKX1cbmZ1bmN0aW9uIFgoYSxiKXtSPSExO1MmJihTPSExLGcoKSk7VShiKTtRPSEwO3RyeXtpZighYSlmb3IoO251bGwhPT1NJiZNLmV4cGlyYXRpb25UaW1lPD1iOylUKE0sYiksYj1leHBvcnRzLnVuc3RhYmxlX25vdygpLFUoYik7ZWxzZSBpZihudWxsIT09TSl7ZG8gVChNLGIpLGI9ZXhwb3J0cy51bnN0YWJsZV9ub3coKSxVKGIpO3doaWxlKG51bGwhPT1NJiYhbSgpKX1pZihudWxsIT09TSlyZXR1cm4hMDtudWxsIT09TiYmZShXLE4uc3RhcnRUaW1lLWIpO3JldHVybiExfWZpbmFsbHl7UT0hMX19ZnVuY3Rpb24gWShhKXtzd2l0Y2goYSl7Y2FzZSAxOnJldHVybi0xO2Nhc2UgMjpyZXR1cm4gMjUwO2Nhc2UgNTpyZXR1cm4gMTA3Mzc0MTgyMztjYXNlIDQ6cmV0dXJuIDFFNDtkZWZhdWx0OnJldHVybiA1RTN9fVxuZnVuY3Rpb24gVihhLGIpe2lmKG51bGw9PT1NKU09YS5uZXh0PWEucHJldmlvdXM9YTtlbHNle3ZhciBjPW51bGwsZj1NO2Rve2lmKGI8Zi5leHBpcmF0aW9uVGltZSl7Yz1mO2JyZWFrfWY9Zi5uZXh0fXdoaWxlKGYhPT1NKTtudWxsPT09Yz9jPU06Yz09PU0mJihNPWEpO2I9Yy5wcmV2aW91cztiLm5leHQ9Yy5wcmV2aW91cz1hO2EubmV4dD1jO2EucHJldmlvdXM9Yn19dmFyIGFhPW47ZXhwb3J0cy51bnN0YWJsZV9JbW1lZGlhdGVQcmlvcml0eT0xO2V4cG9ydHMudW5zdGFibGVfVXNlckJsb2NraW5nUHJpb3JpdHk9MjtleHBvcnRzLnVuc3RhYmxlX05vcm1hbFByaW9yaXR5PTM7ZXhwb3J0cy51bnN0YWJsZV9JZGxlUHJpb3JpdHk9NTtleHBvcnRzLnVuc3RhYmxlX0xvd1ByaW9yaXR5PTQ7XG5leHBvcnRzLnVuc3RhYmxlX3J1bldpdGhQcmlvcml0eT1mdW5jdGlvbihhLGIpe3N3aXRjaChhKXtjYXNlIDE6Y2FzZSAyOmNhc2UgMzpjYXNlIDQ6Y2FzZSA1OmJyZWFrO2RlZmF1bHQ6YT0zfXZhciBjPVA7UD1hO3RyeXtyZXR1cm4gYigpfWZpbmFsbHl7UD1jfX07ZXhwb3J0cy51bnN0YWJsZV9uZXh0PWZ1bmN0aW9uKGEpe3N3aXRjaChQKXtjYXNlIDE6Y2FzZSAyOmNhc2UgMzp2YXIgYj0zO2JyZWFrO2RlZmF1bHQ6Yj1QfXZhciBjPVA7UD1iO3RyeXtyZXR1cm4gYSgpfWZpbmFsbHl7UD1jfX07XG5leHBvcnRzLnVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2s9ZnVuY3Rpb24oYSxiLGMpe3ZhciBmPWV4cG9ydHMudW5zdGFibGVfbm93KCk7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBjJiZudWxsIT09Yyl7dmFyIGw9Yy5kZWxheTtsPVwibnVtYmVyXCI9PT10eXBlb2YgbCYmMDxsP2YrbDpmO2M9XCJudW1iZXJcIj09PXR5cGVvZiBjLnRpbWVvdXQ/Yy50aW1lb3V0OlkoYSl9ZWxzZSBjPVkoYSksbD1mO2M9bCtjO2E9e2NhbGxiYWNrOmIscHJpb3JpdHlMZXZlbDphLHN0YXJ0VGltZTpsLGV4cGlyYXRpb25UaW1lOmMsbmV4dDpudWxsLHByZXZpb3VzOm51bGx9O2lmKGw+Zil7Yz1sO2lmKG51bGw9PT1OKU49YS5uZXh0PWEucHJldmlvdXM9YTtlbHNle2I9bnVsbDt2YXIgaD1OO2Rve2lmKGM8aC5zdGFydFRpbWUpe2I9aDticmVha31oPWgubmV4dH13aGlsZShoIT09Tik7bnVsbD09PWI/Yj1OOmI9PT1OJiYoTj1hKTtjPWIucHJldmlvdXM7Yy5uZXh0PWIucHJldmlvdXM9YTthLm5leHQ9YjthLnByZXZpb3VzPVxuY31udWxsPT09TSYmTj09PWEmJihTP2coKTpTPSEwLGUoVyxsLWYpKX1lbHNlIFYoYSxjKSxSfHxRfHwoUj0hMCxkKFgpKTtyZXR1cm4gYX07ZXhwb3J0cy51bnN0YWJsZV9jYW5jZWxDYWxsYmFjaz1mdW5jdGlvbihhKXt2YXIgYj1hLm5leHQ7aWYobnVsbCE9PWIpe2lmKGE9PT1iKWE9PT1NP009bnVsbDphPT09TiYmKE49bnVsbCk7ZWxzZXthPT09TT9NPWI6YT09PU4mJihOPWIpO3ZhciBjPWEucHJldmlvdXM7Yy5uZXh0PWI7Yi5wcmV2aW91cz1jfWEubmV4dD1hLnByZXZpb3VzPW51bGx9fTtleHBvcnRzLnVuc3RhYmxlX3dyYXBDYWxsYmFjaz1mdW5jdGlvbihhKXt2YXIgYj1QO3JldHVybiBmdW5jdGlvbigpe3ZhciBjPVA7UD1iO3RyeXtyZXR1cm4gYS5hcHBseSh0aGlzLGFyZ3VtZW50cyl9ZmluYWxseXtQPWN9fX07ZXhwb3J0cy51bnN0YWJsZV9nZXRDdXJyZW50UHJpb3JpdHlMZXZlbD1mdW5jdGlvbigpe3JldHVybiBQfTtcbmV4cG9ydHMudW5zdGFibGVfc2hvdWxkWWllbGQ9ZnVuY3Rpb24oKXt2YXIgYT1leHBvcnRzLnVuc3RhYmxlX25vdygpO1UoYSk7cmV0dXJuIG51bGwhPT1PJiZudWxsIT09TSYmTS5zdGFydFRpbWU8PWEmJk0uZXhwaXJhdGlvblRpbWU8Ty5leHBpcmF0aW9uVGltZXx8bSgpfTtleHBvcnRzLnVuc3RhYmxlX3JlcXVlc3RQYWludD1hYTtleHBvcnRzLnVuc3RhYmxlX2NvbnRpbnVlRXhlY3V0aW9uPWZ1bmN0aW9uKCl7Unx8UXx8KFI9ITAsZChYKSl9O2V4cG9ydHMudW5zdGFibGVfcGF1c2VFeGVjdXRpb249ZnVuY3Rpb24oKXt9O2V4cG9ydHMudW5zdGFibGVfZ2V0Rmlyc3RDYWxsYmFja05vZGU9ZnVuY3Rpb24oKXtyZXR1cm4gTX07XG4iLCJ2YXIgYmFzZU1lcmdlID0gcmVxdWlyZSgnLi9fYmFzZU1lcmdlJyksXG4gICAgY3JlYXRlQXNzaWduZXIgPSByZXF1aXJlKCcuL19jcmVhdGVBc3NpZ25lcicpO1xuXG4vKipcbiAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uYXNzaWduYCBleGNlcHQgdGhhdCBpdCByZWN1cnNpdmVseSBtZXJnZXMgb3duIGFuZFxuICogaW5oZXJpdGVkIGVudW1lcmFibGUgc3RyaW5nIGtleWVkIHByb3BlcnRpZXMgb2Ygc291cmNlIG9iamVjdHMgaW50byB0aGVcbiAqIGRlc3RpbmF0aW9uIG9iamVjdC4gU291cmNlIHByb3BlcnRpZXMgdGhhdCByZXNvbHZlIHRvIGB1bmRlZmluZWRgIGFyZVxuICogc2tpcHBlZCBpZiBhIGRlc3RpbmF0aW9uIHZhbHVlIGV4aXN0cy4gQXJyYXkgYW5kIHBsYWluIG9iamVjdCBwcm9wZXJ0aWVzXG4gKiBhcmUgbWVyZ2VkIHJlY3Vyc2l2ZWx5LiBPdGhlciBvYmplY3RzIGFuZCB2YWx1ZSB0eXBlcyBhcmUgb3ZlcnJpZGRlbiBieVxuICogYXNzaWdubWVudC4gU291cmNlIG9iamVjdHMgYXJlIGFwcGxpZWQgZnJvbSBsZWZ0IHRvIHJpZ2h0LiBTdWJzZXF1ZW50XG4gKiBzb3VyY2VzIG92ZXJ3cml0ZSBwcm9wZXJ0eSBhc3NpZ25tZW50cyBvZiBwcmV2aW91cyBzb3VyY2VzLlxuICpcbiAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBvYmplY3RgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC41LjBcbiAqIEBjYXRlZ29yeSBPYmplY3RcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAqIEBwYXJhbSB7Li4uT2JqZWN0fSBbc291cmNlc10gVGhlIHNvdXJjZSBvYmplY3RzLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAqIEBleGFtcGxlXG4gKlxuICogdmFyIG9iamVjdCA9IHtcbiAqICAgJ2EnOiBbeyAnYic6IDIgfSwgeyAnZCc6IDQgfV1cbiAqIH07XG4gKlxuICogdmFyIG90aGVyID0ge1xuICogICAnYSc6IFt7ICdjJzogMyB9LCB7ICdlJzogNSB9XVxuICogfTtcbiAqXG4gKiBfLm1lcmdlKG9iamVjdCwgb3RoZXIpO1xuICogLy8gPT4geyAnYSc6IFt7ICdiJzogMiwgJ2MnOiAzIH0sIHsgJ2QnOiA0LCAnZSc6IDUgfV0gfVxuICovXG52YXIgbWVyZ2UgPSBjcmVhdGVBc3NpZ25lcihmdW5jdGlvbihvYmplY3QsIHNvdXJjZSwgc3JjSW5kZXgpIHtcbiAgYmFzZU1lcmdlKG9iamVjdCwgc291cmNlLCBzcmNJbmRleCk7XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBtZXJnZTtcbiIsInZhciBTdGFjayA9IHJlcXVpcmUoJy4vX1N0YWNrJyksXG4gICAgYXNzaWduTWVyZ2VWYWx1ZSA9IHJlcXVpcmUoJy4vX2Fzc2lnbk1lcmdlVmFsdWUnKSxcbiAgICBiYXNlRm9yID0gcmVxdWlyZSgnLi9fYmFzZUZvcicpLFxuICAgIGJhc2VNZXJnZURlZXAgPSByZXF1aXJlKCcuL19iYXNlTWVyZ2VEZWVwJyksXG4gICAgaXNPYmplY3QgPSByZXF1aXJlKCcuL2lzT2JqZWN0JyksXG4gICAga2V5c0luID0gcmVxdWlyZSgnLi9rZXlzSW4nKSxcbiAgICBzYWZlR2V0ID0gcmVxdWlyZSgnLi9fc2FmZUdldCcpO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLm1lcmdlYCB3aXRob3V0IHN1cHBvcnQgZm9yIG11bHRpcGxlIHNvdXJjZXMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIHNvdXJjZSBvYmplY3QuXG4gKiBAcGFyYW0ge251bWJlcn0gc3JjSW5kZXggVGhlIGluZGV4IG9mIGBzb3VyY2VgLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgbWVyZ2VkIHZhbHVlcy5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbc3RhY2tdIFRyYWNrcyB0cmF2ZXJzZWQgc291cmNlIHZhbHVlcyBhbmQgdGhlaXIgbWVyZ2VkXG4gKiAgY291bnRlcnBhcnRzLlxuICovXG5mdW5jdGlvbiBiYXNlTWVyZ2Uob2JqZWN0LCBzb3VyY2UsIHNyY0luZGV4LCBjdXN0b21pemVyLCBzdGFjaykge1xuICBpZiAob2JqZWN0ID09PSBzb3VyY2UpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgYmFzZUZvcihzb3VyY2UsIGZ1bmN0aW9uKHNyY1ZhbHVlLCBrZXkpIHtcbiAgICBzdGFjayB8fCAoc3RhY2sgPSBuZXcgU3RhY2spO1xuICAgIGlmIChpc09iamVjdChzcmNWYWx1ZSkpIHtcbiAgICAgIGJhc2VNZXJnZURlZXAob2JqZWN0LCBzb3VyY2UsIGtleSwgc3JjSW5kZXgsIGJhc2VNZXJnZSwgY3VzdG9taXplciwgc3RhY2spO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHZhciBuZXdWYWx1ZSA9IGN1c3RvbWl6ZXJcbiAgICAgICAgPyBjdXN0b21pemVyKHNhZmVHZXQob2JqZWN0LCBrZXkpLCBzcmNWYWx1ZSwgKGtleSArICcnKSwgb2JqZWN0LCBzb3VyY2UsIHN0YWNrKVxuICAgICAgICA6IHVuZGVmaW5lZDtcblxuICAgICAgaWYgKG5ld1ZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgbmV3VmFsdWUgPSBzcmNWYWx1ZTtcbiAgICAgIH1cbiAgICAgIGFzc2lnbk1lcmdlVmFsdWUob2JqZWN0LCBrZXksIG5ld1ZhbHVlKTtcbiAgICB9XG4gIH0sIGtleXNJbik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZU1lcmdlO1xuIiwidmFyIExpc3RDYWNoZSA9IHJlcXVpcmUoJy4vX0xpc3RDYWNoZScpLFxuICAgIHN0YWNrQ2xlYXIgPSByZXF1aXJlKCcuL19zdGFja0NsZWFyJyksXG4gICAgc3RhY2tEZWxldGUgPSByZXF1aXJlKCcuL19zdGFja0RlbGV0ZScpLFxuICAgIHN0YWNrR2V0ID0gcmVxdWlyZSgnLi9fc3RhY2tHZXQnKSxcbiAgICBzdGFja0hhcyA9IHJlcXVpcmUoJy4vX3N0YWNrSGFzJyksXG4gICAgc3RhY2tTZXQgPSByZXF1aXJlKCcuL19zdGFja1NldCcpO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBzdGFjayBjYWNoZSBvYmplY3QgdG8gc3RvcmUga2V5LXZhbHVlIHBhaXJzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7QXJyYXl9IFtlbnRyaWVzXSBUaGUga2V5LXZhbHVlIHBhaXJzIHRvIGNhY2hlLlxuICovXG5mdW5jdGlvbiBTdGFjayhlbnRyaWVzKSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXyA9IG5ldyBMaXN0Q2FjaGUoZW50cmllcyk7XG4gIHRoaXMuc2l6ZSA9IGRhdGEuc2l6ZTtcbn1cblxuLy8gQWRkIG1ldGhvZHMgdG8gYFN0YWNrYC5cblN0YWNrLnByb3RvdHlwZS5jbGVhciA9IHN0YWNrQ2xlYXI7XG5TdGFjay5wcm90b3R5cGVbJ2RlbGV0ZSddID0gc3RhY2tEZWxldGU7XG5TdGFjay5wcm90b3R5cGUuZ2V0ID0gc3RhY2tHZXQ7XG5TdGFjay5wcm90b3R5cGUuaGFzID0gc3RhY2tIYXM7XG5TdGFjay5wcm90b3R5cGUuc2V0ID0gc3RhY2tTZXQ7XG5cbm1vZHVsZS5leHBvcnRzID0gU3RhY2s7XG4iLCIvKipcbiAqIFJlbW92ZXMgYWxsIGtleS12YWx1ZSBlbnRyaWVzIGZyb20gdGhlIGxpc3QgY2FjaGUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGNsZWFyXG4gKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gKi9cbmZ1bmN0aW9uIGxpc3RDYWNoZUNsZWFyKCkge1xuICB0aGlzLl9fZGF0YV9fID0gW107XG4gIHRoaXMuc2l6ZSA9IDA7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbGlzdENhY2hlQ2xlYXI7XG4iLCJ2YXIgYXNzb2NJbmRleE9mID0gcmVxdWlyZSgnLi9fYXNzb2NJbmRleE9mJyk7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBhcnJheVByb3RvID0gQXJyYXkucHJvdG90eXBlO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBzcGxpY2UgPSBhcnJheVByb3RvLnNwbGljZTtcblxuLyoqXG4gKiBSZW1vdmVzIGBrZXlgIGFuZCBpdHMgdmFsdWUgZnJvbSB0aGUgbGlzdCBjYWNoZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZGVsZXRlXG4gKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHJlbW92ZS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZW50cnkgd2FzIHJlbW92ZWQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gbGlzdENhY2hlRGVsZXRlKGtleSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX18sXG4gICAgICBpbmRleCA9IGFzc29jSW5kZXhPZihkYXRhLCBrZXkpO1xuXG4gIGlmIChpbmRleCA8IDApIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyIGxhc3RJbmRleCA9IGRhdGEubGVuZ3RoIC0gMTtcbiAgaWYgKGluZGV4ID09IGxhc3RJbmRleCkge1xuICAgIGRhdGEucG9wKCk7XG4gIH0gZWxzZSB7XG4gICAgc3BsaWNlLmNhbGwoZGF0YSwgaW5kZXgsIDEpO1xuICB9XG4gIC0tdGhpcy5zaXplO1xuICByZXR1cm4gdHJ1ZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBsaXN0Q2FjaGVEZWxldGU7XG4iLCJ2YXIgYXNzb2NJbmRleE9mID0gcmVxdWlyZSgnLi9fYXNzb2NJbmRleE9mJyk7XG5cbi8qKlxuICogR2V0cyB0aGUgbGlzdCBjYWNoZSB2YWx1ZSBmb3IgYGtleWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGdldFxuICogQG1lbWJlck9mIExpc3RDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZW50cnkgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIGxpc3RDYWNoZUdldChrZXkpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fLFxuICAgICAgaW5kZXggPSBhc3NvY0luZGV4T2YoZGF0YSwga2V5KTtcblxuICByZXR1cm4gaW5kZXggPCAwID8gdW5kZWZpbmVkIDogZGF0YVtpbmRleF1bMV07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbGlzdENhY2hlR2V0O1xuIiwidmFyIGFzc29jSW5kZXhPZiA9IHJlcXVpcmUoJy4vX2Fzc29jSW5kZXhPZicpO1xuXG4vKipcbiAqIENoZWNrcyBpZiBhIGxpc3QgY2FjaGUgdmFsdWUgZm9yIGBrZXlgIGV4aXN0cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgaGFzXG4gKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gbGlzdENhY2hlSGFzKGtleSkge1xuICByZXR1cm4gYXNzb2NJbmRleE9mKHRoaXMuX19kYXRhX18sIGtleSkgPiAtMTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBsaXN0Q2FjaGVIYXM7XG4iLCJ2YXIgYXNzb2NJbmRleE9mID0gcmVxdWlyZSgnLi9fYXNzb2NJbmRleE9mJyk7XG5cbi8qKlxuICogU2V0cyB0aGUgbGlzdCBjYWNoZSBga2V5YCB0byBgdmFsdWVgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBzZXRcbiAqIEBtZW1iZXJPZiBMaXN0Q2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gc2V0LlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbGlzdCBjYWNoZSBpbnN0YW5jZS5cbiAqL1xuZnVuY3Rpb24gbGlzdENhY2hlU2V0KGtleSwgdmFsdWUpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fLFxuICAgICAgaW5kZXggPSBhc3NvY0luZGV4T2YoZGF0YSwga2V5KTtcblxuICBpZiAoaW5kZXggPCAwKSB7XG4gICAgKyt0aGlzLnNpemU7XG4gICAgZGF0YS5wdXNoKFtrZXksIHZhbHVlXSk7XG4gIH0gZWxzZSB7XG4gICAgZGF0YVtpbmRleF1bMV0gPSB2YWx1ZTtcbiAgfVxuICByZXR1cm4gdGhpcztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBsaXN0Q2FjaGVTZXQ7XG4iLCJ2YXIgTGlzdENhY2hlID0gcmVxdWlyZSgnLi9fTGlzdENhY2hlJyk7XG5cbi8qKlxuICogUmVtb3ZlcyBhbGwga2V5LXZhbHVlIGVudHJpZXMgZnJvbSB0aGUgc3RhY2suXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGNsZWFyXG4gKiBAbWVtYmVyT2YgU3RhY2tcbiAqL1xuZnVuY3Rpb24gc3RhY2tDbGVhcigpIHtcbiAgdGhpcy5fX2RhdGFfXyA9IG5ldyBMaXN0Q2FjaGU7XG4gIHRoaXMuc2l6ZSA9IDA7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc3RhY2tDbGVhcjtcbiIsIi8qKlxuICogUmVtb3ZlcyBga2V5YCBhbmQgaXRzIHZhbHVlIGZyb20gdGhlIHN0YWNrLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBkZWxldGVcbiAqIEBtZW1iZXJPZiBTdGFja1xuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byByZW1vdmUuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGVudHJ5IHdhcyByZW1vdmVkLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIHN0YWNrRGVsZXRlKGtleSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX18sXG4gICAgICByZXN1bHQgPSBkYXRhWydkZWxldGUnXShrZXkpO1xuXG4gIHRoaXMuc2l6ZSA9IGRhdGEuc2l6ZTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzdGFja0RlbGV0ZTtcbiIsIi8qKlxuICogR2V0cyB0aGUgc3RhY2sgdmFsdWUgZm9yIGBrZXlgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBnZXRcbiAqIEBtZW1iZXJPZiBTdGFja1xuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZW50cnkgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIHN0YWNrR2V0KGtleSkge1xuICByZXR1cm4gdGhpcy5fX2RhdGFfXy5nZXQoa2V5KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzdGFja0dldDtcbiIsIi8qKlxuICogQ2hlY2tzIGlmIGEgc3RhY2sgdmFsdWUgZm9yIGBrZXlgIGV4aXN0cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgaGFzXG4gKiBAbWVtYmVyT2YgU3RhY2tcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBzdGFja0hhcyhrZXkpIHtcbiAgcmV0dXJuIHRoaXMuX19kYXRhX18uaGFzKGtleSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc3RhY2tIYXM7XG4iLCJ2YXIgTGlzdENhY2hlID0gcmVxdWlyZSgnLi9fTGlzdENhY2hlJyksXG4gICAgTWFwID0gcmVxdWlyZSgnLi9fTWFwJyksXG4gICAgTWFwQ2FjaGUgPSByZXF1aXJlKCcuL19NYXBDYWNoZScpO1xuXG4vKiogVXNlZCBhcyB0aGUgc2l6ZSB0byBlbmFibGUgbGFyZ2UgYXJyYXkgb3B0aW1pemF0aW9ucy4gKi9cbnZhciBMQVJHRV9BUlJBWV9TSVpFID0gMjAwO1xuXG4vKipcbiAqIFNldHMgdGhlIHN0YWNrIGBrZXlgIHRvIGB2YWx1ZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIHNldFxuICogQG1lbWJlck9mIFN0YWNrXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHNldC5cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIHN0YWNrIGNhY2hlIGluc3RhbmNlLlxuICovXG5mdW5jdGlvbiBzdGFja1NldChrZXksIHZhbHVlKSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXztcbiAgaWYgKGRhdGEgaW5zdGFuY2VvZiBMaXN0Q2FjaGUpIHtcbiAgICB2YXIgcGFpcnMgPSBkYXRhLl9fZGF0YV9fO1xuICAgIGlmICghTWFwIHx8IChwYWlycy5sZW5ndGggPCBMQVJHRV9BUlJBWV9TSVpFIC0gMSkpIHtcbiAgICAgIHBhaXJzLnB1c2goW2tleSwgdmFsdWVdKTtcbiAgICAgIHRoaXMuc2l6ZSA9ICsrZGF0YS5zaXplO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIGRhdGEgPSB0aGlzLl9fZGF0YV9fID0gbmV3IE1hcENhY2hlKHBhaXJzKTtcbiAgfVxuICBkYXRhLnNldChrZXksIHZhbHVlKTtcbiAgdGhpcy5zaXplID0gZGF0YS5zaXplO1xuICByZXR1cm4gdGhpcztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzdGFja1NldDtcbiIsInZhciBpc0Z1bmN0aW9uID0gcmVxdWlyZSgnLi9pc0Z1bmN0aW9uJyksXG4gICAgaXNNYXNrZWQgPSByZXF1aXJlKCcuL19pc01hc2tlZCcpLFxuICAgIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9pc09iamVjdCcpLFxuICAgIHRvU291cmNlID0gcmVxdWlyZSgnLi9fdG9Tb3VyY2UnKTtcblxuLyoqXG4gKiBVc2VkIHRvIG1hdGNoIGBSZWdFeHBgXG4gKiBbc3ludGF4IGNoYXJhY3RlcnNdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXBhdHRlcm5zKS5cbiAqL1xudmFyIHJlUmVnRXhwQ2hhciA9IC9bXFxcXF4kLiorPygpW1xcXXt9fF0vZztcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IGhvc3QgY29uc3RydWN0b3JzIChTYWZhcmkpLiAqL1xudmFyIHJlSXNIb3N0Q3RvciA9IC9eXFxbb2JqZWN0IC4rP0NvbnN0cnVjdG9yXFxdJC87XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBmdW5jUHJvdG8gPSBGdW5jdGlvbi5wcm90b3R5cGUsXG4gICAgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byByZXNvbHZlIHRoZSBkZWNvbXBpbGVkIHNvdXJjZSBvZiBmdW5jdGlvbnMuICovXG52YXIgZnVuY1RvU3RyaW5nID0gZnVuY1Byb3RvLnRvU3RyaW5nO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKiogVXNlZCB0byBkZXRlY3QgaWYgYSBtZXRob2QgaXMgbmF0aXZlLiAqL1xudmFyIHJlSXNOYXRpdmUgPSBSZWdFeHAoJ14nICtcbiAgZnVuY1RvU3RyaW5nLmNhbGwoaGFzT3duUHJvcGVydHkpLnJlcGxhY2UocmVSZWdFeHBDaGFyLCAnXFxcXCQmJylcbiAgLnJlcGxhY2UoL2hhc093blByb3BlcnR5fChmdW5jdGlvbikuKj8oPz1cXFxcXFwoKXwgZm9yIC4rPyg/PVxcXFxcXF0pL2csICckMS4qPycpICsgJyQnXG4pO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzTmF0aXZlYCB3aXRob3V0IGJhZCBzaGltIGNoZWNrcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIG5hdGl2ZSBmdW5jdGlvbixcbiAqICBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VJc05hdGl2ZSh2YWx1ZSkge1xuICBpZiAoIWlzT2JqZWN0KHZhbHVlKSB8fCBpc01hc2tlZCh2YWx1ZSkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyIHBhdHRlcm4gPSBpc0Z1bmN0aW9uKHZhbHVlKSA/IHJlSXNOYXRpdmUgOiByZUlzSG9zdEN0b3I7XG4gIHJldHVybiBwYXR0ZXJuLnRlc3QodG9Tb3VyY2UodmFsdWUpKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlSXNOYXRpdmU7XG4iLCJ2YXIgU3ltYm9sID0gcmVxdWlyZSgnLi9fU3ltYm9sJyk7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogVXNlZCB0byByZXNvbHZlIHRoZVxuICogW2B0b1N0cmluZ1RhZ2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLW9iamVjdC5wcm90b3R5cGUudG9zdHJpbmcpXG4gKiBvZiB2YWx1ZXMuXG4gKi9cbnZhciBuYXRpdmVPYmplY3RUb1N0cmluZyA9IG9iamVjdFByb3RvLnRvU3RyaW5nO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBzeW1Ub1N0cmluZ1RhZyA9IFN5bWJvbCA/IFN5bWJvbC50b1N0cmluZ1RhZyA6IHVuZGVmaW5lZDtcblxuLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VHZXRUYWdgIHdoaWNoIGlnbm9yZXMgYFN5bWJvbC50b1N0cmluZ1RhZ2AgdmFsdWVzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHJhdyBgdG9TdHJpbmdUYWdgLlxuICovXG5mdW5jdGlvbiBnZXRSYXdUYWcodmFsdWUpIHtcbiAgdmFyIGlzT3duID0gaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwgc3ltVG9TdHJpbmdUYWcpLFxuICAgICAgdGFnID0gdmFsdWVbc3ltVG9TdHJpbmdUYWddO1xuXG4gIHRyeSB7XG4gICAgdmFsdWVbc3ltVG9TdHJpbmdUYWddID0gdW5kZWZpbmVkO1xuICAgIHZhciB1bm1hc2tlZCA9IHRydWU7XG4gIH0gY2F0Y2ggKGUpIHt9XG5cbiAgdmFyIHJlc3VsdCA9IG5hdGl2ZU9iamVjdFRvU3RyaW5nLmNhbGwodmFsdWUpO1xuICBpZiAodW5tYXNrZWQpIHtcbiAgICBpZiAoaXNPd24pIHtcbiAgICAgIHZhbHVlW3N5bVRvU3RyaW5nVGFnXSA9IHRhZztcbiAgICB9IGVsc2Uge1xuICAgICAgZGVsZXRlIHZhbHVlW3N5bVRvU3RyaW5nVGFnXTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXRSYXdUYWc7XG4iLCIvKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKipcbiAqIFVzZWQgdG8gcmVzb2x2ZSB0aGVcbiAqIFtgdG9TdHJpbmdUYWdgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1vYmplY3QucHJvdG90eXBlLnRvc3RyaW5nKVxuICogb2YgdmFsdWVzLlxuICovXG52YXIgbmF0aXZlT2JqZWN0VG9TdHJpbmcgPSBvYmplY3RQcm90by50b1N0cmluZztcblxuLyoqXG4gKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgc3RyaW5nIHVzaW5nIGBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBzdHJpbmcuXG4gKi9cbmZ1bmN0aW9uIG9iamVjdFRvU3RyaW5nKHZhbHVlKSB7XG4gIHJldHVybiBuYXRpdmVPYmplY3RUb1N0cmluZy5jYWxsKHZhbHVlKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBvYmplY3RUb1N0cmluZztcbiIsInZhciBjb3JlSnNEYXRhID0gcmVxdWlyZSgnLi9fY29yZUpzRGF0YScpO1xuXG4vKiogVXNlZCB0byBkZXRlY3QgbWV0aG9kcyBtYXNxdWVyYWRpbmcgYXMgbmF0aXZlLiAqL1xudmFyIG1hc2tTcmNLZXkgPSAoZnVuY3Rpb24oKSB7XG4gIHZhciB1aWQgPSAvW14uXSskLy5leGVjKGNvcmVKc0RhdGEgJiYgY29yZUpzRGF0YS5rZXlzICYmIGNvcmVKc0RhdGEua2V5cy5JRV9QUk9UTyB8fCAnJyk7XG4gIHJldHVybiB1aWQgPyAoJ1N5bWJvbChzcmMpXzEuJyArIHVpZCkgOiAnJztcbn0oKSk7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGBmdW5jYCBoYXMgaXRzIHNvdXJjZSBtYXNrZWQuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBmdW5jYCBpcyBtYXNrZWQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaXNNYXNrZWQoZnVuYykge1xuICByZXR1cm4gISFtYXNrU3JjS2V5ICYmIChtYXNrU3JjS2V5IGluIGZ1bmMpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzTWFza2VkO1xuIiwidmFyIHJvb3QgPSByZXF1aXJlKCcuL19yb290Jyk7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBvdmVycmVhY2hpbmcgY29yZS1qcyBzaGltcy4gKi9cbnZhciBjb3JlSnNEYXRhID0gcm9vdFsnX19jb3JlLWpzX3NoYXJlZF9fJ107XG5cbm1vZHVsZS5leHBvcnRzID0gY29yZUpzRGF0YTtcbiIsIi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBmdW5jUHJvdG8gPSBGdW5jdGlvbi5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIHJlc29sdmUgdGhlIGRlY29tcGlsZWQgc291cmNlIG9mIGZ1bmN0aW9ucy4gKi9cbnZhciBmdW5jVG9TdHJpbmcgPSBmdW5jUHJvdG8udG9TdHJpbmc7XG5cbi8qKlxuICogQ29udmVydHMgYGZ1bmNgIHRvIGl0cyBzb3VyY2UgY29kZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHNvdXJjZSBjb2RlLlxuICovXG5mdW5jdGlvbiB0b1NvdXJjZShmdW5jKSB7XG4gIGlmIChmdW5jICE9IG51bGwpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIGZ1bmNUb1N0cmluZy5jYWxsKGZ1bmMpO1xuICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiAoZnVuYyArICcnKTtcbiAgICB9IGNhdGNoIChlKSB7fVxuICB9XG4gIHJldHVybiAnJztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB0b1NvdXJjZTtcbiIsIi8qKlxuICogR2V0cyB0aGUgdmFsdWUgYXQgYGtleWAgb2YgYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0XSBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcHJvcGVydHkgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIGdldFZhbHVlKG9iamVjdCwga2V5KSB7XG4gIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IG9iamVjdFtrZXldO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldFZhbHVlO1xuIiwidmFyIG1hcENhY2hlQ2xlYXIgPSByZXF1aXJlKCcuL19tYXBDYWNoZUNsZWFyJyksXG4gICAgbWFwQ2FjaGVEZWxldGUgPSByZXF1aXJlKCcuL19tYXBDYWNoZURlbGV0ZScpLFxuICAgIG1hcENhY2hlR2V0ID0gcmVxdWlyZSgnLi9fbWFwQ2FjaGVHZXQnKSxcbiAgICBtYXBDYWNoZUhhcyA9IHJlcXVpcmUoJy4vX21hcENhY2hlSGFzJyksXG4gICAgbWFwQ2FjaGVTZXQgPSByZXF1aXJlKCcuL19tYXBDYWNoZVNldCcpO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBtYXAgY2FjaGUgb2JqZWN0IHRvIHN0b3JlIGtleS12YWx1ZSBwYWlycy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge0FycmF5fSBbZW50cmllc10gVGhlIGtleS12YWx1ZSBwYWlycyB0byBjYWNoZS5cbiAqL1xuZnVuY3Rpb24gTWFwQ2FjaGUoZW50cmllcykge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IGVudHJpZXMgPT0gbnVsbCA/IDAgOiBlbnRyaWVzLmxlbmd0aDtcblxuICB0aGlzLmNsZWFyKCk7XG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgdmFyIGVudHJ5ID0gZW50cmllc1tpbmRleF07XG4gICAgdGhpcy5zZXQoZW50cnlbMF0sIGVudHJ5WzFdKTtcbiAgfVxufVxuXG4vLyBBZGQgbWV0aG9kcyB0byBgTWFwQ2FjaGVgLlxuTWFwQ2FjaGUucHJvdG90eXBlLmNsZWFyID0gbWFwQ2FjaGVDbGVhcjtcbk1hcENhY2hlLnByb3RvdHlwZVsnZGVsZXRlJ10gPSBtYXBDYWNoZURlbGV0ZTtcbk1hcENhY2hlLnByb3RvdHlwZS5nZXQgPSBtYXBDYWNoZUdldDtcbk1hcENhY2hlLnByb3RvdHlwZS5oYXMgPSBtYXBDYWNoZUhhcztcbk1hcENhY2hlLnByb3RvdHlwZS5zZXQgPSBtYXBDYWNoZVNldDtcblxubW9kdWxlLmV4cG9ydHMgPSBNYXBDYWNoZTtcbiIsInZhciBIYXNoID0gcmVxdWlyZSgnLi9fSGFzaCcpLFxuICAgIExpc3RDYWNoZSA9IHJlcXVpcmUoJy4vX0xpc3RDYWNoZScpLFxuICAgIE1hcCA9IHJlcXVpcmUoJy4vX01hcCcpO1xuXG4vKipcbiAqIFJlbW92ZXMgYWxsIGtleS12YWx1ZSBlbnRyaWVzIGZyb20gdGhlIG1hcC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgY2xlYXJcbiAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICovXG5mdW5jdGlvbiBtYXBDYWNoZUNsZWFyKCkge1xuICB0aGlzLnNpemUgPSAwO1xuICB0aGlzLl9fZGF0YV9fID0ge1xuICAgICdoYXNoJzogbmV3IEhhc2gsXG4gICAgJ21hcCc6IG5ldyAoTWFwIHx8IExpc3RDYWNoZSksXG4gICAgJ3N0cmluZyc6IG5ldyBIYXNoXG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbWFwQ2FjaGVDbGVhcjtcbiIsInZhciBoYXNoQ2xlYXIgPSByZXF1aXJlKCcuL19oYXNoQ2xlYXInKSxcbiAgICBoYXNoRGVsZXRlID0gcmVxdWlyZSgnLi9faGFzaERlbGV0ZScpLFxuICAgIGhhc2hHZXQgPSByZXF1aXJlKCcuL19oYXNoR2V0JyksXG4gICAgaGFzaEhhcyA9IHJlcXVpcmUoJy4vX2hhc2hIYXMnKSxcbiAgICBoYXNoU2V0ID0gcmVxdWlyZSgnLi9faGFzaFNldCcpO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBoYXNoIG9iamVjdC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge0FycmF5fSBbZW50cmllc10gVGhlIGtleS12YWx1ZSBwYWlycyB0byBjYWNoZS5cbiAqL1xuZnVuY3Rpb24gSGFzaChlbnRyaWVzKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gZW50cmllcyA9PSBudWxsID8gMCA6IGVudHJpZXMubGVuZ3RoO1xuXG4gIHRoaXMuY2xlYXIoKTtcbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICB2YXIgZW50cnkgPSBlbnRyaWVzW2luZGV4XTtcbiAgICB0aGlzLnNldChlbnRyeVswXSwgZW50cnlbMV0pO1xuICB9XG59XG5cbi8vIEFkZCBtZXRob2RzIHRvIGBIYXNoYC5cbkhhc2gucHJvdG90eXBlLmNsZWFyID0gaGFzaENsZWFyO1xuSGFzaC5wcm90b3R5cGVbJ2RlbGV0ZSddID0gaGFzaERlbGV0ZTtcbkhhc2gucHJvdG90eXBlLmdldCA9IGhhc2hHZXQ7XG5IYXNoLnByb3RvdHlwZS5oYXMgPSBoYXNoSGFzO1xuSGFzaC5wcm90b3R5cGUuc2V0ID0gaGFzaFNldDtcblxubW9kdWxlLmV4cG9ydHMgPSBIYXNoO1xuIiwidmFyIG5hdGl2ZUNyZWF0ZSA9IHJlcXVpcmUoJy4vX25hdGl2ZUNyZWF0ZScpO1xuXG4vKipcbiAqIFJlbW92ZXMgYWxsIGtleS12YWx1ZSBlbnRyaWVzIGZyb20gdGhlIGhhc2guXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGNsZWFyXG4gKiBAbWVtYmVyT2YgSGFzaFxuICovXG5mdW5jdGlvbiBoYXNoQ2xlYXIoKSB7XG4gIHRoaXMuX19kYXRhX18gPSBuYXRpdmVDcmVhdGUgPyBuYXRpdmVDcmVhdGUobnVsbCkgOiB7fTtcbiAgdGhpcy5zaXplID0gMDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBoYXNoQ2xlYXI7XG4iLCIvKipcbiAqIFJlbW92ZXMgYGtleWAgYW5kIGl0cyB2YWx1ZSBmcm9tIHRoZSBoYXNoLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBkZWxldGVcbiAqIEBtZW1iZXJPZiBIYXNoXG4gKiBAcGFyYW0ge09iamVjdH0gaGFzaCBUaGUgaGFzaCB0byBtb2RpZnkuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHJlbW92ZS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZW50cnkgd2FzIHJlbW92ZWQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaGFzaERlbGV0ZShrZXkpIHtcbiAgdmFyIHJlc3VsdCA9IHRoaXMuaGFzKGtleSkgJiYgZGVsZXRlIHRoaXMuX19kYXRhX19ba2V5XTtcbiAgdGhpcy5zaXplIC09IHJlc3VsdCA/IDEgOiAwO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGhhc2hEZWxldGU7XG4iLCJ2YXIgbmF0aXZlQ3JlYXRlID0gcmVxdWlyZSgnLi9fbmF0aXZlQ3JlYXRlJyk7XG5cbi8qKiBVc2VkIHRvIHN0YW5kLWluIGZvciBgdW5kZWZpbmVkYCBoYXNoIHZhbHVlcy4gKi9cbnZhciBIQVNIX1VOREVGSU5FRCA9ICdfX2xvZGFzaF9oYXNoX3VuZGVmaW5lZF9fJztcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBHZXRzIHRoZSBoYXNoIHZhbHVlIGZvciBga2V5YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZ2V0XG4gKiBAbWVtYmVyT2YgSGFzaFxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZW50cnkgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIGhhc2hHZXQoa2V5KSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXztcbiAgaWYgKG5hdGl2ZUNyZWF0ZSkge1xuICAgIHZhciByZXN1bHQgPSBkYXRhW2tleV07XG4gICAgcmV0dXJuIHJlc3VsdCA9PT0gSEFTSF9VTkRFRklORUQgPyB1bmRlZmluZWQgOiByZXN1bHQ7XG4gIH1cbiAgcmV0dXJuIGhhc093blByb3BlcnR5LmNhbGwoZGF0YSwga2V5KSA/IGRhdGFba2V5XSA6IHVuZGVmaW5lZDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBoYXNoR2V0O1xuIiwidmFyIG5hdGl2ZUNyZWF0ZSA9IHJlcXVpcmUoJy4vX25hdGl2ZUNyZWF0ZScpO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIENoZWNrcyBpZiBhIGhhc2ggdmFsdWUgZm9yIGBrZXlgIGV4aXN0cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgaGFzXG4gKiBAbWVtYmVyT2YgSGFzaFxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBlbnRyeSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbiBlbnRyeSBmb3IgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGhhc2hIYXMoa2V5KSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXztcbiAgcmV0dXJuIG5hdGl2ZUNyZWF0ZSA/IChkYXRhW2tleV0gIT09IHVuZGVmaW5lZCkgOiBoYXNPd25Qcm9wZXJ0eS5jYWxsKGRhdGEsIGtleSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaGFzaEhhcztcbiIsInZhciBuYXRpdmVDcmVhdGUgPSByZXF1aXJlKCcuL19uYXRpdmVDcmVhdGUnKTtcblxuLyoqIFVzZWQgdG8gc3RhbmQtaW4gZm9yIGB1bmRlZmluZWRgIGhhc2ggdmFsdWVzLiAqL1xudmFyIEhBU0hfVU5ERUZJTkVEID0gJ19fbG9kYXNoX2hhc2hfdW5kZWZpbmVkX18nO1xuXG4vKipcbiAqIFNldHMgdGhlIGhhc2ggYGtleWAgdG8gYHZhbHVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgc2V0XG4gKiBAbWVtYmVyT2YgSGFzaFxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBoYXNoIGluc3RhbmNlLlxuICovXG5mdW5jdGlvbiBoYXNoU2V0KGtleSwgdmFsdWUpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fO1xuICB0aGlzLnNpemUgKz0gdGhpcy5oYXMoa2V5KSA/IDAgOiAxO1xuICBkYXRhW2tleV0gPSAobmF0aXZlQ3JlYXRlICYmIHZhbHVlID09PSB1bmRlZmluZWQpID8gSEFTSF9VTkRFRklORUQgOiB2YWx1ZTtcbiAgcmV0dXJuIHRoaXM7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaGFzaFNldDtcbiIsInZhciBnZXRNYXBEYXRhID0gcmVxdWlyZSgnLi9fZ2V0TWFwRGF0YScpO1xuXG4vKipcbiAqIFJlbW92ZXMgYGtleWAgYW5kIGl0cyB2YWx1ZSBmcm9tIHRoZSBtYXAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGRlbGV0ZVxuICogQG1lbWJlck9mIE1hcENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHJlbW92ZS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZW50cnkgd2FzIHJlbW92ZWQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gbWFwQ2FjaGVEZWxldGUoa2V5KSB7XG4gIHZhciByZXN1bHQgPSBnZXRNYXBEYXRhKHRoaXMsIGtleSlbJ2RlbGV0ZSddKGtleSk7XG4gIHRoaXMuc2l6ZSAtPSByZXN1bHQgPyAxIDogMDtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBtYXBDYWNoZURlbGV0ZTtcbiIsIi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgc3VpdGFibGUgZm9yIHVzZSBhcyB1bmlxdWUgb2JqZWN0IGtleS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBzdWl0YWJsZSwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBpc0tleWFibGUodmFsdWUpIHtcbiAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsdWU7XG4gIHJldHVybiAodHlwZSA9PSAnc3RyaW5nJyB8fCB0eXBlID09ICdudW1iZXInIHx8IHR5cGUgPT0gJ3N5bWJvbCcgfHwgdHlwZSA9PSAnYm9vbGVhbicpXG4gICAgPyAodmFsdWUgIT09ICdfX3Byb3RvX18nKVxuICAgIDogKHZhbHVlID09PSBudWxsKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc0tleWFibGU7XG4iLCJ2YXIgZ2V0TWFwRGF0YSA9IHJlcXVpcmUoJy4vX2dldE1hcERhdGEnKTtcblxuLyoqXG4gKiBHZXRzIHRoZSBtYXAgdmFsdWUgZm9yIGBrZXlgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBnZXRcbiAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZW50cnkgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIG1hcENhY2hlR2V0KGtleSkge1xuICByZXR1cm4gZ2V0TWFwRGF0YSh0aGlzLCBrZXkpLmdldChrZXkpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG1hcENhY2hlR2V0O1xuIiwidmFyIGdldE1hcERhdGEgPSByZXF1aXJlKCcuL19nZXRNYXBEYXRhJyk7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGEgbWFwIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGhhc1xuICogQG1lbWJlck9mIE1hcENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gbWFwQ2FjaGVIYXMoa2V5KSB7XG4gIHJldHVybiBnZXRNYXBEYXRhKHRoaXMsIGtleSkuaGFzKGtleSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbWFwQ2FjaGVIYXM7XG4iLCJ2YXIgZ2V0TWFwRGF0YSA9IHJlcXVpcmUoJy4vX2dldE1hcERhdGEnKTtcblxuLyoqXG4gKiBTZXRzIHRoZSBtYXAgYGtleWAgdG8gYHZhbHVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgc2V0XG4gKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gc2V0LlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbWFwIGNhY2hlIGluc3RhbmNlLlxuICovXG5mdW5jdGlvbiBtYXBDYWNoZVNldChrZXksIHZhbHVlKSB7XG4gIHZhciBkYXRhID0gZ2V0TWFwRGF0YSh0aGlzLCBrZXkpLFxuICAgICAgc2l6ZSA9IGRhdGEuc2l6ZTtcblxuICBkYXRhLnNldChrZXksIHZhbHVlKTtcbiAgdGhpcy5zaXplICs9IGRhdGEuc2l6ZSA9PSBzaXplID8gMCA6IDE7XG4gIHJldHVybiB0aGlzO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG1hcENhY2hlU2V0O1xuIiwidmFyIGNyZWF0ZUJhc2VGb3IgPSByZXF1aXJlKCcuL19jcmVhdGVCYXNlRm9yJyk7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYGJhc2VGb3JPd25gIHdoaWNoIGl0ZXJhdGVzIG92ZXIgYG9iamVjdGBcbiAqIHByb3BlcnRpZXMgcmV0dXJuZWQgYnkgYGtleXNGdW5jYCBhbmQgaW52b2tlcyBgaXRlcmF0ZWVgIGZvciBlYWNoIHByb3BlcnR5LlxuICogSXRlcmF0ZWUgZnVuY3Rpb25zIG1heSBleGl0IGl0ZXJhdGlvbiBlYXJseSBieSBleHBsaWNpdGx5IHJldHVybmluZyBgZmFsc2VgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGtleXNGdW5jIFRoZSBmdW5jdGlvbiB0byBnZXQgdGhlIGtleXMgb2YgYG9iamVjdGAuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICovXG52YXIgYmFzZUZvciA9IGNyZWF0ZUJhc2VGb3IoKTtcblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlRm9yO1xuIiwiLyoqXG4gKiBDcmVhdGVzIGEgYmFzZSBmdW5jdGlvbiBmb3IgbWV0aG9kcyBsaWtlIGBfLmZvckluYCBhbmQgYF8uZm9yT3duYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtib29sZWFufSBbZnJvbVJpZ2h0XSBTcGVjaWZ5IGl0ZXJhdGluZyBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBiYXNlIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBjcmVhdGVCYXNlRm9yKGZyb21SaWdodCkge1xuICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0LCBpdGVyYXRlZSwga2V5c0Z1bmMpIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgaXRlcmFibGUgPSBPYmplY3Qob2JqZWN0KSxcbiAgICAgICAgcHJvcHMgPSBrZXlzRnVuYyhvYmplY3QpLFxuICAgICAgICBsZW5ndGggPSBwcm9wcy5sZW5ndGg7XG5cbiAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgIHZhciBrZXkgPSBwcm9wc1tmcm9tUmlnaHQgPyBsZW5ndGggOiArK2luZGV4XTtcbiAgICAgIGlmIChpdGVyYXRlZShpdGVyYWJsZVtrZXldLCBrZXksIGl0ZXJhYmxlKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBvYmplY3Q7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY3JlYXRlQmFzZUZvcjtcbiIsInZhciBhc3NpZ25NZXJnZVZhbHVlID0gcmVxdWlyZSgnLi9fYXNzaWduTWVyZ2VWYWx1ZScpLFxuICAgIGNsb25lQnVmZmVyID0gcmVxdWlyZSgnLi9fY2xvbmVCdWZmZXInKSxcbiAgICBjbG9uZVR5cGVkQXJyYXkgPSByZXF1aXJlKCcuL19jbG9uZVR5cGVkQXJyYXknKSxcbiAgICBjb3B5QXJyYXkgPSByZXF1aXJlKCcuL19jb3B5QXJyYXknKSxcbiAgICBpbml0Q2xvbmVPYmplY3QgPSByZXF1aXJlKCcuL19pbml0Q2xvbmVPYmplY3QnKSxcbiAgICBpc0FyZ3VtZW50cyA9IHJlcXVpcmUoJy4vaXNBcmd1bWVudHMnKSxcbiAgICBpc0FycmF5ID0gcmVxdWlyZSgnLi9pc0FycmF5JyksXG4gICAgaXNBcnJheUxpa2VPYmplY3QgPSByZXF1aXJlKCcuL2lzQXJyYXlMaWtlT2JqZWN0JyksXG4gICAgaXNCdWZmZXIgPSByZXF1aXJlKCcuL2lzQnVmZmVyJyksXG4gICAgaXNGdW5jdGlvbiA9IHJlcXVpcmUoJy4vaXNGdW5jdGlvbicpLFxuICAgIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9pc09iamVjdCcpLFxuICAgIGlzUGxhaW5PYmplY3QgPSByZXF1aXJlKCcuL2lzUGxhaW5PYmplY3QnKSxcbiAgICBpc1R5cGVkQXJyYXkgPSByZXF1aXJlKCcuL2lzVHlwZWRBcnJheScpLFxuICAgIHNhZmVHZXQgPSByZXF1aXJlKCcuL19zYWZlR2V0JyksXG4gICAgdG9QbGFpbk9iamVjdCA9IHJlcXVpcmUoJy4vdG9QbGFpbk9iamVjdCcpO1xuXG4vKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZU1lcmdlYCBmb3IgYXJyYXlzIGFuZCBvYmplY3RzIHdoaWNoIHBlcmZvcm1zXG4gKiBkZWVwIG1lcmdlcyBhbmQgdHJhY2tzIHRyYXZlcnNlZCBvYmplY3RzIGVuYWJsaW5nIG9iamVjdHMgd2l0aCBjaXJjdWxhclxuICogcmVmZXJlbmNlcyB0byBiZSBtZXJnZWQuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIHNvdXJjZSBvYmplY3QuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIG1lcmdlLlxuICogQHBhcmFtIHtudW1iZXJ9IHNyY0luZGV4IFRoZSBpbmRleCBvZiBgc291cmNlYC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IG1lcmdlRnVuYyBUaGUgZnVuY3Rpb24gdG8gbWVyZ2UgdmFsdWVzLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgYXNzaWduZWQgdmFsdWVzLlxuICogQHBhcmFtIHtPYmplY3R9IFtzdGFja10gVHJhY2tzIHRyYXZlcnNlZCBzb3VyY2UgdmFsdWVzIGFuZCB0aGVpciBtZXJnZWRcbiAqICBjb3VudGVycGFydHMuXG4gKi9cbmZ1bmN0aW9uIGJhc2VNZXJnZURlZXAob2JqZWN0LCBzb3VyY2UsIGtleSwgc3JjSW5kZXgsIG1lcmdlRnVuYywgY3VzdG9taXplciwgc3RhY2spIHtcbiAgdmFyIG9ialZhbHVlID0gc2FmZUdldChvYmplY3QsIGtleSksXG4gICAgICBzcmNWYWx1ZSA9IHNhZmVHZXQoc291cmNlLCBrZXkpLFxuICAgICAgc3RhY2tlZCA9IHN0YWNrLmdldChzcmNWYWx1ZSk7XG5cbiAgaWYgKHN0YWNrZWQpIHtcbiAgICBhc3NpZ25NZXJnZVZhbHVlKG9iamVjdCwga2V5LCBzdGFja2VkKTtcbiAgICByZXR1cm47XG4gIH1cbiAgdmFyIG5ld1ZhbHVlID0gY3VzdG9taXplclxuICAgID8gY3VzdG9taXplcihvYmpWYWx1ZSwgc3JjVmFsdWUsIChrZXkgKyAnJyksIG9iamVjdCwgc291cmNlLCBzdGFjaylcbiAgICA6IHVuZGVmaW5lZDtcblxuICB2YXIgaXNDb21tb24gPSBuZXdWYWx1ZSA9PT0gdW5kZWZpbmVkO1xuXG4gIGlmIChpc0NvbW1vbikge1xuICAgIHZhciBpc0FyciA9IGlzQXJyYXkoc3JjVmFsdWUpLFxuICAgICAgICBpc0J1ZmYgPSAhaXNBcnIgJiYgaXNCdWZmZXIoc3JjVmFsdWUpLFxuICAgICAgICBpc1R5cGVkID0gIWlzQXJyICYmICFpc0J1ZmYgJiYgaXNUeXBlZEFycmF5KHNyY1ZhbHVlKTtcblxuICAgIG5ld1ZhbHVlID0gc3JjVmFsdWU7XG4gICAgaWYgKGlzQXJyIHx8IGlzQnVmZiB8fCBpc1R5cGVkKSB7XG4gICAgICBpZiAoaXNBcnJheShvYmpWYWx1ZSkpIHtcbiAgICAgICAgbmV3VmFsdWUgPSBvYmpWYWx1ZTtcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKGlzQXJyYXlMaWtlT2JqZWN0KG9ialZhbHVlKSkge1xuICAgICAgICBuZXdWYWx1ZSA9IGNvcHlBcnJheShvYmpWYWx1ZSk7XG4gICAgICB9XG4gICAgICBlbHNlIGlmIChpc0J1ZmYpIHtcbiAgICAgICAgaXNDb21tb24gPSBmYWxzZTtcbiAgICAgICAgbmV3VmFsdWUgPSBjbG9uZUJ1ZmZlcihzcmNWYWx1ZSwgdHJ1ZSk7XG4gICAgICB9XG4gICAgICBlbHNlIGlmIChpc1R5cGVkKSB7XG4gICAgICAgIGlzQ29tbW9uID0gZmFsc2U7XG4gICAgICAgIG5ld1ZhbHVlID0gY2xvbmVUeXBlZEFycmF5KHNyY1ZhbHVlLCB0cnVlKTtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBuZXdWYWx1ZSA9IFtdO1xuICAgICAgfVxuICAgIH1cbiAgICBlbHNlIGlmIChpc1BsYWluT2JqZWN0KHNyY1ZhbHVlKSB8fCBpc0FyZ3VtZW50cyhzcmNWYWx1ZSkpIHtcbiAgICAgIG5ld1ZhbHVlID0gb2JqVmFsdWU7XG4gICAgICBpZiAoaXNBcmd1bWVudHMob2JqVmFsdWUpKSB7XG4gICAgICAgIG5ld1ZhbHVlID0gdG9QbGFpbk9iamVjdChvYmpWYWx1ZSk7XG4gICAgICB9XG4gICAgICBlbHNlIGlmICghaXNPYmplY3Qob2JqVmFsdWUpIHx8IGlzRnVuY3Rpb24ob2JqVmFsdWUpKSB7XG4gICAgICAgIG5ld1ZhbHVlID0gaW5pdENsb25lT2JqZWN0KHNyY1ZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICBpc0NvbW1vbiA9IGZhbHNlO1xuICAgIH1cbiAgfVxuICBpZiAoaXNDb21tb24pIHtcbiAgICAvLyBSZWN1cnNpdmVseSBtZXJnZSBvYmplY3RzIGFuZCBhcnJheXMgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKS5cbiAgICBzdGFjay5zZXQoc3JjVmFsdWUsIG5ld1ZhbHVlKTtcbiAgICBtZXJnZUZ1bmMobmV3VmFsdWUsIHNyY1ZhbHVlLCBzcmNJbmRleCwgY3VzdG9taXplciwgc3RhY2spO1xuICAgIHN0YWNrWydkZWxldGUnXShzcmNWYWx1ZSk7XG4gIH1cbiAgYXNzaWduTWVyZ2VWYWx1ZShvYmplY3QsIGtleSwgbmV3VmFsdWUpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VNZXJnZURlZXA7XG4iLCJ2YXIgcm9vdCA9IHJlcXVpcmUoJy4vX3Jvb3QnKTtcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBleHBvcnRzYC4gKi9cbnZhciBmcmVlRXhwb3J0cyA9IHR5cGVvZiBleHBvcnRzID09ICdvYmplY3QnICYmIGV4cG9ydHMgJiYgIWV4cG9ydHMubm9kZVR5cGUgJiYgZXhwb3J0cztcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBtb2R1bGVgLiAqL1xudmFyIGZyZWVNb2R1bGUgPSBmcmVlRXhwb3J0cyAmJiB0eXBlb2YgbW9kdWxlID09ICdvYmplY3QnICYmIG1vZHVsZSAmJiAhbW9kdWxlLm5vZGVUeXBlICYmIG1vZHVsZTtcblxuLyoqIERldGVjdCB0aGUgcG9wdWxhciBDb21tb25KUyBleHRlbnNpb24gYG1vZHVsZS5leHBvcnRzYC4gKi9cbnZhciBtb2R1bGVFeHBvcnRzID0gZnJlZU1vZHVsZSAmJiBmcmVlTW9kdWxlLmV4cG9ydHMgPT09IGZyZWVFeHBvcnRzO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBCdWZmZXIgPSBtb2R1bGVFeHBvcnRzID8gcm9vdC5CdWZmZXIgOiB1bmRlZmluZWQsXG4gICAgYWxsb2NVbnNhZmUgPSBCdWZmZXIgPyBCdWZmZXIuYWxsb2NVbnNhZmUgOiB1bmRlZmluZWQ7XG5cbi8qKlxuICogQ3JlYXRlcyBhIGNsb25lIG9mICBgYnVmZmVyYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtCdWZmZXJ9IGJ1ZmZlciBUaGUgYnVmZmVyIHRvIGNsb25lLlxuICogQHBhcmFtIHtib29sZWFufSBbaXNEZWVwXSBTcGVjaWZ5IGEgZGVlcCBjbG9uZS5cbiAqIEByZXR1cm5zIHtCdWZmZXJ9IFJldHVybnMgdGhlIGNsb25lZCBidWZmZXIuXG4gKi9cbmZ1bmN0aW9uIGNsb25lQnVmZmVyKGJ1ZmZlciwgaXNEZWVwKSB7XG4gIGlmIChpc0RlZXApIHtcbiAgICByZXR1cm4gYnVmZmVyLnNsaWNlKCk7XG4gIH1cbiAgdmFyIGxlbmd0aCA9IGJ1ZmZlci5sZW5ndGgsXG4gICAgICByZXN1bHQgPSBhbGxvY1Vuc2FmZSA/IGFsbG9jVW5zYWZlKGxlbmd0aCkgOiBuZXcgYnVmZmVyLmNvbnN0cnVjdG9yKGxlbmd0aCk7XG5cbiAgYnVmZmVyLmNvcHkocmVzdWx0KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjbG9uZUJ1ZmZlcjtcbiIsInZhciBjbG9uZUFycmF5QnVmZmVyID0gcmVxdWlyZSgnLi9fY2xvbmVBcnJheUJ1ZmZlcicpO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBjbG9uZSBvZiBgdHlwZWRBcnJheWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSB0eXBlZEFycmF5IFRoZSB0eXBlZCBhcnJheSB0byBjbG9uZS5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW2lzRGVlcF0gU3BlY2lmeSBhIGRlZXAgY2xvbmUuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjbG9uZWQgdHlwZWQgYXJyYXkuXG4gKi9cbmZ1bmN0aW9uIGNsb25lVHlwZWRBcnJheSh0eXBlZEFycmF5LCBpc0RlZXApIHtcbiAgdmFyIGJ1ZmZlciA9IGlzRGVlcCA/IGNsb25lQXJyYXlCdWZmZXIodHlwZWRBcnJheS5idWZmZXIpIDogdHlwZWRBcnJheS5idWZmZXI7XG4gIHJldHVybiBuZXcgdHlwZWRBcnJheS5jb25zdHJ1Y3RvcihidWZmZXIsIHR5cGVkQXJyYXkuYnl0ZU9mZnNldCwgdHlwZWRBcnJheS5sZW5ndGgpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNsb25lVHlwZWRBcnJheTtcbiIsInZhciBVaW50OEFycmF5ID0gcmVxdWlyZSgnLi9fVWludDhBcnJheScpO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBjbG9uZSBvZiBgYXJyYXlCdWZmZXJgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5QnVmZmVyfSBhcnJheUJ1ZmZlciBUaGUgYXJyYXkgYnVmZmVyIHRvIGNsb25lLlxuICogQHJldHVybnMge0FycmF5QnVmZmVyfSBSZXR1cm5zIHRoZSBjbG9uZWQgYXJyYXkgYnVmZmVyLlxuICovXG5mdW5jdGlvbiBjbG9uZUFycmF5QnVmZmVyKGFycmF5QnVmZmVyKSB7XG4gIHZhciByZXN1bHQgPSBuZXcgYXJyYXlCdWZmZXIuY29uc3RydWN0b3IoYXJyYXlCdWZmZXIuYnl0ZUxlbmd0aCk7XG4gIG5ldyBVaW50OEFycmF5KHJlc3VsdCkuc2V0KG5ldyBVaW50OEFycmF5KGFycmF5QnVmZmVyKSk7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY2xvbmVBcnJheUJ1ZmZlcjtcbiIsInZhciByb290ID0gcmVxdWlyZSgnLi9fcm9vdCcpO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBVaW50OEFycmF5ID0gcm9vdC5VaW50OEFycmF5O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFVpbnQ4QXJyYXk7XG4iLCIvKipcbiAqIENvcGllcyB0aGUgdmFsdWVzIG9mIGBzb3VyY2VgIHRvIGBhcnJheWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IHNvdXJjZSBUaGUgYXJyYXkgdG8gY29weSB2YWx1ZXMgZnJvbS5cbiAqIEBwYXJhbSB7QXJyYXl9IFthcnJheT1bXV0gVGhlIGFycmF5IHRvIGNvcHkgdmFsdWVzIHRvLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gKi9cbmZ1bmN0aW9uIGNvcHlBcnJheShzb3VyY2UsIGFycmF5KSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gc291cmNlLmxlbmd0aDtcblxuICBhcnJheSB8fCAoYXJyYXkgPSBBcnJheShsZW5ndGgpKTtcbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICBhcnJheVtpbmRleF0gPSBzb3VyY2VbaW5kZXhdO1xuICB9XG4gIHJldHVybiBhcnJheTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjb3B5QXJyYXk7XG4iLCJ2YXIgYmFzZUNyZWF0ZSA9IHJlcXVpcmUoJy4vX2Jhc2VDcmVhdGUnKSxcbiAgICBnZXRQcm90b3R5cGUgPSByZXF1aXJlKCcuL19nZXRQcm90b3R5cGUnKSxcbiAgICBpc1Byb3RvdHlwZSA9IHJlcXVpcmUoJy4vX2lzUHJvdG90eXBlJyk7XG5cbi8qKlxuICogSW5pdGlhbGl6ZXMgYW4gb2JqZWN0IGNsb25lLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gY2xvbmUuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBpbml0aWFsaXplZCBjbG9uZS5cbiAqL1xuZnVuY3Rpb24gaW5pdENsb25lT2JqZWN0KG9iamVjdCkge1xuICByZXR1cm4gKHR5cGVvZiBvYmplY3QuY29uc3RydWN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNQcm90b3R5cGUob2JqZWN0KSlcbiAgICA/IGJhc2VDcmVhdGUoZ2V0UHJvdG90eXBlKG9iamVjdCkpXG4gICAgOiB7fTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpbml0Q2xvbmVPYmplY3Q7XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL2lzT2JqZWN0Jyk7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdENyZWF0ZSA9IE9iamVjdC5jcmVhdGU7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uY3JlYXRlYCB3aXRob3V0IHN1cHBvcnQgZm9yIGFzc2lnbmluZ1xuICogcHJvcGVydGllcyB0byB0aGUgY3JlYXRlZCBvYmplY3QuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBwcm90byBUaGUgb2JqZWN0IHRvIGluaGVyaXQgZnJvbS5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBvYmplY3QuXG4gKi9cbnZhciBiYXNlQ3JlYXRlID0gKGZ1bmN0aW9uKCkge1xuICBmdW5jdGlvbiBvYmplY3QoKSB7fVxuICByZXR1cm4gZnVuY3Rpb24ocHJvdG8pIHtcbiAgICBpZiAoIWlzT2JqZWN0KHByb3RvKSkge1xuICAgICAgcmV0dXJuIHt9O1xuICAgIH1cbiAgICBpZiAob2JqZWN0Q3JlYXRlKSB7XG4gICAgICByZXR1cm4gb2JqZWN0Q3JlYXRlKHByb3RvKTtcbiAgICB9XG4gICAgb2JqZWN0LnByb3RvdHlwZSA9IHByb3RvO1xuICAgIHZhciByZXN1bHQgPSBuZXcgb2JqZWN0O1xuICAgIG9iamVjdC5wcm90b3R5cGUgPSB1bmRlZmluZWQ7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcbn0oKSk7XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUNyZWF0ZTtcbiIsIi8qKlxuICogQ3JlYXRlcyBhIHVuYXJ5IGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBgZnVuY2Agd2l0aCBpdHMgYXJndW1lbnQgdHJhbnNmb3JtZWQuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHdyYXAuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSB0cmFuc2Zvcm0gVGhlIGFyZ3VtZW50IHRyYW5zZm9ybS5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBvdmVyQXJnKGZ1bmMsIHRyYW5zZm9ybSkge1xuICByZXR1cm4gZnVuY3Rpb24oYXJnKSB7XG4gICAgcmV0dXJuIGZ1bmModHJhbnNmb3JtKGFyZykpO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG92ZXJBcmc7XG4iLCJ2YXIgYmFzZUdldFRhZyA9IHJlcXVpcmUoJy4vX2Jhc2VHZXRUYWcnKSxcbiAgICBpc09iamVjdExpa2UgPSByZXF1aXJlKCcuL2lzT2JqZWN0TGlrZScpO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgYXJnc1RhZyA9ICdbb2JqZWN0IEFyZ3VtZW50c10nO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzQXJndW1lbnRzYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBgYXJndW1lbnRzYCBvYmplY3QsXG4gKi9cbmZ1bmN0aW9uIGJhc2VJc0FyZ3VtZW50cyh2YWx1ZSkge1xuICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBiYXNlR2V0VGFnKHZhbHVlKSA9PSBhcmdzVGFnO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VJc0FyZ3VtZW50cztcbiIsInZhciBpc0FycmF5TGlrZSA9IHJlcXVpcmUoJy4vaXNBcnJheUxpa2UnKSxcbiAgICBpc09iamVjdExpa2UgPSByZXF1aXJlKCcuL2lzT2JqZWN0TGlrZScpO1xuXG4vKipcbiAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uaXNBcnJheUxpa2VgIGV4Y2VwdCB0aGF0IGl0IGFsc28gY2hlY2tzIGlmIGB2YWx1ZWBcbiAqIGlzIGFuIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBhcnJheS1saWtlIG9iamVjdCxcbiAqICBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNBcnJheUxpa2VPYmplY3QoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQXJyYXlMaWtlT2JqZWN0KGRvY3VtZW50LmJvZHkuY2hpbGRyZW4pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNBcnJheUxpa2VPYmplY3QoJ2FiYycpO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzQXJyYXlMaWtlT2JqZWN0KF8ubm9vcCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0FycmF5TGlrZU9iamVjdCh2YWx1ZSkge1xuICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBpc0FycmF5TGlrZSh2YWx1ZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNBcnJheUxpa2VPYmplY3Q7XG4iLCIvKipcbiAqIFRoaXMgbWV0aG9kIHJldHVybnMgYGZhbHNlYC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMTMuMFxuICogQGNhdGVnb3J5IFV0aWxcbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8udGltZXMoMiwgXy5zdHViRmFsc2UpO1xuICogLy8gPT4gW2ZhbHNlLCBmYWxzZV1cbiAqL1xuZnVuY3Rpb24gc3R1YkZhbHNlKCkge1xuICByZXR1cm4gZmFsc2U7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc3R1YkZhbHNlO1xuIiwidmFyIGJhc2VHZXRUYWcgPSByZXF1aXJlKCcuL19iYXNlR2V0VGFnJyksXG4gICAgZ2V0UHJvdG90eXBlID0gcmVxdWlyZSgnLi9fZ2V0UHJvdG90eXBlJyksXG4gICAgaXNPYmplY3RMaWtlID0gcmVxdWlyZSgnLi9pc09iamVjdExpa2UnKTtcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFRhZyA9ICdbb2JqZWN0IE9iamVjdF0nO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgZnVuY1Byb3RvID0gRnVuY3Rpb24ucHJvdG90eXBlLFxuICAgIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gcmVzb2x2ZSB0aGUgZGVjb21waWxlZCBzb3VyY2Ugb2YgZnVuY3Rpb25zLiAqL1xudmFyIGZ1bmNUb1N0cmluZyA9IGZ1bmNQcm90by50b1N0cmluZztcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqIFVzZWQgdG8gaW5mZXIgdGhlIGBPYmplY3RgIGNvbnN0cnVjdG9yLiAqL1xudmFyIG9iamVjdEN0b3JTdHJpbmcgPSBmdW5jVG9TdHJpbmcuY2FsbChPYmplY3QpO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgcGxhaW4gb2JqZWN0LCB0aGF0IGlzLCBhbiBvYmplY3QgY3JlYXRlZCBieSB0aGVcbiAqIGBPYmplY3RgIGNvbnN0cnVjdG9yIG9yIG9uZSB3aXRoIGEgYFtbUHJvdG90eXBlXV1gIG9mIGBudWxsYC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuOC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHBsYWluIG9iamVjdCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBmdW5jdGlvbiBGb28oKSB7XG4gKiAgIHRoaXMuYSA9IDE7XG4gKiB9XG4gKlxuICogXy5pc1BsYWluT2JqZWN0KG5ldyBGb28pO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzUGxhaW5PYmplY3QoWzEsIDIsIDNdKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc1BsYWluT2JqZWN0KHsgJ3gnOiAwLCAneSc6IDAgfSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc1BsYWluT2JqZWN0KE9iamVjdC5jcmVhdGUobnVsbCkpO1xuICogLy8gPT4gdHJ1ZVxuICovXG5mdW5jdGlvbiBpc1BsYWluT2JqZWN0KHZhbHVlKSB7XG4gIGlmICghaXNPYmplY3RMaWtlKHZhbHVlKSB8fCBiYXNlR2V0VGFnKHZhbHVlKSAhPSBvYmplY3RUYWcpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyIHByb3RvID0gZ2V0UHJvdG90eXBlKHZhbHVlKTtcbiAgaWYgKHByb3RvID09PSBudWxsKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgdmFyIEN0b3IgPSBoYXNPd25Qcm9wZXJ0eS5jYWxsKHByb3RvLCAnY29uc3RydWN0b3InKSAmJiBwcm90by5jb25zdHJ1Y3RvcjtcbiAgcmV0dXJuIHR5cGVvZiBDdG9yID09ICdmdW5jdGlvbicgJiYgQ3RvciBpbnN0YW5jZW9mIEN0b3IgJiZcbiAgICBmdW5jVG9TdHJpbmcuY2FsbChDdG9yKSA9PSBvYmplY3RDdG9yU3RyaW5nO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzUGxhaW5PYmplY3Q7XG4iLCJ2YXIgYmFzZUdldFRhZyA9IHJlcXVpcmUoJy4vX2Jhc2VHZXRUYWcnKSxcbiAgICBpc0xlbmd0aCA9IHJlcXVpcmUoJy4vaXNMZW5ndGgnKSxcbiAgICBpc09iamVjdExpa2UgPSByZXF1aXJlKCcuL2lzT2JqZWN0TGlrZScpO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgYXJnc1RhZyA9ICdbb2JqZWN0IEFyZ3VtZW50c10nLFxuICAgIGFycmF5VGFnID0gJ1tvYmplY3QgQXJyYXldJyxcbiAgICBib29sVGFnID0gJ1tvYmplY3QgQm9vbGVhbl0nLFxuICAgIGRhdGVUYWcgPSAnW29iamVjdCBEYXRlXScsXG4gICAgZXJyb3JUYWcgPSAnW29iamVjdCBFcnJvcl0nLFxuICAgIGZ1bmNUYWcgPSAnW29iamVjdCBGdW5jdGlvbl0nLFxuICAgIG1hcFRhZyA9ICdbb2JqZWN0IE1hcF0nLFxuICAgIG51bWJlclRhZyA9ICdbb2JqZWN0IE51bWJlcl0nLFxuICAgIG9iamVjdFRhZyA9ICdbb2JqZWN0IE9iamVjdF0nLFxuICAgIHJlZ2V4cFRhZyA9ICdbb2JqZWN0IFJlZ0V4cF0nLFxuICAgIHNldFRhZyA9ICdbb2JqZWN0IFNldF0nLFxuICAgIHN0cmluZ1RhZyA9ICdbb2JqZWN0IFN0cmluZ10nLFxuICAgIHdlYWtNYXBUYWcgPSAnW29iamVjdCBXZWFrTWFwXSc7XG5cbnZhciBhcnJheUJ1ZmZlclRhZyA9ICdbb2JqZWN0IEFycmF5QnVmZmVyXScsXG4gICAgZGF0YVZpZXdUYWcgPSAnW29iamVjdCBEYXRhVmlld10nLFxuICAgIGZsb2F0MzJUYWcgPSAnW29iamVjdCBGbG9hdDMyQXJyYXldJyxcbiAgICBmbG9hdDY0VGFnID0gJ1tvYmplY3QgRmxvYXQ2NEFycmF5XScsXG4gICAgaW50OFRhZyA9ICdbb2JqZWN0IEludDhBcnJheV0nLFxuICAgIGludDE2VGFnID0gJ1tvYmplY3QgSW50MTZBcnJheV0nLFxuICAgIGludDMyVGFnID0gJ1tvYmplY3QgSW50MzJBcnJheV0nLFxuICAgIHVpbnQ4VGFnID0gJ1tvYmplY3QgVWludDhBcnJheV0nLFxuICAgIHVpbnQ4Q2xhbXBlZFRhZyA9ICdbb2JqZWN0IFVpbnQ4Q2xhbXBlZEFycmF5XScsXG4gICAgdWludDE2VGFnID0gJ1tvYmplY3QgVWludDE2QXJyYXldJyxcbiAgICB1aW50MzJUYWcgPSAnW29iamVjdCBVaW50MzJBcnJheV0nO1xuXG4vKiogVXNlZCB0byBpZGVudGlmeSBgdG9TdHJpbmdUYWdgIHZhbHVlcyBvZiB0eXBlZCBhcnJheXMuICovXG52YXIgdHlwZWRBcnJheVRhZ3MgPSB7fTtcbnR5cGVkQXJyYXlUYWdzW2Zsb2F0MzJUYWddID0gdHlwZWRBcnJheVRhZ3NbZmxvYXQ2NFRhZ10gPVxudHlwZWRBcnJheVRhZ3NbaW50OFRhZ10gPSB0eXBlZEFycmF5VGFnc1tpbnQxNlRhZ10gPVxudHlwZWRBcnJheVRhZ3NbaW50MzJUYWddID0gdHlwZWRBcnJheVRhZ3NbdWludDhUYWddID1cbnR5cGVkQXJyYXlUYWdzW3VpbnQ4Q2xhbXBlZFRhZ10gPSB0eXBlZEFycmF5VGFnc1t1aW50MTZUYWddID1cbnR5cGVkQXJyYXlUYWdzW3VpbnQzMlRhZ10gPSB0cnVlO1xudHlwZWRBcnJheVRhZ3NbYXJnc1RhZ10gPSB0eXBlZEFycmF5VGFnc1thcnJheVRhZ10gPVxudHlwZWRBcnJheVRhZ3NbYXJyYXlCdWZmZXJUYWddID0gdHlwZWRBcnJheVRhZ3NbYm9vbFRhZ10gPVxudHlwZWRBcnJheVRhZ3NbZGF0YVZpZXdUYWddID0gdHlwZWRBcnJheVRhZ3NbZGF0ZVRhZ10gPVxudHlwZWRBcnJheVRhZ3NbZXJyb3JUYWddID0gdHlwZWRBcnJheVRhZ3NbZnVuY1RhZ10gPVxudHlwZWRBcnJheVRhZ3NbbWFwVGFnXSA9IHR5cGVkQXJyYXlUYWdzW251bWJlclRhZ10gPVxudHlwZWRBcnJheVRhZ3Nbb2JqZWN0VGFnXSA9IHR5cGVkQXJyYXlUYWdzW3JlZ2V4cFRhZ10gPVxudHlwZWRBcnJheVRhZ3Nbc2V0VGFnXSA9IHR5cGVkQXJyYXlUYWdzW3N0cmluZ1RhZ10gPVxudHlwZWRBcnJheVRhZ3Nbd2Vha01hcFRhZ10gPSBmYWxzZTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc1R5cGVkQXJyYXlgIHdpdGhvdXQgTm9kZS5qcyBvcHRpbWl6YXRpb25zLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgdHlwZWQgYXJyYXksIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUlzVHlwZWRBcnJheSh2YWx1ZSkge1xuICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJlxuICAgIGlzTGVuZ3RoKHZhbHVlLmxlbmd0aCkgJiYgISF0eXBlZEFycmF5VGFnc1tiYXNlR2V0VGFnKHZhbHVlKV07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUlzVHlwZWRBcnJheTtcbiIsIi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udW5hcnlgIHdpdGhvdXQgc3VwcG9ydCBmb3Igc3RvcmluZyBtZXRhZGF0YS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY2FwIGFyZ3VtZW50cyBmb3IuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBjYXBwZWQgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGJhc2VVbmFyeShmdW5jKSB7XG4gIHJldHVybiBmdW5jdGlvbih2YWx1ZSkge1xuICAgIHJldHVybiBmdW5jKHZhbHVlKTtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlVW5hcnk7XG4iLCJ2YXIgZnJlZUdsb2JhbCA9IHJlcXVpcmUoJy4vX2ZyZWVHbG9iYWwnKTtcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBleHBvcnRzYC4gKi9cbnZhciBmcmVlRXhwb3J0cyA9IHR5cGVvZiBleHBvcnRzID09ICdvYmplY3QnICYmIGV4cG9ydHMgJiYgIWV4cG9ydHMubm9kZVR5cGUgJiYgZXhwb3J0cztcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBtb2R1bGVgLiAqL1xudmFyIGZyZWVNb2R1bGUgPSBmcmVlRXhwb3J0cyAmJiB0eXBlb2YgbW9kdWxlID09ICdvYmplY3QnICYmIG1vZHVsZSAmJiAhbW9kdWxlLm5vZGVUeXBlICYmIG1vZHVsZTtcblxuLyoqIERldGVjdCB0aGUgcG9wdWxhciBDb21tb25KUyBleHRlbnNpb24gYG1vZHVsZS5leHBvcnRzYC4gKi9cbnZhciBtb2R1bGVFeHBvcnRzID0gZnJlZU1vZHVsZSAmJiBmcmVlTW9kdWxlLmV4cG9ydHMgPT09IGZyZWVFeHBvcnRzO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYHByb2Nlc3NgIGZyb20gTm9kZS5qcy4gKi9cbnZhciBmcmVlUHJvY2VzcyA9IG1vZHVsZUV4cG9ydHMgJiYgZnJlZUdsb2JhbC5wcm9jZXNzO1xuXG4vKiogVXNlZCB0byBhY2Nlc3MgZmFzdGVyIE5vZGUuanMgaGVscGVycy4gKi9cbnZhciBub2RlVXRpbCA9IChmdW5jdGlvbigpIHtcbiAgdHJ5IHtcbiAgICAvLyBVc2UgYHV0aWwudHlwZXNgIGZvciBOb2RlLmpzIDEwKy5cbiAgICB2YXIgdHlwZXMgPSBmcmVlTW9kdWxlICYmIGZyZWVNb2R1bGUucmVxdWlyZSAmJiBmcmVlTW9kdWxlLnJlcXVpcmUoJ3V0aWwnKS50eXBlcztcblxuICAgIGlmICh0eXBlcykge1xuICAgICAgcmV0dXJuIHR5cGVzO1xuICAgIH1cblxuICAgIC8vIExlZ2FjeSBgcHJvY2Vzcy5iaW5kaW5nKCd1dGlsJylgIGZvciBOb2RlLmpzIDwgMTAuXG4gICAgcmV0dXJuIGZyZWVQcm9jZXNzICYmIGZyZWVQcm9jZXNzLmJpbmRpbmcgJiYgZnJlZVByb2Nlc3MuYmluZGluZygndXRpbCcpO1xuICB9IGNhdGNoIChlKSB7fVxufSgpKTtcblxubW9kdWxlLmV4cG9ydHMgPSBub2RlVXRpbDtcbiIsInZhciBjb3B5T2JqZWN0ID0gcmVxdWlyZSgnLi9fY29weU9iamVjdCcpLFxuICAgIGtleXNJbiA9IHJlcXVpcmUoJy4va2V5c0luJyk7XG5cbi8qKlxuICogQ29udmVydHMgYHZhbHVlYCB0byBhIHBsYWluIG9iamVjdCBmbGF0dGVuaW5nIGluaGVyaXRlZCBlbnVtZXJhYmxlIHN0cmluZ1xuICoga2V5ZWQgcHJvcGVydGllcyBvZiBgdmFsdWVgIHRvIG93biBwcm9wZXJ0aWVzIG9mIHRoZSBwbGFpbiBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAzLjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgcGxhaW4gb2JqZWN0LlxuICogQGV4YW1wbGVcbiAqXG4gKiBmdW5jdGlvbiBGb28oKSB7XG4gKiAgIHRoaXMuYiA9IDI7XG4gKiB9XG4gKlxuICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAqXG4gKiBfLmFzc2lnbih7ICdhJzogMSB9LCBuZXcgRm9vKTtcbiAqIC8vID0+IHsgJ2EnOiAxLCAnYic6IDIgfVxuICpcbiAqIF8uYXNzaWduKHsgJ2EnOiAxIH0sIF8udG9QbGFpbk9iamVjdChuZXcgRm9vKSk7XG4gKiAvLyA9PiB7ICdhJzogMSwgJ2InOiAyLCAnYyc6IDMgfVxuICovXG5mdW5jdGlvbiB0b1BsYWluT2JqZWN0KHZhbHVlKSB7XG4gIHJldHVybiBjb3B5T2JqZWN0KHZhbHVlLCBrZXlzSW4odmFsdWUpKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB0b1BsYWluT2JqZWN0O1xuIiwidmFyIGFzc2lnblZhbHVlID0gcmVxdWlyZSgnLi9fYXNzaWduVmFsdWUnKSxcbiAgICBiYXNlQXNzaWduVmFsdWUgPSByZXF1aXJlKCcuL19iYXNlQXNzaWduVmFsdWUnKTtcblxuLyoqXG4gKiBDb3BpZXMgcHJvcGVydGllcyBvZiBgc291cmNlYCB0byBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IHRvIGNvcHkgcHJvcGVydGllcyBmcm9tLlxuICogQHBhcmFtIHtBcnJheX0gcHJvcHMgVGhlIHByb3BlcnR5IGlkZW50aWZpZXJzIHRvIGNvcHkuXG4gKiBAcGFyYW0ge09iamVjdH0gW29iamVjdD17fV0gVGhlIG9iamVjdCB0byBjb3B5IHByb3BlcnRpZXMgdG8uXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb3BpZWQgdmFsdWVzLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAqL1xuZnVuY3Rpb24gY29weU9iamVjdChzb3VyY2UsIHByb3BzLCBvYmplY3QsIGN1c3RvbWl6ZXIpIHtcbiAgdmFyIGlzTmV3ID0gIW9iamVjdDtcbiAgb2JqZWN0IHx8IChvYmplY3QgPSB7fSk7XG5cbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBwcm9wcy5sZW5ndGg7XG5cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICB2YXIga2V5ID0gcHJvcHNbaW5kZXhdO1xuXG4gICAgdmFyIG5ld1ZhbHVlID0gY3VzdG9taXplclxuICAgICAgPyBjdXN0b21pemVyKG9iamVjdFtrZXldLCBzb3VyY2Vba2V5XSwga2V5LCBvYmplY3QsIHNvdXJjZSlcbiAgICAgIDogdW5kZWZpbmVkO1xuXG4gICAgaWYgKG5ld1ZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIG5ld1ZhbHVlID0gc291cmNlW2tleV07XG4gICAgfVxuICAgIGlmIChpc05ldykge1xuICAgICAgYmFzZUFzc2lnblZhbHVlKG9iamVjdCwga2V5LCBuZXdWYWx1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFzc2lnblZhbHVlKG9iamVjdCwga2V5LCBuZXdWYWx1ZSk7XG4gICAgfVxuICB9XG4gIHJldHVybiBvYmplY3Q7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY29weU9iamVjdDtcbiIsInZhciBiYXNlQXNzaWduVmFsdWUgPSByZXF1aXJlKCcuL19iYXNlQXNzaWduVmFsdWUnKSxcbiAgICBlcSA9IHJlcXVpcmUoJy4vZXEnKTtcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBBc3NpZ25zIGB2YWx1ZWAgdG8gYGtleWAgb2YgYG9iamVjdGAgaWYgdGhlIGV4aXN0aW5nIHZhbHVlIGlzIG5vdCBlcXVpdmFsZW50XG4gKiB1c2luZyBbYFNhbWVWYWx1ZVplcm9gXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1zYW1ldmFsdWV6ZXJvKVxuICogZm9yIGVxdWFsaXR5IGNvbXBhcmlzb25zLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gbW9kaWZ5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBhc3NpZ24uXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBhc3NpZ24uXG4gKi9cbmZ1bmN0aW9uIGFzc2lnblZhbHVlKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICB2YXIgb2JqVmFsdWUgPSBvYmplY3Rba2V5XTtcbiAgaWYgKCEoaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIGtleSkgJiYgZXEob2JqVmFsdWUsIHZhbHVlKSkgfHxcbiAgICAgICh2YWx1ZSA9PT0gdW5kZWZpbmVkICYmICEoa2V5IGluIG9iamVjdCkpKSB7XG4gICAgYmFzZUFzc2lnblZhbHVlKG9iamVjdCwga2V5LCB2YWx1ZSk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBhc3NpZ25WYWx1ZTtcbiIsInZhciBiYXNlVGltZXMgPSByZXF1aXJlKCcuL19iYXNlVGltZXMnKSxcbiAgICBpc0FyZ3VtZW50cyA9IHJlcXVpcmUoJy4vaXNBcmd1bWVudHMnKSxcbiAgICBpc0FycmF5ID0gcmVxdWlyZSgnLi9pc0FycmF5JyksXG4gICAgaXNCdWZmZXIgPSByZXF1aXJlKCcuL2lzQnVmZmVyJyksXG4gICAgaXNJbmRleCA9IHJlcXVpcmUoJy4vX2lzSW5kZXgnKSxcbiAgICBpc1R5cGVkQXJyYXkgPSByZXF1aXJlKCcuL2lzVHlwZWRBcnJheScpO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdGhlIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgb2YgdGhlIGFycmF5LWxpa2UgYHZhbHVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGluaGVyaXRlZCBTcGVjaWZ5IHJldHVybmluZyBpbmhlcml0ZWQgcHJvcGVydHkgbmFtZXMuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICovXG5mdW5jdGlvbiBhcnJheUxpa2VLZXlzKHZhbHVlLCBpbmhlcml0ZWQpIHtcbiAgdmFyIGlzQXJyID0gaXNBcnJheSh2YWx1ZSksXG4gICAgICBpc0FyZyA9ICFpc0FyciAmJiBpc0FyZ3VtZW50cyh2YWx1ZSksXG4gICAgICBpc0J1ZmYgPSAhaXNBcnIgJiYgIWlzQXJnICYmIGlzQnVmZmVyKHZhbHVlKSxcbiAgICAgIGlzVHlwZSA9ICFpc0FyciAmJiAhaXNBcmcgJiYgIWlzQnVmZiAmJiBpc1R5cGVkQXJyYXkodmFsdWUpLFxuICAgICAgc2tpcEluZGV4ZXMgPSBpc0FyciB8fCBpc0FyZyB8fCBpc0J1ZmYgfHwgaXNUeXBlLFxuICAgICAgcmVzdWx0ID0gc2tpcEluZGV4ZXMgPyBiYXNlVGltZXModmFsdWUubGVuZ3RoLCBTdHJpbmcpIDogW10sXG4gICAgICBsZW5ndGggPSByZXN1bHQubGVuZ3RoO1xuXG4gIGZvciAodmFyIGtleSBpbiB2YWx1ZSkge1xuICAgIGlmICgoaW5oZXJpdGVkIHx8IGhhc093blByb3BlcnR5LmNhbGwodmFsdWUsIGtleSkpICYmXG4gICAgICAgICEoc2tpcEluZGV4ZXMgJiYgKFxuICAgICAgICAgICAvLyBTYWZhcmkgOSBoYXMgZW51bWVyYWJsZSBgYXJndW1lbnRzLmxlbmd0aGAgaW4gc3RyaWN0IG1vZGUuXG4gICAgICAgICAgIGtleSA9PSAnbGVuZ3RoJyB8fFxuICAgICAgICAgICAvLyBOb2RlLmpzIDAuMTAgaGFzIGVudW1lcmFibGUgbm9uLWluZGV4IHByb3BlcnRpZXMgb24gYnVmZmVycy5cbiAgICAgICAgICAgKGlzQnVmZiAmJiAoa2V5ID09ICdvZmZzZXQnIHx8IGtleSA9PSAncGFyZW50JykpIHx8XG4gICAgICAgICAgIC8vIFBoYW50b21KUyAyIGhhcyBlbnVtZXJhYmxlIG5vbi1pbmRleCBwcm9wZXJ0aWVzIG9uIHR5cGVkIGFycmF5cy5cbiAgICAgICAgICAgKGlzVHlwZSAmJiAoa2V5ID09ICdidWZmZXInIHx8IGtleSA9PSAnYnl0ZUxlbmd0aCcgfHwga2V5ID09ICdieXRlT2Zmc2V0JykpIHx8XG4gICAgICAgICAgIC8vIFNraXAgaW5kZXggcHJvcGVydGllcy5cbiAgICAgICAgICAgaXNJbmRleChrZXksIGxlbmd0aClcbiAgICAgICAgKSkpIHtcbiAgICAgIHJlc3VsdC5wdXNoKGtleSk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYXJyYXlMaWtlS2V5cztcbiIsIi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udGltZXNgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kc1xuICogb3IgbWF4IGFycmF5IGxlbmd0aCBjaGVja3MuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7bnVtYmVyfSBuIFRoZSBudW1iZXIgb2YgdGltZXMgdG8gaW52b2tlIGBpdGVyYXRlZWAuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiByZXN1bHRzLlxuICovXG5mdW5jdGlvbiBiYXNlVGltZXMobiwgaXRlcmF0ZWUpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICByZXN1bHQgPSBBcnJheShuKTtcblxuICB3aGlsZSAoKytpbmRleCA8IG4pIHtcbiAgICByZXN1bHRbaW5kZXhdID0gaXRlcmF0ZWUoaW5kZXgpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZVRpbWVzO1xuIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9pc09iamVjdCcpLFxuICAgIGlzUHJvdG90eXBlID0gcmVxdWlyZSgnLi9faXNQcm90b3R5cGUnKSxcbiAgICBuYXRpdmVLZXlzSW4gPSByZXF1aXJlKCcuL19uYXRpdmVLZXlzSW4nKTtcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5rZXlzSW5gIHdoaWNoIGRvZXNuJ3QgdHJlYXQgc3BhcnNlIGFycmF5cyBhcyBkZW5zZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAqL1xuZnVuY3Rpb24gYmFzZUtleXNJbihvYmplY3QpIHtcbiAgaWYgKCFpc09iamVjdChvYmplY3QpKSB7XG4gICAgcmV0dXJuIG5hdGl2ZUtleXNJbihvYmplY3QpO1xuICB9XG4gIHZhciBpc1Byb3RvID0gaXNQcm90b3R5cGUob2JqZWN0KSxcbiAgICAgIHJlc3VsdCA9IFtdO1xuXG4gIGZvciAodmFyIGtleSBpbiBvYmplY3QpIHtcbiAgICBpZiAoIShrZXkgPT0gJ2NvbnN0cnVjdG9yJyAmJiAoaXNQcm90byB8fCAhaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIGtleSkpKSkge1xuICAgICAgcmVzdWx0LnB1c2goa2V5KTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlS2V5c0luO1xuIiwiLyoqXG4gKiBUaGlzIGZ1bmN0aW9uIGlzIGxpa2VcbiAqIFtgT2JqZWN0LmtleXNgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1vYmplY3Qua2V5cylcbiAqIGV4Y2VwdCB0aGF0IGl0IGluY2x1ZGVzIGluaGVyaXRlZCBlbnVtZXJhYmxlIHByb3BlcnRpZXMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuXG4gKi9cbmZ1bmN0aW9uIG5hdGl2ZUtleXNJbihvYmplY3QpIHtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICBpZiAob2JqZWN0ICE9IG51bGwpIHtcbiAgICBmb3IgKHZhciBrZXkgaW4gT2JqZWN0KG9iamVjdCkpIHtcbiAgICAgIHJlc3VsdC5wdXNoKGtleSk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbmF0aXZlS2V5c0luO1xuIiwidmFyIGJhc2VSZXN0ID0gcmVxdWlyZSgnLi9fYmFzZVJlc3QnKSxcbiAgICBpc0l0ZXJhdGVlQ2FsbCA9IHJlcXVpcmUoJy4vX2lzSXRlcmF0ZWVDYWxsJyk7XG5cbi8qKlxuICogQ3JlYXRlcyBhIGZ1bmN0aW9uIGxpa2UgYF8uYXNzaWduYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gYXNzaWduZXIgVGhlIGZ1bmN0aW9uIHRvIGFzc2lnbiB2YWx1ZXMuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBhc3NpZ25lciBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlQXNzaWduZXIoYXNzaWduZXIpIHtcbiAgcmV0dXJuIGJhc2VSZXN0KGZ1bmN0aW9uKG9iamVjdCwgc291cmNlcykge1xuICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICBsZW5ndGggPSBzb3VyY2VzLmxlbmd0aCxcbiAgICAgICAgY3VzdG9taXplciA9IGxlbmd0aCA+IDEgPyBzb3VyY2VzW2xlbmd0aCAtIDFdIDogdW5kZWZpbmVkLFxuICAgICAgICBndWFyZCA9IGxlbmd0aCA+IDIgPyBzb3VyY2VzWzJdIDogdW5kZWZpbmVkO1xuXG4gICAgY3VzdG9taXplciA9IChhc3NpZ25lci5sZW5ndGggPiAzICYmIHR5cGVvZiBjdXN0b21pemVyID09ICdmdW5jdGlvbicpXG4gICAgICA/IChsZW5ndGgtLSwgY3VzdG9taXplcilcbiAgICAgIDogdW5kZWZpbmVkO1xuXG4gICAgaWYgKGd1YXJkICYmIGlzSXRlcmF0ZWVDYWxsKHNvdXJjZXNbMF0sIHNvdXJjZXNbMV0sIGd1YXJkKSkge1xuICAgICAgY3VzdG9taXplciA9IGxlbmd0aCA8IDMgPyB1bmRlZmluZWQgOiBjdXN0b21pemVyO1xuICAgICAgbGVuZ3RoID0gMTtcbiAgICB9XG4gICAgb2JqZWN0ID0gT2JqZWN0KG9iamVjdCk7XG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIHZhciBzb3VyY2UgPSBzb3VyY2VzW2luZGV4XTtcbiAgICAgIGlmIChzb3VyY2UpIHtcbiAgICAgICAgYXNzaWduZXIob2JqZWN0LCBzb3VyY2UsIGluZGV4LCBjdXN0b21pemVyKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG9iamVjdDtcbiAgfSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY3JlYXRlQXNzaWduZXI7XG4iLCJ2YXIgaWRlbnRpdHkgPSByZXF1aXJlKCcuL2lkZW50aXR5JyksXG4gICAgb3ZlclJlc3QgPSByZXF1aXJlKCcuL19vdmVyUmVzdCcpLFxuICAgIHNldFRvU3RyaW5nID0gcmVxdWlyZSgnLi9fc2V0VG9TdHJpbmcnKTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5yZXN0YCB3aGljaCBkb2Vzbid0IHZhbGlkYXRlIG9yIGNvZXJjZSBhcmd1bWVudHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGFwcGx5IGEgcmVzdCBwYXJhbWV0ZXIgdG8uXG4gKiBAcGFyYW0ge251bWJlcn0gW3N0YXJ0PWZ1bmMubGVuZ3RoLTFdIFRoZSBzdGFydCBwb3NpdGlvbiBvZiB0aGUgcmVzdCBwYXJhbWV0ZXIuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gYmFzZVJlc3QoZnVuYywgc3RhcnQpIHtcbiAgcmV0dXJuIHNldFRvU3RyaW5nKG92ZXJSZXN0KGZ1bmMsIHN0YXJ0LCBpZGVudGl0eSksIGZ1bmMgKyAnJyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZVJlc3Q7XG4iLCJ2YXIgYXBwbHkgPSByZXF1aXJlKCcuL19hcHBseScpO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyBmb3IgdGhvc2Ugd2l0aCB0aGUgc2FtZSBuYW1lIGFzIG90aGVyIGBsb2Rhc2hgIG1ldGhvZHMuICovXG52YXIgbmF0aXZlTWF4ID0gTWF0aC5tYXg7XG5cbi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlUmVzdGAgd2hpY2ggdHJhbnNmb3JtcyB0aGUgcmVzdCBhcnJheS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gYXBwbHkgYSByZXN0IHBhcmFtZXRlciB0by5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbc3RhcnQ9ZnVuYy5sZW5ndGgtMV0gVGhlIHN0YXJ0IHBvc2l0aW9uIG9mIHRoZSByZXN0IHBhcmFtZXRlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHRyYW5zZm9ybSBUaGUgcmVzdCBhcnJheSB0cmFuc2Zvcm0uXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gb3ZlclJlc3QoZnVuYywgc3RhcnQsIHRyYW5zZm9ybSkge1xuICBzdGFydCA9IG5hdGl2ZU1heChzdGFydCA9PT0gdW5kZWZpbmVkID8gKGZ1bmMubGVuZ3RoIC0gMSkgOiBzdGFydCwgMCk7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgYXJncyA9IGFyZ3VtZW50cyxcbiAgICAgICAgaW5kZXggPSAtMSxcbiAgICAgICAgbGVuZ3RoID0gbmF0aXZlTWF4KGFyZ3MubGVuZ3RoIC0gc3RhcnQsIDApLFxuICAgICAgICBhcnJheSA9IEFycmF5KGxlbmd0aCk7XG5cbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgYXJyYXlbaW5kZXhdID0gYXJnc1tzdGFydCArIGluZGV4XTtcbiAgICB9XG4gICAgaW5kZXggPSAtMTtcbiAgICB2YXIgb3RoZXJBcmdzID0gQXJyYXkoc3RhcnQgKyAxKTtcbiAgICB3aGlsZSAoKytpbmRleCA8IHN0YXJ0KSB7XG4gICAgICBvdGhlckFyZ3NbaW5kZXhdID0gYXJnc1tpbmRleF07XG4gICAgfVxuICAgIG90aGVyQXJnc1tzdGFydF0gPSB0cmFuc2Zvcm0oYXJyYXkpO1xuICAgIHJldHVybiBhcHBseShmdW5jLCB0aGlzLCBvdGhlckFyZ3MpO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG92ZXJSZXN0O1xuIiwiLyoqXG4gKiBBIGZhc3RlciBhbHRlcm5hdGl2ZSB0byBgRnVuY3Rpb24jYXBwbHlgLCB0aGlzIGZ1bmN0aW9uIGludm9rZXMgYGZ1bmNgXG4gKiB3aXRoIHRoZSBgdGhpc2AgYmluZGluZyBvZiBgdGhpc0FyZ2AgYW5kIHRoZSBhcmd1bWVudHMgb2YgYGFyZ3NgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBpbnZva2UuXG4gKiBAcGFyYW0geyp9IHRoaXNBcmcgVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBmdW5jYC5cbiAqIEBwYXJhbSB7QXJyYXl9IGFyZ3MgVGhlIGFyZ3VtZW50cyB0byBpbnZva2UgYGZ1bmNgIHdpdGguXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmVzdWx0IG9mIGBmdW5jYC5cbiAqL1xuZnVuY3Rpb24gYXBwbHkoZnVuYywgdGhpc0FyZywgYXJncykge1xuICBzd2l0Y2ggKGFyZ3MubGVuZ3RoKSB7XG4gICAgY2FzZSAwOiByZXR1cm4gZnVuYy5jYWxsKHRoaXNBcmcpO1xuICAgIGNhc2UgMTogcmV0dXJuIGZ1bmMuY2FsbCh0aGlzQXJnLCBhcmdzWzBdKTtcbiAgICBjYXNlIDI6IHJldHVybiBmdW5jLmNhbGwodGhpc0FyZywgYXJnc1swXSwgYXJnc1sxXSk7XG4gICAgY2FzZSAzOiByZXR1cm4gZnVuYy5jYWxsKHRoaXNBcmcsIGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0pO1xuICB9XG4gIHJldHVybiBmdW5jLmFwcGx5KHRoaXNBcmcsIGFyZ3MpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGFwcGx5O1xuIiwidmFyIGJhc2VTZXRUb1N0cmluZyA9IHJlcXVpcmUoJy4vX2Jhc2VTZXRUb1N0cmluZycpLFxuICAgIHNob3J0T3V0ID0gcmVxdWlyZSgnLi9fc2hvcnRPdXQnKTtcblxuLyoqXG4gKiBTZXRzIHRoZSBgdG9TdHJpbmdgIG1ldGhvZCBvZiBgZnVuY2AgdG8gcmV0dXJuIGBzdHJpbmdgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBtb2RpZnkuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBzdHJpbmcgVGhlIGB0b1N0cmluZ2AgcmVzdWx0LlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIGBmdW5jYC5cbiAqL1xudmFyIHNldFRvU3RyaW5nID0gc2hvcnRPdXQoYmFzZVNldFRvU3RyaW5nKTtcblxubW9kdWxlLmV4cG9ydHMgPSBzZXRUb1N0cmluZztcbiIsInZhciBjb25zdGFudCA9IHJlcXVpcmUoJy4vY29uc3RhbnQnKSxcbiAgICBkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vX2RlZmluZVByb3BlcnR5JyksXG4gICAgaWRlbnRpdHkgPSByZXF1aXJlKCcuL2lkZW50aXR5Jyk7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYHNldFRvU3RyaW5nYCB3aXRob3V0IHN1cHBvcnQgZm9yIGhvdCBsb29wIHNob3J0aW5nLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBtb2RpZnkuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBzdHJpbmcgVGhlIGB0b1N0cmluZ2AgcmVzdWx0LlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIGBmdW5jYC5cbiAqL1xudmFyIGJhc2VTZXRUb1N0cmluZyA9ICFkZWZpbmVQcm9wZXJ0eSA/IGlkZW50aXR5IDogZnVuY3Rpb24oZnVuYywgc3RyaW5nKSB7XG4gIHJldHVybiBkZWZpbmVQcm9wZXJ0eShmdW5jLCAndG9TdHJpbmcnLCB7XG4gICAgJ2NvbmZpZ3VyYWJsZSc6IHRydWUsXG4gICAgJ2VudW1lcmFibGUnOiBmYWxzZSxcbiAgICAndmFsdWUnOiBjb25zdGFudChzdHJpbmcpLFxuICAgICd3cml0YWJsZSc6IHRydWVcbiAgfSk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VTZXRUb1N0cmluZztcbiIsIi8qKlxuICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBgdmFsdWVgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMi40LjBcbiAqIEBjYXRlZ29yeSBVdGlsXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byByZXR1cm4gZnJvbSB0aGUgbmV3IGZ1bmN0aW9uLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgY29uc3RhbnQgZnVuY3Rpb24uXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBvYmplY3RzID0gXy50aW1lcygyLCBfLmNvbnN0YW50KHsgJ2EnOiAxIH0pKTtcbiAqXG4gKiBjb25zb2xlLmxvZyhvYmplY3RzKTtcbiAqIC8vID0+IFt7ICdhJzogMSB9LCB7ICdhJzogMSB9XVxuICpcbiAqIGNvbnNvbGUubG9nKG9iamVjdHNbMF0gPT09IG9iamVjdHNbMV0pO1xuICogLy8gPT4gdHJ1ZVxuICovXG5mdW5jdGlvbiBjb25zdGFudCh2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNvbnN0YW50O1xuIiwiLyoqIFVzZWQgdG8gZGV0ZWN0IGhvdCBmdW5jdGlvbnMgYnkgbnVtYmVyIG9mIGNhbGxzIHdpdGhpbiBhIHNwYW4gb2YgbWlsbGlzZWNvbmRzLiAqL1xudmFyIEhPVF9DT1VOVCA9IDgwMCxcbiAgICBIT1RfU1BBTiA9IDE2O1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyBmb3IgdGhvc2Ugd2l0aCB0aGUgc2FtZSBuYW1lIGFzIG90aGVyIGBsb2Rhc2hgIG1ldGhvZHMuICovXG52YXIgbmF0aXZlTm93ID0gRGF0ZS5ub3c7XG5cbi8qKlxuICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQnbGwgc2hvcnQgb3V0IGFuZCBpbnZva2UgYGlkZW50aXR5YCBpbnN0ZWFkXG4gKiBvZiBgZnVuY2Agd2hlbiBpdCdzIGNhbGxlZCBgSE9UX0NPVU5UYCBvciBtb3JlIHRpbWVzIGluIGBIT1RfU1BBTmBcbiAqIG1pbGxpc2Vjb25kcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gcmVzdHJpY3QuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBzaG9ydGFibGUgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIHNob3J0T3V0KGZ1bmMpIHtcbiAgdmFyIGNvdW50ID0gMCxcbiAgICAgIGxhc3RDYWxsZWQgPSAwO1xuXG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgc3RhbXAgPSBuYXRpdmVOb3coKSxcbiAgICAgICAgcmVtYWluaW5nID0gSE9UX1NQQU4gLSAoc3RhbXAgLSBsYXN0Q2FsbGVkKTtcblxuICAgIGxhc3RDYWxsZWQgPSBzdGFtcDtcbiAgICBpZiAocmVtYWluaW5nID4gMCkge1xuICAgICAgaWYgKCsrY291bnQgPj0gSE9UX0NPVU5UKSB7XG4gICAgICAgIHJldHVybiBhcmd1bWVudHNbMF07XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvdW50ID0gMDtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmMuYXBwbHkodW5kZWZpbmVkLCBhcmd1bWVudHMpO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNob3J0T3V0O1xuIiwidmFyIGVxID0gcmVxdWlyZSgnLi9lcScpLFxuICAgIGlzQXJyYXlMaWtlID0gcmVxdWlyZSgnLi9pc0FycmF5TGlrZScpLFxuICAgIGlzSW5kZXggPSByZXF1aXJlKCcuL19pc0luZGV4JyksXG4gICAgaXNPYmplY3QgPSByZXF1aXJlKCcuL2lzT2JqZWN0Jyk7XG5cbi8qKlxuICogQ2hlY2tzIGlmIHRoZSBnaXZlbiBhcmd1bWVudHMgYXJlIGZyb20gYW4gaXRlcmF0ZWUgY2FsbC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgcG90ZW50aWFsIGl0ZXJhdGVlIHZhbHVlIGFyZ3VtZW50LlxuICogQHBhcmFtIHsqfSBpbmRleCBUaGUgcG90ZW50aWFsIGl0ZXJhdGVlIGluZGV4IG9yIGtleSBhcmd1bWVudC5cbiAqIEBwYXJhbSB7Kn0gb2JqZWN0IFRoZSBwb3RlbnRpYWwgaXRlcmF0ZWUgb2JqZWN0IGFyZ3VtZW50LlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBhcmd1bWVudHMgYXJlIGZyb20gYW4gaXRlcmF0ZWUgY2FsbCxcbiAqICBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGlzSXRlcmF0ZWVDYWxsKHZhbHVlLCBpbmRleCwgb2JqZWN0KSB7XG4gIGlmICghaXNPYmplY3Qob2JqZWN0KSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB2YXIgdHlwZSA9IHR5cGVvZiBpbmRleDtcbiAgaWYgKHR5cGUgPT0gJ251bWJlcidcbiAgICAgICAgPyAoaXNBcnJheUxpa2Uob2JqZWN0KSAmJiBpc0luZGV4KGluZGV4LCBvYmplY3QubGVuZ3RoKSlcbiAgICAgICAgOiAodHlwZSA9PSAnc3RyaW5nJyAmJiBpbmRleCBpbiBvYmplY3QpXG4gICAgICApIHtcbiAgICByZXR1cm4gZXEob2JqZWN0W2luZGV4XSwgdmFsdWUpO1xuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc0l0ZXJhdGVlQ2FsbDtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24ob3JpZ2luYWxNb2R1bGUpIHtcblx0aWYgKCFvcmlnaW5hbE1vZHVsZS53ZWJwYWNrUG9seWZpbGwpIHtcblx0XHR2YXIgbW9kdWxlID0gT2JqZWN0LmNyZWF0ZShvcmlnaW5hbE1vZHVsZSk7XG5cdFx0Ly8gbW9kdWxlLnBhcmVudCA9IHVuZGVmaW5lZCBieSBkZWZhdWx0XG5cdFx0aWYgKCFtb2R1bGUuY2hpbGRyZW4pIG1vZHVsZS5jaGlsZHJlbiA9IFtdO1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwibG9hZGVkXCIsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gbW9kdWxlLmw7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJpZFwiLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIG1vZHVsZS5pO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwiZXhwb3J0c1wiLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlXG5cdFx0fSk7XG5cdFx0bW9kdWxlLndlYnBhY2tQb2x5ZmlsbCA9IDE7XG5cdH1cblx0cmV0dXJuIG1vZHVsZTtcbn07XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0UHJvcFR5cGVzU2VjcmV0ID0gcmVxdWlyZSgnLi9saWIvUmVhY3RQcm9wVHlwZXNTZWNyZXQnKTtcblxuZnVuY3Rpb24gZW1wdHlGdW5jdGlvbigpIHt9XG5mdW5jdGlvbiBlbXB0eUZ1bmN0aW9uV2l0aFJlc2V0KCkge31cbmVtcHR5RnVuY3Rpb25XaXRoUmVzZXQucmVzZXRXYXJuaW5nQ2FjaGUgPSBlbXB0eUZ1bmN0aW9uO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCkge1xuICBmdW5jdGlvbiBzaGltKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSwgc2VjcmV0KSB7XG4gICAgaWYgKHNlY3JldCA9PT0gUmVhY3RQcm9wVHlwZXNTZWNyZXQpIHtcbiAgICAgIC8vIEl0IGlzIHN0aWxsIHNhZmUgd2hlbiBjYWxsZWQgZnJvbSBSZWFjdC5cbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIGVyciA9IG5ldyBFcnJvcihcbiAgICAgICdDYWxsaW5nIFByb3BUeXBlcyB2YWxpZGF0b3JzIGRpcmVjdGx5IGlzIG5vdCBzdXBwb3J0ZWQgYnkgdGhlIGBwcm9wLXR5cGVzYCBwYWNrYWdlLiAnICtcbiAgICAgICdVc2UgUHJvcFR5cGVzLmNoZWNrUHJvcFR5cGVzKCkgdG8gY2FsbCB0aGVtLiAnICtcbiAgICAgICdSZWFkIG1vcmUgYXQgaHR0cDovL2ZiLm1lL3VzZS1jaGVjay1wcm9wLXR5cGVzJ1xuICAgICk7XG4gICAgZXJyLm5hbWUgPSAnSW52YXJpYW50IFZpb2xhdGlvbic7XG4gICAgdGhyb3cgZXJyO1xuICB9O1xuICBzaGltLmlzUmVxdWlyZWQgPSBzaGltO1xuICBmdW5jdGlvbiBnZXRTaGltKCkge1xuICAgIHJldHVybiBzaGltO1xuICB9O1xuICAvLyBJbXBvcnRhbnQhXG4gIC8vIEtlZXAgdGhpcyBsaXN0IGluIHN5bmMgd2l0aCBwcm9kdWN0aW9uIHZlcnNpb24gaW4gYC4vZmFjdG9yeVdpdGhUeXBlQ2hlY2tlcnMuanNgLlxuICB2YXIgUmVhY3RQcm9wVHlwZXMgPSB7XG4gICAgYXJyYXk6IHNoaW0sXG4gICAgYm9vbDogc2hpbSxcbiAgICBmdW5jOiBzaGltLFxuICAgIG51bWJlcjogc2hpbSxcbiAgICBvYmplY3Q6IHNoaW0sXG4gICAgc3RyaW5nOiBzaGltLFxuICAgIHN5bWJvbDogc2hpbSxcblxuICAgIGFueTogc2hpbSxcbiAgICBhcnJheU9mOiBnZXRTaGltLFxuICAgIGVsZW1lbnQ6IHNoaW0sXG4gICAgZWxlbWVudFR5cGU6IHNoaW0sXG4gICAgaW5zdGFuY2VPZjogZ2V0U2hpbSxcbiAgICBub2RlOiBzaGltLFxuICAgIG9iamVjdE9mOiBnZXRTaGltLFxuICAgIG9uZU9mOiBnZXRTaGltLFxuICAgIG9uZU9mVHlwZTogZ2V0U2hpbSxcbiAgICBzaGFwZTogZ2V0U2hpbSxcbiAgICBleGFjdDogZ2V0U2hpbSxcblxuICAgIGNoZWNrUHJvcFR5cGVzOiBlbXB0eUZ1bmN0aW9uV2l0aFJlc2V0LFxuICAgIHJlc2V0V2FybmluZ0NhY2hlOiBlbXB0eUZ1bmN0aW9uXG4gIH07XG5cbiAgUmVhY3RQcm9wVHlwZXMuUHJvcFR5cGVzID0gUmVhY3RQcm9wVHlwZXM7XG5cbiAgcmV0dXJuIFJlYWN0UHJvcFR5cGVzO1xufTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RQcm9wVHlwZXNTZWNyZXQgPSAnU0VDUkVUX0RPX05PVF9QQVNTX1RISVNfT1JfWU9VX1dJTExfQkVfRklSRUQnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0UHJvcFR5cGVzU2VjcmV0O1xuIiwiLyoqIEBsaWNlbnNlIFJlYWN0IHYxNi45LjBcbiAqIHJlYWN0LWlzLnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO09iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO1xudmFyIGI9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLmZvcixjPWI/U3ltYm9sLmZvcihcInJlYWN0LmVsZW1lbnRcIik6NjAxMDMsZD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5wb3J0YWxcIik6NjAxMDYsZT1iP1N5bWJvbC5mb3IoXCJyZWFjdC5mcmFnbWVudFwiKTo2MDEwNyxmPWI/U3ltYm9sLmZvcihcInJlYWN0LnN0cmljdF9tb2RlXCIpOjYwMTA4LGc9Yj9TeW1ib2wuZm9yKFwicmVhY3QucHJvZmlsZXJcIik6NjAxMTQsaD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5wcm92aWRlclwiKTo2MDEwOSxrPWI/U3ltYm9sLmZvcihcInJlYWN0LmNvbnRleHRcIik6NjAxMTAsbD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5hc3luY19tb2RlXCIpOjYwMTExLG09Yj9TeW1ib2wuZm9yKFwicmVhY3QuY29uY3VycmVudF9tb2RlXCIpOjYwMTExLG49Yj9TeW1ib2wuZm9yKFwicmVhY3QuZm9yd2FyZF9yZWZcIik6NjAxMTIscD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZVwiKTo2MDExMyxxPWI/U3ltYm9sLmZvcihcInJlYWN0LnN1c3BlbnNlX2xpc3RcIik6XG42MDEyMCxyPWI/U3ltYm9sLmZvcihcInJlYWN0Lm1lbW9cIik6NjAxMTUsdD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5sYXp5XCIpOjYwMTE2LHY9Yj9TeW1ib2wuZm9yKFwicmVhY3QuZnVuZGFtZW50YWxcIik6NjAxMTcsdz1iP1N5bWJvbC5mb3IoXCJyZWFjdC5yZXNwb25kZXJcIik6NjAxMTg7ZnVuY3Rpb24geChhKXtpZihcIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hKXt2YXIgdT1hLiQkdHlwZW9mO3N3aXRjaCh1KXtjYXNlIGM6c3dpdGNoKGE9YS50eXBlLGEpe2Nhc2UgbDpjYXNlIG06Y2FzZSBlOmNhc2UgZzpjYXNlIGY6Y2FzZSBwOnJldHVybiBhO2RlZmF1bHQ6c3dpdGNoKGE9YSYmYS4kJHR5cGVvZixhKXtjYXNlIGs6Y2FzZSBuOmNhc2UgaDpyZXR1cm4gYTtkZWZhdWx0OnJldHVybiB1fX1jYXNlIHQ6Y2FzZSByOmNhc2UgZDpyZXR1cm4gdX19fWZ1bmN0aW9uIHkoYSl7cmV0dXJuIHgoYSk9PT1tfWV4cG9ydHMudHlwZU9mPXg7ZXhwb3J0cy5Bc3luY01vZGU9bDtcbmV4cG9ydHMuQ29uY3VycmVudE1vZGU9bTtleHBvcnRzLkNvbnRleHRDb25zdW1lcj1rO2V4cG9ydHMuQ29udGV4dFByb3ZpZGVyPWg7ZXhwb3J0cy5FbGVtZW50PWM7ZXhwb3J0cy5Gb3J3YXJkUmVmPW47ZXhwb3J0cy5GcmFnbWVudD1lO2V4cG9ydHMuTGF6eT10O2V4cG9ydHMuTWVtbz1yO2V4cG9ydHMuUG9ydGFsPWQ7ZXhwb3J0cy5Qcm9maWxlcj1nO2V4cG9ydHMuU3RyaWN0TW9kZT1mO2V4cG9ydHMuU3VzcGVuc2U9cDtcbmV4cG9ydHMuaXNWYWxpZEVsZW1lbnRUeXBlPWZ1bmN0aW9uKGEpe3JldHVyblwic3RyaW5nXCI9PT10eXBlb2YgYXx8XCJmdW5jdGlvblwiPT09dHlwZW9mIGF8fGE9PT1lfHxhPT09bXx8YT09PWd8fGE9PT1mfHxhPT09cHx8YT09PXF8fFwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJihhLiQkdHlwZW9mPT09dHx8YS4kJHR5cGVvZj09PXJ8fGEuJCR0eXBlb2Y9PT1ofHxhLiQkdHlwZW9mPT09a3x8YS4kJHR5cGVvZj09PW58fGEuJCR0eXBlb2Y9PT12fHxhLiQkdHlwZW9mPT09dyl9O2V4cG9ydHMuaXNBc3luY01vZGU9ZnVuY3Rpb24oYSl7cmV0dXJuIHkoYSl8fHgoYSk9PT1sfTtleHBvcnRzLmlzQ29uY3VycmVudE1vZGU9eTtleHBvcnRzLmlzQ29udGV4dENvbnN1bWVyPWZ1bmN0aW9uKGEpe3JldHVybiB4KGEpPT09a307ZXhwb3J0cy5pc0NvbnRleHRQcm92aWRlcj1mdW5jdGlvbihhKXtyZXR1cm4geChhKT09PWh9O1xuZXhwb3J0cy5pc0VsZW1lbnQ9ZnVuY3Rpb24oYSl7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmYS4kJHR5cGVvZj09PWN9O2V4cG9ydHMuaXNGb3J3YXJkUmVmPWZ1bmN0aW9uKGEpe3JldHVybiB4KGEpPT09bn07ZXhwb3J0cy5pc0ZyYWdtZW50PWZ1bmN0aW9uKGEpe3JldHVybiB4KGEpPT09ZX07ZXhwb3J0cy5pc0xhenk9ZnVuY3Rpb24oYSl7cmV0dXJuIHgoYSk9PT10fTtleHBvcnRzLmlzTWVtbz1mdW5jdGlvbihhKXtyZXR1cm4geChhKT09PXJ9O2V4cG9ydHMuaXNQb3J0YWw9ZnVuY3Rpb24oYSl7cmV0dXJuIHgoYSk9PT1kfTtleHBvcnRzLmlzUHJvZmlsZXI9ZnVuY3Rpb24oYSl7cmV0dXJuIHgoYSk9PT1nfTtleHBvcnRzLmlzU3RyaWN0TW9kZT1mdW5jdGlvbihhKXtyZXR1cm4geChhKT09PWZ9O2V4cG9ydHMuaXNTdXNwZW5zZT1mdW5jdGlvbihhKXtyZXR1cm4geChhKT09PXB9O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBBcnJheS5pc0FycmF5IHx8IGZ1bmN0aW9uIChhcnIpIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChhcnIpID09ICdbb2JqZWN0IEFycmF5XSc7XG59O1xuIiwiaW1wb3J0ICQkb2JzZXJ2YWJsZSBmcm9tICdzeW1ib2wtb2JzZXJ2YWJsZSc7XG5cbi8qKlxuICogVGhlc2UgYXJlIHByaXZhdGUgYWN0aW9uIHR5cGVzIHJlc2VydmVkIGJ5IFJlZHV4LlxuICogRm9yIGFueSB1bmtub3duIGFjdGlvbnMsIHlvdSBtdXN0IHJldHVybiB0aGUgY3VycmVudCBzdGF0ZS5cbiAqIElmIHRoZSBjdXJyZW50IHN0YXRlIGlzIHVuZGVmaW5lZCwgeW91IG11c3QgcmV0dXJuIHRoZSBpbml0aWFsIHN0YXRlLlxuICogRG8gbm90IHJlZmVyZW5jZSB0aGVzZSBhY3Rpb24gdHlwZXMgZGlyZWN0bHkgaW4geW91ciBjb2RlLlxuICovXG52YXIgcmFuZG9tU3RyaW5nID0gZnVuY3Rpb24gcmFuZG9tU3RyaW5nKCkge1xuICByZXR1cm4gTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyaW5nKDcpLnNwbGl0KCcnKS5qb2luKCcuJyk7XG59O1xuXG52YXIgQWN0aW9uVHlwZXMgPSB7XG4gIElOSVQ6IFwiQEByZWR1eC9JTklUXCIgKyByYW5kb21TdHJpbmcoKSxcbiAgUkVQTEFDRTogXCJAQHJlZHV4L1JFUExBQ0VcIiArIHJhbmRvbVN0cmluZygpLFxuICBQUk9CRV9VTktOT1dOX0FDVElPTjogZnVuY3Rpb24gUFJPQkVfVU5LTk9XTl9BQ1RJT04oKSB7XG4gICAgcmV0dXJuIFwiQEByZWR1eC9QUk9CRV9VTktOT1dOX0FDVElPTlwiICsgcmFuZG9tU3RyaW5nKCk7XG4gIH1cbn07XG5cbi8qKlxuICogQHBhcmFtIHthbnl9IG9iaiBUaGUgb2JqZWN0IHRvIGluc3BlY3QuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgYXJndW1lbnQgYXBwZWFycyB0byBiZSBhIHBsYWluIG9iamVjdC5cbiAqL1xuZnVuY3Rpb24gaXNQbGFpbk9iamVjdChvYmopIHtcbiAgaWYgKHR5cGVvZiBvYmogIT09ICdvYmplY3QnIHx8IG9iaiA9PT0gbnVsbCkgcmV0dXJuIGZhbHNlO1xuICB2YXIgcHJvdG8gPSBvYmo7XG5cbiAgd2hpbGUgKE9iamVjdC5nZXRQcm90b3R5cGVPZihwcm90bykgIT09IG51bGwpIHtcbiAgICBwcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihwcm90byk7XG4gIH1cblxuICByZXR1cm4gT2JqZWN0LmdldFByb3RvdHlwZU9mKG9iaikgPT09IHByb3RvO1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBSZWR1eCBzdG9yZSB0aGF0IGhvbGRzIHRoZSBzdGF0ZSB0cmVlLlxuICogVGhlIG9ubHkgd2F5IHRvIGNoYW5nZSB0aGUgZGF0YSBpbiB0aGUgc3RvcmUgaXMgdG8gY2FsbCBgZGlzcGF0Y2goKWAgb24gaXQuXG4gKlxuICogVGhlcmUgc2hvdWxkIG9ubHkgYmUgYSBzaW5nbGUgc3RvcmUgaW4geW91ciBhcHAuIFRvIHNwZWNpZnkgaG93IGRpZmZlcmVudFxuICogcGFydHMgb2YgdGhlIHN0YXRlIHRyZWUgcmVzcG9uZCB0byBhY3Rpb25zLCB5b3UgbWF5IGNvbWJpbmUgc2V2ZXJhbCByZWR1Y2Vyc1xuICogaW50byBhIHNpbmdsZSByZWR1Y2VyIGZ1bmN0aW9uIGJ5IHVzaW5nIGBjb21iaW5lUmVkdWNlcnNgLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IHJlZHVjZXIgQSBmdW5jdGlvbiB0aGF0IHJldHVybnMgdGhlIG5leHQgc3RhdGUgdHJlZSwgZ2l2ZW5cbiAqIHRoZSBjdXJyZW50IHN0YXRlIHRyZWUgYW5kIHRoZSBhY3Rpb24gdG8gaGFuZGxlLlxuICpcbiAqIEBwYXJhbSB7YW55fSBbcHJlbG9hZGVkU3RhdGVdIFRoZSBpbml0aWFsIHN0YXRlLiBZb3UgbWF5IG9wdGlvbmFsbHkgc3BlY2lmeSBpdFxuICogdG8gaHlkcmF0ZSB0aGUgc3RhdGUgZnJvbSB0aGUgc2VydmVyIGluIHVuaXZlcnNhbCBhcHBzLCBvciB0byByZXN0b3JlIGFcbiAqIHByZXZpb3VzbHkgc2VyaWFsaXplZCB1c2VyIHNlc3Npb24uXG4gKiBJZiB5b3UgdXNlIGBjb21iaW5lUmVkdWNlcnNgIHRvIHByb2R1Y2UgdGhlIHJvb3QgcmVkdWNlciBmdW5jdGlvbiwgdGhpcyBtdXN0IGJlXG4gKiBhbiBvYmplY3Qgd2l0aCB0aGUgc2FtZSBzaGFwZSBhcyBgY29tYmluZVJlZHVjZXJzYCBrZXlzLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtlbmhhbmNlcl0gVGhlIHN0b3JlIGVuaGFuY2VyLiBZb3UgbWF5IG9wdGlvbmFsbHkgc3BlY2lmeSBpdFxuICogdG8gZW5oYW5jZSB0aGUgc3RvcmUgd2l0aCB0aGlyZC1wYXJ0eSBjYXBhYmlsaXRpZXMgc3VjaCBhcyBtaWRkbGV3YXJlLFxuICogdGltZSB0cmF2ZWwsIHBlcnNpc3RlbmNlLCBldGMuIFRoZSBvbmx5IHN0b3JlIGVuaGFuY2VyIHRoYXQgc2hpcHMgd2l0aCBSZWR1eFxuICogaXMgYGFwcGx5TWlkZGxld2FyZSgpYC5cbiAqXG4gKiBAcmV0dXJucyB7U3RvcmV9IEEgUmVkdXggc3RvcmUgdGhhdCBsZXRzIHlvdSByZWFkIHRoZSBzdGF0ZSwgZGlzcGF0Y2ggYWN0aW9uc1xuICogYW5kIHN1YnNjcmliZSB0byBjaGFuZ2VzLlxuICovXG5cbmZ1bmN0aW9uIGNyZWF0ZVN0b3JlKHJlZHVjZXIsIHByZWxvYWRlZFN0YXRlLCBlbmhhbmNlcikge1xuICB2YXIgX3JlZjI7XG5cbiAgaWYgKHR5cGVvZiBwcmVsb2FkZWRTdGF0ZSA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgZW5oYW5jZXIgPT09ICdmdW5jdGlvbicgfHwgdHlwZW9mIGVuaGFuY2VyID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBhcmd1bWVudHNbM10gPT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0l0IGxvb2tzIGxpa2UgeW91IGFyZSBwYXNzaW5nIHNldmVyYWwgc3RvcmUgZW5oYW5jZXJzIHRvICcgKyAnY3JlYXRlU3RvcmUoKS4gVGhpcyBpcyBub3Qgc3VwcG9ydGVkLiBJbnN0ZWFkLCBjb21wb3NlIHRoZW0gJyArICd0b2dldGhlciB0byBhIHNpbmdsZSBmdW5jdGlvbi4nKTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgcHJlbG9hZGVkU3RhdGUgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIGVuaGFuY2VyID09PSAndW5kZWZpbmVkJykge1xuICAgIGVuaGFuY2VyID0gcHJlbG9hZGVkU3RhdGU7XG4gICAgcHJlbG9hZGVkU3RhdGUgPSB1bmRlZmluZWQ7XG4gIH1cblxuICBpZiAodHlwZW9mIGVuaGFuY2VyICE9PSAndW5kZWZpbmVkJykge1xuICAgIGlmICh0eXBlb2YgZW5oYW5jZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgdGhlIGVuaGFuY2VyIHRvIGJlIGEgZnVuY3Rpb24uJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGVuaGFuY2VyKGNyZWF0ZVN0b3JlKShyZWR1Y2VyLCBwcmVsb2FkZWRTdGF0ZSk7XG4gIH1cblxuICBpZiAodHlwZW9mIHJlZHVjZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIHRoZSByZWR1Y2VyIHRvIGJlIGEgZnVuY3Rpb24uJyk7XG4gIH1cblxuICB2YXIgY3VycmVudFJlZHVjZXIgPSByZWR1Y2VyO1xuICB2YXIgY3VycmVudFN0YXRlID0gcHJlbG9hZGVkU3RhdGU7XG4gIHZhciBjdXJyZW50TGlzdGVuZXJzID0gW107XG4gIHZhciBuZXh0TGlzdGVuZXJzID0gY3VycmVudExpc3RlbmVycztcbiAgdmFyIGlzRGlzcGF0Y2hpbmcgPSBmYWxzZTtcbiAgLyoqXG4gICAqIFRoaXMgbWFrZXMgYSBzaGFsbG93IGNvcHkgb2YgY3VycmVudExpc3RlbmVycyBzbyB3ZSBjYW4gdXNlXG4gICAqIG5leHRMaXN0ZW5lcnMgYXMgYSB0ZW1wb3JhcnkgbGlzdCB3aGlsZSBkaXNwYXRjaGluZy5cbiAgICpcbiAgICogVGhpcyBwcmV2ZW50cyBhbnkgYnVncyBhcm91bmQgY29uc3VtZXJzIGNhbGxpbmdcbiAgICogc3Vic2NyaWJlL3Vuc3Vic2NyaWJlIGluIHRoZSBtaWRkbGUgb2YgYSBkaXNwYXRjaC5cbiAgICovXG5cbiAgZnVuY3Rpb24gZW5zdXJlQ2FuTXV0YXRlTmV4dExpc3RlbmVycygpIHtcbiAgICBpZiAobmV4dExpc3RlbmVycyA9PT0gY3VycmVudExpc3RlbmVycykge1xuICAgICAgbmV4dExpc3RlbmVycyA9IGN1cnJlbnRMaXN0ZW5lcnMuc2xpY2UoKTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIFJlYWRzIHRoZSBzdGF0ZSB0cmVlIG1hbmFnZWQgYnkgdGhlIHN0b3JlLlxuICAgKlxuICAgKiBAcmV0dXJucyB7YW55fSBUaGUgY3VycmVudCBzdGF0ZSB0cmVlIG9mIHlvdXIgYXBwbGljYXRpb24uXG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gZ2V0U3RhdGUoKSB7XG4gICAgaWYgKGlzRGlzcGF0Y2hpbmcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignWW91IG1heSBub3QgY2FsbCBzdG9yZS5nZXRTdGF0ZSgpIHdoaWxlIHRoZSByZWR1Y2VyIGlzIGV4ZWN1dGluZy4gJyArICdUaGUgcmVkdWNlciBoYXMgYWxyZWFkeSByZWNlaXZlZCB0aGUgc3RhdGUgYXMgYW4gYXJndW1lbnQuICcgKyAnUGFzcyBpdCBkb3duIGZyb20gdGhlIHRvcCByZWR1Y2VyIGluc3RlYWQgb2YgcmVhZGluZyBpdCBmcm9tIHRoZSBzdG9yZS4nKTtcbiAgICB9XG5cbiAgICByZXR1cm4gY3VycmVudFN0YXRlO1xuICB9XG4gIC8qKlxuICAgKiBBZGRzIGEgY2hhbmdlIGxpc3RlbmVyLiBJdCB3aWxsIGJlIGNhbGxlZCBhbnkgdGltZSBhbiBhY3Rpb24gaXMgZGlzcGF0Y2hlZCxcbiAgICogYW5kIHNvbWUgcGFydCBvZiB0aGUgc3RhdGUgdHJlZSBtYXkgcG90ZW50aWFsbHkgaGF2ZSBjaGFuZ2VkLiBZb3UgbWF5IHRoZW5cbiAgICogY2FsbCBgZ2V0U3RhdGUoKWAgdG8gcmVhZCB0aGUgY3VycmVudCBzdGF0ZSB0cmVlIGluc2lkZSB0aGUgY2FsbGJhY2suXG4gICAqXG4gICAqIFlvdSBtYXkgY2FsbCBgZGlzcGF0Y2goKWAgZnJvbSBhIGNoYW5nZSBsaXN0ZW5lciwgd2l0aCB0aGUgZm9sbG93aW5nXG4gICAqIGNhdmVhdHM6XG4gICAqXG4gICAqIDEuIFRoZSBzdWJzY3JpcHRpb25zIGFyZSBzbmFwc2hvdHRlZCBqdXN0IGJlZm9yZSBldmVyeSBgZGlzcGF0Y2goKWAgY2FsbC5cbiAgICogSWYgeW91IHN1YnNjcmliZSBvciB1bnN1YnNjcmliZSB3aGlsZSB0aGUgbGlzdGVuZXJzIGFyZSBiZWluZyBpbnZva2VkLCB0aGlzXG4gICAqIHdpbGwgbm90IGhhdmUgYW55IGVmZmVjdCBvbiB0aGUgYGRpc3BhdGNoKClgIHRoYXQgaXMgY3VycmVudGx5IGluIHByb2dyZXNzLlxuICAgKiBIb3dldmVyLCB0aGUgbmV4dCBgZGlzcGF0Y2goKWAgY2FsbCwgd2hldGhlciBuZXN0ZWQgb3Igbm90LCB3aWxsIHVzZSBhIG1vcmVcbiAgICogcmVjZW50IHNuYXBzaG90IG9mIHRoZSBzdWJzY3JpcHRpb24gbGlzdC5cbiAgICpcbiAgICogMi4gVGhlIGxpc3RlbmVyIHNob3VsZCBub3QgZXhwZWN0IHRvIHNlZSBhbGwgc3RhdGUgY2hhbmdlcywgYXMgdGhlIHN0YXRlXG4gICAqIG1pZ2h0IGhhdmUgYmVlbiB1cGRhdGVkIG11bHRpcGxlIHRpbWVzIGR1cmluZyBhIG5lc3RlZCBgZGlzcGF0Y2goKWAgYmVmb3JlXG4gICAqIHRoZSBsaXN0ZW5lciBpcyBjYWxsZWQuIEl0IGlzLCBob3dldmVyLCBndWFyYW50ZWVkIHRoYXQgYWxsIHN1YnNjcmliZXJzXG4gICAqIHJlZ2lzdGVyZWQgYmVmb3JlIHRoZSBgZGlzcGF0Y2goKWAgc3RhcnRlZCB3aWxsIGJlIGNhbGxlZCB3aXRoIHRoZSBsYXRlc3RcbiAgICogc3RhdGUgYnkgdGhlIHRpbWUgaXQgZXhpdHMuXG4gICAqXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGxpc3RlbmVyIEEgY2FsbGJhY2sgdG8gYmUgaW52b2tlZCBvbiBldmVyeSBkaXNwYXRjaC5cbiAgICogQHJldHVybnMge0Z1bmN0aW9ufSBBIGZ1bmN0aW9uIHRvIHJlbW92ZSB0aGlzIGNoYW5nZSBsaXN0ZW5lci5cbiAgICovXG5cblxuICBmdW5jdGlvbiBzdWJzY3JpYmUobGlzdGVuZXIpIHtcbiAgICBpZiAodHlwZW9mIGxpc3RlbmVyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIHRoZSBsaXN0ZW5lciB0byBiZSBhIGZ1bmN0aW9uLicpO1xuICAgIH1cblxuICAgIGlmIChpc0Rpc3BhdGNoaW5nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1lvdSBtYXkgbm90IGNhbGwgc3RvcmUuc3Vic2NyaWJlKCkgd2hpbGUgdGhlIHJlZHVjZXIgaXMgZXhlY3V0aW5nLiAnICsgJ0lmIHlvdSB3b3VsZCBsaWtlIHRvIGJlIG5vdGlmaWVkIGFmdGVyIHRoZSBzdG9yZSBoYXMgYmVlbiB1cGRhdGVkLCBzdWJzY3JpYmUgZnJvbSBhICcgKyAnY29tcG9uZW50IGFuZCBpbnZva2Ugc3RvcmUuZ2V0U3RhdGUoKSBpbiB0aGUgY2FsbGJhY2sgdG8gYWNjZXNzIHRoZSBsYXRlc3Qgc3RhdGUuICcgKyAnU2VlIGh0dHBzOi8vcmVkdXguanMub3JnL2FwaS1yZWZlcmVuY2Uvc3RvcmUjc3Vic2NyaWJlKGxpc3RlbmVyKSBmb3IgbW9yZSBkZXRhaWxzLicpO1xuICAgIH1cblxuICAgIHZhciBpc1N1YnNjcmliZWQgPSB0cnVlO1xuICAgIGVuc3VyZUNhbk11dGF0ZU5leHRMaXN0ZW5lcnMoKTtcbiAgICBuZXh0TGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xuICAgIHJldHVybiBmdW5jdGlvbiB1bnN1YnNjcmliZSgpIHtcbiAgICAgIGlmICghaXNTdWJzY3JpYmVkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKGlzRGlzcGF0Y2hpbmcpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdZb3UgbWF5IG5vdCB1bnN1YnNjcmliZSBmcm9tIGEgc3RvcmUgbGlzdGVuZXIgd2hpbGUgdGhlIHJlZHVjZXIgaXMgZXhlY3V0aW5nLiAnICsgJ1NlZSBodHRwczovL3JlZHV4LmpzLm9yZy9hcGktcmVmZXJlbmNlL3N0b3JlI3N1YnNjcmliZShsaXN0ZW5lcikgZm9yIG1vcmUgZGV0YWlscy4nKTtcbiAgICAgIH1cblxuICAgICAgaXNTdWJzY3JpYmVkID0gZmFsc2U7XG4gICAgICBlbnN1cmVDYW5NdXRhdGVOZXh0TGlzdGVuZXJzKCk7XG4gICAgICB2YXIgaW5kZXggPSBuZXh0TGlzdGVuZXJzLmluZGV4T2YobGlzdGVuZXIpO1xuICAgICAgbmV4dExpc3RlbmVycy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgIH07XG4gIH1cbiAgLyoqXG4gICAqIERpc3BhdGNoZXMgYW4gYWN0aW9uLiBJdCBpcyB0aGUgb25seSB3YXkgdG8gdHJpZ2dlciBhIHN0YXRlIGNoYW5nZS5cbiAgICpcbiAgICogVGhlIGByZWR1Y2VyYCBmdW5jdGlvbiwgdXNlZCB0byBjcmVhdGUgdGhlIHN0b3JlLCB3aWxsIGJlIGNhbGxlZCB3aXRoIHRoZVxuICAgKiBjdXJyZW50IHN0YXRlIHRyZWUgYW5kIHRoZSBnaXZlbiBgYWN0aW9uYC4gSXRzIHJldHVybiB2YWx1ZSB3aWxsXG4gICAqIGJlIGNvbnNpZGVyZWQgdGhlICoqbmV4dCoqIHN0YXRlIG9mIHRoZSB0cmVlLCBhbmQgdGhlIGNoYW5nZSBsaXN0ZW5lcnNcbiAgICogd2lsbCBiZSBub3RpZmllZC5cbiAgICpcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb25seSBzdXBwb3J0cyBwbGFpbiBvYmplY3QgYWN0aW9ucy4gSWYgeW91IHdhbnQgdG9cbiAgICogZGlzcGF0Y2ggYSBQcm9taXNlLCBhbiBPYnNlcnZhYmxlLCBhIHRodW5rLCBvciBzb21ldGhpbmcgZWxzZSwgeW91IG5lZWQgdG9cbiAgICogd3JhcCB5b3VyIHN0b3JlIGNyZWF0aW5nIGZ1bmN0aW9uIGludG8gdGhlIGNvcnJlc3BvbmRpbmcgbWlkZGxld2FyZS4gRm9yXG4gICAqIGV4YW1wbGUsIHNlZSB0aGUgZG9jdW1lbnRhdGlvbiBmb3IgdGhlIGByZWR1eC10aHVua2AgcGFja2FnZS4gRXZlbiB0aGVcbiAgICogbWlkZGxld2FyZSB3aWxsIGV2ZW50dWFsbHkgZGlzcGF0Y2ggcGxhaW4gb2JqZWN0IGFjdGlvbnMgdXNpbmcgdGhpcyBtZXRob2QuXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBhY3Rpb24gQSBwbGFpbiBvYmplY3QgcmVwcmVzZW50aW5nIOKAnHdoYXQgY2hhbmdlZOKAnS4gSXQgaXNcbiAgICogYSBnb29kIGlkZWEgdG8ga2VlcCBhY3Rpb25zIHNlcmlhbGl6YWJsZSBzbyB5b3UgY2FuIHJlY29yZCBhbmQgcmVwbGF5IHVzZXJcbiAgICogc2Vzc2lvbnMsIG9yIHVzZSB0aGUgdGltZSB0cmF2ZWxsaW5nIGByZWR1eC1kZXZ0b29sc2AuIEFuIGFjdGlvbiBtdXN0IGhhdmVcbiAgICogYSBgdHlwZWAgcHJvcGVydHkgd2hpY2ggbWF5IG5vdCBiZSBgdW5kZWZpbmVkYC4gSXQgaXMgYSBnb29kIGlkZWEgdG8gdXNlXG4gICAqIHN0cmluZyBjb25zdGFudHMgZm9yIGFjdGlvbiB0eXBlcy5cbiAgICpcbiAgICogQHJldHVybnMge09iamVjdH0gRm9yIGNvbnZlbmllbmNlLCB0aGUgc2FtZSBhY3Rpb24gb2JqZWN0IHlvdSBkaXNwYXRjaGVkLlxuICAgKlxuICAgKiBOb3RlIHRoYXQsIGlmIHlvdSB1c2UgYSBjdXN0b20gbWlkZGxld2FyZSwgaXQgbWF5IHdyYXAgYGRpc3BhdGNoKClgIHRvXG4gICAqIHJldHVybiBzb21ldGhpbmcgZWxzZSAoZm9yIGV4YW1wbGUsIGEgUHJvbWlzZSB5b3UgY2FuIGF3YWl0KS5cbiAgICovXG5cblxuICBmdW5jdGlvbiBkaXNwYXRjaChhY3Rpb24pIHtcbiAgICBpZiAoIWlzUGxhaW5PYmplY3QoYWN0aW9uKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdBY3Rpb25zIG11c3QgYmUgcGxhaW4gb2JqZWN0cy4gJyArICdVc2UgY3VzdG9tIG1pZGRsZXdhcmUgZm9yIGFzeW5jIGFjdGlvbnMuJyk7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBhY3Rpb24udHlwZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignQWN0aW9ucyBtYXkgbm90IGhhdmUgYW4gdW5kZWZpbmVkIFwidHlwZVwiIHByb3BlcnR5LiAnICsgJ0hhdmUgeW91IG1pc3NwZWxsZWQgYSBjb25zdGFudD8nKTtcbiAgICB9XG5cbiAgICBpZiAoaXNEaXNwYXRjaGluZykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZWR1Y2VycyBtYXkgbm90IGRpc3BhdGNoIGFjdGlvbnMuJyk7XG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgIGlzRGlzcGF0Y2hpbmcgPSB0cnVlO1xuICAgICAgY3VycmVudFN0YXRlID0gY3VycmVudFJlZHVjZXIoY3VycmVudFN0YXRlLCBhY3Rpb24pO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBpc0Rpc3BhdGNoaW5nID0gZmFsc2U7XG4gICAgfVxuXG4gICAgdmFyIGxpc3RlbmVycyA9IGN1cnJlbnRMaXN0ZW5lcnMgPSBuZXh0TGlzdGVuZXJzO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0ZW5lcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBsaXN0ZW5lciA9IGxpc3RlbmVyc1tpXTtcbiAgICAgIGxpc3RlbmVyKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFjdGlvbjtcbiAgfVxuICAvKipcbiAgICogUmVwbGFjZXMgdGhlIHJlZHVjZXIgY3VycmVudGx5IHVzZWQgYnkgdGhlIHN0b3JlIHRvIGNhbGN1bGF0ZSB0aGUgc3RhdGUuXG4gICAqXG4gICAqIFlvdSBtaWdodCBuZWVkIHRoaXMgaWYgeW91ciBhcHAgaW1wbGVtZW50cyBjb2RlIHNwbGl0dGluZyBhbmQgeW91IHdhbnQgdG9cbiAgICogbG9hZCBzb21lIG9mIHRoZSByZWR1Y2VycyBkeW5hbWljYWxseS4gWW91IG1pZ2h0IGFsc28gbmVlZCB0aGlzIGlmIHlvdVxuICAgKiBpbXBsZW1lbnQgYSBob3QgcmVsb2FkaW5nIG1lY2hhbmlzbSBmb3IgUmVkdXguXG4gICAqXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IG5leHRSZWR1Y2VyIFRoZSByZWR1Y2VyIGZvciB0aGUgc3RvcmUgdG8gdXNlIGluc3RlYWQuXG4gICAqIEByZXR1cm5zIHt2b2lkfVxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIHJlcGxhY2VSZWR1Y2VyKG5leHRSZWR1Y2VyKSB7XG4gICAgaWYgKHR5cGVvZiBuZXh0UmVkdWNlciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdFeHBlY3RlZCB0aGUgbmV4dFJlZHVjZXIgdG8gYmUgYSBmdW5jdGlvbi4nKTtcbiAgICB9XG5cbiAgICBjdXJyZW50UmVkdWNlciA9IG5leHRSZWR1Y2VyOyAvLyBUaGlzIGFjdGlvbiBoYXMgYSBzaW1pbGlhciBlZmZlY3QgdG8gQWN0aW9uVHlwZXMuSU5JVC5cbiAgICAvLyBBbnkgcmVkdWNlcnMgdGhhdCBleGlzdGVkIGluIGJvdGggdGhlIG5ldyBhbmQgb2xkIHJvb3RSZWR1Y2VyXG4gICAgLy8gd2lsbCByZWNlaXZlIHRoZSBwcmV2aW91cyBzdGF0ZS4gVGhpcyBlZmZlY3RpdmVseSBwb3B1bGF0ZXNcbiAgICAvLyB0aGUgbmV3IHN0YXRlIHRyZWUgd2l0aCBhbnkgcmVsZXZhbnQgZGF0YSBmcm9tIHRoZSBvbGQgb25lLlxuXG4gICAgZGlzcGF0Y2goe1xuICAgICAgdHlwZTogQWN0aW9uVHlwZXMuUkVQTEFDRVxuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBJbnRlcm9wZXJhYmlsaXR5IHBvaW50IGZvciBvYnNlcnZhYmxlL3JlYWN0aXZlIGxpYnJhcmllcy5cbiAgICogQHJldHVybnMge29ic2VydmFibGV9IEEgbWluaW1hbCBvYnNlcnZhYmxlIG9mIHN0YXRlIGNoYW5nZXMuXG4gICAqIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWUgdGhlIG9ic2VydmFibGUgcHJvcG9zYWw6XG4gICAqIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLW9ic2VydmFibGVcbiAgICovXG5cblxuICBmdW5jdGlvbiBvYnNlcnZhYmxlKCkge1xuICAgIHZhciBfcmVmO1xuXG4gICAgdmFyIG91dGVyU3Vic2NyaWJlID0gc3Vic2NyaWJlO1xuICAgIHJldHVybiBfcmVmID0ge1xuICAgICAgLyoqXG4gICAgICAgKiBUaGUgbWluaW1hbCBvYnNlcnZhYmxlIHN1YnNjcmlwdGlvbiBtZXRob2QuXG4gICAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JzZXJ2ZXIgQW55IG9iamVjdCB0aGF0IGNhbiBiZSB1c2VkIGFzIGFuIG9ic2VydmVyLlxuICAgICAgICogVGhlIG9ic2VydmVyIG9iamVjdCBzaG91bGQgaGF2ZSBhIGBuZXh0YCBtZXRob2QuXG4gICAgICAgKiBAcmV0dXJucyB7c3Vic2NyaXB0aW9ufSBBbiBvYmplY3Qgd2l0aCBhbiBgdW5zdWJzY3JpYmVgIG1ldGhvZCB0aGF0IGNhblxuICAgICAgICogYmUgdXNlZCB0byB1bnN1YnNjcmliZSB0aGUgb2JzZXJ2YWJsZSBmcm9tIHRoZSBzdG9yZSwgYW5kIHByZXZlbnQgZnVydGhlclxuICAgICAgICogZW1pc3Npb24gb2YgdmFsdWVzIGZyb20gdGhlIG9ic2VydmFibGUuXG4gICAgICAgKi9cbiAgICAgIHN1YnNjcmliZTogZnVuY3Rpb24gc3Vic2NyaWJlKG9ic2VydmVyKSB7XG4gICAgICAgIGlmICh0eXBlb2Ygb2JzZXJ2ZXIgIT09ICdvYmplY3QnIHx8IG9ic2VydmVyID09PSBudWxsKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgdGhlIG9ic2VydmVyIHRvIGJlIGFuIG9iamVjdC4nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIG9ic2VydmVTdGF0ZSgpIHtcbiAgICAgICAgICBpZiAob2JzZXJ2ZXIubmV4dCkge1xuICAgICAgICAgICAgb2JzZXJ2ZXIubmV4dChnZXRTdGF0ZSgpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBvYnNlcnZlU3RhdGUoKTtcbiAgICAgICAgdmFyIHVuc3Vic2NyaWJlID0gb3V0ZXJTdWJzY3JpYmUob2JzZXJ2ZVN0YXRlKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICB1bnN1YnNjcmliZTogdW5zdWJzY3JpYmVcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9LCBfcmVmWyQkb2JzZXJ2YWJsZV0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LCBfcmVmO1xuICB9IC8vIFdoZW4gYSBzdG9yZSBpcyBjcmVhdGVkLCBhbiBcIklOSVRcIiBhY3Rpb24gaXMgZGlzcGF0Y2hlZCBzbyB0aGF0IGV2ZXJ5XG4gIC8vIHJlZHVjZXIgcmV0dXJucyB0aGVpciBpbml0aWFsIHN0YXRlLiBUaGlzIGVmZmVjdGl2ZWx5IHBvcHVsYXRlc1xuICAvLyB0aGUgaW5pdGlhbCBzdGF0ZSB0cmVlLlxuXG5cbiAgZGlzcGF0Y2goe1xuICAgIHR5cGU6IEFjdGlvblR5cGVzLklOSVRcbiAgfSk7XG4gIHJldHVybiBfcmVmMiA9IHtcbiAgICBkaXNwYXRjaDogZGlzcGF0Y2gsXG4gICAgc3Vic2NyaWJlOiBzdWJzY3JpYmUsXG4gICAgZ2V0U3RhdGU6IGdldFN0YXRlLFxuICAgIHJlcGxhY2VSZWR1Y2VyOiByZXBsYWNlUmVkdWNlclxuICB9LCBfcmVmMlskJG9ic2VydmFibGVdID0gb2JzZXJ2YWJsZSwgX3JlZjI7XG59XG5cbi8qKlxuICogUHJpbnRzIGEgd2FybmluZyBpbiB0aGUgY29uc29sZSBpZiBpdCBleGlzdHMuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2UgVGhlIHdhcm5pbmcgbWVzc2FnZS5cbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5mdW5jdGlvbiB3YXJuaW5nKG1lc3NhZ2UpIHtcbiAgLyogZXNsaW50LWRpc2FibGUgbm8tY29uc29sZSAqL1xuICBpZiAodHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBjb25zb2xlLmVycm9yID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY29uc29sZS5lcnJvcihtZXNzYWdlKTtcbiAgfVxuICAvKiBlc2xpbnQtZW5hYmxlIG5vLWNvbnNvbGUgKi9cblxuXG4gIHRyeSB7XG4gICAgLy8gVGhpcyBlcnJvciB3YXMgdGhyb3duIGFzIGEgY29udmVuaWVuY2Ugc28gdGhhdCBpZiB5b3UgZW5hYmxlXG4gICAgLy8gXCJicmVhayBvbiBhbGwgZXhjZXB0aW9uc1wiIGluIHlvdXIgY29uc29sZSxcbiAgICAvLyBpdCB3b3VsZCBwYXVzZSB0aGUgZXhlY3V0aW9uIGF0IHRoaXMgbGluZS5cbiAgICB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSk7XG4gIH0gY2F0Y2ggKGUpIHt9IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tZW1wdHlcblxufVxuXG5mdW5jdGlvbiBnZXRVbmRlZmluZWRTdGF0ZUVycm9yTWVzc2FnZShrZXksIGFjdGlvbikge1xuICB2YXIgYWN0aW9uVHlwZSA9IGFjdGlvbiAmJiBhY3Rpb24udHlwZTtcbiAgdmFyIGFjdGlvbkRlc2NyaXB0aW9uID0gYWN0aW9uVHlwZSAmJiBcImFjdGlvbiBcXFwiXCIgKyBTdHJpbmcoYWN0aW9uVHlwZSkgKyBcIlxcXCJcIiB8fCAnYW4gYWN0aW9uJztcbiAgcmV0dXJuIFwiR2l2ZW4gXCIgKyBhY3Rpb25EZXNjcmlwdGlvbiArIFwiLCByZWR1Y2VyIFxcXCJcIiArIGtleSArIFwiXFxcIiByZXR1cm5lZCB1bmRlZmluZWQuIFwiICsgXCJUbyBpZ25vcmUgYW4gYWN0aW9uLCB5b3UgbXVzdCBleHBsaWNpdGx5IHJldHVybiB0aGUgcHJldmlvdXMgc3RhdGUuIFwiICsgXCJJZiB5b3Ugd2FudCB0aGlzIHJlZHVjZXIgdG8gaG9sZCBubyB2YWx1ZSwgeW91IGNhbiByZXR1cm4gbnVsbCBpbnN0ZWFkIG9mIHVuZGVmaW5lZC5cIjtcbn1cblxuZnVuY3Rpb24gZ2V0VW5leHBlY3RlZFN0YXRlU2hhcGVXYXJuaW5nTWVzc2FnZShpbnB1dFN0YXRlLCByZWR1Y2VycywgYWN0aW9uLCB1bmV4cGVjdGVkS2V5Q2FjaGUpIHtcbiAgdmFyIHJlZHVjZXJLZXlzID0gT2JqZWN0LmtleXMocmVkdWNlcnMpO1xuICB2YXIgYXJndW1lbnROYW1lID0gYWN0aW9uICYmIGFjdGlvbi50eXBlID09PSBBY3Rpb25UeXBlcy5JTklUID8gJ3ByZWxvYWRlZFN0YXRlIGFyZ3VtZW50IHBhc3NlZCB0byBjcmVhdGVTdG9yZScgOiAncHJldmlvdXMgc3RhdGUgcmVjZWl2ZWQgYnkgdGhlIHJlZHVjZXInO1xuXG4gIGlmIChyZWR1Y2VyS2V5cy5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gJ1N0b3JlIGRvZXMgbm90IGhhdmUgYSB2YWxpZCByZWR1Y2VyLiBNYWtlIHN1cmUgdGhlIGFyZ3VtZW50IHBhc3NlZCAnICsgJ3RvIGNvbWJpbmVSZWR1Y2VycyBpcyBhbiBvYmplY3Qgd2hvc2UgdmFsdWVzIGFyZSByZWR1Y2Vycy4nO1xuICB9XG5cbiAgaWYgKCFpc1BsYWluT2JqZWN0KGlucHV0U3RhdGUpKSB7XG4gICAgcmV0dXJuIFwiVGhlIFwiICsgYXJndW1lbnROYW1lICsgXCIgaGFzIHVuZXhwZWN0ZWQgdHlwZSBvZiBcXFwiXCIgKyB7fS50b1N0cmluZy5jYWxsKGlucHV0U3RhdGUpLm1hdGNoKC9cXHMoW2EtenxBLVpdKykvKVsxXSArIFwiXFxcIi4gRXhwZWN0ZWQgYXJndW1lbnQgdG8gYmUgYW4gb2JqZWN0IHdpdGggdGhlIGZvbGxvd2luZyBcIiArIChcImtleXM6IFxcXCJcIiArIHJlZHVjZXJLZXlzLmpvaW4oJ1wiLCBcIicpICsgXCJcXFwiXCIpO1xuICB9XG5cbiAgdmFyIHVuZXhwZWN0ZWRLZXlzID0gT2JqZWN0LmtleXMoaW5wdXRTdGF0ZSkuZmlsdGVyKGZ1bmN0aW9uIChrZXkpIHtcbiAgICByZXR1cm4gIXJlZHVjZXJzLmhhc093blByb3BlcnR5KGtleSkgJiYgIXVuZXhwZWN0ZWRLZXlDYWNoZVtrZXldO1xuICB9KTtcbiAgdW5leHBlY3RlZEtleXMuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgdW5leHBlY3RlZEtleUNhY2hlW2tleV0gPSB0cnVlO1xuICB9KTtcbiAgaWYgKGFjdGlvbiAmJiBhY3Rpb24udHlwZSA9PT0gQWN0aW9uVHlwZXMuUkVQTEFDRSkgcmV0dXJuO1xuXG4gIGlmICh1bmV4cGVjdGVkS2V5cy5sZW5ndGggPiAwKSB7XG4gICAgcmV0dXJuIFwiVW5leHBlY3RlZCBcIiArICh1bmV4cGVjdGVkS2V5cy5sZW5ndGggPiAxID8gJ2tleXMnIDogJ2tleScpICsgXCIgXCIgKyAoXCJcXFwiXCIgKyB1bmV4cGVjdGVkS2V5cy5qb2luKCdcIiwgXCInKSArIFwiXFxcIiBmb3VuZCBpbiBcIiArIGFyZ3VtZW50TmFtZSArIFwiLiBcIikgKyBcIkV4cGVjdGVkIHRvIGZpbmQgb25lIG9mIHRoZSBrbm93biByZWR1Y2VyIGtleXMgaW5zdGVhZDogXCIgKyAoXCJcXFwiXCIgKyByZWR1Y2VyS2V5cy5qb2luKCdcIiwgXCInKSArIFwiXFxcIi4gVW5leHBlY3RlZCBrZXlzIHdpbGwgYmUgaWdub3JlZC5cIik7XG4gIH1cbn1cblxuZnVuY3Rpb24gYXNzZXJ0UmVkdWNlclNoYXBlKHJlZHVjZXJzKSB7XG4gIE9iamVjdC5rZXlzKHJlZHVjZXJzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICB2YXIgcmVkdWNlciA9IHJlZHVjZXJzW2tleV07XG4gICAgdmFyIGluaXRpYWxTdGF0ZSA9IHJlZHVjZXIodW5kZWZpbmVkLCB7XG4gICAgICB0eXBlOiBBY3Rpb25UeXBlcy5JTklUXG4gICAgfSk7XG5cbiAgICBpZiAodHlwZW9mIGluaXRpYWxTdGF0ZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlJlZHVjZXIgXFxcIlwiICsga2V5ICsgXCJcXFwiIHJldHVybmVkIHVuZGVmaW5lZCBkdXJpbmcgaW5pdGlhbGl6YXRpb24uIFwiICsgXCJJZiB0aGUgc3RhdGUgcGFzc2VkIHRvIHRoZSByZWR1Y2VyIGlzIHVuZGVmaW5lZCwgeW91IG11c3QgXCIgKyBcImV4cGxpY2l0bHkgcmV0dXJuIHRoZSBpbml0aWFsIHN0YXRlLiBUaGUgaW5pdGlhbCBzdGF0ZSBtYXkgXCIgKyBcIm5vdCBiZSB1bmRlZmluZWQuIElmIHlvdSBkb24ndCB3YW50IHRvIHNldCBhIHZhbHVlIGZvciB0aGlzIHJlZHVjZXIsIFwiICsgXCJ5b3UgY2FuIHVzZSBudWxsIGluc3RlYWQgb2YgdW5kZWZpbmVkLlwiKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIHJlZHVjZXIodW5kZWZpbmVkLCB7XG4gICAgICB0eXBlOiBBY3Rpb25UeXBlcy5QUk9CRV9VTktOT1dOX0FDVElPTigpXG4gICAgfSkgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJSZWR1Y2VyIFxcXCJcIiArIGtleSArIFwiXFxcIiByZXR1cm5lZCB1bmRlZmluZWQgd2hlbiBwcm9iZWQgd2l0aCBhIHJhbmRvbSB0eXBlLiBcIiArIChcIkRvbid0IHRyeSB0byBoYW5kbGUgXCIgKyBBY3Rpb25UeXBlcy5JTklUICsgXCIgb3Igb3RoZXIgYWN0aW9ucyBpbiBcXFwicmVkdXgvKlxcXCIgXCIpICsgXCJuYW1lc3BhY2UuIFRoZXkgYXJlIGNvbnNpZGVyZWQgcHJpdmF0ZS4gSW5zdGVhZCwgeW91IG11c3QgcmV0dXJuIHRoZSBcIiArIFwiY3VycmVudCBzdGF0ZSBmb3IgYW55IHVua25vd24gYWN0aW9ucywgdW5sZXNzIGl0IGlzIHVuZGVmaW5lZCwgXCIgKyBcImluIHdoaWNoIGNhc2UgeW91IG11c3QgcmV0dXJuIHRoZSBpbml0aWFsIHN0YXRlLCByZWdhcmRsZXNzIG9mIHRoZSBcIiArIFwiYWN0aW9uIHR5cGUuIFRoZSBpbml0aWFsIHN0YXRlIG1heSBub3QgYmUgdW5kZWZpbmVkLCBidXQgY2FuIGJlIG51bGwuXCIpO1xuICAgIH1cbiAgfSk7XG59XG4vKipcbiAqIFR1cm5zIGFuIG9iamVjdCB3aG9zZSB2YWx1ZXMgYXJlIGRpZmZlcmVudCByZWR1Y2VyIGZ1bmN0aW9ucywgaW50byBhIHNpbmdsZVxuICogcmVkdWNlciBmdW5jdGlvbi4gSXQgd2lsbCBjYWxsIGV2ZXJ5IGNoaWxkIHJlZHVjZXIsIGFuZCBnYXRoZXIgdGhlaXIgcmVzdWx0c1xuICogaW50byBhIHNpbmdsZSBzdGF0ZSBvYmplY3QsIHdob3NlIGtleXMgY29ycmVzcG9uZCB0byB0aGUga2V5cyBvZiB0aGUgcGFzc2VkXG4gKiByZWR1Y2VyIGZ1bmN0aW9ucy5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gcmVkdWNlcnMgQW4gb2JqZWN0IHdob3NlIHZhbHVlcyBjb3JyZXNwb25kIHRvIGRpZmZlcmVudFxuICogcmVkdWNlciBmdW5jdGlvbnMgdGhhdCBuZWVkIHRvIGJlIGNvbWJpbmVkIGludG8gb25lLiBPbmUgaGFuZHkgd2F5IHRvIG9idGFpblxuICogaXQgaXMgdG8gdXNlIEVTNiBgaW1wb3J0ICogYXMgcmVkdWNlcnNgIHN5bnRheC4gVGhlIHJlZHVjZXJzIG1heSBuZXZlciByZXR1cm5cbiAqIHVuZGVmaW5lZCBmb3IgYW55IGFjdGlvbi4gSW5zdGVhZCwgdGhleSBzaG91bGQgcmV0dXJuIHRoZWlyIGluaXRpYWwgc3RhdGVcbiAqIGlmIHRoZSBzdGF0ZSBwYXNzZWQgdG8gdGhlbSB3YXMgdW5kZWZpbmVkLCBhbmQgdGhlIGN1cnJlbnQgc3RhdGUgZm9yIGFueVxuICogdW5yZWNvZ25pemVkIGFjdGlvbi5cbiAqXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IEEgcmVkdWNlciBmdW5jdGlvbiB0aGF0IGludm9rZXMgZXZlcnkgcmVkdWNlciBpbnNpZGUgdGhlXG4gKiBwYXNzZWQgb2JqZWN0LCBhbmQgYnVpbGRzIGEgc3RhdGUgb2JqZWN0IHdpdGggdGhlIHNhbWUgc2hhcGUuXG4gKi9cblxuXG5mdW5jdGlvbiBjb21iaW5lUmVkdWNlcnMocmVkdWNlcnMpIHtcbiAgdmFyIHJlZHVjZXJLZXlzID0gT2JqZWN0LmtleXMocmVkdWNlcnMpO1xuICB2YXIgZmluYWxSZWR1Y2VycyA9IHt9O1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcmVkdWNlcktleXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIga2V5ID0gcmVkdWNlcktleXNbaV07XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKHR5cGVvZiByZWR1Y2Vyc1trZXldID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICB3YXJuaW5nKFwiTm8gcmVkdWNlciBwcm92aWRlZCBmb3Iga2V5IFxcXCJcIiArIGtleSArIFwiXFxcIlwiKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIHJlZHVjZXJzW2tleV0gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGZpbmFsUmVkdWNlcnNba2V5XSA9IHJlZHVjZXJzW2tleV07XG4gICAgfVxuICB9XG5cbiAgdmFyIGZpbmFsUmVkdWNlcktleXMgPSBPYmplY3Qua2V5cyhmaW5hbFJlZHVjZXJzKTsgLy8gVGhpcyBpcyB1c2VkIHRvIG1ha2Ugc3VyZSB3ZSBkb24ndCB3YXJuIGFib3V0IHRoZSBzYW1lXG4gIC8vIGtleXMgbXVsdGlwbGUgdGltZXMuXG5cbiAgdmFyIHVuZXhwZWN0ZWRLZXlDYWNoZTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHVuZXhwZWN0ZWRLZXlDYWNoZSA9IHt9O1xuICB9XG5cbiAgdmFyIHNoYXBlQXNzZXJ0aW9uRXJyb3I7XG5cbiAgdHJ5IHtcbiAgICBhc3NlcnRSZWR1Y2VyU2hhcGUoZmluYWxSZWR1Y2Vycyk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBzaGFwZUFzc2VydGlvbkVycm9yID0gZTtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiBjb21iaW5hdGlvbihzdGF0ZSwgYWN0aW9uKSB7XG4gICAgaWYgKHN0YXRlID09PSB2b2lkIDApIHtcbiAgICAgIHN0YXRlID0ge307XG4gICAgfVxuXG4gICAgaWYgKHNoYXBlQXNzZXJ0aW9uRXJyb3IpIHtcbiAgICAgIHRocm93IHNoYXBlQXNzZXJ0aW9uRXJyb3I7XG4gICAgfVxuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHZhciB3YXJuaW5nTWVzc2FnZSA9IGdldFVuZXhwZWN0ZWRTdGF0ZVNoYXBlV2FybmluZ01lc3NhZ2Uoc3RhdGUsIGZpbmFsUmVkdWNlcnMsIGFjdGlvbiwgdW5leHBlY3RlZEtleUNhY2hlKTtcblxuICAgICAgaWYgKHdhcm5pbmdNZXNzYWdlKSB7XG4gICAgICAgIHdhcm5pbmcod2FybmluZ01lc3NhZ2UpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBoYXNDaGFuZ2VkID0gZmFsc2U7XG4gICAgdmFyIG5leHRTdGF0ZSA9IHt9O1xuXG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGZpbmFsUmVkdWNlcktleXMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICB2YXIgX2tleSA9IGZpbmFsUmVkdWNlcktleXNbX2ldO1xuICAgICAgdmFyIHJlZHVjZXIgPSBmaW5hbFJlZHVjZXJzW19rZXldO1xuICAgICAgdmFyIHByZXZpb3VzU3RhdGVGb3JLZXkgPSBzdGF0ZVtfa2V5XTtcbiAgICAgIHZhciBuZXh0U3RhdGVGb3JLZXkgPSByZWR1Y2VyKHByZXZpb3VzU3RhdGVGb3JLZXksIGFjdGlvbik7XG5cbiAgICAgIGlmICh0eXBlb2YgbmV4dFN0YXRlRm9yS2V5ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICB2YXIgZXJyb3JNZXNzYWdlID0gZ2V0VW5kZWZpbmVkU3RhdGVFcnJvck1lc3NhZ2UoX2tleSwgYWN0aW9uKTtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGVycm9yTWVzc2FnZSk7XG4gICAgICB9XG5cbiAgICAgIG5leHRTdGF0ZVtfa2V5XSA9IG5leHRTdGF0ZUZvcktleTtcbiAgICAgIGhhc0NoYW5nZWQgPSBoYXNDaGFuZ2VkIHx8IG5leHRTdGF0ZUZvcktleSAhPT0gcHJldmlvdXNTdGF0ZUZvcktleTtcbiAgICB9XG5cbiAgICByZXR1cm4gaGFzQ2hhbmdlZCA/IG5leHRTdGF0ZSA6IHN0YXRlO1xuICB9O1xufVxuXG5mdW5jdGlvbiBiaW5kQWN0aW9uQ3JlYXRvcihhY3Rpb25DcmVhdG9yLCBkaXNwYXRjaCkge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBkaXNwYXRjaChhY3Rpb25DcmVhdG9yLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9O1xufVxuLyoqXG4gKiBUdXJucyBhbiBvYmplY3Qgd2hvc2UgdmFsdWVzIGFyZSBhY3Rpb24gY3JlYXRvcnMsIGludG8gYW4gb2JqZWN0IHdpdGggdGhlXG4gKiBzYW1lIGtleXMsIGJ1dCB3aXRoIGV2ZXJ5IGZ1bmN0aW9uIHdyYXBwZWQgaW50byBhIGBkaXNwYXRjaGAgY2FsbCBzbyB0aGV5XG4gKiBtYXkgYmUgaW52b2tlZCBkaXJlY3RseS4gVGhpcyBpcyBqdXN0IGEgY29udmVuaWVuY2UgbWV0aG9kLCBhcyB5b3UgY2FuIGNhbGxcbiAqIGBzdG9yZS5kaXNwYXRjaChNeUFjdGlvbkNyZWF0b3JzLmRvU29tZXRoaW5nKCkpYCB5b3Vyc2VsZiBqdXN0IGZpbmUuXG4gKlxuICogRm9yIGNvbnZlbmllbmNlLCB5b3UgY2FuIGFsc28gcGFzcyBhbiBhY3Rpb24gY3JlYXRvciBhcyB0aGUgZmlyc3QgYXJndW1lbnQsXG4gKiBhbmQgZ2V0IGEgZGlzcGF0Y2ggd3JhcHBlZCBmdW5jdGlvbiBpbiByZXR1cm4uXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbnxPYmplY3R9IGFjdGlvbkNyZWF0b3JzIEFuIG9iamVjdCB3aG9zZSB2YWx1ZXMgYXJlIGFjdGlvblxuICogY3JlYXRvciBmdW5jdGlvbnMuIE9uZSBoYW5keSB3YXkgdG8gb2J0YWluIGl0IGlzIHRvIHVzZSBFUzYgYGltcG9ydCAqIGFzYFxuICogc3ludGF4LiBZb3UgbWF5IGFsc28gcGFzcyBhIHNpbmdsZSBmdW5jdGlvbi5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBkaXNwYXRjaCBUaGUgYGRpc3BhdGNoYCBmdW5jdGlvbiBhdmFpbGFibGUgb24geW91ciBSZWR1eFxuICogc3RvcmUuXG4gKlxuICogQHJldHVybnMge0Z1bmN0aW9ufE9iamVjdH0gVGhlIG9iamVjdCBtaW1pY2tpbmcgdGhlIG9yaWdpbmFsIG9iamVjdCwgYnV0IHdpdGhcbiAqIGV2ZXJ5IGFjdGlvbiBjcmVhdG9yIHdyYXBwZWQgaW50byB0aGUgYGRpc3BhdGNoYCBjYWxsLiBJZiB5b3UgcGFzc2VkIGFcbiAqIGZ1bmN0aW9uIGFzIGBhY3Rpb25DcmVhdG9yc2AsIHRoZSByZXR1cm4gdmFsdWUgd2lsbCBhbHNvIGJlIGEgc2luZ2xlXG4gKiBmdW5jdGlvbi5cbiAqL1xuXG5cbmZ1bmN0aW9uIGJpbmRBY3Rpb25DcmVhdG9ycyhhY3Rpb25DcmVhdG9ycywgZGlzcGF0Y2gpIHtcbiAgaWYgKHR5cGVvZiBhY3Rpb25DcmVhdG9ycyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBiaW5kQWN0aW9uQ3JlYXRvcihhY3Rpb25DcmVhdG9ycywgZGlzcGF0Y2gpO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBhY3Rpb25DcmVhdG9ycyAhPT0gJ29iamVjdCcgfHwgYWN0aW9uQ3JlYXRvcnMgPT09IG51bGwpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJiaW5kQWN0aW9uQ3JlYXRvcnMgZXhwZWN0ZWQgYW4gb2JqZWN0IG9yIGEgZnVuY3Rpb24sIGluc3RlYWQgcmVjZWl2ZWQgXCIgKyAoYWN0aW9uQ3JlYXRvcnMgPT09IG51bGwgPyAnbnVsbCcgOiB0eXBlb2YgYWN0aW9uQ3JlYXRvcnMpICsgXCIuIFwiICsgXCJEaWQgeW91IHdyaXRlIFxcXCJpbXBvcnQgQWN0aW9uQ3JlYXRvcnMgZnJvbVxcXCIgaW5zdGVhZCBvZiBcXFwiaW1wb3J0ICogYXMgQWN0aW9uQ3JlYXRvcnMgZnJvbVxcXCI/XCIpO1xuICB9XG5cbiAgdmFyIGJvdW5kQWN0aW9uQ3JlYXRvcnMgPSB7fTtcblxuICBmb3IgKHZhciBrZXkgaW4gYWN0aW9uQ3JlYXRvcnMpIHtcbiAgICB2YXIgYWN0aW9uQ3JlYXRvciA9IGFjdGlvbkNyZWF0b3JzW2tleV07XG5cbiAgICBpZiAodHlwZW9mIGFjdGlvbkNyZWF0b3IgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGJvdW5kQWN0aW9uQ3JlYXRvcnNba2V5XSA9IGJpbmRBY3Rpb25DcmVhdG9yKGFjdGlvbkNyZWF0b3IsIGRpc3BhdGNoKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gYm91bmRBY3Rpb25DcmVhdG9ycztcbn1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkge1xuICBpZiAoa2V5IGluIG9iaikge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgb2JqW2tleV0gPSB2YWx1ZTtcbiAgfVxuXG4gIHJldHVybiBvYmo7XG59XG5cbmZ1bmN0aW9uIG93bktleXMob2JqZWN0LCBlbnVtZXJhYmxlT25seSkge1xuICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdCk7XG5cbiAgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcbiAgICBrZXlzLnB1c2guYXBwbHkoa2V5cywgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvYmplY3QpKTtcbiAgfVxuXG4gIGlmIChlbnVtZXJhYmxlT25seSkga2V5cyA9IGtleXMuZmlsdGVyKGZ1bmN0aW9uIChzeW0pIHtcbiAgICByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHN5bSkuZW51bWVyYWJsZTtcbiAgfSk7XG4gIHJldHVybiBrZXlzO1xufVxuXG5mdW5jdGlvbiBfb2JqZWN0U3ByZWFkMih0YXJnZXQpIHtcbiAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldICE9IG51bGwgPyBhcmd1bWVudHNbaV0gOiB7fTtcblxuICAgIGlmIChpICUgMikge1xuICAgICAgb3duS2V5cyhzb3VyY2UsIHRydWUpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICBfZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMpIHtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoc291cmNlKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG93bktleXMoc291cmNlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufVxuXG4vKipcbiAqIENvbXBvc2VzIHNpbmdsZS1hcmd1bWVudCBmdW5jdGlvbnMgZnJvbSByaWdodCB0byBsZWZ0LiBUaGUgcmlnaHRtb3N0XG4gKiBmdW5jdGlvbiBjYW4gdGFrZSBtdWx0aXBsZSBhcmd1bWVudHMgYXMgaXQgcHJvdmlkZXMgdGhlIHNpZ25hdHVyZSBmb3JcbiAqIHRoZSByZXN1bHRpbmcgY29tcG9zaXRlIGZ1bmN0aW9uLlxuICpcbiAqIEBwYXJhbSB7Li4uRnVuY3Rpb259IGZ1bmNzIFRoZSBmdW5jdGlvbnMgdG8gY29tcG9zZS5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gQSBmdW5jdGlvbiBvYnRhaW5lZCBieSBjb21wb3NpbmcgdGhlIGFyZ3VtZW50IGZ1bmN0aW9uc1xuICogZnJvbSByaWdodCB0byBsZWZ0LiBGb3IgZXhhbXBsZSwgY29tcG9zZShmLCBnLCBoKSBpcyBpZGVudGljYWwgdG8gZG9pbmdcbiAqICguLi5hcmdzKSA9PiBmKGcoaCguLi5hcmdzKSkpLlxuICovXG5mdW5jdGlvbiBjb21wb3NlKCkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgZnVuY3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgZnVuY3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICBpZiAoZnVuY3MubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChhcmcpIHtcbiAgICAgIHJldHVybiBhcmc7XG4gICAgfTtcbiAgfVxuXG4gIGlmIChmdW5jcy5sZW5ndGggPT09IDEpIHtcbiAgICByZXR1cm4gZnVuY3NbMF07XG4gIH1cblxuICByZXR1cm4gZnVuY3MucmVkdWNlKGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBhKGIuYXBwbHkodm9pZCAwLCBhcmd1bWVudHMpKTtcbiAgICB9O1xuICB9KTtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgc3RvcmUgZW5oYW5jZXIgdGhhdCBhcHBsaWVzIG1pZGRsZXdhcmUgdG8gdGhlIGRpc3BhdGNoIG1ldGhvZFxuICogb2YgdGhlIFJlZHV4IHN0b3JlLiBUaGlzIGlzIGhhbmR5IGZvciBhIHZhcmlldHkgb2YgdGFza3MsIHN1Y2ggYXMgZXhwcmVzc2luZ1xuICogYXN5bmNocm9ub3VzIGFjdGlvbnMgaW4gYSBjb25jaXNlIG1hbm5lciwgb3IgbG9nZ2luZyBldmVyeSBhY3Rpb24gcGF5bG9hZC5cbiAqXG4gKiBTZWUgYHJlZHV4LXRodW5rYCBwYWNrYWdlIGFzIGFuIGV4YW1wbGUgb2YgdGhlIFJlZHV4IG1pZGRsZXdhcmUuXG4gKlxuICogQmVjYXVzZSBtaWRkbGV3YXJlIGlzIHBvdGVudGlhbGx5IGFzeW5jaHJvbm91cywgdGhpcyBzaG91bGQgYmUgdGhlIGZpcnN0XG4gKiBzdG9yZSBlbmhhbmNlciBpbiB0aGUgY29tcG9zaXRpb24gY2hhaW4uXG4gKlxuICogTm90ZSB0aGF0IGVhY2ggbWlkZGxld2FyZSB3aWxsIGJlIGdpdmVuIHRoZSBgZGlzcGF0Y2hgIGFuZCBgZ2V0U3RhdGVgIGZ1bmN0aW9uc1xuICogYXMgbmFtZWQgYXJndW1lbnRzLlxuICpcbiAqIEBwYXJhbSB7Li4uRnVuY3Rpb259IG1pZGRsZXdhcmVzIFRoZSBtaWRkbGV3YXJlIGNoYWluIHRvIGJlIGFwcGxpZWQuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IEEgc3RvcmUgZW5oYW5jZXIgYXBwbHlpbmcgdGhlIG1pZGRsZXdhcmUuXG4gKi9cblxuZnVuY3Rpb24gYXBwbHlNaWRkbGV3YXJlKCkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgbWlkZGxld2FyZXMgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgbWlkZGxld2FyZXNbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKGNyZWF0ZVN0b3JlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBzdG9yZSA9IGNyZWF0ZVN0b3JlLmFwcGx5KHZvaWQgMCwgYXJndW1lbnRzKTtcblxuICAgICAgdmFyIF9kaXNwYXRjaCA9IGZ1bmN0aW9uIGRpc3BhdGNoKCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Rpc3BhdGNoaW5nIHdoaWxlIGNvbnN0cnVjdGluZyB5b3VyIG1pZGRsZXdhcmUgaXMgbm90IGFsbG93ZWQuICcgKyAnT3RoZXIgbWlkZGxld2FyZSB3b3VsZCBub3QgYmUgYXBwbGllZCB0byB0aGlzIGRpc3BhdGNoLicpO1xuICAgICAgfTtcblxuICAgICAgdmFyIG1pZGRsZXdhcmVBUEkgPSB7XG4gICAgICAgIGdldFN0YXRlOiBzdG9yZS5nZXRTdGF0ZSxcbiAgICAgICAgZGlzcGF0Y2g6IGZ1bmN0aW9uIGRpc3BhdGNoKCkge1xuICAgICAgICAgIHJldHVybiBfZGlzcGF0Y2guYXBwbHkodm9pZCAwLCBhcmd1bWVudHMpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgdmFyIGNoYWluID0gbWlkZGxld2FyZXMubWFwKGZ1bmN0aW9uIChtaWRkbGV3YXJlKSB7XG4gICAgICAgIHJldHVybiBtaWRkbGV3YXJlKG1pZGRsZXdhcmVBUEkpO1xuICAgICAgfSk7XG4gICAgICBfZGlzcGF0Y2ggPSBjb21wb3NlLmFwcGx5KHZvaWQgMCwgY2hhaW4pKHN0b3JlLmRpc3BhdGNoKTtcbiAgICAgIHJldHVybiBfb2JqZWN0U3ByZWFkMih7fSwgc3RvcmUsIHtcbiAgICAgICAgZGlzcGF0Y2g6IF9kaXNwYXRjaFxuICAgICAgfSk7XG4gICAgfTtcbiAgfTtcbn1cblxuLypcbiAqIFRoaXMgaXMgYSBkdW1teSBmdW5jdGlvbiB0byBjaGVjayBpZiB0aGUgZnVuY3Rpb24gbmFtZSBoYXMgYmVlbiBhbHRlcmVkIGJ5IG1pbmlmaWNhdGlvbi5cbiAqIElmIHRoZSBmdW5jdGlvbiBoYXMgYmVlbiBtaW5pZmllZCBhbmQgTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJywgd2FybiB0aGUgdXNlci5cbiAqL1xuXG5mdW5jdGlvbiBpc0NydXNoZWQoKSB7fVxuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB0eXBlb2YgaXNDcnVzaGVkLm5hbWUgPT09ICdzdHJpbmcnICYmIGlzQ3J1c2hlZC5uYW1lICE9PSAnaXNDcnVzaGVkJykge1xuICB3YXJuaW5nKCdZb3UgYXJlIGN1cnJlbnRseSB1c2luZyBtaW5pZmllZCBjb2RlIG91dHNpZGUgb2YgTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiLiAnICsgJ1RoaXMgbWVhbnMgdGhhdCB5b3UgYXJlIHJ1bm5pbmcgYSBzbG93ZXIgZGV2ZWxvcG1lbnQgYnVpbGQgb2YgUmVkdXguICcgKyAnWW91IGNhbiB1c2UgbG9vc2UtZW52aWZ5IChodHRwczovL2dpdGh1Yi5jb20vemVydG9zaC9sb29zZS1lbnZpZnkpIGZvciBicm93c2VyaWZ5ICcgKyAnb3Igc2V0dGluZyBtb2RlIHRvIHByb2R1Y3Rpb24gaW4gd2VicGFjayAoaHR0cHM6Ly93ZWJwYWNrLmpzLm9yZy9jb25jZXB0cy9tb2RlLykgJyArICd0byBlbnN1cmUgeW91IGhhdmUgdGhlIGNvcnJlY3QgY29kZSBmb3IgeW91ciBwcm9kdWN0aW9uIGJ1aWxkLicpO1xufVxuXG5leHBvcnQgeyBBY3Rpb25UeXBlcyBhcyBfX0RPX05PVF9VU0VfX0FjdGlvblR5cGVzLCBhcHBseU1pZGRsZXdhcmUsIGJpbmRBY3Rpb25DcmVhdG9ycywgY29tYmluZVJlZHVjZXJzLCBjb21wb3NlLCBjcmVhdGVTdG9yZSB9O1xuIiwiaW1wb3J0IHsgcG9zdFNlc3Npb24sIGRlbGV0ZVNlc3Npb24gfSBmcm9tICcuLi91dGlscy9zZXNzaW9uX3V0aWwnO1xuXG5leHBvcnQgY29uc3QgUkVDRUlWRV9DVVJSRU5UX1VTRVIgPSAnUkVDRUlWRV9DVVJSRU5UX1VTRVInO1xuZXhwb3J0IGNvbnN0IExPR09VVF9DVVJSRU5UX1VTRVIgPSAnTE9HT1VUX0NVUlJFTlRfVVNFUic7XG5leHBvcnQgY29uc3QgUkVDRUlWRV9FUlJPUlMgPSAnUkVDRUlWRV9FUlJPUlMnO1xuZXhwb3J0IGNvbnN0IENMRUFSX0VSUk9SUyA9ICdDTEVBUl9FUlJPUlMnO1xuXG5jb25zdCByZWNlaXZlQ3VycmVudFVzZXIgPSB1c2VyID0+ICh7XG4gIHR5cGU6IFJFQ0VJVkVfQ1VSUkVOVF9VU0VSLFxuICB1c2VyXG59KTtcblxuY29uc3QgbG9nb3V0Q3VycmVudFVzZXIgPSAoKSA9PiAoe1xuICB0eXBlOiBMT0dPVVRfQ1VSUkVOVF9VU0VSXG59KTtcblxuY29uc3QgcmVjZWl2ZUVycm9ycyA9IGVycm9ycyA9PiAoe1xuICB0eXBlOiBSRUNFSVZFX0VSUk9SUyxcbiAgZXJyb3JzXG59KTtcblxuZXhwb3J0IGNvbnN0IGNsZWFyRXJyb3JzID0gKCkgPT4gKHtcbiAgdHlwZTogQ0xFQVJfRVJST1JTXG59KVxuXG5leHBvcnQgY29uc3QgbG9naW4gPSBmb3JtVXNlciA9PiBkaXNwYXRjaCA9PiAocG9zdFNlc3Npb24oZm9ybVVzZXIpXG4gIC50aGVuKHVzZXIgPT4gZGlzcGF0Y2gocmVjZWl2ZUN1cnJlbnRVc2VyKHVzZXIpKSxcbiAgICBlcnJvcnMgPT4gZGlzcGF0Y2gocmVjZWl2ZUVycm9ycyhlcnJvcnMucmVzcG9uc2VKU09OKSkpXG4pO1xuXG5leHBvcnQgY29uc3QgbG9nb3V0ID0gKCkgPT4gZGlzcGF0Y2ggPT4gZGVsZXRlU2Vzc2lvbigpXG4gIC50aGVuKCgpID0+IGRpc3BhdGNoKGxvZ291dEN1cnJlbnRVc2VyKCkpXG4pO1xuXG5leHBvcnQgY29uc3QgZmV0Y2hDdXJyZW50T3JkZXJJZCA9ICh1c2VyKSA9PiBkaXNwYXRjaCA9PiB7XG4gIHJldHVybiBPcmRlckFwaVV0aWwuZmV0Y2hDdXJyZW50T3JkZXJJZCh1c2VyKVxuICAgIC50aGVuKHVzZXIgPT4geyByZXR1cm4gZGlzcGF0Y2gocmVjZWl2ZUN1cnJlbnRVc2VyKHVzZXIpKX0pXG59IiwiZXhwb3J0IGNvbnN0IHBvc3RTZXNzaW9uID0gdXNlciA9PiAkLmFqYXgoe1xuICB1cmw6ICcvYXBpL3Nlc3Npb24nLFxuICBtZXRob2Q6ICdQT1NUJyxcbiAgZGF0YTogeyB1c2VyIH0sXG59KTtcblxuZXhwb3J0IGNvbnN0IGRlbGV0ZVNlc3Npb24gPSAoKSA9PiAkLmFqYXgoe1xuICB1cmw6ICcvYXBpL3Nlc3Npb24nLFxuICBtZXRob2Q6ICdERUxFVEUnXG59KTtcblxuIiwiaW1wb3J0IHsgUkVDRUlWRV9DVVJSRU5UX1VTRVIsIExPR09VVF9DVVJSRU5UX1VTRVIgfSBmcm9tICcuLi9hY3Rpb25zL3Nlc3Npb24nO1xuXG5jb25zdCBfbnVsbFNlc3Npb24gPSB7XG4gIGN1cnJlbnRVc2VyOiBudWxsXG59O1xuXG5leHBvcnQgZGVmYXVsdCAoc3RhdGUgPSBfbnVsbFNlc3Npb24sIGFjdGlvbikgPT4ge1xuICBPYmplY3QuZnJlZXplKHN0YXRlKTtcbiAgc3dpdGNoIChhY3Rpb24udHlwZSkge1xuICAgIGNhc2UgUkVDRUlWRV9DVVJSRU5UX1VTRVI6XG4gICAgICBjb25zdCBjdXJyZW50VXNlciA9IGFjdGlvbi51c2VyXG4gICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgeyBjdXJyZW50VXNlciB9KTtcbiAgICBjYXNlIExPR09VVF9DVVJSRU5UX1VTRVI6XG4gICAgICByZXR1cm4gX251bGxTZXNzaW9uO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gc3RhdGU7XG4gIH1cbn07IiwiaW1wb3J0ICogYXMgcHJvZHVjdEFQSVV0aWwgZnJvbSAnLi4vdXRpbHMvcHJvZHVjdF91dGlsJztcbmV4cG9ydCBjb25zdCBSRUNFSVZFX1BST0RVQ1RTID0gJ1JFQ0VJVkVfUFJPRFVDVFMnO1xuZXhwb3J0IGNvbnN0IFJFQ0VJVkVfUFJPRFVDVCA9ICdSRUNFSVZFX1BST0RVQ1QnO1xuXG5cbmV4cG9ydCBjb25zdCByZWNlaXZlQWxsUHJvZHVjdHMgPSAocHJvZHVjdHMpID0+ICh7XG4gIHR5cGU6IFJFQ0VJVkVfUFJPRFVDVFMsXG4gIHByb2R1Y3RzXG59KTtcblxuZXhwb3J0IGNvbnN0IHJlY2VpdmVQcm9kdWN0ID0gKHBheWxvYWQpID0+ICh7XG4gIHR5cGU6IFJFQ0VJVkVfUFJPRFVDVCxcbiAgcGF5bG9hZFxufSk7XG5cbmV4cG9ydCBjb25zdCByZXF1ZXN0UHJvZHVjdHMgPSAoKSA9PiBkaXNwYXRjaCA9PiAoXG4gIHByb2R1Y3RBUElVdGlsLmZldGNoUHJvZHVjdHMoKVxuICAgIC50aGVuKHByb2R1Y3RzID0+IGRpc3BhdGNoKHJlY2VpdmVBbGxQcm9kdWN0cyhwcm9kdWN0cykpKVxuKTtcblxuZXhwb3J0IGNvbnN0IHJlcXVlc3RQcm9kdWN0ID0gKGlkKSA9PiBkaXNwYXRjaCA9PiAoXG4gIHByb2R1Y3RBUElVdGlsLmZldGNoUHJvZHVjdChpZCkudGhlbihwcm9kdWN0ID0+IHtcbiAgICBkaXNwYXRjaChyZWNlaXZlUHJvZHVjdChwcm9kdWN0KSlcbiAgICByZXR1cm4gcHJvZHVjdDtcbiAgfSlcbik7XG5cbiIsImV4cG9ydCBjb25zdCBmZXRjaFByb2R1Y3RzID0gKCkgPT4gKFxuICAkLmFqYXgoe1xuICAgIG1ldGhvZDogJ0dFVCcsXG4gICAgdXJsOiAnYXBpL3Byb2R1Y3RzLydcbiAgfSlcbik7XG5cbmV4cG9ydCBjb25zdCBmZXRjaFByb2R1Y3QgPSBpZCA9PiAoXG4gICQuYWpheCh7XG4gICAgbWV0aG9kOiAnR0VUJyxcbiAgICB1cmw6IGBhcGkvcHJvZHVjdHMvJHtpZH1gXG4gICAgXG4gIH0pXG4pOyIsImltcG9ydCAqIGFzIG9yZGVyQXBpVXRpbCBmcm9tICcuLi91dGlscy9vcmRlcl91dGlsJztcblxuZXhwb3J0IGNvbnN0IFJFQ0VJVkVfT1JERVIgPSBcIlJFQ0VJVkVfT1JERVJcIjtcblxuZXhwb3J0IGNvbnN0IHJlY2VpdmVPcmRlciA9IHBheWxvYWQgPT4gKHtcbiAgdHlwZTogUkVDRUlWRV9PUkRFUixcbiAgb3JkZXI6IHBheWxvYWQub3JkZXIsXG4gIG9yZGVySXRlbXM6IHBheWxvYWQub3JkZXJJdGVtcyxcbiAgcHJvZHVjdHM6IHBheWxvYWQucHJvZHVjdHMsXG4gIHByb2R1Y3RJdGVtczogcGF5bG9hZC5wcm9kdWN0SXRlbXMsXG4gIHVzZXJzOiBwYXlsb2FkLnVzZXJzXG59KVxuXG5leHBvcnQgY29uc3QgY3JlYXRlT3JkZXIgPSB1c2VyID0+IGRpc3BhdGNoID0+IHtcbiAgcmV0dXJuIG9yZGVyQXBpVXRpbC5jcmVhdGVPcmRlcih1c2VyKVxuICAgIC50aGVuKHBheWxvYWQgPT4gZGlzcGF0Y2gocmVjZWl2ZU9yZGVyKHBheWxvYWQpKSlcbn1cblxuZXhwb3J0IGNvbnN0IGZldGNoT3JkZXIgPSAoaWQpID0+IGRpc3BhdGNoID0+IHtcbiAgcmV0dXJuIG9yZGVyQXBpVXRpbC5mZXRjaE9yZGVyKGlkKVxuICAgIC50aGVuKHBheWxvYWQgPT4gZGlzcGF0Y2gocmVjZWl2ZU9yZGVyKHBheWxvYWQpKSlcbn1cblxud2luZG93LmZldGNoT3JkZXIgPSBmZXRjaE9yZGVyXG4iLCJleHBvcnQgY29uc3QgY3JlYXRlT3JkZXIgPSB1c2VyID0+IChcbiAgJC5hamF4KHtcbiAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICB1cmw6IGBhcGkvdXNlcnMvJHt1c2VyLmlkfS9vcmRlcnNgXG4gIH0pXG4pXG5cbmV4cG9ydCBjb25zdCBmZXRjaE9yZGVyID0gKGlkKSA9PiAoXG4gICQuYWpheCh7XG4gICAgbWV0aG9kOiAnR0VUJyxcbiAgICB1cmw6IGBhcGkvb3JkZXJzLyR7aWR9YFxuICB9KVxuKVxuXG5leHBvcnQgY29uc3QgZmV0Y2hDdXJyZW50T3JkZXJJZCA9IHVzZXIgPT4gKFxuICAkLmFqYXgoe1xuICAgIG1ldGhvZDogYEdFVGAsXG4gICAgdXJsOiBgYXBpL3VzZXJzLyR7aWR9YFxuICB9KVxuKSIsImV4cG9ydCBjb25zdCBjcmVhdGVPcmRlckl0ZW0gPSAodXNlciwgb3JkZXJJdGVtKSA9PiB7XG4gIHJldHVybiAkLmFqYXgoe1xuICAgIG1ldGhvZDogXCJQT1NUXCIsXG4gICAgdXJsOiBgYXBpL29yZGVycy8ke29yZGVySXRlbS5vcmRlcl9pZH0vb3JkZXJfaXRlbXNgLFxuICAgIGRhdGE6IHtvcmRlckl0ZW19XG4gIH0pXG59XG5cbmV4cG9ydCBjb25zdCB1cGRhdGVPcmRlckl0ZW0gPSAodXNlciwgb3JkZXJJdGVtcykgPT4gKFxuICAkLmFqYXgoe1xuICAgIG1ldGhvZDogXCJQQVRDSFwiLFxuICAgIHVybDogYC9hcGkvdXNlcnMvJHt1c2VyLmlkfS9vcmRlcnMvJHt1c2VyLmN1cnJlbnRfb3JkZXIuaWR9L29yZGVyX2l0ZW1zLyR7b3JkZXJJdGVtcy5pZH1gLFxuICAgIGRhdGE6IHsgb3JkZXJJdGVtcyB9XG4gIH0pXG4pXG5cbmV4cG9ydCBjb25zdCBmZXRjaE9yZGVySXRlbXMgPSAodXNlciwgb3JkZXIpID0+IChcbiAgJC5hamF4KHtcbiAgICBtZXRob2Q6IFwiR0VUXCIsXG4gICAgdXJsOiBgL2FwaS91c2Vycy8ke3VzZXIuaWR9L29yZGVycy8ke29yZGVyLmlkfS9vcmRlcl9pdGVtc2AsXG4gIH0pXG4pXG5cbmV4cG9ydCBjb25zdCBmZXRjaE9yZGVySXRlbSA9ICh1c2VyLCBvcmRlciwgaXRlbSkgPT4gKFxuICAkLmFqYXgoe1xuICAgIG1ldGhvZDogXCJHRVRcIixcbiAgICB1cmw6IGBhcGkvdXNlcnMvJHt1c2VyLmlkfS9vcmRlcnMvJHtvcmRlci5pZH0vb3JkZXJfaXRlbXMvJHtpdGVtLmlkfWAsXG4gIH0pXG4pXG5cbmV4cG9ydCBjb25zdCBkZWxldGVPcmRlckl0ZW0gPSAoaWQsIHVzZXIsIG9yZGVyX2lkKSA9PiAoXG4gICQuYWpheCh7XG4gICAgbWV0aG9kOiBcIkRFTEVURVwiLFxuICAgIHVybDogYGFwaS9vcmRlcnMvJHtvcmRlcl9pZH0vb3JkZXJfaXRlbXMvJHtpZH1gLFxuICAgIG9yZGVySXRlbToge1xuICAgICAgb3JkZXJfaWQ6IG9yZGVyX2lkLFxuICAgICAgaWQ6IGlkXG4gICAgfVxuICB9KVxuKSIsImltcG9ydCAqIGFzIG9yZGVySXRlbXNBcGlVdGlsIGZyb20gJy4uL3V0aWxzL29yZGVyX2l0ZW1zX3V0aWwnO1xuXG5leHBvcnQgY29uc3QgUkVDRUlWRV9PUkRFUl9JVEVNID0gJ1JFQ0VJVkVfT1JERVJfSVRFTSc7XG5leHBvcnQgY29uc3QgUkVNT1ZFX09SREVSX0lURU0gPSBcIlJFTU9WRV9PUkRFUl9JVEVNXCI7XG5cbmV4cG9ydCBjb25zdCByZWNlaXZlT3JkZXJJdGVtID0gKHJlc3BvbnNlKSA9PiB7XG4gIHJldHVybiAoe1xuICAgIHR5cGU6IFJFQ0VJVkVfT1JERVJfSVRFTSxcbiAgICBvcmRlckl0ZW06IHJlc3BvbnNlLm9yZGVySXRlbXNcbiAgfSlcbn1cblxuZXhwb3J0IGNvbnN0IHJlbW92ZU9yZGVySXRlbSA9IChyZXNwb25zZSkgPT4ge1xuICByZXR1cm4gKHtcbiAgICB0eXBlOiBSRU1PVkVfT1JERVJfSVRFTSxcbiAgICBvcmRlckl0ZW1JZDogT2JqZWN0LmtleXMocmVzcG9uc2Uub3JkZXJJdGVtcylcbiAgfSlcbn1cblxuXG5leHBvcnQgY29uc3QgY3JlYXRlT3JkZXJJdGVtID0gKHVzZXIsIG9yZGVySXRlbSkgPT4gZGlzcGF0Y2ggPT4ge1xuICByZXR1cm4gb3JkZXJJdGVtc0FwaVV0aWwuY3JlYXRlT3JkZXJJdGVtKHVzZXIsIG9yZGVySXRlbSlcbiAgICAudGhlbihyZXNwb25zZSA9PiBkaXNwYXRjaChyZWNlaXZlT3JkZXJJdGVtKHJlc3BvbnNlKSkpO1xufVxuXG5leHBvcnQgY29uc3QgdXBkYXRlT3JkZXJJdGVtID0gKHVzZXIsIG9yZGVySXRlbSkgPT4gZGlzcGF0Y2ggPT4ge1xuICByZXR1cm4gb3JkZXJJdGVtc0FwaVV0aWwudXBkYXRlT3JkZXJJdGVtKHVzZXIsIG9yZGVySXRlbSlcbiAgICAudGhlbihyZXNwb25zZSA9PiBkaXNwYXRjaChyZWNlaXZlT3JkZXJJdGVtKHJlc3BvbnNlKSkpO1xufVxuXG5leHBvcnQgY29uc3QgZGVsZXRlT3JkZXJJdGVtID0gKG9yZGVySXRlbSwgdXNlciwgb3JkZXJJZCkgPT4gZGlzcGF0Y2ggPT4ge1xuICByZXR1cm4gb3JkZXJJdGVtc0FwaVV0aWwuZGVsZXRlT3JkZXJJdGVtKG9yZGVySXRlbSwgdXNlciwgb3JkZXJJZClcbiAgICAudGhlbihyZXNwb25zZSA9PiBkaXNwYXRjaChyZW1vdmVPcmRlckl0ZW0ocmVzcG9uc2UpKSk7XG59IiwiaW1wb3J0IHtcbiAgUkVDRUlWRV9QUk9EVUNUUyxcbiAgUkVDRUlWRV9QUk9EVUNUIH0gZnJvbSAnLi4vYWN0aW9ucy9wcm9kdWN0cyc7XG5pbXBvcnQgeyBSRUNFSVZFX09SREVSIH0gZnJvbSAnLi4vYWN0aW9ucy9vcmRlcnMnO1xuaW1wb3J0IHsgUkVDRUlWRV9PUkRFUl9JVEVNIH0gZnJvbSAnLi4vYWN0aW9ucy9vcmRlcl9pdGVtcydcbmltcG9ydCB7IG1lcmdlIH0gZnJvbSAnbG9kYXNoL21lcmdlJztcbi8vIHdpbmRvdy5mZXRjaE9yZGVyID0gZmV0Y2hPcmRlcjtcbi8vIGltcG9ydCB7IHN0b3JlIH0gZnJvbSAncmVhY3QtcmVkdXgnO1xuLy8gd2luZG93LnN0b3JlID0gc3RvcmU7XG5cbmNvbnN0IHByb2R1Y3RzUmVkdWNlciA9IChvbGRTdGF0ZSA9IHt9LCBhY3Rpb24pID0+IHtcbiAgT2JqZWN0LmZyZWV6ZShvbGRTdGF0ZSk7XG4gIGxldCBuZXdTdGF0ZSA9IE9iamVjdC5hc3NpZ24oe30sIG9sZFN0YXRlKVxuICBsZXQgcHJvZHVjdDtcblxuICBzd2l0Y2ggKGFjdGlvbi50eXBlKSB7XG4gICAgY2FzZSBSRUNFSVZFX1BST0RVQ1RTOlxuICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24obmV3U3RhdGUsIGFjdGlvbi5wcm9kdWN0cyk7XG4gICAgY2FzZSBSRUNFSVZFX1BST0RVQ1Q6XG4gICAgICBwcm9kdWN0ID0gYWN0aW9uLnBheWxvYWQucHJvZHVjdDtcbiAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKG5ld1N0YXRlLCB7IFtwcm9kdWN0LmlkXTogcHJvZHVjdCB9KTtcbiAgICBjYXNlIFJFQ0VJVkVfT1JERVI6XG4gICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihuZXdTdGF0ZSwgYWN0aW9uLnByb2R1Y3RzKTtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIG9sZFN0YXRlO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IHByb2R1Y3RzUmVkdWNlcjsiLCJpbXBvcnQgKiBhcyBwcm9kdWN0SXRlbUFQSVV0aWwgZnJvbSAnLi4vdXRpbHMvcHJvZHVjdF9pdGVtX3V0aWwnO1xuZXhwb3J0IGNvbnN0IFJFQ0VJVkVfUFJPRFVDVF9JVEVNUyA9ICdSRUNFSVZFX1BST0RVQ1RfSVRFTVMnO1xuZXhwb3J0IGNvbnN0IFJFQ0VJVkVfUFJPRFVDVF9JVEVNID0gJ1JFQ0VJVkVfUFJPRFVDVF9JVEVNJztcblxuXG5leHBvcnQgY29uc3QgcmVjZWl2ZUFsbFByb2R1Y3RJdGVtcyA9IChwcm9kdWN0SXRlbXMpID0+ICh7XG4gIHR5cGU6IFJFQ0VJVkVfUFJPRFVDVF9JVEVNUyxcbiAgcHJvZHVjdEl0ZW1zXG59KTtcblxuZXhwb3J0IGNvbnN0IHJlY2VpdmVQcm9kdWN0SXRlbSA9IChwcm9kdWN0SXRlbSkgPT4gKHtcbiAgdHlwZTogUkVDRUlWRV9QUk9EVUNUX0lURU0sXG4gIHByb2R1Y3RJdGVtXG59KTtcblxuZXhwb3J0IGNvbnN0IHJlcXVlc3RQcm9kdWN0SXRlbXMgPSAoKSA9PiBkaXNwYXRjaCA9PiAoXG4gIHByb2R1Y3RJdGVtQVBJVXRpbC5mZXRjaFByb2R1Y3RJdGVtcygpXG4gICAgLnRoZW4ocHJvZHVjdEl0ZW1zID0+IGRpc3BhdGNoKHJlY2VpdmVBbGxQcm9kdWN0SXRlbXMocHJvZHVjdEl0ZW1zKSkpXG4pO1xuXG5leHBvcnQgY29uc3QgcmVxdWVzdFByb2R1Y3RJdGVtID0gKGlkKSA9PiBkaXNwYXRjaCA9PiAoXG4gIHByb2R1Y3RJdGVtQVBJVXRpbC5mZXRjaFByb2R1Y3RJdGVtKGlkKVxuICAgIC50aGVuKHByb2R1Y3RJdGVtID0+IGRpc3BhdGNoKHJlY2VpdmVQcm9kdWN0SXRlbShwcm9kdWN0SXRlbSkpKVxuKTtcblxuLy8gd2h5IGlzIHRoaXMgcmV0dXJuaW5nPyBcbmV4cG9ydCBjb25zdCB1cGRhdGVQcm9kdWN0SXRlbSA9IChwcm9kdWN0SXRlbSkgPT4gZGlzcGF0Y2ggPT4ge1xuICByZXR1cm4gcHJvZHVjdEl0ZW1BUElVdGlsLnVwZGF0ZVByb2R1Y3RJdGVtKHByb2R1Y3RJdGVtKVxuICAgIC50aGVuKHJlc3BvbnNlID0+IGRpc3BhdGNoKHJlY2VpdmVQcm9kdWN0SXRlbShyZXNwb25zZSkpKTtcbn1cblxuXG5cblxuIiwiZXhwb3J0IGNvbnN0IGZldGNoUHJvZHVjdEl0ZW1zID0gKCkgPT4gKFxuICAkLmFqYXgoe1xuICAgIG1ldGhvZDogJ0dFVCcsXG4gICAgdXJsOiAnYXBpL3Byb2R1Y3RfaXRlbXMvJ1xuICB9KVxuKTtcblxuZXhwb3J0IGNvbnN0IGZldGNoUHJvZHVjdEl0ZW0gPSBpZCA9PiAoXG4gICQuYWpheCh7XG4gICAgbWV0aG9kOiAnR0VUJyxcbiAgICB1cmw6IGBhcGkvcHJvZHVjdF9pdGVtLyR7aWR9YFxuICB9KVxuKTtcblxuZXhwb3J0IGNvbnN0IHVwZGF0ZVByb2R1Y3RJdGVtID0gcHJvZHVjdF9pdGVtID0+IHtcblxuICByZXR1cm4gJC5hamF4KHtcbiAgICBtZXRob2Q6ICdQQVRDSCcsXG4gICAgdXJsOiBgYXBpL3Byb2R1Y3RfaXRlbXMvJHtwcm9kdWN0X2l0ZW0uaWR9YCxcbiAgICBkYXRhOiB7IHByb2R1Y3RfaXRlbSB9XG4gIH0pXG59IiwiaW1wb3J0IHsgUkVDRUlWRV9PUkRFUl9JVEVNLCBSRU1PVkVfT1JERVJfSVRFTSB9IGZyb20gJy4uL2FjdGlvbnMvb3JkZXJfaXRlbXMnO1xuaW1wb3J0IHsgUkVDRUlWRV9PUkRFUiB9IGZyb20gJy4uL2FjdGlvbnMvb3JkZXJzJztcbmltcG9ydCB7IFJFQ0VJVkVfUFJPRFVDVCB9IGZyb20gJy4uL2FjdGlvbnMvcHJvZHVjdHMnO1xuaW1wb3J0IHsgbWVyZ2UgfSBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IHsgTE9HT1VUX0NVUlJFTlRfVVNFUiB9IGZyb20gJy4uL2FjdGlvbnMvc2Vzc2lvbic7XG5cblxuY29uc3Qgb3JkZXJJdGVtc1JlZHVjZXIgPSAob2xkU3RhdGUgPSB7fSwgYWN0aW9uKSA9PiB7XG4gIGxldCBuZXdTdGF0ZSA9IE9iamVjdC5hc3NpZ24oe30sIG9sZFN0YXRlKTtcbiAgbGV0IG9yZGVySXRlbXM7XG4gIE9iamVjdC5mcmVlemUob2xkU3RhdGUpO1xuXG4gIHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcbiAgICBjYXNlIFJFQ0VJVkVfT1JERVJfSVRFTTpcbiAgICAgIG5ld1N0YXRlID0gT2JqZWN0LmFzc2lnbihuZXdTdGF0ZSwge1thY3Rpb24ub3JkZXJJdGVtLmlkXTogYWN0aW9uLm9yZGVySXRlbX0pO1xuICAgICAgcmV0dXJuIG5ld1N0YXRlO1xuICAgIGNhc2UgUkVNT1ZFX09SREVSX0lURU06XG4gICAgICBkZWxldGUgbmV3U3RhdGVbYWN0aW9uLm9yZGVySXRlbUlkXTtcbiAgICAgIHJldHVybiBuZXdTdGF0ZTtcbiAgICBjYXNlIFJFQ0VJVkVfT1JERVI6XG4gICAgICBuZXdTdGF0ZSA9IE9iamVjdC5hc3NpZ24obmV3U3RhdGUsIGFjdGlvbi5vcmRlckl0ZW1zKTtcbiAgICAgIHJldHVybiBuZXdTdGF0ZTtcbiAgICBjYXNlIFJFQ0VJVkVfUFJPRFVDVDpcbiAgICAgIG9yZGVySXRlbXMgPSBhY3Rpb24ucGF5bG9hZC5vcmRlcl9pdGVtcztcbiAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKG5ld1N0YXRlLCBvcmRlckl0ZW1zKTtcbiAgICBjYXNlIExPR09VVF9DVVJSRU5UX1VTRVI6XG4gICAgICByZXR1cm4ge307XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBvbGRTdGF0ZTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBvcmRlckl0ZW1zUmVkdWNlcjsiLCJpbXBvcnQgeyBjb21iaW5lUmVkdWNlcnMgfSBmcm9tICdyZWR1eCc7XG5pbXBvcnQgcHJvZHVjdHNSZWR1Y2VyIGZyb20gJy4vcHJvZHVjdHMnO1xuaW1wb3J0IHByb2R1Y3RJdGVtc1JlZHVjZXIgZnJvbSAnLi9wcm9kdWN0X2l0ZW1zJztcbmltcG9ydCBvcmRlcnNSZWR1Y2VyIGZyb20gJy4vb3JkZXJzJztcbmltcG9ydCBvcmRlckl0ZW1zUmVkdWNlciBmcm9tICcuL29yZGVyX2l0ZW1zJztcblxuZXhwb3J0IGRlZmF1bHQgY29tYmluZVJlZHVjZXJzKHtcbiAgcHJvZHVjdHM6IHByb2R1Y3RzUmVkdWNlcixcbiAgcHJvZHVjdEl0ZW1zOiBwcm9kdWN0SXRlbXNSZWR1Y2VyLFxuICBvcmRlcnM6IG9yZGVyc1JlZHVjZXIsXG4gIG9yZGVySXRlbXM6IG9yZGVySXRlbXNSZWR1Y2VyXG59KTsiLCJpbXBvcnQgeyBSRUNFSVZFX1BST0RVQ1RfSVRFTSwgfSBmcm9tICcuLi9hY3Rpb25zL3Byb2R1Y3RfaXRlbXMnO1xuaW1wb3J0IHsgUkVDRUlWRV9QUk9EVUNUIH0gZnJvbSAnLi4vYWN0aW9ucy9wcm9kdWN0cyc7XG5pbXBvcnQgeyBSRUNFSVZFX09SREVSIH0gZnJvbSAnLi4vYWN0aW9ucy9vcmRlcnMnO1xuXG5pbXBvcnQgeyBtZXJnZSB9IGZyb20gJ2xvZGFzaCc7XG5cbmV4cG9ydCBkZWZhdWx0IChvbGRTdGF0ZSA9IHt9LCBhY3Rpb24pID0+IHtcbiAgT2JqZWN0LmZyZWV6ZShvbGRTdGF0ZSk7XG4gIGxldCBuZXdTdGF0ZTtcbiAgbGV0IHByb2R1Y3RJdGVtcztcbiAgc3dpdGNoIChhY3Rpb24udHlwZSkge1xuICAgIGNhc2UgUkVDRUlWRV9QUk9EVUNUX0lURU06XG4gICAgICBuZXdTdGF0ZSA9IG1lcmdlKHt9LCBvbGRTdGF0ZSwgeyBbYWN0aW9uLnByb2R1Y3RJdGVtLmlkXTogYWN0aW9uLnByb2R1Y3RJdGVtIH0pO1xuICAgICAgcmV0dXJuIG5ld1N0YXRlO1xuICAgIGNhc2UgUkVDRUlWRV9QUk9EVUNUOlxuICAgICAgcHJvZHVjdEl0ZW1zID0gYWN0aW9uLnBheWxvYWQucHJvZHVjdF9pdGVtcztcbiAgICAgIHJldHVybiBtZXJnZSh7fSwgb2xkU3RhdGUsIHByb2R1Y3RJdGVtcyk7XG4gICAgY2FzZSBSRUNFSVZFX09SREVSOlxuICAgICAgbmV3U3RhdGUgPSBtZXJnZSh7fSwgbmV3U3RhdGUsIGFjdGlvbi5wcm9kdWN0SXRlbXMpO1xuICAgICAgcmV0dXJuIG5ld1N0YXRlO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gb2xkU3RhdGU7XG4gIH1cbn07IiwiaW1wb3J0IHsgUkVDRUlWRV9PUkRFUiB9IGZyb20gJy4uL2FjdGlvbnMvb3JkZXJzJztcbmltcG9ydCB7IFJFQ0VJVkVfUFJPRFVDVCB9IGZyb20gJy4uL2FjdGlvbnMvcHJvZHVjdHMnO1xuaW1wb3J0IHsgTE9HT1VUX0NVUlJFTlRfVVNFUiB9IGZyb20gJy4uL2FjdGlvbnMvc2Vzc2lvbic7XG5pbXBvcnQgeyBtZXJnZSB9IGZyb20gJ2xvZGFzaCc7XG5cbmNvbnN0IG9yZGVyc1JlZHVjZXIgPSAob2xkU3RhdGUgPSB7fSwgYWN0aW9uKSA9PiB7XG4gIE9iamVjdC5mcmVlemUob2xkU3RhdGUpO1xuICBsZXQgbmV3U3RhdGU7XG5cbiAgc3dpdGNoIChhY3Rpb24udHlwZSkge1xuICAgIGNhc2UgUkVDRUlWRV9PUkRFUjpcbiAgICAgIG5ld1N0YXRlID0gbWVyZ2Uoe30sIG9sZFN0YXRlLCBhY3Rpb24ub3JkZXIpO1xuICAgICAgcmV0dXJuIG5ld1N0YXRlO1xuICAgIGNhc2UgUkVDRUlWRV9QUk9EVUNUOlxuICAgICAgcmV0dXJuIG1lcmdlKHt9LCBvbGRTdGF0ZSwgYWN0aW9uLnBheWxvYWQub3JkZXJzKTtcbiAgICBjYXNlIExPR09VVF9DVVJSRU5UX1VTRVI6XG4gICAgICByZXR1cm4ge307XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBvbGRTdGF0ZTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBvcmRlcnNSZWR1Y2VyOyIsImltcG9ydCB7IHBvc3RVc2VyIH0gZnJvbSAnLi4vdXRpbHMvc2lnbnVwX3V0aWwnO1xuXG5leHBvcnQgY29uc3QgUkVDRUlWRV9DVVJSRU5UX1VTRVIgPSAnUkVDRUlWRV9DVVJSRU5UX1VTRVInO1xuZXhwb3J0IGNvbnN0IFJFQ0VJVkVfU0lHTlVQX0VSUk9SUyA9ICdSRUNFSVZFX1NJR05VUF9FUlJPUlMnO1xuXG5jb25zdCByZWNlaXZlQ3VycmVudFVzZXIgPSB1c2VyID0+ICh7XG4gIHR5cGU6IFJFQ0VJVkVfQ1VSUkVOVF9VU0VSLFxuICB1c2VyXG59KTtcblxuY29uc3QgcmVjZWl2ZVNpZ251cEVycm9ycyA9IGVycm9ycyA9PiAoe1xuICB0eXBlOiBSRUNFSVZFX1NJR05VUF9FUlJPUlMsXG4gIGVycm9yc1xufSk7XG5cbmV4cG9ydCBjb25zdCBjcmVhdGVOZXdVc2VyID0gZm9ybVVzZXIgPT4gZGlzcGF0Y2ggPT4gKHBvc3RVc2VyKGZvcm1Vc2VyKVxuICAudGhlbih1c2VyID0+IGRpc3BhdGNoKHJlY2VpdmVDdXJyZW50VXNlcih1c2VyKSksXG4gICAgZXJyb3JzID0+IGRpc3BhdGNoKHJlY2VpdmVTaWdudXBFcnJvcnMoZXJyb3JzLnJlc3BvbnNlSlNPTikpKVxuKTsiLCJleHBvcnQgY29uc3QgcG9zdFVzZXIgPSB1c2VyID0+ICQuYWpheCh7XG4gIHVybDogJy9hcGkvdXNlcnMnLFxuICBtZXRob2Q6ICdQT1NUJyxcbiAgZGF0YTogeyB1c2VyIH0sXG59KTsiLCJpbXBvcnQgeyBjb21iaW5lUmVkdWNlcnMgfSBmcm9tICdyZWR1eCc7XG5pbXBvcnQgc2Vzc2lvbkVycm9yc1JlZHVjZXIgZnJvbSAnLi9zZXNzaW9uX2Vycm9ycyc7XG5pbXBvcnQgc2lnbnVwRXJyb3JzUmVkdWNlciBmcm9tICcuL3NpZ251cF9lcnJvcnMnO1xuXG5leHBvcnQgZGVmYXVsdCBjb21iaW5lUmVkdWNlcnMoe1xuICBzZXNzaW9uOiBzZXNzaW9uRXJyb3JzUmVkdWNlcixcbiAgc2lnbnVwOiBzaWdudXBFcnJvcnNSZWR1Y2VyXG59KTsiLCJpbXBvcnQgeyBSRUNFSVZFX0NVUlJFTlRfVVNFUiwgUkVDRUlWRV9FUlJPUlMsIENMRUFSX0VSUk9SUyB9IGZyb20gJy4uL2FjdGlvbnMvc2Vzc2lvbic7XG5cbmV4cG9ydCBkZWZhdWx0IChzdGF0ZSA9IFtdLCBhY3Rpb24pID0+IHtcbiAgT2JqZWN0LmZyZWV6ZShzdGF0ZSk7XG4gIHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcbiAgICBjYXNlIFJFQ0VJVkVfQ1VSUkVOVF9VU0VSOlxuICAgICAgcmV0dXJuIFtdO1xuICAgIGNhc2UgUkVDRUlWRV9FUlJPUlM6XG4gICAgICByZXR1cm4gYWN0aW9uLmVycm9ycztcbiAgICBjYXNlIENMRUFSX0VSUk9SUzpcbiAgICAgIHJldHVybiBbXTtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIHN0YXRlO1xuICB9XG59OyIsImltcG9ydCB7IFJFQ0VJVkVfQ1VSUkVOVF9VU0VSLCBSRUNFSVZFX1NJR05VUF9FUlJPUlMgfSBmcm9tICcuLi9hY3Rpb25zL3NpZ251cCc7XG5cbmV4cG9ydCBkZWZhdWx0IChzdGF0ZSA9IFtdLCBhY3Rpb24pID0+IHtcbiAgT2JqZWN0LmZyZWV6ZShzdGF0ZSk7XG4gIHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcbiAgICBjYXNlIFJFQ0VJVkVfQ1VSUkVOVF9VU0VSOlxuICAgICAgcmV0dXJuIFtdO1xuICAgIGNhc2UgUkVDRUlWRV9TSUdOVVBfRVJST1JTOlxuICAgICAgcmV0dXJuIGFjdGlvbi5lcnJvcnM7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBzdGF0ZTtcbiAgfVxufTsiLCJpbXBvcnQgeyBjb21iaW5lUmVkdWNlcnMgfSBmcm9tICdyZWR1eCc7XG5pbXBvcnQgc2Vzc2lvblJlZHVjZXIgZnJvbSAnLi9zZXNzaW9uJztcbmltcG9ydCBlbnRpdGllc1JlZHVjZXIgZnJvbSAnLi9lbnRpdGllcyc7XG5pbXBvcnQgZXJyb3JzUmVkdWNlciBmcm9tICcuL2Vycm9ycyc7XG5cbmV4cG9ydCBkZWZhdWx0IGNvbWJpbmVSZWR1Y2Vycyh7XG4gIGVudGl0aWVzOiBlbnRpdGllc1JlZHVjZXIsXG4gIHNlc3Npb246IHNlc3Npb25SZWR1Y2VyLFxuICBlcnJvcnM6IGVycm9yc1JlZHVjZXJcbn0pOyIsImNvbnN0IHRodW5rID0gKHsgZGlzcGF0Y2gsIGdldFN0YXRlIH0pID0+IG5leHQgPT4gYWN0aW9uID0+IHtcbiAgaWYgKHR5cGVvZiBhY3Rpb24gPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gYWN0aW9uKGRpc3BhdGNoLCBnZXRTdGF0ZSk7XG4gIH1cbiAgcmV0dXJuIG5leHQoYWN0aW9uKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IHRodW5rOyIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9pbmhlcml0c0xvb3NlKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7XG4gIHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcy5wcm90b3R5cGUpO1xuICBzdWJDbGFzcy5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBzdWJDbGFzcztcbiAgc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzcztcbn0iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuZXhwb3J0IHZhciBSZWFjdFJlZHV4Q29udGV4dCA9IFJlYWN0LmNyZWF0ZUNvbnRleHQobnVsbCk7XG5leHBvcnQgZGVmYXVsdCBSZWFjdFJlZHV4Q29udGV4dDsiLCIvLyBEZWZhdWx0IHRvIGEgZHVtbXkgXCJiYXRjaFwiIGltcGxlbWVudGF0aW9uIHRoYXQganVzdCBydW5zIHRoZSBjYWxsYmFja1xuZnVuY3Rpb24gZGVmYXVsdE5vb3BCYXRjaChjYWxsYmFjaykge1xuICBjYWxsYmFjaygpO1xufVxuXG52YXIgYmF0Y2ggPSBkZWZhdWx0Tm9vcEJhdGNoOyAvLyBBbGxvdyBpbmplY3RpbmcgYW5vdGhlciBiYXRjaGluZyBmdW5jdGlvbiBsYXRlclxuXG5leHBvcnQgdmFyIHNldEJhdGNoID0gZnVuY3Rpb24gc2V0QmF0Y2gobmV3QmF0Y2gpIHtcbiAgcmV0dXJuIGJhdGNoID0gbmV3QmF0Y2g7XG59OyAvLyBTdXBwbHkgYSBnZXR0ZXIganVzdCB0byBza2lwIGRlYWxpbmcgd2l0aCBFU00gYmluZGluZ3NcblxuZXhwb3J0IHZhciBnZXRCYXRjaCA9IGZ1bmN0aW9uIGdldEJhdGNoKCkge1xuICByZXR1cm4gYmF0Y2g7XG59OyIsImltcG9ydCB7IGdldEJhdGNoIH0gZnJvbSAnLi9iYXRjaCc7IC8vIGVuY2Fwc3VsYXRlcyB0aGUgc3Vic2NyaXB0aW9uIGxvZ2ljIGZvciBjb25uZWN0aW5nIGEgY29tcG9uZW50IHRvIHRoZSByZWR1eCBzdG9yZSwgYXNcbi8vIHdlbGwgYXMgbmVzdGluZyBzdWJzY3JpcHRpb25zIG9mIGRlc2NlbmRhbnQgY29tcG9uZW50cywgc28gdGhhdCB3ZSBjYW4gZW5zdXJlIHRoZVxuLy8gYW5jZXN0b3IgY29tcG9uZW50cyByZS1yZW5kZXIgYmVmb3JlIGRlc2NlbmRhbnRzXG5cbnZhciBDTEVBUkVEID0gbnVsbDtcbnZhciBudWxsTGlzdGVuZXJzID0ge1xuICBub3RpZnk6IGZ1bmN0aW9uIG5vdGlmeSgpIHt9XG59O1xuXG5mdW5jdGlvbiBjcmVhdGVMaXN0ZW5lckNvbGxlY3Rpb24oKSB7XG4gIHZhciBiYXRjaCA9IGdldEJhdGNoKCk7IC8vIHRoZSBjdXJyZW50L25leHQgcGF0dGVybiBpcyBjb3BpZWQgZnJvbSByZWR1eCdzIGNyZWF0ZVN0b3JlIGNvZGUuXG4gIC8vIFRPRE86IHJlZmFjdG9yK2V4cG9zZSB0aGF0IGNvZGUgdG8gYmUgcmV1c2FibGUgaGVyZT9cblxuICB2YXIgY3VycmVudCA9IFtdO1xuICB2YXIgbmV4dCA9IFtdO1xuICByZXR1cm4ge1xuICAgIGNsZWFyOiBmdW5jdGlvbiBjbGVhcigpIHtcbiAgICAgIG5leHQgPSBDTEVBUkVEO1xuICAgICAgY3VycmVudCA9IENMRUFSRUQ7XG4gICAgfSxcbiAgICBub3RpZnk6IGZ1bmN0aW9uIG5vdGlmeSgpIHtcbiAgICAgIHZhciBsaXN0ZW5lcnMgPSBjdXJyZW50ID0gbmV4dDtcbiAgICAgIGJhdGNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0ZW5lcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBsaXN0ZW5lcnNbaV0oKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiBuZXh0O1xuICAgIH0sXG4gICAgc3Vic2NyaWJlOiBmdW5jdGlvbiBzdWJzY3JpYmUobGlzdGVuZXIpIHtcbiAgICAgIHZhciBpc1N1YnNjcmliZWQgPSB0cnVlO1xuICAgICAgaWYgKG5leHQgPT09IGN1cnJlbnQpIG5leHQgPSBjdXJyZW50LnNsaWNlKCk7XG4gICAgICBuZXh0LnB1c2gobGlzdGVuZXIpO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIHVuc3Vic2NyaWJlKCkge1xuICAgICAgICBpZiAoIWlzU3Vic2NyaWJlZCB8fCBjdXJyZW50ID09PSBDTEVBUkVEKSByZXR1cm47XG4gICAgICAgIGlzU3Vic2NyaWJlZCA9IGZhbHNlO1xuICAgICAgICBpZiAobmV4dCA9PT0gY3VycmVudCkgbmV4dCA9IGN1cnJlbnQuc2xpY2UoKTtcbiAgICAgICAgbmV4dC5zcGxpY2UobmV4dC5pbmRleE9mKGxpc3RlbmVyKSwgMSk7XG4gICAgICB9O1xuICAgIH1cbiAgfTtcbn1cblxudmFyIFN1YnNjcmlwdGlvbiA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFN1YnNjcmlwdGlvbihzdG9yZSwgcGFyZW50U3ViKSB7XG4gICAgdGhpcy5zdG9yZSA9IHN0b3JlO1xuICAgIHRoaXMucGFyZW50U3ViID0gcGFyZW50U3ViO1xuICAgIHRoaXMudW5zdWJzY3JpYmUgPSBudWxsO1xuICAgIHRoaXMubGlzdGVuZXJzID0gbnVsbExpc3RlbmVycztcbiAgICB0aGlzLmhhbmRsZUNoYW5nZVdyYXBwZXIgPSB0aGlzLmhhbmRsZUNoYW5nZVdyYXBwZXIuYmluZCh0aGlzKTtcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBTdWJzY3JpcHRpb24ucHJvdG90eXBlO1xuXG4gIF9wcm90by5hZGROZXN0ZWRTdWIgPSBmdW5jdGlvbiBhZGROZXN0ZWRTdWIobGlzdGVuZXIpIHtcbiAgICB0aGlzLnRyeVN1YnNjcmliZSgpO1xuICAgIHJldHVybiB0aGlzLmxpc3RlbmVycy5zdWJzY3JpYmUobGlzdGVuZXIpO1xuICB9O1xuXG4gIF9wcm90by5ub3RpZnlOZXN0ZWRTdWJzID0gZnVuY3Rpb24gbm90aWZ5TmVzdGVkU3VicygpIHtcbiAgICB0aGlzLmxpc3RlbmVycy5ub3RpZnkoKTtcbiAgfTtcblxuICBfcHJvdG8uaGFuZGxlQ2hhbmdlV3JhcHBlciA9IGZ1bmN0aW9uIGhhbmRsZUNoYW5nZVdyYXBwZXIoKSB7XG4gICAgaWYgKHRoaXMub25TdGF0ZUNoYW5nZSkge1xuICAgICAgdGhpcy5vblN0YXRlQ2hhbmdlKCk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5pc1N1YnNjcmliZWQgPSBmdW5jdGlvbiBpc1N1YnNjcmliZWQoKSB7XG4gICAgcmV0dXJuIEJvb2xlYW4odGhpcy51bnN1YnNjcmliZSk7XG4gIH07XG5cbiAgX3Byb3RvLnRyeVN1YnNjcmliZSA9IGZ1bmN0aW9uIHRyeVN1YnNjcmliZSgpIHtcbiAgICBpZiAoIXRoaXMudW5zdWJzY3JpYmUpIHtcbiAgICAgIHRoaXMudW5zdWJzY3JpYmUgPSB0aGlzLnBhcmVudFN1YiA/IHRoaXMucGFyZW50U3ViLmFkZE5lc3RlZFN1Yih0aGlzLmhhbmRsZUNoYW5nZVdyYXBwZXIpIDogdGhpcy5zdG9yZS5zdWJzY3JpYmUodGhpcy5oYW5kbGVDaGFuZ2VXcmFwcGVyKTtcbiAgICAgIHRoaXMubGlzdGVuZXJzID0gY3JlYXRlTGlzdGVuZXJDb2xsZWN0aW9uKCk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by50cnlVbnN1YnNjcmliZSA9IGZ1bmN0aW9uIHRyeVVuc3Vic2NyaWJlKCkge1xuICAgIGlmICh0aGlzLnVuc3Vic2NyaWJlKSB7XG4gICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgICB0aGlzLnVuc3Vic2NyaWJlID0gbnVsbDtcbiAgICAgIHRoaXMubGlzdGVuZXJzLmNsZWFyKCk7XG4gICAgICB0aGlzLmxpc3RlbmVycyA9IG51bGxMaXN0ZW5lcnM7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBTdWJzY3JpcHRpb247XG59KCk7XG5cbmV4cG9ydCB7IFN1YnNjcmlwdGlvbiBhcyBkZWZhdWx0IH07IiwiaW1wb3J0IF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2Fzc2VydFRoaXNJbml0aWFsaXplZFwiO1xuaW1wb3J0IF9pbmhlcml0c0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlXCI7XG5pbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IFJlYWN0UmVkdXhDb250ZXh0IH0gZnJvbSAnLi9Db250ZXh0JztcbmltcG9ydCBTdWJzY3JpcHRpb24gZnJvbSAnLi4vdXRpbHMvU3Vic2NyaXB0aW9uJztcblxudmFyIFByb3ZpZGVyID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKFByb3ZpZGVyLCBfQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBQcm92aWRlcihwcm9wcykge1xuICAgIHZhciBfdGhpcztcblxuICAgIF90aGlzID0gX0NvbXBvbmVudC5jYWxsKHRoaXMsIHByb3BzKSB8fCB0aGlzO1xuICAgIHZhciBzdG9yZSA9IHByb3BzLnN0b3JlO1xuICAgIF90aGlzLm5vdGlmeVN1YnNjcmliZXJzID0gX3RoaXMubm90aWZ5U3Vic2NyaWJlcnMuYmluZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSk7XG4gICAgdmFyIHN1YnNjcmlwdGlvbiA9IG5ldyBTdWJzY3JpcHRpb24oc3RvcmUpO1xuICAgIHN1YnNjcmlwdGlvbi5vblN0YXRlQ2hhbmdlID0gX3RoaXMubm90aWZ5U3Vic2NyaWJlcnM7XG4gICAgX3RoaXMuc3RhdGUgPSB7XG4gICAgICBzdG9yZTogc3RvcmUsXG4gICAgICBzdWJzY3JpcHRpb246IHN1YnNjcmlwdGlvblxuICAgIH07XG4gICAgX3RoaXMucHJldmlvdXNTdGF0ZSA9IHN0b3JlLmdldFN0YXRlKCk7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFByb3ZpZGVyLnByb3RvdHlwZTtcblxuICBfcHJvdG8uY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICB0aGlzLl9pc01vdW50ZWQgPSB0cnVlO1xuICAgIHRoaXMuc3RhdGUuc3Vic2NyaXB0aW9uLnRyeVN1YnNjcmliZSgpO1xuXG4gICAgaWYgKHRoaXMucHJldmlvdXNTdGF0ZSAhPT0gdGhpcy5wcm9wcy5zdG9yZS5nZXRTdGF0ZSgpKSB7XG4gICAgICB0aGlzLnN0YXRlLnN1YnNjcmlwdGlvbi5ub3RpZnlOZXN0ZWRTdWJzKCk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5jb21wb25lbnRXaWxsVW5tb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgIGlmICh0aGlzLnVuc3Vic2NyaWJlKSB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgdGhpcy5zdGF0ZS5zdWJzY3JpcHRpb24udHJ5VW5zdWJzY3JpYmUoKTtcbiAgICB0aGlzLl9pc01vdW50ZWQgPSBmYWxzZTtcbiAgfTtcblxuICBfcHJvdG8uY29tcG9uZW50RGlkVXBkYXRlID0gZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlKHByZXZQcm9wcykge1xuICAgIGlmICh0aGlzLnByb3BzLnN0b3JlICE9PSBwcmV2UHJvcHMuc3RvcmUpIHtcbiAgICAgIHRoaXMuc3RhdGUuc3Vic2NyaXB0aW9uLnRyeVVuc3Vic2NyaWJlKCk7XG4gICAgICB2YXIgc3Vic2NyaXB0aW9uID0gbmV3IFN1YnNjcmlwdGlvbih0aGlzLnByb3BzLnN0b3JlKTtcbiAgICAgIHN1YnNjcmlwdGlvbi5vblN0YXRlQ2hhbmdlID0gdGhpcy5ub3RpZnlTdWJzY3JpYmVycztcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICBzdG9yZTogdGhpcy5wcm9wcy5zdG9yZSxcbiAgICAgICAgc3Vic2NyaXB0aW9uOiBzdWJzY3JpcHRpb25cbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8ubm90aWZ5U3Vic2NyaWJlcnMgPSBmdW5jdGlvbiBub3RpZnlTdWJzY3JpYmVycygpIHtcbiAgICB0aGlzLnN0YXRlLnN1YnNjcmlwdGlvbi5ub3RpZnlOZXN0ZWRTdWJzKCk7XG4gIH07XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgQ29udGV4dCA9IHRoaXMucHJvcHMuY29udGV4dCB8fCBSZWFjdFJlZHV4Q29udGV4dDtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgICB2YWx1ZTogdGhpcy5zdGF0ZVxuICAgIH0sIHRoaXMucHJvcHMuY2hpbGRyZW4pO1xuICB9O1xuXG4gIHJldHVybiBQcm92aWRlcjtcbn0oQ29tcG9uZW50KTtcblxuUHJvdmlkZXIucHJvcFR5cGVzID0ge1xuICBzdG9yZTogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBzdWJzY3JpYmU6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgZGlzcGF0Y2g6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgZ2V0U3RhdGU6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWRcbiAgfSksXG4gIGNvbnRleHQ6IFByb3BUeXBlcy5vYmplY3QsXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMuYW55XG59O1xuZXhwb3J0IGRlZmF1bHQgUHJvdmlkZXI7IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7XG4gIGlmIChzZWxmID09PSB2b2lkIDApIHtcbiAgICB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7XG4gIH1cblxuICByZXR1cm4gc2VsZjtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfZXh0ZW5kcygpIHtcbiAgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTtcblxuICAgICAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkge1xuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkge1xuICAgICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGFyZ2V0O1xuICB9O1xuXG4gIHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHNvdXJjZSwgZXhjbHVkZWQpIHtcbiAgaWYgKHNvdXJjZSA9PSBudWxsKSByZXR1cm4ge307XG4gIHZhciB0YXJnZXQgPSB7fTtcbiAgdmFyIHNvdXJjZUtleXMgPSBPYmplY3Qua2V5cyhzb3VyY2UpO1xuICB2YXIga2V5LCBpO1xuXG4gIGZvciAoaSA9IDA7IGkgPCBzb3VyY2VLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAga2V5ID0gc291cmNlS2V5c1tpXTtcbiAgICBpZiAoZXhjbHVkZWQuaW5kZXhPZihrZXkpID49IDApIGNvbnRpbnVlO1xuICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufSIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgaG9pc3RTdGF0aWNzIGZyb20gJ2hvaXN0LW5vbi1yZWFjdC1zdGF0aWNzJztcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSAnaW52YXJpYW50JztcbmltcG9ydCBSZWFjdCwgeyB1c2VDb250ZXh0LCB1c2VNZW1vLCB1c2VFZmZlY3QsIHVzZUxheW91dEVmZmVjdCwgdXNlUmVmLCB1c2VSZWR1Y2VyIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgaXNWYWxpZEVsZW1lbnRUeXBlLCBpc0NvbnRleHRDb25zdW1lciB9IGZyb20gJ3JlYWN0LWlzJztcbmltcG9ydCBTdWJzY3JpcHRpb24gZnJvbSAnLi4vdXRpbHMvU3Vic2NyaXB0aW9uJztcbmltcG9ydCB7IFJlYWN0UmVkdXhDb250ZXh0IH0gZnJvbSAnLi9Db250ZXh0JzsgLy8gRGVmaW5lIHNvbWUgY29uc3RhbnQgYXJyYXlzIGp1c3QgdG8gYXZvaWQgcmUtY3JlYXRpbmcgdGhlc2VcblxudmFyIEVNUFRZX0FSUkFZID0gW107XG52YXIgTk9fU1VCU0NSSVBUSU9OX0FSUkFZID0gW251bGwsIG51bGxdO1xuXG52YXIgc3RyaW5naWZ5Q29tcG9uZW50ID0gZnVuY3Rpb24gc3RyaW5naWZ5Q29tcG9uZW50KENvbXApIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoQ29tcCk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIHJldHVybiBTdHJpbmcoQ29tcCk7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIHN0b3JlU3RhdGVVcGRhdGVzUmVkdWNlcihzdGF0ZSwgYWN0aW9uKSB7XG4gIHZhciB1cGRhdGVDb3VudCA9IHN0YXRlWzFdO1xuICByZXR1cm4gW2FjdGlvbi5wYXlsb2FkLCB1cGRhdGVDb3VudCArIDFdO1xufVxuXG52YXIgaW5pdFN0YXRlVXBkYXRlcyA9IGZ1bmN0aW9uIGluaXRTdGF0ZVVwZGF0ZXMoKSB7XG4gIHJldHVybiBbbnVsbCwgMF07XG59OyAvLyBSZWFjdCBjdXJyZW50bHkgdGhyb3dzIGEgd2FybmluZyB3aGVuIHVzaW5nIHVzZUxheW91dEVmZmVjdCBvbiB0aGUgc2VydmVyLlxuLy8gVG8gZ2V0IGFyb3VuZCBpdCwgd2UgY2FuIGNvbmRpdGlvbmFsbHkgdXNlRWZmZWN0IG9uIHRoZSBzZXJ2ZXIgKG5vLW9wKSBhbmRcbi8vIHVzZUxheW91dEVmZmVjdCBpbiB0aGUgYnJvd3Nlci4gV2UgbmVlZCB1c2VMYXlvdXRFZmZlY3QgYmVjYXVzZSB3ZSB3YW50XG4vLyBgY29ubmVjdGAgdG8gcGVyZm9ybSBzeW5jIHVwZGF0ZXMgdG8gYSByZWYgdG8gc2F2ZSB0aGUgbGF0ZXN0IHByb3BzIGFmdGVyXG4vLyBhIHJlbmRlciBpcyBhY3R1YWxseSBjb21taXR0ZWQgdG8gdGhlIERPTS5cblxuXG52YXIgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiB3aW5kb3cuZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCAhPT0gJ3VuZGVmaW5lZCcgPyB1c2VMYXlvdXRFZmZlY3QgOiB1c2VFZmZlY3Q7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjb25uZWN0QWR2YW5jZWQoXG4vKlxuICBzZWxlY3RvckZhY3RvcnkgaXMgYSBmdW5jIHRoYXQgaXMgcmVzcG9uc2libGUgZm9yIHJldHVybmluZyB0aGUgc2VsZWN0b3IgZnVuY3Rpb24gdXNlZCB0b1xuICBjb21wdXRlIG5ldyBwcm9wcyBmcm9tIHN0YXRlLCBwcm9wcywgYW5kIGRpc3BhdGNoLiBGb3IgZXhhbXBsZTpcbiAgICAgZXhwb3J0IGRlZmF1bHQgY29ubmVjdEFkdmFuY2VkKChkaXNwYXRjaCwgb3B0aW9ucykgPT4gKHN0YXRlLCBwcm9wcykgPT4gKHtcbiAgICAgIHRoaW5nOiBzdGF0ZS50aGluZ3NbcHJvcHMudGhpbmdJZF0sXG4gICAgICBzYXZlVGhpbmc6IGZpZWxkcyA9PiBkaXNwYXRjaChhY3Rpb25DcmVhdG9ycy5zYXZlVGhpbmcocHJvcHMudGhpbmdJZCwgZmllbGRzKSksXG4gICAgfSkpKFlvdXJDb21wb25lbnQpXG4gICBBY2Nlc3MgdG8gZGlzcGF0Y2ggaXMgcHJvdmlkZWQgdG8gdGhlIGZhY3Rvcnkgc28gc2VsZWN0b3JGYWN0b3JpZXMgY2FuIGJpbmQgYWN0aW9uQ3JlYXRvcnNcbiAgb3V0c2lkZSBvZiB0aGVpciBzZWxlY3RvciBhcyBhbiBvcHRpbWl6YXRpb24uIE9wdGlvbnMgcGFzc2VkIHRvIGNvbm5lY3RBZHZhbmNlZCBhcmUgcGFzc2VkIHRvXG4gIHRoZSBzZWxlY3RvckZhY3RvcnksIGFsb25nIHdpdGggZGlzcGxheU5hbWUgYW5kIFdyYXBwZWRDb21wb25lbnQsIGFzIHRoZSBzZWNvbmQgYXJndW1lbnQuXG4gICBOb3RlIHRoYXQgc2VsZWN0b3JGYWN0b3J5IGlzIHJlc3BvbnNpYmxlIGZvciBhbGwgY2FjaGluZy9tZW1vaXphdGlvbiBvZiBpbmJvdW5kIGFuZCBvdXRib3VuZFxuICBwcm9wcy4gRG8gbm90IHVzZSBjb25uZWN0QWR2YW5jZWQgZGlyZWN0bHkgd2l0aG91dCBtZW1vaXppbmcgcmVzdWx0cyBiZXR3ZWVuIGNhbGxzIHRvIHlvdXJcbiAgc2VsZWN0b3IsIG90aGVyd2lzZSB0aGUgQ29ubmVjdCBjb21wb25lbnQgd2lsbCByZS1yZW5kZXIgb24gZXZlcnkgc3RhdGUgb3IgcHJvcHMgY2hhbmdlLlxuKi9cbnNlbGVjdG9yRmFjdG9yeSwgLy8gb3B0aW9ucyBvYmplY3Q6XG5fcmVmKSB7XG4gIGlmIChfcmVmID09PSB2b2lkIDApIHtcbiAgICBfcmVmID0ge307XG4gIH1cblxuICB2YXIgX3JlZjIgPSBfcmVmLFxuICAgICAgX3JlZjIkZ2V0RGlzcGxheU5hbWUgPSBfcmVmMi5nZXREaXNwbGF5TmFtZSxcbiAgICAgIGdldERpc3BsYXlOYW1lID0gX3JlZjIkZ2V0RGlzcGxheU5hbWUgPT09IHZvaWQgMCA/IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgcmV0dXJuIFwiQ29ubmVjdEFkdmFuY2VkKFwiICsgbmFtZSArIFwiKVwiO1xuICB9IDogX3JlZjIkZ2V0RGlzcGxheU5hbWUsXG4gICAgICBfcmVmMiRtZXRob2ROYW1lID0gX3JlZjIubWV0aG9kTmFtZSxcbiAgICAgIG1ldGhvZE5hbWUgPSBfcmVmMiRtZXRob2ROYW1lID09PSB2b2lkIDAgPyAnY29ubmVjdEFkdmFuY2VkJyA6IF9yZWYyJG1ldGhvZE5hbWUsXG4gICAgICBfcmVmMiRyZW5kZXJDb3VudFByb3AgPSBfcmVmMi5yZW5kZXJDb3VudFByb3AsXG4gICAgICByZW5kZXJDb3VudFByb3AgPSBfcmVmMiRyZW5kZXJDb3VudFByb3AgPT09IHZvaWQgMCA/IHVuZGVmaW5lZCA6IF9yZWYyJHJlbmRlckNvdW50UHJvcCxcbiAgICAgIF9yZWYyJHNob3VsZEhhbmRsZVN0YSA9IF9yZWYyLnNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlcyxcbiAgICAgIHNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlcyA9IF9yZWYyJHNob3VsZEhhbmRsZVN0YSA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9yZWYyJHNob3VsZEhhbmRsZVN0YSxcbiAgICAgIF9yZWYyJHN0b3JlS2V5ID0gX3JlZjIuc3RvcmVLZXksXG4gICAgICBzdG9yZUtleSA9IF9yZWYyJHN0b3JlS2V5ID09PSB2b2lkIDAgPyAnc3RvcmUnIDogX3JlZjIkc3RvcmVLZXksXG4gICAgICBfcmVmMiR3aXRoUmVmID0gX3JlZjIud2l0aFJlZixcbiAgICAgIHdpdGhSZWYgPSBfcmVmMiR3aXRoUmVmID09PSB2b2lkIDAgPyBmYWxzZSA6IF9yZWYyJHdpdGhSZWYsXG4gICAgICBfcmVmMiRmb3J3YXJkUmVmID0gX3JlZjIuZm9yd2FyZFJlZixcbiAgICAgIGZvcndhcmRSZWYgPSBfcmVmMiRmb3J3YXJkUmVmID09PSB2b2lkIDAgPyBmYWxzZSA6IF9yZWYyJGZvcndhcmRSZWYsXG4gICAgICBfcmVmMiRjb250ZXh0ID0gX3JlZjIuY29udGV4dCxcbiAgICAgIGNvbnRleHQgPSBfcmVmMiRjb250ZXh0ID09PSB2b2lkIDAgPyBSZWFjdFJlZHV4Q29udGV4dCA6IF9yZWYyJGNvbnRleHQsXG4gICAgICBjb25uZWN0T3B0aW9ucyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF9yZWYyLCBbXCJnZXREaXNwbGF5TmFtZVwiLCBcIm1ldGhvZE5hbWVcIiwgXCJyZW5kZXJDb3VudFByb3BcIiwgXCJzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXNcIiwgXCJzdG9yZUtleVwiLCBcIndpdGhSZWZcIiwgXCJmb3J3YXJkUmVmXCIsIFwiY29udGV4dFwiXSk7XG5cbiAgaW52YXJpYW50KHJlbmRlckNvdW50UHJvcCA9PT0gdW5kZWZpbmVkLCBcInJlbmRlckNvdW50UHJvcCBpcyByZW1vdmVkLiByZW5kZXIgY291bnRpbmcgaXMgYnVpbHQgaW50byB0aGUgbGF0ZXN0IFJlYWN0IERldiBUb29scyBwcm9maWxpbmcgZXh0ZW5zaW9uXCIpO1xuICBpbnZhcmlhbnQoIXdpdGhSZWYsICd3aXRoUmVmIGlzIHJlbW92ZWQuIFRvIGFjY2VzcyB0aGUgd3JhcHBlZCBpbnN0YW5jZSwgdXNlIGEgcmVmIG9uIHRoZSBjb25uZWN0ZWQgY29tcG9uZW50Jyk7XG4gIHZhciBjdXN0b21TdG9yZVdhcm5pbmdNZXNzYWdlID0gJ1RvIHVzZSBhIGN1c3RvbSBSZWR1eCBzdG9yZSBmb3Igc3BlY2lmaWMgY29tcG9uZW50cywgY3JlYXRlIGEgY3VzdG9tIFJlYWN0IGNvbnRleHQgd2l0aCAnICsgXCJSZWFjdC5jcmVhdGVDb250ZXh0KCksIGFuZCBwYXNzIHRoZSBjb250ZXh0IG9iamVjdCB0byBSZWFjdCBSZWR1eCdzIFByb3ZpZGVyIGFuZCBzcGVjaWZpYyBjb21wb25lbnRzXCIgKyAnIGxpa2U6IDxQcm92aWRlciBjb250ZXh0PXtNeUNvbnRleHR9PjxDb25uZWN0ZWRDb21wb25lbnQgY29udGV4dD17TXlDb250ZXh0fSAvPjwvUHJvdmlkZXI+LiAnICsgJ1lvdSBtYXkgYWxzbyBwYXNzIGEge2NvbnRleHQgOiBNeUNvbnRleHR9IG9wdGlvbiB0byBjb25uZWN0JztcbiAgaW52YXJpYW50KHN0b3JlS2V5ID09PSAnc3RvcmUnLCAnc3RvcmVLZXkgaGFzIGJlZW4gcmVtb3ZlZCBhbmQgZG9lcyBub3QgZG8gYW55dGhpbmcuICcgKyBjdXN0b21TdG9yZVdhcm5pbmdNZXNzYWdlKTtcbiAgdmFyIENvbnRleHQgPSBjb250ZXh0O1xuICByZXR1cm4gZnVuY3Rpb24gd3JhcFdpdGhDb25uZWN0KFdyYXBwZWRDb21wb25lbnQpIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaW52YXJpYW50KGlzVmFsaWRFbGVtZW50VHlwZShXcmFwcGVkQ29tcG9uZW50KSwgXCJZb3UgbXVzdCBwYXNzIGEgY29tcG9uZW50IHRvIHRoZSBmdW5jdGlvbiByZXR1cm5lZCBieSBcIiArIChtZXRob2ROYW1lICsgXCIuIEluc3RlYWQgcmVjZWl2ZWQgXCIgKyBzdHJpbmdpZnlDb21wb25lbnQoV3JhcHBlZENvbXBvbmVudCkpKTtcbiAgICB9XG5cbiAgICB2YXIgd3JhcHBlZENvbXBvbmVudE5hbWUgPSBXcmFwcGVkQ29tcG9uZW50LmRpc3BsYXlOYW1lIHx8IFdyYXBwZWRDb21wb25lbnQubmFtZSB8fCAnQ29tcG9uZW50JztcbiAgICB2YXIgZGlzcGxheU5hbWUgPSBnZXREaXNwbGF5TmFtZSh3cmFwcGVkQ29tcG9uZW50TmFtZSk7XG5cbiAgICB2YXIgc2VsZWN0b3JGYWN0b3J5T3B0aW9ucyA9IF9leHRlbmRzKHt9LCBjb25uZWN0T3B0aW9ucywge1xuICAgICAgZ2V0RGlzcGxheU5hbWU6IGdldERpc3BsYXlOYW1lLFxuICAgICAgbWV0aG9kTmFtZTogbWV0aG9kTmFtZSxcbiAgICAgIHJlbmRlckNvdW50UHJvcDogcmVuZGVyQ291bnRQcm9wLFxuICAgICAgc2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzOiBzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXMsXG4gICAgICBzdG9yZUtleTogc3RvcmVLZXksXG4gICAgICBkaXNwbGF5TmFtZTogZGlzcGxheU5hbWUsXG4gICAgICB3cmFwcGVkQ29tcG9uZW50TmFtZTogd3JhcHBlZENvbXBvbmVudE5hbWUsXG4gICAgICBXcmFwcGVkQ29tcG9uZW50OiBXcmFwcGVkQ29tcG9uZW50XG4gICAgfSk7XG5cbiAgICB2YXIgcHVyZSA9IGNvbm5lY3RPcHRpb25zLnB1cmU7XG5cbiAgICBmdW5jdGlvbiBjcmVhdGVDaGlsZFNlbGVjdG9yKHN0b3JlKSB7XG4gICAgICByZXR1cm4gc2VsZWN0b3JGYWN0b3J5KHN0b3JlLmRpc3BhdGNoLCBzZWxlY3RvckZhY3RvcnlPcHRpb25zKTtcbiAgICB9IC8vIElmIHdlIGFyZW4ndCBydW5uaW5nIGluIFwicHVyZVwiIG1vZGUsIHdlIGRvbid0IHdhbnQgdG8gbWVtb2l6ZSB2YWx1ZXMuXG4gICAgLy8gVG8gYXZvaWQgY29uZGl0aW9uYWxseSBjYWxsaW5nIGhvb2tzLCB3ZSBmYWxsIGJhY2sgdG8gYSB0aW55IHdyYXBwZXJcbiAgICAvLyB0aGF0IGp1c3QgZXhlY3V0ZXMgdGhlIGdpdmVuIGNhbGxiYWNrIGltbWVkaWF0ZWx5LlxuXG5cbiAgICB2YXIgdXNlUHVyZU9ubHlNZW1vID0gcHVyZSA/IHVzZU1lbW8gOiBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICAgIHJldHVybiBjYWxsYmFjaygpO1xuICAgIH07XG5cbiAgICBmdW5jdGlvbiBDb25uZWN0RnVuY3Rpb24ocHJvcHMpIHtcbiAgICAgIHZhciBfdXNlTWVtbyA9IHVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgICAgICAvLyBEaXN0aW5ndWlzaCBiZXR3ZWVuIGFjdHVhbCBcImRhdGFcIiBwcm9wcyB0aGF0IHdlcmUgcGFzc2VkIHRvIHRoZSB3cmFwcGVyIGNvbXBvbmVudCxcbiAgICAgICAgLy8gYW5kIHZhbHVlcyBuZWVkZWQgdG8gY29udHJvbCBiZWhhdmlvciAoZm9yd2FyZGVkIHJlZnMsIGFsdGVybmF0ZSBjb250ZXh0IGluc3RhbmNlcykuXG4gICAgICAgIC8vIFRvIG1haW50YWluIHRoZSB3cmFwcGVyUHJvcHMgb2JqZWN0IHJlZmVyZW5jZSwgbWVtb2l6ZSB0aGlzIGRlc3RydWN0dXJpbmcuXG4gICAgICAgIHZhciBmb3J3YXJkZWRSZWYgPSBwcm9wcy5mb3J3YXJkZWRSZWYsXG4gICAgICAgICAgICB3cmFwcGVyUHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgW1wiZm9yd2FyZGVkUmVmXCJdKTtcblxuICAgICAgICByZXR1cm4gW3Byb3BzLmNvbnRleHQsIGZvcndhcmRlZFJlZiwgd3JhcHBlclByb3BzXTtcbiAgICAgIH0sIFtwcm9wc10pLFxuICAgICAgICAgIHByb3BzQ29udGV4dCA9IF91c2VNZW1vWzBdLFxuICAgICAgICAgIGZvcndhcmRlZFJlZiA9IF91c2VNZW1vWzFdLFxuICAgICAgICAgIHdyYXBwZXJQcm9wcyA9IF91c2VNZW1vWzJdO1xuXG4gICAgICB2YXIgQ29udGV4dFRvVXNlID0gdXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vIFVzZXJzIG1heSBvcHRpb25hbGx5IHBhc3MgaW4gYSBjdXN0b20gY29udGV4dCBpbnN0YW5jZSB0byB1c2UgaW5zdGVhZCBvZiBvdXIgUmVhY3RSZWR1eENvbnRleHQuXG4gICAgICAgIC8vIE1lbW9pemUgdGhlIGNoZWNrIHRoYXQgZGV0ZXJtaW5lcyB3aGljaCBjb250ZXh0IGluc3RhbmNlIHdlIHNob3VsZCB1c2UuXG4gICAgICAgIHJldHVybiBwcm9wc0NvbnRleHQgJiYgcHJvcHNDb250ZXh0LkNvbnN1bWVyICYmIGlzQ29udGV4dENvbnN1bWVyKFJlYWN0LmNyZWF0ZUVsZW1lbnQocHJvcHNDb250ZXh0LkNvbnN1bWVyLCBudWxsKSkgPyBwcm9wc0NvbnRleHQgOiBDb250ZXh0O1xuICAgICAgfSwgW3Byb3BzQ29udGV4dCwgQ29udGV4dF0pOyAvLyBSZXRyaWV2ZSB0aGUgc3RvcmUgYW5kIGFuY2VzdG9yIHN1YnNjcmlwdGlvbiB2aWEgY29udGV4dCwgaWYgYXZhaWxhYmxlXG5cbiAgICAgIHZhciBjb250ZXh0VmFsdWUgPSB1c2VDb250ZXh0KENvbnRleHRUb1VzZSk7IC8vIFRoZSBzdG9yZSBfbXVzdF8gZXhpc3QgYXMgZWl0aGVyIGEgcHJvcCBvciBpbiBjb250ZXh0XG5cbiAgICAgIHZhciBkaWRTdG9yZUNvbWVGcm9tUHJvcHMgPSBCb29sZWFuKHByb3BzLnN0b3JlKTtcbiAgICAgIHZhciBkaWRTdG9yZUNvbWVGcm9tQ29udGV4dCA9IEJvb2xlYW4oY29udGV4dFZhbHVlKSAmJiBCb29sZWFuKGNvbnRleHRWYWx1ZS5zdG9yZSk7XG4gICAgICBpbnZhcmlhbnQoZGlkU3RvcmVDb21lRnJvbVByb3BzIHx8IGRpZFN0b3JlQ29tZUZyb21Db250ZXh0LCBcIkNvdWxkIG5vdCBmaW5kIFxcXCJzdG9yZVxcXCIgaW4gdGhlIGNvbnRleHQgb2YgXCIgKyAoXCJcXFwiXCIgKyBkaXNwbGF5TmFtZSArIFwiXFxcIi4gRWl0aGVyIHdyYXAgdGhlIHJvb3QgY29tcG9uZW50IGluIGEgPFByb3ZpZGVyPiwgXCIpICsgXCJvciBwYXNzIGEgY3VzdG9tIFJlYWN0IGNvbnRleHQgcHJvdmlkZXIgdG8gPFByb3ZpZGVyPiBhbmQgdGhlIGNvcnJlc3BvbmRpbmcgXCIgKyAoXCJSZWFjdCBjb250ZXh0IGNvbnN1bWVyIHRvIFwiICsgZGlzcGxheU5hbWUgKyBcIiBpbiBjb25uZWN0IG9wdGlvbnMuXCIpKTtcbiAgICAgIHZhciBzdG9yZSA9IHByb3BzLnN0b3JlIHx8IGNvbnRleHRWYWx1ZS5zdG9yZTtcbiAgICAgIHZhciBjaGlsZFByb3BzU2VsZWN0b3IgPSB1c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy8gVGhlIGNoaWxkIHByb3BzIHNlbGVjdG9yIG5lZWRzIHRoZSBzdG9yZSByZWZlcmVuY2UgYXMgYW4gaW5wdXQuXG4gICAgICAgIC8vIFJlLWNyZWF0ZSB0aGlzIHNlbGVjdG9yIHdoZW5ldmVyIHRoZSBzdG9yZSBjaGFuZ2VzLlxuICAgICAgICByZXR1cm4gY3JlYXRlQ2hpbGRTZWxlY3RvcihzdG9yZSk7XG4gICAgICB9LCBbc3RvcmVdKTtcblxuICAgICAgdmFyIF91c2VNZW1vMiA9IHVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoIXNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlcykgcmV0dXJuIE5PX1NVQlNDUklQVElPTl9BUlJBWTsgLy8gVGhpcyBTdWJzY3JpcHRpb24ncyBzb3VyY2Ugc2hvdWxkIG1hdGNoIHdoZXJlIHN0b3JlIGNhbWUgZnJvbTogcHJvcHMgdnMuIGNvbnRleHQuIEEgY29tcG9uZW50XG4gICAgICAgIC8vIGNvbm5lY3RlZCB0byB0aGUgc3RvcmUgdmlhIHByb3BzIHNob3VsZG4ndCB1c2Ugc3Vic2NyaXB0aW9uIGZyb20gY29udGV4dCwgb3IgdmljZSB2ZXJzYS5cblxuICAgICAgICB2YXIgc3Vic2NyaXB0aW9uID0gbmV3IFN1YnNjcmlwdGlvbihzdG9yZSwgZGlkU3RvcmVDb21lRnJvbVByb3BzID8gbnVsbCA6IGNvbnRleHRWYWx1ZS5zdWJzY3JpcHRpb24pOyAvLyBgbm90aWZ5TmVzdGVkU3Vic2AgaXMgZHVwbGljYXRlZCB0byBoYW5kbGUgdGhlIGNhc2Ugd2hlcmUgdGhlIGNvbXBvbmVudCBpcyB1bm1vdW50ZWQgaW5cbiAgICAgICAgLy8gdGhlIG1pZGRsZSBvZiB0aGUgbm90aWZpY2F0aW9uIGxvb3AsIHdoZXJlIGBzdWJzY3JpcHRpb25gIHdpbGwgdGhlbiBiZSBudWxsLiBUaGlzIGNhblxuICAgICAgICAvLyBwcm9iYWJseSBiZSBhdm9pZGVkIGlmIFN1YnNjcmlwdGlvbidzIGxpc3RlbmVycyBsb2dpYyBpcyBjaGFuZ2VkIHRvIG5vdCBjYWxsIGxpc3RlbmVyc1xuICAgICAgICAvLyB0aGF0IGhhdmUgYmVlbiB1bnN1YnNjcmliZWQgaW4gdGhlICBtaWRkbGUgb2YgdGhlIG5vdGlmaWNhdGlvbiBsb29wLlxuXG4gICAgICAgIHZhciBub3RpZnlOZXN0ZWRTdWJzID0gc3Vic2NyaXB0aW9uLm5vdGlmeU5lc3RlZFN1YnMuYmluZChzdWJzY3JpcHRpb24pO1xuICAgICAgICByZXR1cm4gW3N1YnNjcmlwdGlvbiwgbm90aWZ5TmVzdGVkU3Vic107XG4gICAgICB9LCBbc3RvcmUsIGRpZFN0b3JlQ29tZUZyb21Qcm9wcywgY29udGV4dFZhbHVlXSksXG4gICAgICAgICAgc3Vic2NyaXB0aW9uID0gX3VzZU1lbW8yWzBdLFxuICAgICAgICAgIG5vdGlmeU5lc3RlZFN1YnMgPSBfdXNlTWVtbzJbMV07IC8vIERldGVybWluZSB3aGF0IHtzdG9yZSwgc3Vic2NyaXB0aW9ufSB2YWx1ZSBzaG91bGQgYmUgcHV0IGludG8gbmVzdGVkIGNvbnRleHQsIGlmIG5lY2Vzc2FyeSxcbiAgICAgIC8vIGFuZCBtZW1vaXplIHRoYXQgdmFsdWUgdG8gYXZvaWQgdW5uZWNlc3NhcnkgY29udGV4dCB1cGRhdGVzLlxuXG5cbiAgICAgIHZhciBvdmVycmlkZGVuQ29udGV4dFZhbHVlID0gdXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChkaWRTdG9yZUNvbWVGcm9tUHJvcHMpIHtcbiAgICAgICAgICAvLyBUaGlzIGNvbXBvbmVudCBpcyBkaXJlY3RseSBzdWJzY3JpYmVkIHRvIGEgc3RvcmUgZnJvbSBwcm9wcy5cbiAgICAgICAgICAvLyBXZSBkb24ndCB3YW50IGRlc2NlbmRhbnRzIHJlYWRpbmcgZnJvbSB0aGlzIHN0b3JlIC0gcGFzcyBkb3duIHdoYXRldmVyXG4gICAgICAgICAgLy8gdGhlIGV4aXN0aW5nIGNvbnRleHQgdmFsdWUgaXMgZnJvbSB0aGUgbmVhcmVzdCBjb25uZWN0ZWQgYW5jZXN0b3IuXG4gICAgICAgICAgcmV0dXJuIGNvbnRleHRWYWx1ZTtcbiAgICAgICAgfSAvLyBPdGhlcndpc2UsIHB1dCB0aGlzIGNvbXBvbmVudCdzIHN1YnNjcmlwdGlvbiBpbnN0YW5jZSBpbnRvIGNvbnRleHQsIHNvIHRoYXRcbiAgICAgICAgLy8gY29ubmVjdGVkIGRlc2NlbmRhbnRzIHdvbid0IHVwZGF0ZSB1bnRpbCBhZnRlciB0aGlzIGNvbXBvbmVudCBpcyBkb25lXG5cblxuICAgICAgICByZXR1cm4gX2V4dGVuZHMoe30sIGNvbnRleHRWYWx1ZSwge1xuICAgICAgICAgIHN1YnNjcmlwdGlvbjogc3Vic2NyaXB0aW9uXG4gICAgICAgIH0pO1xuICAgICAgfSwgW2RpZFN0b3JlQ29tZUZyb21Qcm9wcywgY29udGV4dFZhbHVlLCBzdWJzY3JpcHRpb25dKTsgLy8gV2UgbmVlZCB0byBmb3JjZSB0aGlzIHdyYXBwZXIgY29tcG9uZW50IHRvIHJlLXJlbmRlciB3aGVuZXZlciBhIFJlZHV4IHN0b3JlIHVwZGF0ZVxuICAgICAgLy8gY2F1c2VzIGEgY2hhbmdlIHRvIHRoZSBjYWxjdWxhdGVkIGNoaWxkIGNvbXBvbmVudCBwcm9wcyAob3Igd2UgY2F1Z2h0IGFuIGVycm9yIGluIG1hcFN0YXRlKVxuXG4gICAgICB2YXIgX3VzZVJlZHVjZXIgPSB1c2VSZWR1Y2VyKHN0b3JlU3RhdGVVcGRhdGVzUmVkdWNlciwgRU1QVFlfQVJSQVksIGluaXRTdGF0ZVVwZGF0ZXMpLFxuICAgICAgICAgIF91c2VSZWR1Y2VyJCA9IF91c2VSZWR1Y2VyWzBdLFxuICAgICAgICAgIHByZXZpb3VzU3RhdGVVcGRhdGVSZXN1bHQgPSBfdXNlUmVkdWNlciRbMF0sXG4gICAgICAgICAgZm9yY2VDb21wb25lbnRVcGRhdGVEaXNwYXRjaCA9IF91c2VSZWR1Y2VyWzFdOyAvLyBQcm9wYWdhdGUgYW55IG1hcFN0YXRlL21hcERpc3BhdGNoIGVycm9ycyB1cHdhcmRzXG5cblxuICAgICAgaWYgKHByZXZpb3VzU3RhdGVVcGRhdGVSZXN1bHQgJiYgcHJldmlvdXNTdGF0ZVVwZGF0ZVJlc3VsdC5lcnJvcikge1xuICAgICAgICB0aHJvdyBwcmV2aW91c1N0YXRlVXBkYXRlUmVzdWx0LmVycm9yO1xuICAgICAgfSAvLyBTZXQgdXAgcmVmcyB0byBjb29yZGluYXRlIHZhbHVlcyBiZXR3ZWVuIHRoZSBzdWJzY3JpcHRpb24gZWZmZWN0IGFuZCB0aGUgcmVuZGVyIGxvZ2ljXG5cblxuICAgICAgdmFyIGxhc3RDaGlsZFByb3BzID0gdXNlUmVmKCk7XG4gICAgICB2YXIgbGFzdFdyYXBwZXJQcm9wcyA9IHVzZVJlZih3cmFwcGVyUHJvcHMpO1xuICAgICAgdmFyIGNoaWxkUHJvcHNGcm9tU3RvcmVVcGRhdGUgPSB1c2VSZWYoKTtcbiAgICAgIHZhciByZW5kZXJJc1NjaGVkdWxlZCA9IHVzZVJlZihmYWxzZSk7XG4gICAgICB2YXIgYWN0dWFsQ2hpbGRQcm9wcyA9IHVzZVB1cmVPbmx5TWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vIFRyaWNreSBsb2dpYyBoZXJlOlxuICAgICAgICAvLyAtIFRoaXMgcmVuZGVyIG1heSBoYXZlIGJlZW4gdHJpZ2dlcmVkIGJ5IGEgUmVkdXggc3RvcmUgdXBkYXRlIHRoYXQgcHJvZHVjZWQgbmV3IGNoaWxkIHByb3BzXG4gICAgICAgIC8vIC0gSG93ZXZlciwgd2UgbWF5IGhhdmUgZ290dGVuIG5ldyB3cmFwcGVyIHByb3BzIGFmdGVyIHRoYXRcbiAgICAgICAgLy8gSWYgd2UgaGF2ZSBuZXcgY2hpbGQgcHJvcHMsIGFuZCB0aGUgc2FtZSB3cmFwcGVyIHByb3BzLCB3ZSBrbm93IHdlIHNob3VsZCB1c2UgdGhlIG5ldyBjaGlsZCBwcm9wcyBhcy1pcy5cbiAgICAgICAgLy8gQnV0LCBpZiB3ZSBoYXZlIG5ldyB3cmFwcGVyIHByb3BzLCB0aG9zZSBtaWdodCBjaGFuZ2UgdGhlIGNoaWxkIHByb3BzLCBzbyB3ZSBoYXZlIHRvIHJlY2FsY3VsYXRlIHRoaW5ncy5cbiAgICAgICAgLy8gU28sIHdlJ2xsIHVzZSB0aGUgY2hpbGQgcHJvcHMgZnJvbSBzdG9yZSB1cGRhdGUgb25seSBpZiB0aGUgd3JhcHBlciBwcm9wcyBhcmUgdGhlIHNhbWUgYXMgbGFzdCB0aW1lLlxuICAgICAgICBpZiAoY2hpbGRQcm9wc0Zyb21TdG9yZVVwZGF0ZS5jdXJyZW50ICYmIHdyYXBwZXJQcm9wcyA9PT0gbGFzdFdyYXBwZXJQcm9wcy5jdXJyZW50KSB7XG4gICAgICAgICAgcmV0dXJuIGNoaWxkUHJvcHNGcm9tU3RvcmVVcGRhdGUuY3VycmVudDtcbiAgICAgICAgfSAvLyBUT0RPIFdlJ3JlIHJlYWRpbmcgdGhlIHN0b3JlIGRpcmVjdGx5IGluIHJlbmRlcigpIGhlcmUuIEJhZCBpZGVhP1xuICAgICAgICAvLyBUaGlzIHdpbGwgbGlrZWx5IGNhdXNlIEJhZCBUaGluZ3MgKFRNKSB0byBoYXBwZW4gaW4gQ29uY3VycmVudCBNb2RlLlxuICAgICAgICAvLyBOb3RlIHRoYXQgd2UgZG8gdGhpcyBiZWNhdXNlIG9uIHJlbmRlcnMgX25vdF8gY2F1c2VkIGJ5IHN0b3JlIHVwZGF0ZXMsIHdlIG5lZWQgdGhlIGxhdGVzdCBzdG9yZSBzdGF0ZVxuICAgICAgICAvLyB0byBkZXRlcm1pbmUgd2hhdCB0aGUgY2hpbGQgcHJvcHMgc2hvdWxkIGJlLlxuXG5cbiAgICAgICAgcmV0dXJuIGNoaWxkUHJvcHNTZWxlY3RvcihzdG9yZS5nZXRTdGF0ZSgpLCB3cmFwcGVyUHJvcHMpO1xuICAgICAgfSwgW3N0b3JlLCBwcmV2aW91c1N0YXRlVXBkYXRlUmVzdWx0LCB3cmFwcGVyUHJvcHNdKTsgLy8gV2UgbmVlZCB0aGlzIHRvIGV4ZWN1dGUgc3luY2hyb25vdXNseSBldmVyeSB0aW1lIHdlIHJlLXJlbmRlci4gSG93ZXZlciwgUmVhY3Qgd2FybnNcbiAgICAgIC8vIGFib3V0IHVzZUxheW91dEVmZmVjdCBpbiBTU1IsIHNvIHdlIHRyeSB0byBkZXRlY3QgZW52aXJvbm1lbnQgYW5kIGZhbGwgYmFjayB0b1xuICAgICAgLy8ganVzdCB1c2VFZmZlY3QgaW5zdGVhZCB0byBhdm9pZCB0aGUgd2FybmluZywgc2luY2UgbmVpdGhlciB3aWxsIHJ1biBhbnl3YXkuXG5cbiAgICAgIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgICAgICAvLyBXZSB3YW50IHRvIGNhcHR1cmUgdGhlIHdyYXBwZXIgcHJvcHMgYW5kIGNoaWxkIHByb3BzIHdlIHVzZWQgZm9yIGxhdGVyIGNvbXBhcmlzb25zXG4gICAgICAgIGxhc3RXcmFwcGVyUHJvcHMuY3VycmVudCA9IHdyYXBwZXJQcm9wcztcbiAgICAgICAgbGFzdENoaWxkUHJvcHMuY3VycmVudCA9IGFjdHVhbENoaWxkUHJvcHM7XG4gICAgICAgIHJlbmRlcklzU2NoZWR1bGVkLmN1cnJlbnQgPSBmYWxzZTsgLy8gSWYgdGhlIHJlbmRlciB3YXMgZnJvbSBhIHN0b3JlIHVwZGF0ZSwgY2xlYXIgb3V0IHRoYXQgcmVmZXJlbmNlIGFuZCBjYXNjYWRlIHRoZSBzdWJzY3JpYmVyIHVwZGF0ZVxuXG4gICAgICAgIGlmIChjaGlsZFByb3BzRnJvbVN0b3JlVXBkYXRlLmN1cnJlbnQpIHtcbiAgICAgICAgICBjaGlsZFByb3BzRnJvbVN0b3JlVXBkYXRlLmN1cnJlbnQgPSBudWxsO1xuICAgICAgICAgIG5vdGlmeU5lc3RlZFN1YnMoKTtcbiAgICAgICAgfVxuICAgICAgfSk7IC8vIE91ciByZS1zdWJzY3JpYmUgbG9naWMgb25seSBydW5zIHdoZW4gdGhlIHN0b3JlL3N1YnNjcmlwdGlvbiBzZXR1cCBjaGFuZ2VzXG5cbiAgICAgIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgICAgICAvLyBJZiB3ZSdyZSBub3Qgc3Vic2NyaWJlZCB0byB0aGUgc3RvcmUsIG5vdGhpbmcgdG8gZG8gaGVyZVxuICAgICAgICBpZiAoIXNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlcykgcmV0dXJuOyAvLyBDYXB0dXJlIHZhbHVlcyBmb3IgY2hlY2tpbmcgaWYgYW5kIHdoZW4gdGhpcyBjb21wb25lbnQgdW5tb3VudHNcblxuICAgICAgICB2YXIgZGlkVW5zdWJzY3JpYmUgPSBmYWxzZTtcbiAgICAgICAgdmFyIGxhc3RUaHJvd25FcnJvciA9IG51bGw7IC8vIFdlJ2xsIHJ1biB0aGlzIGNhbGxiYWNrIGV2ZXJ5IHRpbWUgYSBzdG9yZSBzdWJzY3JpcHRpb24gdXBkYXRlIHByb3BhZ2F0ZXMgdG8gdGhpcyBjb21wb25lbnRcblxuICAgICAgICB2YXIgY2hlY2tGb3JVcGRhdGVzID0gZnVuY3Rpb24gY2hlY2tGb3JVcGRhdGVzKCkge1xuICAgICAgICAgIGlmIChkaWRVbnN1YnNjcmliZSkge1xuICAgICAgICAgICAgLy8gRG9uJ3QgcnVuIHN0YWxlIGxpc3RlbmVycy5cbiAgICAgICAgICAgIC8vIFJlZHV4IGRvZXNuJ3QgZ3VhcmFudGVlIHVuc3Vic2NyaXB0aW9ucyBoYXBwZW4gdW50aWwgbmV4dCBkaXNwYXRjaC5cbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB2YXIgbGF0ZXN0U3RvcmVTdGF0ZSA9IHN0b3JlLmdldFN0YXRlKCk7XG4gICAgICAgICAgdmFyIG5ld0NoaWxkUHJvcHMsIGVycm9yO1xuXG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIEFjdHVhbGx5IHJ1biB0aGUgc2VsZWN0b3Igd2l0aCB0aGUgbW9zdCByZWNlbnQgc3RvcmUgc3RhdGUgYW5kIHdyYXBwZXIgcHJvcHNcbiAgICAgICAgICAgIC8vIHRvIGRldGVybWluZSB3aGF0IHRoZSBjaGlsZCBwcm9wcyBzaG91bGQgYmVcbiAgICAgICAgICAgIG5ld0NoaWxkUHJvcHMgPSBjaGlsZFByb3BzU2VsZWN0b3IobGF0ZXN0U3RvcmVTdGF0ZSwgbGFzdFdyYXBwZXJQcm9wcy5jdXJyZW50KTtcbiAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICBlcnJvciA9IGU7XG4gICAgICAgICAgICBsYXN0VGhyb3duRXJyb3IgPSBlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICghZXJyb3IpIHtcbiAgICAgICAgICAgIGxhc3RUaHJvd25FcnJvciA9IG51bGw7XG4gICAgICAgICAgfSAvLyBJZiB0aGUgY2hpbGQgcHJvcHMgaGF2ZW4ndCBjaGFuZ2VkLCBub3RoaW5nIHRvIGRvIGhlcmUgLSBjYXNjYWRlIHRoZSBzdWJzY3JpcHRpb24gdXBkYXRlXG5cblxuICAgICAgICAgIGlmIChuZXdDaGlsZFByb3BzID09PSBsYXN0Q2hpbGRQcm9wcy5jdXJyZW50KSB7XG4gICAgICAgICAgICBpZiAoIXJlbmRlcklzU2NoZWR1bGVkLmN1cnJlbnQpIHtcbiAgICAgICAgICAgICAgbm90aWZ5TmVzdGVkU3VicygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBTYXZlIHJlZmVyZW5jZXMgdG8gdGhlIG5ldyBjaGlsZCBwcm9wcy4gIE5vdGUgdGhhdCB3ZSB0cmFjayB0aGUgXCJjaGlsZCBwcm9wcyBmcm9tIHN0b3JlIHVwZGF0ZVwiXG4gICAgICAgICAgICAvLyBhcyBhIHJlZiBpbnN0ZWFkIG9mIGEgdXNlU3RhdGUvdXNlUmVkdWNlciBiZWNhdXNlIHdlIG5lZWQgYSB3YXkgdG8gZGV0ZXJtaW5lIGlmIHRoYXQgdmFsdWUgaGFzXG4gICAgICAgICAgICAvLyBiZWVuIHByb2Nlc3NlZC4gIElmIHRoaXMgd2VudCBpbnRvIHVzZVN0YXRlL3VzZVJlZHVjZXIsIHdlIGNvdWxkbid0IGNsZWFyIG91dCB0aGUgdmFsdWUgd2l0aG91dFxuICAgICAgICAgICAgLy8gZm9yY2luZyBhbm90aGVyIHJlLXJlbmRlciwgd2hpY2ggd2UgZG9uJ3Qgd2FudC5cbiAgICAgICAgICAgIGxhc3RDaGlsZFByb3BzLmN1cnJlbnQgPSBuZXdDaGlsZFByb3BzO1xuICAgICAgICAgICAgY2hpbGRQcm9wc0Zyb21TdG9yZVVwZGF0ZS5jdXJyZW50ID0gbmV3Q2hpbGRQcm9wcztcbiAgICAgICAgICAgIHJlbmRlcklzU2NoZWR1bGVkLmN1cnJlbnQgPSB0cnVlOyAvLyBJZiB0aGUgY2hpbGQgcHJvcHMgX2RpZF8gY2hhbmdlIChvciB3ZSBjYXVnaHQgYW4gZXJyb3IpLCB0aGlzIHdyYXBwZXIgY29tcG9uZW50IG5lZWRzIHRvIHJlLXJlbmRlclxuXG4gICAgICAgICAgICBmb3JjZUNvbXBvbmVudFVwZGF0ZURpc3BhdGNoKHtcbiAgICAgICAgICAgICAgdHlwZTogJ1NUT1JFX1VQREFURUQnLFxuICAgICAgICAgICAgICBwYXlsb2FkOiB7XG4gICAgICAgICAgICAgICAgbGF0ZXN0U3RvcmVTdGF0ZTogbGF0ZXN0U3RvcmVTdGF0ZSxcbiAgICAgICAgICAgICAgICBlcnJvcjogZXJyb3JcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9OyAvLyBBY3R1YWxseSBzdWJzY3JpYmUgdG8gdGhlIG5lYXJlc3QgY29ubmVjdGVkIGFuY2VzdG9yIChvciBzdG9yZSlcblxuXG4gICAgICAgIHN1YnNjcmlwdGlvbi5vblN0YXRlQ2hhbmdlID0gY2hlY2tGb3JVcGRhdGVzO1xuICAgICAgICBzdWJzY3JpcHRpb24udHJ5U3Vic2NyaWJlKCk7IC8vIFB1bGwgZGF0YSBmcm9tIHRoZSBzdG9yZSBhZnRlciBmaXJzdCByZW5kZXIgaW4gY2FzZSB0aGUgc3RvcmUgaGFzXG4gICAgICAgIC8vIGNoYW5nZWQgc2luY2Ugd2UgYmVnYW4uXG5cbiAgICAgICAgY2hlY2tGb3JVcGRhdGVzKCk7XG5cbiAgICAgICAgdmFyIHVuc3Vic2NyaWJlV3JhcHBlciA9IGZ1bmN0aW9uIHVuc3Vic2NyaWJlV3JhcHBlcigpIHtcbiAgICAgICAgICBkaWRVbnN1YnNjcmliZSA9IHRydWU7XG4gICAgICAgICAgc3Vic2NyaXB0aW9uLnRyeVVuc3Vic2NyaWJlKCk7XG5cbiAgICAgICAgICBpZiAobGFzdFRocm93bkVycm9yKSB7XG4gICAgICAgICAgICAvLyBJdCdzIHBvc3NpYmxlIHRoYXQgd2UgY2F1Z2h0IGFuIGVycm9yIGR1ZSB0byBhIGJhZCBtYXBTdGF0ZSBmdW5jdGlvbiwgYnV0IHRoZVxuICAgICAgICAgICAgLy8gcGFyZW50IHJlLXJlbmRlcmVkIHdpdGhvdXQgdGhpcyBjb21wb25lbnQgYW5kIHdlJ3JlIGFib3V0IHRvIHVubW91bnQuXG4gICAgICAgICAgICAvLyBUaGlzIHNob3VsZG4ndCBoYXBwZW4gYXMgbG9uZyBhcyB3ZSBkbyB0b3AtZG93biBzdWJzY3JpcHRpb25zIGNvcnJlY3RseSwgYnV0XG4gICAgICAgICAgICAvLyBpZiB3ZSBldmVyIGRvIHRob3NlIHdyb25nLCB0aGlzIHRocm93IHdpbGwgc3VyZmFjZSB0aGUgZXJyb3IgaW4gb3VyIHRlc3RzLlxuICAgICAgICAgICAgLy8gSW4gdGhhdCBjYXNlLCB0aHJvdyB0aGUgZXJyb3IgZnJvbSBoZXJlIHNvIGl0IGRvZXNuJ3QgZ2V0IGxvc3QuXG4gICAgICAgICAgICB0aHJvdyBsYXN0VGhyb3duRXJyb3I7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiB1bnN1YnNjcmliZVdyYXBwZXI7XG4gICAgICB9LCBbc3RvcmUsIHN1YnNjcmlwdGlvbiwgY2hpbGRQcm9wc1NlbGVjdG9yXSk7IC8vIE5vdyB0aGF0IGFsbCB0aGF0J3MgZG9uZSwgd2UgY2FuIGZpbmFsbHkgdHJ5IHRvIGFjdHVhbGx5IHJlbmRlciB0aGUgY2hpbGQgY29tcG9uZW50LlxuICAgICAgLy8gV2UgbWVtb2l6ZSB0aGUgZWxlbWVudHMgZm9yIHRoZSByZW5kZXJlZCBjaGlsZCBjb21wb25lbnQgYXMgYW4gb3B0aW1pemF0aW9uLlxuXG4gICAgICB2YXIgcmVuZGVyZWRXcmFwcGVkQ29tcG9uZW50ID0gdXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFdyYXBwZWRDb21wb25lbnQsIF9leHRlbmRzKHt9LCBhY3R1YWxDaGlsZFByb3BzLCB7XG4gICAgICAgICAgcmVmOiBmb3J3YXJkZWRSZWZcbiAgICAgICAgfSkpO1xuICAgICAgfSwgW2ZvcndhcmRlZFJlZiwgV3JhcHBlZENvbXBvbmVudCwgYWN0dWFsQ2hpbGRQcm9wc10pOyAvLyBJZiBSZWFjdCBzZWVzIHRoZSBleGFjdCBzYW1lIGVsZW1lbnQgcmVmZXJlbmNlIGFzIGxhc3QgdGltZSwgaXQgYmFpbHMgb3V0IG9mIHJlLXJlbmRlcmluZ1xuICAgICAgLy8gdGhhdCBjaGlsZCwgc2FtZSBhcyBpZiBpdCB3YXMgd3JhcHBlZCBpbiBSZWFjdC5tZW1vKCkgb3IgcmV0dXJuZWQgZmFsc2UgZnJvbSBzaG91bGRDb21wb25lbnRVcGRhdGUuXG5cbiAgICAgIHZhciByZW5kZXJlZENoaWxkID0gdXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXMpIHtcbiAgICAgICAgICAvLyBJZiB0aGlzIGNvbXBvbmVudCBpcyBzdWJzY3JpYmVkIHRvIHN0b3JlIHVwZGF0ZXMsIHdlIG5lZWQgdG8gcGFzcyBpdHMgb3duXG4gICAgICAgICAgLy8gc3Vic2NyaXB0aW9uIGluc3RhbmNlIGRvd24gdG8gb3VyIGRlc2NlbmRhbnRzLiBUaGF0IG1lYW5zIHJlbmRlcmluZyB0aGUgc2FtZVxuICAgICAgICAgIC8vIENvbnRleHQgaW5zdGFuY2UsIGFuZCBwdXR0aW5nIGEgZGlmZmVyZW50IHZhbHVlIGludG8gdGhlIGNvbnRleHQuXG4gICAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ29udGV4dFRvVXNlLlByb3ZpZGVyLCB7XG4gICAgICAgICAgICB2YWx1ZTogb3ZlcnJpZGRlbkNvbnRleHRWYWx1ZVxuICAgICAgICAgIH0sIHJlbmRlcmVkV3JhcHBlZENvbXBvbmVudCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmVuZGVyZWRXcmFwcGVkQ29tcG9uZW50O1xuICAgICAgfSwgW0NvbnRleHRUb1VzZSwgcmVuZGVyZWRXcmFwcGVkQ29tcG9uZW50LCBvdmVycmlkZGVuQ29udGV4dFZhbHVlXSk7XG4gICAgICByZXR1cm4gcmVuZGVyZWRDaGlsZDtcbiAgICB9IC8vIElmIHdlJ3JlIGluIFwicHVyZVwiIG1vZGUsIGVuc3VyZSBvdXIgd3JhcHBlciBjb21wb25lbnQgb25seSByZS1yZW5kZXJzIHdoZW4gaW5jb21pbmcgcHJvcHMgaGF2ZSBjaGFuZ2VkLlxuXG5cbiAgICB2YXIgQ29ubmVjdCA9IHB1cmUgPyBSZWFjdC5tZW1vKENvbm5lY3RGdW5jdGlvbikgOiBDb25uZWN0RnVuY3Rpb247XG4gICAgQ29ubmVjdC5XcmFwcGVkQ29tcG9uZW50ID0gV3JhcHBlZENvbXBvbmVudDtcbiAgICBDb25uZWN0LmRpc3BsYXlOYW1lID0gZGlzcGxheU5hbWU7XG5cbiAgICBpZiAoZm9yd2FyZFJlZikge1xuICAgICAgdmFyIGZvcndhcmRlZCA9IFJlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gZm9yd2FyZENvbm5lY3RSZWYocHJvcHMsIHJlZikge1xuICAgICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChDb25uZWN0LCBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICAgICAgICBmb3J3YXJkZWRSZWY6IHJlZlxuICAgICAgICB9KSk7XG4gICAgICB9KTtcbiAgICAgIGZvcndhcmRlZC5kaXNwbGF5TmFtZSA9IGRpc3BsYXlOYW1lO1xuICAgICAgZm9yd2FyZGVkLldyYXBwZWRDb21wb25lbnQgPSBXcmFwcGVkQ29tcG9uZW50O1xuICAgICAgcmV0dXJuIGhvaXN0U3RhdGljcyhmb3J3YXJkZWQsIFdyYXBwZWRDb21wb25lbnQpO1xuICAgIH1cblxuICAgIHJldHVybiBob2lzdFN0YXRpY3MoQ29ubmVjdCwgV3JhcHBlZENvbXBvbmVudCk7XG4gIH07XG59IiwidmFyIGhhc093biA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG5cbmZ1bmN0aW9uIGlzKHgsIHkpIHtcbiAgaWYgKHggPT09IHkpIHtcbiAgICByZXR1cm4geCAhPT0gMCB8fCB5ICE9PSAwIHx8IDEgLyB4ID09PSAxIC8geTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4geCAhPT0geCAmJiB5ICE9PSB5O1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHNoYWxsb3dFcXVhbChvYmpBLCBvYmpCKSB7XG4gIGlmIChpcyhvYmpBLCBvYmpCKSkgcmV0dXJuIHRydWU7XG5cbiAgaWYgKHR5cGVvZiBvYmpBICE9PSAnb2JqZWN0JyB8fCBvYmpBID09PSBudWxsIHx8IHR5cGVvZiBvYmpCICE9PSAnb2JqZWN0JyB8fCBvYmpCID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdmFyIGtleXNBID0gT2JqZWN0LmtleXMob2JqQSk7XG4gIHZhciBrZXlzQiA9IE9iamVjdC5rZXlzKG9iakIpO1xuICBpZiAoa2V5c0EubGVuZ3RoICE9PSBrZXlzQi5sZW5ndGgpIHJldHVybiBmYWxzZTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXNBLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKCFoYXNPd24uY2FsbChvYmpCLCBrZXlzQVtpXSkgfHwgIWlzKG9iakFba2V5c0FbaV1dLCBvYmpCW2tleXNBW2ldXSkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn0iLCJpbXBvcnQgdmVyaWZ5UGxhaW5PYmplY3QgZnJvbSAnLi4vdXRpbHMvdmVyaWZ5UGxhaW5PYmplY3QnO1xuZXhwb3J0IGZ1bmN0aW9uIHdyYXBNYXBUb1Byb3BzQ29uc3RhbnQoZ2V0Q29uc3RhbnQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGluaXRDb25zdGFudFNlbGVjdG9yKGRpc3BhdGNoLCBvcHRpb25zKSB7XG4gICAgdmFyIGNvbnN0YW50ID0gZ2V0Q29uc3RhbnQoZGlzcGF0Y2gsIG9wdGlvbnMpO1xuXG4gICAgZnVuY3Rpb24gY29uc3RhbnRTZWxlY3RvcigpIHtcbiAgICAgIHJldHVybiBjb25zdGFudDtcbiAgICB9XG5cbiAgICBjb25zdGFudFNlbGVjdG9yLmRlcGVuZHNPbk93blByb3BzID0gZmFsc2U7XG4gICAgcmV0dXJuIGNvbnN0YW50U2VsZWN0b3I7XG4gIH07XG59IC8vIGRlcGVuZHNPbk93blByb3BzIGlzIHVzZWQgYnkgY3JlYXRlTWFwVG9Qcm9wc1Byb3h5IHRvIGRldGVybWluZSB3aGV0aGVyIHRvIHBhc3MgcHJvcHMgYXMgYXJnc1xuLy8gdG8gdGhlIG1hcFRvUHJvcHMgZnVuY3Rpb24gYmVpbmcgd3JhcHBlZC4gSXQgaXMgYWxzbyB1c2VkIGJ5IG1ha2VQdXJlUHJvcHNTZWxlY3RvciB0byBkZXRlcm1pbmVcbi8vIHdoZXRoZXIgbWFwVG9Qcm9wcyBuZWVkcyB0byBiZSBpbnZva2VkIHdoZW4gcHJvcHMgaGF2ZSBjaGFuZ2VkLlxuLy9cbi8vIEEgbGVuZ3RoIG9mIG9uZSBzaWduYWxzIHRoYXQgbWFwVG9Qcm9wcyBkb2VzIG5vdCBkZXBlbmQgb24gcHJvcHMgZnJvbSB0aGUgcGFyZW50IGNvbXBvbmVudC5cbi8vIEEgbGVuZ3RoIG9mIHplcm8gaXMgYXNzdW1lZCB0byBtZWFuIG1hcFRvUHJvcHMgaXMgZ2V0dGluZyBhcmdzIHZpYSBhcmd1bWVudHMgb3IgLi4uYXJncyBhbmRcbi8vIHRoZXJlZm9yZSBub3QgcmVwb3J0aW5nIGl0cyBsZW5ndGggYWNjdXJhdGVseS4uXG5cbmV4cG9ydCBmdW5jdGlvbiBnZXREZXBlbmRzT25Pd25Qcm9wcyhtYXBUb1Byb3BzKSB7XG4gIHJldHVybiBtYXBUb1Byb3BzLmRlcGVuZHNPbk93blByb3BzICE9PSBudWxsICYmIG1hcFRvUHJvcHMuZGVwZW5kc09uT3duUHJvcHMgIT09IHVuZGVmaW5lZCA/IEJvb2xlYW4obWFwVG9Qcm9wcy5kZXBlbmRzT25Pd25Qcm9wcykgOiBtYXBUb1Byb3BzLmxlbmd0aCAhPT0gMTtcbn0gLy8gVXNlZCBieSB3aGVuTWFwU3RhdGVUb1Byb3BzSXNGdW5jdGlvbiBhbmQgd2hlbk1hcERpc3BhdGNoVG9Qcm9wc0lzRnVuY3Rpb24sXG4vLyB0aGlzIGZ1bmN0aW9uIHdyYXBzIG1hcFRvUHJvcHMgaW4gYSBwcm94eSBmdW5jdGlvbiB3aGljaCBkb2VzIHNldmVyYWwgdGhpbmdzOlxuLy9cbi8vICAqIERldGVjdHMgd2hldGhlciB0aGUgbWFwVG9Qcm9wcyBmdW5jdGlvbiBiZWluZyBjYWxsZWQgZGVwZW5kcyBvbiBwcm9wcywgd2hpY2hcbi8vICAgIGlzIHVzZWQgYnkgc2VsZWN0b3JGYWN0b3J5IHRvIGRlY2lkZSBpZiBpdCBzaG91bGQgcmVpbnZva2Ugb24gcHJvcHMgY2hhbmdlcy5cbi8vXG4vLyAgKiBPbiBmaXJzdCBjYWxsLCBoYW5kbGVzIG1hcFRvUHJvcHMgaWYgcmV0dXJucyBhbm90aGVyIGZ1bmN0aW9uLCBhbmQgdHJlYXRzIHRoYXRcbi8vICAgIG5ldyBmdW5jdGlvbiBhcyB0aGUgdHJ1ZSBtYXBUb1Byb3BzIGZvciBzdWJzZXF1ZW50IGNhbGxzLlxuLy9cbi8vICAqIE9uIGZpcnN0IGNhbGwsIHZlcmlmaWVzIHRoZSBmaXJzdCByZXN1bHQgaXMgYSBwbGFpbiBvYmplY3QsIGluIG9yZGVyIHRvIHdhcm5cbi8vICAgIHRoZSBkZXZlbG9wZXIgdGhhdCB0aGVpciBtYXBUb1Byb3BzIGZ1bmN0aW9uIGlzIG5vdCByZXR1cm5pbmcgYSB2YWxpZCByZXN1bHQuXG4vL1xuXG5leHBvcnQgZnVuY3Rpb24gd3JhcE1hcFRvUHJvcHNGdW5jKG1hcFRvUHJvcHMsIG1ldGhvZE5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGluaXRQcm94eVNlbGVjdG9yKGRpc3BhdGNoLCBfcmVmKSB7XG4gICAgdmFyIGRpc3BsYXlOYW1lID0gX3JlZi5kaXNwbGF5TmFtZTtcblxuICAgIHZhciBwcm94eSA9IGZ1bmN0aW9uIG1hcFRvUHJvcHNQcm94eShzdGF0ZU9yRGlzcGF0Y2gsIG93blByb3BzKSB7XG4gICAgICByZXR1cm4gcHJveHkuZGVwZW5kc09uT3duUHJvcHMgPyBwcm94eS5tYXBUb1Byb3BzKHN0YXRlT3JEaXNwYXRjaCwgb3duUHJvcHMpIDogcHJveHkubWFwVG9Qcm9wcyhzdGF0ZU9yRGlzcGF0Y2gpO1xuICAgIH07IC8vIGFsbG93IGRldGVjdEZhY3RvcnlBbmRWZXJpZnkgdG8gZ2V0IG93blByb3BzXG5cblxuICAgIHByb3h5LmRlcGVuZHNPbk93blByb3BzID0gdHJ1ZTtcblxuICAgIHByb3h5Lm1hcFRvUHJvcHMgPSBmdW5jdGlvbiBkZXRlY3RGYWN0b3J5QW5kVmVyaWZ5KHN0YXRlT3JEaXNwYXRjaCwgb3duUHJvcHMpIHtcbiAgICAgIHByb3h5Lm1hcFRvUHJvcHMgPSBtYXBUb1Byb3BzO1xuICAgICAgcHJveHkuZGVwZW5kc09uT3duUHJvcHMgPSBnZXREZXBlbmRzT25Pd25Qcm9wcyhtYXBUb1Byb3BzKTtcbiAgICAgIHZhciBwcm9wcyA9IHByb3h5KHN0YXRlT3JEaXNwYXRjaCwgb3duUHJvcHMpO1xuXG4gICAgICBpZiAodHlwZW9mIHByb3BzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHByb3h5Lm1hcFRvUHJvcHMgPSBwcm9wcztcbiAgICAgICAgcHJveHkuZGVwZW5kc09uT3duUHJvcHMgPSBnZXREZXBlbmRzT25Pd25Qcm9wcyhwcm9wcyk7XG4gICAgICAgIHByb3BzID0gcHJveHkoc3RhdGVPckRpc3BhdGNoLCBvd25Qcm9wcyk7XG4gICAgICB9XG5cbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB2ZXJpZnlQbGFpbk9iamVjdChwcm9wcywgZGlzcGxheU5hbWUsIG1ldGhvZE5hbWUpO1xuICAgICAgcmV0dXJuIHByb3BzO1xuICAgIH07XG5cbiAgICByZXR1cm4gcHJveHk7XG4gIH07XG59IiwiaW1wb3J0IHsgYmluZEFjdGlvbkNyZWF0b3JzIH0gZnJvbSAncmVkdXgnO1xuaW1wb3J0IHsgd3JhcE1hcFRvUHJvcHNDb25zdGFudCwgd3JhcE1hcFRvUHJvcHNGdW5jIH0gZnJvbSAnLi93cmFwTWFwVG9Qcm9wcyc7XG5leHBvcnQgZnVuY3Rpb24gd2hlbk1hcERpc3BhdGNoVG9Qcm9wc0lzRnVuY3Rpb24obWFwRGlzcGF0Y2hUb1Byb3BzKSB7XG4gIHJldHVybiB0eXBlb2YgbWFwRGlzcGF0Y2hUb1Byb3BzID09PSAnZnVuY3Rpb24nID8gd3JhcE1hcFRvUHJvcHNGdW5jKG1hcERpc3BhdGNoVG9Qcm9wcywgJ21hcERpc3BhdGNoVG9Qcm9wcycpIDogdW5kZWZpbmVkO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHdoZW5NYXBEaXNwYXRjaFRvUHJvcHNJc01pc3NpbmcobWFwRGlzcGF0Y2hUb1Byb3BzKSB7XG4gIHJldHVybiAhbWFwRGlzcGF0Y2hUb1Byb3BzID8gd3JhcE1hcFRvUHJvcHNDb25zdGFudChmdW5jdGlvbiAoZGlzcGF0Y2gpIHtcbiAgICByZXR1cm4ge1xuICAgICAgZGlzcGF0Y2g6IGRpc3BhdGNoXG4gICAgfTtcbiAgfSkgOiB1bmRlZmluZWQ7XG59XG5leHBvcnQgZnVuY3Rpb24gd2hlbk1hcERpc3BhdGNoVG9Qcm9wc0lzT2JqZWN0KG1hcERpc3BhdGNoVG9Qcm9wcykge1xuICByZXR1cm4gbWFwRGlzcGF0Y2hUb1Byb3BzICYmIHR5cGVvZiBtYXBEaXNwYXRjaFRvUHJvcHMgPT09ICdvYmplY3QnID8gd3JhcE1hcFRvUHJvcHNDb25zdGFudChmdW5jdGlvbiAoZGlzcGF0Y2gpIHtcbiAgICByZXR1cm4gYmluZEFjdGlvbkNyZWF0b3JzKG1hcERpc3BhdGNoVG9Qcm9wcywgZGlzcGF0Y2gpO1xuICB9KSA6IHVuZGVmaW5lZDtcbn1cbmV4cG9ydCBkZWZhdWx0IFt3aGVuTWFwRGlzcGF0Y2hUb1Byb3BzSXNGdW5jdGlvbiwgd2hlbk1hcERpc3BhdGNoVG9Qcm9wc0lzTWlzc2luZywgd2hlbk1hcERpc3BhdGNoVG9Qcm9wc0lzT2JqZWN0XTsiLCJpbXBvcnQgeyB3cmFwTWFwVG9Qcm9wc0NvbnN0YW50LCB3cmFwTWFwVG9Qcm9wc0Z1bmMgfSBmcm9tICcuL3dyYXBNYXBUb1Byb3BzJztcbmV4cG9ydCBmdW5jdGlvbiB3aGVuTWFwU3RhdGVUb1Byb3BzSXNGdW5jdGlvbihtYXBTdGF0ZVRvUHJvcHMpIHtcbiAgcmV0dXJuIHR5cGVvZiBtYXBTdGF0ZVRvUHJvcHMgPT09ICdmdW5jdGlvbicgPyB3cmFwTWFwVG9Qcm9wc0Z1bmMobWFwU3RhdGVUb1Byb3BzLCAnbWFwU3RhdGVUb1Byb3BzJykgOiB1bmRlZmluZWQ7XG59XG5leHBvcnQgZnVuY3Rpb24gd2hlbk1hcFN0YXRlVG9Qcm9wc0lzTWlzc2luZyhtYXBTdGF0ZVRvUHJvcHMpIHtcbiAgcmV0dXJuICFtYXBTdGF0ZVRvUHJvcHMgPyB3cmFwTWFwVG9Qcm9wc0NvbnN0YW50KGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4ge307XG4gIH0pIDogdW5kZWZpbmVkO1xufVxuZXhwb3J0IGRlZmF1bHQgW3doZW5NYXBTdGF0ZVRvUHJvcHNJc0Z1bmN0aW9uLCB3aGVuTWFwU3RhdGVUb1Byb3BzSXNNaXNzaW5nXTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCB2ZXJpZnlQbGFpbk9iamVjdCBmcm9tICcuLi91dGlscy92ZXJpZnlQbGFpbk9iamVjdCc7XG5leHBvcnQgZnVuY3Rpb24gZGVmYXVsdE1lcmdlUHJvcHMoc3RhdGVQcm9wcywgZGlzcGF0Y2hQcm9wcywgb3duUHJvcHMpIHtcbiAgcmV0dXJuIF9leHRlbmRzKHt9LCBvd25Qcm9wcywgc3RhdGVQcm9wcywgZGlzcGF0Y2hQcm9wcyk7XG59XG5leHBvcnQgZnVuY3Rpb24gd3JhcE1lcmdlUHJvcHNGdW5jKG1lcmdlUHJvcHMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGluaXRNZXJnZVByb3BzUHJveHkoZGlzcGF0Y2gsIF9yZWYpIHtcbiAgICB2YXIgZGlzcGxheU5hbWUgPSBfcmVmLmRpc3BsYXlOYW1lLFxuICAgICAgICBwdXJlID0gX3JlZi5wdXJlLFxuICAgICAgICBhcmVNZXJnZWRQcm9wc0VxdWFsID0gX3JlZi5hcmVNZXJnZWRQcm9wc0VxdWFsO1xuICAgIHZhciBoYXNSdW5PbmNlID0gZmFsc2U7XG4gICAgdmFyIG1lcmdlZFByb3BzO1xuICAgIHJldHVybiBmdW5jdGlvbiBtZXJnZVByb3BzUHJveHkoc3RhdGVQcm9wcywgZGlzcGF0Y2hQcm9wcywgb3duUHJvcHMpIHtcbiAgICAgIHZhciBuZXh0TWVyZ2VkUHJvcHMgPSBtZXJnZVByb3BzKHN0YXRlUHJvcHMsIGRpc3BhdGNoUHJvcHMsIG93blByb3BzKTtcblxuICAgICAgaWYgKGhhc1J1bk9uY2UpIHtcbiAgICAgICAgaWYgKCFwdXJlIHx8ICFhcmVNZXJnZWRQcm9wc0VxdWFsKG5leHRNZXJnZWRQcm9wcywgbWVyZ2VkUHJvcHMpKSBtZXJnZWRQcm9wcyA9IG5leHRNZXJnZWRQcm9wcztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGhhc1J1bk9uY2UgPSB0cnVlO1xuICAgICAgICBtZXJnZWRQcm9wcyA9IG5leHRNZXJnZWRQcm9wcztcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHZlcmlmeVBsYWluT2JqZWN0KG1lcmdlZFByb3BzLCBkaXNwbGF5TmFtZSwgJ21lcmdlUHJvcHMnKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG1lcmdlZFByb3BzO1xuICAgIH07XG4gIH07XG59XG5leHBvcnQgZnVuY3Rpb24gd2hlbk1lcmdlUHJvcHNJc0Z1bmN0aW9uKG1lcmdlUHJvcHMpIHtcbiAgcmV0dXJuIHR5cGVvZiBtZXJnZVByb3BzID09PSAnZnVuY3Rpb24nID8gd3JhcE1lcmdlUHJvcHNGdW5jKG1lcmdlUHJvcHMpIDogdW5kZWZpbmVkO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHdoZW5NZXJnZVByb3BzSXNPbWl0dGVkKG1lcmdlUHJvcHMpIHtcbiAgcmV0dXJuICFtZXJnZVByb3BzID8gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBkZWZhdWx0TWVyZ2VQcm9wcztcbiAgfSA6IHVuZGVmaW5lZDtcbn1cbmV4cG9ydCBkZWZhdWx0IFt3aGVuTWVyZ2VQcm9wc0lzRnVuY3Rpb24sIHdoZW5NZXJnZVByb3BzSXNPbWl0dGVkXTsiLCJpbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCB2ZXJpZnlTdWJzZWxlY3RvcnMgZnJvbSAnLi92ZXJpZnlTdWJzZWxlY3RvcnMnO1xuZXhwb3J0IGZ1bmN0aW9uIGltcHVyZUZpbmFsUHJvcHNTZWxlY3RvckZhY3RvcnkobWFwU3RhdGVUb1Byb3BzLCBtYXBEaXNwYXRjaFRvUHJvcHMsIG1lcmdlUHJvcHMsIGRpc3BhdGNoKSB7XG4gIHJldHVybiBmdW5jdGlvbiBpbXB1cmVGaW5hbFByb3BzU2VsZWN0b3Ioc3RhdGUsIG93blByb3BzKSB7XG4gICAgcmV0dXJuIG1lcmdlUHJvcHMobWFwU3RhdGVUb1Byb3BzKHN0YXRlLCBvd25Qcm9wcyksIG1hcERpc3BhdGNoVG9Qcm9wcyhkaXNwYXRjaCwgb3duUHJvcHMpLCBvd25Qcm9wcyk7XG4gIH07XG59XG5leHBvcnQgZnVuY3Rpb24gcHVyZUZpbmFsUHJvcHNTZWxlY3RvckZhY3RvcnkobWFwU3RhdGVUb1Byb3BzLCBtYXBEaXNwYXRjaFRvUHJvcHMsIG1lcmdlUHJvcHMsIGRpc3BhdGNoLCBfcmVmKSB7XG4gIHZhciBhcmVTdGF0ZXNFcXVhbCA9IF9yZWYuYXJlU3RhdGVzRXF1YWwsXG4gICAgICBhcmVPd25Qcm9wc0VxdWFsID0gX3JlZi5hcmVPd25Qcm9wc0VxdWFsLFxuICAgICAgYXJlU3RhdGVQcm9wc0VxdWFsID0gX3JlZi5hcmVTdGF0ZVByb3BzRXF1YWw7XG4gIHZhciBoYXNSdW5BdExlYXN0T25jZSA9IGZhbHNlO1xuICB2YXIgc3RhdGU7XG4gIHZhciBvd25Qcm9wcztcbiAgdmFyIHN0YXRlUHJvcHM7XG4gIHZhciBkaXNwYXRjaFByb3BzO1xuICB2YXIgbWVyZ2VkUHJvcHM7XG5cbiAgZnVuY3Rpb24gaGFuZGxlRmlyc3RDYWxsKGZpcnN0U3RhdGUsIGZpcnN0T3duUHJvcHMpIHtcbiAgICBzdGF0ZSA9IGZpcnN0U3RhdGU7XG4gICAgb3duUHJvcHMgPSBmaXJzdE93blByb3BzO1xuICAgIHN0YXRlUHJvcHMgPSBtYXBTdGF0ZVRvUHJvcHMoc3RhdGUsIG93blByb3BzKTtcbiAgICBkaXNwYXRjaFByb3BzID0gbWFwRGlzcGF0Y2hUb1Byb3BzKGRpc3BhdGNoLCBvd25Qcm9wcyk7XG4gICAgbWVyZ2VkUHJvcHMgPSBtZXJnZVByb3BzKHN0YXRlUHJvcHMsIGRpc3BhdGNoUHJvcHMsIG93blByb3BzKTtcbiAgICBoYXNSdW5BdExlYXN0T25jZSA9IHRydWU7XG4gICAgcmV0dXJuIG1lcmdlZFByb3BzO1xuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlTmV3UHJvcHNBbmROZXdTdGF0ZSgpIHtcbiAgICBzdGF0ZVByb3BzID0gbWFwU3RhdGVUb1Byb3BzKHN0YXRlLCBvd25Qcm9wcyk7XG4gICAgaWYgKG1hcERpc3BhdGNoVG9Qcm9wcy5kZXBlbmRzT25Pd25Qcm9wcykgZGlzcGF0Y2hQcm9wcyA9IG1hcERpc3BhdGNoVG9Qcm9wcyhkaXNwYXRjaCwgb3duUHJvcHMpO1xuICAgIG1lcmdlZFByb3BzID0gbWVyZ2VQcm9wcyhzdGF0ZVByb3BzLCBkaXNwYXRjaFByb3BzLCBvd25Qcm9wcyk7XG4gICAgcmV0dXJuIG1lcmdlZFByb3BzO1xuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlTmV3UHJvcHMoKSB7XG4gICAgaWYgKG1hcFN0YXRlVG9Qcm9wcy5kZXBlbmRzT25Pd25Qcm9wcykgc3RhdGVQcm9wcyA9IG1hcFN0YXRlVG9Qcm9wcyhzdGF0ZSwgb3duUHJvcHMpO1xuICAgIGlmIChtYXBEaXNwYXRjaFRvUHJvcHMuZGVwZW5kc09uT3duUHJvcHMpIGRpc3BhdGNoUHJvcHMgPSBtYXBEaXNwYXRjaFRvUHJvcHMoZGlzcGF0Y2gsIG93blByb3BzKTtcbiAgICBtZXJnZWRQcm9wcyA9IG1lcmdlUHJvcHMoc3RhdGVQcm9wcywgZGlzcGF0Y2hQcm9wcywgb3duUHJvcHMpO1xuICAgIHJldHVybiBtZXJnZWRQcm9wcztcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZU5ld1N0YXRlKCkge1xuICAgIHZhciBuZXh0U3RhdGVQcm9wcyA9IG1hcFN0YXRlVG9Qcm9wcyhzdGF0ZSwgb3duUHJvcHMpO1xuICAgIHZhciBzdGF0ZVByb3BzQ2hhbmdlZCA9ICFhcmVTdGF0ZVByb3BzRXF1YWwobmV4dFN0YXRlUHJvcHMsIHN0YXRlUHJvcHMpO1xuICAgIHN0YXRlUHJvcHMgPSBuZXh0U3RhdGVQcm9wcztcbiAgICBpZiAoc3RhdGVQcm9wc0NoYW5nZWQpIG1lcmdlZFByb3BzID0gbWVyZ2VQcm9wcyhzdGF0ZVByb3BzLCBkaXNwYXRjaFByb3BzLCBvd25Qcm9wcyk7XG4gICAgcmV0dXJuIG1lcmdlZFByb3BzO1xuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlU3Vic2VxdWVudENhbGxzKG5leHRTdGF0ZSwgbmV4dE93blByb3BzKSB7XG4gICAgdmFyIHByb3BzQ2hhbmdlZCA9ICFhcmVPd25Qcm9wc0VxdWFsKG5leHRPd25Qcm9wcywgb3duUHJvcHMpO1xuICAgIHZhciBzdGF0ZUNoYW5nZWQgPSAhYXJlU3RhdGVzRXF1YWwobmV4dFN0YXRlLCBzdGF0ZSk7XG4gICAgc3RhdGUgPSBuZXh0U3RhdGU7XG4gICAgb3duUHJvcHMgPSBuZXh0T3duUHJvcHM7XG4gICAgaWYgKHByb3BzQ2hhbmdlZCAmJiBzdGF0ZUNoYW5nZWQpIHJldHVybiBoYW5kbGVOZXdQcm9wc0FuZE5ld1N0YXRlKCk7XG4gICAgaWYgKHByb3BzQ2hhbmdlZCkgcmV0dXJuIGhhbmRsZU5ld1Byb3BzKCk7XG4gICAgaWYgKHN0YXRlQ2hhbmdlZCkgcmV0dXJuIGhhbmRsZU5ld1N0YXRlKCk7XG4gICAgcmV0dXJuIG1lcmdlZFByb3BzO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIHB1cmVGaW5hbFByb3BzU2VsZWN0b3IobmV4dFN0YXRlLCBuZXh0T3duUHJvcHMpIHtcbiAgICByZXR1cm4gaGFzUnVuQXRMZWFzdE9uY2UgPyBoYW5kbGVTdWJzZXF1ZW50Q2FsbHMobmV4dFN0YXRlLCBuZXh0T3duUHJvcHMpIDogaGFuZGxlRmlyc3RDYWxsKG5leHRTdGF0ZSwgbmV4dE93blByb3BzKTtcbiAgfTtcbn0gLy8gVE9ETzogQWRkIG1vcmUgY29tbWVudHNcbi8vIElmIHB1cmUgaXMgdHJ1ZSwgdGhlIHNlbGVjdG9yIHJldHVybmVkIGJ5IHNlbGVjdG9yRmFjdG9yeSB3aWxsIG1lbW9pemUgaXRzIHJlc3VsdHMsXG4vLyBhbGxvd2luZyBjb25uZWN0QWR2YW5jZWQncyBzaG91bGRDb21wb25lbnRVcGRhdGUgdG8gcmV0dXJuIGZhbHNlIGlmIGZpbmFsXG4vLyBwcm9wcyBoYXZlIG5vdCBjaGFuZ2VkLiBJZiBmYWxzZSwgdGhlIHNlbGVjdG9yIHdpbGwgYWx3YXlzIHJldHVybiBhIG5ld1xuLy8gb2JqZWN0IGFuZCBzaG91bGRDb21wb25lbnRVcGRhdGUgd2lsbCBhbHdheXMgcmV0dXJuIHRydWUuXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGZpbmFsUHJvcHNTZWxlY3RvckZhY3RvcnkoZGlzcGF0Y2gsIF9yZWYyKSB7XG4gIHZhciBpbml0TWFwU3RhdGVUb1Byb3BzID0gX3JlZjIuaW5pdE1hcFN0YXRlVG9Qcm9wcyxcbiAgICAgIGluaXRNYXBEaXNwYXRjaFRvUHJvcHMgPSBfcmVmMi5pbml0TWFwRGlzcGF0Y2hUb1Byb3BzLFxuICAgICAgaW5pdE1lcmdlUHJvcHMgPSBfcmVmMi5pbml0TWVyZ2VQcm9wcyxcbiAgICAgIG9wdGlvbnMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfcmVmMiwgW1wiaW5pdE1hcFN0YXRlVG9Qcm9wc1wiLCBcImluaXRNYXBEaXNwYXRjaFRvUHJvcHNcIiwgXCJpbml0TWVyZ2VQcm9wc1wiXSk7XG5cbiAgdmFyIG1hcFN0YXRlVG9Qcm9wcyA9IGluaXRNYXBTdGF0ZVRvUHJvcHMoZGlzcGF0Y2gsIG9wdGlvbnMpO1xuICB2YXIgbWFwRGlzcGF0Y2hUb1Byb3BzID0gaW5pdE1hcERpc3BhdGNoVG9Qcm9wcyhkaXNwYXRjaCwgb3B0aW9ucyk7XG4gIHZhciBtZXJnZVByb3BzID0gaW5pdE1lcmdlUHJvcHMoZGlzcGF0Y2gsIG9wdGlvbnMpO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgdmVyaWZ5U3Vic2VsZWN0b3JzKG1hcFN0YXRlVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzLCBtZXJnZVByb3BzLCBvcHRpb25zLmRpc3BsYXlOYW1lKTtcbiAgfVxuXG4gIHZhciBzZWxlY3RvckZhY3RvcnkgPSBvcHRpb25zLnB1cmUgPyBwdXJlRmluYWxQcm9wc1NlbGVjdG9yRmFjdG9yeSA6IGltcHVyZUZpbmFsUHJvcHNTZWxlY3RvckZhY3Rvcnk7XG4gIHJldHVybiBzZWxlY3RvckZhY3RvcnkobWFwU3RhdGVUb1Byb3BzLCBtYXBEaXNwYXRjaFRvUHJvcHMsIG1lcmdlUHJvcHMsIGRpc3BhdGNoLCBvcHRpb25zKTtcbn0iLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IGNvbm5lY3RBZHZhbmNlZCBmcm9tICcuLi9jb21wb25lbnRzL2Nvbm5lY3RBZHZhbmNlZCc7XG5pbXBvcnQgc2hhbGxvd0VxdWFsIGZyb20gJy4uL3V0aWxzL3NoYWxsb3dFcXVhbCc7XG5pbXBvcnQgZGVmYXVsdE1hcERpc3BhdGNoVG9Qcm9wc0ZhY3RvcmllcyBmcm9tICcuL21hcERpc3BhdGNoVG9Qcm9wcyc7XG5pbXBvcnQgZGVmYXVsdE1hcFN0YXRlVG9Qcm9wc0ZhY3RvcmllcyBmcm9tICcuL21hcFN0YXRlVG9Qcm9wcyc7XG5pbXBvcnQgZGVmYXVsdE1lcmdlUHJvcHNGYWN0b3JpZXMgZnJvbSAnLi9tZXJnZVByb3BzJztcbmltcG9ydCBkZWZhdWx0U2VsZWN0b3JGYWN0b3J5IGZyb20gJy4vc2VsZWN0b3JGYWN0b3J5Jztcbi8qXG4gIGNvbm5lY3QgaXMgYSBmYWNhZGUgb3ZlciBjb25uZWN0QWR2YW5jZWQuIEl0IHR1cm5zIGl0cyBhcmdzIGludG8gYSBjb21wYXRpYmxlXG4gIHNlbGVjdG9yRmFjdG9yeSwgd2hpY2ggaGFzIHRoZSBzaWduYXR1cmU6XG5cbiAgICAoZGlzcGF0Y2gsIG9wdGlvbnMpID0+IChuZXh0U3RhdGUsIG5leHRPd25Qcm9wcykgPT4gbmV4dEZpbmFsUHJvcHNcbiAgXG4gIGNvbm5lY3QgcGFzc2VzIGl0cyBhcmdzIHRvIGNvbm5lY3RBZHZhbmNlZCBhcyBvcHRpb25zLCB3aGljaCB3aWxsIGluIHR1cm4gcGFzcyB0aGVtIHRvXG4gIHNlbGVjdG9yRmFjdG9yeSBlYWNoIHRpbWUgYSBDb25uZWN0IGNvbXBvbmVudCBpbnN0YW5jZSBpcyBpbnN0YW50aWF0ZWQgb3IgaG90IHJlbG9hZGVkLlxuXG4gIHNlbGVjdG9yRmFjdG9yeSByZXR1cm5zIGEgZmluYWwgcHJvcHMgc2VsZWN0b3IgZnJvbSBpdHMgbWFwU3RhdGVUb1Byb3BzLFxuICBtYXBTdGF0ZVRvUHJvcHNGYWN0b3JpZXMsIG1hcERpc3BhdGNoVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzRmFjdG9yaWVzLCBtZXJnZVByb3BzLFxuICBtZXJnZVByb3BzRmFjdG9yaWVzLCBhbmQgcHVyZSBhcmdzLlxuXG4gIFRoZSByZXN1bHRpbmcgZmluYWwgcHJvcHMgc2VsZWN0b3IgaXMgY2FsbGVkIGJ5IHRoZSBDb25uZWN0IGNvbXBvbmVudCBpbnN0YW5jZSB3aGVuZXZlclxuICBpdCByZWNlaXZlcyBuZXcgcHJvcHMgb3Igc3RvcmUgc3RhdGUuXG4gKi9cblxuZnVuY3Rpb24gbWF0Y2goYXJnLCBmYWN0b3JpZXMsIG5hbWUpIHtcbiAgZm9yICh2YXIgaSA9IGZhY3Rvcmllcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgIHZhciByZXN1bHQgPSBmYWN0b3JpZXNbaV0oYXJnKTtcbiAgICBpZiAocmVzdWx0KSByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChkaXNwYXRjaCwgb3B0aW9ucykge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgdmFsdWUgb2YgdHlwZSBcIiArIHR5cGVvZiBhcmcgKyBcIiBmb3IgXCIgKyBuYW1lICsgXCIgYXJndW1lbnQgd2hlbiBjb25uZWN0aW5nIGNvbXBvbmVudCBcIiArIG9wdGlvbnMud3JhcHBlZENvbXBvbmVudE5hbWUgKyBcIi5cIik7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHN0cmljdEVxdWFsKGEsIGIpIHtcbiAgcmV0dXJuIGEgPT09IGI7XG59IC8vIGNyZWF0ZUNvbm5lY3Qgd2l0aCBkZWZhdWx0IGFyZ3MgYnVpbGRzIHRoZSAnb2ZmaWNpYWwnIGNvbm5lY3QgYmVoYXZpb3IuIENhbGxpbmcgaXQgd2l0aFxuLy8gZGlmZmVyZW50IG9wdGlvbnMgb3BlbnMgdXAgc29tZSB0ZXN0aW5nIGFuZCBleHRlbnNpYmlsaXR5IHNjZW5hcmlvc1xuXG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVDb25uZWN0KF90ZW1wKSB7XG4gIHZhciBfcmVmID0gX3RlbXAgPT09IHZvaWQgMCA/IHt9IDogX3RlbXAsXG4gICAgICBfcmVmJGNvbm5lY3RIT0MgPSBfcmVmLmNvbm5lY3RIT0MsXG4gICAgICBjb25uZWN0SE9DID0gX3JlZiRjb25uZWN0SE9DID09PSB2b2lkIDAgPyBjb25uZWN0QWR2YW5jZWQgOiBfcmVmJGNvbm5lY3RIT0MsXG4gICAgICBfcmVmJG1hcFN0YXRlVG9Qcm9wc0YgPSBfcmVmLm1hcFN0YXRlVG9Qcm9wc0ZhY3RvcmllcyxcbiAgICAgIG1hcFN0YXRlVG9Qcm9wc0ZhY3RvcmllcyA9IF9yZWYkbWFwU3RhdGVUb1Byb3BzRiA9PT0gdm9pZCAwID8gZGVmYXVsdE1hcFN0YXRlVG9Qcm9wc0ZhY3RvcmllcyA6IF9yZWYkbWFwU3RhdGVUb1Byb3BzRixcbiAgICAgIF9yZWYkbWFwRGlzcGF0Y2hUb1BybyA9IF9yZWYubWFwRGlzcGF0Y2hUb1Byb3BzRmFjdG9yaWVzLFxuICAgICAgbWFwRGlzcGF0Y2hUb1Byb3BzRmFjdG9yaWVzID0gX3JlZiRtYXBEaXNwYXRjaFRvUHJvID09PSB2b2lkIDAgPyBkZWZhdWx0TWFwRGlzcGF0Y2hUb1Byb3BzRmFjdG9yaWVzIDogX3JlZiRtYXBEaXNwYXRjaFRvUHJvLFxuICAgICAgX3JlZiRtZXJnZVByb3BzRmFjdG9yID0gX3JlZi5tZXJnZVByb3BzRmFjdG9yaWVzLFxuICAgICAgbWVyZ2VQcm9wc0ZhY3RvcmllcyA9IF9yZWYkbWVyZ2VQcm9wc0ZhY3RvciA9PT0gdm9pZCAwID8gZGVmYXVsdE1lcmdlUHJvcHNGYWN0b3JpZXMgOiBfcmVmJG1lcmdlUHJvcHNGYWN0b3IsXG4gICAgICBfcmVmJHNlbGVjdG9yRmFjdG9yeSA9IF9yZWYuc2VsZWN0b3JGYWN0b3J5LFxuICAgICAgc2VsZWN0b3JGYWN0b3J5ID0gX3JlZiRzZWxlY3RvckZhY3RvcnkgPT09IHZvaWQgMCA/IGRlZmF1bHRTZWxlY3RvckZhY3RvcnkgOiBfcmVmJHNlbGVjdG9yRmFjdG9yeTtcblxuICByZXR1cm4gZnVuY3Rpb24gY29ubmVjdChtYXBTdGF0ZVRvUHJvcHMsIG1hcERpc3BhdGNoVG9Qcm9wcywgbWVyZ2VQcm9wcywgX3JlZjIpIHtcbiAgICBpZiAoX3JlZjIgPT09IHZvaWQgMCkge1xuICAgICAgX3JlZjIgPSB7fTtcbiAgICB9XG5cbiAgICB2YXIgX3JlZjMgPSBfcmVmMixcbiAgICAgICAgX3JlZjMkcHVyZSA9IF9yZWYzLnB1cmUsXG4gICAgICAgIHB1cmUgPSBfcmVmMyRwdXJlID09PSB2b2lkIDAgPyB0cnVlIDogX3JlZjMkcHVyZSxcbiAgICAgICAgX3JlZjMkYXJlU3RhdGVzRXF1YWwgPSBfcmVmMy5hcmVTdGF0ZXNFcXVhbCxcbiAgICAgICAgYXJlU3RhdGVzRXF1YWwgPSBfcmVmMyRhcmVTdGF0ZXNFcXVhbCA9PT0gdm9pZCAwID8gc3RyaWN0RXF1YWwgOiBfcmVmMyRhcmVTdGF0ZXNFcXVhbCxcbiAgICAgICAgX3JlZjMkYXJlT3duUHJvcHNFcXVhID0gX3JlZjMuYXJlT3duUHJvcHNFcXVhbCxcbiAgICAgICAgYXJlT3duUHJvcHNFcXVhbCA9IF9yZWYzJGFyZU93blByb3BzRXF1YSA9PT0gdm9pZCAwID8gc2hhbGxvd0VxdWFsIDogX3JlZjMkYXJlT3duUHJvcHNFcXVhLFxuICAgICAgICBfcmVmMyRhcmVTdGF0ZVByb3BzRXEgPSBfcmVmMy5hcmVTdGF0ZVByb3BzRXF1YWwsXG4gICAgICAgIGFyZVN0YXRlUHJvcHNFcXVhbCA9IF9yZWYzJGFyZVN0YXRlUHJvcHNFcSA9PT0gdm9pZCAwID8gc2hhbGxvd0VxdWFsIDogX3JlZjMkYXJlU3RhdGVQcm9wc0VxLFxuICAgICAgICBfcmVmMyRhcmVNZXJnZWRQcm9wc0UgPSBfcmVmMy5hcmVNZXJnZWRQcm9wc0VxdWFsLFxuICAgICAgICBhcmVNZXJnZWRQcm9wc0VxdWFsID0gX3JlZjMkYXJlTWVyZ2VkUHJvcHNFID09PSB2b2lkIDAgPyBzaGFsbG93RXF1YWwgOiBfcmVmMyRhcmVNZXJnZWRQcm9wc0UsXG4gICAgICAgIGV4dHJhT3B0aW9ucyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF9yZWYzLCBbXCJwdXJlXCIsIFwiYXJlU3RhdGVzRXF1YWxcIiwgXCJhcmVPd25Qcm9wc0VxdWFsXCIsIFwiYXJlU3RhdGVQcm9wc0VxdWFsXCIsIFwiYXJlTWVyZ2VkUHJvcHNFcXVhbFwiXSk7XG5cbiAgICB2YXIgaW5pdE1hcFN0YXRlVG9Qcm9wcyA9IG1hdGNoKG1hcFN0YXRlVG9Qcm9wcywgbWFwU3RhdGVUb1Byb3BzRmFjdG9yaWVzLCAnbWFwU3RhdGVUb1Byb3BzJyk7XG4gICAgdmFyIGluaXRNYXBEaXNwYXRjaFRvUHJvcHMgPSBtYXRjaChtYXBEaXNwYXRjaFRvUHJvcHMsIG1hcERpc3BhdGNoVG9Qcm9wc0ZhY3RvcmllcywgJ21hcERpc3BhdGNoVG9Qcm9wcycpO1xuICAgIHZhciBpbml0TWVyZ2VQcm9wcyA9IG1hdGNoKG1lcmdlUHJvcHMsIG1lcmdlUHJvcHNGYWN0b3JpZXMsICdtZXJnZVByb3BzJyk7XG4gICAgcmV0dXJuIGNvbm5lY3RIT0Moc2VsZWN0b3JGYWN0b3J5LCBfZXh0ZW5kcyh7XG4gICAgICAvLyB1c2VkIGluIGVycm9yIG1lc3NhZ2VzXG4gICAgICBtZXRob2ROYW1lOiAnY29ubmVjdCcsXG4gICAgICAvLyB1c2VkIHRvIGNvbXB1dGUgQ29ubmVjdCdzIGRpc3BsYXlOYW1lIGZyb20gdGhlIHdyYXBwZWQgY29tcG9uZW50J3MgZGlzcGxheU5hbWUuXG4gICAgICBnZXREaXNwbGF5TmFtZTogZnVuY3Rpb24gZ2V0RGlzcGxheU5hbWUobmFtZSkge1xuICAgICAgICByZXR1cm4gXCJDb25uZWN0KFwiICsgbmFtZSArIFwiKVwiO1xuICAgICAgfSxcbiAgICAgIC8vIGlmIG1hcFN0YXRlVG9Qcm9wcyBpcyBmYWxzeSwgdGhlIENvbm5lY3QgY29tcG9uZW50IGRvZXNuJ3Qgc3Vic2NyaWJlIHRvIHN0b3JlIHN0YXRlIGNoYW5nZXNcbiAgICAgIHNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlczogQm9vbGVhbihtYXBTdGF0ZVRvUHJvcHMpLFxuICAgICAgLy8gcGFzc2VkIHRocm91Z2ggdG8gc2VsZWN0b3JGYWN0b3J5XG4gICAgICBpbml0TWFwU3RhdGVUb1Byb3BzOiBpbml0TWFwU3RhdGVUb1Byb3BzLFxuICAgICAgaW5pdE1hcERpc3BhdGNoVG9Qcm9wczogaW5pdE1hcERpc3BhdGNoVG9Qcm9wcyxcbiAgICAgIGluaXRNZXJnZVByb3BzOiBpbml0TWVyZ2VQcm9wcyxcbiAgICAgIHB1cmU6IHB1cmUsXG4gICAgICBhcmVTdGF0ZXNFcXVhbDogYXJlU3RhdGVzRXF1YWwsXG4gICAgICBhcmVPd25Qcm9wc0VxdWFsOiBhcmVPd25Qcm9wc0VxdWFsLFxuICAgICAgYXJlU3RhdGVQcm9wc0VxdWFsOiBhcmVTdGF0ZVByb3BzRXF1YWwsXG4gICAgICBhcmVNZXJnZWRQcm9wc0VxdWFsOiBhcmVNZXJnZWRQcm9wc0VxdWFsXG4gICAgfSwgZXh0cmFPcHRpb25zKSk7XG4gIH07XG59XG5leHBvcnQgZGVmYXVsdCBjcmVhdGVDb25uZWN0KCk7IiwiaW1wb3J0IHsgdXNlUmVkdWNlciwgdXNlUmVmLCB1c2VFZmZlY3QsIHVzZU1lbW8sIHVzZUxheW91dEVmZmVjdCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSAnaW52YXJpYW50JztcbmltcG9ydCB7IHVzZVJlZHV4Q29udGV4dCB9IGZyb20gJy4vdXNlUmVkdXhDb250ZXh0JztcbmltcG9ydCBTdWJzY3JpcHRpb24gZnJvbSAnLi4vdXRpbHMvU3Vic2NyaXB0aW9uJzsgLy8gUmVhY3QgY3VycmVudGx5IHRocm93cyBhIHdhcm5pbmcgd2hlbiB1c2luZyB1c2VMYXlvdXRFZmZlY3Qgb24gdGhlIHNlcnZlci5cbi8vIFRvIGdldCBhcm91bmQgaXQsIHdlIGNhbiBjb25kaXRpb25hbGx5IHVzZUVmZmVjdCBvbiB0aGUgc2VydmVyIChuby1vcCkgYW5kXG4vLyB1c2VMYXlvdXRFZmZlY3QgaW4gdGhlIGJyb3dzZXIuIFdlIG5lZWQgdXNlTGF5b3V0RWZmZWN0IHRvIGVuc3VyZSB0aGUgc3RvcmVcbi8vIHN1YnNjcmlwdGlvbiBjYWxsYmFjayBhbHdheXMgaGFzIHRoZSBzZWxlY3RvciBmcm9tIHRoZSBsYXRlc3QgcmVuZGVyIGNvbW1pdFxuLy8gYXZhaWxhYmxlLCBvdGhlcndpc2UgYSBzdG9yZSB1cGRhdGUgbWF5IGhhcHBlbiBiZXR3ZWVuIHJlbmRlciBhbmQgdGhlIGVmZmVjdCxcbi8vIHdoaWNoIG1heSBjYXVzZSBtaXNzZWQgdXBkYXRlczsgd2UgYWxzbyBtdXN0IGVuc3VyZSB0aGUgc3RvcmUgc3Vic2NyaXB0aW9uXG4vLyBpcyBjcmVhdGVkIHN5bmNocm9ub3VzbHksIG90aGVyd2lzZSBhIHN0b3JlIHVwZGF0ZSBtYXkgb2NjdXIgYmVmb3JlIHRoZVxuLy8gc3Vic2NyaXB0aW9uIGlzIGNyZWF0ZWQgYW5kIGFuIGluY29uc2lzdGVudCBzdGF0ZSBtYXkgYmUgb2JzZXJ2ZWRcblxudmFyIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QgPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyA/IHVzZUxheW91dEVmZmVjdCA6IHVzZUVmZmVjdDtcblxudmFyIHJlZkVxdWFsaXR5ID0gZnVuY3Rpb24gcmVmRXF1YWxpdHkoYSwgYikge1xuICByZXR1cm4gYSA9PT0gYjtcbn07XG4vKipcbiAqIEEgaG9vayB0byBhY2Nlc3MgdGhlIHJlZHV4IHN0b3JlJ3Mgc3RhdGUuIFRoaXMgaG9vayB0YWtlcyBhIHNlbGVjdG9yIGZ1bmN0aW9uXG4gKiBhcyBhbiBhcmd1bWVudC4gVGhlIHNlbGVjdG9yIGlzIGNhbGxlZCB3aXRoIHRoZSBzdG9yZSBzdGF0ZS5cbiAqXG4gKiBUaGlzIGhvb2sgdGFrZXMgYW4gb3B0aW9uYWwgZXF1YWxpdHkgY29tcGFyaXNvbiBmdW5jdGlvbiBhcyB0aGUgc2Vjb25kIHBhcmFtZXRlclxuICogdGhhdCBhbGxvd3MgeW91IHRvIGN1c3RvbWl6ZSB0aGUgd2F5IHRoZSBzZWxlY3RlZCBzdGF0ZSBpcyBjb21wYXJlZCB0byBkZXRlcm1pbmVcbiAqIHdoZXRoZXIgdGhlIGNvbXBvbmVudCBuZWVkcyB0byBiZSByZS1yZW5kZXJlZC5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBzZWxlY3RvciB0aGUgc2VsZWN0b3IgZnVuY3Rpb25cbiAqIEBwYXJhbSB7RnVuY3Rpb249fSBlcXVhbGl0eUZuIHRoZSBmdW5jdGlvbiB0aGF0IHdpbGwgYmUgdXNlZCB0byBkZXRlcm1pbmUgZXF1YWxpdHlcbiAqXG4gKiBAcmV0dXJucyB7YW55fSB0aGUgc2VsZWN0ZWQgc3RhdGVcbiAqXG4gKiBAZXhhbXBsZVxuICpcbiAqIGltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcbiAqIGltcG9ydCB7IHVzZVNlbGVjdG9yIH0gZnJvbSAncmVhY3QtcmVkdXgnXG4gKlxuICogZXhwb3J0IGNvbnN0IENvdW50ZXJDb21wb25lbnQgPSAoKSA9PiB7XG4gKiAgIGNvbnN0IGNvdW50ZXIgPSB1c2VTZWxlY3RvcihzdGF0ZSA9PiBzdGF0ZS5jb3VudGVyKVxuICogICByZXR1cm4gPGRpdj57Y291bnRlcn08L2Rpdj5cbiAqIH1cbiAqL1xuXG5cbmV4cG9ydCBmdW5jdGlvbiB1c2VTZWxlY3RvcihzZWxlY3RvciwgZXF1YWxpdHlGbikge1xuICBpZiAoZXF1YWxpdHlGbiA9PT0gdm9pZCAwKSB7XG4gICAgZXF1YWxpdHlGbiA9IHJlZkVxdWFsaXR5O1xuICB9XG5cbiAgaW52YXJpYW50KHNlbGVjdG9yLCBcIllvdSBtdXN0IHBhc3MgYSBzZWxlY3RvciB0byB1c2VTZWxlY3RvcnNcIik7XG5cbiAgdmFyIF91c2VSZWR1eENvbnRleHQgPSB1c2VSZWR1eENvbnRleHQoKSxcbiAgICAgIHN0b3JlID0gX3VzZVJlZHV4Q29udGV4dC5zdG9yZSxcbiAgICAgIGNvbnRleHRTdWIgPSBfdXNlUmVkdXhDb250ZXh0LnN1YnNjcmlwdGlvbjtcblxuICB2YXIgX3VzZVJlZHVjZXIgPSB1c2VSZWR1Y2VyKGZ1bmN0aW9uIChzKSB7XG4gICAgcmV0dXJuIHMgKyAxO1xuICB9LCAwKSxcbiAgICAgIGZvcmNlUmVuZGVyID0gX3VzZVJlZHVjZXJbMV07XG5cbiAgdmFyIHN1YnNjcmlwdGlvbiA9IHVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBuZXcgU3Vic2NyaXB0aW9uKHN0b3JlLCBjb250ZXh0U3ViKTtcbiAgfSwgW3N0b3JlLCBjb250ZXh0U3ViXSk7XG4gIHZhciBsYXRlc3RTdWJzY3JpcHRpb25DYWxsYmFja0Vycm9yID0gdXNlUmVmKCk7XG4gIHZhciBsYXRlc3RTZWxlY3RvciA9IHVzZVJlZigpO1xuICB2YXIgbGF0ZXN0U2VsZWN0ZWRTdGF0ZSA9IHVzZVJlZigpO1xuICB2YXIgc2VsZWN0ZWRTdGF0ZTtcblxuICB0cnkge1xuICAgIGlmIChzZWxlY3RvciAhPT0gbGF0ZXN0U2VsZWN0b3IuY3VycmVudCB8fCBsYXRlc3RTdWJzY3JpcHRpb25DYWxsYmFja0Vycm9yLmN1cnJlbnQpIHtcbiAgICAgIHNlbGVjdGVkU3RhdGUgPSBzZWxlY3RvcihzdG9yZS5nZXRTdGF0ZSgpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2VsZWN0ZWRTdGF0ZSA9IGxhdGVzdFNlbGVjdGVkU3RhdGUuY3VycmVudDtcbiAgICB9XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIHZhciBlcnJvck1lc3NhZ2UgPSBcIkFuIGVycm9yIG9jY3VyZWQgd2hpbGUgc2VsZWN0aW5nIHRoZSBzdG9yZSBzdGF0ZTogXCIgKyBlcnIubWVzc2FnZSArIFwiLlwiO1xuXG4gICAgaWYgKGxhdGVzdFN1YnNjcmlwdGlvbkNhbGxiYWNrRXJyb3IuY3VycmVudCkge1xuICAgICAgZXJyb3JNZXNzYWdlICs9IFwiXFxuVGhlIGVycm9yIG1heSBiZSBjb3JyZWxhdGVkIHdpdGggdGhpcyBwcmV2aW91cyBlcnJvcjpcXG5cIiArIGxhdGVzdFN1YnNjcmlwdGlvbkNhbGxiYWNrRXJyb3IuY3VycmVudC5zdGFjayArIFwiXFxuXFxuT3JpZ2luYWwgc3RhY2sgdHJhY2U6XCI7XG4gICAgfVxuXG4gICAgdGhyb3cgbmV3IEVycm9yKGVycm9yTWVzc2FnZSk7XG4gIH1cblxuICB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICBsYXRlc3RTZWxlY3Rvci5jdXJyZW50ID0gc2VsZWN0b3I7XG4gICAgbGF0ZXN0U2VsZWN0ZWRTdGF0ZS5jdXJyZW50ID0gc2VsZWN0ZWRTdGF0ZTtcbiAgICBsYXRlc3RTdWJzY3JpcHRpb25DYWxsYmFja0Vycm9yLmN1cnJlbnQgPSB1bmRlZmluZWQ7XG4gIH0pO1xuICB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBjaGVja0ZvclVwZGF0ZXMoKSB7XG4gICAgICB0cnkge1xuICAgICAgICB2YXIgbmV3U2VsZWN0ZWRTdGF0ZSA9IGxhdGVzdFNlbGVjdG9yLmN1cnJlbnQoc3RvcmUuZ2V0U3RhdGUoKSk7XG5cbiAgICAgICAgaWYgKGVxdWFsaXR5Rm4obmV3U2VsZWN0ZWRTdGF0ZSwgbGF0ZXN0U2VsZWN0ZWRTdGF0ZS5jdXJyZW50KSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGxhdGVzdFNlbGVjdGVkU3RhdGUuY3VycmVudCA9IG5ld1NlbGVjdGVkU3RhdGU7XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgLy8gd2UgaWdub3JlIGFsbCBlcnJvcnMgaGVyZSwgc2luY2Ugd2hlbiB0aGUgY29tcG9uZW50XG4gICAgICAgIC8vIGlzIHJlLXJlbmRlcmVkLCB0aGUgc2VsZWN0b3JzIGFyZSBjYWxsZWQgYWdhaW4sIGFuZFxuICAgICAgICAvLyB3aWxsIHRocm93IGFnYWluLCBpZiBuZWl0aGVyIHByb3BzIG5vciBzdG9yZSBzdGF0ZVxuICAgICAgICAvLyBjaGFuZ2VkXG4gICAgICAgIGxhdGVzdFN1YnNjcmlwdGlvbkNhbGxiYWNrRXJyb3IuY3VycmVudCA9IGVycjtcbiAgICAgIH1cblxuICAgICAgZm9yY2VSZW5kZXIoe30pO1xuICAgIH1cblxuICAgIHN1YnNjcmlwdGlvbi5vblN0YXRlQ2hhbmdlID0gY2hlY2tGb3JVcGRhdGVzO1xuICAgIHN1YnNjcmlwdGlvbi50cnlTdWJzY3JpYmUoKTtcbiAgICBjaGVja0ZvclVwZGF0ZXMoKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHN1YnNjcmlwdGlvbi50cnlVbnN1YnNjcmliZSgpO1xuICAgIH07XG4gIH0sIFtzdG9yZSwgc3Vic2NyaXB0aW9uXSk7XG4gIHJldHVybiBzZWxlY3RlZFN0YXRlO1xufSIsImltcG9ydCBQcm92aWRlciBmcm9tICcuL2NvbXBvbmVudHMvUHJvdmlkZXInO1xuaW1wb3J0IGNvbm5lY3RBZHZhbmNlZCBmcm9tICcuL2NvbXBvbmVudHMvY29ubmVjdEFkdmFuY2VkJztcbmltcG9ydCB7IFJlYWN0UmVkdXhDb250ZXh0IH0gZnJvbSAnLi9jb21wb25lbnRzL0NvbnRleHQnO1xuaW1wb3J0IGNvbm5lY3QgZnJvbSAnLi9jb25uZWN0L2Nvbm5lY3QnO1xuaW1wb3J0IHsgdXNlRGlzcGF0Y2ggfSBmcm9tICcuL2hvb2tzL3VzZURpc3BhdGNoJztcbmltcG9ydCB7IHVzZVNlbGVjdG9yIH0gZnJvbSAnLi9ob29rcy91c2VTZWxlY3Rvcic7XG5pbXBvcnQgeyB1c2VTdG9yZSB9IGZyb20gJy4vaG9va3MvdXNlU3RvcmUnO1xuaW1wb3J0IHsgc2V0QmF0Y2ggfSBmcm9tICcuL3V0aWxzL2JhdGNoJztcbmltcG9ydCB7IHVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzIGFzIGJhdGNoIH0gZnJvbSAnLi91dGlscy9yZWFjdEJhdGNoZWRVcGRhdGVzJztcbmltcG9ydCBzaGFsbG93RXF1YWwgZnJvbSAnLi91dGlscy9zaGFsbG93RXF1YWwnO1xuc2V0QmF0Y2goYmF0Y2gpO1xuZXhwb3J0IHsgUHJvdmlkZXIsIGNvbm5lY3RBZHZhbmNlZCwgUmVhY3RSZWR1eENvbnRleHQsIGNvbm5lY3QsIGJhdGNoLCB1c2VEaXNwYXRjaCwgdXNlU2VsZWN0b3IsIHVzZVN0b3JlLCBzaGFsbG93RXF1YWwgfTsiLCJpbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IF9pbmhlcml0c0xvb3NlIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHNMb29zZSc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGd1ZCBmcm9tICdndWQnO1xuaW1wb3J0IHdhcm5pbmcgZnJvbSAndGlueS13YXJuaW5nJztcblxudmFyIE1BWF9TSUdORURfMzFfQklUX0lOVCA9IDEwNzM3NDE4MjM7XG5cbmZ1bmN0aW9uIG9iamVjdElzKHgsIHkpIHtcbiAgaWYgKHggPT09IHkpIHtcbiAgICByZXR1cm4geCAhPT0gMCB8fCAxIC8geCA9PT0gMSAvIHk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHggIT09IHggJiYgeSAhPT0geTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjcmVhdGVFdmVudEVtaXR0ZXIodmFsdWUpIHtcbiAgdmFyIGhhbmRsZXJzID0gW107XG4gIHJldHVybiB7XG4gICAgb246IGZ1bmN0aW9uIG9uKGhhbmRsZXIpIHtcbiAgICAgIGhhbmRsZXJzLnB1c2goaGFuZGxlcik7XG4gICAgfSxcbiAgICBvZmY6IGZ1bmN0aW9uIG9mZihoYW5kbGVyKSB7XG4gICAgICBoYW5kbGVycyA9IGhhbmRsZXJzLmZpbHRlcihmdW5jdGlvbiAoaCkge1xuICAgICAgICByZXR1cm4gaCAhPT0gaGFuZGxlcjtcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfSxcbiAgICBzZXQ6IGZ1bmN0aW9uIHNldChuZXdWYWx1ZSwgY2hhbmdlZEJpdHMpIHtcbiAgICAgIHZhbHVlID0gbmV3VmFsdWU7XG4gICAgICBoYW5kbGVycy5mb3JFYWNoKGZ1bmN0aW9uIChoYW5kbGVyKSB7XG4gICAgICAgIHJldHVybiBoYW5kbGVyKHZhbHVlLCBjaGFuZ2VkQml0cyk7XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIG9ubHlDaGlsZChjaGlsZHJlbikge1xuICByZXR1cm4gQXJyYXkuaXNBcnJheShjaGlsZHJlbikgPyBjaGlsZHJlblswXSA6IGNoaWxkcmVuO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVSZWFjdENvbnRleHQoZGVmYXVsdFZhbHVlLCBjYWxjdWxhdGVDaGFuZ2VkQml0cykge1xuICB2YXIgX1Byb3ZpZGVyJGNoaWxkQ29udGV4LCBfQ29uc3VtZXIkY29udGV4dFR5cGU7XG5cbiAgdmFyIGNvbnRleHRQcm9wID0gJ19fY3JlYXRlLXJlYWN0LWNvbnRleHQtJyArIGd1ZCgpICsgJ19fJztcblxuICB2YXIgUHJvdmlkZXIgPVxuICAvKiNfX1BVUkVfXyovXG4gIGZ1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gICAgX2luaGVyaXRzTG9vc2UoUHJvdmlkZXIsIF9Db21wb25lbnQpO1xuXG4gICAgZnVuY3Rpb24gUHJvdmlkZXIoKSB7XG4gICAgICB2YXIgX3RoaXM7XG5cbiAgICAgIF90aGlzID0gX0NvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gICAgICBfdGhpcy5lbWl0dGVyID0gY3JlYXRlRXZlbnRFbWl0dGVyKF90aGlzLnByb3BzLnZhbHVlKTtcbiAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG5cbiAgICB2YXIgX3Byb3RvID0gUHJvdmlkZXIucHJvdG90eXBlO1xuXG4gICAgX3Byb3RvLmdldENoaWxkQ29udGV4dCA9IGZ1bmN0aW9uIGdldENoaWxkQ29udGV4dCgpIHtcbiAgICAgIHZhciBfcmVmO1xuXG4gICAgICByZXR1cm4gX3JlZiA9IHt9LCBfcmVmW2NvbnRleHRQcm9wXSA9IHRoaXMuZW1pdHRlciwgX3JlZjtcbiAgICB9O1xuXG4gICAgX3Byb3RvLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xuICAgICAgaWYgKHRoaXMucHJvcHMudmFsdWUgIT09IG5leHRQcm9wcy52YWx1ZSkge1xuICAgICAgICB2YXIgb2xkVmFsdWUgPSB0aGlzLnByb3BzLnZhbHVlO1xuICAgICAgICB2YXIgbmV3VmFsdWUgPSBuZXh0UHJvcHMudmFsdWU7XG4gICAgICAgIHZhciBjaGFuZ2VkQml0cztcblxuICAgICAgICBpZiAob2JqZWN0SXMob2xkVmFsdWUsIG5ld1ZhbHVlKSkge1xuICAgICAgICAgIGNoYW5nZWRCaXRzID0gMDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjaGFuZ2VkQml0cyA9IHR5cGVvZiBjYWxjdWxhdGVDaGFuZ2VkQml0cyA9PT0gJ2Z1bmN0aW9uJyA/IGNhbGN1bGF0ZUNoYW5nZWRCaXRzKG9sZFZhbHVlLCBuZXdWYWx1ZSkgOiBNQVhfU0lHTkVEXzMxX0JJVF9JTlQ7XG5cbiAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgICAgd2FybmluZygoY2hhbmdlZEJpdHMgJiBNQVhfU0lHTkVEXzMxX0JJVF9JTlQpID09PSBjaGFuZ2VkQml0cywgJ2NhbGN1bGF0ZUNoYW5nZWRCaXRzOiBFeHBlY3RlZCB0aGUgcmV0dXJuIHZhbHVlIHRvIGJlIGEgJyArICczMS1iaXQgaW50ZWdlci4gSW5zdGVhZCByZWNlaXZlZDogJyArIGNoYW5nZWRCaXRzKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjaGFuZ2VkQml0cyB8PSAwO1xuXG4gICAgICAgICAgaWYgKGNoYW5nZWRCaXRzICE9PSAwKSB7XG4gICAgICAgICAgICB0aGlzLmVtaXR0ZXIuc2V0KG5leHRQcm9wcy52YWx1ZSwgY2hhbmdlZEJpdHMpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgcmV0dXJuIHRoaXMucHJvcHMuY2hpbGRyZW47XG4gICAgfTtcblxuICAgIHJldHVybiBQcm92aWRlcjtcbiAgfShDb21wb25lbnQpO1xuXG4gIFByb3ZpZGVyLmNoaWxkQ29udGV4dFR5cGVzID0gKF9Qcm92aWRlciRjaGlsZENvbnRleCA9IHt9LCBfUHJvdmlkZXIkY2hpbGRDb250ZXhbY29udGV4dFByb3BdID0gUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLCBfUHJvdmlkZXIkY2hpbGRDb250ZXgpO1xuXG4gIHZhciBDb25zdW1lciA9XG4gIC8qI19fUFVSRV9fKi9cbiAgZnVuY3Rpb24gKF9Db21wb25lbnQyKSB7XG4gICAgX2luaGVyaXRzTG9vc2UoQ29uc3VtZXIsIF9Db21wb25lbnQyKTtcblxuICAgIGZ1bmN0aW9uIENvbnN1bWVyKCkge1xuICAgICAgdmFyIF90aGlzMjtcblxuICAgICAgX3RoaXMyID0gX0NvbXBvbmVudDIuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICAgICAgX3RoaXMyLnN0YXRlID0ge1xuICAgICAgICB2YWx1ZTogX3RoaXMyLmdldFZhbHVlKClcbiAgICAgIH07XG5cbiAgICAgIF90aGlzMi5vblVwZGF0ZSA9IGZ1bmN0aW9uIChuZXdWYWx1ZSwgY2hhbmdlZEJpdHMpIHtcbiAgICAgICAgdmFyIG9ic2VydmVkQml0cyA9IF90aGlzMi5vYnNlcnZlZEJpdHMgfCAwO1xuXG4gICAgICAgIGlmICgob2JzZXJ2ZWRCaXRzICYgY2hhbmdlZEJpdHMpICE9PSAwKSB7XG4gICAgICAgICAgX3RoaXMyLnNldFN0YXRlKHtcbiAgICAgICAgICAgIHZhbHVlOiBfdGhpczIuZ2V0VmFsdWUoKVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICByZXR1cm4gX3RoaXMyO1xuICAgIH1cblxuICAgIHZhciBfcHJvdG8yID0gQ29uc3VtZXIucHJvdG90eXBlO1xuXG4gICAgX3Byb3RvMi5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMpIHtcbiAgICAgIHZhciBvYnNlcnZlZEJpdHMgPSBuZXh0UHJvcHMub2JzZXJ2ZWRCaXRzO1xuICAgICAgdGhpcy5vYnNlcnZlZEJpdHMgPSBvYnNlcnZlZEJpdHMgPT09IHVuZGVmaW5lZCB8fCBvYnNlcnZlZEJpdHMgPT09IG51bGwgPyBNQVhfU0lHTkVEXzMxX0JJVF9JTlQgOiBvYnNlcnZlZEJpdHM7XG4gICAgfTtcblxuICAgIF9wcm90bzIuY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgIGlmICh0aGlzLmNvbnRleHRbY29udGV4dFByb3BdKSB7XG4gICAgICAgIHRoaXMuY29udGV4dFtjb250ZXh0UHJvcF0ub24odGhpcy5vblVwZGF0ZSk7XG4gICAgICB9XG5cbiAgICAgIHZhciBvYnNlcnZlZEJpdHMgPSB0aGlzLnByb3BzLm9ic2VydmVkQml0cztcbiAgICAgIHRoaXMub2JzZXJ2ZWRCaXRzID0gb2JzZXJ2ZWRCaXRzID09PSB1bmRlZmluZWQgfHwgb2JzZXJ2ZWRCaXRzID09PSBudWxsID8gTUFYX1NJR05FRF8zMV9CSVRfSU5UIDogb2JzZXJ2ZWRCaXRzO1xuICAgIH07XG5cbiAgICBfcHJvdG8yLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgICBpZiAodGhpcy5jb250ZXh0W2NvbnRleHRQcm9wXSkge1xuICAgICAgICB0aGlzLmNvbnRleHRbY29udGV4dFByb3BdLm9mZih0aGlzLm9uVXBkYXRlKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3Byb3RvMi5nZXRWYWx1ZSA9IGZ1bmN0aW9uIGdldFZhbHVlKCkge1xuICAgICAgaWYgKHRoaXMuY29udGV4dFtjb250ZXh0UHJvcF0pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29udGV4dFtjb250ZXh0UHJvcF0uZ2V0KCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gZGVmYXVsdFZhbHVlO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfcHJvdG8yLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHJldHVybiBvbmx5Q2hpbGQodGhpcy5wcm9wcy5jaGlsZHJlbikodGhpcy5zdGF0ZS52YWx1ZSk7XG4gICAgfTtcblxuICAgIHJldHVybiBDb25zdW1lcjtcbiAgfShDb21wb25lbnQpO1xuXG4gIENvbnN1bWVyLmNvbnRleHRUeXBlcyA9IChfQ29uc3VtZXIkY29udGV4dFR5cGUgPSB7fSwgX0NvbnN1bWVyJGNvbnRleHRUeXBlW2NvbnRleHRQcm9wXSA9IFByb3BUeXBlcy5vYmplY3QsIF9Db25zdW1lciRjb250ZXh0VHlwZSk7XG4gIHJldHVybiB7XG4gICAgUHJvdmlkZXI6IFByb3ZpZGVyLFxuICAgIENvbnN1bWVyOiBDb25zdW1lclxuICB9O1xufVxuXG52YXIgaW5kZXggPSBSZWFjdC5jcmVhdGVDb250ZXh0IHx8IGNyZWF0ZVJlYWN0Q29udGV4dDtcblxuZXhwb3J0IGRlZmF1bHQgaW5kZXg7XG4iLCJmdW5jdGlvbiBpc0Fic29sdXRlKHBhdGhuYW1lKSB7XG4gIHJldHVybiBwYXRobmFtZS5jaGFyQXQoMCkgPT09ICcvJztcbn1cblxuLy8gQWJvdXQgMS41eCBmYXN0ZXIgdGhhbiB0aGUgdHdvLWFyZyB2ZXJzaW9uIG9mIEFycmF5I3NwbGljZSgpXG5mdW5jdGlvbiBzcGxpY2VPbmUobGlzdCwgaW5kZXgpIHtcbiAgZm9yICh2YXIgaSA9IGluZGV4LCBrID0gaSArIDEsIG4gPSBsaXN0Lmxlbmd0aDsgayA8IG47IGkgKz0gMSwgayArPSAxKSB7XG4gICAgbGlzdFtpXSA9IGxpc3Rba107XG4gIH1cblxuICBsaXN0LnBvcCgpO1xufVxuXG4vLyBUaGlzIGltcGxlbWVudGF0aW9uIGlzIGJhc2VkIGhlYXZpbHkgb24gbm9kZSdzIHVybC5wYXJzZVxuZnVuY3Rpb24gcmVzb2x2ZVBhdGhuYW1lKHRvKSB7XG4gIHZhciBmcm9tID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiAnJztcblxuICB2YXIgdG9QYXJ0cyA9IHRvICYmIHRvLnNwbGl0KCcvJykgfHwgW107XG4gIHZhciBmcm9tUGFydHMgPSBmcm9tICYmIGZyb20uc3BsaXQoJy8nKSB8fCBbXTtcblxuICB2YXIgaXNUb0FicyA9IHRvICYmIGlzQWJzb2x1dGUodG8pO1xuICB2YXIgaXNGcm9tQWJzID0gZnJvbSAmJiBpc0Fic29sdXRlKGZyb20pO1xuICB2YXIgbXVzdEVuZEFicyA9IGlzVG9BYnMgfHwgaXNGcm9tQWJzO1xuXG4gIGlmICh0byAmJiBpc0Fic29sdXRlKHRvKSkge1xuICAgIC8vIHRvIGlzIGFic29sdXRlXG4gICAgZnJvbVBhcnRzID0gdG9QYXJ0cztcbiAgfSBlbHNlIGlmICh0b1BhcnRzLmxlbmd0aCkge1xuICAgIC8vIHRvIGlzIHJlbGF0aXZlLCBkcm9wIHRoZSBmaWxlbmFtZVxuICAgIGZyb21QYXJ0cy5wb3AoKTtcbiAgICBmcm9tUGFydHMgPSBmcm9tUGFydHMuY29uY2F0KHRvUGFydHMpO1xuICB9XG5cbiAgaWYgKCFmcm9tUGFydHMubGVuZ3RoKSByZXR1cm4gJy8nO1xuXG4gIHZhciBoYXNUcmFpbGluZ1NsYXNoID0gdm9pZCAwO1xuICBpZiAoZnJvbVBhcnRzLmxlbmd0aCkge1xuICAgIHZhciBsYXN0ID0gZnJvbVBhcnRzW2Zyb21QYXJ0cy5sZW5ndGggLSAxXTtcbiAgICBoYXNUcmFpbGluZ1NsYXNoID0gbGFzdCA9PT0gJy4nIHx8IGxhc3QgPT09ICcuLicgfHwgbGFzdCA9PT0gJyc7XG4gIH0gZWxzZSB7XG4gICAgaGFzVHJhaWxpbmdTbGFzaCA9IGZhbHNlO1xuICB9XG5cbiAgdmFyIHVwID0gMDtcbiAgZm9yICh2YXIgaSA9IGZyb21QYXJ0cy5sZW5ndGg7IGkgPj0gMDsgaS0tKSB7XG4gICAgdmFyIHBhcnQgPSBmcm9tUGFydHNbaV07XG5cbiAgICBpZiAocGFydCA9PT0gJy4nKSB7XG4gICAgICBzcGxpY2VPbmUoZnJvbVBhcnRzLCBpKTtcbiAgICB9IGVsc2UgaWYgKHBhcnQgPT09ICcuLicpIHtcbiAgICAgIHNwbGljZU9uZShmcm9tUGFydHMsIGkpO1xuICAgICAgdXArKztcbiAgICB9IGVsc2UgaWYgKHVwKSB7XG4gICAgICBzcGxpY2VPbmUoZnJvbVBhcnRzLCBpKTtcbiAgICAgIHVwLS07XG4gICAgfVxuICB9XG5cbiAgaWYgKCFtdXN0RW5kQWJzKSBmb3IgKDsgdXAtLTsgdXApIHtcbiAgICBmcm9tUGFydHMudW5zaGlmdCgnLi4nKTtcbiAgfWlmIChtdXN0RW5kQWJzICYmIGZyb21QYXJ0c1swXSAhPT0gJycgJiYgKCFmcm9tUGFydHNbMF0gfHwgIWlzQWJzb2x1dGUoZnJvbVBhcnRzWzBdKSkpIGZyb21QYXJ0cy51bnNoaWZ0KCcnKTtcblxuICB2YXIgcmVzdWx0ID0gZnJvbVBhcnRzLmpvaW4oJy8nKTtcblxuICBpZiAoaGFzVHJhaWxpbmdTbGFzaCAmJiByZXN1bHQuc3Vic3RyKC0xKSAhPT0gJy8nKSByZXN1bHQgKz0gJy8nO1xuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHJlc29sdmVQYXRobmFtZTsiLCJ2YXIgX3R5cGVvZiA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfSA6IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07XG5cbmZ1bmN0aW9uIHZhbHVlRXF1YWwoYSwgYikge1xuICBpZiAoYSA9PT0gYikgcmV0dXJuIHRydWU7XG5cbiAgaWYgKGEgPT0gbnVsbCB8fCBiID09IG51bGwpIHJldHVybiBmYWxzZTtcblxuICBpZiAoQXJyYXkuaXNBcnJheShhKSkge1xuICAgIHJldHVybiBBcnJheS5pc0FycmF5KGIpICYmIGEubGVuZ3RoID09PSBiLmxlbmd0aCAmJiBhLmV2ZXJ5KGZ1bmN0aW9uIChpdGVtLCBpbmRleCkge1xuICAgICAgcmV0dXJuIHZhbHVlRXF1YWwoaXRlbSwgYltpbmRleF0pO1xuICAgIH0pO1xuICB9XG5cbiAgdmFyIGFUeXBlID0gdHlwZW9mIGEgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKGEpO1xuICB2YXIgYlR5cGUgPSB0eXBlb2YgYiA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YoYik7XG5cbiAgaWYgKGFUeXBlICE9PSBiVHlwZSkgcmV0dXJuIGZhbHNlO1xuXG4gIGlmIChhVHlwZSA9PT0gJ29iamVjdCcpIHtcbiAgICB2YXIgYVZhbHVlID0gYS52YWx1ZU9mKCk7XG4gICAgdmFyIGJWYWx1ZSA9IGIudmFsdWVPZigpO1xuXG4gICAgaWYgKGFWYWx1ZSAhPT0gYSB8fCBiVmFsdWUgIT09IGIpIHJldHVybiB2YWx1ZUVxdWFsKGFWYWx1ZSwgYlZhbHVlKTtcblxuICAgIHZhciBhS2V5cyA9IE9iamVjdC5rZXlzKGEpO1xuICAgIHZhciBiS2V5cyA9IE9iamVjdC5rZXlzKGIpO1xuXG4gICAgaWYgKGFLZXlzLmxlbmd0aCAhPT0gYktleXMubGVuZ3RoKSByZXR1cm4gZmFsc2U7XG5cbiAgICByZXR1cm4gYUtleXMuZXZlcnkoZnVuY3Rpb24gKGtleSkge1xuICAgICAgcmV0dXJuIHZhbHVlRXF1YWwoYVtrZXldLCBiW2tleV0pO1xuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5leHBvcnQgZGVmYXVsdCB2YWx1ZUVxdWFsOyIsInZhciBpc1Byb2R1Y3Rpb24gPSBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nO1xudmFyIHByZWZpeCA9ICdJbnZhcmlhbnQgZmFpbGVkJztcbmZ1bmN0aW9uIGludmFyaWFudChjb25kaXRpb24sIG1lc3NhZ2UpIHtcbiAgaWYgKGNvbmRpdGlvbikge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmIChpc1Byb2R1Y3Rpb24pIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IocHJlZml4KTtcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IocHJlZml4ICsgXCI6IFwiICsgKG1lc3NhZ2UgfHwgJycpKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBpbnZhcmlhbnQ7XG4iLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kcyc7XG5pbXBvcnQgcmVzb2x2ZVBhdGhuYW1lIGZyb20gJ3Jlc29sdmUtcGF0aG5hbWUnO1xuaW1wb3J0IHZhbHVlRXF1YWwgZnJvbSAndmFsdWUtZXF1YWwnO1xuaW1wb3J0IHdhcm5pbmcgZnJvbSAndGlueS13YXJuaW5nJztcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSAndGlueS1pbnZhcmlhbnQnO1xuXG5mdW5jdGlvbiBhZGRMZWFkaW5nU2xhc2gocGF0aCkge1xuICByZXR1cm4gcGF0aC5jaGFyQXQoMCkgPT09ICcvJyA/IHBhdGggOiAnLycgKyBwYXRoO1xufVxuZnVuY3Rpb24gc3RyaXBMZWFkaW5nU2xhc2gocGF0aCkge1xuICByZXR1cm4gcGF0aC5jaGFyQXQoMCkgPT09ICcvJyA/IHBhdGguc3Vic3RyKDEpIDogcGF0aDtcbn1cbmZ1bmN0aW9uIGhhc0Jhc2VuYW1lKHBhdGgsIHByZWZpeCkge1xuICByZXR1cm4gbmV3IFJlZ0V4cCgnXicgKyBwcmVmaXggKyAnKFxcXFwvfFxcXFw/fCN8JCknLCAnaScpLnRlc3QocGF0aCk7XG59XG5mdW5jdGlvbiBzdHJpcEJhc2VuYW1lKHBhdGgsIHByZWZpeCkge1xuICByZXR1cm4gaGFzQmFzZW5hbWUocGF0aCwgcHJlZml4KSA/IHBhdGguc3Vic3RyKHByZWZpeC5sZW5ndGgpIDogcGF0aDtcbn1cbmZ1bmN0aW9uIHN0cmlwVHJhaWxpbmdTbGFzaChwYXRoKSB7XG4gIHJldHVybiBwYXRoLmNoYXJBdChwYXRoLmxlbmd0aCAtIDEpID09PSAnLycgPyBwYXRoLnNsaWNlKDAsIC0xKSA6IHBhdGg7XG59XG5mdW5jdGlvbiBwYXJzZVBhdGgocGF0aCkge1xuICB2YXIgcGF0aG5hbWUgPSBwYXRoIHx8ICcvJztcbiAgdmFyIHNlYXJjaCA9ICcnO1xuICB2YXIgaGFzaCA9ICcnO1xuICB2YXIgaGFzaEluZGV4ID0gcGF0aG5hbWUuaW5kZXhPZignIycpO1xuXG4gIGlmIChoYXNoSW5kZXggIT09IC0xKSB7XG4gICAgaGFzaCA9IHBhdGhuYW1lLnN1YnN0cihoYXNoSW5kZXgpO1xuICAgIHBhdGhuYW1lID0gcGF0aG5hbWUuc3Vic3RyKDAsIGhhc2hJbmRleCk7XG4gIH1cblxuICB2YXIgc2VhcmNoSW5kZXggPSBwYXRobmFtZS5pbmRleE9mKCc/Jyk7XG5cbiAgaWYgKHNlYXJjaEluZGV4ICE9PSAtMSkge1xuICAgIHNlYXJjaCA9IHBhdGhuYW1lLnN1YnN0cihzZWFyY2hJbmRleCk7XG4gICAgcGF0aG5hbWUgPSBwYXRobmFtZS5zdWJzdHIoMCwgc2VhcmNoSW5kZXgpO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBwYXRobmFtZTogcGF0aG5hbWUsXG4gICAgc2VhcmNoOiBzZWFyY2ggPT09ICc/JyA/ICcnIDogc2VhcmNoLFxuICAgIGhhc2g6IGhhc2ggPT09ICcjJyA/ICcnIDogaGFzaFxuICB9O1xufVxuZnVuY3Rpb24gY3JlYXRlUGF0aChsb2NhdGlvbikge1xuICB2YXIgcGF0aG5hbWUgPSBsb2NhdGlvbi5wYXRobmFtZSxcbiAgICAgIHNlYXJjaCA9IGxvY2F0aW9uLnNlYXJjaCxcbiAgICAgIGhhc2ggPSBsb2NhdGlvbi5oYXNoO1xuICB2YXIgcGF0aCA9IHBhdGhuYW1lIHx8ICcvJztcbiAgaWYgKHNlYXJjaCAmJiBzZWFyY2ggIT09ICc/JykgcGF0aCArPSBzZWFyY2guY2hhckF0KDApID09PSAnPycgPyBzZWFyY2ggOiBcIj9cIiArIHNlYXJjaDtcbiAgaWYgKGhhc2ggJiYgaGFzaCAhPT0gJyMnKSBwYXRoICs9IGhhc2guY2hhckF0KDApID09PSAnIycgPyBoYXNoIDogXCIjXCIgKyBoYXNoO1xuICByZXR1cm4gcGF0aDtcbn1cblxuZnVuY3Rpb24gY3JlYXRlTG9jYXRpb24ocGF0aCwgc3RhdGUsIGtleSwgY3VycmVudExvY2F0aW9uKSB7XG4gIHZhciBsb2NhdGlvbjtcblxuICBpZiAodHlwZW9mIHBhdGggPT09ICdzdHJpbmcnKSB7XG4gICAgLy8gVHdvLWFyZyBmb3JtOiBwdXNoKHBhdGgsIHN0YXRlKVxuICAgIGxvY2F0aW9uID0gcGFyc2VQYXRoKHBhdGgpO1xuICAgIGxvY2F0aW9uLnN0YXRlID0gc3RhdGU7XG4gIH0gZWxzZSB7XG4gICAgLy8gT25lLWFyZyBmb3JtOiBwdXNoKGxvY2F0aW9uKVxuICAgIGxvY2F0aW9uID0gX2V4dGVuZHMoe30sIHBhdGgpO1xuICAgIGlmIChsb2NhdGlvbi5wYXRobmFtZSA9PT0gdW5kZWZpbmVkKSBsb2NhdGlvbi5wYXRobmFtZSA9ICcnO1xuXG4gICAgaWYgKGxvY2F0aW9uLnNlYXJjaCkge1xuICAgICAgaWYgKGxvY2F0aW9uLnNlYXJjaC5jaGFyQXQoMCkgIT09ICc/JykgbG9jYXRpb24uc2VhcmNoID0gJz8nICsgbG9jYXRpb24uc2VhcmNoO1xuICAgIH0gZWxzZSB7XG4gICAgICBsb2NhdGlvbi5zZWFyY2ggPSAnJztcbiAgICB9XG5cbiAgICBpZiAobG9jYXRpb24uaGFzaCkge1xuICAgICAgaWYgKGxvY2F0aW9uLmhhc2guY2hhckF0KDApICE9PSAnIycpIGxvY2F0aW9uLmhhc2ggPSAnIycgKyBsb2NhdGlvbi5oYXNoO1xuICAgIH0gZWxzZSB7XG4gICAgICBsb2NhdGlvbi5oYXNoID0gJyc7XG4gICAgfVxuXG4gICAgaWYgKHN0YXRlICE9PSB1bmRlZmluZWQgJiYgbG9jYXRpb24uc3RhdGUgPT09IHVuZGVmaW5lZCkgbG9jYXRpb24uc3RhdGUgPSBzdGF0ZTtcbiAgfVxuXG4gIHRyeSB7XG4gICAgbG9jYXRpb24ucGF0aG5hbWUgPSBkZWNvZGVVUkkobG9jYXRpb24ucGF0aG5hbWUpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgaWYgKGUgaW5zdGFuY2VvZiBVUklFcnJvcikge1xuICAgICAgdGhyb3cgbmV3IFVSSUVycm9yKCdQYXRobmFtZSBcIicgKyBsb2NhdGlvbi5wYXRobmFtZSArICdcIiBjb3VsZCBub3QgYmUgZGVjb2RlZC4gJyArICdUaGlzIGlzIGxpa2VseSBjYXVzZWQgYnkgYW4gaW52YWxpZCBwZXJjZW50LWVuY29kaW5nLicpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBlO1xuICAgIH1cbiAgfVxuXG4gIGlmIChrZXkpIGxvY2F0aW9uLmtleSA9IGtleTtcblxuICBpZiAoY3VycmVudExvY2F0aW9uKSB7XG4gICAgLy8gUmVzb2x2ZSBpbmNvbXBsZXRlL3JlbGF0aXZlIHBhdGhuYW1lIHJlbGF0aXZlIHRvIGN1cnJlbnQgbG9jYXRpb24uXG4gICAgaWYgKCFsb2NhdGlvbi5wYXRobmFtZSkge1xuICAgICAgbG9jYXRpb24ucGF0aG5hbWUgPSBjdXJyZW50TG9jYXRpb24ucGF0aG5hbWU7XG4gICAgfSBlbHNlIGlmIChsb2NhdGlvbi5wYXRobmFtZS5jaGFyQXQoMCkgIT09ICcvJykge1xuICAgICAgbG9jYXRpb24ucGF0aG5hbWUgPSByZXNvbHZlUGF0aG5hbWUobG9jYXRpb24ucGF0aG5hbWUsIGN1cnJlbnRMb2NhdGlvbi5wYXRobmFtZSk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIFdoZW4gdGhlcmUgaXMgbm8gcHJpb3IgbG9jYXRpb24gYW5kIHBhdGhuYW1lIGlzIGVtcHR5LCBzZXQgaXQgdG8gL1xuICAgIGlmICghbG9jYXRpb24ucGF0aG5hbWUpIHtcbiAgICAgIGxvY2F0aW9uLnBhdGhuYW1lID0gJy8nO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBsb2NhdGlvbjtcbn1cbmZ1bmN0aW9uIGxvY2F0aW9uc0FyZUVxdWFsKGEsIGIpIHtcbiAgcmV0dXJuIGEucGF0aG5hbWUgPT09IGIucGF0aG5hbWUgJiYgYS5zZWFyY2ggPT09IGIuc2VhcmNoICYmIGEuaGFzaCA9PT0gYi5oYXNoICYmIGEua2V5ID09PSBiLmtleSAmJiB2YWx1ZUVxdWFsKGEuc3RhdGUsIGIuc3RhdGUpO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVUcmFuc2l0aW9uTWFuYWdlcigpIHtcbiAgdmFyIHByb21wdCA9IG51bGw7XG5cbiAgZnVuY3Rpb24gc2V0UHJvbXB0KG5leHRQcm9tcHQpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKHByb21wdCA9PSBudWxsLCAnQSBoaXN0b3J5IHN1cHBvcnRzIG9ubHkgb25lIHByb21wdCBhdCBhIHRpbWUnKSA6IHZvaWQgMDtcbiAgICBwcm9tcHQgPSBuZXh0UHJvbXB0O1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAocHJvbXB0ID09PSBuZXh0UHJvbXB0KSBwcm9tcHQgPSBudWxsO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBjb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGNhbGxiYWNrKSB7XG4gICAgLy8gVE9ETzogSWYgYW5vdGhlciB0cmFuc2l0aW9uIHN0YXJ0cyB3aGlsZSB3ZSdyZSBzdGlsbCBjb25maXJtaW5nXG4gICAgLy8gdGhlIHByZXZpb3VzIG9uZSwgd2UgbWF5IGVuZCB1cCBpbiBhIHdlaXJkIHN0YXRlLiBGaWd1cmUgb3V0IHRoZVxuICAgIC8vIGJlc3Qgd2F5IHRvIGhhbmRsZSB0aGlzLlxuICAgIGlmIChwcm9tcHQgIT0gbnVsbCkge1xuICAgICAgdmFyIHJlc3VsdCA9IHR5cGVvZiBwcm9tcHQgPT09ICdmdW5jdGlvbicgPyBwcm9tcHQobG9jYXRpb24sIGFjdGlvbikgOiBwcm9tcHQ7XG5cbiAgICAgIGlmICh0eXBlb2YgcmVzdWx0ID09PSAnc3RyaW5nJykge1xuICAgICAgICBpZiAodHlwZW9mIGdldFVzZXJDb25maXJtYXRpb24gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICBnZXRVc2VyQ29uZmlybWF0aW9uKHJlc3VsdCwgY2FsbGJhY2spO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoZmFsc2UsICdBIGhpc3RvcnkgbmVlZHMgYSBnZXRVc2VyQ29uZmlybWF0aW9uIGZ1bmN0aW9uIGluIG9yZGVyIHRvIHVzZSBhIHByb21wdCBtZXNzYWdlJykgOiB2b2lkIDA7XG4gICAgICAgICAgY2FsbGJhY2sodHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIFJldHVybiBmYWxzZSBmcm9tIGEgdHJhbnNpdGlvbiBob29rIHRvIGNhbmNlbCB0aGUgdHJhbnNpdGlvbi5cbiAgICAgICAgY2FsbGJhY2socmVzdWx0ICE9PSBmYWxzZSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGNhbGxiYWNrKHRydWUpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBsaXN0ZW5lcnMgPSBbXTtcblxuICBmdW5jdGlvbiBhcHBlbmRMaXN0ZW5lcihmbikge1xuICAgIHZhciBpc0FjdGl2ZSA9IHRydWU7XG5cbiAgICBmdW5jdGlvbiBsaXN0ZW5lcigpIHtcbiAgICAgIGlmIChpc0FjdGl2ZSkgZm4uYXBwbHkodm9pZCAwLCBhcmd1bWVudHMpO1xuICAgIH1cblxuICAgIGxpc3RlbmVycy5wdXNoKGxpc3RlbmVyKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgaXNBY3RpdmUgPSBmYWxzZTtcbiAgICAgIGxpc3RlbmVycyA9IGxpc3RlbmVycy5maWx0ZXIoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgcmV0dXJuIGl0ZW0gIT09IGxpc3RlbmVyO1xuICAgICAgfSk7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG5vdGlmeUxpc3RlbmVycygpIHtcbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgbGlzdGVuZXJzLmZvckVhY2goZnVuY3Rpb24gKGxpc3RlbmVyKSB7XG4gICAgICByZXR1cm4gbGlzdGVuZXIuYXBwbHkodm9pZCAwLCBhcmdzKTtcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgc2V0UHJvbXB0OiBzZXRQcm9tcHQsXG4gICAgY29uZmlybVRyYW5zaXRpb25UbzogY29uZmlybVRyYW5zaXRpb25UbyxcbiAgICBhcHBlbmRMaXN0ZW5lcjogYXBwZW5kTGlzdGVuZXIsXG4gICAgbm90aWZ5TGlzdGVuZXJzOiBub3RpZnlMaXN0ZW5lcnNcbiAgfTtcbn1cblxudmFyIGNhblVzZURPTSA9ICEhKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5kb2N1bWVudCAmJiB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCk7XG5mdW5jdGlvbiBnZXRDb25maXJtYXRpb24obWVzc2FnZSwgY2FsbGJhY2spIHtcbiAgY2FsbGJhY2sod2luZG93LmNvbmZpcm0obWVzc2FnZSkpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWFsZXJ0XG59XG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgSFRNTDUgaGlzdG9yeSBBUEkgaXMgc3VwcG9ydGVkLiBUYWtlbiBmcm9tIE1vZGVybml6ci5cbiAqXG4gKiBodHRwczovL2dpdGh1Yi5jb20vTW9kZXJuaXpyL01vZGVybml6ci9ibG9iL21hc3Rlci9MSUNFTlNFXG4gKiBodHRwczovL2dpdGh1Yi5jb20vTW9kZXJuaXpyL01vZGVybml6ci9ibG9iL21hc3Rlci9mZWF0dXJlLWRldGVjdHMvaGlzdG9yeS5qc1xuICogY2hhbmdlZCB0byBhdm9pZCBmYWxzZSBuZWdhdGl2ZXMgZm9yIFdpbmRvd3MgUGhvbmVzOiBodHRwczovL2dpdGh1Yi5jb20vcmVhY3Rqcy9yZWFjdC1yb3V0ZXIvaXNzdWVzLzU4NlxuICovXG5cbmZ1bmN0aW9uIHN1cHBvcnRzSGlzdG9yeSgpIHtcbiAgdmFyIHVhID0gd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQ7XG4gIGlmICgodWEuaW5kZXhPZignQW5kcm9pZCAyLicpICE9PSAtMSB8fCB1YS5pbmRleE9mKCdBbmRyb2lkIDQuMCcpICE9PSAtMSkgJiYgdWEuaW5kZXhPZignTW9iaWxlIFNhZmFyaScpICE9PSAtMSAmJiB1YS5pbmRleE9mKCdDaHJvbWUnKSA9PT0gLTEgJiYgdWEuaW5kZXhPZignV2luZG93cyBQaG9uZScpID09PSAtMSkgcmV0dXJuIGZhbHNlO1xuICByZXR1cm4gd2luZG93Lmhpc3RvcnkgJiYgJ3B1c2hTdGF0ZScgaW4gd2luZG93Lmhpc3Rvcnk7XG59XG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiBicm93c2VyIGZpcmVzIHBvcHN0YXRlIG9uIGhhc2ggY2hhbmdlLlxuICogSUUxMCBhbmQgSUUxMSBkbyBub3QuXG4gKi9cblxuZnVuY3Rpb24gc3VwcG9ydHNQb3BTdGF0ZU9uSGFzaENoYW5nZSgpIHtcbiAgcmV0dXJuIHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoJ1RyaWRlbnQnKSA9PT0gLTE7XG59XG4vKipcbiAqIFJldHVybnMgZmFsc2UgaWYgdXNpbmcgZ28obikgd2l0aCBoYXNoIGhpc3RvcnkgY2F1c2VzIGEgZnVsbCBwYWdlIHJlbG9hZC5cbiAqL1xuXG5mdW5jdGlvbiBzdXBwb3J0c0dvV2l0aG91dFJlbG9hZFVzaW5nSGFzaCgpIHtcbiAgcmV0dXJuIHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoJ0ZpcmVmb3gnKSA9PT0gLTE7XG59XG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiBhIGdpdmVuIHBvcHN0YXRlIGV2ZW50IGlzIGFuIGV4dHJhbmVvdXMgV2ViS2l0IGV2ZW50LlxuICogQWNjb3VudHMgZm9yIHRoZSBmYWN0IHRoYXQgQ2hyb21lIG9uIGlPUyBmaXJlcyByZWFsIHBvcHN0YXRlIGV2ZW50c1xuICogY29udGFpbmluZyB1bmRlZmluZWQgc3RhdGUgd2hlbiBwcmVzc2luZyB0aGUgYmFjayBidXR0b24uXG4gKi9cblxuZnVuY3Rpb24gaXNFeHRyYW5lb3VzUG9wc3RhdGVFdmVudChldmVudCkge1xuICBldmVudC5zdGF0ZSA9PT0gdW5kZWZpbmVkICYmIG5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignQ3JpT1MnKSA9PT0gLTE7XG59XG5cbnZhciBQb3BTdGF0ZUV2ZW50ID0gJ3BvcHN0YXRlJztcbnZhciBIYXNoQ2hhbmdlRXZlbnQgPSAnaGFzaGNoYW5nZSc7XG5cbmZ1bmN0aW9uIGdldEhpc3RvcnlTdGF0ZSgpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gd2luZG93Lmhpc3Rvcnkuc3RhdGUgfHwge307XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICAvLyBJRSAxMSBzb21ldGltZXMgdGhyb3dzIHdoZW4gYWNjZXNzaW5nIHdpbmRvdy5oaXN0b3J5LnN0YXRlXG4gICAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9SZWFjdFRyYWluaW5nL2hpc3RvcnkvcHVsbC8yODlcbiAgICByZXR1cm4ge307XG4gIH1cbn1cbi8qKlxuICogQ3JlYXRlcyBhIGhpc3Rvcnkgb2JqZWN0IHRoYXQgdXNlcyB0aGUgSFRNTDUgaGlzdG9yeSBBUEkgaW5jbHVkaW5nXG4gKiBwdXNoU3RhdGUsIHJlcGxhY2VTdGF0ZSwgYW5kIHRoZSBwb3BzdGF0ZSBldmVudC5cbiAqL1xuXG5cbmZ1bmN0aW9uIGNyZWF0ZUJyb3dzZXJIaXN0b3J5KHByb3BzKSB7XG4gIGlmIChwcm9wcyA9PT0gdm9pZCAwKSB7XG4gICAgcHJvcHMgPSB7fTtcbiAgfVxuXG4gICFjYW5Vc2VET00gPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdCcm93c2VyIGhpc3RvcnkgbmVlZHMgYSBET00nKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIHZhciBnbG9iYWxIaXN0b3J5ID0gd2luZG93Lmhpc3Rvcnk7XG4gIHZhciBjYW5Vc2VIaXN0b3J5ID0gc3VwcG9ydHNIaXN0b3J5KCk7XG4gIHZhciBuZWVkc0hhc2hDaGFuZ2VMaXN0ZW5lciA9ICFzdXBwb3J0c1BvcFN0YXRlT25IYXNoQ2hhbmdlKCk7XG4gIHZhciBfcHJvcHMgPSBwcm9wcyxcbiAgICAgIF9wcm9wcyRmb3JjZVJlZnJlc2ggPSBfcHJvcHMuZm9yY2VSZWZyZXNoLFxuICAgICAgZm9yY2VSZWZyZXNoID0gX3Byb3BzJGZvcmNlUmVmcmVzaCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkZm9yY2VSZWZyZXNoLFxuICAgICAgX3Byb3BzJGdldFVzZXJDb25maXJtID0gX3Byb3BzLmdldFVzZXJDb25maXJtYXRpb24sXG4gICAgICBnZXRVc2VyQ29uZmlybWF0aW9uID0gX3Byb3BzJGdldFVzZXJDb25maXJtID09PSB2b2lkIDAgPyBnZXRDb25maXJtYXRpb24gOiBfcHJvcHMkZ2V0VXNlckNvbmZpcm0sXG4gICAgICBfcHJvcHMka2V5TGVuZ3RoID0gX3Byb3BzLmtleUxlbmd0aCxcbiAgICAgIGtleUxlbmd0aCA9IF9wcm9wcyRrZXlMZW5ndGggPT09IHZvaWQgMCA/IDYgOiBfcHJvcHMka2V5TGVuZ3RoO1xuICB2YXIgYmFzZW5hbWUgPSBwcm9wcy5iYXNlbmFtZSA/IHN0cmlwVHJhaWxpbmdTbGFzaChhZGRMZWFkaW5nU2xhc2gocHJvcHMuYmFzZW5hbWUpKSA6ICcnO1xuXG4gIGZ1bmN0aW9uIGdldERPTUxvY2F0aW9uKGhpc3RvcnlTdGF0ZSkge1xuICAgIHZhciBfcmVmID0gaGlzdG9yeVN0YXRlIHx8IHt9LFxuICAgICAgICBrZXkgPSBfcmVmLmtleSxcbiAgICAgICAgc3RhdGUgPSBfcmVmLnN0YXRlO1xuXG4gICAgdmFyIF93aW5kb3ckbG9jYXRpb24gPSB3aW5kb3cubG9jYXRpb24sXG4gICAgICAgIHBhdGhuYW1lID0gX3dpbmRvdyRsb2NhdGlvbi5wYXRobmFtZSxcbiAgICAgICAgc2VhcmNoID0gX3dpbmRvdyRsb2NhdGlvbi5zZWFyY2gsXG4gICAgICAgIGhhc2ggPSBfd2luZG93JGxvY2F0aW9uLmhhc2g7XG4gICAgdmFyIHBhdGggPSBwYXRobmFtZSArIHNlYXJjaCArIGhhc2g7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghYmFzZW5hbWUgfHwgaGFzQmFzZW5hbWUocGF0aCwgYmFzZW5hbWUpLCAnWW91IGFyZSBhdHRlbXB0aW5nIHRvIHVzZSBhIGJhc2VuYW1lIG9uIGEgcGFnZSB3aG9zZSBVUkwgcGF0aCBkb2VzIG5vdCBiZWdpbiAnICsgJ3dpdGggdGhlIGJhc2VuYW1lLiBFeHBlY3RlZCBwYXRoIFwiJyArIHBhdGggKyAnXCIgdG8gYmVnaW4gd2l0aCBcIicgKyBiYXNlbmFtZSArICdcIi4nKSA6IHZvaWQgMDtcbiAgICBpZiAoYmFzZW5hbWUpIHBhdGggPSBzdHJpcEJhc2VuYW1lKHBhdGgsIGJhc2VuYW1lKTtcbiAgICByZXR1cm4gY3JlYXRlTG9jYXRpb24ocGF0aCwgc3RhdGUsIGtleSk7XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVLZXkoKSB7XG4gICAgcmV0dXJuIE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cigyLCBrZXlMZW5ndGgpO1xuICB9XG5cbiAgdmFyIHRyYW5zaXRpb25NYW5hZ2VyID0gY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIoKTtcblxuICBmdW5jdGlvbiBzZXRTdGF0ZShuZXh0U3RhdGUpIHtcbiAgICBfZXh0ZW5kcyhoaXN0b3J5LCBuZXh0U3RhdGUpO1xuXG4gICAgaGlzdG9yeS5sZW5ndGggPSBnbG9iYWxIaXN0b3J5Lmxlbmd0aDtcbiAgICB0cmFuc2l0aW9uTWFuYWdlci5ub3RpZnlMaXN0ZW5lcnMoaGlzdG9yeS5sb2NhdGlvbiwgaGlzdG9yeS5hY3Rpb24pO1xuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlUG9wU3RhdGUoZXZlbnQpIHtcbiAgICAvLyBJZ25vcmUgZXh0cmFuZW91cyBwb3BzdGF0ZSBldmVudHMgaW4gV2ViS2l0LlxuICAgIGlmIChpc0V4dHJhbmVvdXNQb3BzdGF0ZUV2ZW50KGV2ZW50KSkgcmV0dXJuO1xuICAgIGhhbmRsZVBvcChnZXRET01Mb2NhdGlvbihldmVudC5zdGF0ZSkpO1xuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlSGFzaENoYW5nZSgpIHtcbiAgICBoYW5kbGVQb3AoZ2V0RE9NTG9jYXRpb24oZ2V0SGlzdG9yeVN0YXRlKCkpKTtcbiAgfVxuXG4gIHZhciBmb3JjZU5leHRQb3AgPSBmYWxzZTtcblxuICBmdW5jdGlvbiBoYW5kbGVQb3AobG9jYXRpb24pIHtcbiAgICBpZiAoZm9yY2VOZXh0UG9wKSB7XG4gICAgICBmb3JjZU5leHRQb3AgPSBmYWxzZTtcbiAgICAgIHNldFN0YXRlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBhY3Rpb24gPSAnUE9QJztcbiAgICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICAgIGlmIChvaykge1xuICAgICAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV2ZXJ0UG9wKGxvY2F0aW9uKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcmV2ZXJ0UG9wKGZyb21Mb2NhdGlvbikge1xuICAgIHZhciB0b0xvY2F0aW9uID0gaGlzdG9yeS5sb2NhdGlvbjsgLy8gVE9ETzogV2UgY291bGQgcHJvYmFibHkgbWFrZSB0aGlzIG1vcmUgcmVsaWFibGUgYnlcbiAgICAvLyBrZWVwaW5nIGEgbGlzdCBvZiBrZXlzIHdlJ3ZlIHNlZW4gaW4gc2Vzc2lvblN0b3JhZ2UuXG4gICAgLy8gSW5zdGVhZCwgd2UganVzdCBkZWZhdWx0IHRvIDAgZm9yIGtleXMgd2UgZG9uJ3Qga25vdy5cblxuICAgIHZhciB0b0luZGV4ID0gYWxsS2V5cy5pbmRleE9mKHRvTG9jYXRpb24ua2V5KTtcbiAgICBpZiAodG9JbmRleCA9PT0gLTEpIHRvSW5kZXggPSAwO1xuICAgIHZhciBmcm9tSW5kZXggPSBhbGxLZXlzLmluZGV4T2YoZnJvbUxvY2F0aW9uLmtleSk7XG4gICAgaWYgKGZyb21JbmRleCA9PT0gLTEpIGZyb21JbmRleCA9IDA7XG4gICAgdmFyIGRlbHRhID0gdG9JbmRleCAtIGZyb21JbmRleDtcblxuICAgIGlmIChkZWx0YSkge1xuICAgICAgZm9yY2VOZXh0UG9wID0gdHJ1ZTtcbiAgICAgIGdvKGRlbHRhKTtcbiAgICB9XG4gIH1cblxuICB2YXIgaW5pdGlhbExvY2F0aW9uID0gZ2V0RE9NTG9jYXRpb24oZ2V0SGlzdG9yeVN0YXRlKCkpO1xuICB2YXIgYWxsS2V5cyA9IFtpbml0aWFsTG9jYXRpb24ua2V5XTsgLy8gUHVibGljIGludGVyZmFjZVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUhyZWYobG9jYXRpb24pIHtcbiAgICByZXR1cm4gYmFzZW5hbWUgKyBjcmVhdGVQYXRoKGxvY2F0aW9uKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHB1c2gocGF0aCwgc3RhdGUpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCEodHlwZW9mIHBhdGggPT09ICdvYmplY3QnICYmIHBhdGguc3RhdGUgIT09IHVuZGVmaW5lZCAmJiBzdGF0ZSAhPT0gdW5kZWZpbmVkKSwgJ1lvdSBzaG91bGQgYXZvaWQgcHJvdmlkaW5nIGEgMm5kIHN0YXRlIGFyZ3VtZW50IHRvIHB1c2ggd2hlbiB0aGUgMXN0ICcgKyAnYXJndW1lbnQgaXMgYSBsb2NhdGlvbi1saWtlIG9iamVjdCB0aGF0IGFscmVhZHkgaGFzIHN0YXRlOyBpdCBpcyBpZ25vcmVkJykgOiB2b2lkIDA7XG4gICAgdmFyIGFjdGlvbiA9ICdQVVNIJztcbiAgICB2YXIgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihwYXRoLCBzdGF0ZSwgY3JlYXRlS2V5KCksIGhpc3RvcnkubG9jYXRpb24pO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAoIW9rKSByZXR1cm47XG4gICAgICB2YXIgaHJlZiA9IGNyZWF0ZUhyZWYobG9jYXRpb24pO1xuICAgICAgdmFyIGtleSA9IGxvY2F0aW9uLmtleSxcbiAgICAgICAgICBzdGF0ZSA9IGxvY2F0aW9uLnN0YXRlO1xuXG4gICAgICBpZiAoY2FuVXNlSGlzdG9yeSkge1xuICAgICAgICBnbG9iYWxIaXN0b3J5LnB1c2hTdGF0ZSh7XG4gICAgICAgICAga2V5OiBrZXksXG4gICAgICAgICAgc3RhdGU6IHN0YXRlXG4gICAgICAgIH0sIG51bGwsIGhyZWYpO1xuXG4gICAgICAgIGlmIChmb3JjZVJlZnJlc2gpIHtcbiAgICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IGhyZWY7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIHByZXZJbmRleCA9IGFsbEtleXMuaW5kZXhPZihoaXN0b3J5LmxvY2F0aW9uLmtleSk7XG4gICAgICAgICAgdmFyIG5leHRLZXlzID0gYWxsS2V5cy5zbGljZSgwLCBwcmV2SW5kZXggPT09IC0xID8gMCA6IHByZXZJbmRleCArIDEpO1xuICAgICAgICAgIG5leHRLZXlzLnB1c2gobG9jYXRpb24ua2V5KTtcbiAgICAgICAgICBhbGxLZXlzID0gbmV4dEtleXM7XG4gICAgICAgICAgc2V0U3RhdGUoe1xuICAgICAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgICAgICBsb2NhdGlvbjogbG9jYXRpb25cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhzdGF0ZSA9PT0gdW5kZWZpbmVkLCAnQnJvd3NlciBoaXN0b3J5IGNhbm5vdCBwdXNoIHN0YXRlIGluIGJyb3dzZXJzIHRoYXQgZG8gbm90IHN1cHBvcnQgSFRNTDUgaGlzdG9yeScpIDogdm9pZCAwO1xuICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IGhyZWY7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiByZXBsYWNlKHBhdGgsIHN0YXRlKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghKHR5cGVvZiBwYXRoID09PSAnb2JqZWN0JyAmJiBwYXRoLnN0YXRlICE9PSB1bmRlZmluZWQgJiYgc3RhdGUgIT09IHVuZGVmaW5lZCksICdZb3Ugc2hvdWxkIGF2b2lkIHByb3ZpZGluZyBhIDJuZCBzdGF0ZSBhcmd1bWVudCB0byByZXBsYWNlIHdoZW4gdGhlIDFzdCAnICsgJ2FyZ3VtZW50IGlzIGEgbG9jYXRpb24tbGlrZSBvYmplY3QgdGhhdCBhbHJlYWR5IGhhcyBzdGF0ZTsgaXQgaXMgaWdub3JlZCcpIDogdm9pZCAwO1xuICAgIHZhciBhY3Rpb24gPSAnUkVQTEFDRSc7XG4gICAgdmFyIGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24ocGF0aCwgc3RhdGUsIGNyZWF0ZUtleSgpLCBoaXN0b3J5LmxvY2F0aW9uKTtcbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKCFvaykgcmV0dXJuO1xuICAgICAgdmFyIGhyZWYgPSBjcmVhdGVIcmVmKGxvY2F0aW9uKTtcbiAgICAgIHZhciBrZXkgPSBsb2NhdGlvbi5rZXksXG4gICAgICAgICAgc3RhdGUgPSBsb2NhdGlvbi5zdGF0ZTtcblxuICAgICAgaWYgKGNhblVzZUhpc3RvcnkpIHtcbiAgICAgICAgZ2xvYmFsSGlzdG9yeS5yZXBsYWNlU3RhdGUoe1xuICAgICAgICAgIGtleToga2V5LFxuICAgICAgICAgIHN0YXRlOiBzdGF0ZVxuICAgICAgICB9LCBudWxsLCBocmVmKTtcblxuICAgICAgICBpZiAoZm9yY2VSZWZyZXNoKSB7XG4gICAgICAgICAgd2luZG93LmxvY2F0aW9uLnJlcGxhY2UoaHJlZik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIHByZXZJbmRleCA9IGFsbEtleXMuaW5kZXhPZihoaXN0b3J5LmxvY2F0aW9uLmtleSk7XG4gICAgICAgICAgaWYgKHByZXZJbmRleCAhPT0gLTEpIGFsbEtleXNbcHJldkluZGV4XSA9IGxvY2F0aW9uLmtleTtcbiAgICAgICAgICBzZXRTdGF0ZSh7XG4gICAgICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvblxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKHN0YXRlID09PSB1bmRlZmluZWQsICdCcm93c2VyIGhpc3RvcnkgY2Fubm90IHJlcGxhY2Ugc3RhdGUgaW4gYnJvd3NlcnMgdGhhdCBkbyBub3Qgc3VwcG9ydCBIVE1MNSBoaXN0b3J5JykgOiB2b2lkIDA7XG4gICAgICAgIHdpbmRvdy5sb2NhdGlvbi5yZXBsYWNlKGhyZWYpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gZ28obikge1xuICAgIGdsb2JhbEhpc3RvcnkuZ28obik7XG4gIH1cblxuICBmdW5jdGlvbiBnb0JhY2soKSB7XG4gICAgZ28oLTEpO1xuICB9XG5cbiAgZnVuY3Rpb24gZ29Gb3J3YXJkKCkge1xuICAgIGdvKDEpO1xuICB9XG5cbiAgdmFyIGxpc3RlbmVyQ291bnQgPSAwO1xuXG4gIGZ1bmN0aW9uIGNoZWNrRE9NTGlzdGVuZXJzKGRlbHRhKSB7XG4gICAgbGlzdGVuZXJDb3VudCArPSBkZWx0YTtcblxuICAgIGlmIChsaXN0ZW5lckNvdW50ID09PSAxICYmIGRlbHRhID09PSAxKSB7XG4gICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihQb3BTdGF0ZUV2ZW50LCBoYW5kbGVQb3BTdGF0ZSk7XG4gICAgICBpZiAobmVlZHNIYXNoQ2hhbmdlTGlzdGVuZXIpIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKEhhc2hDaGFuZ2VFdmVudCwgaGFuZGxlSGFzaENoYW5nZSk7XG4gICAgfSBlbHNlIGlmIChsaXN0ZW5lckNvdW50ID09PSAwKSB7XG4gICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihQb3BTdGF0ZUV2ZW50LCBoYW5kbGVQb3BTdGF0ZSk7XG4gICAgICBpZiAobmVlZHNIYXNoQ2hhbmdlTGlzdGVuZXIpIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKEhhc2hDaGFuZ2VFdmVudCwgaGFuZGxlSGFzaENoYW5nZSk7XG4gICAgfVxuICB9XG5cbiAgdmFyIGlzQmxvY2tlZCA9IGZhbHNlO1xuXG4gIGZ1bmN0aW9uIGJsb2NrKHByb21wdCkge1xuICAgIGlmIChwcm9tcHQgPT09IHZvaWQgMCkge1xuICAgICAgcHJvbXB0ID0gZmFsc2U7XG4gICAgfVxuXG4gICAgdmFyIHVuYmxvY2sgPSB0cmFuc2l0aW9uTWFuYWdlci5zZXRQcm9tcHQocHJvbXB0KTtcblxuICAgIGlmICghaXNCbG9ja2VkKSB7XG4gICAgICBjaGVja0RPTUxpc3RlbmVycygxKTtcbiAgICAgIGlzQmxvY2tlZCA9IHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChpc0Jsb2NrZWQpIHtcbiAgICAgICAgaXNCbG9ja2VkID0gZmFsc2U7XG4gICAgICAgIGNoZWNrRE9NTGlzdGVuZXJzKC0xKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHVuYmxvY2soKTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gbGlzdGVuKGxpc3RlbmVyKSB7XG4gICAgdmFyIHVubGlzdGVuID0gdHJhbnNpdGlvbk1hbmFnZXIuYXBwZW5kTGlzdGVuZXIobGlzdGVuZXIpO1xuICAgIGNoZWNrRE9NTGlzdGVuZXJzKDEpO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBjaGVja0RPTUxpc3RlbmVycygtMSk7XG4gICAgICB1bmxpc3RlbigpO1xuICAgIH07XG4gIH1cblxuICB2YXIgaGlzdG9yeSA9IHtcbiAgICBsZW5ndGg6IGdsb2JhbEhpc3RvcnkubGVuZ3RoLFxuICAgIGFjdGlvbjogJ1BPUCcsXG4gICAgbG9jYXRpb246IGluaXRpYWxMb2NhdGlvbixcbiAgICBjcmVhdGVIcmVmOiBjcmVhdGVIcmVmLFxuICAgIHB1c2g6IHB1c2gsXG4gICAgcmVwbGFjZTogcmVwbGFjZSxcbiAgICBnbzogZ28sXG4gICAgZ29CYWNrOiBnb0JhY2ssXG4gICAgZ29Gb3J3YXJkOiBnb0ZvcndhcmQsXG4gICAgYmxvY2s6IGJsb2NrLFxuICAgIGxpc3RlbjogbGlzdGVuXG4gIH07XG4gIHJldHVybiBoaXN0b3J5O1xufVxuXG52YXIgSGFzaENoYW5nZUV2ZW50JDEgPSAnaGFzaGNoYW5nZSc7XG52YXIgSGFzaFBhdGhDb2RlcnMgPSB7XG4gIGhhc2hiYW5nOiB7XG4gICAgZW5jb2RlUGF0aDogZnVuY3Rpb24gZW5jb2RlUGF0aChwYXRoKSB7XG4gICAgICByZXR1cm4gcGF0aC5jaGFyQXQoMCkgPT09ICchJyA/IHBhdGggOiAnIS8nICsgc3RyaXBMZWFkaW5nU2xhc2gocGF0aCk7XG4gICAgfSxcbiAgICBkZWNvZGVQYXRoOiBmdW5jdGlvbiBkZWNvZGVQYXRoKHBhdGgpIHtcbiAgICAgIHJldHVybiBwYXRoLmNoYXJBdCgwKSA9PT0gJyEnID8gcGF0aC5zdWJzdHIoMSkgOiBwYXRoO1xuICAgIH1cbiAgfSxcbiAgbm9zbGFzaDoge1xuICAgIGVuY29kZVBhdGg6IHN0cmlwTGVhZGluZ1NsYXNoLFxuICAgIGRlY29kZVBhdGg6IGFkZExlYWRpbmdTbGFzaFxuICB9LFxuICBzbGFzaDoge1xuICAgIGVuY29kZVBhdGg6IGFkZExlYWRpbmdTbGFzaCxcbiAgICBkZWNvZGVQYXRoOiBhZGRMZWFkaW5nU2xhc2hcbiAgfVxufTtcblxuZnVuY3Rpb24gZ2V0SGFzaFBhdGgoKSB7XG4gIC8vIFdlIGNhbid0IHVzZSB3aW5kb3cubG9jYXRpb24uaGFzaCBoZXJlIGJlY2F1c2UgaXQncyBub3RcbiAgLy8gY29uc2lzdGVudCBhY3Jvc3MgYnJvd3NlcnMgLSBGaXJlZm94IHdpbGwgcHJlLWRlY29kZSBpdCFcbiAgdmFyIGhyZWYgPSB3aW5kb3cubG9jYXRpb24uaHJlZjtcbiAgdmFyIGhhc2hJbmRleCA9IGhyZWYuaW5kZXhPZignIycpO1xuICByZXR1cm4gaGFzaEluZGV4ID09PSAtMSA/ICcnIDogaHJlZi5zdWJzdHJpbmcoaGFzaEluZGV4ICsgMSk7XG59XG5cbmZ1bmN0aW9uIHB1c2hIYXNoUGF0aChwYXRoKSB7XG4gIHdpbmRvdy5sb2NhdGlvbi5oYXNoID0gcGF0aDtcbn1cblxuZnVuY3Rpb24gcmVwbGFjZUhhc2hQYXRoKHBhdGgpIHtcbiAgdmFyIGhhc2hJbmRleCA9IHdpbmRvdy5sb2NhdGlvbi5ocmVmLmluZGV4T2YoJyMnKTtcbiAgd2luZG93LmxvY2F0aW9uLnJlcGxhY2Uod2luZG93LmxvY2F0aW9uLmhyZWYuc2xpY2UoMCwgaGFzaEluZGV4ID49IDAgPyBoYXNoSW5kZXggOiAwKSArICcjJyArIHBhdGgpO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVIYXNoSGlzdG9yeShwcm9wcykge1xuICBpZiAocHJvcHMgPT09IHZvaWQgMCkge1xuICAgIHByb3BzID0ge307XG4gIH1cblxuICAhY2FuVXNlRE9NID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnSGFzaCBoaXN0b3J5IG5lZWRzIGEgRE9NJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICB2YXIgZ2xvYmFsSGlzdG9yeSA9IHdpbmRvdy5oaXN0b3J5O1xuICB2YXIgY2FuR29XaXRob3V0UmVsb2FkID0gc3VwcG9ydHNHb1dpdGhvdXRSZWxvYWRVc2luZ0hhc2goKTtcbiAgdmFyIF9wcm9wcyA9IHByb3BzLFxuICAgICAgX3Byb3BzJGdldFVzZXJDb25maXJtID0gX3Byb3BzLmdldFVzZXJDb25maXJtYXRpb24sXG4gICAgICBnZXRVc2VyQ29uZmlybWF0aW9uID0gX3Byb3BzJGdldFVzZXJDb25maXJtID09PSB2b2lkIDAgPyBnZXRDb25maXJtYXRpb24gOiBfcHJvcHMkZ2V0VXNlckNvbmZpcm0sXG4gICAgICBfcHJvcHMkaGFzaFR5cGUgPSBfcHJvcHMuaGFzaFR5cGUsXG4gICAgICBoYXNoVHlwZSA9IF9wcm9wcyRoYXNoVHlwZSA9PT0gdm9pZCAwID8gJ3NsYXNoJyA6IF9wcm9wcyRoYXNoVHlwZTtcbiAgdmFyIGJhc2VuYW1lID0gcHJvcHMuYmFzZW5hbWUgPyBzdHJpcFRyYWlsaW5nU2xhc2goYWRkTGVhZGluZ1NsYXNoKHByb3BzLmJhc2VuYW1lKSkgOiAnJztcbiAgdmFyIF9IYXNoUGF0aENvZGVycyRoYXNoVCA9IEhhc2hQYXRoQ29kZXJzW2hhc2hUeXBlXSxcbiAgICAgIGVuY29kZVBhdGggPSBfSGFzaFBhdGhDb2RlcnMkaGFzaFQuZW5jb2RlUGF0aCxcbiAgICAgIGRlY29kZVBhdGggPSBfSGFzaFBhdGhDb2RlcnMkaGFzaFQuZGVjb2RlUGF0aDtcblxuICBmdW5jdGlvbiBnZXRET01Mb2NhdGlvbigpIHtcbiAgICB2YXIgcGF0aCA9IGRlY29kZVBhdGgoZ2V0SGFzaFBhdGgoKSk7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghYmFzZW5hbWUgfHwgaGFzQmFzZW5hbWUocGF0aCwgYmFzZW5hbWUpLCAnWW91IGFyZSBhdHRlbXB0aW5nIHRvIHVzZSBhIGJhc2VuYW1lIG9uIGEgcGFnZSB3aG9zZSBVUkwgcGF0aCBkb2VzIG5vdCBiZWdpbiAnICsgJ3dpdGggdGhlIGJhc2VuYW1lLiBFeHBlY3RlZCBwYXRoIFwiJyArIHBhdGggKyAnXCIgdG8gYmVnaW4gd2l0aCBcIicgKyBiYXNlbmFtZSArICdcIi4nKSA6IHZvaWQgMDtcbiAgICBpZiAoYmFzZW5hbWUpIHBhdGggPSBzdHJpcEJhc2VuYW1lKHBhdGgsIGJhc2VuYW1lKTtcbiAgICByZXR1cm4gY3JlYXRlTG9jYXRpb24ocGF0aCk7XG4gIH1cblxuICB2YXIgdHJhbnNpdGlvbk1hbmFnZXIgPSBjcmVhdGVUcmFuc2l0aW9uTWFuYWdlcigpO1xuXG4gIGZ1bmN0aW9uIHNldFN0YXRlKG5leHRTdGF0ZSkge1xuICAgIF9leHRlbmRzKGhpc3RvcnksIG5leHRTdGF0ZSk7XG5cbiAgICBoaXN0b3J5Lmxlbmd0aCA9IGdsb2JhbEhpc3RvcnkubGVuZ3RoO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLm5vdGlmeUxpc3RlbmVycyhoaXN0b3J5LmxvY2F0aW9uLCBoaXN0b3J5LmFjdGlvbik7XG4gIH1cblxuICB2YXIgZm9yY2VOZXh0UG9wID0gZmFsc2U7XG4gIHZhciBpZ25vcmVQYXRoID0gbnVsbDtcblxuICBmdW5jdGlvbiBoYW5kbGVIYXNoQ2hhbmdlKCkge1xuICAgIHZhciBwYXRoID0gZ2V0SGFzaFBhdGgoKTtcbiAgICB2YXIgZW5jb2RlZFBhdGggPSBlbmNvZGVQYXRoKHBhdGgpO1xuXG4gICAgaWYgKHBhdGggIT09IGVuY29kZWRQYXRoKSB7XG4gICAgICAvLyBFbnN1cmUgd2UgYWx3YXlzIGhhdmUgYSBwcm9wZXJseS1lbmNvZGVkIGhhc2guXG4gICAgICByZXBsYWNlSGFzaFBhdGgoZW5jb2RlZFBhdGgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgbG9jYXRpb24gPSBnZXRET01Mb2NhdGlvbigpO1xuICAgICAgdmFyIHByZXZMb2NhdGlvbiA9IGhpc3RvcnkubG9jYXRpb247XG4gICAgICBpZiAoIWZvcmNlTmV4dFBvcCAmJiBsb2NhdGlvbnNBcmVFcXVhbChwcmV2TG9jYXRpb24sIGxvY2F0aW9uKSkgcmV0dXJuOyAvLyBBIGhhc2hjaGFuZ2UgZG9lc24ndCBhbHdheXMgPT0gbG9jYXRpb24gY2hhbmdlLlxuXG4gICAgICBpZiAoaWdub3JlUGF0aCA9PT0gY3JlYXRlUGF0aChsb2NhdGlvbikpIHJldHVybjsgLy8gSWdub3JlIHRoaXMgY2hhbmdlOyB3ZSBhbHJlYWR5IHNldFN0YXRlIGluIHB1c2gvcmVwbGFjZS5cblxuICAgICAgaWdub3JlUGF0aCA9IG51bGw7XG4gICAgICBoYW5kbGVQb3AobG9jYXRpb24pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZVBvcChsb2NhdGlvbikge1xuICAgIGlmIChmb3JjZU5leHRQb3ApIHtcbiAgICAgIGZvcmNlTmV4dFBvcCA9IGZhbHNlO1xuICAgICAgc2V0U3RhdGUoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGFjdGlvbiA9ICdQT1AnO1xuICAgICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgICAgaWYgKG9rKSB7XG4gICAgICAgICAgc2V0U3RhdGUoe1xuICAgICAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgICAgICBsb2NhdGlvbjogbG9jYXRpb25cbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXZlcnRQb3AobG9jYXRpb24pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiByZXZlcnRQb3AoZnJvbUxvY2F0aW9uKSB7XG4gICAgdmFyIHRvTG9jYXRpb24gPSBoaXN0b3J5LmxvY2F0aW9uOyAvLyBUT0RPOiBXZSBjb3VsZCBwcm9iYWJseSBtYWtlIHRoaXMgbW9yZSByZWxpYWJsZSBieVxuICAgIC8vIGtlZXBpbmcgYSBsaXN0IG9mIHBhdGhzIHdlJ3ZlIHNlZW4gaW4gc2Vzc2lvblN0b3JhZ2UuXG4gICAgLy8gSW5zdGVhZCwgd2UganVzdCBkZWZhdWx0IHRvIDAgZm9yIHBhdGhzIHdlIGRvbid0IGtub3cuXG5cbiAgICB2YXIgdG9JbmRleCA9IGFsbFBhdGhzLmxhc3RJbmRleE9mKGNyZWF0ZVBhdGgodG9Mb2NhdGlvbikpO1xuICAgIGlmICh0b0luZGV4ID09PSAtMSkgdG9JbmRleCA9IDA7XG4gICAgdmFyIGZyb21JbmRleCA9IGFsbFBhdGhzLmxhc3RJbmRleE9mKGNyZWF0ZVBhdGgoZnJvbUxvY2F0aW9uKSk7XG4gICAgaWYgKGZyb21JbmRleCA9PT0gLTEpIGZyb21JbmRleCA9IDA7XG4gICAgdmFyIGRlbHRhID0gdG9JbmRleCAtIGZyb21JbmRleDtcblxuICAgIGlmIChkZWx0YSkge1xuICAgICAgZm9yY2VOZXh0UG9wID0gdHJ1ZTtcbiAgICAgIGdvKGRlbHRhKTtcbiAgICB9XG4gIH0gLy8gRW5zdXJlIHRoZSBoYXNoIGlzIGVuY29kZWQgcHJvcGVybHkgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2UuXG5cblxuICB2YXIgcGF0aCA9IGdldEhhc2hQYXRoKCk7XG4gIHZhciBlbmNvZGVkUGF0aCA9IGVuY29kZVBhdGgocGF0aCk7XG4gIGlmIChwYXRoICE9PSBlbmNvZGVkUGF0aCkgcmVwbGFjZUhhc2hQYXRoKGVuY29kZWRQYXRoKTtcbiAgdmFyIGluaXRpYWxMb2NhdGlvbiA9IGdldERPTUxvY2F0aW9uKCk7XG4gIHZhciBhbGxQYXRocyA9IFtjcmVhdGVQYXRoKGluaXRpYWxMb2NhdGlvbildOyAvLyBQdWJsaWMgaW50ZXJmYWNlXG5cbiAgZnVuY3Rpb24gY3JlYXRlSHJlZihsb2NhdGlvbikge1xuICAgIHJldHVybiAnIycgKyBlbmNvZGVQYXRoKGJhc2VuYW1lICsgY3JlYXRlUGF0aChsb2NhdGlvbikpO1xuICB9XG5cbiAgZnVuY3Rpb24gcHVzaChwYXRoLCBzdGF0ZSkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoc3RhdGUgPT09IHVuZGVmaW5lZCwgJ0hhc2ggaGlzdG9yeSBjYW5ub3QgcHVzaCBzdGF0ZTsgaXQgaXMgaWdub3JlZCcpIDogdm9pZCAwO1xuICAgIHZhciBhY3Rpb24gPSAnUFVTSCc7XG4gICAgdmFyIGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24ocGF0aCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGhpc3RvcnkubG9jYXRpb24pO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAoIW9rKSByZXR1cm47XG4gICAgICB2YXIgcGF0aCA9IGNyZWF0ZVBhdGgobG9jYXRpb24pO1xuICAgICAgdmFyIGVuY29kZWRQYXRoID0gZW5jb2RlUGF0aChiYXNlbmFtZSArIHBhdGgpO1xuICAgICAgdmFyIGhhc2hDaGFuZ2VkID0gZ2V0SGFzaFBhdGgoKSAhPT0gZW5jb2RlZFBhdGg7XG5cbiAgICAgIGlmIChoYXNoQ2hhbmdlZCkge1xuICAgICAgICAvLyBXZSBjYW5ub3QgdGVsbCBpZiBhIGhhc2hjaGFuZ2Ugd2FzIGNhdXNlZCBieSBhIFBVU0gsIHNvIHdlJ2RcbiAgICAgICAgLy8gcmF0aGVyIHNldFN0YXRlIGhlcmUgYW5kIGlnbm9yZSB0aGUgaGFzaGNoYW5nZS4gVGhlIGNhdmVhdCBoZXJlXG4gICAgICAgIC8vIGlzIHRoYXQgb3RoZXIgaGFzaCBoaXN0b3JpZXMgaW4gdGhlIHBhZ2Ugd2lsbCBjb25zaWRlciBpdCBhIFBPUC5cbiAgICAgICAgaWdub3JlUGF0aCA9IHBhdGg7XG4gICAgICAgIHB1c2hIYXNoUGF0aChlbmNvZGVkUGF0aCk7XG4gICAgICAgIHZhciBwcmV2SW5kZXggPSBhbGxQYXRocy5sYXN0SW5kZXhPZihjcmVhdGVQYXRoKGhpc3RvcnkubG9jYXRpb24pKTtcbiAgICAgICAgdmFyIG5leHRQYXRocyA9IGFsbFBhdGhzLnNsaWNlKDAsIHByZXZJbmRleCA9PT0gLTEgPyAwIDogcHJldkluZGV4ICsgMSk7XG4gICAgICAgIG5leHRQYXRocy5wdXNoKHBhdGgpO1xuICAgICAgICBhbGxQYXRocyA9IG5leHRQYXRocztcbiAgICAgICAgc2V0U3RhdGUoe1xuICAgICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvblxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoZmFsc2UsICdIYXNoIGhpc3RvcnkgY2Fubm90IFBVU0ggdGhlIHNhbWUgcGF0aDsgYSBuZXcgZW50cnkgd2lsbCBub3QgYmUgYWRkZWQgdG8gdGhlIGhpc3Rvcnkgc3RhY2snKSA6IHZvaWQgMDtcbiAgICAgICAgc2V0U3RhdGUoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlcGxhY2UocGF0aCwgc3RhdGUpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKHN0YXRlID09PSB1bmRlZmluZWQsICdIYXNoIGhpc3RvcnkgY2Fubm90IHJlcGxhY2Ugc3RhdGU7IGl0IGlzIGlnbm9yZWQnKSA6IHZvaWQgMDtcbiAgICB2YXIgYWN0aW9uID0gJ1JFUExBQ0UnO1xuICAgIHZhciBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBoaXN0b3J5LmxvY2F0aW9uKTtcbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKCFvaykgcmV0dXJuO1xuICAgICAgdmFyIHBhdGggPSBjcmVhdGVQYXRoKGxvY2F0aW9uKTtcbiAgICAgIHZhciBlbmNvZGVkUGF0aCA9IGVuY29kZVBhdGgoYmFzZW5hbWUgKyBwYXRoKTtcbiAgICAgIHZhciBoYXNoQ2hhbmdlZCA9IGdldEhhc2hQYXRoKCkgIT09IGVuY29kZWRQYXRoO1xuXG4gICAgICBpZiAoaGFzaENoYW5nZWQpIHtcbiAgICAgICAgLy8gV2UgY2Fubm90IHRlbGwgaWYgYSBoYXNoY2hhbmdlIHdhcyBjYXVzZWQgYnkgYSBSRVBMQUNFLCBzbyB3ZSdkXG4gICAgICAgIC8vIHJhdGhlciBzZXRTdGF0ZSBoZXJlIGFuZCBpZ25vcmUgdGhlIGhhc2hjaGFuZ2UuIFRoZSBjYXZlYXQgaGVyZVxuICAgICAgICAvLyBpcyB0aGF0IG90aGVyIGhhc2ggaGlzdG9yaWVzIGluIHRoZSBwYWdlIHdpbGwgY29uc2lkZXIgaXQgYSBQT1AuXG4gICAgICAgIGlnbm9yZVBhdGggPSBwYXRoO1xuICAgICAgICByZXBsYWNlSGFzaFBhdGgoZW5jb2RlZFBhdGgpO1xuICAgICAgfVxuXG4gICAgICB2YXIgcHJldkluZGV4ID0gYWxsUGF0aHMuaW5kZXhPZihjcmVhdGVQYXRoKGhpc3RvcnkubG9jYXRpb24pKTtcbiAgICAgIGlmIChwcmV2SW5kZXggIT09IC0xKSBhbGxQYXRoc1twcmV2SW5kZXhdID0gcGF0aDtcbiAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvblxuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBnbyhuKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhjYW5Hb1dpdGhvdXRSZWxvYWQsICdIYXNoIGhpc3RvcnkgZ28obikgY2F1c2VzIGEgZnVsbCBwYWdlIHJlbG9hZCBpbiB0aGlzIGJyb3dzZXInKSA6IHZvaWQgMDtcbiAgICBnbG9iYWxIaXN0b3J5LmdvKG4pO1xuICB9XG5cbiAgZnVuY3Rpb24gZ29CYWNrKCkge1xuICAgIGdvKC0xKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdvRm9yd2FyZCgpIHtcbiAgICBnbygxKTtcbiAgfVxuXG4gIHZhciBsaXN0ZW5lckNvdW50ID0gMDtcblxuICBmdW5jdGlvbiBjaGVja0RPTUxpc3RlbmVycyhkZWx0YSkge1xuICAgIGxpc3RlbmVyQ291bnQgKz0gZGVsdGE7XG5cbiAgICBpZiAobGlzdGVuZXJDb3VudCA9PT0gMSAmJiBkZWx0YSA9PT0gMSkge1xuICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoSGFzaENoYW5nZUV2ZW50JDEsIGhhbmRsZUhhc2hDaGFuZ2UpO1xuICAgIH0gZWxzZSBpZiAobGlzdGVuZXJDb3VudCA9PT0gMCkge1xuICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoSGFzaENoYW5nZUV2ZW50JDEsIGhhbmRsZUhhc2hDaGFuZ2UpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBpc0Jsb2NrZWQgPSBmYWxzZTtcblxuICBmdW5jdGlvbiBibG9jayhwcm9tcHQpIHtcbiAgICBpZiAocHJvbXB0ID09PSB2b2lkIDApIHtcbiAgICAgIHByb21wdCA9IGZhbHNlO1xuICAgIH1cblxuICAgIHZhciB1bmJsb2NrID0gdHJhbnNpdGlvbk1hbmFnZXIuc2V0UHJvbXB0KHByb21wdCk7XG5cbiAgICBpZiAoIWlzQmxvY2tlZCkge1xuICAgICAgY2hlY2tET01MaXN0ZW5lcnMoMSk7XG4gICAgICBpc0Jsb2NrZWQgPSB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoaXNCbG9ja2VkKSB7XG4gICAgICAgIGlzQmxvY2tlZCA9IGZhbHNlO1xuICAgICAgICBjaGVja0RPTUxpc3RlbmVycygtMSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB1bmJsb2NrKCk7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGxpc3RlbihsaXN0ZW5lcikge1xuICAgIHZhciB1bmxpc3RlbiA9IHRyYW5zaXRpb25NYW5hZ2VyLmFwcGVuZExpc3RlbmVyKGxpc3RlbmVyKTtcbiAgICBjaGVja0RPTUxpc3RlbmVycygxKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgY2hlY2tET01MaXN0ZW5lcnMoLTEpO1xuICAgICAgdW5saXN0ZW4oKTtcbiAgICB9O1xuICB9XG5cbiAgdmFyIGhpc3RvcnkgPSB7XG4gICAgbGVuZ3RoOiBnbG9iYWxIaXN0b3J5Lmxlbmd0aCxcbiAgICBhY3Rpb246ICdQT1AnLFxuICAgIGxvY2F0aW9uOiBpbml0aWFsTG9jYXRpb24sXG4gICAgY3JlYXRlSHJlZjogY3JlYXRlSHJlZixcbiAgICBwdXNoOiBwdXNoLFxuICAgIHJlcGxhY2U6IHJlcGxhY2UsXG4gICAgZ286IGdvLFxuICAgIGdvQmFjazogZ29CYWNrLFxuICAgIGdvRm9yd2FyZDogZ29Gb3J3YXJkLFxuICAgIGJsb2NrOiBibG9jayxcbiAgICBsaXN0ZW46IGxpc3RlblxuICB9O1xuICByZXR1cm4gaGlzdG9yeTtcbn1cblxuZnVuY3Rpb24gY2xhbXAobiwgbG93ZXJCb3VuZCwgdXBwZXJCb3VuZCkge1xuICByZXR1cm4gTWF0aC5taW4oTWF0aC5tYXgobiwgbG93ZXJCb3VuZCksIHVwcGVyQm91bmQpO1xufVxuLyoqXG4gKiBDcmVhdGVzIGEgaGlzdG9yeSBvYmplY3QgdGhhdCBzdG9yZXMgbG9jYXRpb25zIGluIG1lbW9yeS5cbiAqL1xuXG5cbmZ1bmN0aW9uIGNyZWF0ZU1lbW9yeUhpc3RvcnkocHJvcHMpIHtcbiAgaWYgKHByb3BzID09PSB2b2lkIDApIHtcbiAgICBwcm9wcyA9IHt9O1xuICB9XG5cbiAgdmFyIF9wcm9wcyA9IHByb3BzLFxuICAgICAgZ2V0VXNlckNvbmZpcm1hdGlvbiA9IF9wcm9wcy5nZXRVc2VyQ29uZmlybWF0aW9uLFxuICAgICAgX3Byb3BzJGluaXRpYWxFbnRyaWVzID0gX3Byb3BzLmluaXRpYWxFbnRyaWVzLFxuICAgICAgaW5pdGlhbEVudHJpZXMgPSBfcHJvcHMkaW5pdGlhbEVudHJpZXMgPT09IHZvaWQgMCA/IFsnLyddIDogX3Byb3BzJGluaXRpYWxFbnRyaWVzLFxuICAgICAgX3Byb3BzJGluaXRpYWxJbmRleCA9IF9wcm9wcy5pbml0aWFsSW5kZXgsXG4gICAgICBpbml0aWFsSW5kZXggPSBfcHJvcHMkaW5pdGlhbEluZGV4ID09PSB2b2lkIDAgPyAwIDogX3Byb3BzJGluaXRpYWxJbmRleCxcbiAgICAgIF9wcm9wcyRrZXlMZW5ndGggPSBfcHJvcHMua2V5TGVuZ3RoLFxuICAgICAga2V5TGVuZ3RoID0gX3Byb3BzJGtleUxlbmd0aCA9PT0gdm9pZCAwID8gNiA6IF9wcm9wcyRrZXlMZW5ndGg7XG4gIHZhciB0cmFuc2l0aW9uTWFuYWdlciA9IGNyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyKCk7XG5cbiAgZnVuY3Rpb24gc2V0U3RhdGUobmV4dFN0YXRlKSB7XG4gICAgX2V4dGVuZHMoaGlzdG9yeSwgbmV4dFN0YXRlKTtcblxuICAgIGhpc3RvcnkubGVuZ3RoID0gaGlzdG9yeS5lbnRyaWVzLmxlbmd0aDtcbiAgICB0cmFuc2l0aW9uTWFuYWdlci5ub3RpZnlMaXN0ZW5lcnMoaGlzdG9yeS5sb2NhdGlvbiwgaGlzdG9yeS5hY3Rpb24pO1xuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlS2V5KCkge1xuICAgIHJldHVybiBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHIoMiwga2V5TGVuZ3RoKTtcbiAgfVxuXG4gIHZhciBpbmRleCA9IGNsYW1wKGluaXRpYWxJbmRleCwgMCwgaW5pdGlhbEVudHJpZXMubGVuZ3RoIC0gMSk7XG4gIHZhciBlbnRyaWVzID0gaW5pdGlhbEVudHJpZXMubWFwKGZ1bmN0aW9uIChlbnRyeSkge1xuICAgIHJldHVybiB0eXBlb2YgZW50cnkgPT09ICdzdHJpbmcnID8gY3JlYXRlTG9jYXRpb24oZW50cnksIHVuZGVmaW5lZCwgY3JlYXRlS2V5KCkpIDogY3JlYXRlTG9jYXRpb24oZW50cnksIHVuZGVmaW5lZCwgZW50cnkua2V5IHx8IGNyZWF0ZUtleSgpKTtcbiAgfSk7IC8vIFB1YmxpYyBpbnRlcmZhY2VcblxuICB2YXIgY3JlYXRlSHJlZiA9IGNyZWF0ZVBhdGg7XG5cbiAgZnVuY3Rpb24gcHVzaChwYXRoLCBzdGF0ZSkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoISh0eXBlb2YgcGF0aCA9PT0gJ29iamVjdCcgJiYgcGF0aC5zdGF0ZSAhPT0gdW5kZWZpbmVkICYmIHN0YXRlICE9PSB1bmRlZmluZWQpLCAnWW91IHNob3VsZCBhdm9pZCBwcm92aWRpbmcgYSAybmQgc3RhdGUgYXJndW1lbnQgdG8gcHVzaCB3aGVuIHRoZSAxc3QgJyArICdhcmd1bWVudCBpcyBhIGxvY2F0aW9uLWxpa2Ugb2JqZWN0IHRoYXQgYWxyZWFkeSBoYXMgc3RhdGU7IGl0IGlzIGlnbm9yZWQnKSA6IHZvaWQgMDtcbiAgICB2YXIgYWN0aW9uID0gJ1BVU0gnO1xuICAgIHZhciBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHN0YXRlLCBjcmVhdGVLZXkoKSwgaGlzdG9yeS5sb2NhdGlvbik7XG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmICghb2spIHJldHVybjtcbiAgICAgIHZhciBwcmV2SW5kZXggPSBoaXN0b3J5LmluZGV4O1xuICAgICAgdmFyIG5leHRJbmRleCA9IHByZXZJbmRleCArIDE7XG4gICAgICB2YXIgbmV4dEVudHJpZXMgPSBoaXN0b3J5LmVudHJpZXMuc2xpY2UoMCk7XG5cbiAgICAgIGlmIChuZXh0RW50cmllcy5sZW5ndGggPiBuZXh0SW5kZXgpIHtcbiAgICAgICAgbmV4dEVudHJpZXMuc3BsaWNlKG5leHRJbmRleCwgbmV4dEVudHJpZXMubGVuZ3RoIC0gbmV4dEluZGV4LCBsb2NhdGlvbik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBuZXh0RW50cmllcy5wdXNoKGxvY2F0aW9uKTtcbiAgICAgIH1cblxuICAgICAgc2V0U3RhdGUoe1xuICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uLFxuICAgICAgICBpbmRleDogbmV4dEluZGV4LFxuICAgICAgICBlbnRyaWVzOiBuZXh0RW50cmllc1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiByZXBsYWNlKHBhdGgsIHN0YXRlKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghKHR5cGVvZiBwYXRoID09PSAnb2JqZWN0JyAmJiBwYXRoLnN0YXRlICE9PSB1bmRlZmluZWQgJiYgc3RhdGUgIT09IHVuZGVmaW5lZCksICdZb3Ugc2hvdWxkIGF2b2lkIHByb3ZpZGluZyBhIDJuZCBzdGF0ZSBhcmd1bWVudCB0byByZXBsYWNlIHdoZW4gdGhlIDFzdCAnICsgJ2FyZ3VtZW50IGlzIGEgbG9jYXRpb24tbGlrZSBvYmplY3QgdGhhdCBhbHJlYWR5IGhhcyBzdGF0ZTsgaXQgaXMgaWdub3JlZCcpIDogdm9pZCAwO1xuICAgIHZhciBhY3Rpb24gPSAnUkVQTEFDRSc7XG4gICAgdmFyIGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24ocGF0aCwgc3RhdGUsIGNyZWF0ZUtleSgpLCBoaXN0b3J5LmxvY2F0aW9uKTtcbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKCFvaykgcmV0dXJuO1xuICAgICAgaGlzdG9yeS5lbnRyaWVzW2hpc3RvcnkuaW5kZXhdID0gbG9jYXRpb247XG4gICAgICBzZXRTdGF0ZSh7XG4gICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICBsb2NhdGlvbjogbG9jYXRpb25cbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gZ28obikge1xuICAgIHZhciBuZXh0SW5kZXggPSBjbGFtcChoaXN0b3J5LmluZGV4ICsgbiwgMCwgaGlzdG9yeS5lbnRyaWVzLmxlbmd0aCAtIDEpO1xuICAgIHZhciBhY3Rpb24gPSAnUE9QJztcbiAgICB2YXIgbG9jYXRpb24gPSBoaXN0b3J5LmVudHJpZXNbbmV4dEluZGV4XTtcbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKG9rKSB7XG4gICAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgICBsb2NhdGlvbjogbG9jYXRpb24sXG4gICAgICAgICAgaW5kZXg6IG5leHRJbmRleFxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIE1pbWljIHRoZSBiZWhhdmlvciBvZiBET00gaGlzdG9yaWVzIGJ5XG4gICAgICAgIC8vIGNhdXNpbmcgYSByZW5kZXIgYWZ0ZXIgYSBjYW5jZWxsZWQgUE9QLlxuICAgICAgICBzZXRTdGF0ZSgpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gZ29CYWNrKCkge1xuICAgIGdvKC0xKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdvRm9yd2FyZCgpIHtcbiAgICBnbygxKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNhbkdvKG4pIHtcbiAgICB2YXIgbmV4dEluZGV4ID0gaGlzdG9yeS5pbmRleCArIG47XG4gICAgcmV0dXJuIG5leHRJbmRleCA+PSAwICYmIG5leHRJbmRleCA8IGhpc3RvcnkuZW50cmllcy5sZW5ndGg7XG4gIH1cblxuICBmdW5jdGlvbiBibG9jayhwcm9tcHQpIHtcbiAgICBpZiAocHJvbXB0ID09PSB2b2lkIDApIHtcbiAgICAgIHByb21wdCA9IGZhbHNlO1xuICAgIH1cblxuICAgIHJldHVybiB0cmFuc2l0aW9uTWFuYWdlci5zZXRQcm9tcHQocHJvbXB0KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGxpc3RlbihsaXN0ZW5lcikge1xuICAgIHJldHVybiB0cmFuc2l0aW9uTWFuYWdlci5hcHBlbmRMaXN0ZW5lcihsaXN0ZW5lcik7XG4gIH1cblxuICB2YXIgaGlzdG9yeSA9IHtcbiAgICBsZW5ndGg6IGVudHJpZXMubGVuZ3RoLFxuICAgIGFjdGlvbjogJ1BPUCcsXG4gICAgbG9jYXRpb246IGVudHJpZXNbaW5kZXhdLFxuICAgIGluZGV4OiBpbmRleCxcbiAgICBlbnRyaWVzOiBlbnRyaWVzLFxuICAgIGNyZWF0ZUhyZWY6IGNyZWF0ZUhyZWYsXG4gICAgcHVzaDogcHVzaCxcbiAgICByZXBsYWNlOiByZXBsYWNlLFxuICAgIGdvOiBnbyxcbiAgICBnb0JhY2s6IGdvQmFjayxcbiAgICBnb0ZvcndhcmQ6IGdvRm9yd2FyZCxcbiAgICBjYW5HbzogY2FuR28sXG4gICAgYmxvY2s6IGJsb2NrLFxuICAgIGxpc3RlbjogbGlzdGVuXG4gIH07XG4gIHJldHVybiBoaXN0b3J5O1xufVxuXG5leHBvcnQgeyBjcmVhdGVCcm93c2VySGlzdG9yeSwgY3JlYXRlSGFzaEhpc3RvcnksIGNyZWF0ZU1lbW9yeUhpc3RvcnksIGNyZWF0ZUxvY2F0aW9uLCBsb2NhdGlvbnNBcmVFcXVhbCwgcGFyc2VQYXRoLCBjcmVhdGVQYXRoIH07XG4iLCJpbXBvcnQgY3JlYXRlQ29udGV4dCBmcm9tICdtaW5pLWNyZWF0ZS1yZWFjdC1jb250ZXh0JztcbmltcG9ydCBfaW5oZXJpdHNMb29zZSBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHdhcm5pbmcgZnJvbSAndGlueS13YXJuaW5nJztcbmltcG9ydCB7IGNyZWF0ZU1lbW9yeUhpc3RvcnksIGNyZWF0ZUxvY2F0aW9uLCBsb2NhdGlvbnNBcmVFcXVhbCwgY3JlYXRlUGF0aCB9IGZyb20gJ2hpc3RvcnknO1xuaW1wb3J0IGludmFyaWFudCBmcm9tICd0aW55LWludmFyaWFudCc7XG5pbXBvcnQgcGF0aFRvUmVnZXhwIGZyb20gJ3BhdGgtdG8tcmVnZXhwJztcbmltcG9ydCBfZXh0ZW5kcyBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzJztcbmltcG9ydCB7IGlzVmFsaWRFbGVtZW50VHlwZSB9IGZyb20gJ3JlYWN0LWlzJztcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlJztcbmltcG9ydCBob2lzdFN0YXRpY3MgZnJvbSAnaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3MnO1xuXG4vLyBUT0RPOiBSZXBsYWNlIHdpdGggUmVhY3QuY3JlYXRlQ29udGV4dCBvbmNlIHdlIGNhbiBhc3N1bWUgUmVhY3QgMTYrXG5cbnZhciBjcmVhdGVOYW1lZENvbnRleHQgPSBmdW5jdGlvbiBjcmVhdGVOYW1lZENvbnRleHQobmFtZSkge1xuICB2YXIgY29udGV4dCA9IGNyZWF0ZUNvbnRleHQoKTtcbiAgY29udGV4dC5kaXNwbGF5TmFtZSA9IG5hbWU7XG4gIHJldHVybiBjb250ZXh0O1xufTtcblxudmFyIGNvbnRleHQgPVxuLyojX19QVVJFX18qL1xuY3JlYXRlTmFtZWRDb250ZXh0KFwiUm91dGVyXCIpO1xuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciBwdXR0aW5nIGhpc3Rvcnkgb24gY29udGV4dC5cbiAqL1xuXG52YXIgUm91dGVyID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKFJvdXRlciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgUm91dGVyLmNvbXB1dGVSb290TWF0Y2ggPSBmdW5jdGlvbiBjb21wdXRlUm9vdE1hdGNoKHBhdGhuYW1lKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHBhdGg6IFwiL1wiLFxuICAgICAgdXJsOiBcIi9cIixcbiAgICAgIHBhcmFtczoge30sXG4gICAgICBpc0V4YWN0OiBwYXRobmFtZSA9PT0gXCIvXCJcbiAgICB9O1xuICB9O1xuXG4gIGZ1bmN0aW9uIFJvdXRlcihwcm9wcykge1xuICAgIHZhciBfdGhpcztcblxuICAgIF90aGlzID0gX1JlYWN0JENvbXBvbmVudC5jYWxsKHRoaXMsIHByb3BzKSB8fCB0aGlzO1xuICAgIF90aGlzLnN0YXRlID0ge1xuICAgICAgbG9jYXRpb246IHByb3BzLmhpc3RvcnkubG9jYXRpb25cbiAgICB9OyAvLyBUaGlzIGlzIGEgYml0IG9mIGEgaGFjay4gV2UgaGF2ZSB0byBzdGFydCBsaXN0ZW5pbmcgZm9yIGxvY2F0aW9uXG4gICAgLy8gY2hhbmdlcyBoZXJlIGluIHRoZSBjb25zdHJ1Y3RvciBpbiBjYXNlIHRoZXJlIGFyZSBhbnkgPFJlZGlyZWN0PnNcbiAgICAvLyBvbiB0aGUgaW5pdGlhbCByZW5kZXIuIElmIHRoZXJlIGFyZSwgdGhleSB3aWxsIHJlcGxhY2UvcHVzaCB3aGVuXG4gICAgLy8gdGhleSBtb3VudCBhbmQgc2luY2UgY0RNIGZpcmVzIGluIGNoaWxkcmVuIGJlZm9yZSBwYXJlbnRzLCB3ZSBtYXlcbiAgICAvLyBnZXQgYSBuZXcgbG9jYXRpb24gYmVmb3JlIHRoZSA8Um91dGVyPiBpcyBtb3VudGVkLlxuXG4gICAgX3RoaXMuX2lzTW91bnRlZCA9IGZhbHNlO1xuICAgIF90aGlzLl9wZW5kaW5nTG9jYXRpb24gPSBudWxsO1xuXG4gICAgaWYgKCFwcm9wcy5zdGF0aWNDb250ZXh0KSB7XG4gICAgICBfdGhpcy51bmxpc3RlbiA9IHByb3BzLmhpc3RvcnkubGlzdGVuKGZ1bmN0aW9uIChsb2NhdGlvbikge1xuICAgICAgICBpZiAoX3RoaXMuX2lzTW91bnRlZCkge1xuICAgICAgICAgIF90aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvblxuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIF90aGlzLl9wZW5kaW5nTG9jYXRpb24gPSBsb2NhdGlvbjtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFJvdXRlci5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgdGhpcy5faXNNb3VudGVkID0gdHJ1ZTtcblxuICAgIGlmICh0aGlzLl9wZW5kaW5nTG9jYXRpb24pIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICBsb2NhdGlvbjogdGhpcy5fcGVuZGluZ0xvY2F0aW9uXG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgaWYgKHRoaXMudW5saXN0ZW4pIHRoaXMudW5saXN0ZW4oKTtcbiAgfTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KGNvbnRleHQuUHJvdmlkZXIsIHtcbiAgICAgIGNoaWxkcmVuOiB0aGlzLnByb3BzLmNoaWxkcmVuIHx8IG51bGwsXG4gICAgICB2YWx1ZToge1xuICAgICAgICBoaXN0b3J5OiB0aGlzLnByb3BzLmhpc3RvcnksXG4gICAgICAgIGxvY2F0aW9uOiB0aGlzLnN0YXRlLmxvY2F0aW9uLFxuICAgICAgICBtYXRjaDogUm91dGVyLmNvbXB1dGVSb290TWF0Y2godGhpcy5zdGF0ZS5sb2NhdGlvbi5wYXRobmFtZSksXG4gICAgICAgIHN0YXRpY0NvbnRleHQ6IHRoaXMucHJvcHMuc3RhdGljQ29udGV4dFxuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIHJldHVybiBSb3V0ZXI7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgUm91dGVyLnByb3BUeXBlcyA9IHtcbiAgICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG4gICAgaGlzdG9yeTogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuICAgIHN0YXRpY0NvbnRleHQ6IFByb3BUeXBlcy5vYmplY3RcbiAgfTtcblxuICBSb3V0ZXIucHJvdG90eXBlLmNvbXBvbmVudERpZFVwZGF0ZSA9IGZ1bmN0aW9uIChwcmV2UHJvcHMpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKHByZXZQcm9wcy5oaXN0b3J5ID09PSB0aGlzLnByb3BzLmhpc3RvcnksIFwiWW91IGNhbm5vdCBjaGFuZ2UgPFJvdXRlciBoaXN0b3J5PlwiKSA6IHZvaWQgMDtcbiAgfTtcbn1cblxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgYSA8Um91dGVyPiB0aGF0IHN0b3JlcyBsb2NhdGlvbiBpbiBtZW1vcnkuXG4gKi9cblxudmFyIE1lbW9yeVJvdXRlciA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShNZW1vcnlSb3V0ZXIsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIE1lbW9yeVJvdXRlcigpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgX3RoaXMgPSBfUmVhY3QkQ29tcG9uZW50LmNhbGwuYXBwbHkoX1JlYWN0JENvbXBvbmVudCwgW3RoaXNdLmNvbmNhdChhcmdzKSkgfHwgdGhpcztcbiAgICBfdGhpcy5oaXN0b3J5ID0gY3JlYXRlTWVtb3J5SGlzdG9yeShfdGhpcy5wcm9wcyk7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IE1lbW9yeVJvdXRlci5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChSb3V0ZXIsIHtcbiAgICAgIGhpc3Rvcnk6IHRoaXMuaGlzdG9yeSxcbiAgICAgIGNoaWxkcmVuOiB0aGlzLnByb3BzLmNoaWxkcmVuXG4gICAgfSk7XG4gIH07XG5cbiAgcmV0dXJuIE1lbW9yeVJvdXRlcjtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBNZW1vcnlSb3V0ZXIucHJvcFR5cGVzID0ge1xuICAgIGluaXRpYWxFbnRyaWVzOiBQcm9wVHlwZXMuYXJyYXksXG4gICAgaW5pdGlhbEluZGV4OiBQcm9wVHlwZXMubnVtYmVyLFxuICAgIGdldFVzZXJDb25maXJtYXRpb246IFByb3BUeXBlcy5mdW5jLFxuICAgIGtleUxlbmd0aDogUHJvcFR5cGVzLm51bWJlcixcbiAgICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGVcbiAgfTtcblxuICBNZW1vcnlSb3V0ZXIucHJvdG90eXBlLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gKCkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoIXRoaXMucHJvcHMuaGlzdG9yeSwgXCI8TWVtb3J5Um91dGVyPiBpZ25vcmVzIHRoZSBoaXN0b3J5IHByb3AuIFRvIHVzZSBhIGN1c3RvbSBoaXN0b3J5LCBcIiArIFwidXNlIGBpbXBvcnQgeyBSb3V0ZXIgfWAgaW5zdGVhZCBvZiBgaW1wb3J0IHsgTWVtb3J5Um91dGVyIGFzIFJvdXRlciB9YC5cIikgOiB2b2lkIDA7XG4gIH07XG59XG5cbnZhciBMaWZlY3ljbGUgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoTGlmZWN5Y2xlLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBMaWZlY3ljbGUoKSB7XG4gICAgcmV0dXJuIF9SZWFjdCRDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IExpZmVjeWNsZS5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgaWYgKHRoaXMucHJvcHMub25Nb3VudCkgdGhpcy5wcm9wcy5vbk1vdW50LmNhbGwodGhpcywgdGhpcyk7XG4gIH07XG5cbiAgX3Byb3RvLmNvbXBvbmVudERpZFVwZGF0ZSA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZShwcmV2UHJvcHMpIHtcbiAgICBpZiAodGhpcy5wcm9wcy5vblVwZGF0ZSkgdGhpcy5wcm9wcy5vblVwZGF0ZS5jYWxsKHRoaXMsIHRoaXMsIHByZXZQcm9wcyk7XG4gIH07XG5cbiAgX3Byb3RvLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgaWYgKHRoaXMucHJvcHMub25Vbm1vdW50KSB0aGlzLnByb3BzLm9uVW5tb3VudC5jYWxsKHRoaXMsIHRoaXMpO1xuICB9O1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH07XG5cbiAgcmV0dXJuIExpZmVjeWNsZTtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgcHJvbXB0aW5nIHRoZSB1c2VyIGJlZm9yZSBuYXZpZ2F0aW5nIGF3YXkgZnJvbSBhIHNjcmVlbi5cbiAqL1xuXG5mdW5jdGlvbiBQcm9tcHQoX3JlZikge1xuICB2YXIgbWVzc2FnZSA9IF9yZWYubWVzc2FnZSxcbiAgICAgIF9yZWYkd2hlbiA9IF9yZWYud2hlbixcbiAgICAgIHdoZW4gPSBfcmVmJHdoZW4gPT09IHZvaWQgMCA/IHRydWUgOiBfcmVmJHdoZW47XG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KGNvbnRleHQuQ29uc3VtZXIsIG51bGwsIGZ1bmN0aW9uIChjb250ZXh0JCQxKSB7XG4gICAgIWNvbnRleHQkJDEgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiWW91IHNob3VsZCBub3QgdXNlIDxQcm9tcHQ+IG91dHNpZGUgYSA8Um91dGVyPlwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgaWYgKCF3aGVuIHx8IGNvbnRleHQkJDEuc3RhdGljQ29udGV4dCkgcmV0dXJuIG51bGw7XG4gICAgdmFyIG1ldGhvZCA9IGNvbnRleHQkJDEuaGlzdG9yeS5ibG9jaztcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChMaWZlY3ljbGUsIHtcbiAgICAgIG9uTW91bnQ6IGZ1bmN0aW9uIG9uTW91bnQoc2VsZikge1xuICAgICAgICBzZWxmLnJlbGVhc2UgPSBtZXRob2QobWVzc2FnZSk7XG4gICAgICB9LFxuICAgICAgb25VcGRhdGU6IGZ1bmN0aW9uIG9uVXBkYXRlKHNlbGYsIHByZXZQcm9wcykge1xuICAgICAgICBpZiAocHJldlByb3BzLm1lc3NhZ2UgIT09IG1lc3NhZ2UpIHtcbiAgICAgICAgICBzZWxmLnJlbGVhc2UoKTtcbiAgICAgICAgICBzZWxmLnJlbGVhc2UgPSBtZXRob2QobWVzc2FnZSk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBvblVubW91bnQ6IGZ1bmN0aW9uIG9uVW5tb3VudChzZWxmKSB7XG4gICAgICAgIHNlbGYucmVsZWFzZSgpO1xuICAgICAgfSxcbiAgICAgIG1lc3NhZ2U6IG1lc3NhZ2VcbiAgICB9KTtcbiAgfSk7XG59XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgdmFyIG1lc3NhZ2VUeXBlID0gUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5zdHJpbmddKTtcbiAgUHJvbXB0LnByb3BUeXBlcyA9IHtcbiAgICB3aGVuOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBtZXNzYWdlOiBtZXNzYWdlVHlwZS5pc1JlcXVpcmVkXG4gIH07XG59XG5cbnZhciBjYWNoZSA9IHt9O1xudmFyIGNhY2hlTGltaXQgPSAxMDAwMDtcbnZhciBjYWNoZUNvdW50ID0gMDtcblxuZnVuY3Rpb24gY29tcGlsZVBhdGgocGF0aCkge1xuICBpZiAoY2FjaGVbcGF0aF0pIHJldHVybiBjYWNoZVtwYXRoXTtcbiAgdmFyIGdlbmVyYXRvciA9IHBhdGhUb1JlZ2V4cC5jb21waWxlKHBhdGgpO1xuXG4gIGlmIChjYWNoZUNvdW50IDwgY2FjaGVMaW1pdCkge1xuICAgIGNhY2hlW3BhdGhdID0gZ2VuZXJhdG9yO1xuICAgIGNhY2hlQ291bnQrKztcbiAgfVxuXG4gIHJldHVybiBnZW5lcmF0b3I7XG59XG4vKipcbiAqIFB1YmxpYyBBUEkgZm9yIGdlbmVyYXRpbmcgYSBVUkwgcGF0aG5hbWUgZnJvbSBhIHBhdGggYW5kIHBhcmFtZXRlcnMuXG4gKi9cblxuXG5mdW5jdGlvbiBnZW5lcmF0ZVBhdGgocGF0aCwgcGFyYW1zKSB7XG4gIGlmIChwYXRoID09PSB2b2lkIDApIHtcbiAgICBwYXRoID0gXCIvXCI7XG4gIH1cblxuICBpZiAocGFyYW1zID09PSB2b2lkIDApIHtcbiAgICBwYXJhbXMgPSB7fTtcbiAgfVxuXG4gIHJldHVybiBwYXRoID09PSBcIi9cIiA/IHBhdGggOiBjb21waWxlUGF0aChwYXRoKShwYXJhbXMsIHtcbiAgICBwcmV0dHk6IHRydWVcbiAgfSk7XG59XG5cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIG5hdmlnYXRpbmcgcHJvZ3JhbW1hdGljYWxseSB3aXRoIGEgY29tcG9uZW50LlxuICovXG5cbmZ1bmN0aW9uIFJlZGlyZWN0KF9yZWYpIHtcbiAgdmFyIGNvbXB1dGVkTWF0Y2ggPSBfcmVmLmNvbXB1dGVkTWF0Y2gsXG4gICAgICB0byA9IF9yZWYudG8sXG4gICAgICBfcmVmJHB1c2ggPSBfcmVmLnB1c2gsXG4gICAgICBwdXNoID0gX3JlZiRwdXNoID09PSB2b2lkIDAgPyBmYWxzZSA6IF9yZWYkcHVzaDtcbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoY29udGV4dC5Db25zdW1lciwgbnVsbCwgZnVuY3Rpb24gKGNvbnRleHQkJDEpIHtcbiAgICAhY29udGV4dCQkMSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPFJlZGlyZWN0PiBvdXRzaWRlIGEgPFJvdXRlcj5cIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIHZhciBoaXN0b3J5ID0gY29udGV4dCQkMS5oaXN0b3J5LFxuICAgICAgICBzdGF0aWNDb250ZXh0ID0gY29udGV4dCQkMS5zdGF0aWNDb250ZXh0O1xuICAgIHZhciBtZXRob2QgPSBwdXNoID8gaGlzdG9yeS5wdXNoIDogaGlzdG9yeS5yZXBsYWNlO1xuICAgIHZhciBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKGNvbXB1dGVkTWF0Y2ggPyB0eXBlb2YgdG8gPT09IFwic3RyaW5nXCIgPyBnZW5lcmF0ZVBhdGgodG8sIGNvbXB1dGVkTWF0Y2gucGFyYW1zKSA6IF9leHRlbmRzKHt9LCB0bywge1xuICAgICAgcGF0aG5hbWU6IGdlbmVyYXRlUGF0aCh0by5wYXRobmFtZSwgY29tcHV0ZWRNYXRjaC5wYXJhbXMpXG4gICAgfSkgOiB0byk7IC8vIFdoZW4gcmVuZGVyaW5nIGluIGEgc3RhdGljIGNvbnRleHQsXG4gICAgLy8gc2V0IHRoZSBuZXcgbG9jYXRpb24gaW1tZWRpYXRlbHkuXG5cbiAgICBpZiAoc3RhdGljQ29udGV4dCkge1xuICAgICAgbWV0aG9kKGxvY2F0aW9uKTtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KExpZmVjeWNsZSwge1xuICAgICAgb25Nb3VudDogZnVuY3Rpb24gb25Nb3VudCgpIHtcbiAgICAgICAgbWV0aG9kKGxvY2F0aW9uKTtcbiAgICAgIH0sXG4gICAgICBvblVwZGF0ZTogZnVuY3Rpb24gb25VcGRhdGUoc2VsZiwgcHJldlByb3BzKSB7XG4gICAgICAgIHZhciBwcmV2TG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihwcmV2UHJvcHMudG8pO1xuXG4gICAgICAgIGlmICghbG9jYXRpb25zQXJlRXF1YWwocHJldkxvY2F0aW9uLCBfZXh0ZW5kcyh7fSwgbG9jYXRpb24sIHtcbiAgICAgICAgICBrZXk6IHByZXZMb2NhdGlvbi5rZXlcbiAgICAgICAgfSkpKSB7XG4gICAgICAgICAgbWV0aG9kKGxvY2F0aW9uKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHRvOiB0b1xuICAgIH0pO1xuICB9KTtcbn1cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBSZWRpcmVjdC5wcm9wVHlwZXMgPSB7XG4gICAgcHVzaDogUHJvcFR5cGVzLmJvb2wsXG4gICAgZnJvbTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICB0bzogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLm9iamVjdF0pLmlzUmVxdWlyZWRcbiAgfTtcbn1cblxudmFyIGNhY2hlJDEgPSB7fTtcbnZhciBjYWNoZUxpbWl0JDEgPSAxMDAwMDtcbnZhciBjYWNoZUNvdW50JDEgPSAwO1xuXG5mdW5jdGlvbiBjb21waWxlUGF0aCQxKHBhdGgsIG9wdGlvbnMpIHtcbiAgdmFyIGNhY2hlS2V5ID0gXCJcIiArIG9wdGlvbnMuZW5kICsgb3B0aW9ucy5zdHJpY3QgKyBvcHRpb25zLnNlbnNpdGl2ZTtcbiAgdmFyIHBhdGhDYWNoZSA9IGNhY2hlJDFbY2FjaGVLZXldIHx8IChjYWNoZSQxW2NhY2hlS2V5XSA9IHt9KTtcbiAgaWYgKHBhdGhDYWNoZVtwYXRoXSkgcmV0dXJuIHBhdGhDYWNoZVtwYXRoXTtcbiAgdmFyIGtleXMgPSBbXTtcbiAgdmFyIHJlZ2V4cCA9IHBhdGhUb1JlZ2V4cChwYXRoLCBrZXlzLCBvcHRpb25zKTtcbiAgdmFyIHJlc3VsdCA9IHtcbiAgICByZWdleHA6IHJlZ2V4cCxcbiAgICBrZXlzOiBrZXlzXG4gIH07XG5cbiAgaWYgKGNhY2hlQ291bnQkMSA8IGNhY2hlTGltaXQkMSkge1xuICAgIHBhdGhDYWNoZVtwYXRoXSA9IHJlc3VsdDtcbiAgICBjYWNoZUNvdW50JDErKztcbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59XG4vKipcbiAqIFB1YmxpYyBBUEkgZm9yIG1hdGNoaW5nIGEgVVJMIHBhdGhuYW1lIHRvIGEgcGF0aC5cbiAqL1xuXG5cbmZ1bmN0aW9uIG1hdGNoUGF0aChwYXRobmFtZSwgb3B0aW9ucykge1xuICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgb3B0aW9ucyA9IHt9O1xuICB9XG5cbiAgaWYgKHR5cGVvZiBvcHRpb25zID09PSBcInN0cmluZ1wiKSBvcHRpb25zID0ge1xuICAgIHBhdGg6IG9wdGlvbnNcbiAgfTtcbiAgdmFyIF9vcHRpb25zID0gb3B0aW9ucyxcbiAgICAgIHBhdGggPSBfb3B0aW9ucy5wYXRoLFxuICAgICAgX29wdGlvbnMkZXhhY3QgPSBfb3B0aW9ucy5leGFjdCxcbiAgICAgIGV4YWN0ID0gX29wdGlvbnMkZXhhY3QgPT09IHZvaWQgMCA/IGZhbHNlIDogX29wdGlvbnMkZXhhY3QsXG4gICAgICBfb3B0aW9ucyRzdHJpY3QgPSBfb3B0aW9ucy5zdHJpY3QsXG4gICAgICBzdHJpY3QgPSBfb3B0aW9ucyRzdHJpY3QgPT09IHZvaWQgMCA/IGZhbHNlIDogX29wdGlvbnMkc3RyaWN0LFxuICAgICAgX29wdGlvbnMkc2Vuc2l0aXZlID0gX29wdGlvbnMuc2Vuc2l0aXZlLFxuICAgICAgc2Vuc2l0aXZlID0gX29wdGlvbnMkc2Vuc2l0aXZlID09PSB2b2lkIDAgPyBmYWxzZSA6IF9vcHRpb25zJHNlbnNpdGl2ZTtcbiAgdmFyIHBhdGhzID0gW10uY29uY2F0KHBhdGgpO1xuICByZXR1cm4gcGF0aHMucmVkdWNlKGZ1bmN0aW9uIChtYXRjaGVkLCBwYXRoKSB7XG4gICAgaWYgKCFwYXRoKSByZXR1cm4gbnVsbDtcbiAgICBpZiAobWF0Y2hlZCkgcmV0dXJuIG1hdGNoZWQ7XG5cbiAgICB2YXIgX2NvbXBpbGVQYXRoID0gY29tcGlsZVBhdGgkMShwYXRoLCB7XG4gICAgICBlbmQ6IGV4YWN0LFxuICAgICAgc3RyaWN0OiBzdHJpY3QsXG4gICAgICBzZW5zaXRpdmU6IHNlbnNpdGl2ZVxuICAgIH0pLFxuICAgICAgICByZWdleHAgPSBfY29tcGlsZVBhdGgucmVnZXhwLFxuICAgICAgICBrZXlzID0gX2NvbXBpbGVQYXRoLmtleXM7XG5cbiAgICB2YXIgbWF0Y2ggPSByZWdleHAuZXhlYyhwYXRobmFtZSk7XG4gICAgaWYgKCFtYXRjaCkgcmV0dXJuIG51bGw7XG4gICAgdmFyIHVybCA9IG1hdGNoWzBdLFxuICAgICAgICB2YWx1ZXMgPSBtYXRjaC5zbGljZSgxKTtcbiAgICB2YXIgaXNFeGFjdCA9IHBhdGhuYW1lID09PSB1cmw7XG4gICAgaWYgKGV4YWN0ICYmICFpc0V4YWN0KSByZXR1cm4gbnVsbDtcbiAgICByZXR1cm4ge1xuICAgICAgcGF0aDogcGF0aCxcbiAgICAgIC8vIHRoZSBwYXRoIHVzZWQgdG8gbWF0Y2hcbiAgICAgIHVybDogcGF0aCA9PT0gXCIvXCIgJiYgdXJsID09PSBcIlwiID8gXCIvXCIgOiB1cmwsXG4gICAgICAvLyB0aGUgbWF0Y2hlZCBwb3J0aW9uIG9mIHRoZSBVUkxcbiAgICAgIGlzRXhhY3Q6IGlzRXhhY3QsXG4gICAgICAvLyB3aGV0aGVyIG9yIG5vdCB3ZSBtYXRjaGVkIGV4YWN0bHlcbiAgICAgIHBhcmFtczoga2V5cy5yZWR1Y2UoZnVuY3Rpb24gKG1lbW8sIGtleSwgaW5kZXgpIHtcbiAgICAgICAgbWVtb1trZXkubmFtZV0gPSB2YWx1ZXNbaW5kZXhdO1xuICAgICAgICByZXR1cm4gbWVtbztcbiAgICAgIH0sIHt9KVxuICAgIH07XG4gIH0sIG51bGwpO1xufVxuXG5mdW5jdGlvbiBpc0VtcHR5Q2hpbGRyZW4oY2hpbGRyZW4pIHtcbiAgcmV0dXJuIFJlYWN0LkNoaWxkcmVuLmNvdW50KGNoaWxkcmVuKSA9PT0gMDtcbn1cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIG1hdGNoaW5nIGEgc2luZ2xlIHBhdGggYW5kIHJlbmRlcmluZy5cbiAqL1xuXG5cbnZhciBSb3V0ZSA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShSb3V0ZSwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gUm91dGUoKSB7XG4gICAgcmV0dXJuIF9SZWFjdCRDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFJvdXRlLnByb3RvdHlwZTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChjb250ZXh0LkNvbnN1bWVyLCBudWxsLCBmdW5jdGlvbiAoY29udGV4dCQkMSkge1xuICAgICAgIWNvbnRleHQkJDEgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiWW91IHNob3VsZCBub3QgdXNlIDxSb3V0ZT4gb3V0c2lkZSBhIDxSb3V0ZXI+XCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAgIHZhciBsb2NhdGlvbiA9IF90aGlzLnByb3BzLmxvY2F0aW9uIHx8IGNvbnRleHQkJDEubG9jYXRpb247XG4gICAgICB2YXIgbWF0Y2ggPSBfdGhpcy5wcm9wcy5jb21wdXRlZE1hdGNoID8gX3RoaXMucHJvcHMuY29tcHV0ZWRNYXRjaCAvLyA8U3dpdGNoPiBhbHJlYWR5IGNvbXB1dGVkIHRoZSBtYXRjaCBmb3IgdXNcbiAgICAgIDogX3RoaXMucHJvcHMucGF0aCA/IG1hdGNoUGF0aChsb2NhdGlvbi5wYXRobmFtZSwgX3RoaXMucHJvcHMpIDogY29udGV4dCQkMS5tYXRjaDtcblxuICAgICAgdmFyIHByb3BzID0gX2V4dGVuZHMoe30sIGNvbnRleHQkJDEsIHtcbiAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uLFxuICAgICAgICBtYXRjaDogbWF0Y2hcbiAgICAgIH0pO1xuXG4gICAgICB2YXIgX3RoaXMkcHJvcHMgPSBfdGhpcy5wcm9wcyxcbiAgICAgICAgICBjaGlsZHJlbiA9IF90aGlzJHByb3BzLmNoaWxkcmVuLFxuICAgICAgICAgIGNvbXBvbmVudCA9IF90aGlzJHByb3BzLmNvbXBvbmVudCxcbiAgICAgICAgICByZW5kZXIgPSBfdGhpcyRwcm9wcy5yZW5kZXI7IC8vIFByZWFjdCB1c2VzIGFuIGVtcHR5IGFycmF5IGFzIGNoaWxkcmVuIGJ5XG4gICAgICAvLyBkZWZhdWx0LCBzbyB1c2UgbnVsbCBpZiB0aGF0J3MgdGhlIGNhc2UuXG5cbiAgICAgIGlmIChBcnJheS5pc0FycmF5KGNoaWxkcmVuKSAmJiBjaGlsZHJlbi5sZW5ndGggPT09IDApIHtcbiAgICAgICAgY2hpbGRyZW4gPSBudWxsO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIGNoaWxkcmVuID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgY2hpbGRyZW4gPSBjaGlsZHJlbihwcm9wcyk7XG5cbiAgICAgICAgaWYgKGNoaWxkcmVuID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgICAgICAgICB2YXIgcGF0aCA9IF90aGlzLnByb3BzLnBhdGg7XG4gICAgICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGZhbHNlLCBcIllvdSByZXR1cm5lZCBgdW5kZWZpbmVkYCBmcm9tIHRoZSBgY2hpbGRyZW5gIGZ1bmN0aW9uIG9mIFwiICsgKFwiPFJvdXRlXCIgKyAocGF0aCA/IFwiIHBhdGg9XFxcIlwiICsgcGF0aCArIFwiXFxcIlwiIDogXCJcIikgKyBcIj4sIGJ1dCB5b3UgXCIpICsgXCJzaG91bGQgaGF2ZSByZXR1cm5lZCBhIFJlYWN0IGVsZW1lbnQgb3IgYG51bGxgXCIpIDogdm9pZCAwO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGNoaWxkcmVuID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChjb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgICAgIHZhbHVlOiBwcm9wc1xuICAgICAgfSwgY2hpbGRyZW4gJiYgIWlzRW1wdHlDaGlsZHJlbihjaGlsZHJlbikgPyBjaGlsZHJlbiA6IHByb3BzLm1hdGNoID8gY29tcG9uZW50ID8gUmVhY3QuY3JlYXRlRWxlbWVudChjb21wb25lbnQsIHByb3BzKSA6IHJlbmRlciA/IHJlbmRlcihwcm9wcykgOiBudWxsIDogbnVsbCk7XG4gICAgfSk7XG4gIH07XG5cbiAgcmV0dXJuIFJvdXRlO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIFJvdXRlLnByb3BUeXBlcyA9IHtcbiAgICBjaGlsZHJlbjogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5ub2RlXSksXG4gICAgY29tcG9uZW50OiBmdW5jdGlvbiBjb21wb25lbnQocHJvcHMsIHByb3BOYW1lKSB7XG4gICAgICBpZiAocHJvcHNbcHJvcE5hbWVdICYmICFpc1ZhbGlkRWxlbWVudFR5cGUocHJvcHNbcHJvcE5hbWVdKSkge1xuICAgICAgICByZXR1cm4gbmV3IEVycm9yKFwiSW52YWxpZCBwcm9wICdjb21wb25lbnQnIHN1cHBsaWVkIHRvICdSb3V0ZSc6IHRoZSBwcm9wIGlzIG5vdCBhIHZhbGlkIFJlYWN0IGNvbXBvbmVudFwiKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGV4YWN0OiBQcm9wVHlwZXMuYm9vbCxcbiAgICBsb2NhdGlvbjogUHJvcFR5cGVzLm9iamVjdCxcbiAgICBwYXRoOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMuc3RyaW5nKV0pLFxuICAgIHJlbmRlcjogUHJvcFR5cGVzLmZ1bmMsXG4gICAgc2Vuc2l0aXZlOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBzdHJpY3Q6IFByb3BUeXBlcy5ib29sXG4gIH07XG5cbiAgUm91dGUucHJvdG90eXBlLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gKCkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoISh0aGlzLnByb3BzLmNoaWxkcmVuICYmICFpc0VtcHR5Q2hpbGRyZW4odGhpcy5wcm9wcy5jaGlsZHJlbikgJiYgdGhpcy5wcm9wcy5jb21wb25lbnQpLCBcIllvdSBzaG91bGQgbm90IHVzZSA8Um91dGUgY29tcG9uZW50PiBhbmQgPFJvdXRlIGNoaWxkcmVuPiBpbiB0aGUgc2FtZSByb3V0ZTsgPFJvdXRlIGNvbXBvbmVudD4gd2lsbCBiZSBpZ25vcmVkXCIpIDogdm9pZCAwO1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoISh0aGlzLnByb3BzLmNoaWxkcmVuICYmICFpc0VtcHR5Q2hpbGRyZW4odGhpcy5wcm9wcy5jaGlsZHJlbikgJiYgdGhpcy5wcm9wcy5yZW5kZXIpLCBcIllvdSBzaG91bGQgbm90IHVzZSA8Um91dGUgcmVuZGVyPiBhbmQgPFJvdXRlIGNoaWxkcmVuPiBpbiB0aGUgc2FtZSByb3V0ZTsgPFJvdXRlIHJlbmRlcj4gd2lsbCBiZSBpZ25vcmVkXCIpIDogdm9pZCAwO1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoISh0aGlzLnByb3BzLmNvbXBvbmVudCAmJiB0aGlzLnByb3BzLnJlbmRlciksIFwiWW91IHNob3VsZCBub3QgdXNlIDxSb3V0ZSBjb21wb25lbnQ+IGFuZCA8Um91dGUgcmVuZGVyPiBpbiB0aGUgc2FtZSByb3V0ZTsgPFJvdXRlIHJlbmRlcj4gd2lsbCBiZSBpZ25vcmVkXCIpIDogdm9pZCAwO1xuICB9O1xuXG4gIFJvdXRlLnByb3RvdHlwZS5jb21wb25lbnREaWRVcGRhdGUgPSBmdW5jdGlvbiAocHJldlByb3BzKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghKHRoaXMucHJvcHMubG9jYXRpb24gJiYgIXByZXZQcm9wcy5sb2NhdGlvbiksICc8Um91dGU+IGVsZW1lbnRzIHNob3VsZCBub3QgY2hhbmdlIGZyb20gdW5jb250cm9sbGVkIHRvIGNvbnRyb2xsZWQgKG9yIHZpY2UgdmVyc2EpLiBZb3UgaW5pdGlhbGx5IHVzZWQgbm8gXCJsb2NhdGlvblwiIHByb3AgYW5kIHRoZW4gcHJvdmlkZWQgb25lIG9uIGEgc3Vic2VxdWVudCByZW5kZXIuJykgOiB2b2lkIDA7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghKCF0aGlzLnByb3BzLmxvY2F0aW9uICYmIHByZXZQcm9wcy5sb2NhdGlvbiksICc8Um91dGU+IGVsZW1lbnRzIHNob3VsZCBub3QgY2hhbmdlIGZyb20gY29udHJvbGxlZCB0byB1bmNvbnRyb2xsZWQgKG9yIHZpY2UgdmVyc2EpLiBZb3UgcHJvdmlkZWQgYSBcImxvY2F0aW9uXCIgcHJvcCBpbml0aWFsbHkgYnV0IG9taXR0ZWQgaXQgb24gYSBzdWJzZXF1ZW50IHJlbmRlci4nKSA6IHZvaWQgMDtcbiAgfTtcbn1cblxuZnVuY3Rpb24gYWRkTGVhZGluZ1NsYXNoKHBhdGgpIHtcbiAgcmV0dXJuIHBhdGguY2hhckF0KDApID09PSBcIi9cIiA/IHBhdGggOiBcIi9cIiArIHBhdGg7XG59XG5cbmZ1bmN0aW9uIGFkZEJhc2VuYW1lKGJhc2VuYW1lLCBsb2NhdGlvbikge1xuICBpZiAoIWJhc2VuYW1lKSByZXR1cm4gbG9jYXRpb247XG4gIHJldHVybiBfZXh0ZW5kcyh7fSwgbG9jYXRpb24sIHtcbiAgICBwYXRobmFtZTogYWRkTGVhZGluZ1NsYXNoKGJhc2VuYW1lKSArIGxvY2F0aW9uLnBhdGhuYW1lXG4gIH0pO1xufVxuXG5mdW5jdGlvbiBzdHJpcEJhc2VuYW1lKGJhc2VuYW1lLCBsb2NhdGlvbikge1xuICBpZiAoIWJhc2VuYW1lKSByZXR1cm4gbG9jYXRpb247XG4gIHZhciBiYXNlID0gYWRkTGVhZGluZ1NsYXNoKGJhc2VuYW1lKTtcbiAgaWYgKGxvY2F0aW9uLnBhdGhuYW1lLmluZGV4T2YoYmFzZSkgIT09IDApIHJldHVybiBsb2NhdGlvbjtcbiAgcmV0dXJuIF9leHRlbmRzKHt9LCBsb2NhdGlvbiwge1xuICAgIHBhdGhuYW1lOiBsb2NhdGlvbi5wYXRobmFtZS5zdWJzdHIoYmFzZS5sZW5ndGgpXG4gIH0pO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVVUkwobG9jYXRpb24pIHtcbiAgcmV0dXJuIHR5cGVvZiBsb2NhdGlvbiA9PT0gXCJzdHJpbmdcIiA/IGxvY2F0aW9uIDogY3JlYXRlUGF0aChsb2NhdGlvbik7XG59XG5cbmZ1bmN0aW9uIHN0YXRpY0hhbmRsZXIobWV0aG9kTmFtZSkge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJZb3UgY2Fubm90ICVzIHdpdGggPFN0YXRpY1JvdXRlcj5cIiwgbWV0aG9kTmFtZSkgOiBpbnZhcmlhbnQoZmFsc2UpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBub29wKCkge31cbi8qKlxuICogVGhlIHB1YmxpYyB0b3AtbGV2ZWwgQVBJIGZvciBhIFwic3RhdGljXCIgPFJvdXRlcj4sIHNvLWNhbGxlZCBiZWNhdXNlIGl0XG4gKiBjYW4ndCBhY3R1YWxseSBjaGFuZ2UgdGhlIGN1cnJlbnQgbG9jYXRpb24uIEluc3RlYWQsIGl0IGp1c3QgcmVjb3Jkc1xuICogbG9jYXRpb24gY2hhbmdlcyBpbiBhIGNvbnRleHQgb2JqZWN0LiBVc2VmdWwgbWFpbmx5IGluIHRlc3RpbmcgYW5kXG4gKiBzZXJ2ZXItcmVuZGVyaW5nIHNjZW5hcmlvcy5cbiAqL1xuXG5cbnZhciBTdGF0aWNSb3V0ZXIgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoU3RhdGljUm91dGVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBTdGF0aWNSb3V0ZXIoKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIF90aGlzID0gX1JlYWN0JENvbXBvbmVudC5jYWxsLmFwcGx5KF9SZWFjdCRDb21wb25lbnQsIFt0aGlzXS5jb25jYXQoYXJncykpIHx8IHRoaXM7XG5cbiAgICBfdGhpcy5oYW5kbGVQdXNoID0gZnVuY3Rpb24gKGxvY2F0aW9uKSB7XG4gICAgICByZXR1cm4gX3RoaXMubmF2aWdhdGVUbyhsb2NhdGlvbiwgXCJQVVNIXCIpO1xuICAgIH07XG5cbiAgICBfdGhpcy5oYW5kbGVSZXBsYWNlID0gZnVuY3Rpb24gKGxvY2F0aW9uKSB7XG4gICAgICByZXR1cm4gX3RoaXMubmF2aWdhdGVUbyhsb2NhdGlvbiwgXCJSRVBMQUNFXCIpO1xuICAgIH07XG5cbiAgICBfdGhpcy5oYW5kbGVMaXN0ZW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gbm9vcDtcbiAgICB9O1xuXG4gICAgX3RoaXMuaGFuZGxlQmxvY2sgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gbm9vcDtcbiAgICB9O1xuXG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFN0YXRpY1JvdXRlci5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLm5hdmlnYXRlVG8gPSBmdW5jdGlvbiBuYXZpZ2F0ZVRvKGxvY2F0aW9uLCBhY3Rpb24pIHtcbiAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBfdGhpcyRwcm9wcyRiYXNlbmFtZSA9IF90aGlzJHByb3BzLmJhc2VuYW1lLFxuICAgICAgICBiYXNlbmFtZSA9IF90aGlzJHByb3BzJGJhc2VuYW1lID09PSB2b2lkIDAgPyBcIlwiIDogX3RoaXMkcHJvcHMkYmFzZW5hbWUsXG4gICAgICAgIF90aGlzJHByb3BzJGNvbnRleHQgPSBfdGhpcyRwcm9wcy5jb250ZXh0LFxuICAgICAgICBjb250ZXh0ID0gX3RoaXMkcHJvcHMkY29udGV4dCA9PT0gdm9pZCAwID8ge30gOiBfdGhpcyRwcm9wcyRjb250ZXh0O1xuICAgIGNvbnRleHQuYWN0aW9uID0gYWN0aW9uO1xuICAgIGNvbnRleHQubG9jYXRpb24gPSBhZGRCYXNlbmFtZShiYXNlbmFtZSwgY3JlYXRlTG9jYXRpb24obG9jYXRpb24pKTtcbiAgICBjb250ZXh0LnVybCA9IGNyZWF0ZVVSTChjb250ZXh0LmxvY2F0aW9uKTtcbiAgfTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfdGhpcyRwcm9wczIgPSB0aGlzLnByb3BzLFxuICAgICAgICBfdGhpcyRwcm9wczIkYmFzZW5hbWUgPSBfdGhpcyRwcm9wczIuYmFzZW5hbWUsXG4gICAgICAgIGJhc2VuYW1lID0gX3RoaXMkcHJvcHMyJGJhc2VuYW1lID09PSB2b2lkIDAgPyBcIlwiIDogX3RoaXMkcHJvcHMyJGJhc2VuYW1lLFxuICAgICAgICBfdGhpcyRwcm9wczIkY29udGV4dCA9IF90aGlzJHByb3BzMi5jb250ZXh0LFxuICAgICAgICBjb250ZXh0ID0gX3RoaXMkcHJvcHMyJGNvbnRleHQgPT09IHZvaWQgMCA/IHt9IDogX3RoaXMkcHJvcHMyJGNvbnRleHQsXG4gICAgICAgIF90aGlzJHByb3BzMiRsb2NhdGlvbiA9IF90aGlzJHByb3BzMi5sb2NhdGlvbixcbiAgICAgICAgbG9jYXRpb24gPSBfdGhpcyRwcm9wczIkbG9jYXRpb24gPT09IHZvaWQgMCA/IFwiL1wiIDogX3RoaXMkcHJvcHMyJGxvY2F0aW9uLFxuICAgICAgICByZXN0ID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3RoaXMkcHJvcHMyLCBbXCJiYXNlbmFtZVwiLCBcImNvbnRleHRcIiwgXCJsb2NhdGlvblwiXSk7XG5cbiAgICB2YXIgaGlzdG9yeSA9IHtcbiAgICAgIGNyZWF0ZUhyZWY6IGZ1bmN0aW9uIGNyZWF0ZUhyZWYocGF0aCkge1xuICAgICAgICByZXR1cm4gYWRkTGVhZGluZ1NsYXNoKGJhc2VuYW1lICsgY3JlYXRlVVJMKHBhdGgpKTtcbiAgICAgIH0sXG4gICAgICBhY3Rpb246IFwiUE9QXCIsXG4gICAgICBsb2NhdGlvbjogc3RyaXBCYXNlbmFtZShiYXNlbmFtZSwgY3JlYXRlTG9jYXRpb24obG9jYXRpb24pKSxcbiAgICAgIHB1c2g6IHRoaXMuaGFuZGxlUHVzaCxcbiAgICAgIHJlcGxhY2U6IHRoaXMuaGFuZGxlUmVwbGFjZSxcbiAgICAgIGdvOiBzdGF0aWNIYW5kbGVyKFwiZ29cIiksXG4gICAgICBnb0JhY2s6IHN0YXRpY0hhbmRsZXIoXCJnb0JhY2tcIiksXG4gICAgICBnb0ZvcndhcmQ6IHN0YXRpY0hhbmRsZXIoXCJnb0ZvcndhcmRcIiksXG4gICAgICBsaXN0ZW46IHRoaXMuaGFuZGxlTGlzdGVuLFxuICAgICAgYmxvY2s6IHRoaXMuaGFuZGxlQmxvY2tcbiAgICB9O1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFJvdXRlciwgX2V4dGVuZHMoe30sIHJlc3QsIHtcbiAgICAgIGhpc3Rvcnk6IGhpc3RvcnksXG4gICAgICBzdGF0aWNDb250ZXh0OiBjb250ZXh0XG4gICAgfSkpO1xuICB9O1xuXG4gIHJldHVybiBTdGF0aWNSb3V0ZXI7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgU3RhdGljUm91dGVyLnByb3BUeXBlcyA9IHtcbiAgICBiYXNlbmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBjb250ZXh0OiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIGxvY2F0aW9uOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMub2JqZWN0XSlcbiAgfTtcblxuICBTdGF0aWNSb3V0ZXIucHJvdG90eXBlLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gKCkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoIXRoaXMucHJvcHMuaGlzdG9yeSwgXCI8U3RhdGljUm91dGVyPiBpZ25vcmVzIHRoZSBoaXN0b3J5IHByb3AuIFRvIHVzZSBhIGN1c3RvbSBoaXN0b3J5LCBcIiArIFwidXNlIGBpbXBvcnQgeyBSb3V0ZXIgfWAgaW5zdGVhZCBvZiBgaW1wb3J0IHsgU3RhdGljUm91dGVyIGFzIFJvdXRlciB9YC5cIikgOiB2b2lkIDA7XG4gIH07XG59XG5cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIHJlbmRlcmluZyB0aGUgZmlyc3QgPFJvdXRlPiB0aGF0IG1hdGNoZXMuXG4gKi9cblxudmFyIFN3aXRjaCA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShTd2l0Y2gsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFN3aXRjaCgpIHtcbiAgICByZXR1cm4gX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gU3dpdGNoLnByb3RvdHlwZTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChjb250ZXh0LkNvbnN1bWVyLCBudWxsLCBmdW5jdGlvbiAoY29udGV4dCQkMSkge1xuICAgICAgIWNvbnRleHQkJDEgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiWW91IHNob3VsZCBub3QgdXNlIDxTd2l0Y2g+IG91dHNpZGUgYSA8Um91dGVyPlwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgICB2YXIgbG9jYXRpb24gPSBfdGhpcy5wcm9wcy5sb2NhdGlvbiB8fCBjb250ZXh0JCQxLmxvY2F0aW9uO1xuICAgICAgdmFyIGVsZW1lbnQsIG1hdGNoOyAvLyBXZSB1c2UgUmVhY3QuQ2hpbGRyZW4uZm9yRWFjaCBpbnN0ZWFkIG9mIFJlYWN0LkNoaWxkcmVuLnRvQXJyYXkoKS5maW5kKClcbiAgICAgIC8vIGhlcmUgYmVjYXVzZSB0b0FycmF5IGFkZHMga2V5cyB0byBhbGwgY2hpbGQgZWxlbWVudHMgYW5kIHdlIGRvIG5vdCB3YW50XG4gICAgICAvLyB0byB0cmlnZ2VyIGFuIHVubW91bnQvcmVtb3VudCBmb3IgdHdvIDxSb3V0ZT5zIHRoYXQgcmVuZGVyIHRoZSBzYW1lXG4gICAgICAvLyBjb21wb25lbnQgYXQgZGlmZmVyZW50IFVSTHMuXG5cbiAgICAgIFJlYWN0LkNoaWxkcmVuLmZvckVhY2goX3RoaXMucHJvcHMuY2hpbGRyZW4sIGZ1bmN0aW9uIChjaGlsZCkge1xuICAgICAgICBpZiAobWF0Y2ggPT0gbnVsbCAmJiBSZWFjdC5pc1ZhbGlkRWxlbWVudChjaGlsZCkpIHtcbiAgICAgICAgICBlbGVtZW50ID0gY2hpbGQ7XG4gICAgICAgICAgdmFyIHBhdGggPSBjaGlsZC5wcm9wcy5wYXRoIHx8IGNoaWxkLnByb3BzLmZyb207XG4gICAgICAgICAgbWF0Y2ggPSBwYXRoID8gbWF0Y2hQYXRoKGxvY2F0aW9uLnBhdGhuYW1lLCBfZXh0ZW5kcyh7fSwgY2hpbGQucHJvcHMsIHtcbiAgICAgICAgICAgIHBhdGg6IHBhdGhcbiAgICAgICAgICB9KSkgOiBjb250ZXh0JCQxLm1hdGNoO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBtYXRjaCA/IFJlYWN0LmNsb25lRWxlbWVudChlbGVtZW50LCB7XG4gICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvbixcbiAgICAgICAgY29tcHV0ZWRNYXRjaDogbWF0Y2hcbiAgICAgIH0pIDogbnVsbDtcbiAgICB9KTtcbiAgfTtcblxuICByZXR1cm4gU3dpdGNoO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIFN3aXRjaC5wcm9wVHlwZXMgPSB7XG4gICAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICAgIGxvY2F0aW9uOiBQcm9wVHlwZXMub2JqZWN0XG4gIH07XG5cbiAgU3dpdGNoLnByb3RvdHlwZS5jb21wb25lbnREaWRVcGRhdGUgPSBmdW5jdGlvbiAocHJldlByb3BzKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghKHRoaXMucHJvcHMubG9jYXRpb24gJiYgIXByZXZQcm9wcy5sb2NhdGlvbiksICc8U3dpdGNoPiBlbGVtZW50cyBzaG91bGQgbm90IGNoYW5nZSBmcm9tIHVuY29udHJvbGxlZCB0byBjb250cm9sbGVkIChvciB2aWNlIHZlcnNhKS4gWW91IGluaXRpYWxseSB1c2VkIG5vIFwibG9jYXRpb25cIiBwcm9wIGFuZCB0aGVuIHByb3ZpZGVkIG9uZSBvbiBhIHN1YnNlcXVlbnQgcmVuZGVyLicpIDogdm9pZCAwO1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoISghdGhpcy5wcm9wcy5sb2NhdGlvbiAmJiBwcmV2UHJvcHMubG9jYXRpb24pLCAnPFN3aXRjaD4gZWxlbWVudHMgc2hvdWxkIG5vdCBjaGFuZ2UgZnJvbSBjb250cm9sbGVkIHRvIHVuY29udHJvbGxlZCAob3IgdmljZSB2ZXJzYSkuIFlvdSBwcm92aWRlZCBhIFwibG9jYXRpb25cIiBwcm9wIGluaXRpYWxseSBidXQgb21pdHRlZCBpdCBvbiBhIHN1YnNlcXVlbnQgcmVuZGVyLicpIDogdm9pZCAwO1xuICB9O1xufVxuXG4vKipcbiAqIEEgcHVibGljIGhpZ2hlci1vcmRlciBjb21wb25lbnQgdG8gYWNjZXNzIHRoZSBpbXBlcmF0aXZlIEFQSVxuICovXG5cbmZ1bmN0aW9uIHdpdGhSb3V0ZXIoQ29tcG9uZW50KSB7XG4gIHZhciBkaXNwbGF5TmFtZSA9IFwid2l0aFJvdXRlcihcIiArIChDb21wb25lbnQuZGlzcGxheU5hbWUgfHwgQ29tcG9uZW50Lm5hbWUpICsgXCIpXCI7XG5cbiAgdmFyIEMgPSBmdW5jdGlvbiBDKHByb3BzKSB7XG4gICAgdmFyIHdyYXBwZWRDb21wb25lbnRSZWYgPSBwcm9wcy53cmFwcGVkQ29tcG9uZW50UmVmLFxuICAgICAgICByZW1haW5pbmdQcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHByb3BzLCBbXCJ3cmFwcGVkQ29tcG9uZW50UmVmXCJdKTtcblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KGNvbnRleHQuQ29uc3VtZXIsIG51bGwsIGZ1bmN0aW9uIChjb250ZXh0JCQxKSB7XG4gICAgICAhY29udGV4dCQkMSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPFwiICsgZGlzcGxheU5hbWUgKyBcIiAvPiBvdXRzaWRlIGEgPFJvdXRlcj5cIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBfZXh0ZW5kcyh7fSwgcmVtYWluaW5nUHJvcHMsIGNvbnRleHQkJDEsIHtcbiAgICAgICAgcmVmOiB3cmFwcGVkQ29tcG9uZW50UmVmXG4gICAgICB9KSk7XG4gICAgfSk7XG4gIH07XG5cbiAgQy5kaXNwbGF5TmFtZSA9IGRpc3BsYXlOYW1lO1xuICBDLldyYXBwZWRDb21wb25lbnQgPSBDb21wb25lbnQ7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgIEMucHJvcFR5cGVzID0ge1xuICAgICAgd3JhcHBlZENvbXBvbmVudFJlZjogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3RdKVxuICAgIH07XG4gIH1cblxuICByZXR1cm4gaG9pc3RTdGF0aWNzKEMsIENvbXBvbmVudCk7XG59XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgaWYgKHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICB2YXIgZ2xvYmFsID0gd2luZG93O1xuICAgIHZhciBrZXkgPSBcIl9fcmVhY3Rfcm91dGVyX2J1aWxkX19cIjtcbiAgICB2YXIgYnVpbGROYW1lcyA9IHtcbiAgICAgIGNqczogXCJDb21tb25KU1wiLFxuICAgICAgZXNtOiBcIkVTIG1vZHVsZXNcIixcbiAgICAgIHVtZDogXCJVTURcIlxuICAgIH07XG5cbiAgICBpZiAoZ2xvYmFsW2tleV0gJiYgZ2xvYmFsW2tleV0gIT09IFwiZXNtXCIpIHtcbiAgICAgIHZhciBpbml0aWFsQnVpbGROYW1lID0gYnVpbGROYW1lc1tnbG9iYWxba2V5XV07XG4gICAgICB2YXIgc2Vjb25kYXJ5QnVpbGROYW1lID0gYnVpbGROYW1lc1tcImVzbVwiXTsgLy8gVE9ETzogQWRkIGxpbmsgdG8gYXJ0aWNsZSB0aGF0IGV4cGxhaW5zIGluIGRldGFpbCBob3cgdG8gYXZvaWRcbiAgICAgIC8vIGxvYWRpbmcgMiBkaWZmZXJlbnQgYnVpbGRzLlxuXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJZb3UgYXJlIGxvYWRpbmcgdGhlIFwiICsgc2Vjb25kYXJ5QnVpbGROYW1lICsgXCIgYnVpbGQgb2YgUmVhY3QgUm91dGVyIFwiICsgKFwib24gYSBwYWdlIHRoYXQgaXMgYWxyZWFkeSBydW5uaW5nIHRoZSBcIiArIGluaXRpYWxCdWlsZE5hbWUgKyBcIiBcIikgKyBcImJ1aWxkLCBzbyB0aGluZ3Mgd29uJ3Qgd29yayByaWdodC5cIik7XG4gICAgfVxuXG4gICAgZ2xvYmFsW2tleV0gPSBcImVzbVwiO1xuICB9XG59XG5cbmV4cG9ydCB7IE1lbW9yeVJvdXRlciwgUHJvbXB0LCBSZWRpcmVjdCwgUm91dGUsIFJvdXRlciwgU3RhdGljUm91dGVyLCBTd2l0Y2gsIGdlbmVyYXRlUGF0aCwgbWF0Y2hQYXRoLCB3aXRoUm91dGVyLCBjb250ZXh0IGFzIF9fUm91dGVyQ29udGV4dCB9O1xuIiwiaW1wb3J0IF9pbmhlcml0c0xvb3NlIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzTG9vc2UnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IFJvdXRlciwgX19Sb3V0ZXJDb250ZXh0LCBtYXRjaFBhdGggfSBmcm9tICdyZWFjdC1yb3V0ZXInO1xuZXhwb3J0ICogZnJvbSAncmVhY3Qtcm91dGVyJztcbmltcG9ydCB7IGNyZWF0ZUJyb3dzZXJIaXN0b3J5LCBjcmVhdGVIYXNoSGlzdG9yeSwgY3JlYXRlTG9jYXRpb24gfSBmcm9tICdoaXN0b3J5JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgd2FybmluZyBmcm9tICd0aW55LXdhcm5pbmcnO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHMnO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UnO1xuaW1wb3J0IGludmFyaWFudCBmcm9tICd0aW55LWludmFyaWFudCc7XG5cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIGEgPFJvdXRlcj4gdGhhdCB1c2VzIEhUTUw1IGhpc3RvcnkuXG4gKi9cblxudmFyIEJyb3dzZXJSb3V0ZXIgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoQnJvd3NlclJvdXRlciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gQnJvd3NlclJvdXRlcigpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgX3RoaXMgPSBfUmVhY3QkQ29tcG9uZW50LmNhbGwuYXBwbHkoX1JlYWN0JENvbXBvbmVudCwgW3RoaXNdLmNvbmNhdChhcmdzKSkgfHwgdGhpcztcbiAgICBfdGhpcy5oaXN0b3J5ID0gY3JlYXRlQnJvd3Nlckhpc3RvcnkoX3RoaXMucHJvcHMpO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBCcm93c2VyUm91dGVyLnByb3RvdHlwZTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFJvdXRlciwge1xuICAgICAgaGlzdG9yeTogdGhpcy5oaXN0b3J5LFxuICAgICAgY2hpbGRyZW46IHRoaXMucHJvcHMuY2hpbGRyZW5cbiAgICB9KTtcbiAgfTtcblxuICByZXR1cm4gQnJvd3NlclJvdXRlcjtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBCcm93c2VyUm91dGVyLnByb3BUeXBlcyA9IHtcbiAgICBiYXNlbmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG4gICAgZm9yY2VSZWZyZXNoOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBnZXRVc2VyQ29uZmlybWF0aW9uOiBQcm9wVHlwZXMuZnVuYyxcbiAgICBrZXlMZW5ndGg6IFByb3BUeXBlcy5udW1iZXJcbiAgfTtcblxuICBCcm93c2VyUm91dGVyLnByb3RvdHlwZS5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uICgpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCF0aGlzLnByb3BzLmhpc3RvcnksIFwiPEJyb3dzZXJSb3V0ZXI+IGlnbm9yZXMgdGhlIGhpc3RvcnkgcHJvcC4gVG8gdXNlIGEgY3VzdG9tIGhpc3RvcnksIFwiICsgXCJ1c2UgYGltcG9ydCB7IFJvdXRlciB9YCBpbnN0ZWFkIG9mIGBpbXBvcnQgeyBCcm93c2VyUm91dGVyIGFzIFJvdXRlciB9YC5cIikgOiB2b2lkIDA7XG4gIH07XG59XG5cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIGEgPFJvdXRlcj4gdGhhdCB1c2VzIHdpbmRvdy5sb2NhdGlvbi5oYXNoLlxuICovXG5cbnZhciBIYXNoUm91dGVyID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKEhhc2hSb3V0ZXIsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIEhhc2hSb3V0ZXIoKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIF90aGlzID0gX1JlYWN0JENvbXBvbmVudC5jYWxsLmFwcGx5KF9SZWFjdCRDb21wb25lbnQsIFt0aGlzXS5jb25jYXQoYXJncykpIHx8IHRoaXM7XG4gICAgX3RoaXMuaGlzdG9yeSA9IGNyZWF0ZUhhc2hIaXN0b3J5KF90aGlzLnByb3BzKTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gSGFzaFJvdXRlci5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChSb3V0ZXIsIHtcbiAgICAgIGhpc3Rvcnk6IHRoaXMuaGlzdG9yeSxcbiAgICAgIGNoaWxkcmVuOiB0aGlzLnByb3BzLmNoaWxkcmVuXG4gICAgfSk7XG4gIH07XG5cbiAgcmV0dXJuIEhhc2hSb3V0ZXI7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgSGFzaFJvdXRlci5wcm9wVHlwZXMgPSB7XG4gICAgYmFzZW5hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICAgIGdldFVzZXJDb25maXJtYXRpb246IFByb3BUeXBlcy5mdW5jLFxuICAgIGhhc2hUeXBlOiBQcm9wVHlwZXMub25lT2YoW1wiaGFzaGJhbmdcIiwgXCJub3NsYXNoXCIsIFwic2xhc2hcIl0pXG4gIH07XG5cbiAgSGFzaFJvdXRlci5wcm90b3R5cGUuY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghdGhpcy5wcm9wcy5oaXN0b3J5LCBcIjxIYXNoUm91dGVyPiBpZ25vcmVzIHRoZSBoaXN0b3J5IHByb3AuIFRvIHVzZSBhIGN1c3RvbSBoaXN0b3J5LCBcIiArIFwidXNlIGBpbXBvcnQgeyBSb3V0ZXIgfWAgaW5zdGVhZCBvZiBgaW1wb3J0IHsgSGFzaFJvdXRlciBhcyBSb3V0ZXIgfWAuXCIpIDogdm9pZCAwO1xuICB9O1xufVxuXG5mdW5jdGlvbiBpc01vZGlmaWVkRXZlbnQoZXZlbnQpIHtcbiAgcmV0dXJuICEhKGV2ZW50Lm1ldGFLZXkgfHwgZXZlbnQuYWx0S2V5IHx8IGV2ZW50LmN0cmxLZXkgfHwgZXZlbnQuc2hpZnRLZXkpO1xufVxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgcmVuZGVyaW5nIGEgaGlzdG9yeS1hd2FyZSA8YT4uXG4gKi9cblxuXG52YXIgTGluayA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShMaW5rLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBMaW5rKCkge1xuICAgIHJldHVybiBfUmVhY3QkQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBMaW5rLnByb3RvdHlwZTtcblxuICBfcHJvdG8uaGFuZGxlQ2xpY2sgPSBmdW5jdGlvbiBoYW5kbGVDbGljayhldmVudCwgaGlzdG9yeSkge1xuICAgIHRyeSB7XG4gICAgICBpZiAodGhpcy5wcm9wcy5vbkNsaWNrKSB0aGlzLnByb3BzLm9uQ2xpY2soZXZlbnQpO1xuICAgIH0gY2F0Y2ggKGV4KSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgdGhyb3cgZXg7XG4gICAgfVxuXG4gICAgaWYgKCFldmVudC5kZWZhdWx0UHJldmVudGVkICYmIC8vIG9uQ2xpY2sgcHJldmVudGVkIGRlZmF1bHRcbiAgICBldmVudC5idXR0b24gPT09IDAgJiYgKCAvLyBpZ25vcmUgZXZlcnl0aGluZyBidXQgbGVmdCBjbGlja3NcbiAgICAhdGhpcy5wcm9wcy50YXJnZXQgfHwgdGhpcy5wcm9wcy50YXJnZXQgPT09IFwiX3NlbGZcIikgJiYgLy8gbGV0IGJyb3dzZXIgaGFuZGxlIFwidGFyZ2V0PV9ibGFua1wiIGV0Yy5cbiAgICAhaXNNb2RpZmllZEV2ZW50KGV2ZW50KSAvLyBpZ25vcmUgY2xpY2tzIHdpdGggbW9kaWZpZXIga2V5c1xuICAgICkge1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB2YXIgbWV0aG9kID0gdGhpcy5wcm9wcy5yZXBsYWNlID8gaGlzdG9yeS5yZXBsYWNlIDogaGlzdG9yeS5wdXNoO1xuICAgICAgICBtZXRob2QodGhpcy5wcm9wcy50byk7XG4gICAgICB9XG4gIH07XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgaW5uZXJSZWYgPSBfdGhpcyRwcm9wcy5pbm5lclJlZixcbiAgICAgICAgcmVwbGFjZSA9IF90aGlzJHByb3BzLnJlcGxhY2UsXG4gICAgICAgIHRvID0gX3RoaXMkcHJvcHMudG8sXG4gICAgICAgIHJlc3QgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfdGhpcyRwcm9wcywgW1wiaW5uZXJSZWZcIiwgXCJyZXBsYWNlXCIsIFwidG9cIl0pOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG5cblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KF9fUm91dGVyQ29udGV4dC5Db25zdW1lciwgbnVsbCwgZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICAgICFjb250ZXh0ID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIllvdSBzaG91bGQgbm90IHVzZSA8TGluaz4gb3V0c2lkZSBhIDxSb3V0ZXI+XCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAgIHZhciBsb2NhdGlvbiA9IHR5cGVvZiB0byA9PT0gXCJzdHJpbmdcIiA/IGNyZWF0ZUxvY2F0aW9uKHRvLCBudWxsLCBudWxsLCBjb250ZXh0LmxvY2F0aW9uKSA6IHRvO1xuICAgICAgdmFyIGhyZWYgPSBsb2NhdGlvbiA/IGNvbnRleHQuaGlzdG9yeS5jcmVhdGVIcmVmKGxvY2F0aW9uKSA6IFwiXCI7XG4gICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcImFcIiwgX2V4dGVuZHMoe30sIHJlc3QsIHtcbiAgICAgICAgb25DbGljazogZnVuY3Rpb24gb25DbGljayhldmVudCkge1xuICAgICAgICAgIHJldHVybiBfdGhpcy5oYW5kbGVDbGljayhldmVudCwgY29udGV4dC5oaXN0b3J5KTtcbiAgICAgICAgfSxcbiAgICAgICAgaHJlZjogaHJlZixcbiAgICAgICAgcmVmOiBpbm5lclJlZlxuICAgICAgfSkpO1xuICAgIH0pO1xuICB9O1xuXG4gIHJldHVybiBMaW5rO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIHZhciB0b1R5cGUgPSBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMub2JqZWN0XSk7XG4gIHZhciBpbm5lclJlZlR5cGUgPSBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBjdXJyZW50OiBQcm9wVHlwZXMuYW55XG4gIH0pXSk7XG4gIExpbmsucHJvcFR5cGVzID0ge1xuICAgIGlubmVyUmVmOiBpbm5lclJlZlR5cGUsXG4gICAgb25DbGljazogUHJvcFR5cGVzLmZ1bmMsXG4gICAgcmVwbGFjZTogUHJvcFR5cGVzLmJvb2wsXG4gICAgdGFyZ2V0OiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIHRvOiB0b1R5cGUuaXNSZXF1aXJlZFxuICB9O1xufVxuXG5mdW5jdGlvbiBqb2luQ2xhc3NuYW1lcygpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGNsYXNzbmFtZXMgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgY2xhc3NuYW1lc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIHJldHVybiBjbGFzc25hbWVzLmZpbHRlcihmdW5jdGlvbiAoaSkge1xuICAgIHJldHVybiBpO1xuICB9KS5qb2luKFwiIFwiKTtcbn1cbi8qKlxuICogQSA8TGluaz4gd3JhcHBlciB0aGF0IGtub3dzIGlmIGl0J3MgXCJhY3RpdmVcIiBvciBub3QuXG4gKi9cblxuXG5mdW5jdGlvbiBOYXZMaW5rKF9yZWYpIHtcbiAgdmFyIF9yZWYkYXJpYUN1cnJlbnQgPSBfcmVmW1wiYXJpYS1jdXJyZW50XCJdLFxuICAgICAgYXJpYUN1cnJlbnQgPSBfcmVmJGFyaWFDdXJyZW50ID09PSB2b2lkIDAgPyBcInBhZ2VcIiA6IF9yZWYkYXJpYUN1cnJlbnQsXG4gICAgICBfcmVmJGFjdGl2ZUNsYXNzTmFtZSA9IF9yZWYuYWN0aXZlQ2xhc3NOYW1lLFxuICAgICAgYWN0aXZlQ2xhc3NOYW1lID0gX3JlZiRhY3RpdmVDbGFzc05hbWUgPT09IHZvaWQgMCA/IFwiYWN0aXZlXCIgOiBfcmVmJGFjdGl2ZUNsYXNzTmFtZSxcbiAgICAgIGFjdGl2ZVN0eWxlID0gX3JlZi5hY3RpdmVTdHlsZSxcbiAgICAgIGNsYXNzTmFtZVByb3AgPSBfcmVmLmNsYXNzTmFtZSxcbiAgICAgIGV4YWN0ID0gX3JlZi5leGFjdCxcbiAgICAgIGlzQWN0aXZlUHJvcCA9IF9yZWYuaXNBY3RpdmUsXG4gICAgICBsb2NhdGlvblByb3AgPSBfcmVmLmxvY2F0aW9uLFxuICAgICAgc3RyaWN0ID0gX3JlZi5zdHJpY3QsXG4gICAgICBzdHlsZVByb3AgPSBfcmVmLnN0eWxlLFxuICAgICAgdG8gPSBfcmVmLnRvLFxuICAgICAgcmVzdCA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF9yZWYsIFtcImFyaWEtY3VycmVudFwiLCBcImFjdGl2ZUNsYXNzTmFtZVwiLCBcImFjdGl2ZVN0eWxlXCIsIFwiY2xhc3NOYW1lXCIsIFwiZXhhY3RcIiwgXCJpc0FjdGl2ZVwiLCBcImxvY2F0aW9uXCIsIFwic3RyaWN0XCIsIFwic3R5bGVcIiwgXCJ0b1wiXSk7XG5cbiAgdmFyIHBhdGggPSB0eXBlb2YgdG8gPT09IFwib2JqZWN0XCIgPyB0by5wYXRobmFtZSA6IHRvOyAvLyBSZWdleCB0YWtlbiBmcm9tOiBodHRwczovL2dpdGh1Yi5jb20vcGlsbGFyanMvcGF0aC10by1yZWdleHAvYmxvYi9tYXN0ZXIvaW5kZXguanMjTDIwMlxuXG4gIHZhciBlc2NhcGVkUGF0aCA9IHBhdGggJiYgcGF0aC5yZXBsYWNlKC8oWy4rKj89XiE6JHt9KClbXFxdfC9cXFxcXSkvZywgXCJcXFxcJDFcIik7XG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KF9fUm91dGVyQ29udGV4dC5Db25zdW1lciwgbnVsbCwgZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICAhY29udGV4dCA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPE5hdkxpbms+IG91dHNpZGUgYSA8Um91dGVyPlwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgdmFyIHBhdGhUb01hdGNoID0gbG9jYXRpb25Qcm9wID8gbG9jYXRpb25Qcm9wLnBhdGhuYW1lIDogY29udGV4dC5sb2NhdGlvbi5wYXRobmFtZTtcbiAgICB2YXIgbWF0Y2ggPSBlc2NhcGVkUGF0aCA/IG1hdGNoUGF0aChwYXRoVG9NYXRjaCwge1xuICAgICAgcGF0aDogZXNjYXBlZFBhdGgsXG4gICAgICBleGFjdDogZXhhY3QsXG4gICAgICBzdHJpY3Q6IHN0cmljdFxuICAgIH0pIDogbnVsbDtcbiAgICB2YXIgaXNBY3RpdmUgPSAhIShpc0FjdGl2ZVByb3AgPyBpc0FjdGl2ZVByb3AobWF0Y2gsIGNvbnRleHQubG9jYXRpb24pIDogbWF0Y2gpO1xuICAgIHZhciBjbGFzc05hbWUgPSBpc0FjdGl2ZSA/IGpvaW5DbGFzc25hbWVzKGNsYXNzTmFtZVByb3AsIGFjdGl2ZUNsYXNzTmFtZSkgOiBjbGFzc05hbWVQcm9wO1xuICAgIHZhciBzdHlsZSA9IGlzQWN0aXZlID8gX2V4dGVuZHMoe30sIHN0eWxlUHJvcCwgYWN0aXZlU3R5bGUpIDogc3R5bGVQcm9wO1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KExpbmssIF9leHRlbmRzKHtcbiAgICAgIFwiYXJpYS1jdXJyZW50XCI6IGlzQWN0aXZlICYmIGFyaWFDdXJyZW50IHx8IG51bGwsXG4gICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZSxcbiAgICAgIHN0eWxlOiBzdHlsZSxcbiAgICAgIHRvOiB0b1xuICAgIH0sIHJlc3QpKTtcbiAgfSk7XG59XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgdmFyIGFyaWFDdXJyZW50VHlwZSA9IFByb3BUeXBlcy5vbmVPZihbXCJwYWdlXCIsIFwic3RlcFwiLCBcImxvY2F0aW9uXCIsIFwiZGF0ZVwiLCBcInRpbWVcIiwgXCJ0cnVlXCJdKTtcbiAgTmF2TGluay5wcm9wVHlwZXMgPSBfZXh0ZW5kcyh7fSwgTGluay5wcm9wVHlwZXMsIHtcbiAgICBcImFyaWEtY3VycmVudFwiOiBhcmlhQ3VycmVudFR5cGUsXG4gICAgYWN0aXZlQ2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIGFjdGl2ZVN0eWxlOiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBleGFjdDogUHJvcFR5cGVzLmJvb2wsXG4gICAgaXNBY3RpdmU6IFByb3BUeXBlcy5mdW5jLFxuICAgIGxvY2F0aW9uOiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIHN0cmljdDogUHJvcFR5cGVzLmJvb2wsXG4gICAgc3R5bGU6IFByb3BUeXBlcy5vYmplY3RcbiAgfSk7XG59XG5cbmV4cG9ydCB7IEJyb3dzZXJSb3V0ZXIsIEhhc2hSb3V0ZXIsIExpbmssIE5hdkxpbmsgfTtcbiIsIlxuXG4vL2F1dG9tYXRlIHRoZSBwcm9jZXNzIG9mIGFsbG93aW5nIHBlb3BsZSB0byBzZWVcbi8vIGNlcnRhaW4gY29tcG9uZW50cyBiYXNlZCBvbiB0aGVpciBsb2dpblxuXG5cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG4vLyB0aGVzZSBhcmUgY29ubmVjdGVkIGNvbXBvbmVuZXRzXG5pbXBvcnQgeyBjb25uZWN0IH0gZnJvbSAncmVhY3QtcmVkdXgnO1xuLy8gcmVkaXJlY3QgdG8gZGlmIHZpZXdzLCB0aGVzZSBhcmUgcm91dGUgc3BlY2lmaWMsIGdpdmUgXG4vLyBkaWZmIGNvbXBvbmVudHMgaGlzdG9yeSwgbWF0Y2gsIGxvY2F0aW9uLCBwcm9wc1xuaW1wb3J0IHsgUmVkaXJlY3QsIFJvdXRlLCB3aXRoUm91dGVyIH0gZnJvbSAncmVhY3Qtcm91dGVyLWRvbSc7XG5cbi8vIGlzIGEgdXNlciBsb2dnZWQgaW4/XG5cbmNvbnN0IG1hcFN0YXRlVG9Qcm9wcyA9IHN0YXRlID0+ICh7XG4gIGxvZ2dlZEluOiBCb29sZWFuKHN0YXRlLnNlc3Npb24uY3VycmVudFVzZXIpXG59KTtcblxuLy8gcGFzcyBzb21lIGFyZ3MgZGlyZWN0bHlcbi8vIDxBdXRoUm91dGUgcGF0aD1cIlwiIGNvbXBvbmVudD17fSBcbi8vIG5lZWQgdG8gbWFrZSBjb21wb25lbnQgY2FwaXRhbGl6ZWRcbi8vIGF1dGggcm91dGVzLCByZWRpcmVjdCB0aGVtIGNvbmRpdGlvbnNcbmNvbnN0IEF1dGggPSAoeyBsb2dnZWRJbiwgcGF0aCwgY29tcG9uZW50OiBDb21wb25lbnQgfSkgPT4gKFxuICA8Um91dGVcbiAgICBwYXRoPXtwYXRofVxuICAgIHJlbmRlcj17KHByb3BzKSA9PiAoXG4gICAgICBsb2dnZWRJbiA/IDxSZWRpcmVjdCB0bz1cIi9cIiAvPiA6IDxDb21wb25lbnQgey4uLnByb3BzfSAvPlxuICAgICl9XG4gIC8+XG4pO1xuLy8gbG9naWMgd2l0aCB0ZXJuYXJ5IGlmIHBhdGggbWF0Y2hlcyAvY2hpcnBzIGtpY2sgb3V0IHRvIGxvZ2luIFxuXG5jb25zdCBQcm90ZWN0ZWQgPSAoeyBsb2dnZWRJbiwgcGF0aCwgY29tcG9uZW50OiBDb21wb25lbnQgfSkgPT4gKFxuICA8Um91dGVcbiAgICBwYXRoPXtwYXRofVxuICAgIHJlbmRlcj17KHByb3BzKSA9PiAoXG4gICAgICBsb2dnZWRJbiA/IDxDb21wb25lbnQgey4uLnByb3BzfSAvPiA6IDxSZWRpcmVjdCB0bz1cIi9sb2dpblwiIC8+XG4gICAgKX1cbiAgLz5cbik7XG5cbi8vc3RpbGwgbmVlZCB0byBjb25uZWN0IGl0XG5leHBvcnQgY29uc3QgQXV0aFJvdXRlID0gd2l0aFJvdXRlcihjb25uZWN0KG1hcFN0YXRlVG9Qcm9wcykoQXV0aCkpO1xuZXhwb3J0IGNvbnN0IFByb3RlY3RlZFJvdXRlID0gd2l0aFJvdXRlcihjb25uZWN0KG1hcFN0YXRlVG9Qcm9wcykoUHJvdGVjdGVkKSk7IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHdpdGhSb3V0ZXIgfSBmcm9tICdyZWFjdC1yb3V0ZXItZG9tJztcblxuY2xhc3MgTG9naW4gZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgZW1haWw6ICcnLFxuICAgICAgcGFzc3dvcmQ6ICcnXG4gICAgfTtcbiAgICBcbiAgICB0aGlzLmhhbmRsZVN1Ym1pdCA9IHRoaXMuaGFuZGxlU3VibWl0LmJpbmQodGhpcyk7XG4gIH1cblxuICBoYW5kbGVJbnB1dCh0eXBlKSB7XG4gICAgcmV0dXJuIChlKSA9PiB7XG4gICAgICB0aGlzLnNldFN0YXRlKHsgW3R5cGVdOiBlLnRhcmdldC52YWx1ZSB9KTtcbiAgICB9O1xuICB9XG5cbiAgaGFuZGxlU3VibWl0KGUpIHtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgdGhpcy5wcm9wcy5sb2dpbih7ZW1haWw6ICdkZW1vQGdtYWlsLmNvbScsIHBhc3N3b3JkOiAncGFzc3dvcmQnfSlcbiAgICAgIC50aGVuKCgpID0+IHRoaXMucHJvcHMuaGlzdG9yeS5wdXNoKCcvJykpO1xuICB9XG5cbiAgcmVuZGVyRXJyb3JzKCkge1xuXG4gICAgbGV0IGVycnMgPSB0aGlzLnByb3BzLmVycm9ycy5tYXAoKGVycm9yLCBpKSA9PiAoXG4gICAgICA8bGkgY2xhc3NOYW1lPVwiYXV0aC0tZm9ybS1lcnJvclwiIGtleT17aX0+e2Vycm9yfTwvbGk+XG4gICAgKSk7XG5cbiAgICBpZiAoZXJycy5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiAoXG4gICAgICAgIDxkaXY+PC9kaXY+XG4gICAgICApXG4gICAgfSBcblxuICAgIHJldHVybiAoXG4gICAgICA8dWwgY2xhc3NOYW1lPVwiYXV0aC0tbG9naW4tLWZvcm0tZXJyb3JzXCI+XG4gICAgICAgIHtlcnJzfVxuICAgICAgPC91bD5cbiAgICApO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIHJldHVybiAoXG4gICAgICA8c2VjdGlvbiBjbGFzc05hbWU9XCJhdXRoXCI+XG4gICAgICAgIDx1bCBjbGFzc05hbWU9XCJhdXRoLS1jb250YWluZXJcIj5cbiAgICAgICAgICA8c2VjdGlvbiBjbGFzc05hbWU9XCJhdXRoLS1oZWFkZXJcIj5cbiAgICAgICAgICAgIDxhIGNsYXNzLW5hbWU9XCJhdXRoLS1sb2dvXCIgaHJlZj1cIiMvXCI+PGltZyBzcmM9XCJodHRwczovLzY2Lm1lZGlhLnR1bWJsci5jb20vYTFmNGUzODVkOTA3Y2Y1YmRjNzBiZjkxOTE0M2NhMmQvdHVtYmxyX3BxdDltOU8zdUsxd3liMmw4bzFfMTAwLnBuZ1wiIGhlaWdodD1cIjI4XCIgd2lkdGg9XCI5NVwiIGFsdD1cIkFTT1MgbG9nb1wiPjwvaW1nPjwvYT5cbiAgICAgICAgICA8L3NlY3Rpb24+XG5cbiAgICAgICAgICA8c2VjdGlvbiBjbGFzc05hbWU9XCJhdXRoLS1mb3JtLWNvbnRhaW5lclwiPlxuICAgICAgICAgICAgPHNlY3Rpb24gY2xhc3NOYW1lPVwiYXV0aC0tcmVnaXN0ZXJcIj5cbiAgICAgICAgICAgICAgPHVsIGNsYXNzTmFtZT1cImF1dGgtLXJlZ2lzdGVyLS1vcHRpb25zXCI+XG4gICAgICAgICAgICAgICAgPGEgaHJlZj1cIiMvc2lnbnVwXCIgY2xhc3NOYW1lPVwiYXV0aC0tcmVnaXN0ZXItLW5vdC1zZWxlY3RlZC1sZWZ0XCI+TkVXIFRPIEFTT1M/PC9hPlxuICAgICAgICAgICAgICAgIDxwIGNsYXNzTmFtZT1cImF1dGgtLXJlZ2lzdGVyLS1zZWxlY3RlZC1yaWdodFwiPkFMUkVBRFkgUkVHSVNURVJFRD88L3A+XG4gICAgICAgICAgICAgIDwvdWw+XG4gICAgICAgICAgICA8L3NlY3Rpb24+XG5cbiAgICAgICAgICAgIDxtYWluIGNsYXNzTmFtZT1cImF1dGgtLWZvcm0tLW1haW5cIj5cbiAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgIDxoMiBjbGFzc05hbWU9XCJhdXRoLS10aXRsZVwiPlNJR04gSU4gV0lUSCBFTUFJTDwvaDI+XG4gICAgICAgICAgICAgIFxuICAgICAgICAgICAgICA8Zm9ybSBjbGFzc05hbWU9XCJhdXRoLS1sb2dpbi1mb3JtXCI+XG4gICAgICAgICAgICAgICAge3RoaXMucmVuZGVyRXJyb3JzKCl9XG4gICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzTmFtZT1cImF1dGgtLWZvcm0tbGFiZWxcIj5FTUFJTCBBRERSRVNTOlxuICAgICAgICAgICAgICAgICAgPGlucHV0IGNsYXNzTmFtZT1cImF1dGgtLWZvcm0taW5wdXRcIlxuICAgICAgICAgICAgICAgICAgICB0eXBlPVwidGV4dFwiXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlPXt0aGlzLnN0YXRlLmVtYWlsfVxuICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17dGhpcy5oYW5kbGVJbnB1dCgnZW1haWwnKX1cbiAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgPC9sYWJlbD5cbiAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3NOYW1lPVwiYXV0aC0tZm9ybS1sYWJlbFwiPlBBU1NXT1JEXG4gICAgICAgICAgICAgICAgICA8aW5wdXQgY2xhc3NOYW1lPVwiYXV0aC0tZm9ybS1pbnB1dC1wYXNzd29yZFwiXG4gICAgICAgICAgICAgICAgICAgIHR5cGU9XCJwYXNzd29yZDpcIlxuICAgICAgICAgICAgICAgICAgICB2YWx1ZT17dGhpcy5zdGF0ZS5wYXNzd29yZH1cbiAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e3RoaXMuaGFuZGxlSW5wdXQoJ3Bhc3N3b3JkJyl9XG4gICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgIDwvbGFiZWw+XG4gICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzc05hbWU9XCJhdXRoLS1idXR0b25cIiBvbkNsaWNrPXt0aGlzLmhhbmRsZVN1Ym1pdH0+RGVtbzwvYnV0dG9uPlxuICAgICAgICAgICAgICA8L2Zvcm0+XG4gICAgICAgICAgICAgIFxuICAgICAgICAgICAgICB7LyogPHAgY2xhc3NOYW1lPVwiYXV0aC0tZm9ybS1wYXNzd29yZC1oZWxwZXJcIj5Gb3Jnb3QgcGFzc3dvcmQ/PC9wPiAqL31cbiAgICAgICAgICAgIDwvbWFpbj5cbiAgICAgICAgICA8L3NlY3Rpb24+XG4gICAgICAgIDwvdWw+ICBcbiAgICAgIDwvc2VjdGlvbj5cbiAgICApO1xuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCB3aXRoUm91dGVyKExvZ2luKTsiLCJpbXBvcnQgeyBjb25uZWN0IH0gZnJvbSAncmVhY3QtcmVkdXgnO1xuaW1wb3J0IExvZ2luIGZyb20gJy4vbG9naW4nO1xuaW1wb3J0IHsgbG9naW4sIGNsZWFyRXJyb3JzIH0gZnJvbSAnLi4vLi4vYWN0aW9ucy9zZXNzaW9uJztcblxuY29uc3QgbWFwU3RhdGVUb1Byb3BzID0gc3RhdGUgPT4ge1xuICByZXR1cm4ge1xuICAgIGVycm9yczogc3RhdGUuZXJyb3JzLnNlc3Npb24sXG4gICAgZm9ybVR5cGU6ICdsb2dpbicsXG4gIH07XG59O1xuXG5jb25zdCBtYXBEaXNwYXRjaFRvUHJvcHMgPSBkaXNwYXRjaCA9PiAoe1xuICBsb2dpbjogZm9ybVVzZXIgPT4gZGlzcGF0Y2gobG9naW4oZm9ybVVzZXIpKSxcbiAgY2xlYXJFcnJvcnM6ICgpID0+IGRpc3BhdGNoKGNsZWFyRXJyb3JzKVxufSk7XG5cbmV4cG9ydCBkZWZhdWx0IGNvbm5lY3QobWFwU3RhdGVUb1Byb3BzLCBtYXBEaXNwYXRjaFRvUHJvcHMpKExvZ2luKTtcblxuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHdpdGhSb3V0ZXIgfSBmcm9tICdyZWFjdC1yb3V0ZXItZG9tJztcblxuY2xhc3MgU2lnbnVwIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG5cbiAgICBsZXQgZGF0ZSA9IG5ldyBEYXRlKCk7XG4gICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgIGVtYWlsOiAnJyxcbiAgICAgIHBhc3N3b3JkOiAnJyxcbiAgICAgIGZpcnN0X25hbWU6ICcnLFxuICAgICAgbGFzdF9uYW1lOiAnJyxcbiAgICAgIGRhdGVfb2ZfYmlydGg6IGRhdGUsXG4gICAgICBnZW5kZXI6ICdGZW1hbGUnLFxuICAgICAgY291bnRyeTogJ1VuaXRlZCBTdGF0ZXMnLFxuICAgICAgZW1haWxfbGlzdHM6IFtdXG4gICAgfTtcbiAgICB0aGlzLmhhbmRsZVN1Ym1pdCA9IHRoaXMuaGFuZGxlU3VibWl0LmJpbmQodGhpcyk7XG4gIH1cblxuICBoYW5kbGVJbnB1dCh0eXBlKSB7XG4gICAgcmV0dXJuIChlKSA9PiB7XG4gICAgICB0aGlzLnNldFN0YXRlKHsgW3R5cGVdOiBlLnRhcmdldC52YWx1ZSB9KVxuICAgIH07XG4gIH1cblxuICBoYW5kbGVTdWJtaXQoZSkge1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICB0aGlzLnByb3BzLmNyZWF0ZU5ld1VzZXIodGhpcy5zdGF0ZSlcbiAgICAgIC50aGVuKCgpID0+IHRoaXMucHJvcHMuaGlzdG9yeS5wdXNoKCcvJykpO1xuICB9XG5cbiAgLy8gcmVuZGVyRXJyb3JzKCkge1xuICAvLyAgIGxldCBlcnJzID0gdGhpcy5wcm9wcy5lcnJvcnMubWFwKChlcnJvciwgaSkgPT4gKFxuICAvLyAgICAgPGxpIGNsYXNzTmFtZT1cImF1dGgtLWZvcm0tZXJyb3JcIiBrZXk9e2l9PntlcnJvcn08L2xpPlxuICAvLyAgICkpO1xuXG4gIC8vICAgcmV0dXJuIChcbiAgLy8gICAgIDx1bCBjbGFzc05hbWU9XCJhdXRoLS1mb3JtLWVycm9yc1wiPlxuICAvLyAgICAgICB7ZXJyc31cbiAgLy8gICAgIDwvdWw+XG4gIC8vICAgKTtcbiAgLy8gfVxuXG4gIHJlbmRlckVycm9ycyhhdHRyaWJ1dGUpIHtcbiAgICBsZXQgZmllbGRFcnJvcnMgPSB0aGlzLnByb3BzLmVycm9yc1thdHRyaWJ1dGVdO1xuXG4gICAgaWYgKGZpZWxkRXJyb3JzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGZpZWxkRXJyb3JzID0gZmllbGRFcnJvcnMubWFwKChlcnJvciwgaSkgPT4gKFxuICAgICAgICA8bGkgY2xhc3NOYW1lPVwiYXV0aC0tZm9ybS1lcnJvclwiIGtleT17aX0+e2Vycm9yfTwvbGk+XG4gICAgICApKTtcblxuICAgICAgcmV0dXJuIChcbiAgICAgICAgPHVsIGNsYXNzTmFtZT1cImF1dGgtLWZvcm0tZXJyb3JzXCI+XG4gICAgICAgICAge2ZpZWxkRXJyb3JzfVxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYXJyb3ctZG93blwiPjwvZGl2PlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYXJyb3ctZG93bi0yXCI+PC9kaXY+XG4gICAgICAgIDwvdWw+XG4gICAgICApXG4gICAgfVxuICB9XG5cblxuICByZW5kZXIoKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxzZWN0aW9uIGNsYXNzTmFtZT1cImF1dGhcIj5cbiAgICAgICAgPHVsIGNsYXNzTmFtZT1cImF1dGgtLWNvbnRhaW5lclwiPlxuICAgICAgICAgIDxzZWN0aW9uIGNsYXNzTmFtZT1cImF1dGgtLWhlYWRlclwiPlxuICAgICAgICAgICAgPGEgY2xhc3MtbmFtZT1cImF1dGgtLWxvZ29cIiBocmVmPVwiIy9cIj48aW1nIHNyYz1cImh0dHBzOi8vNjYubWVkaWEudHVtYmxyLmNvbS9hMWY0ZTM4NWQ5MDdjZjViZGM3MGJmOTE5MTQzY2EyZC90dW1ibHJfcHF0OW05TzN1SzF3eWIybDhvMV8xMDAucG5nXCIgaGVpZ2h0PVwiMjhcIiB3aWR0aD1cIjk1XCIgYWx0PVwiQVNPUyBsb2dvXCI+PC9pbWc+PC9hPlxuICAgICAgICAgIDwvc2VjdGlvbj5cbiAgICAgICAgICBcbiAgICAgICAgICA8c2VjdGlvbiBjbGFzc05hbWU9XCJhdXRoLS1mb3JtLWNvbnRhaW5lclwiPlxuICAgICAgICAgICAgPHNlY3Rpb24gY2xhc3NOYW1lPVwiYXV0aC0tcmVnaXN0ZXJcIj5cbiAgICAgICAgICAgICAgPHVsIGNsYXNzTmFtZT1cImF1dGgtLXJlZ2lzdGVyLS1vcHRpb25zXCI+XG4gICAgICAgICAgICAgICAgPHAgY2xhc3NOYW1lPVwiYXV0aC0tcmVnaXN0ZXItLXNlbGVjdGVkLWxlZnRcIj5ORVcgVE8gQVNPUz88L3A+XG4gICAgICAgICAgICAgICAgPGEgaHJlZj1cIiMvbG9naW5cIiBjbGFzc05hbWU9XCJhdXRoLS1yZWdpc3Rlci0tbm90LXNlbGVjdGVkLXJpZ2h0XCI+QUxSRUFEWSBSRUdJU1RFUkVEPzwvYT5cbiAgICAgICAgICAgICAgPC91bD5cbiAgICAgICAgICAgIDwvc2VjdGlvbj5cblxuICAgICAgICAgICAgPGgyIGNsYXNzTmFtZT1cImF1dGgtLXRpdGxlXCI+U0lHTiBVUCBVU0lORyBZT1VSIEVNQUlMIEFERFJFU1M8L2gyPlxuICAgICAgICAgICAgPG1haW4gY2xhc3NOYW1lPVwiYXV0aC0tZm9ybS0tbWFpbi0tc2lnbi11cFwiPlxuICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgPGZvcm0gY2xhc3M9XCJhdXRoLS1zaWdudXAtZm9ybVwiPlxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzc05hbWU9XCJhdXRoLS1mb3JtLWxhYmVsXCI+RU1BSUwgQUREUkVTUzpcbiAgICAgICAgICAgICAgICB7dGhpcy5yZW5kZXJFcnJvcnMoJ2VtYWlsJyl9XG4gICAgICAgICAgICAgICAgICA8aW5wdXQgY2xhc3NOYW1lPVwiYXV0aC0tZm9ybS1pbnB1dFwiXG4gICAgICAgICAgICAgICAgICAgIHR5cGU9XCJ0ZXh0XCJcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU9e3RoaXMuc3RhdGUuZW1haWx9XG4gICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXt0aGlzLmhhbmRsZUlucHV0KCdlbWFpbCcpfVxuICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICA8L2xhYmVsPlxuICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzc05hbWU9XCJhdXRoLS1mb3JtLWxhYmVsXCI+RklSU1QgTkFNRTpcbiAgICAgICAgICAgICAgICAgIHt0aGlzLnJlbmRlckVycm9ycygnZmlyc3RfbmFtZScpfVxuICAgICAgICAgICAgICAgICAgPGlucHV0IGNsYXNzTmFtZT1cImF1dGgtLWZvcm0taW5wdXRcIlxuICAgICAgICAgICAgICAgICAgICB0eXBlPVwidGV4dFwiXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlPXt0aGlzLnN0YXRlLmZpcnN0X25hbWV9XG4gICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXt0aGlzLmhhbmRsZUlucHV0KCdmaXJzdF9uYW1lJyl9XG4gICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgIDwvbGFiZWw+XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzTmFtZT1cImF1dGgtLWZvcm0tbGFiZWxcIj5MQVNUIE5BTUU6XG4gICAgICAgICAgICAgICAgICB7dGhpcy5yZW5kZXJFcnJvcnMoJ2xhc3RfbmFtZScpfVxuICAgICAgICAgICAgICAgICAgPGlucHV0IGNsYXNzTmFtZT1cImF1dGgtLWZvcm0taW5wdXRcIlxuICAgICAgICAgICAgICAgICAgICB0eXBlPVwidGV4dFwiXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlPXt0aGlzLnN0YXRlLmxhc3RfbmFtZX1cbiAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e3RoaXMuaGFuZGxlSW5wdXQoJ2xhc3RfbmFtZScpfVxuICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICA8L2xhYmVsPlxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzc05hbWU9XCJhdXRoLS1mb3JtLWxhYmVsXCI+UEFTU1dPUkQ6XG4gICAgICAgICAgICAgICAgICB7dGhpcy5yZW5kZXJFcnJvcnMoJ3Bhc3N3b3JkJyl9ICAgXG4gICAgICAgICAgICAgICAgICA8aW5wdXQgY2xhc3NOYW1lPVwiYXV0aC0tZm9ybS1pbnB1dC1wYXNzd29yZFwiXG4gICAgICAgICAgICAgICAgICAgIHR5cGU9XCJwYXNzd29yZFwiXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlPXt0aGlzLnN0YXRlLnBhc3N3b3JkfVxuICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17dGhpcy5oYW5kbGVJbnB1dCgncGFzc3dvcmQnKX1cbiAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgPC9sYWJlbD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHsvKiBmaWVsZHNldCBhZGFwdGVkIGZyb20gaHR0cDovL2h0bWwuY2l0YS5pbGxpbm9pcy5lZHUvbmF2L2Zvcm0vZGF0ZS9pbmRleC5waHA/ZXhhbXBsZT02ICovfVxuICAgICAgICAgICAgICAgIHsvKiA8ZmllbGRzZXQgY2xhc3NOYW1lPVwiYXV0aC0tZmllbGRzZXRcIj4gXG4gICAgICAgICAgICAgICAgICA8bGVnZW5kIGNsYXNzTmFtZT1cImF1dGgtLWZvcm0tbGFiZWxcIj5EQVRFIE9GIEJJUlRIIDwvbGVnZW5kPiBcbiAgICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzc05hbWU9XCJhdXRoLS1maWVsZHNldC1sYWJlbFwiPkREXG4gICAgICAgICAgICAgICAgICAgIDxzZWxlY3QgY2xhc3NOYW1lPVwiYXV0aC0tZmllbGRzZXQtaGVscGVyXCIgbmFtZT1cImRheVwiID4gXG4gICAgICAgICAgICAgICAgICAgICAgPG9wdGlvbj4xPC9vcHRpb24+ICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24+Mjwvb3B0aW9uPiAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uPjM8L29wdGlvbj4gICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgPG9wdGlvbj40PC9vcHRpb24+ICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24+NTwvb3B0aW9uPiAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uPjY8L29wdGlvbj4gICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgPG9wdGlvbj43PC9vcHRpb24+ICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24+ODwvb3B0aW9uPiAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uPjk8L29wdGlvbj4gICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgPG9wdGlvbj4xMDwvb3B0aW9uPiAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uPjExPC9vcHRpb24+ICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24+MTI8L29wdGlvbj4gICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgPG9wdGlvbj4xMzwvb3B0aW9uPiAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uPjE0PC9vcHRpb24+ICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24+MTU8L29wdGlvbj4gICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgPG9wdGlvbj4xNjwvb3B0aW9uPiAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uPjE3PC9vcHRpb24+ICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24+MTg8L29wdGlvbj4gICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgPG9wdGlvbj4xOTwvb3B0aW9uPiAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uPjIwPC9vcHRpb24+ICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24+MjE8L29wdGlvbj4gICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgPG9wdGlvbj4yMjwvb3B0aW9uPiAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uPjIzPC9vcHRpb24+ICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24+MjQ8L29wdGlvbj4gICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgPG9wdGlvbj4yNTwvb3B0aW9uPiAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uPjI2PC9vcHRpb24+ICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24+Mjc8L29wdGlvbj4gICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgPG9wdGlvbj4yODwvb3B0aW9uPiAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uPjI5PC9vcHRpb24+ICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24+MzA8L29wdGlvbj4gICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgPG9wdGlvbj4zMTwvb3B0aW9uPlxuICAgICAgICAgICAgICAgICAgICA8L3NlbGVjdD5cbiAgICAgICAgICAgICAgICAgIDwvbGFiZWw+XG5cbiAgICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzc05hbWU9XCJhdXRoLS1maWVsZHNldC1sYWJlbFwiPk1vbnRoXG4gICAgICAgICAgICAgICAgICAgIDxzZWxlY3QgY2xhc3NOYW1lPVwiYXV0aC0tZmllbGRzZXQtaGVscGVyXCIgbmFtZT1cIm1vbnRoXCIgPiBcbiAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uPkphbnVhcnk8L29wdGlvbj4gICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgPG9wdGlvbj5GZWJydWFyeTwvb3B0aW9uPiAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uPk1hcmNoPC9vcHRpb24+ICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24+QXByaWw8L29wdGlvbj4gICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgPG9wdGlvbj5NYXk8L29wdGlvbj4gICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgPG9wdGlvbj5KdW5lPC9vcHRpb24+ICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24+SnVseTwvb3B0aW9uPiAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uPkF1Z3VzdDwvb3B0aW9uPiAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uPlNlcHRlbWJlcjwvb3B0aW9uPiAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uPk9jdG9iZXI8L29wdGlvbj4gICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgPG9wdGlvbj5Ob3ZlbWJlcjwvb3B0aW9uPiAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uPkRlY2VtYmVyPC9vcHRpb24+IFxuICAgICAgICAgICAgICAgICAgICA8L3NlbGVjdD4gIFxuICAgICAgICAgICAgICAgICAgPC9sYWJlbD4gICAgICAgICAgXG4gICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzc05hbWU9XCJhdXRoLS1maWVsZHNldC1sYWJlbFwiPllZWVlcbiAgICAgICAgICAgICAgICAgICAgPHNlbGVjdCBjbGFzc05hbWU9XCJhdXRoLS1maWVsZHNldC1oZWxwZXJcIiBuYW1lPVwieWVhclwiID4gXG4gICAgICAgICAgICAgICAgICAgICAgPG9wdGlvbj4yMDE5PC9vcHRpb24+ICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24+MjAxODwvb3B0aW9uPiAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uPjIwMTc8L29wdGlvbj4gICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgPG9wdGlvbj4yMDE2PC9vcHRpb24+ICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24+MjAxNTwvb3B0aW9uPiAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uPjIwMTQ8L29wdGlvbj4gICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgPG9wdGlvbj4yMDEzPC9vcHRpb24+ICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24+MjAxMjwvb3B0aW9uPiAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uPjIwMTE8L29wdGlvbj4gICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgPG9wdGlvbj4yMDEwPC9vcHRpb24+IFxuICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24+MjAwOTwvb3B0aW9uPlxuICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24+MjAwODwvb3B0aW9uPlxuICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24+MjAwNzwvb3B0aW9uPlxuICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24+MjAwNjwvb3B0aW9uPlxuICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24+MjAwNTwvb3B0aW9uPlxuICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24+MjAwNDwvb3B0aW9uPlxuICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24+MjAwMzwvb3B0aW9uPlxuICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24+MjAwMjwvb3B0aW9uPlxuICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24+MjAwMTwvb3B0aW9uPlxuICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24+MjAwMDwvb3B0aW9uPlxuICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24+MTk5OTwvb3B0aW9uPlxuICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24+MTk5ODwvb3B0aW9uPlxuICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24+MTk5Nzwvb3B0aW9uPlxuICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24+MTk5Njwvb3B0aW9uPlxuICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24+MTk5NTwvb3B0aW9uPlxuICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24+MTk5NDwvb3B0aW9uPlxuICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24+MTk5Mzwvb3B0aW9uPlxuICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24+MTk5Mjwvb3B0aW9uPlxuICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24+MTk5MTwvb3B0aW9uPlxuICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24+MTk5MDwvb3B0aW9uPlxuICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24+MTk4OTwvb3B0aW9uPlxuICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24+MTk4ODwvb3B0aW9uPlxuICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24+MTk4Nzwvb3B0aW9uPlxuICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24+MTk4Njwvb3B0aW9uPlxuICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24+MTk4NTwvb3B0aW9uPlxuICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24+MTk4NDwvb3B0aW9uPlxuICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24+MTk4Mzwvb3B0aW9uPlxuICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24+MTk4Mjwvb3B0aW9uPlxuICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24+MTk4MTwvb3B0aW9uPlxuICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24+MTk4MDwvb3B0aW9uPlxuICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24+MTk3OTwvb3B0aW9uPlxuICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24+MTk3ODwvb3B0aW9uPlxuICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24+MTk3Nzwvb3B0aW9uPlxuICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24+MTk3Njwvb3B0aW9uPlxuICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24+MTk3NTwvb3B0aW9uPlxuICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24+MTk3NDwvb3B0aW9uPlxuICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24+MTk3Mzwvb3B0aW9uPlxuICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24+MTk3Mjwvb3B0aW9uPlxuICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24+MTk3MTwvb3B0aW9uPlxuICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24+MTk3MDwvb3B0aW9uPlxuICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24+MTk2OTwvb3B0aW9uPlxuICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24+MTk2ODwvb3B0aW9uPlxuICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24+MTk2Nzwvb3B0aW9uPlxuICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24+MTk2Njwvb3B0aW9uPlxuICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24+MTk2NTwvb3B0aW9uPlxuICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24+MTk2NDwvb3B0aW9uPlxuICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24+MTk2Mzwvb3B0aW9uPlxuICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24+MTk2Mjwvb3B0aW9uPlxuICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24+MTk2MTwvb3B0aW9uPlxuICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24+MTk2MDwvb3B0aW9uPlxuICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24+MTk1OTwvb3B0aW9uPlxuICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24+MTk1ODwvb3B0aW9uPlxuICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24+MTk1Nzwvb3B0aW9uPlxuICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24+MTk1Njwvb3B0aW9uPlxuICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24+MTk1NTwvb3B0aW9uPlxuICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24+MTk1NDwvb3B0aW9uPlxuICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24+MTk1Mzwvb3B0aW9uPlxuICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24+MTk1Mjwvb3B0aW9uPlxuICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24+MTk1MTwvb3B0aW9uPlxuICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24+MTk1MDwvb3B0aW9uPlxuICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24+MTk0OTwvb3B0aW9uPlxuICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24+MTk0ODwvb3B0aW9uPlxuICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24+MTk0Nzwvb3B0aW9uPlxuICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24+MTk0Njwvb3B0aW9uPlxuICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24+MTk0NTwvb3B0aW9uPlxuICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24+MTk0NDwvb3B0aW9uPlxuICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24+MTk0Mzwvb3B0aW9uPlxuICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24+MTk0Mjwvb3B0aW9uPlxuICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24+MTk0MTwvb3B0aW9uPlxuICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24+MTk0MDwvb3B0aW9uPlxuICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24+MTkzOTwvb3B0aW9uPlxuICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24+MTkzODwvb3B0aW9uPlxuICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24+MTkzNzwvb3B0aW9uPlxuICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24+MTkzNjwvb3B0aW9uPlxuICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24+MTkzNTwvb3B0aW9uPlxuICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24+MTkzNDwvb3B0aW9uPlxuICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24+MTkzMzwvb3B0aW9uPlxuICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24+MTkzMjwvb3B0aW9uPlxuICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24+MTkzMTwvb3B0aW9uPlxuICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24+MTkzMDwvb3B0aW9uPiAgIFxuICAgICAgICAgICAgICAgICAgICA8L3NlbGVjdD4gXG4gICAgICAgICAgICAgICAgICA8L2xhYmVsPlxuICAgICAgICAgICAgICAgICAgPHAgY2xhc3NOYW1lPVwiYXV0aC0tZm9ybS1zdWJ0aXRsZVwiPllvdSBuZWVkIHRvIGJlIDE2IG9yIG92ZXIgdG8gdXNlIEFTT1M8L3A+IFxuICAgICAgICAgICAgICAgIDwvZmllbGRzZXQ+ICovfVxuXG4gICAgICAgICAgICAgICAgey8qIDxmaWVsZHNldCBjbGFzc05hbWU9XCJnZW5kZXJcIj5cbiAgICAgICAgICAgICAgICAgIDxsZWdlbmQ+R0VOREVSOiA8L2xlZ2VuZD4gXG4gICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cInJhZGlvXCIgbmFtZT1cImdlbmRlclwiIHZhbHVlPVwiZmVtYWxlXCIgY2hlY2tlZCAvPiBHaXJsXG4gICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cInJhZGlvXCIgbmFtZT1cImdlbmRlclwiIHZhbHVlPVwibWFsZVwiIC8+IEd1eVxuICAgICAgICAgICAgICAgIDwvZmllbGRzZXQ+ICovfVxuXG4gICAgICAgICAgICAgICAgey8qIDxmaWVsZHNldCBjbGFzc05hbWU9XCJnZW5kZXJcIj5cbiAgICAgICAgICAgICAgICAgIDxsZWdlbmQ+Q09OVEFDVCBQUkVGRVJFTkNFUzwvbGVnZW5kPiBcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb250YWN0LXByZWYtaGVhZGVyXCI+XG4gICAgICAgICAgICAgICAgICAgICAgPHA+VGVsbCB1cyB3aGljaCBlbWFpbHMgeW914oCZZCBsaWtlOjwvcD4gKi99XG4gICAgICAgICAgICAgICAgICAgICAgey8qICMgYnV0dG9uIGNoZWNrIHNvdXJjZSBodHRwczovL3d3dy5pbmNsdWRlaGVscC5jb20vY29kZS1zbmlwcGV0cy9qYXZhc2NyaXB0LXNlbGVjdC11bnNlbGVjdC1jaGVjay11bmNrZWNjay1hbGwtY2hlY2tib3hlcy5hc3B4ICovfVxuICAgICAgICAgICAgICAgICAgICAgIHsvKiA8YnV0dG9uIGNsYXNzTmFtZT1cImNoZWNrYm94LWFsbFwiPlxuICAgICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBuYW1lPVwiZGlzY291bnRzXCIgY2hlY2tlZCAvPiBEaXNjb3VudHMgYW5kIHNhbGVzXG4gICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgbmFtZT1cIm5ld1wiIGNoZWNrZWQgLz4gTmV3IHN0dWZmXG4gICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgbmFtZT1cImV4Y2x1c2l2ZXNcIiBjaGVja2VkIC8+IFlvdXIgZXhjbHVzaXZlc1xuICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJjaGVja2JveFwiIG5hbWU9XCJwYXJ0bmVyc1wiIGNoZWNrZWQgLz4gQVNPUyBwYXJ0bmVyc1xuICAgICAgICAgICAgICAgIDwvZmllbGRzZXQ+ICovfVxuICAgICAgICAgICAgICAgIHsvKiA8dWw+XG4gICAgICAgICAgICAgICAgICA8bGk+VGVsbCBtZSBtb3JlIGFib3V0IHRoZXNlLi4uPC9saT5cbiAgICAgICAgICAgICAgICAgIDxsaT5CeSBjcmVhdGluZyB5b3VyIGFjY291bnQsIHlvdSBhZ3JlZSB0byBvdXIgVGVybXMgYW5kIENvbmRpdGlvbnMgJiBQcml2YWN5IFBvbGljeTwvbGk+XG4gICAgICAgICAgICAgICAgPC91bD4gKi99XG4gICAgICAgICAgICAgIDwvZm9ybT5cbiAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzc05hbWU9XCJhdXRoLS1idXR0b25cIiBvbkNsaWNrPXt0aGlzLmhhbmRsZVN1Ym1pdH0+Sk9JTiBBU09TPC9idXR0b24+XG4gICAgICAgICAgICA8L21haW4+XG4gICAgICAgICAgPC9zZWN0aW9uPlxuICAgICAgICA8L3VsPlxuICAgICAgPC9zZWN0aW9uPlxuICAgICk7XG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IHdpdGhSb3V0ZXIoU2lnbnVwKTsiLCJpbXBvcnQgeyBjb25uZWN0IH0gZnJvbSAncmVhY3QtcmVkdXgnO1xuaW1wb3J0IFNpZ251cCBmcm9tICcuL3NpZ251cCc7XG5pbXBvcnQgeyBjcmVhdGVOZXdVc2VyIH0gZnJvbSAnLi4vLi4vYWN0aW9ucy9zaWdudXAnO1xuXG5cbmNvbnN0IG1hcFN0YXRlVG9Qcm9wcyA9IHN0YXRlID0+IHtcbiAgcmV0dXJuIHtcbiAgICBmb3JtVHlwZTogJ3NpZ251cCcsXG4gICAgZXJyb3JzOiBzdGF0ZS5lcnJvcnMuc2lnbnVwXG4gIH07XG59O1xuXG5jb25zdCBtYXBEaXNwYXRjaFRvUHJvcHMgPSBkaXNwYXRjaCA9PiAoe1xuICBjcmVhdGVOZXdVc2VyOiBmb3JtVXNlciA9PiBkaXNwYXRjaChjcmVhdGVOZXdVc2VyKGZvcm1Vc2VyKSlcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBjb25uZWN0KG1hcFN0YXRlVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzKShTaWdudXApO1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcblxuZXhwb3J0IGRlZmF1bHQgKCkgPT4gKFxuICA8dWwgY2xhc3NOYW1lPVwiZm9vdGVyLS1pY29uLWJhclwiID5cbiAgICA8bGkgY2xhc3NOYW1lPVwiZm9vdGVyLS1pY29uLWJhci0tc29jaWFsXCI+XG4gICAgICA8aW1nIGNsYXNzTmFtZT1cInNvY2lhbC1pY29uXCIgc3JjPVwiaHR0cHM6Ly82Ni5tZWRpYS50dW1ibHIuY29tLzBiNTllMTMxMmFlNzk5YTFjNzNkZWIwNGNjMzcwOGI4L3R1bWJscl9wcXRhOWt6b05LMXd5YjJsOG8xXzI1MC5wbmdcIj48L2ltZz5cbiAgICAgIDxpbWcgY2xhc3NOYW1lPVwic29jaWFsLWljb25cIiBzcmM9XCJodHRwczovLzY2Lm1lZGlhLnR1bWJsci5jb20vOTc5NmMxYjMzZjZiZDhhOTJiNDdhNzFmNmY1YTNjY2IvdHVtYmxyX3BxdGE5a3pvTksxd3liMmw4bzJfMjUwLnBuZ1wiPjwvaW1nPlxuICAgICAgPGltZyBjbGFzc05hbWU9XCJzb2NpYWwtaWNvblwiIHNyYz1cImh0dHBzOi8vNjYubWVkaWEudHVtYmxyLmNvbS8wM2YyYmMyMzJmYzNmZmQ3ZGEyNzk1ZTA0OTY4MGFjYi90dW1ibHJfcHF0YTlrem9OSzF3eWIybDhvM18yNTAucG5nXCI+PC9pbWc+XG4gICAgPC9saT5cbiAgICA8bGkgY2xhc3NOYW1lPVwiZm9vdGVyLS1pY29uLWJhci0tcGF5bWVudFwiPlxuICAgICAgPGltZyBjbGFzc05hbWU9XCJwYXltZW50LWljb25cIiBzcmM9XCJodHRwczovL2ltYWdlcy5hc29zLW1lZGlhLmNvbS9uYXZpZ2F0aW9uL3Zpc2EtcG5nXCIgYWx0PVwidmlzYVwiPjwvaW1nPlxuICAgICAgPGltZyBjbGFzc05hbWU9XCJwYXltZW50LWljb25cIiBzcmM9XCJodHRwczovL2ltYWdlcy5hc29zLW1lZGlhLmNvbS9uYXZpZ2F0aW9uL21hc3RlcmNhcmQtcG5nXCIgYWx0PVwibWFzdGVyY2FyZFwiPjwvaW1nPlxuICAgICAgPGltZyBjbGFzc05hbWU9XCJwYXltZW50LWljb25cIiBzcmM9XCJodHRwczovL2ltYWdlcy5hc29zLW1lZGlhLmNvbS9uYXZpZ2F0aW9uL3BheS1wYWwtcG5nXCIgYWx0PVwicGF5cGFsXCI+PC9pbWc+XG4gICAgICA8aW1nIGNsYXNzTmFtZT1cInBheW1lbnQtaWNvblwiIHNyYz1cImh0dHBzOi8vaW1hZ2VzLmFzb3MtbWVkaWEuY29tL25hdmlnYXRpb24vYW1lcmljYW4tZXhwcmVzcy1wbmdcIiBhbHQ9XCJhbWVyaWNhbmV4cHJlc3NcIj48L2ltZz5cbiAgICAgIDxpbWcgY2xhc3NOYW1lPVwicGF5bWVudC1pY29uXCIgc3JjPVwiaHR0cHM6Ly9pbWFnZXMuYXNvcy1tZWRpYS5jb20vbmF2aWdhdGlvbi92aXNhLWVsZWN0cm9uLXBuZ1wiIGFsdD1cInZpc2FlbGVjdHJvblwiPjwvaW1nPlxuICAgICAgPGltZyBjbGFzc05hbWU9XCJwYXltZW50LWljb25cIiBzcmM9XCJodHRwczovL2ltYWdlcy5hc29zLW1lZGlhLmNvbS9uYXZpZ2F0aW9uL2FwcGxlLXBheS1wbmdcIiBhbHQ9XCJhcHBsZXBheVwiPjwvaW1nPlxuICAgIDwvbGk+XG4gIDwvdWw+XG4pO1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcblxuZXhwb3J0IGRlZmF1bHQgKCkgPT4gKFxuICA8c2VjdGlvbiBjbGFzc05hbWU9XCJmb290ZXItLW5hdi1saW5rc1wiID5cbiAgICA8dWwgY2xhc3NOYW1lPVwiZm9vdGVyLS1uYXYtbGlua3MtLWNvbFwiPlxuICAgICAgPGg0IGNsYXNzTmFtZT1cImZvb3Rlci0tbmF2LWxpbmtzLS10aXRsZVwiPkhFTFAgQU5EIElORk9STUFUSU9OPC9oND5cbiAgICAgIDxsaSBjbGFzc05hbWU9XCJmb290ZXItLW5hdi1saW5rcy0taXRlbVwiPkhlbHA8L2xpPlxuICAgICAgICA8bGkgY2xhc3NOYW1lPVwiZm9vdGVyLS1uYXYtbGlua3MtLWl0ZW1cIj5UcmFjayBPcmRlcjwvbGk+XG4gICAgICAgIDxsaSBjbGFzc05hbWU9XCJmb290ZXItLW5hdi1saW5rcy0taXRlbVwiPkRlbGl2ZXJ5ICYgUmV0dXJuczwvbGk+XG4gICAgICAgIDxsaSBjbGFzc05hbWU9XCJmb290ZXItLW5hdi1saW5rcy0taXRlbVwiPlByZW1pZXIgRGVsaXZlcnk8L2xpPlxuICAgICAgICA8bGkgY2xhc3NOYW1lPVwiZm9vdGVyLS1uYXYtbGlua3MtLWl0ZW1cIj4xMCUgU3R1ZGVudCBEaXNjb3VudDwvbGk+XG4gICAgICA8L3VsPlxuXG4gICAgPHVsIGNsYXNzTmFtZT1cImZvb3Rlci0tbmF2LWxpbmtzLS1jb2xcIj5cbiAgICAgIDxoNCBjbGFzc05hbWU9XCJmb290ZXItLW5hdi1saW5rcy0tdGl0bGVcIj5BQk9VVCBBU09TPC9oND5cbiAgICAgICAgPGxpIGNsYXNzTmFtZT1cImZvb3Rlci0tbmF2LWxpbmtzLS1pdGVtXCI+QWJvdXQgVXM8L2xpPlxuICAgICAgICA8bGkgY2xhc3NOYW1lPVwiZm9vdGVyLS1uYXYtbGlua3MtLWl0ZW1cIj5DYXJlZXJzIGF0IEFTT1M8L2xpPlxuICAgICAgICA8bGkgY2xhc3NOYW1lPVwiZm9vdGVyLS1uYXYtbGlua3MtLWl0ZW1cIj5Db3Jwb3JhdGUgUmVzcG9uc2liaWxpdHk8L2xpPlxuICAgICAgICA8bGkgY2xhc3NOYW1lPVwiZm9vdGVyLS1uYXYtbGlua3MtLWl0ZW1cIj5JbnZlc3RvcnMgU2l0ZTwvbGk+XG4gICAgICA8L3VsPlxuXG4gICAgPHVsIGNsYXNzTmFtZT1cImZvb3Rlci0tbmF2LWxpbmtzLS1jb2xcIj5cbiAgICAgIDxoNCBjbGFzc05hbWU9XCJmb290ZXItLW5hdi1saW5rcy0tdGl0bGVcIj5NT1JFIEZST00gQVNPUzwvaDQ+XG4gICAgICAgIDxsaSBjbGFzc05hbWU9XCJmb290ZXItLW5hdi1saW5rcy0taXRlbVwiPkUtZ2lmdCBjYXJkczwvbGk+XG4gICAgICAgIDxsaSBjbGFzc05hbWU9XCJmb290ZXItLW5hdi1saW5rcy0taXRlbVwiPk1vYmlsZSBhbmQgQVNPUyBBcHBzPC9saT5cbiAgICAgICAgPGxpIGNsYXNzTmFtZT1cImZvb3Rlci0tbmF2LWxpbmtzLS1pdGVtXCI+QVNPUyBNYXJrZXRwbGFjZTwvbGk+XG4gICAgICA8L3VsPlxuXG4gICAgPHVsIGNsYXNzTmFtZT1cImZvb3Rlci0tbmF2LWxpbmtzLS1jb2xcIj5cbiAgICAgIDxoNCBjbGFzc05hbWU9XCJmb290ZXItLW5hdi1saW5rcy0tdGl0bGVcIj5TSE9QUElORyBGUk9NOjwvaDQ+XG4gICAgICAgIDxsaSBjbGFzc05hbWU9XCJmb290ZXItLW5hdi1saW5rcy0tc2hpcHBpbmdcIj5cbiAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwiZm9vdGVyLS1uYXYtbGlua3MtLXNoaXBwaW5nLWNvdW50cnlcIj5Zb3UncmUgaW48L3NwYW4+XG4gICAgICAgICAgPGltZyBjbGFzc05hbWU9XCJzaGlwcGluZy1pY29uXCIgYWx0PVwiVW5pdGVkIFN0YXRlc1wiIHNyYz1cImh0dHBzOi8vYXNzZXRzLmFzb3NzZXJ2aWNlcy5jb20vc3RvcmVzYS9pbWFnZXMvZmxhZ3MvdXMucG5nXCIgYWx0PVwiVW5pdGVkIFN0YXRlc1wiPjwvaW1nPlxuICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJmb290ZXItLW5hdi1saW5rcy0tc2hpcHBpbmctY2hhbmdlXCI+fCBDSEFOR0U8L3NwYW4+XG4gICAgICAgIDwvbGk+XG4gICAgICA8L3VsPlxuICA8L3NlY3Rpb24+XG4pOyIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmV4cG9ydCBkZWZhdWx0ICgpID0+IChcbiAgPHNlY3Rpb24gY2xhc3NOYW1lPVwiZm9vdGVyLS1lY29tXCIgPlxuICAgIDxwIGNsYXNzTmFtZT1cImZvb3Rlci0tZWNvbS1jb3B5XCI+wqkgMjAxOSBBU09TPC9wPlxuICAgIDx1bCBjbGFzc05hbWU9XCJmb290ZXItLWVjb20tLXRlcm1zXCI+XG4gICAgICA8bGkgY2xhc3NOYW1lPVwiZm9vdGVyLS1lY29tLS10ZXJtcy1pdGVtXCI+UHJpdmFjeSAmIENvb2tpZXM8L2xpPlxuICAgICAgPGxpIGNsYXNzTmFtZT1cImZvb3Rlci0tZWNvbS0tdGVybXMtaXRlbVwiPlRzJkNzPC9saT5cbiAgICAgIDxsaSBjbGFzc05hbWU9XCJmb290ZXItLWVjb20tLXRlcm1zLWl0ZW1cIj5BY2Nlc3NpYmlsaXR5PC9saT5cbiAgICA8L3VsPlxuICA8L3NlY3Rpb24+XG4pOyIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgRm9vdGVySWNvbnMgZnJvbSAnLi9mb290ZXJfaWNvbnMnO1xuaW1wb3J0IEZvb3Rlck5hdkxpbmtzIGZyb20gJy4vZm9vdGVyX25hdl9saW5rcyc7XG5pbXBvcnQgRWNvbUZvb3RlciBmcm9tICcuL2Vjb21fZm9vdGVyJztcblxuZXhwb3J0IGRlZmF1bHQgKCkgPT4gKFxuICA8ZGl2IGNsYXNzTmFtZT1cImZvb3RlclwiPlxuICAgIDxGb290ZXJJY29ucyAvPlxuICAgIDxGb290ZXJOYXZMaW5rcyAvPlxuICAgIDxFY29tRm9vdGVyIC8+XG4gIDwvZGl2PlxuKTsiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG5leHBvcnQgZGVmYXVsdCAoKSA9PiAoXG4gIDxkaXYgY2xhc3NOYW1lPVwiaG9tZS0tYmFubmVyXCIgPlxuICAgIDxkaXYgY2xhc3NOYW1lPVwiaG9tZS0tYmFubmVyLWJhclwiPlxuICAgICAgPHAgY2xhc3NOYW1lPVwiaG9tZS0tYmFubmVyLWJhci0taXRlbVwiPldPTUVOPC9wPlxuICAgICAgPHNwYW4gY2xhc3NOYW1lPVwiaG9tZS0tYmFubmVyLWJhci1pdGVtXCI+XG4gICAgICAgIDxiIGNsYXNzTmFtZT1cImhvbWUtLWJhbm5lci1iYXItaXRlbVwiPjxzdHJvbmc+U1BFTkQgTU9SRS4gU0FWRSBNT1JFLjwvc3Ryb25nPjwvYj5cbiAgICAgICAgPGIgY2xhc3NOYW1lPVwiaG9tZS0tYmFubmVyLWJhci1pdGVtXCI+PHN0cm9uZz4kMjAwIGdldCAkNTAsICQyNTAgZ2V0ICQ3MCwgJDM1MCBnZXQgJDEwMC48L3N0cm9uZz48L2I+XG4gICAgICA8L3NwYW4+XG4gICAgICA8cCBjbGFzc05hbWU9XCJob21lLS1iYW5uZXItYmFyLS1pdGVtXCI+TUVOPC9wPlxuICAgIDwvZGl2PlxuXG5cbiAgICA8YSBocmVmPVwiXCI+XG4gICAgICA8aW1nIGNsYXNzTmFtZT1cImhvbWUtLWJhbm5lci1pbWdcIiBhbHQ9XCJcIiBzcmM9XCJodHRwczovLzY2Lm1lZGlhLnR1bWJsci5jb20vNDA2ZDdlZjY3MDk1ZTdjMGY3MWVjNzMxZDk5YjIyMGMvdHVtYmxyX3BxdDZ1d2lMNkcxd3liMmw4bzFfMTI4MC5naWZcIj48L2ltZz5cbiAgICA8L2E+XG4gIDwvZGl2PlxuKSIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmV4cG9ydCBkZWZhdWx0ICgpID0+IChcbiAgPHNlY3Rpb24gY2xhc3NOYW1lPVwiaG9tZS0tZmVhdHVyZVwiID5cbiAgICA8YSBocmVmPVwiXCIgY2xhc3NOYW1lPVwiaG9tZS0tZmVhdHVyZS1pbWdcIj5cbiAgICAgIDxpbWdcbiAgICAgICAgYWx0PVwiXCJcbiAgICAgICAgc3JjPVwiaHR0cHM6Ly9jb250ZW50LmFzb3MtbWVkaWEuY29tLy0vbWVkaWEvaG9tZXBhZ2VzL3d3LzIwMTkvMDQvMjkvZ2JsLXV0aWxpdHktc3VyZi1oZXJvLmpwZ1wiXG4gICAgICA+XG4gICAgICA8L2ltZz5cbiAgICA8L2E+XG5cbiAgICA8c2VjdGlvbiBjbGFzc05hbWU9XCJob21lLS1mZWF0dXJlLS1idXR0b25zXCI+XG4gICAgICA8YSBocmVmPVwiXCIgY2xhc3NOYW1lPVwiaG9tZS0tbGFyZ2UtZmVhdHVyZS10aXRsZVwiPlN1cmZlciB2aWJlczwvYT5cbiAgICAgIDxhIGhyZWY9XCJcIiBjbGFzc05hbWU9XCJnZW5lcmFsLWJ0blwiPlNIT1AgTk9XPC9hPlxuICAgIDwvc2VjdGlvbj5cblxuICAgIDx1bCBjbGFzc05hbWU9XCJob21lLS1kb3VibGUtLWZlYXR1cmVcIj5cbiAgICAgIDxsaSBjbGFzc05hbWU9XCJob21lLS1kb3VibGUtZmVhdHVyZS0taXRlbVwiPlxuICAgICAgICA8YSBocmVmPVwiXCI+XG4gICAgICAgICAgPGltZyBpZD1cImhvbWUtLWRvdWJsZS1mZWF0dXJlLS1pdGVtLS1pbWdcIiBhbHQ9XCJcIiBzcmM9XCJodHRwczovLzY2Lm1lZGlhLnR1bWJsci5jb20vOGVjNTJlZWY3MDgwMzJhMWVlZWZlMWM3ZmE2NzE1NGUvdHVtYmxyX3BxdDdtclZ4Wlcxd3liMmw4bzJfMTI4MC5qcGdcIj48L2ltZz5cbiAgICAgICAgPC9hPlxuICAgICAgICA8aDMgY2xhc3NOYW1lPVwiZG91YmxlLWZlYXR1cmUtLWl0ZW0tLXRpdGxlXCI+RmVzdGl2YWw8L2gzPlxuICAgICAgICA8cCBjbGFzc05hbWU9XCJkb3VibGUtZmVhdHVyZS0taXRlbS0tYm9keVwiPkJlIGNlbnRyZSBzdGFnZTwvcD5cbiAgICAgICAgPGEgaHJlZj1cIlwiIGNsYXNzTmFtZT1cImdlbmVyYWwtYnRuXCI+U0hPUCBOT1c8L2E+XG4gICAgICA8L2xpPlxuXG4gICAgICA8bGkgY2xhc3NOYW1lPVwiaG9tZS0tZG91YmxlLWZlYXR1cmUtLWl0ZW1cIj5cbiAgICAgICAgPGEgaHJlZj1cIlwiPlxuICAgICAgICAgIDxpbWcgYWx0PVwiXCIgaWQ9XCJob21lLS1kb3VibGUtZmVhdHVyZS0taXRlbS0taW1nXCIgc3JjPVwiaHR0cHM6Ly82Ni5tZWRpYS50dW1ibHIuY29tL2JmYTEwZTRjN2MyZDZkOTdiMDQzNmM3MzJjYmIyYzAwL3R1bWJscl9wcXQ3bXJWeFpXMXd5YjJsOG8xXzU0MC5qcGdcIj48L2ltZz5cbiAgICAgICAgPC9hPlxuICAgICAgICA8aDMgY2xhc3NOYW1lPVwiZG91YmxlLWZlYXR1cmUtLWl0ZW0tLXRpdGxlXCI+U2FuZGFsczwvaDM+XG4gICAgICAgIDxwIGNsYXNzTmFtZT1cImRvdWJsZS1mZWF0dXJlLS1pdGVtLS1ib2R5XCI+RnJlc2ggc3R5bGVzIGZvciB3YXJtIGNsaW1hdGVzPC9wPlxuICAgICAgICA8YSBocmVmPVwiXCIgY2xhc3NOYW1lPVwiZ2VuZXJhbC1idG5cIj5TSE9QIE5PVzwvYT5cbiAgICAgIDwvbGk+XG4gICAgPC91bD5cblxuICAgIDxkaXYgY2xhc3NOYW1lPVwiaG9tZS0tZmVhdHVyZS1iYW5uZXJcIiA+XG4gICAgICA8YSBocmVmPVwiXCI+XG4gICAgICAgIHsvKiA8aW1nIGFsdD1cIlwiIHNyYz1cImh0dHBzOi8vNjYubWVkaWEudHVtYmxyLmNvbS9kYjBhM2U1MzljZDQ1YzI3YjZlZjRlMGU4MTI3YmQwZC90dW1ibHJfcHF0NnV3aUw2RzF3eWIybDhvMl8yNTAuZ2lmXCI+PC9pbWc+ICovfVxuICAgICAgPC9hPlxuICAgIDwvZGl2PlxuICA8L3NlY3Rpb24+XG4pXG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG5leHBvcnQgZGVmYXVsdCAoKSA9PiAoXG4gIDxzZWN0aW9uIGNsYXNzTmFtZT1cImhvbWUtLXN0eWxlLWZlZWRcIiA+XG4gICAgPGgyIGNsYXNzTmFtZT1cImhvbWUtLXN0eWxlLWZlZWQtLXRpdGxlXCI+U1RZTEUgRkVFRDwvaDI+XG4gICAgPHAgY2xhc3NOYW1lPVwiaG9tZS0tc3R5bGUtZmVlZC0tYm9keVwiPk91dGZpdCBpZGVhcywgZWRpdG9yIHBpY2tzLCBzdHlsaW5nIGluc3BpcmF0aW9uIGFuZCBGYWNlICsgQm9keSB0aXBzPC9wPlxuXG4gICAgPHNlY3Rpb24gY2xhc3NOYW1lPVwiaG9tZS0tc3R5bGUtZmVlZC1jYXJvdXNlbFwiPlxuICAgICAgPHNlY3Rpb24gY2xhc3NOYW1lPVwiaG9tZS0tY2Fyb3VzZWwtY29udHJvbHNcIj5cbiAgICAgICAgPGJ1dHRvbiBjbGFzc05hbWU9XCJwcmV2LWJ0blwiPjwvYnV0dG9uPlxuICAgICAgICA8YnV0dG9uIGNsYXNzTmFtZT1cIm5leHQtYnRuXCI+PC9idXR0b24+XG4gICAgICA8L3NlY3Rpb24+XG5cbiAgICAgIDx1bCBjbGFzc05hbWU9XCJob21lLS1jYXJvdXNlbC1saXN0XCI+XG4gICAgICAgIDxsaSBjbGFzc05hbWU9XCJob21lLS1zdHlsZS1mZWVkLWNhcm91c2VsLS1pdGVtXCI+XG4gICAgICAgICAgPGEgaHJlZj1cIlwiPlxuICAgICAgICAgICAgPGltZyBjbGFzc05hbWU9XCJob21lLS1zdHlsZS1mZWVkLWNhcm91c2VsLS1pbWdcIiBhbHQ9XCJcIiBzcmM9XCJodHRwczovLzY2Lm1lZGlhLnR1bWJsci5jb20vMWJlZmJlNjBmNmJhZjRjMmJjZGI3YjI3ZWZiNGM3MjAvdHVtYmxyX3BxdDZ1d2lMNkcxd3liMmw4bzEwXzQwMC5qcGdcIj48L2ltZz5cbiAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJzdHlsZS1mZWVkLWNhcm91c2VsLWNvbnRlbnRcIj5cbiAgICAgICAgICAgICAgPGgzIGNsYXNzTmFtZT1cImhvbWUtLXN0eWxlLWZlZWQtY2Fyb3VzZWwtLXRpdGxlXCI+V0hBVCBUTyBXRUFSIFRPIEEgREVTVElOQVRJT04gV0VERElORzwvaDM+XG4gICAgICAgICAgICAgIDxwIGNsYXNzTmFtZT1cImhvbWUtLXN0eWxlLWZlZWQtY2Fyb3VzZWwtLWJvZHlcIj5CZSBiZXN0LWRyZXNzZWQgZ3Vlc3Q8L3A+XG4gICAgICAgICAgICAgIDxwIGNsYXNzTmFtZT1cImhvbWUtLXN0eWxlLWZlZWQtY2Fyb3VzZWwtLWRhdGVcIj5BcHJpbCAyNSwgMjAxOTwvcD4gIFxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPC9hPlxuICAgICAgICA8L2xpPlxuXG4gICAgICAgIDxsaSBjbGFzc05hbWU9XCJob21lLS1zdHlsZS1mZWVkLWNhcm91c2VsLS1pdGVtXCI+XG4gICAgICAgICAgPGEgaHJlZj1cIlwiPlxuICAgICAgICAgICAgPGltZyBjbGFzc05hbWU9XCJob21lLS1zdHlsZS1mZWVkLWNhcm91c2VsLS1pbWdcIiBhbHQ9XCJcIiBzcmM9XCJodHRwczovLzY2Lm1lZGlhLnR1bWJsci5jb20vMWI1ZjA0ZWY1OGI3MzY3ZWU1YmE5Mjk2OTU0N2U3YmMvdHVtYmxyX3BxdDgxaVZLaGQxd3liMmw4bzFfNDAwLmpwZ1wiPjwvaW1nPlxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInN0eWxlLWZlZWQtY2Fyb3VzZWwtY29udGVudFwiPlxuICAgICAgICAgICAgICA8aDMgY2xhc3NOYW1lPVwiaG9tZS0tc3R5bGUtZmVlZC1jYXJvdXNlbC0tdGl0bGVcIj5CRVNUIE9GIE5FVyBJTjogUElOSyAmIFBBVENIV09SSzwvaDM+XG4gICAgICAgICAgICAgIDxwIGNsYXNzTmFtZT1cImhvbWUtLXN0eWxlLWZlZWQtY2Fyb3VzZWwtLWJvZHlcIj5UaGUgZmFzaGlvbiB0ZWFtIGhhdmUgc3Bva2VuPC9wPlxuICAgICAgICAgICAgICA8cCBjbGFzc05hbWU9XCJob21lLS1zdHlsZS1mZWVkLWNhcm91c2VsLS1kYXRlXCI+QXByaWwgMjcsIDIwMTk8L3A+ICBcbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDwvYT5cbiAgICAgICAgPC9saT5cblxuICAgICAgICA8bGkgY2xhc3NOYW1lPVwiaG9tZS0tc3R5bGUtZmVlZC1jYXJvdXNlbC0taXRlbVwiPlxuICAgICAgICAgIDxhIGhyZWY9XCJcIj5cbiAgICAgICAgICAgIDxpbWcgY2xhc3NOYW1lPVwiaG9tZS0tc3R5bGUtZmVlZC1jYXJvdXNlbC0taW1nXCIgYWx0PVwiXCIgc3JjPVwiaHR0cHM6Ly82Ni5tZWRpYS50dW1ibHIuY29tL2QzYmUzYzgwMTAzMmFlM2YyZmY0ZGViZmRlNjkwMGZmL3R1bWJscl9wcXQ4NG1LUDROMXd5YjJsOG8xXzQwMC5qcGdcIj48L2ltZz5cbiAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJzdHlsZS1mZWVkLWNhcm91c2VsLWNvbnRlbnRcIj5cbiAgICAgICAgICAgICAgPGgzIGNsYXNzTmFtZT1cImhvbWUtLXN0eWxlLWZlZWQtY2Fyb3VzZWwtLXRpdGxlXCIgPlRIRSBBU09TICsgTElGRSBJUyBCRUFVVElGVUwgQ09MTEVDVElPTiBJUyBIRVJFPC9oMz5cbiAgICAgICAgICAgICAgPHAgY2xhc3NOYW1lPVwiaG9tZS0tc3R5bGUtZmVlZC1jYXJvdXNlbC0tYm9keVwiPkdldCBmZXN0aXZhbCBmcmVzaDwvcD5cbiAgICAgICAgICAgICAgPHAgY2xhc3NOYW1lPVwiaG9tZS0tc3R5bGUtZmVlZC1jYXJvdXNlbC0tZGF0ZVwiPkFwcmlsIDI2LCAyMDE5PC9wPiAgXG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8L2E+XG4gICAgICAgIDwvbGk+XG5cbiAgICAgICAgPGxpIGNsYXNzTmFtZT1cImhvbWUtLXN0eWxlLWZlZWQtY2Fyb3VzZWwtLWl0ZW1cIj5cbiAgICAgICAgICA8YSBocmVmPVwiXCI+XG4gICAgICAgICAgICA8aW1nIGNsYXNzTmFtZT1cImhvbWUtLXN0eWxlLWZlZWQtY2Fyb3VzZWwtLWltZ1wiIGFsdD1cIlwiIHNyYz1cImh0dHBzOi8vNjYubWVkaWEudHVtYmxyLmNvbS83NGRmM2FkN2FiMDE5NmY3NWYyMWU0NGMwYWRlNDdiZC90dW1ibHJfcHF0NnV3aUw2RzF3eWIybDhvOF80MDAuanBnXCI+PC9pbWc+XG4gICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwic3R5bGUtZmVlZC1jYXJvdXNlbC1jb250ZW50XCI+XG4gICAgICAgICAgICAgIDxoMyBjbGFzc05hbWU9XCJob21lLS1zdHlsZS1mZWVkLWNhcm91c2VsLS10aXRsZVwiPjUgT0YgVEhFIE1PU1QgRVhUUkEgQURELU9OUzwvaDM+XG4gICAgICAgICAgICAgIDxwIGNsYXNzTmFtZT1cImhvbWUtLXN0eWxlLWZlZWQtY2Fyb3VzZWwtLWJvZHlcIj5JdCdzIGFsbCBpbiB0aGUgZGV0YWlsczwvcD5cbiAgICAgICAgICAgICAgPHAgY2xhc3NOYW1lPVwiaG9tZS0tc3R5bGUtZmVlZC1jYXJvdXNlbC0tZGF0ZVwiPkFwcmlsIDI1LCAyMDE5PC9wPiAgXG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8L2E+XG4gICAgICAgIDwvbGk+XG57LyogXG4gICAgICAgIDxsaSBjbGFzc05hbWU9XCJob21lLS1zdHlsZS1mZWVkLWNhcm91c2VsLS1pdGVtXCI+XG4gICAgICAgICAgPGEgaHJlZj1cIlwiPlxuICAgICAgICAgICAgPGltZyBjbGFzc05hbWU9XCJob21lLS1zdHlsZS1mZWVkLWNhcm91c2VsLS1pbWdcIiBhbHQ9XCJcIiBzcmM9XCJodHRwczovLzY2Lm1lZGlhLnR1bWJsci5jb20vNGUxOTczOTNkZWUzYWE0MThjN2M0YTI1YzhmYjJjZTMvdHVtYmxyX3BxdDZ1d2lMNkcxd3liMmw4bzlfNDAwLmpwZ1wiPjwvaW1nPlxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInN0eWxlLWZlZWQtY2Fyb3VzZWwtY29udGVudFwiPlxuICAgICAgICAgICAgICAgIDxoMyBjbGFzc05hbWU9XCJob21lLS1zdHlsZS1mZWVkLWNhcm91c2VsLS10aXRsZVwiPkhPVyBBU09TRVJTIERPIDIwMTkgSkVXRUxSWTwvaDM+XG4gICAgICAgICAgICAgICAgPHAgY2xhc3NOYW1lPVwiaG9tZS0tc3R5bGUtZmVlZC1jYXJvdXNlbC0tYm9keVwiPlRoZSBibGluZyB0aGluZzwvcD5cbiAgICAgICAgICAgICAgICA8cCBjbGFzc05hbWU9XCJob21lLS1zdHlsZS1mZWVkLWNhcm91c2VsLS1kYXRlXCI+QXByaWwgMjQsIDIwMTk8L3A+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8L2E+XG4gICAgICAgIDwvbGk+XG5cbiAgICAgICAgPGxpIGNsYXNzTmFtZT1cImhvbWUtLXN0eWxlLWZlZWQtY2Fyb3VzZWwtLWl0ZW1cIj5cbiAgICAgICAgICA8YSBocmVmPVwiXCI+XG4gICAgICAgICAgICA8aW1nIGNsYXNzTmFtZT1cImhvbWUtLXN0eWxlLWZlZWQtY2Fyb3VzZWwtLWltZ1wiIGFsdD1cIlwiIHNyYz1cImh0dHBzOi8vNjYubWVkaWEudHVtYmxyLmNvbS84NmZjMWVmNDEzMTM0MzMzZWFjMzUzYWE4ZTRlOTkwNy90dW1ibHJfcHF0NnV3aUw2RzF3eWIybDhvM180MDAuZ2lmXCI+PC9pbWc+XG4gICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwic3R5bGUtZmVlZC1jYXJvdXNlbC1jb250ZW50XCI+XG4gICAgICAgICAgICAgICAgPGgzIGNsYXNzTmFtZT1cImhvbWUtLXN0eWxlLWZlZWQtY2Fyb3VzZWwtLXRpdGxlXCI+NSBDTEFTU0lDIE5JR0hULU9VVCBQSUVDRVMgVU5ERVIgJDQwPC9oMz5cbiAgICAgICAgICAgICAgICA8cCBjbGFzc05hbWU9XCJob21lLS1zdHlsZS1mZWVkLWNhcm91c2VsLS1ib2R5XCI+RWF0LCBzbGVlcCwgd2VhciwgTEJELCByZXBlYXQ8L3A+XG4gICAgICAgICAgICAgICAgPHAgY2xhc3NOYW1lPVwiaG9tZS0tc3R5bGUtZmVlZC1jYXJvdXNlbC0tZGF0ZVwiPkFwcmlsIDIyLCAyMDE5PC9wPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPC9hPlxuICAgICAgICA8L2xpPlxuXG4gICAgICAgIDxsaSBjbGFzc05hbWU9XCJob21lLS1zdHlsZS1mZWVkLWNhcm91c2VsLS1pdGVtXCI+XG4gICAgICAgICAgPGEgaHJlZj1cIlwiPlxuICAgICAgICAgICAgPGltZyBjbGFzc05hbWU9XCJob21lLS1zdHlsZS1mZWVkLWNhcm91c2VsLS1pbWdcIiBhbHQ9XCJcIiBzcmM9XCJodHRwczovLzY2Lm1lZGlhLnR1bWJsci5jb20vMmNjZDQ3M2Y3M2I1MTA0ZTk4N2IxZTVmYTRiMWI2NzkvdHVtYmxyX3BxdDZ1d2lMNkcxd3liMmw4bzRfNDAwLmpwZ1wiPjwvaW1nPlxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInN0eWxlLWZlZWQtY2Fyb3VzZWwtY29udGVudFwiPlxuICAgICAgICAgICAgICAgIDxoMyBjbGFzc05hbWU9XCJob21lLS1zdHlsZS1mZWVkLWNhcm91c2VsLS10aXRsZVwiPjMgV0FZUyBUTyBUUlkgVFJPUElDQUw8L2gzPlxuICAgICAgICAgICAgICAgIDxwIGNsYXNzTmFtZT1cImhvbWUtLXN0eWxlLWZlZWQtY2Fyb3VzZWwtLWJvZHlcIj5GZWVsIHRoZSBoZWF0PC9wPlxuICAgICAgICAgICAgICAgIDxwIGNsYXNzTmFtZT1cImhvbWUtLXN0eWxlLWZlZWQtY2Fyb3VzZWwtLWRhdGVcIj5BcHJpbCAyMSwgMjAxOTwvcD5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDwvYT5cbiAgICAgICAgPC9saT5cblxuICAgICAgICA8bGkgY2NsYXNzTmFtZT1cImhvbWUtLXN0eWxlLWZlZWQtY2Fyb3VzZWwtLWl0ZW1cIj5cbiAgICAgICAgICA8YSBocmVmPVwiXCI+XG4gICAgICAgICAgICA8aW1nIGNsYXNzTmFtZT1cImhvbWUtLXN0eWxlLWZlZWQtY2Fyb3VzZWwtLWltZ1wiIGFsdD1cIlwiIHNyYz1cImh0dHBzOi8vNjYubWVkaWEudHVtYmxyLmNvbS82MmFmZjY1YjY5ZTllMGRlOWU1OGFlMjhiMmRlYTEwYS90dW1ibHJfcHF0OGlvUjdFOTF3eWIybDhvMl80MDAuanBnXCI+PC9pbWc+XG4gICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwic3R5bGUtZmVlZC1jYXJvdXNlbC1jb250ZW50XCI+XG4gICAgICAgICAgICAgICAgPGgzIGNsYXNzTmFtZT1cImhvbWUtLXN0eWxlLWZlZWQtY2Fyb3VzZWwtLXRpdGxlXCI+QVNPUyBJTlNJREVSUyBJTiBTUzE5IFNORUFLRVJTPC9oMz5cbiAgICAgICAgICAgICAgICA8cCBjbGFzc05hbWU9XCJob21lLS1zdHlsZS1mZWVkLWNhcm91c2VsLS1ib2R5XCI+RnJlc2ggb3V0IHRoZSBib3g8L3A+XG4gICAgICAgICAgICAgICAgPHAgY2xhc3NOYW1lPVwiaG9tZS0tc3R5bGUtZmVlZC1jYXJvdXNlbC0tZGF0ZVwiPkFwcmlsIDIwLCAyMDE5PC9wPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPC9hPlxuICAgICAgICA8L2xpPlxuXG4gICAgICAgIDxsaSBjbGFzc05hbWU9XCJob21lLS1zdHlsZS1mZWVkLWNhcm91c2VsLS1pdGVtXCI+XG4gICAgICAgICAgPGEgaHJlZj1cIlwiPlxuICAgICAgICAgICAgPGltZyBjbGFzc05hbWU9XCJob21lLS1zdHlsZS1mZWVkLWNhcm91c2VsLS1pbWdcIiBhbHQ9XCJcIiBzcmM9XCJodHRwczovLzY2Lm1lZGlhLnR1bWJsci5jb20vMmU4YmVkMTg5MDA4MGQ1MjQ3ODMxN2YyMTg3MTYzMzUvdHVtYmxyX3BxdDhpb1I3RTkxd3liMmw4bzNfNDAwLmpwZ1wiPjwvaW1nPlxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInN0eWxlLWZlZWQtY2Fyb3VzZWwtY29udGVudFwiPlxuICAgICAgICAgICAgICAgIDxoMyBjbGFzc05hbWU9XCJob21lLS1zdHlsZS1mZWVkLWNhcm91c2VsLS10aXRsZVwiPkJFU1QgT0YgTkVXIElOOlRJRS1EWUUgJiBaRUJSQTwvaDM+XG4gICAgICAgICAgICAgICAgPHAgY2xhc3NOYW1lPVwiaG9tZS0tc3R5bGUtZmVlZC1jYXJvdXNlbC0tYm9keVwiPkZhc2hpb24gZmlsdGVyIG9uPC9wPlxuICAgICAgICAgICAgICAgIDxwIGNsYXNzTmFtZT1cImhvbWUtLXN0eWxlLWZlZWQtY2Fyb3VzZWwtLWRhdGVcIj5BcHJpbCAxOCwgMjAxOTwvcD5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDwvYT5cbiAgICAgICAgPC9saT4gKi99XG5cbiAgICAgICAgPGxpIGNsYXNzTmFtZT1cImhvbWUtLXN0eWxlLWZlZWQtY2Fyb3VzZWwtLWl0ZW1cIj5cbiAgICAgICAgICA8YSBocmVmPVwiXCIgY2xhc3NOYW1lPVwiYnRuLS12aWV3LWFsbFwiPlxuICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwiaG9tZS1zdHlsZS1mZWVkLWNhcm91c2VsLXZpZXctYnRuXCI+VklFVyBBTEw8L3NwYW4+XG4gICAgICAgICAgPC9hPlxuICAgICAgICA8L2xpPlxuICAgICAgPC91bD5cbiAgICAgIDxhIGhyZWY9XCJcIiBjbGFzc05hbWU9XCJnZW5lcmFsLWJ0blwiPlZJRVcgQUxMPC9hPlxuICAgIDwvc2VjdGlvbj5cbiAgPC9zZWN0aW9uPlxuKSIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmV4cG9ydCBkZWZhdWx0ICgpID0+IChcbiAgPHNlY3Rpb24gY2xhc3NOYW1lPVwiaG9tZS0tZmVhdHVyZVwiPlxuICAgIDx1bCBjbGFzc05hbWU9XCJob21lLS1kb3VibGUtLWZlYXR1cmVcIj5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwibWFyZ2luLTI1XCI+XG4gICAgICAgIDxsaSBjbGFzc05hbWU9XCJob21lLS1kb3VibGUtZmVhdHVyZS0taXRlbVwiPlxuICAgICAgICAgIDxhIGhyZWY9XCJcIj5cbiAgICAgICAgICAgIDxpbWcgY2xhc3NOYW1lPVwiaG9tZS0tZG91YmxlLWZlYXR1cmUtLWltZ1wiIGFsdD1cIlwiIHNyYz1cImh0dHBzOi8vNjYubWVkaWEudHVtYmxyLmNvbS84OWFjMTBkN2EzMTNlNWY4YjZiYzNkM2Q2YTBjYmQxMy90dW1ibHJfcHF0NnV3aUw2RzF3eWIybDhvNV80MDAuanBnXCI+PC9pbWc+XG4gICAgICAgICAgPC9hPlxuICAgICAgICAgIDxoMyBjbGFzc05hbWU9XCJob21lLS1kb3VibGUtZmVhdHVyZS0taXRlbS10aXRsZVwiPlNXSU0gV0lOUzwvaDM+XG4gICAgICAgICAgPHAgY2xhc3NOYW1lPVwiaG9tZS0tZG91YmxlLWZlYXR1cmUtLWl0ZW0tYm9keVwiPkJlIGEgb25lLXBpZWNlIHdvbmRlcjwvcD5cbiAgICAgICAgICA8YSBocmVmPVwiXCIgY2xhc3NOYW1lPVwiZ2VuZXJhbC1idG5cIj5TSE9QIE5PVzwvYT5cbiAgICAgICAgPC9saT5cbiAgICAgIDwvZGl2PlxuXG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cIm1hcmdpbi0yNVwiPlxuICAgICAgICA8bGkgY2xhc3NOYW1lPVwiaG9tZS0tZG91YmxlLWZlYXR1cmUtLWl0ZW1cIj5cbiAgICAgICAgICA8YSBocmVmPVwiXCI+XG4gICAgICAgICAgICA8aW1nIGNsYXNzTmFtZT1cImhvbWUtLWRvdWJsZS1mZWF0dXJlLS1pbWdcIiBhbHQ9XCJcIiBzcmM9XCJodHRwczovLzY2Lm1lZGlhLnR1bWJsci5jb20vYmE5Mjk4NGFkZjY5OGRiN2QzMDNhY2I5ZDk0MDc1NDIvdHVtYmxyX3Bxd2M4OU82Rzkxd3liMmw4bzFfNTAwLnBuZ1wiPjwvaW1nPlxuICAgICAgICAgIDwvYT5cbiAgICAgICAgICA8aDMgY2xhc3NOYW1lPVwiaG9tZS0tZG91YmxlLWZlYXR1cmUtLWl0ZW0tdGl0bGVcIj5PQ0NBU0lPTldFQVI8L2gzPlxuICAgICAgICAgIDxwIGNsYXNzTmFtZT1cImhvbWUtLWRvdWJsZS1mZWF0dXJlLS1pdGVtLWJvZHlcIj5CZSBpY29uaWM8L3A+XG4gICAgICAgICAgPGEgaHJlZj1cIlwiIGNsYXNzTmFtZT1cImdlbmVyYWwtYnRuXCI+U0hPUCBOT1c8L2E+XG4gICAgICAgIDwvbGk+XG4gICAgICA8L2Rpdj5cbiAgICA8L3VsPlxuICA8L3NlY3Rpb24+XG4pOyIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmV4cG9ydCBkZWZhdWx0ICgpID0+IChcbiAgPHNlY3Rpb24gY2xhc3NOYW1lPVwiaG9tZS0tY2F0ZWdvcnktY2Fyb3VzZWxcIiA+XG4gICAgPGgyIGNsYXNzTmFtZT1cImhvbWUtLWNhdGVnb3J5LWNhcm91c2VsLS10aXRsZVwiPlNIT1AgQlkgQ0FURUdPUlk8L2gyPlxuXG4gICAgPHNlY3Rpb24gY2xhc3NOYW1lPVwiaG9tZS0tY2Fyb3VzZWwtY29udHJvbHNcIj5cbiAgICAgIDxidXR0b24gY2xhc3NOYW1lPVwicHJldi1idG5cIj48L2J1dHRvbj5cbiAgICAgIDxidXR0b24gY2xhc3NOYW1lPVwibmV4dC1idG5cIj48L2J1dHRvbj5cbiAgICA8L3NlY3Rpb24+XG5cbiAgICA8dWwgY2xhc3NOYW1lPVwiaG9tZS0tY2Fyb3VzZWwtbGlzdFwiPlxuICAgICAgPGxpIGNsYXNzTmFtZT1cImhvbWUtLWNhdGVnb3J5LWNhcm91c2VsLS1pdGVtXCI+XG4gICAgICAgIDxhIGhyZWY9XCJcIj5cbiAgICAgICAgICA8aW1nIGNsYXNzTmFtZT1cImhvbWUtLWNhdGVnb3J5LWNhcm91c2VsLS1pdGVtLS1pbWdcIiBhbHQ9XCJcIiBzcmM9XCJodHRwczovLzY2Lm1lZGlhLnR1bWJsci5jb20vZmI5OGExMDg2NzhkNzgzNDU2YjhjYmMwMzQ4YzAyMTgvdHVtYmxyX3BxdDh6ZzdQdG4xd3liMmw4bzRfMjUwLmpwZ1wiPjwvaW1nPlxuICAgICAgICAgIDxwIGNsYXNzTmFtZT1cImhvbWUtLWNhdGVnb3J5LWNhcm91c2VsLS1pdGVtLS10aXRsZVwiPkRSRVNTRVM8L3A+XG4gICAgICAgIDwvYT5cbiAgICAgIDwvbGk+XG5cbiAgICAgIDxsaSBjbGFzc05hbWU9XCJob21lLS1jYXRlZ29yeS1jYXJvdXNlbC0taXRlbVwiPlxuICAgICAgICA8YSBocmVmPVwiXCI+XG4gICAgICAgICAgPGltZyBjbGFzc05hbWU9XCJob21lLS1jYXRlZ29yeS1jYXJvdXNlbC0taXRlbS0taW1nXCIgYWx0PVwiXCIgc3JjPVwiaHR0cHM6Ly82Ni5tZWRpYS50dW1ibHIuY29tL2I2YzZiMmUwZDg5YjYxYmE1MTI1MGZiMjg2NTA5ZGRkL3R1bWJscl9wcXQ4emc3UHRuMXd5YjJsOG8yXzI1MC5qcGdcIj48L2ltZz5cbiAgICAgICAgICA8cCBjbGFzc05hbWU9XCJob21lLS1jYXRlZ29yeS1jYXJvdXNlbC0taXRlbS0tdGl0bGVcIj5TSE9FUzwvcD5cbiAgICAgICAgPC9hPlxuICAgICAgPC9saT5cblxuICAgICAgPGxpIGNsYXNzTmFtZT1cImhvbWUtLWNhdGVnb3J5LWNhcm91c2VsLS1pdGVtXCI+XG4gICAgICAgIDxhIGhyZWY9XCJcIj5cbiAgICAgICAgICA8aW1nIGNsYXNzTmFtZT1cImhvbWUtLWNhdGVnb3J5LWNhcm91c2VsLS1pdGVtLS1pbWdcIiBhbHQ9XCJcIiBzcmM9XCJodHRwczovLzY2Lm1lZGlhLnR1bWJsci5jb20vZDM3MTIwOWVjOWU2MzIwYTI2YmYzNWM2YzViZTY4NTcvdHVtYmxyX3BxdDh6ZzdQdG4xd3liMmw4bzhfMjUwLmpwZ1wiPjwvaW1nPlxuICAgICAgICAgIDxwIGNsYXNzTmFtZT1cImhvbWUtLWNhdGVnb3J5LWNhcm91c2VsLS1pdGVtLS10aXRsZVwiPlRPUFM8L3A+XG4gICAgICAgIDwvYT5cbiAgICAgIDwvbGk+XG5cbiAgICAgIDxsaSBjbGFzc05hbWU9XCJob21lLS1jYXRlZ29yeS1jYXJvdXNlbC0taXRlbVwiPlxuICAgICAgICA8YSBocmVmPVwiXCI+XG4gICAgICAgICAgPGltZyBjbGFzc05hbWU9XCJob21lLS1jYXRlZ29yeS1jYXJvdXNlbC0taXRlbS0taW1nXCIgYWx0PVwiXCIgc3JjPVwiaHR0cHM6Ly82Ni5tZWRpYS50dW1ibHIuY29tL2NjZDdmNmViZDgwYjc2YjM0NGFhMzNkMDYyNjQ3MTVhL3R1bWJscl9wcXQ4emc3UHRuMXd5YjJsOG85XzI1MC5qcGdcIj48L2ltZz5cbiAgICAgICAgICA8cCBjbGFzc05hbWU9XCJob21lLS1jYXRlZ29yeS1jYXJvdXNlbC0taXRlbS0tdGl0bGVcIj5TS0lSVFM8L3A+XG4gICAgICAgIDwvYT5cbiAgICAgIDwvbGk+XG5cbiAgICAgIDxsaSBjbGFzc05hbWU9XCJob21lLS1jYXRlZ29yeS1jYXJvdXNlbC0taXRlbVwiPlxuICAgICAgICA8YSBocmVmPVwiXCI+XG4gICAgICAgICAgPGltZyBjbGFzc05hbWU9XCJob21lLS1jYXRlZ29yeS1jYXJvdXNlbC0taXRlbS0taW1nXCIgYWx0PVwiXCIgc3JjPVwiaHR0cHM6Ly82Ni5tZWRpYS50dW1ibHIuY29tL2M4OWQwOTdmNDYxODllODZhMGU2NTI4YzlkY2M3MTM0L3R1bWJscl9wcXQ4emc3UHRuMXd5YjJsOG81XzI1MC5qcGdcIj48L2ltZz5cbiAgICAgICAgICA8cCBjbGFzc05hbWU9XCJob21lLS1jYXRlZ29yeS1jYXJvdXNlbC0taXRlbS0tdGl0bGVcIj5TV0lNV0VBUjwvcD5cbiAgICAgICAgPC9hPlxuICAgICAgPC9saT5cblxuICAgICAgPGxpIGNsYXNzTmFtZT1cImhvbWUtLWNhdGVnb3J5LWNhcm91c2VsLS1pdGVtXCI+XG4gICAgICAgIDxhIGhyZWY9XCJcIj5cbiAgICAgICAgICA8aW1nIGNsYXNzTmFtZT1cImhvbWUtLWNhdGVnb3J5LWNhcm91c2VsLS1pdGVtLS1pbWdcIiBhbHQ9XCJcIiBzcmM9XCJodHRwczovLzY2Lm1lZGlhLnR1bWJsci5jb20vMDU5ZGMzZjZkM2UxMWVmNGZkNjYzOGE5MjI1Yjk1OWUvdHVtYmxyX3BxdDh6ZzdQdG4xd3liMmw4bzZfMjUwLmpwZ1wiPjwvaW1nPlxuICAgICAgICAgIDxwIGNsYXNzTmFtZT1cImhvbWUtLWNhdGVnb3J5LWNhcm91c2VsLS1pdGVtLS10aXRsZVwiPk1BVEVSTklUWTwvcD5cbiAgICAgICAgPC9hPlxuICAgICAgPC9saT5cblxuICAgICAgPGxpIGNsYXNzTmFtZT1cImhvbWUtLWNhdGVnb3J5LWNhcm91c2VsLS1pdGVtXCI+XG4gICAgICAgIDxhIGhyZWY9XCJcIj5cbiAgICAgICAgICA8aW1nIGNsYXNzTmFtZT1cImhvbWUtLWNhdGVnb3J5LWNhcm91c2VsLS1pdGVtLS1pbWdcIiBhbHQ9XCJcIiBzcmM9XCJodHRwczovLzY2Lm1lZGlhLnR1bWJsci5jb20vZTQ1Y2ZlNWY5ODFjMGU1MWIwMGM4Njc4MzhmZDUyMDQvdHVtYmxyX3BxdDh6ZzdQdG4xd3liMmw4bzdfMjUwLmpwZ1wiPjwvaW1nPlxuICAgICAgICAgIDxwIGNsYXNzTmFtZT1cImhvbWUtLWNhdGVnb3J5LWNhcm91c2VsLS1pdGVtLS10aXRsZVwiPlBFVElURTwvcD5cbiAgICAgICAgPC9hPlxuICAgICAgPC9saT5cblxuICAgICAgPGxpIGNsYXNzTmFtZT1cImhvbWUtLWNhdGVnb3J5LWNhcm91c2VsLS1pdGVtXCI+XG4gICAgICAgIDxhIGhyZWY9XCJcIj5cbiAgICAgICAgICA8aW1nIGNsYXNzTmFtZT1cImhvbWUtLWNhdGVnb3J5LWNhcm91c2VsLS1pdGVtLS1pbWdcIiBhbHQ9XCJcIiBzcmM9XCJodHRwczovLzY2Lm1lZGlhLnR1bWJsci5jb20vZDg2MTQ4MTVjMDE2NDgyMTcyODZmYWFkMmFhNTc5NzEvdHVtYmxyX3BxdDh6ZzdQdG4xd3liMmw4bzNfMjUwLmpwZ1wiPjwvaW1nPlxuICAgICAgICAgIDxwIGNsYXNzTmFtZT1cImhvbWUtLWNhdGVnb3J5LWNhcm91c2VsLS1pdGVtLS10aXRsZVwiPlRBTEw8L3A+XG4gICAgICAgIDwvYT5cbiAgICAgIDwvbGk+XG4gICAgPC91bD5cbiAgICA8c2VjdGlvbiBjbGFzc05hbWU9XCJob21lLS1iYW5uZXJcIiA+XG4gICAgICA8YSBocmVmPVwiXCI+XG4gICAgICAgIDxpbWcgY2xhc3NOYW1lPVwiaG9tZS0tYmFubmVyLS1pbWdcIiBhbHQ9XCJcIiBzcmM9XCJodHRwczovLzY2Lm1lZGlhLnR1bWJsci5jb20vMzZiMmJkMzlkY2NhOWRjZmNlYTM1NjI3OWIxMmRiNjIvdHVtYmxyX3BxdDlhMzR5czQxd3liMmw4bzFfMTI4MC5qcGdcIj48L2ltZz5cbiAgICAgIDwvYT5cbiAgICA8L3NlY3Rpb24+XG4gIDwvc2VjdGlvbj5cbik7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IEhvbWVCYW5uZXIgZnJvbSAnLi9ob21lX2Jhbm5lcic7XG5pbXBvcnQgSG9tZUZlYXR1cmUgZnJvbSAnLi9ob21lX2ZlYXR1cmUnO1xuaW1wb3J0IFN0eWxlRmVlZENhcm91c2VsIGZyb20gJy4vc3R5bGVfZmVlZF9jYXJvdXNlbCc7XG5pbXBvcnQgU2Vhc29uYWxGZWF0dXJlIGZyb20gJy4vc2Vhc29uYWxfZmVhdHVyZSc7XG5pbXBvcnQgQ2F0ZWdvcnlDYXJvdXNlbCBmcm9tICcuL2NhdGVnb3J5X2Nhcm91c2VsJztcblxuXG5cbmV4cG9ydCBkZWZhdWx0ICgpID0+IChcbiAgPGRpdiBjbGFzc05hbWU9XCJob21lXCI+XG4gICAgPEhvbWVCYW5uZXIgLz5cbiAgICA8SG9tZUZlYXR1cmUgLz5cbiAgICA8U3R5bGVGZWVkQ2Fyb3VzZWwgLz5cbiAgICA8U2Vhc29uYWxGZWF0dXJlIC8+XG4gICAgPENhdGVnb3J5Q2Fyb3VzZWwgLz5cbiAgPC9kaXY+XG4pOyIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmV4cG9ydCBkZWZhdWx0ICgpID0+IChcbiAgPHNlY3Rpb24gY2xhc3NOYW1lPVwiZWNvbS1iYXJcIiA+XG4gICAgPHVsIGNsYXNzTmFtZT1cImVjb20tLWxpc3RcIj5cbiAgICAgIDxsaSBjbGFzc05hbWU9XCJlY29tLWxpc3QtLWl0ZW1cIj5NYXJrZXRwbGFjZTwvbGk+XG4gICAgICA8bGkgY2xhc3NOYW1lPVwiZWNvbS1saXN0LS1pdGVtXCI+SGVscCAmIEZBUXM8L2xpPlxuICAgICAgPGxpIGNsYXNzTmFtZT1cImVjb20tbGlzdC0taXRlbS1pbWdcIj48aW1nIGNsYXNzTmFtZT1cInNoaXBwaW5nLS1pY29uXCIgc3JjPVwiaHR0cHM6Ly9hc3NldHMuYXNvc3NlcnZpY2VzLmNvbS9zdG9yZXNhL2ltYWdlcy9mbGFncy91cy5wbmdcIiBhbHQ9XCJVbml0ZWQgU3RhdGVzXCI+PC9pbWc+PC9saT4gICAgICBcbiAgICA8L3VsPlxuICA8L3NlY3Rpb24+XG4pOyIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBMaW5rIH0gZnJvbSAncmVhY3Qtcm91dGVyLWRvbSc7XG5cbmNsYXNzIFRvb2xiYXIgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcblxuICAgIGNvbnN0IGRpc3BsYXkgPSB0aGlzLnByb3BzLmN1cnJlbnRVc2VyID8gKFxuICAgICAgPHNlY3Rpb24gY2xhc3NOYW1lPVwiYWNjb3VudC1kcm9wZG93blwiPlxuICAgICAgICA8dWwgY2xhc3NOYW1lPVwiYWNjb3VudC1kcm9wZG93bi0tYXV0aFwiPlxuICAgICAgICAgIDxwIGNsYXNzTmFtZT1cImFjY291bnQtZHJvcGRvd24tLWF1dGgtLXVzZXJcIj57YEhlbGxvICR7dGhpcy5wcm9wcy5jdXJyZW50VXNlci5maXJzdF9uYW1lfWB9PC9wPlxuICAgICAgICAgIDxidXR0b24gY2xhc3NOYW1lPVwiYWNjb3VudC1kcm9wZG93bi0tYXV0aC0tbG9nb3V0XCIgb25DbGljaz17dGhpcy5wcm9wcy5sb2dvdXR9PkxvZyBPdXQhPC9idXR0b24+XG4gICAgICAgIDwvdWw+XG4gICAgICAgIDx1bCBjbGFzc05hbWU9XCJhY2NvdW50LWRyb3Bkb3duLS1vcHRpb25zXCI+XG4gICAgICAgICAgPHAgY2xhc3MtbmFtZT1cImFjY291bnQtZHJvcGRvd24tLW9wdGlvblwiPk15IEFjY291bnQ8L3A+XG4gICAgICAgICAgPGEgaHJlZj17YCMvb3JkZXJzLyR7dGhpcy5wcm9wcy5vcmRlcnMuaWR9YH0gPjxwIGNsYXNzLW5hbWU9XCJhY2NvdW50LWRyb3Bkb3duLS1vcHRpb25cIj5NeSBPcmRlcnM8L3A+PC9hPlxuICAgICAgICAgIDxwIGNsYXNzLW5hbWU9XCJhY2NvdW50LWRyb3Bkb3duLS1vcHRpb25cIj5SZXR1cm5zIEluZm9ybWF0aW9uPC9wPlxuICAgICAgICAgIDxwIGNsYXNzLW5hbWU9XCJhY2NvdW50LWRyb3Bkb3duLS1vcHRpb25cIj5Db250YWN0IFByZWZlcmVuY2VzPC9wPlxuICAgICAgICA8L3VsPlxuICAgICAgPC9zZWN0aW9uPlxuICAgICkgOiAoXG4gICAgICAgIDxzZWN0aW9uIGNsYXNzTmFtZT1cImFjY291bnQtZHJvcGRvd25cIj5cbiAgICAgICAgICA8dWwgY2xhc3NOYW1lPVwiYWNjb3VudC1kcm9wZG93bi0tYXV0aFwiPlxuICAgICAgICAgICAgPHAgY2xhc3NOYW1lPVwiYWNjb3VudC1kcm9wZG93bi0tYXV0aC0tYXV0aC1saW5rc1wiPjxMaW5rIHRvPVwiL3NpZ251cFwiPlNpZ24gVXA8L0xpbms+PC9wPlxuICAgICAgICAgICAgPHAgY2xhc3NOYW1lPVwiYWNjb3VudC1kcm9wZG93bi0tYXV0aC0tYXV0aC1saW5rc1wiPjxMaW5rIHRvPVwiL2xvZ2luXCI+TG9nIEluPC9MaW5rPjwvcD5cbiAgICAgICAgICA8L3VsPlxuICAgICAgICAgIDx1bCBjbGFzc05hbWU9XCJhY2NvdW50LWRyb3Bkb3duLS1vcHRpb25zXCI+XG4gICAgICAgICAgICA8cCBjbGFzc05hbWU9XCJhY2NvdW50LWRyb3Bkb3duLS1vcHRpb25cIj5NeSBBY2NvdW50PC9wPlxuICAgICAgICAgICAgPHAgY2xhc3NOYW1lPVwiYWNjb3VudC1kcm9wZG93bi0tb3B0aW9uXCI+TXkgT3JkZXJzPC9wPlxuICAgICAgICAgICAgPHAgY2xhc3NOYW1lPVwiYWNjb3VudC1kcm9wZG93bi0tb3B0aW9uXCI+UmV0dXJucyBJbmZvcm1hdGlvbjwvcD5cbiAgICAgICAgICAgIDxwIGNsYXNzTmFtZT1cImFjY291bnQtZHJvcGRvd24tLW9wdGlvblwiPkNvbnRhY3QgUHJlZmVyZW5jZXM8L3A+XG4gICAgICAgICAgPC91bD5cbiAgICAgICAgPC9zZWN0aW9uPlxuICAgICk7XG4gICAgXG4gICAgLy8gY29uc3QgYmFnRGlzcGxheSA9IChcbiAgICAvLyAgIDxzZWN0aW9uIGNsYXNzTmFtZT1cImJhZy1kcm9wZG93blwiPlxuICAgIC8vICAgICA8dWwgY2xhc3NOYW1lPVwiYmFnLWRyb3Bkb3duLS1pdGVtc1wiPlxuICAgIC8vICAgICAgIDx1bCBjbGFzc05hbWU9XCJiYWctaGVhZGVyXCI+XG4gICAgLy8gICAgICAgICA8aDMgY2xhc3NOYW1lPVwiYmFnLWhlYWRlci10ZXh0XCI+TXkgQ2FydDwvaDM+XG4gICAgLy8gICAgICAgPC91bD5cbiAgICAvLyAgICAgICA8c2VjdGlvbiBjbGFzc05hbWU9XCJiYWctaW5kZXhcIj5cbiAgICAvLyAgICAgICAgIDx1bCBjbGFzc05hbWU9XCJiYWctaW5kZXgtaXRlbXNcIj5cbiAgICAvLyAgICAgICAgICAgPGxpPjwvbGk+XG4gICAgLy8gICAgICAgICA8L3VsPlxuICAgIC8vICAgICAgIDwvc2VjdGlvbj5cbiAgICAvLyAgICAgICA8c2VjdGlvbiBjbGFzc05hbWU9XCJiYWQtc3VidG90YWwtd3JhcHBlclwiPlxuICAgIC8vICAgICAgICAgPHVsIGNsYXNzTmFtZT1cImJhZy1zdWJ0b3RhbC1pdGVtc1wiPlxuICAgIC8vICAgICAgICAgICA8cCBjbGFzc05hbWU9XCJcIj48L3A+XG4gICAgLy8gICAgICAgICA8L3VsPlxuICAgIC8vICAgICAgIDwvc2VjdGlvbj5cbiAgICAvLyAgICAgPC91bD5cbiAgICAvLyAgIDwvc2VjdGlvbj5cbiAgICAvLyApXG5cbiAgICByZXR1cm4gKFxuICAgICAgPHNlY3Rpb24gY2xhc3NOYW1lPVwidG9vbGJhclwiID5cbiAgICAgICAgPHVsIGNsYXNzTmFtZT1cInRvb2xiYXItLWJ1c2luZXNzXCI+XG4gICAgICAgICAgPGEgY2xhc3MtbmFtZT1cImF1dGgtLWxvZ29cIiBocmVmPVwiIy9cIj48c3ZnIGNsYXNzTmFtZT1cInRvb2xiYXItLWJ1c2luZXNzLS1sb2dvXCIgd2lkdGg9XCIxMDRcIiBoZWlnaHQ9XCIzMFwiIHZpZXdCb3g9XCIwIDAgMTA0IDMwXCIgcm9sZT1cImltZ1wiIGFyaWEtbGFiZWxsZWRieT1cImhvbWUtbG9nb1wiPjx0aXRsZSBpZD1cImhvbWUtbG9nb1wiPkFTT1MgbG9nbywgYmFjayB0byB0aGUgSG9tZSBQYWdlPC90aXRsZT48cGF0aCBmaWxsPVwiI0ZGRlwiIGZpbGxSdWxlPVwiZXZlbm9kZFwiIGQ9XCJNNzEuODMgMjEuOTgzYy0xLjU1OCAxLjY2Ni0zLjU2IDIuNTEtNS45NSAyLjUxLTIuMzg3IDAtNC4zOS0uODQ0LTUuOTQ3LTIuNTEtMS40ODgtMS41ODctMi4zNDMtNC4xMjQtMi4zNDMtNi45NiAwLTIuNzY2Ljg2NC01LjI3IDIuMzctNi44NjcgMS41NzItMS42NjcgMy41NjUtMi41MTYgNS45Mi0yLjUyMyAyLjM2LjAwNyA0LjM1Ljg1NiA1LjkyNCAyLjUyMyAxLjUwNiAxLjU5OCAyLjM3IDQuMSAyLjM3IDYuODY3IDAgMi44MzYtLjg1NSA1LjM3My0yLjM0MyA2Ljk2em0tMjAuOTE1LTYuOTZjMCAuMTI4LjAwNS4yNTUuMDA4LjM4LTIuMzktMi4xNjYtNS44NDUtMi45NzQtNy45NTctMy4zOTQtMy45MDctLjgyLTYuODktMS41OC02Ljg5LTQuMzUgMC0xLjk2IDEuNzU3LTMuMzggNS4xMzItMy4xNCAzLjA4NS4yMjQgNC4zODQgMi4xMDIgNC43NCAzLjkxNC4wNS4zLjE5LjUxNS41My41MTdsNS41NDcuMDVjLjAyNiAwIC4wNDgtLjAwMy4wNzItLjAwNC0uNzgzIDEuODE2LTEuMTgyIDMuODQtMS4xODIgNi4wMTV6TTQxLjQ4IDI1LjE5Yy0yLjY4MyAwLTUuNjQtLjk1LTYuMzItNC42MjQtLjA2LS4zNS0uMjI1LS40OTYtLjQ5NS0uNTAzbC01LjM2NC0uMDd2LTkuNDQ2Yy43MSAyLjc2OCAzLjA0IDQuNjg0IDguMDkgNS44MTYgMy4zOC44MDYgOS4yNCAxLjMxOCA5LjI0IDQuNzc0IDAgMi40MDgtMS43OCA0LjExLTUuMTUgNC4wNTR6bS0yNi43MTQtLjY5Yy00LjMyNyAwLTguMjktMy4zOTQtOC4yOS05LjQ3IDAtNC43NyAyLjk3LTkuMzkgOC4zMi05LjM5IDIuMzE1IDAgOC4xODguNzkgOC4xODggOS4zOSAwIDguNjItNi4xMzIgOS40Ny04LjIxOCA5LjQ3em02NS45MjItMTEuNzkyYzEuMjMyIDEuNjM2IDMuNDUzIDIuODQ4IDcuMDYzIDMuNjU3IDMuMzguODA1IDkuMjUgMS4zMTggOS4yNSA0Ljc3NSAwIDIuNDAzLTEuNzggNC4xMS01LjE1IDQuMDUtMi42OCAwLTUuNjQtLjk1LTYuMzItNC42MjUtLjA1Mi0uMzUtLjIyLS40OTctLjQ5LS41MDRMODAuMDYgMjBjLjUyMy0xLjU0Ljc5LTMuMjEuNzktNC45NzQgMC0uNzkzLS4wNTYtMS41NjYtLjE2LTIuMzE3ek05MS40NzQgMzBjNS45NSAwIDEyLjk2NS0yLjIwOCAxMi40MTYtOS4zNjYtLjYwNi02LjM1NS03LjI0NC03Ljk2NC0xMC41NjItOC42MjUtMy45MDctLjgyLTYuODkyLTEuNTgtNi44OTItNC4zNSAwLTEuOTYgMS43NTgtMy4zOCA1LjEzNC0zLjE0IDMuMDg0LjIyNCA0LjM4NCAyLjEwMiA0Ljc0IDMuOTE0LjA1LjMuMTkuNTE1LjUzLjUxN2w1LjU0Ni4wNDhjLjQyMi4wMDIuNTU0LS4yMTYuNS0uNTE2QzEwMS44IDEuODc0IDk2LjI0NiAwIDkxLjEzMyAwIDg2LjAzIDAgNzkuODggMS40MyA3OS40NDMgNy43NTRjLS4wMTUuMjQ2LS4wMi40ODYtLjAyLjcyMi0uODE0LTEuNjgzLTEuOTg1LTMuMjMtMy40OTUtNC41OTdDNzMuMTQyIDEuMzcgNjkuNjY2LjAzIDY1Ljg3OCAwaC0uMTI3Yy0xLjgxIDAtMy41OC4zMzMtNS4yNi45OWExNS4yNiAxNS4yNiAwIDAgMC00LjY1IDIuODg4Yy0xLjQzIDEuMjk1LTIuNTYgMi43NDctMy4zNiA0LjMyN0M1MS4yNyAxLjgyMiA0NS44MSAwIDQwLjc3IDAgMzYuMDg0IDAgMzAuNTE3IDEuMjA4IDI5LjMgNi4zMDV2LTUuMDZhLjQ5LjQ5IDAgMCAwLS40OS0uNDg4aC01LjIyNGMtLjI3IDAtLjQ5LjIyLS40OS40OVYyLjYxYzAgLjIzLS4xNTUuMzEtLjM0My4xNzUtMS44NTgtMS4zNC00LjYwNy0yLjc4Mi03LjkxNS0yLjc4Mi0xLjg2IDAtMy42MzUuMzI2LTUuMjc3Ljk2OC0xLjY0LjY1LTMuMiAxLjYzLTQuNjQgMi45MkMzLjI5IDUuMzcgMi4wNSA3LjA1IDEuMjMgOC45LjQxNyAxMC43NDIgMCAxMi44MDcgMCAxNS4wMjcgMCAxNy4xLjM2NyAxOS4wNDMgMS4wODggMjAuOGMuNzIyIDEuNzU2IDEuODIgMy4zODIgMy4yNjcgNC44MyAxLjQ0NiAxLjQ1IDMuMDYzIDIuNTUzIDQuODA0IDMuMjc2IDEuNzQuNzIyIDMuNjYgMS4wOSA1LjcgMS4wOSAzLjUxIDAgNi4xNS0xLjQ5MyA3Ljg4LTIuODUuMTktLjE0NC4zNDItLjA2Ny4zNDIuMTd2MS40MzVjMCAuMjcuMjIuNDkuNDkuNDlIMjguOGMuMjcgMCAuNDktLjIyLjQ5LS40OXYtNC44M0MzMS43NjYgMjkuNyAzOC4wNCAzMCA0MS4xMTMgMzBjNS4xMzcgMCAxMS4wNi0xLjY0NyAxMi4yMzQtNi43LjU1LjgxOCAxLjE5MiAxLjU5NyAxLjkyNCAyLjMzIDIuOCAyLjgwNyA2LjQ3IDQuMzE2IDEwLjYyIDQuMzYyaC4xN2MxLjk3IDAgMy44Ny0uMzc3IDUuNjQ4LTEuMTJhMTQuODIgMTQuODIgMCAwIDAgNC43OS0zLjI0MiAxNS4yNSAxNS4yNSAwIDAgMCAyLjU5NC0zLjQzYzEuODYgNy40MzggOS4wMzUgNy44IDEyLjM4NyA3Ljh6XCI+PC9wYXRoPjwvc3ZnPjwvYT4gICAgICAgICAgXG4gICAgICAgICAgPGxpIGNsYXNzTmFtZT1cInRvb2xiYXItLWJ1c2llbnNzLS1pdGVtXCI+V09NRU48L2xpPlxuICAgICAgICAgIDxsaSBjbGFzc05hbWU9XCJ0b29sYmFyLS1idXNpZW5zcy0taXRlbVwiPk1FTjwvbGk+XG4gICAgICAgIDwvdWw+XG4gICAgICAgIDxmb3JtIGNsYXNzTmFtZT1cInRvb2xiYXItLXNlYXJjaFwiPlxuICAgICAgICAgIHsvKiA8aW5wdXQgY2xhc3NOYW1lPVwidG9vbGJhci0tc2VhcmNoLS1pbnB1dFwiIHR5cGU9XCJ0ZXh0XCIgdmFsdWU9XCJzZWFyY2ggdGV4dFwiIC8+ICovfVxuICAgICAgICA8L2Zvcm0+XG4gICAgICAgIDx1bCBjbGFzc05hbWU9XCJ0b29sYmFyLS1wcm9maWxlXCI+XG4gICAgICAgICAgPGxpIGNsYXNzTmFtZT1cInRvb2xiYXItLXByb2ZpbGUtLWljb25zXCI+XG4gICAgICAgICAgICAgIDxidXR0b24gY2xhc3NOYW1lPVwidG9vbGJhci0tcHJvZmlsZS0taWNvbnMtLWljb25cIiBvbkNsaWNrPXt0aGlzLnNob3dNZW51fT48aSBjbGFzc05hbWU9XCJmYSBmYS11c2VyXCIgaWQ9XCJhY2NvdW50LWRyb3Bkb3duLWJ1dHRvblwiPjwvaT48L2J1dHRvbj5cbiAgICAgICAgICAgICAgPGkgY2xhc3NOYW1lPVwiZmEgZmEtaGVhcnRcIiBhcmlhLWhpZGRlbj1cInRydWVcIj48L2k+XG4gICAgICAgICAgICAgIDxpIGNsYXNzTmFtZT1cImZhIGZhLXNob3BwaW5nLWJhZ1wiIGFyaWEtaGlkZGVuPVwidHJ1ZVwiPjwvaT5cbiAgICAgICAgICAgICAgPHA+e3RoaXMucHJvcHMub3JkZXJJdGVtcy5sZW5ndGh9PC9wPlxuICAgICAgICAgIDwvbGk+XG4gICAgICAgICAge2Rpc3BsYXl9XG4gICAgICAgICAgXG4gICAgICAgIDwvdWw+XG4gICAgICA8L3NlY3Rpb24+XG4gICAgKVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFRvb2xiYXI7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgY29ubmVjdCB9IGZyb20gJ3JlYWN0LXJlZHV4JztcbmltcG9ydCBUb29sYmFyIGZyb20gJy4vdG9vbGJhcic7XG5pbXBvcnQgeyBsb2dvdXQgfSBmcm9tICcuLi8uLi9hY3Rpb25zL3Nlc3Npb24nO1xuXG5jb25zdCBtYXBTdGF0ZVRvUHJvcHMgPSBzdGF0ZSA9PiAoe1xuICBjdXJyZW50VXNlcjogc3RhdGUuc2Vzc2lvbi5jdXJyZW50VXNlcixcbiAgb3JkZXJzOiBzdGF0ZS5lbnRpdGllcy5vcmRlcnMsXG4gIG9yZGVySXRlbXM6IHN0YXRlLmVudGl0aWVzLm9yZGVySXRlbXNcbn0pO1xuXG5jb25zdCBtYXBEaXNwYXRjaFRvUHJvcHMgPSBkaXNwYXRjaCA9PiAoe1xuICBsb2dvdXQ6ICgpID0+IGRpc3BhdGNoKGxvZ291dCgpKSxcbn0pO1xuXG5cbmV4cG9ydCBkZWZhdWx0IGNvbm5lY3QobWFwU3RhdGVUb1Byb3BzLCBtYXBEaXNwYXRjaFRvUHJvcHMpKFRvb2xiYXIpO1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcblxuZXhwb3J0IGRlZmF1bHQgKCkgPT4gKFxuICA8c2VjdGlvbiBjbGFzc05hbWU9XCJjYXRlZ29yeS1iYXJcIiA+XG4gICAgPHVsIGNsYXNzTmFtZT1cImNhdGVnb3J5LWJhci0tb3B0aW9uc1wiPlxuICAgICAgPGEgY2xhc3MtbmFtZT1cIlwiIGhyZWY9XCIjL3Byb2R1Y3RzXCI+PGxpIGNsYXNzTmFtZT1cImNhdGVnb3J5LWJhci0tb3B0aW9uXCI+TmV3IEluPC9saT48L2E+XG4gICAgICA8YSBjbGFzcy1uYW1lPVwiXCIgaHJlZj1cIiMvcHJvZHVjdHNcIj48bGkgY2xhc3NOYW1lPVwiY2F0ZWdvcnktYmFyLS1vcHRpb25cIj5DbG90aGluZzwvbGk+PC9hPlxuICAgICAgPGxpIGNsYXNzTmFtZT1cImNhdGVnb3J5LWJhci0tb3B0aW9uXCI+U2hvZXM8L2xpPlxuICAgICAgPGxpIGNsYXNzTmFtZT1cImNhdGVnb3J5LWJhci0tb3B0aW9uXCI+QWNjZXNzb3JpZXM8L2xpPlxuICAgICAgPGxpIGNsYXNzTmFtZT1cImNhdGVnb3J5LWJhci0tb3B0aW9uXCI+QWN0aXZld2VhcjwvbGk+XG4gICAgICA8bGkgY2xhc3NOYW1lPVwiY2F0ZWdvcnktYmFyLS1vcHRpb25cIj5CZWF1dHk8L2xpPlxuICAgICAgPGxpIGNsYXNzTmFtZT1cImNhdGVnb3J5LWJhci0tb3B0aW9uXCI+QnJhbmRzPC9saT5cbiAgICAgIDxsaSBjbGFzc05hbWU9XCJjYXRlZ29yeS1iYXItLWZlYXR1cmVcIj48cD5PdXRsZXQ8L3A+PC9saT5cbiAgICAgIDxsaSBjbGFzc05hbWU9XCJjYXRlZ29yeS1iYXItLW9wdGlvblwiPk1hcmtldHBsYWNlPC9saT5cbiAgICAgIDxsaSBjbGFzc05hbWU9XCJjYXRlZ29yeS1iYXItLW9wdGlvblwiPkluc3BpcmF0aW9uPC9saT5cbiAgICA8L3VsPlxuICA8L3NlY3Rpb24+XG4pOyIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBjb25uZWN0IH0gZnJvbSAncmVhY3QtcmVkdXgnO1xuaW1wb3J0IE5hdkJhciBmcm9tICcuL25hdl9iYXInO1xuaW1wb3J0IHsgbG9nb3V0IH0gZnJvbSAnLi4vLi4vYWN0aW9ucy9zZXNzaW9uJztcblxuY29uc3QgbWFwU3RhdGVUb1Byb3BzID0gc3RhdGUgPT4gKHtcbiAgY3VycmVudFVzZXI6IHN0YXRlLnNlc3Npb24uY3VycmVudFVzZXIsXG59KTtcblxuY29uc3QgbWFwRGlzcGF0Y2hUb1Byb3BzID0gZGlzcGF0Y2ggPT4gKHtcbiAgbG9nb3V0OiAoKSA9PiBkaXNwYXRjaChsb2dvdXQoKSksXG59KTtcblxuXG5leHBvcnQgZGVmYXVsdCBjb25uZWN0KG1hcFN0YXRlVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzKShOYXZCYXIpO1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBFY29tQmFyIGZyb20gJy4vZWNvbV9iYXInO1xuaW1wb3J0IFRvb2xiYXJDb250YWluZXIgZnJvbSAnLi90b29sYmFyX2NvbnRhaW5lcic7XG5pbXBvcnQgQ2F0ZWdvcnlCYXIgZnJvbSAnLi9jYXRlZ29yeV9iYXInO1xuXG5leHBvcnQgZGVmYXVsdCAoKSA9PiB7XG4gIHJldHVybiAoXG4gICAgPHNlY3Rpb24gY2xhc3NOYW1lPVwibmF2LWJhclwiPlxuICAgICAgPEVjb21CYXIgLz5cbiAgICAgIDxUb29sYmFyQ29udGFpbmVyIC8+XG4gICAgICA8Q2F0ZWdvcnlCYXIgLz5cbiAgICA8L3NlY3Rpb24+XG4gICk7XG59OyIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBMaW5rIH0gZnJvbSAncmVhY3Qtcm91dGVyLWRvbSc7XG5cblxuXG5jb25zdCBQcm9kdWN0SW5kZXhJdGVtID0gKHsgcHJvZHVjdCB9KSA9PiB7XG4gIGNvbnN0IGZvcm1hdHRlciA9IG5ldyBJbnRsLk51bWJlckZvcm1hdCgnZW4tVVMnLCB7XG4gICAgc3R5bGU6ICdjdXJyZW5jeScsXG4gICAgY3VycmVuY3k6ICdVU0QnLFxuICAgIG1pbmltdW1GcmFjdGlvbkRpZ2l0czogMlxuICB9KVxuXG4gIHJldHVybiAoXG4gICAgPExpbmsgdG89e2AvcHJvZHVjdHMvJHtwcm9kdWN0LmlkfWB9PlxuICAgICAgPGxpIGNsYXNzTmFtZT1cImxpc3RpbmdzLS1wcm9kdWN0XCI+XG4gICAgICAgIDxpbWcgY2xhc3NOYW1lPVwibGlzdGluZ3MtLXByb2R1Y3QtaW1nXCIgc3JjPXtwcm9kdWN0LnBob3RvVXJsc1swXX0gYWx0PVwiXCI+PC9pbWc+XG4gICAgICAgIHsvKiBodHRwczovL2ZsYXZpb2NvcGVzLmNvbS9ob3ctdG8tZm9ybWF0LW51bWJlci1hcy1jdXJyZW5jeS1qYXZhc2NyaXB0LyAqL31cbiAgICAgICAgPHAgY2xhc3NOYW1lPVwibGlzdGluZ3MtLXByb2R1Y3QtdGl0bGVcIj57cHJvZHVjdC50aXRsZX08L3A+XG4gICAgICAgIDxwIGNsYXNzTmFtZT1cImxpc3RpbmdzLS1wcm9kdWN0LXByaWNlXCI+e2Zvcm1hdHRlci5mb3JtYXQocHJvZHVjdC5wcmljZSl9PC9wPlxuICAgICAgPC9saT5cbiAgICA8L0xpbms+XG4gIClcbn1cblxuZXhwb3J0IGRlZmF1bHQgUHJvZHVjdEluZGV4SXRlbTsiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb2R1Y3RJbmRleEl0ZW0gZnJvbSAnLi9wcm9kdWN0X2luZGV4X2l0ZW0nO1xuaW1wb3J0IHsgTGluayB9IGZyb20gJ3JlYWN0LXJvdXRlci1kb20nO1xuXG5jbGFzcyBQcm9kdWN0c0luZGV4IGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcblxuICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICB0aGlzLnByb3BzLnJlcXVlc3RQcm9kdWN0cygpO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIFxuICAgIGxldCBwcm9kdWN0cyA9IHRoaXMucHJvcHMucHJvZHVjdHMubWFwKHByb2R1Y3QgPT4ge1xuICAgICAgcmV0dXJuIDxQcm9kdWN0SW5kZXhJdGVtIGtleT17cHJvZHVjdC5pZH0gcHJvZHVjdD17cHJvZHVjdH0gLz5cbiAgICB9KVxuXG4gICAgcmV0dXJuIChcbiAgICAgIDxzZWN0aW9uIGNsYXNzTmFtZT1cImxpc3RpbmdzXCI+XG4gICAgICAgIDxzZWN0aW9uIGNsYXNzTmFtZT1cImxpc3RpbmdzLS1jYXRlZ29yeS1iYW5uZXJcIj5cbiAgICAgICAgICA8aDIgY2xhc3NOYW1lPVwibGlzdGluZ3MtLWNhdGVnb3J5LWJhbm5lci0tdGV4dFwiPnsnYnJlYWRjcnVtYiBsYXN0IGl0ZW0nfTwvaDI+XG4gICAgICAgIDwvc2VjdGlvbj5cblxuICAgICAgICA8c2VjdGlvbiBjbGFzc05hbWU9XCJsaXN0aW5ncy0td3JhcHBlclwiPlxuICAgICAgICAgIDxzZWN0aW9uIGNsYXNzTmFtZT1cImxpc3RpbmdzLS1maWx0ZXJzLXdyYXBwZXJcIj5cbiAgICAgICAgICAgIDx1bCBjbGFzc05hbWU9XCJsaXN0aW5ncy0tZmlsdGVyc1wiPlxuICAgICAgICAgICAgICA8dWwgY2xhc3NOYW1lPVwibGlzdGluZ3MtLWZpbHRlci0taXRlbVwiPlxuICAgICAgICAgICAgICAgIDxsaSBjbGFzc05hbWU9XCJsaXN0aW5ncy0tZmlsdGVycy0taXRlbS0tb3B0aW9uc1wiPjwvbGk+XG4gICAgICAgICAgICAgIDwvdWw+XG4gICAgICAgICAgICA8L3VsPlxuICAgICAgICAgIDwvc2VjdGlvbj5cblxuICAgICAgICAgIDxzZWN0aW9uIGNsYXNzTmFtZT1cImxpc3RpbmdzLS13cmFwcGVyLS1ncmlkLXdyYXBwZXJcIj5cbiAgICAgICAgICAgIDxzZWN0aW9uIGNsYXNzTmFtZT1cImxpc3RpbmdzLS1jb3VudFwiPlxuICAgICAgICAgICAgICA8aDM+eyd0aGlzIGlzIGEgc3R5bGUgY291bnQgaG9sZGVyJ308L2gzPlxuICAgICAgICAgICAgPC9zZWN0aW9uPlxuICAgICAgICAgICAgPHVsIGNsYXNzTmFtZT1cImxpc3RpbmdzLS1wcm9kdWN0c1wiPlxuICAgICAgICAgICAgICB7cHJvZHVjdHN9XG4gICAgICAgICAgICA8L3VsPlxuICAgICAgICAgICAgPHNlY3Rpb24gY2xhc3NOYW1lPVwibGlzdGluZ3MtLXZpZXdlZFwiPlxuICAgICAgICAgICAgICA8aDM+eyd0aGlzIGlzIGEgdmlld2VkIGNvdW50IGhvbGRlcid9PC9oMz5cbiAgICAgICAgICAgIDwvc2VjdGlvbj5cbiAgICAgICAgICAgIDxzZWN0aW9uIGNsYXNzTmFtZT1cImxpc3RpbmdzLS1sb2FkLW1vcmVcIj5cbiAgICAgICAgICAgICAgPGgzPnsnbG9hZCBtb3JlJ308L2gzPlxuICAgICAgICAgICAgPC9zZWN0aW9uPlxuICAgICAgICAgIDwvc2VjdGlvbj5cbiAgICAgICAgPC9zZWN0aW9uPlxuICAgICAgPC9zZWN0aW9uPlxuICAgICk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgUHJvZHVjdHNJbmRleDtcbiIsImltcG9ydCB7IGNvbm5lY3QgfSBmcm9tICdyZWFjdC1yZWR1eCc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgcmVxdWVzdFByb2R1Y3RzIH0gZnJvbSAnLi4vLi4vYWN0aW9ucy9wcm9kdWN0cyc7XG5pbXBvcnQgUHJvZHVjdHNJbmRleCBmcm9tICcuL3Byb2R1Y3RfaW5kZXgnO1xuXG5jb25zdCBtYXBTdGF0ZVRvUHJvcHMgPSAoeyBlbnRpdGllcyB9KSA9PiB7XG4gIHJldHVybiB7XG4gICAgcHJvZHVjdHM6IE9iamVjdC52YWx1ZXMoZW50aXRpZXMucHJvZHVjdHMpXG4gIH1cbn1cblxuY29uc3QgbWFwRGlzcGF0Y2hUb1Byb3BzID0gZGlzcGF0Y2ggPT4ge1xuICByZXR1cm4geyBcbiAgICByZXF1ZXN0UHJvZHVjdHM6ICgpID0+IGRpc3BhdGNoKHJlcXVlc3RQcm9kdWN0cygpKSxcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBjb25uZWN0KG1hcFN0YXRlVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzKShQcm9kdWN0c0luZGV4KTsiLCJleHBvcnQgY29uc3Qgc2VsZWN0U2l6ZUF2YWlsYWJpbGl0eSA9ICh7IGVudGl0aWVzIH0pID0+IHtcbiAgbGV0IGl0ZW1zID0gT2JqZWN0LnZhbHVlcyhlbnRpdGllc1tcInByb2R1Y3RJdGVtc1wiXSk7XG4gIGxldCBzaXplQXZhaWxhYmlsaXR5ID0ge307XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBpdGVtcy5sZW5ndGg7IGkrKykge1xuICAgIGxldCBzeiA9IGl0ZW1zW2Ake2l9YF0uc2l6ZTtcbiAgICBpZiAoc2l6ZUF2YWlsYWJpbGl0eVtgJHtpfWBdID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHNpemVBdmFpbGFiaWxpdHlbYCR7c3p9YF0gPSAwO1xuICAgIH1cbiAgICBcbiAgICBpZiAoaXRlbXNbYCR7aX1gXS5zdGF0ZSA9PT0gXCJBdmFpbGFibGVcIikge1xuICAgICAgc2l6ZUF2YWlsYWJpbGl0eVtgJHtzen1gXSArPSAxO1xuICAgIH1cbiAgfVxuICByZXR1cm4gc2l6ZUF2YWlsYWJpbGl0eTtcbn1cblxuZXhwb3J0IGNvbnN0IHNlbGVjdFN1YlRvdGFsID0gKHsgZW50aXRpZXMgfSkgPT4ge1xuIFxuICBsZXQgaXRlbXMgPSBPYmplY3QudmFsdWVzKGVudGl0aWVzW1wib3JkZXJJdGVtc1wiXSk7XG4gIGxldCBzdWJUb3RhbCA9IDA7XG5cbiAgaWYgKGl0ZW1zLmxlbmd0aCA+IDApIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGl0ZW1zLmxlbmd0aDsgaSsrKSB7XG4gICAgICBsZXQgcHJpY2UgPSBwYXJzZUludChpdGVtc1tgJHtpfWBdLnVuaXRQcmljZSlcbiAgICAgIHN1YlRvdGFsICs9IHByaWNlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBzdWJUb3RhbDtcbn1cblxuZXhwb3J0IGNvbnN0IHNlbGVjdE9yZGVyUHJvZHVjdEl0ZW1JZCA9IChwcm9kdWN0X2l0ZW1zLCBzaXplKSA9PiB7XG4gIGxldCBpdGVtcyA9IE9iamVjdC52YWx1ZXMocHJvZHVjdF9pdGVtcyk7XG5cbiAgbGV0IGZpbHRlcmVkID0gaXRlbXMuZmlsdGVyKGZ1bmN0aW9uICh4KSB7XG4gICAgcmV0dXJuIHguc2l6ZSA9PT0gc2l6ZSAmJiB4LnN0YXRlID09PSBcIkF2YWlsYWJsZVwiO1xuICB9KTtcblxuICBpZiAoZmlsdGVyZWQubGVuZ3RoID4gMCkge1xuICAgIHJldHVybiBwYXJzZUludChmaWx0ZXJlZFswXS5pZClcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gdW5kZWZpbmVkXG4gIH1cbn1cblxuZXhwb3J0IGNvbnN0IHNlbGVjdE9yZGVySXRlbUxpc3RpbmdzID0gKG9yZGVySXRlbXMsIHByb2R1Y3RzLCBwcm9kdWN0SXRlbXMpID0+IHtcbiAgbGV0IGFycmF5ID0gT2JqZWN0LmVudHJpZXMob3JkZXJJdGVtcylcbiAgbGV0IHJlc3VsdCA9IFtdO1xuICBpZiAoYXJyYXkubGVuZ3RoID4gMCkge1xuICAgIHJlc3VsdCA9IGFycmF5Lm1hcCgob3JkZXJJdGVtKSA9PiB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBpZDogb3JkZXJJdGVtWzFdLmlkLFxuICAgICAgICBwcmljZTogb3JkZXJJdGVtWzFdLnVuaXRQcmljZSxcbiAgICAgICAgYnJhbmQ6IFwic29tZVwiLFxuICAgICAgICBjb2xvcjogXCJzb21lXCIsXG4gICAgICAgIHNpemU6IHByb2R1Y3RJdGVtc1tvcmRlckl0ZW1bMV0ucHJvZHVjdF9pdGVtX2lkXS5zaXplLFxuICAgICAgICBzaG9ydFRpdGxlOiBwcm9kdWN0c1twcm9kdWN0SXRlbXNbb3JkZXJJdGVtWzFdLnByb2R1Y3RfaXRlbV9pZF0ucHJvZHVjdF9pZF0udGl0bGUsXG4gICAgICAgIHBob3Rvc1VybDogcHJvZHVjdHNbcHJvZHVjdEl0ZW1zW29yZGVySXRlbVsxXS5wcm9kdWN0X2l0ZW1faWRdLnByb2R1Y3RfaWRdLnBob3RvVXJsc1swXVxuICAgICAgfVxuICAgIH0pXG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgTGluayB9IGZyb20gJ3JlYWN0LXJvdXRlci1kb20nO1xuaW1wb3J0IHsgc2VsZWN0T3JkZXJQcm9kdWN0SXRlbUlkIH0gZnJvbSAnLi4vLi4vcmVkdWNlcnMvc2VsZWN0b3JzJztcblxuY2xhc3MgUHJvZHVjdFNob3cgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcblxuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICBwcm9kdWN0SWQ6IHRoaXMucHJvcHMubWF0Y2gucGFyYW1zLnByb2R1Y3RJZCxcbiAgICAgIHNpemU6ICcnLFxuICAgIH07XG4gICAgXG4gICAgdGhpcy5oYW5kbGVTdWJtaXQgPSB0aGlzLmhhbmRsZVN1Ym1pdC5iaW5kKHRoaXMpO1xuICB9XG5cbiAgY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgbGV0IHByb2R1Y3RJZCA9IHRoaXMucHJvcHMubWF0Y2gucGFyYW1zLnByb2R1Y3RJZDtcbiAgICB0aGlzLnByb3BzLnJlcXVlc3RQcm9kdWN0KHByb2R1Y3RJZCk7XG5cbiAgfVxuXG4gIGhhbmRsZUlucHV0KHR5cGUpIHtcbiAgICByZXR1cm4gKGUpID0+IHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoeyBbdHlwZV06IGUudGFyZ2V0LnZhbHVlIH0pXG4gICAgfTtcbiAgfVxuXG4gIGhhbmRsZVN1Ym1pdChlKSB7XG5cbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgbGV0IHByb2R1Y3RfaXRlbV9pZCA9IHNlbGVjdE9yZGVyUHJvZHVjdEl0ZW1JZCh0aGlzLnByb3BzLnByb2R1Y3RJdGVtcywgdGhpcy5zdGF0ZS5zaXplKTtcbiAgICBsZXQgcHJvZHVjdEl0ZW0gPSB7XG4gICAgICBpZDogcHJvZHVjdF9pdGVtX2lkLFxuICAgICAgcHJvZHVjdF9pZDogdGhpcy5zdGF0ZS5wcm9kdWN0SWQsXG4gICAgICBzaXplOiB0aGlzLnN0YXRlLnNpemUsXG4gICAgICBzdGF0ZTogJ3BlbmRpbmdfb3JkZXInXG4gICAgfTtcbiAgICBsZXQgb3JkZXJJdGVtID0geyBwcm9kdWN0X2l0ZW1faWQ6IHByb2R1Y3RfaXRlbV9pZCwgb3JkZXJfaWQ6IHBhcnNlSW50KHRoaXMucHJvcHMub3JkZXJzLmlkKSB9O1xuICAgIGxldCB1c2VyID0gdGhpcy5wcm9wcy5jdXJyZW50VXNlcjtcbiAgICB0aGlzLnByb3BzLmNyZWF0ZU9yZGVySXRlbSh1c2VyLCBvcmRlckl0ZW0pO1xuICAgIHRoaXMucHJvcHMudXBkYXRlUHJvZHVjdEl0ZW0ocHJvZHVjdEl0ZW0pOyAgXG4gIH1cblxuICByZW5kZXIgKCkge1xuICAgIGNvbnNvbGUubG9nKFwicmVuZGVyaW5nXCIpXG4gICAgY29uc3QgeyBwcm9kdWN0IH0gPSB0aGlzLnByb3BzO1xuICAgIGlmIChwcm9kdWN0ID09PSB1bmRlZmluZWQpIHtyZXR1cm4gbnVsbH1cbiAgICBcbiAgICBjb25zdCBmb3JtYXR0ZXIgPSBuZXcgSW50bC5OdW1iZXJGb3JtYXQoJ2VuLVVTJywge1xuICAgICAgc3R5bGU6ICdjdXJyZW5jeScsXG4gICAgICBjdXJyZW5jeTogJ1VTRCcsXG4gICAgICBtaW5pbXVtRnJhY3Rpb25EaWdpdHM6IDJcbiAgICB9KVxuXG5cbiAgICBjb25zdCBzaXplT3B0aW9ucyA9IChcbiAgICAgIHRoaXMucHJvcHMuc2VsZWN0ZWRTaXplcy5tYXAoKGVsKSA9PiB7XG4gICAgICAgIGlmIChlbFsxXSA+IDApICB7XG4gICAgICAgICAgcmV0dXJuIDxvcHRpb24ga2V5PXtlbH0gY2xhc3NOYW1lPVwic2l6ZS0tYXZhaWxhYmxlXCI+e2VsWzBdfTwvb3B0aW9uPlxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiA8b3B0aW9uIGtleT17ZWx9IGNsYXNzTmFtZT1cInNpemUtLW5vdC1hdmFpbGFibGVcIiBkaXNhYmxlZD57ZWxbMF19PC9vcHRpb24+XG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgKVxuXG4gICAgY29uc3QgcGhvdG9BcmVhID0gKFxuICAgICAgPHNlY3Rpb24gY2xhc3NOYW1lPVwicHJvZHVjdC1zaG93LS1waG90b3Mtd3JhcHBlclwiPiBcbiAgICAgICAgPHNlY3Rpb24gY2xhc3NOYW1lPVwicHJvZHVjdC1zaG93LS1waG90b3MtYXNpZGUtd3JhcHBlclwiPlxuICAgICAgICAgIDx1bCBjbGFzc05hbWU9XCJwcm9kdWN0LXNob3ctLWFzaWRlLS1waG90b3NcIj5cbiAgICAgICAgICAgIDxsaSBjbGFzc05hbWU9XCJwcm9kdWN0LXNob3ctLXBob3Rvcy0taXRlbVwiPlxuICAgICAgICAgICAgICA8aW1nIGNsYXNzTmFtZT1cImxpc3RpbmdzLS1wcm9kdWN0LS1zaG93LS1pbWdcIiBzcmM9e3Byb2R1Y3QucGhvdG9VcmxzWzBdfSBhbHQ9XCJcIj48L2ltZz5cbiAgICAgICAgICAgIDwvbGkgPlxuICAgICAgICAgICAgPGxpIGNsYXNzTmFtZT1cInByb2R1Y3Qtc2hvdy0tcGhvdG9zLS1pdGVtXCI+XG4gICAgICAgICAgICAgIDxpbWcgY2xhc3NOYW1lPVwibGlzdGluZ3MtLXByb2R1Y3QtLXNob3ctLWltZ1wiIHNyYz17cHJvZHVjdC5waG90b1VybHNbMV19IGFsdD1cIlwiPjwvaW1nPlxuICAgICAgICAgICAgPC9saSA+XG4gICAgICAgICAgPC91bD5cbiAgICAgICAgICA8aW1nIGNsYXNzTmFtZT1cInByb2R1Y3Qtc2hvdy0tcGhvdG9zLS1zb2NpYWxcIj48L2ltZz5cbiAgICAgICAgPC9zZWN0aW9uPlxuXG4gICAgICAgIDxzZWN0aW9uIGNsYXNzTmFtZT1cInByb2R1Y3Qtc2hvdy0tcGhvdG8tY2Fyb3VzZWwtd3JhcHBlclwiPlxuICAgICAgICAgIDxpbWcgY2xhc3NOYW1lPVwicHJvZHVjdC1zaG93LS1waG90by1jYXJvdXNlbC0tcHJvZHVjdC1pbWdcIiBzcmM9e3Byb2R1Y3QucGhvdG9VcmxzWzBdfSBhbHQ9XCJcIj48L2ltZz5cbiAgICAgICAgICA8YnV0dG9uIGNsYXNzTmFtZT1cInByZXYtYnRuXCI+PC9idXR0b24+XG4gICAgICAgICAgPGJ1dHRvbiBjbGFzc05hbWU9XCJwcmV2LWJ0blwiPjwvYnV0dG9uPlxuICAgICAgICA8L3NlY3Rpb24+XG4gICAgICA8L3NlY3Rpb24+XG4gICAgKVxuXG4gICAgY29uc3QgYXNpZGVBcmVhID0gKFxuICAgICAgPHNlY3Rpb24gY2xhc3NOYW1lPVwicHJvZHVjdC0tc2hvdy0tY2FydC1hc2lkZS13cmFwcGVyXCI+XG4gICAgICAgIDxzZWN0aW9uIGNsYXNzTmFtZT1cInByb2R1Y3Qtc2hvdy0tY2FydC1hc2lkZVwiPlxuICAgICAgICAgIDx1bCBjbGFzc05hbWU9XCJwcm9kdWN0LXNob3ctLWNhcnQtYXNpZGUtaXRlbXNcIj5cbiAgICAgICAgICAgIDxoMyBjbGFzc05hbWU9XCJwcm9kdWN0LXNob3ctLWNhcnQtYXNpZGUtaXRlbXMtLXRpdGxlXCI+e3Byb2R1Y3QudGl0bGV9PC9oMz5cblxuICAgICAgICAgICAgPHVsIGNsYXNzTmFtZT1cInByb2R1Y3Qtc2hvdy0tY2FydC1hc2lkZS1pdGVtcy0tcHJpY2Utd3JhcHBlclwiPlxuICAgICAgICAgICAgICA8bGkgY2xhc3NOYW1lPVwicHJvZHVjdC1zaG93LS1jYXJ0LWFzaWRlLWl0ZW1zLS1wcmljZVwiPntmb3JtYXR0ZXIuZm9ybWF0KHByb2R1Y3QucHJpY2UpfTwvbGk+XG4gICAgICAgICAgICAgIDxwIGNsYXNzTmFtZT1cInByb2R1Y3Qtc2hvdy0tY2FydC1hc2lkZS1pdGVtcy0tc2hpcHBpbmdcIj5GcmVlIFNoaXBwaW5nICYgUmV0dXJuczwvcD5cbiAgICAgICAgICAgIDwvdWw+XG5cbiAgICAgICAgICAgIDx1bCBjbGFzc05hbWU9XCJwcm9kdWN0LXNob3ctLWNhcnQtYXNpZGUtaXRlbXMtLWNvbG9yLXdyYXBwZXJcIj5cbiAgICAgICAgICAgICAgPGxpIGNsYXNzTmFtZT1cInByb2R1Y3Qtc2hvdy0tY2FydC1hc2lkZS1pdGVtcy0tY29sb3ItdGl0bGVcIj5Db2xvcjogPC9saT5cbiAgICAgICAgICAgICAgPGxpIGNsYXNzTmFtZT1cInByb2R1Y3Qtc2hvdy0tY2FydC1hc2lkZS1pdGVtcy0tY29sb3JcIj5Tb21lIGNvbG9yPC9saT5cbiAgICAgICAgICAgIDwvdWw+ICAgICAgIFxuXG4gICAgICAgICAgICA8c2VjdGlvbiBjbGFzc05hbWU9XCJwcm9kdWN0LXNob3ctLWNhcnQtYXNpZGUtLWZvcm1cIj5cbiAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzTmFtZT1cInByb2R1Y3Qtc2hvdy0tY2FydC1hc2lkZS0tZm9ybS0tc2l6aW5nLS1sYWJlbFwiPlxuICAgICAgICAgICAgICAgIDxzZWxlY3QgY2xhc3NOYW1lPVwicHJvZHVjdC1zaG93LS1jYXJ0LWFzaWRlLS1mb3JtLS1zaXppbmdcIiB2YWx1ZT17dGhpcy5zdGF0ZS5zaXplfSBuYW1lPVwic2l6ZVwiIG9uQ2hhbmdlPXt0aGlzLmhhbmRsZUlucHV0KFwic2l6ZVwiKX0+XG4gICAgICAgICAgICAgICAgICA8b3B0aW9uIGNsYXNzTmFtZT1cImRyb3Bkb3duLWhlbHBlclwiIHNlbGVjdGVkIGRpc2FibGVkPlNlbGVjdCBhIHNpemU8L29wdGlvbj5cbiAgICAgICAgICAgICAgICAgIHtzaXplT3B0aW9uc31cbiAgICAgICAgICAgICAgICA8L3NlbGVjdD5cbiAgICAgICAgICAgICAgPC9sYWJlbD5cbiAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzc05hbWU9XCJwcm9kdWN0LXNob3ctLWNhcnQtYXNpZGUtLWZvcm0tLWFkZC10by1jYXJ0XCIgb25DbGljaz17dGhpcy5oYW5kbGVTdWJtaXR9PkFERCBUTyBDQVJUPC9idXR0b24+XG4gICAgICAgICAgICA8L3NlY3Rpb24+XG4gICAgICAgICAgPC91bD5cbiAgICAgICAgPC9zZWN0aW9uPlxuICAgICAgPC9zZWN0aW9uPlxuICAgIClcbiAgICBcbiAgICBjb25zdCBkZWF0aWxBcmVhID0gKFxuICAgICAgPHNlY3Rpb24gY2xhc3NOYW1lPVwicHJvZHVjdC1zaG93LS1kZWF0aWwtd3JhcHBlclwiPlxuICAgICAgICA8dWwgY2xhc3NOYW1lPVwicHJvZHVjdC1zaG93LS1kZWF0aWwtLWl0ZW1zXCI+XG4gICAgICAgICAgPHVsIGNsYXNzTmFtZT1cInByb2R1Y3Qtc2hvdy0tZGV0YWlsLS1pdGVtXCI+XG4gICAgICAgICAgICA8aDMgY2xhc3NOYW1lPVwicHJvZHVjdC1zaG93LS1kZXRhaWwtLWl0ZW0tLXRpdGxlXCI+UFJPRFVDVCBERVRBSUxTPC9oMz5cbiAgICAgICAgICAgIDxwIGNsYXNzTmFtZT1cInByb2R1Y3Qtc2hvdy0tZGV0YWlsLS1pdGVtLS1zdWJ0aXRsZVwiPkNhdGVnb3J5IGJ5IGJyYW5kPC9wPlxuICAgICAgICAgICAgPHVsIGNsYXNzTmFtZT1cInByb2R1Y3Qtc2hvdy0tZGV0YWlsLS1pdGVtLS1kZXRhaWxzXCI+XG4gICAgICAgICAgICAgIDxsaSBjbGFzc05hbWU9XCJwcm9kdWN0LXNob3ctLWRldGFpbC0taXRlbS0tZGV0YWlscy0taXRlbVwiPlxuICAgICAgICAgICAgICAgIGRldGFpbHMgaGVyZVxuICAgICAgICAgICAgICA8L2xpPlxuICAgICAgICAgICAgPC91bD5cbiAgICAgICAgICA8L3VsPlxuXG4gICAgICAgICAgPHVsIGNsYXNzTmFtZT1cInByb2R1Y3Qtc2hvdy0tZGV0YWlsLS1pdGVtXCI+XG4gICAgICAgICAgICA8dWwgY2xhc3NOYW1lPVwicHJvZHVjdC1zaG93LS1kZXRhaWwtLWFyZWFcIj5cbiAgICAgICAgICAgICAgPGgzIGNsYXNzTmFtZT1cInByb2R1Y3Qtc2hvdy0tZGV0YWlsLS1pdGVtLS10aXRsZVwiPlBST0RVQ1QgQ09ERTwvaDM+XG4gICAgICAgICAgICAgIDxwPntwcm9kdWN0LmNvZGV9PC9wPlxuICAgICAgICAgICAgICA8dWwgY2xhc3NOYW1lPVwicHJvZHVjdC1zaG93LS1kZXRhaWwtLWFyZWFcIj5cbiAgICAgICAgICAgICAgICA8aDMgY2xhc3NOYW1lPVwicHJvZHVjdC1zaG93LS1kZXRhaWwtLWl0ZW0tLXRpdGxlXCI+QlJBTkQ8L2gzPlxuICAgICAgICAgICAgICAgIDxwPmJyYW5kIGhlcmU8L3A+XG4gICAgICAgICAgICAgIDwvdWw+XG4gICAgICAgICAgICA8L3VsID4gICAgXG4gICAgICAgICAgPC91bD5cblxuICAgICAgICAgIDx1bCBjbGFzc05hbWU9XCJwcm9kdWN0LXNob3ctLWRldGFpbC0taXRlbVwiPlxuICAgICAgICAgICAgPHVsIGNsYXNzTmFtZT1cInByb2R1Y3Qtc2hvdy0tZGV0YWlsLS1hcmVhXCI+XG4gICAgICAgICAgICAgIDxoMyBjbGFzc05hbWU9XCJwcm9kdWN0LXNob3ctLWRldGFpbC0taXRlbS0tdGl0bGVcIj5TSVpFICYgRklUPC9oMz5cbiAgICAgICAgICAgICAgPHVsIGNsYXNzTmFtZT1cInByb2R1Y3Qtc2hvdy0tZGV0YWlsLS1pdGVtLS1kZXNpZ24tc3BlY3NcIj5cbiAgICAgICAgICAgICAgICA8bGkgY2xhc3NOYW1lPVwicHJvZHVjdC1zaG93LS1kZXRhaWwtLWl0ZW0tLWRlc2lnbi1zcGVjcy0taXRlbVwiPntwcm9kdWN0Lm1vZGVsX3NpemV9PC9saT5cbiAgICAgICAgICAgICAgICA8bGkgY2xhc3NOYW1lPVwicHJvZHVjdC1zaG93LS1kZXRhaWwtLWl0ZW0tLWRlc2lnbi1zcGVjcy0taXRlbVwiPntwcm9kdWN0Lm1vZGVsX2hlaWdodH08L2xpPlxuICAgICAgICAgICAgICA8L3VsPlxuICAgICAgICAgICAgPC91bD5cblxuICAgICAgICAgICAgPHVsIGNsYXNzTmFtZT1cInByb2R1Y3Qtc2hvdy0tZGV0YWlsLS1hcmVhXCI+XG4gICAgICAgICAgICAgIDxoMyBjbGFzc05hbWU9XCJwcm9kdWN0LXNob3ctLWRldGFpbC0taXRlbS0tdGl0bGVcIj5MT09LIEFGVEVSIE1FPC9oMz5cbiAgICAgICAgICAgICAgPHVsIGNsYXNzTmFtZT1cInByb2R1Y3Qtc2hvdy0tZGV0YWlsLS1pdGVtLS1kZXNpZ24tc3BlY3NcIj5cbiAgICAgICAgICAgICAgICA8bGkgY2xhc3NOYW1lPVwicHJvZHVjdC1zaG93LS1kZXRhaWwtLWl0ZW0tLWRlc2lnbi1zcGVjcy0taXRlbVwiPntwcm9kdWN0LmNhcmVfaW5zdHJ1Y3Rpb25zfTwvbGk+XG4gICAgICAgICAgICAgICAgPGxpIGNsYXNzTmFtZT1cInByb2R1Y3Qtc2hvdy0tZGV0YWlsLS1pdGVtLS1kZXNpZ24tc3BlY3MtLWl0ZW1cIj57cHJvZHVjdC5jYXJlX2FkdmljZX08L2xpPlxuICAgICAgICAgICAgICA8L3VsPlxuICAgICAgICAgICAgPC91bD5cblxuICAgICAgICAgICAgPHVsIGNsYXNzTmFtZT1cInByb2R1Y3Qtc2hvdy0tZGV0YWlsLS1hcmVhXCI+XG4gICAgICAgICAgICAgIDxoMyBjbGFzc05hbWU9XCJwcm9kdWN0LXNob3ctLWRldGFpbC0taXRlbS0tdGl0bGVcIj5BQk9VVCBNRTwvaDM+XG4gICAgICAgICAgICAgIDx1bCBjbGFzc05hbWU9XCJwcm9kdWN0LXNob3ctLWRldGFpbC0taXRlbS0tZGVzaWduLXNwZWNzXCI+XG4gICAgICAgICAgICAgICAgPGxpIGNsYXNzTmFtZT1cInByb2R1Y3Qtc2hvdy0tZGV0YWlsLS1pdGVtLS1kZXNpZ24tc3BlY3MtLWl0ZW1cIj57cHJvZHVjdC5mYWJyaWNfc3RyZXRjaH08L2xpPlxuICAgICAgICAgICAgICAgIDxsaSBjbGFzc05hbWU9XCJwcm9kdWN0LXNob3ctLWRldGFpbC0taXRlbS0tZGVzaWduLXNwZWNzLS1pdGVtXCI+e3Byb2R1Y3QuZmFicmljX21hdGVyaWFsfTwvbGk+XG4gICAgICAgICAgICAgICAgPGxpIGNsYXNzTmFtZT1cInByb2R1Y3Qtc2hvdy0tZGV0YWlsLS1pdGVtLS1kZXNpZ24tc3BlY3MtLWl0ZW1cIj57cHJvZHVjdC5tYWluX2ZpYmVyX2NvbnRlbnR9PC9saT5cbiAgICAgICAgICAgICAgPC91bD5cbiAgICAgICAgICAgIDwvdWw+XG4gICAgICAgICAgPC91bD5cblxuICAgICAgICA8L3VsPlxuICAgICAgPC9zZWN0aW9uPlxuICAgIClcblxuICAgIHJldHVybiAoXG4gICAgICA8c2VjdGlvbiBjbGFzc05hbWUgPSBcInByb2R1Y3Qtc2hvd1wiID5cbiAgICAgICAgPHNlY3Rpb24gY2xhc3NOYW1lPVwicHJvZHVjdC1zaG93LS13cmFwcGVyXCI+XG4gICAgICAgICAge3Bob3RvQXJlYX1cbiAgICAgICAgICB7YXNpZGVBcmVhfVxuICAgICAgICA8L3NlY3Rpb24+XG4gICAgICAgIDxzZWN0aW9uIGNsYXNzTmFtZT1cInByb2R1Y3Qtc2hvdy0tZGV0YWlsLXdyYXBwZXJcIj5cbiAgICAgICAgICB7ZGVhdGlsQXJlYX1cbiAgICAgICAgPC9zZWN0aW9uPlxuICAgICAgPC9zZWN0aW9uID5cbiAgICApXG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgUHJvZHVjdFNob3c7IiwiaW1wb3J0IHsgY29ubmVjdCB9IGZyb20gJ3JlYWN0LXJlZHV4JztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyByZXF1ZXN0UHJvZHVjdCB9IGZyb20gJy4uLy4uL2FjdGlvbnMvcHJvZHVjdHMnO1xuaW1wb3J0IHsgY3JlYXRlT3JkZXJJdGVtIH0gZnJvbSAnLi4vLi4vYWN0aW9ucy9vcmRlcl9pdGVtcyc7XG5pbXBvcnQgeyB1cGRhdGVQcm9kdWN0SXRlbSB9IGZyb20gJy4uLy4uL2FjdGlvbnMvcHJvZHVjdF9pdGVtcyc7XG5pbXBvcnQgUHJvZHVjdFNob3cgZnJvbSAnLi9wcm9kdWN0X3Nob3cnO1xuaW1wb3J0IHsgc2VsZWN0U2l6ZUF2YWlsYWJpbGl0eSB9IGZyb20gJy4uLy4uL3JlZHVjZXJzL3NlbGVjdG9ycyc7XG5cbmNvbnN0IG1hcFN0YXRlVG9Qcm9wcyA9IChzdGF0ZSwgb3duUGFyYW1zKSA9PiB7XG4gIGxldCBwcm9kdWN0SWQgPSBvd25QYXJhbXMubWF0Y2gucGFyYW1zLnByb2R1Y3RJZDtcbiAgcmV0dXJuIHtcbiAgICBwcm9kdWN0OiBzdGF0ZS5lbnRpdGllcy5wcm9kdWN0c1twcm9kdWN0SWRdLFxuICAgIGN1cnJlbnRVc2VyOiBzdGF0ZS5zZXNzaW9uLmN1cnJlbnRVc2VyLFxuICAgIG9yZGVyczogc3RhdGUuZW50aXRpZXMub3JkZXJzLFxuICAgIHByb2R1Y3RJdGVtczogc3RhdGUuZW50aXRpZXMucHJvZHVjdEl0ZW1zLFxuICAgIHNlbGVjdGVkU2l6ZXM6IE9iamVjdC5lbnRyaWVzKHNlbGVjdFNpemVBdmFpbGFiaWxpdHkoc3RhdGUpKVxuICB9XG59XG5cbmNvbnN0IG1hcERpc3BhdGNoVG9Qcm9wcyA9IGRpc3BhdGNoID0+IHtcbiAgcmV0dXJuIHtcbiAgICByZXF1ZXN0UHJvZHVjdDogKGlkKSA9PiBkaXNwYXRjaChyZXF1ZXN0UHJvZHVjdChpZCkpLFxuICAgIGNyZWF0ZU9yZGVySXRlbTogKHVzZXIsIG9yZGVySXRlbSwgb3JkZXIpID0+IGRpc3BhdGNoKGNyZWF0ZU9yZGVySXRlbSh1c2VyLCBvcmRlckl0ZW0sIG9yZGVyKSksXG4gICAgdXBkYXRlUHJvZHVjdEl0ZW06IChwcm9kdWN0SXRlbSkgPT4gZGlzcGF0Y2godXBkYXRlUHJvZHVjdEl0ZW0ocHJvZHVjdEl0ZW0pKVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNvbm5lY3QobWFwU3RhdGVUb1Byb3BzLCBtYXBEaXNwYXRjaFRvUHJvcHMpKFByb2R1Y3RTaG93KTsiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgTGluayB9IGZyb20gJ3JlYWN0LXJvdXRlci1kb20nO1xuaW1wb3J0IHsgc2VsZWN0T3JkZXJJdGVtTGlzdGluZ3MgfSBmcm9tICcuLi8uLi9yZWR1Y2Vycy9zZWxlY3RvcnMnO1xuXG5cbmNsYXNzIE9yZGVyU2hvdyBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuXG4gICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgIG9yZGVySWQ6IHRoaXMucHJvcHMubWF0Y2gucGFyYW1zLm9yZGVySWQsXG4gICAgICBzdWJUb3RhbDogMCxcbiAgICAgIGxpc3RpbmdzOiBbXVxuICAgIH07XG5cbiAgICB0aGlzLmhhbmRsZVN1Ym1pdCA9IHRoaXMuaGFuZGxlU3VibWl0LmJpbmQodGhpcyk7XG4gIH1cblxuICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICBsZXQgb3JkZXJJZCA9IHBhcnNlSW50KHRoaXMucHJvcHMubWF0Y2gucGFyYW1zLm9yZGVySWQpO1xuICAgIHRoaXMucHJvcHMuZmV0Y2hPcmRlcihvcmRlcklkKVxuICB9XG5cbiAgaGFuZGxlU3VibWl0KGUpIHtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICBsZXQgb3JkZXJJdGVtSWQgPSBlLnRhcmdldC5hdHRyaWJ1dGVzW1wib3JkZXJJdGVtSWRcIl0udmFsdWU7XG4gICAgbGV0IGlkID0gdGhpcy5wcm9wcy5vcmRlckl0ZW1zW29yZGVySXRlbUlkXS5wcm9kdWN0X2l0ZW1faWQ7XG4gICAgbGV0IHByb2R1Y3RJZCA9IFt0aGlzLnByb3BzLnByb2R1Y3RJdGVtc1tpZF0ucHJvZHVjdF9pdGVtX2lkXS5wcm9kdWN0X2lkO1xuICAgIGxldCBwcm9kdWN0SXRlbSA9IHtcbiAgICAgIGlkOiBpZCxcbiAgICAgIHByb2R1Y3RfaWQ6IHByb2R1Y3RJZCxcbiAgICAgIHNpemU6IHRoaXMucHJvcHMucHJvZHVjdEl0ZW1zW2lkXS5zaXplLFxuICAgICAgc3RhdGU6ICdBdmFpbGFibGUnXG4gICAgfTtcblxuICAgIHRoaXMucHJvcHMuZGVsZXRlT3JkZXJJdGVtKG9yZGVySXRlbUlkLCB0aGlzLnByb3BzLmN1cnJlbnRVc2VyLmlkLCB0aGlzLnN0YXRlLm9yZGVySWQpO1xuICAgIHRoaXMucHJvcHMudXBkYXRlUHJvZHVjdEl0ZW0ocHJvZHVjdEl0ZW0pO1xuICB9XG5cbiAgcmVuZGVyICgpIHtcbiAgICBcbiAgICBjb25zdCBmb3JtYXR0ZXIgPSBuZXcgSW50bC5OdW1iZXJGb3JtYXQoJ2VuLVVTJywge1xuICAgICAgc3R5bGU6ICdjdXJyZW5jeScsXG4gICAgICBjdXJyZW5jeTogJ1VTRCcsXG4gICAgICBtaW5pbXVtRnJhY3Rpb25EaWdpdHM6IDJcbiAgICB9KVxuICAgIGxldCBvcmRlckl0ZW1zOyAgIFxuICAgIGlmICh0aGlzLnByb3BzLm9yZGVyTGlzdEl0ZW1zLmxlbmd0aCA+IDApIHtcbiAgICAgIG9yZGVySXRlbXMgPSB0aGlzLnByb3BzLm9yZGVyTGlzdEl0ZW1zLm1hcCgobGlzdGluZywgaWR4KSA9PiAoXG4gICAgICAgIDxzZWN0aW9uIGNsYXNzTmFtZT1cImxpc3RpbmctLWl0ZW0tLXdyYXBwZXJcIiBrZXk9e2lkeH0+XG4gICAgICAgICAgPHNlY3Rpb24gY2xhc3NOYW1lPVwibGlzdGluZy0taXRlbS0tcGhvdG9zXCI+XG4gICAgICAgICAgICA8aW1nIHNyYz17bGlzdGluZy5waG90b3NVcmx9IGNsYXNzTmFtZT1cImxpc3RpbmctLWl0ZW0tLWltZ1wiPjwvaW1nPlxuICAgICAgICAgIDwvc2VjdGlvbj5cblxuICAgICAgICAgIDxzZWN0aW9uIGNsYXNzTmFtZT1cImxpc3RpbmctLWRldGFpbHMtLXdyYXBwZXJcIj5cbiAgICAgICAgICAgIDx1bCBjbGFzc05hbWU9XCJsaXN0aW5nLS1kZXRhaWxzXCI+XG4gICAgICAgICAgICAgIDxoMyBjbGFzc05hbWU9XCJsaXN0aW5nLS1kZXRhaWxzLS1oZWFkZXJcIj57Zm9ybWF0dGVyLmZvcm1hdChsaXN0aW5nLnByaWNlKX08L2gzPlxuICAgICAgICAgICAgICA8cCBjbGFzc05hbWU9XCJsaXN0aW5nLS1kZXRhaWxzLS1icmFuZFwiPntsaXN0aW5nLmJyYW5kfTwvcD5cbiAgICAgICAgICAgICAgPHAgY2xhc3NOYW1lPVwibGlzdGluZy0tdGl0bGVcIj57bGlzdGluZy5zaG9ydFRpdGxlfTwvcD5cbiAgICAgICAgICAgICAgPHVsIGNsYXNzTmFtZT1cImxpc3RpbmctLWRldGFpbHMtLXNwZWNzLS13cmFwcGVyXCI+XG4gICAgICAgICAgICAgICAgPGxpIGNsYXNzTmFtZT1cImxpc3RpbmctLWRldGFpbHMtLXNwZWNzLS1jb2xvclwiPkNvbG9yPC9saT5cbiAgICAgICAgICAgICAgICA8bGkgY2xhc3NOYW1lPVwibGlzdGluZy0tZGV0YWlscy0tc3BlY3MtLXNpemVcIj57bGlzdGluZy5zaXplfTwvbGk+XG4gICAgICAgICAgICAgICAgPHAgY2xhc3NOYW1lPVwibGlzdGluZy0tZGV0YWlscy0tc3BlY3MtLXF0eVwiPlF0eTwvcD5cbiAgICAgICAgICAgICAgPC91bD5cbiAgICAgICAgICAgIDwvdWw+XG4gICAgICAgICAgPC9zZWN0aW9uPlxuICAgICAgICAgIDxidXR0b24gY2xhc3NOYW1lPVwibGlzdGluZy0tcmVtb3ZlLS1idG5cIiBvcmRlckl0ZW1JZD17bGlzdGluZy5pZH0gb25DbGljaz17dGhpcy5oYW5kbGVTdWJtaXR9Png8L2J1dHRvbj5cbiAgICAgICAgPC9zZWN0aW9uPlxuICAgICAgKSlcbiAgICB9IGVsc2Uge1xuICAgICAgPGRpdj5cbiAgICAgIDwvZGl2PlxuICAgIH1cbiAgICBcbiAgICBjb25zdCBvcmRlciA9IChcbiAgICAgIDxzZWN0aW9uIGNsYXNzTmFtZT1cIm9yZGVyLS1jb250YWluZXJcIj5cbiAgICAgICAgPHVsIGNsYXNzTmFtZT1cIm9yZGVyLS13cmFwcGVyXCI+XG4gICAgICAgICAgPHVsIGNsYXNzTmFtZT1cIm9yZGVyLS1tYWluXCI+XG4gICAgICAgICAgICA8c2VjdGlvbiBjbGFzc05hbWU9XCJvcmRlci0tbGlzdGluZ3MtLXdyYXBwZXJcIj5cbiAgICAgICAgICAgICAgPGgzIGNsYXNzTmFtZT1cIm9yZGVyLS1saXN0aW5ncy0taGVhZGVyXCI+TXkgQ2FydDwvaDM+XG4gICAgICAgICAgICAgIDx1bCBjbGFzc05hbWU9XCJvcmRlci0tbGlzdGluZ3NcIj5cbiAgICAgICAgICAgICAgICB7b3JkZXJJdGVtc31cbiAgICAgICAgICAgICAgPC91bD5cbiAgICAgICAgICAgICAgPHVsIGNsYXNzTmFtZT1cIm9yZGVyLS1saXN0aW5ncy0tc3VidG90YWxcIj5cbiAgICAgICAgICAgICAgICA8aDMgY2xhc3NOYW1lPVwib3JkZXItLWxpc3RpbmdzLS1zdWJ0b3RhbC0tdGl0bGVcIj5TVUItVE9UQUw8L2gzPlxuICAgICAgICAgICAgICAgIDxoMyBjbGFzc05hbWU9XCJvcmRlci0tbGlzdGluZ3MtLXN1YnRvdGFsLS1wcmljZVwiPntmb3JtYXR0ZXIuZm9ybWF0KHRoaXMucHJvcHMuc3ViVG90YWwpfTwvaDM+XG4gICAgICAgICAgICAgIDwvdWw+XG4gICAgICAgICAgICAgIFxuICAgICAgICAgICAgPC9zZWN0aW9uPlxuXG4gICAgICAgICAgICA8dWwgY2xhc3NOYW1lPVwib3JkZXItLWRlbGl2ZXJ5LS13cmFwcGVyXCI+XG4gICAgICAgICAgICA8L3VsPlxuICAgICAgICAgIDwvdWw+XG5cbiAgICAgICAgICA8c2VjdGlvbiBjbGFzc05hbWU9XCJvcmRlci0tYXNpZGVcIj5cbiAgICAgICAgICA8L3NlY3Rpb24+XG4gICAgICAgIDwvdWw+XG4gICAgICA8L3NlY3Rpb24+XG4gICAgKVxuXG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwib3JkZXJcIj57b3JkZXJ9PC9kaXY+XG4gICAgKVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IE9yZGVyU2hvdztcblxuXG4vLyBzZWxlY3RvcnM6IHNlbGVjdE9yZGVySXRlbXNMaXN0aW5nc1xuLy8gWyB7cHJpY2U6IDIwLCBicmFuZDogXCJzb21lXCIsIGNvbG9yOiBcInNvbWVcIiwgc2l6ZTogXCJYU1wiLCBxdHk6IDEsIHNob3J0VGl0bGU6IFwic29tZSBsaW1pdGVkIHRpdGxlXCIsIGltZzogaW1nX3VybH0gXVxuXG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgY29ubmVjdCB9IGZyb20gJ3JlYWN0LXJlZHV4JztcbmltcG9ydCB7IGZldGNoT3JkZXIgfSBmcm9tICcuLi8uLi9hY3Rpb25zL29yZGVycyc7XG5pbXBvcnQgT3JkZXJTaG93IGZyb20gJy4vb3JkZXJzX3Nob3cnO1xuaW1wb3J0IHsgdXBkYXRlUHJvZHVjdEl0ZW0gfSBmcm9tICcuLi8uLi9hY3Rpb25zL3Byb2R1Y3RfaXRlbXMnO1xuaW1wb3J0IHsgZGVsZXRlT3JkZXJJdGVtIH0gZnJvbSAnLi4vLi4vYWN0aW9ucy9vcmRlcl9pdGVtcyc7XG5pbXBvcnQgeyBzZWxlY3RPcmRlckl0ZW1MaXN0aW5ncyB9IGZyb20gJy4uLy4uL3JlZHVjZXJzL3NlbGVjdG9ycyc7XG5pbXBvcnQgeyBzZWxlY3RTdWJUb3RhbCB9IGZyb20gJy4uLy4uL3JlZHVjZXJzL3NlbGVjdG9ycyc7XG5cbmNvbnN0IG1hcFN0YXRlVG9Qcm9wcyA9IChzdGF0ZSwgb3duUGFyYW1zKSA9PiB7XG4gIGxldCBvcmRlcklkID0gb3duUGFyYW1zLm1hdGNoLnBhcmFtcy5vcmRlcklkO1xuICByZXR1cm4ge1xuICAgIG9yZGVyczogc3RhdGUuZW50aXRpZXMub3JkZXJzW29yZGVySWRdLFxuICAgIGN1cnJlbnRVc2VyOiBzdGF0ZS5zZXNzaW9uLmN1cnJlbnRVc2VyLFxuICAgIHByb2R1Y3RzOiBzdGF0ZS5lbnRpdGllcy5wcm9kdWN0cyxcbiAgICBwcm9kdWN0SXRlbXM6IHN0YXRlLmVudGl0aWVzLnByb2R1Y3RJdGVtcyxcbiAgICBvcmRlckl0ZW1zOiBzdGF0ZS5lbnRpdGllcy5vcmRlckl0ZW1zLFxuICAgIG9yZGVyTGlzdEl0ZW1zOiBzZWxlY3RPcmRlckl0ZW1MaXN0aW5ncyhzdGF0ZS5lbnRpdGllcy5vcmRlckl0ZW1zLCBzdGF0ZS5lbnRpdGllcy5wcm9kdWN0cywgc3RhdGUuZW50aXRpZXMucHJvZHVjdEl0ZW1zKSxcbiAgICBzdWJUb3RhbDogc2VsZWN0U3ViVG90YWwoc3RhdGUpXG4gIH1cblxuICBcbn1cblxuY29uc3QgbWFwRGlzcGF0Y2hUb1Byb3BzID0gZGlzcGF0Y2ggPT4ge1xuXG4gIHJldHVybiB7XG4gICAgZmV0Y2hPcmRlcjogKGlkKSA9PiBkaXNwYXRjaChmZXRjaE9yZGVyKGlkKSksXG4gICAgZGVsZXRlT3JkZXJJdGVtOiAoaWQpID0+IGRpc3BhdGNoKGRlbGV0ZU9yZGVySXRlbShpZCkpLFxuICAgIHVwZGF0ZVByb2R1Y3RJdGVtOiAocHJvZHVjdEl0ZW0pID0+IGRpc3BhdGNoKHVwZGF0ZVByb2R1Y3RJdGVtKHByb2R1Y3RJdGVtKSlcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBjb25uZWN0KG1hcFN0YXRlVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzKShPcmRlclNob3cpOyIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBTd2l0Y2gsIFJvdXRlIH0gZnJvbSAncmVhY3Qtcm91dGVyLWRvbSc7XG5pbXBvcnQgRm9vdGVyIGZyb20gJy4vZm9vdGVyL2Zvb3Rlcic7XG5pbXBvcnQgSG9tZSBmcm9tICcuL2hvbWUvaG9tZSc7XG5pbXBvcnQgTmF2QmFyQ29udGFpbmVyIGZyb20gJy4vbmF2X2Jhci9uYXZfYmFyX2NvbnRhaW5lcic7XG5pbXBvcnQgUHJvZHVjdHNJbmRleENvbnRhaW5lciBmcm9tICcuL3Byb2R1Y3RzL3Byb2R1Y3RfaW5kZXhfY29udGFpbmVyJztcbmltcG9ydCBQcm9kdWN0U2hvd0NvbnRhaW5lciBmcm9tICcuL3Byb2R1Y3RzL3Byb2R1Y3Rfc2hvd19jb250YWluZXInO1xuaW1wb3J0IE9yZGVyc1Nob3dDb250YWluZXIgZnJvbSAnLi9vcmRlcnMvb3JkZXJzX3Nob3dfY29udGFpbmVyJztcbmltcG9ydCB7IFJlZGlyZWN0IH0gZnJvbSAncmVhY3Qtcm91dGVyLWRvbSc7XG5cblxuZXhwb3J0IGRlZmF1bHQgKHN0YXRlKSA9PiAoXG4gIDxkaXYgaWQ9XCJtYWluXCI+XG4gICAgPFJvdXRlIHBhdGg9XCIvXCIgY29tcG9uZW50PXtOYXZCYXJDb250YWluZXJ9IC8+XG4gICAgPFN3aXRjaD5cbiAgICAgIDxSb3V0ZSBleGFjdCBwYXRoPVwiL1wiIGNvbXBvbmVudD17SG9tZX0gLz5cbiAgICAgIDxSb3V0ZSBleGFjdCBwYXRoPVwiL3Byb2R1Y3RzXCIgY29tcG9uZW50PXtQcm9kdWN0c0luZGV4Q29udGFpbmVyfSAvPlxuICAgICAgPFJvdXRlIGV4YWN0IHBhdGg9e1wiL3Byb2R1Y3RzLzpwcm9kdWN0SWRcIn0gY29tcG9uZW50PXtQcm9kdWN0U2hvd0NvbnRhaW5lcn0gLz5cbiAgICAgIDxSb3V0ZSBleGFjdCBwYXRoPXtcIi9vcmRlcnMvOm9yZGVySWRcIn0gY29tcG9uZW50PXtPcmRlcnNTaG93Q29udGFpbmVyfSAvPlxuICAgICAgPFJvdXRlIHJlbmRlcj17KCkgPT4gPFJlZGlyZWN0IHRvPXt7IHBhdGhuYW1lOiBcIi9cIiB9fSAvPn0gLz5cbiAgICA8L1N3aXRjaD5cbiAgICA8Um91dGUgcGF0aD1cIi9cIiBjb21wb25lbnQ9e0Zvb3Rlcn0gLz5cbiAgPC9kaXY+XG4pO1xuXG4gIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IFN3aXRjaCwgUm91dGUgfSBmcm9tICdyZWFjdC1yb3V0ZXItZG9tJztcbmltcG9ydCB7IEF1dGhSb3V0ZSwgUHJvdGVjdGVkUm91dGUgfSBmcm9tICcuLi91dGlscy9yb3V0ZV91dGlscyc7XG5pbXBvcnQgTG9naW5Db250YWluZXIgZnJvbSAnLi9zZXNzaW9uL2xvZ2luX2NvbnRhaW5lcic7XG5pbXBvcnQgU2lnbnVwQ29udGFpbmVyIGZyb20gJy4vc2Vzc2lvbi9zaWdudXBfY29udGFpbmVyJztcbmltcG9ydCBNYWluIGZyb20gJy4vbWFpbic7XG5cblxuLy8gcG9zc2libGUgZXJyb3Igc29sdXRpb24gXG4vL2h0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzQ5MTA5NjUxL2hvdy10by1jbGVhci1jdXN0b20tbWVzc2FnZS1jcmVhdGVkLWJ5LWVycm9yLWJvdW5kYXJ5LXdoZW4taS1uYXZpZ2F0ZS10by1vdGhlci1yXG5cbi8vIGdvdCB0ZXJuYXJ5IGZyb206IGh0dHBzOi8vcmVhY3R0cmFpbmluZy5jb20vcmVhY3Qtcm91dGVyL3dlYi9leGFtcGxlL21vZGFsLWdhbGxlcnlcbmV4cG9ydCBkZWZhdWx0ICgpID0+IChcbiAgPGRpdiBpZD1cImFwcFwiPlxuICAgIDxTd2l0Y2g+XG4gICAgICA8QXV0aFJvdXRlIGV4YWN0IHBhdGg9XCIvbG9naW5cIiBjb21wb25lbnQ9e0xvZ2luQ29udGFpbmVyfSAvPlxuICAgICAgPEF1dGhSb3V0ZSBleGFjdCBwYXRoPVwiL3NpZ251cFwiIGNvbXBvbmVudD17U2lnbnVwQ29udGFpbmVyfSAvPlxuICAgICAgPFJvdXRlIHBhdGg9XCIvXCIgY29tcG9uZW50PXtNYWlufSAvPlxuICAgIDwvU3dpdGNoPlxuICA8L2Rpdj5cbik7XG5cbiAiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgUHJvdmlkZXIgfSBmcm9tICdyZWFjdC1yZWR1eCc7XG5pbXBvcnQgeyBIYXNoUm91dGVyIH0gZnJvbSAncmVhY3Qtcm91dGVyLWRvbSc7XG5pbXBvcnQgQXBwIGZyb20gJy4vYXBwJztcblxuXG5leHBvcnQgZGVmYXVsdCAoeyBzdG9yZSB9KSA9PiAoXG4gIDxQcm92aWRlciBzdG9yZT17c3RvcmV9PlxuICAgIDxIYXNoUm91dGVyPlxuICAgICAgPEFwcCAvPlxuICAgIDwvSGFzaFJvdXRlcj5cbiAgPC9Qcm92aWRlcj5cbik7IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBSZWFjdERPTSBmcm9tICdyZWFjdC1kb20nO1xuaW1wb3J0IGNyZWF0ZVN0b3JlIGZyb20gJy4vc3RvcmUvc3RvcmUnO1xuaW1wb3J0IFJvb3QgZnJvbSAnLi9jb21wb25lbnRzL3Jvb3QnO1xuXG5kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdET01Db250ZW50TG9hZGVkJywgKCkgPT4ge1xuICBjb25zdCByb290ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Jvb3QnKTtcbiAgbGV0IHByZWxvYWRlZFN0YXRlID0gdW5kZWZpbmVkO1xuXG4gIGlmICh3aW5kb3cuY3VycmVudFVzZXIpIHtcbiAgICBwcmVsb2FkZWRTdGF0ZSA9IHtcbiAgICAgIHNlc3Npb246IHtcbiAgICAgICAgY3VycmVudFVzZXI6IHdpbmRvdy5jdXJyZW50VXNlcixcbiAgICAgIH1cbiAgICB9O1xuICB9XG4gIGNvbnN0IHN0b3JlID0gY3JlYXRlU3RvcmUocHJlbG9hZGVkU3RhdGUpO1xuICB3aW5kb3cuc3RvcmUgPSBzdG9yZTtcbiAgUmVhY3RET00ucmVuZGVyKDxSb290IHN0b3JlPXtzdG9yZX0gLz4sIHJvb3QpO1xuICB3aW5kb3cuZ2V0U3RhdGUgPSBzdG9yZS5nZXRTdGF0ZTtcbn0pXG4iLCJpbXBvcnQgeyBjcmVhdGVTdG9yZSwgYXBwbHlNaWRkbGV3YXJlIH0gZnJvbSAncmVkdXgnO1xuaW1wb3J0IGxvZ2dlciBmcm9tICdyZWR1eC1sb2dnZXInO1xuXG5pbXBvcnQgcm9vdFJlZHVjZXIgZnJvbSAnLi4vcmVkdWNlcnMvcm9vdCc7XG5pbXBvcnQgdGh1bmsgZnJvbSAnLi4vdGh1bmsvdGh1bmsnO1xuXG5leHBvcnQgZGVmYXVsdCAocHJlbG9hZGVkU3RhdGUgPSB7fSkgPT4gY3JlYXRlU3RvcmUoXG4gIHJvb3RSZWR1Y2VyLCBwcmVsb2FkZWRTdGF0ZSwgYXBwbHlNaWRkbGV3YXJlKHRodW5rLCBsb2dnZXIpXG4pOyJdLCJzb3VyY2VSb290IjoiIn0=
;
(function() {
  var context = this;

  (function() {
    (function() {
      var slice = [].slice;

      this.ActionCable = {
        INTERNAL: {
          "message_types": {
            "welcome": "welcome",
            "ping": "ping",
            "confirmation": "confirm_subscription",
            "rejection": "reject_subscription"
          },
          "default_mount_path": "/cable",
          "protocols": ["actioncable-v1-json", "actioncable-unsupported"]
        },
        WebSocket: window.WebSocket,
        logger: window.console,
        createConsumer: function(url) {
          var ref;
          if (url == null) {
            url = (ref = this.getConfig("url")) != null ? ref : this.INTERNAL.default_mount_path;
          }
          return new ActionCable.Consumer(this.createWebSocketURL(url));
        },
        getConfig: function(name) {
          var element;
          element = document.head.querySelector("meta[name='action-cable-" + name + "']");
          return element != null ? element.getAttribute("content") : void 0;
        },
        createWebSocketURL: function(url) {
          var a;
          if (url && !/^wss?:/i.test(url)) {
            a = document.createElement("a");
            a.href = url;
            a.href = a.href;
            a.protocol = a.protocol.replace("http", "ws");
            return a.href;
          } else {
            return url;
          }
        },
        startDebugging: function() {
          return this.debugging = true;
        },
        stopDebugging: function() {
          return this.debugging = null;
        },
        log: function() {
          var messages, ref;
          messages = 1 <= arguments.length ? slice.call(arguments, 0) : [];
          if (this.debugging) {
            messages.push(Date.now());
            return (ref = this.logger).log.apply(ref, ["[ActionCable]"].concat(slice.call(messages)));
          }
        }
      };

    }).call(this);
  }).call(context);

  var ActionCable = context.ActionCable;

  (function() {
    (function() {
      var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

      ActionCable.ConnectionMonitor = (function() {
        var clamp, now, secondsSince;

        ConnectionMonitor.pollInterval = {
          min: 3,
          max: 30
        };

        ConnectionMonitor.staleThreshold = 6;

        function ConnectionMonitor(connection) {
          this.connection = connection;
          this.visibilityDidChange = bind(this.visibilityDidChange, this);
          this.reconnectAttempts = 0;
        }

        ConnectionMonitor.prototype.start = function() {
          if (!this.isRunning()) {
            this.startedAt = now();
            delete this.stoppedAt;
            this.startPolling();
            document.addEventListener("visibilitychange", this.visibilityDidChange);
            return ActionCable.log("ConnectionMonitor started. pollInterval = " + (this.getPollInterval()) + " ms");
          }
        };

        ConnectionMonitor.prototype.stop = function() {
          if (this.isRunning()) {
            this.stoppedAt = now();
            this.stopPolling();
            document.removeEventListener("visibilitychange", this.visibilityDidChange);
            return ActionCable.log("ConnectionMonitor stopped");
          }
        };

        ConnectionMonitor.prototype.isRunning = function() {
          return (this.startedAt != null) && (this.stoppedAt == null);
        };

        ConnectionMonitor.prototype.recordPing = function() {
          return this.pingedAt = now();
        };

        ConnectionMonitor.prototype.recordConnect = function() {
          this.reconnectAttempts = 0;
          this.recordPing();
          delete this.disconnectedAt;
          return ActionCable.log("ConnectionMonitor recorded connect");
        };

        ConnectionMonitor.prototype.recordDisconnect = function() {
          this.disconnectedAt = now();
          return ActionCable.log("ConnectionMonitor recorded disconnect");
        };

        ConnectionMonitor.prototype.startPolling = function() {
          this.stopPolling();
          return this.poll();
        };

        ConnectionMonitor.prototype.stopPolling = function() {
          return clearTimeout(this.pollTimeout);
        };

        ConnectionMonitor.prototype.poll = function() {
          return this.pollTimeout = setTimeout((function(_this) {
            return function() {
              _this.reconnectIfStale();
              return _this.poll();
            };
          })(this), this.getPollInterval());
        };

        ConnectionMonitor.prototype.getPollInterval = function() {
          var interval, max, min, ref;
          ref = this.constructor.pollInterval, min = ref.min, max = ref.max;
          interval = 5 * Math.log(this.reconnectAttempts + 1);
          return Math.round(clamp(interval, min, max) * 1000);
        };

        ConnectionMonitor.prototype.reconnectIfStale = function() {
          if (this.connectionIsStale()) {
            ActionCable.log("ConnectionMonitor detected stale connection. reconnectAttempts = " + this.reconnectAttempts + ", pollInterval = " + (this.getPollInterval()) + " ms, time disconnected = " + (secondsSince(this.disconnectedAt)) + " s, stale threshold = " + this.constructor.staleThreshold + " s");
            this.reconnectAttempts++;
            if (this.disconnectedRecently()) {
              return ActionCable.log("ConnectionMonitor skipping reopening recent disconnect");
            } else {
              ActionCable.log("ConnectionMonitor reopening");
              return this.connection.reopen();
            }
          }
        };

        ConnectionMonitor.prototype.connectionIsStale = function() {
          var ref;
          return secondsSince((ref = this.pingedAt) != null ? ref : this.startedAt) > this.constructor.staleThreshold;
        };

        ConnectionMonitor.prototype.disconnectedRecently = function() {
          return this.disconnectedAt && secondsSince(this.disconnectedAt) < this.constructor.staleThreshold;
        };

        ConnectionMonitor.prototype.visibilityDidChange = function() {
          if (document.visibilityState === "visible") {
            return setTimeout((function(_this) {
              return function() {
                if (_this.connectionIsStale() || !_this.connection.isOpen()) {
                  ActionCable.log("ConnectionMonitor reopening stale connection on visibilitychange. visbilityState = " + document.visibilityState);
                  return _this.connection.reopen();
                }
              };
            })(this), 200);
          }
        };

        now = function() {
          return new Date().getTime();
        };

        secondsSince = function(time) {
          return (now() - time) / 1000;
        };

        clamp = function(number, min, max) {
          return Math.max(min, Math.min(max, number));
        };

        return ConnectionMonitor;

      })();

    }).call(this);
    (function() {
      var i, message_types, protocols, ref, supportedProtocols, unsupportedProtocol,
        slice = [].slice,
        bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
        indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

      ref = ActionCable.INTERNAL, message_types = ref.message_types, protocols = ref.protocols;

      supportedProtocols = 2 <= protocols.length ? slice.call(protocols, 0, i = protocols.length - 1) : (i = 0, []), unsupportedProtocol = protocols[i++];

      ActionCable.Connection = (function() {
        Connection.reopenDelay = 500;

        function Connection(consumer) {
          this.consumer = consumer;
          this.open = bind(this.open, this);
          this.subscriptions = this.consumer.subscriptions;
          this.monitor = new ActionCable.ConnectionMonitor(this);
          this.disconnected = true;
        }

        Connection.prototype.send = function(data) {
          if (this.isOpen()) {
            this.webSocket.send(JSON.stringify(data));
            return true;
          } else {
            return false;
          }
        };

        Connection.prototype.open = function() {
          if (this.isActive()) {
            ActionCable.log("Attempted to open WebSocket, but existing socket is " + (this.getState()));
            return false;
          } else {
            ActionCable.log("Opening WebSocket, current state is " + (this.getState()) + ", subprotocols: " + protocols);
            if (this.webSocket != null) {
              this.uninstallEventHandlers();
            }
            this.webSocket = new ActionCable.WebSocket(this.consumer.url, protocols);
            this.installEventHandlers();
            this.monitor.start();
            return true;
          }
        };

        Connection.prototype.close = function(arg) {
          var allowReconnect, ref1;
          allowReconnect = (arg != null ? arg : {
            allowReconnect: true
          }).allowReconnect;
          if (!allowReconnect) {
            this.monitor.stop();
          }
          if (this.isActive()) {
            return (ref1 = this.webSocket) != null ? ref1.close() : void 0;
          }
        };

        Connection.prototype.reopen = function() {
          var error;
          ActionCable.log("Reopening WebSocket, current state is " + (this.getState()));
          if (this.isActive()) {
            try {
              return this.close();
            } catch (error1) {
              error = error1;
              return ActionCable.log("Failed to reopen WebSocket", error);
            } finally {
              ActionCable.log("Reopening WebSocket in " + this.constructor.reopenDelay + "ms");
              setTimeout(this.open, this.constructor.reopenDelay);
            }
          } else {
            return this.open();
          }
        };

        Connection.prototype.getProtocol = function() {
          var ref1;
          return (ref1 = this.webSocket) != null ? ref1.protocol : void 0;
        };

        Connection.prototype.isOpen = function() {
          return this.isState("open");
        };

        Connection.prototype.isActive = function() {
          return this.isState("open", "connecting");
        };

        Connection.prototype.isProtocolSupported = function() {
          var ref1;
          return ref1 = this.getProtocol(), indexOf.call(supportedProtocols, ref1) >= 0;
        };

        Connection.prototype.isState = function() {
          var ref1, states;
          states = 1 <= arguments.length ? slice.call(arguments, 0) : [];
          return ref1 = this.getState(), indexOf.call(states, ref1) >= 0;
        };

        Connection.prototype.getState = function() {
          var ref1, state, value;
          for (state in WebSocket) {
            value = WebSocket[state];
            if (value === ((ref1 = this.webSocket) != null ? ref1.readyState : void 0)) {
              return state.toLowerCase();
            }
          }
          return null;
        };

        Connection.prototype.installEventHandlers = function() {
          var eventName, handler;
          for (eventName in this.events) {
            handler = this.events[eventName].bind(this);
            this.webSocket["on" + eventName] = handler;
          }
        };

        Connection.prototype.uninstallEventHandlers = function() {
          var eventName;
          for (eventName in this.events) {
            this.webSocket["on" + eventName] = function() {};
          }
        };

        Connection.prototype.events = {
          message: function(event) {
            var identifier, message, ref1, type;
            if (!this.isProtocolSupported()) {
              return;
            }
            ref1 = JSON.parse(event.data), identifier = ref1.identifier, message = ref1.message, type = ref1.type;
            switch (type) {
              case message_types.welcome:
                this.monitor.recordConnect();
                return this.subscriptions.reload();
              case message_types.ping:
                return this.monitor.recordPing();
              case message_types.confirmation:
                return this.subscriptions.notify(identifier, "connected");
              case message_types.rejection:
                return this.subscriptions.reject(identifier);
              default:
                return this.subscriptions.notify(identifier, "received", message);
            }
          },
          open: function() {
            ActionCable.log("WebSocket onopen event, using '" + (this.getProtocol()) + "' subprotocol");
            this.disconnected = false;
            if (!this.isProtocolSupported()) {
              ActionCable.log("Protocol is unsupported. Stopping monitor and disconnecting.");
              return this.close({
                allowReconnect: false
              });
            }
          },
          close: function(event) {
            ActionCable.log("WebSocket onclose event");
            if (this.disconnected) {
              return;
            }
            this.disconnected = true;
            this.monitor.recordDisconnect();
            return this.subscriptions.notifyAll("disconnected", {
              willAttemptReconnect: this.monitor.isRunning()
            });
          },
          error: function() {
            return ActionCable.log("WebSocket onerror event");
          }
        };

        return Connection;

      })();

    }).call(this);
    (function() {
      var slice = [].slice;

      ActionCable.Subscriptions = (function() {
        function Subscriptions(consumer) {
          this.consumer = consumer;
          this.subscriptions = [];
        }

        Subscriptions.prototype.create = function(channelName, mixin) {
          var channel, params, subscription;
          channel = channelName;
          params = typeof channel === "object" ? channel : {
            channel: channel
          };
          subscription = new ActionCable.Subscription(this.consumer, params, mixin);
          return this.add(subscription);
        };

        Subscriptions.prototype.add = function(subscription) {
          this.subscriptions.push(subscription);
          this.consumer.ensureActiveConnection();
          this.notify(subscription, "initialized");
          this.sendCommand(subscription, "subscribe");
          return subscription;
        };

        Subscriptions.prototype.remove = function(subscription) {
          this.forget(subscription);
          if (!this.findAll(subscription.identifier).length) {
            this.sendCommand(subscription, "unsubscribe");
          }
          return subscription;
        };

        Subscriptions.prototype.reject = function(identifier) {
          var i, len, ref, results, subscription;
          ref = this.findAll(identifier);
          results = [];
          for (i = 0, len = ref.length; i < len; i++) {
            subscription = ref[i];
            this.forget(subscription);
            this.notify(subscription, "rejected");
            results.push(subscription);
          }
          return results;
        };

        Subscriptions.prototype.forget = function(subscription) {
          var s;
          this.subscriptions = (function() {
            var i, len, ref, results;
            ref = this.subscriptions;
            results = [];
            for (i = 0, len = ref.length; i < len; i++) {
              s = ref[i];
              if (s !== subscription) {
                results.push(s);
              }
            }
            return results;
          }).call(this);
          return subscription;
        };

        Subscriptions.prototype.findAll = function(identifier) {
          var i, len, ref, results, s;
          ref = this.subscriptions;
          results = [];
          for (i = 0, len = ref.length; i < len; i++) {
            s = ref[i];
            if (s.identifier === identifier) {
              results.push(s);
            }
          }
          return results;
        };

        Subscriptions.prototype.reload = function() {
          var i, len, ref, results, subscription;
          ref = this.subscriptions;
          results = [];
          for (i = 0, len = ref.length; i < len; i++) {
            subscription = ref[i];
            results.push(this.sendCommand(subscription, "subscribe"));
          }
          return results;
        };

        Subscriptions.prototype.notifyAll = function() {
          var args, callbackName, i, len, ref, results, subscription;
          callbackName = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];
          ref = this.subscriptions;
          results = [];
          for (i = 0, len = ref.length; i < len; i++) {
            subscription = ref[i];
            results.push(this.notify.apply(this, [subscription, callbackName].concat(slice.call(args))));
          }
          return results;
        };

        Subscriptions.prototype.notify = function() {
          var args, callbackName, i, len, results, subscription, subscriptions;
          subscription = arguments[0], callbackName = arguments[1], args = 3 <= arguments.length ? slice.call(arguments, 2) : [];
          if (typeof subscription === "string") {
            subscriptions = this.findAll(subscription);
          } else {
            subscriptions = [subscription];
          }
          results = [];
          for (i = 0, len = subscriptions.length; i < len; i++) {
            subscription = subscriptions[i];
            results.push(typeof subscription[callbackName] === "function" ? subscription[callbackName].apply(subscription, args) : void 0);
          }
          return results;
        };

        Subscriptions.prototype.sendCommand = function(subscription, command) {
          var identifier;
          identifier = subscription.identifier;
          return this.consumer.send({
            command: command,
            identifier: identifier
          });
        };

        return Subscriptions;

      })();

    }).call(this);
    (function() {
      ActionCable.Subscription = (function() {
        var extend;

        function Subscription(consumer, params, mixin) {
          this.consumer = consumer;
          if (params == null) {
            params = {};
          }
          this.identifier = JSON.stringify(params);
          extend(this, mixin);
        }

        Subscription.prototype.perform = function(action, data) {
          if (data == null) {
            data = {};
          }
          data.action = action;
          return this.send(data);
        };

        Subscription.prototype.send = function(data) {
          return this.consumer.send({
            command: "message",
            identifier: this.identifier,
            data: JSON.stringify(data)
          });
        };

        Subscription.prototype.unsubscribe = function() {
          return this.consumer.subscriptions.remove(this);
        };

        extend = function(object, properties) {
          var key, value;
          if (properties != null) {
            for (key in properties) {
              value = properties[key];
              object[key] = value;
            }
          }
          return object;
        };

        return Subscription;

      })();

    }).call(this);
    (function() {
      ActionCable.Consumer = (function() {
        function Consumer(url) {
          this.url = url;
          this.subscriptions = new ActionCable.Subscriptions(this);
          this.connection = new ActionCable.Connection(this);
        }

        Consumer.prototype.send = function(data) {
          return this.connection.send(data);
        };

        Consumer.prototype.connect = function() {
          return this.connection.open();
        };

        Consumer.prototype.disconnect = function() {
          return this.connection.close({
            allowReconnect: false
          });
        };

        Consumer.prototype.ensureActiveConnection = function() {
          if (!this.connection.isActive()) {
            return this.connection.open();
          }
        };

        return Consumer;

      })();

    }).call(this);
  }).call(this);

  if (typeof module === "object" && module.exports) {
    module.exports = ActionCable;
  } else if (typeof define === "function" && define.amd) {
    define(ActionCable);
  }
}).call(this);
// Action Cable provides the framework to deal with WebSockets in Rails.
// You can generate new channels where WebSocket features live using the `rails generate channel` command.
//




(function() {
  this.App || (this.App = {});

  App.cable = ActionCable.createConsumer();

}).call(this);
(function() {


}).call(this);
(function() {


}).call(this);
(function() {


}).call(this);
(function() {


}).call(this);
(function() {


}).call(this);
(function() {


}).call(this);
(function() {


}).call(this);
// This is a manifest file that'll be compiled into application.js, which will include all the files
// listed below.
//
// Any JavaScript/Coffee file within this directory, lib/assets/javascripts, or any plugin's
// vendor/assets/javascripts directory can be referenced here using a relative path.
//
// It's not advisable to add code directly here, but if you do, it'll appear at the bottom of the
// compiled file. JavaScript code in this file should be added after the last require_* statement.
//
// Read Sprockets README (https://github.com/rails/sprockets#sprockets-directives) for details
// about supported directives.
//






;
